<!DOCTYPE html><script type="module" src="/_astro/index.astro_astro_type_script_index_0_lang.CoXd8L9s.js"></script> <html lang="en-us" dir="ltr"> <head><script async src="https://ot.www.cloudflare.com/public/vendor/onetrust/scripttemplates/otSDKStub.js" data-document-language="true" type="text/javascript" data-domain-script="b1e05d49-f072-4bae-9116-bdb78af15448"></script><script type="text/javascript">
    window.loadScript = (url, { charset = 'UTF-8', ...attributes } = {}, location = 'head') => {
      const existingScript = document.querySelector('script[src="' + url + '"]');
      if (existingScript) {
        return;
      }

      const script = document.createElement('script');
      script.src = url;
      script.type = 'text/javascript';

      script.async = true;
      script.charset = charset;

      if (attributes) {
        Object.entries(attributes).forEach(([key, value]) => {
          script.setAttribute(key, value);
        });
      }

      if (location === 'head') {
        document.head.appendChild(script);
      } else {
        document.body.appendChild(script);
      }

      return script;
    };
  </script><meta name="HandheldFriendly" content="True"><meta name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="baidu-site-verification" content="KeThzeyMOr"><meta name="baidu-site-verification" content="code-NIlrS7gNhx"><meta charset="UTF-8"><meta name="description" content="Today, there's no way to audit a siteâs client-side code as it changes, making it hard to trust sites that use cryptography. We preview a specification we coauthored that adds auditability to the web.
"><title>Improving the trustworthiness of Javascript on the Web</title><meta name="title" content="Improving the trustworthiness of Javascript on the Web"><meta name="msvalidate.01" content="CF295E1604697F9CAD18B5A232E871F6"><meta class="swiftype" name="language" data-type="string" content="en"><script type="text/javascript">
    function OptanonWrapper() {
      if (!window.zarazTagManager.loaded && window.OnetrustActiveGroups.includes('C0004')) {
        window.zarazTagManager.loadZaraz();
      }

      if (window.zaraz && !window.OnetrustActiveGroups.includes('C0004')) {
        window.zaraz = undefined;
        window.zarazData = undefined;
        window.zarazTagManager.loaded = false;
      }

      if (!window.isCfCookieEventAttached) {
        window.isCfCookieEventAttached = true;
        window.addEventListener('consent.onetrust', async () => {
          await fetch('/', { method: 'HEAD' });
        });
      }
    }
    window.zarazTagManager = {
      loaded: false,
      getEndPoint() {
        return '/static/z/i.js';
      },
      loadZaraz() {
        window.loadScript(window.zarazTagManager.getEndPoint());
        window.zarazTagManager.loaded = true;
      },
    };
  </script><meta name="viewport" content="width=device-width, initial-scale=1.0"><link rel="apple-touch-icon" sizes="180x180" href="/images/favicon-32x32.png"><link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-32x32.png"><link rel="mask-icon" href="/images/favicon-32x32.png" color="#f78100"><link rel="stylesheet" href="/themes/ashes.min.css"><link rel="sitemap" href="/sitemap.xml"><meta name="msapplication-TileColor" content="#da532c"><meta name="theme-color" content="#ffffff"><link rel="canonical" href="https://blog.cloudflare.com/improving-the-trustworthiness-of-javascript-on-the-web/"><link rel="alternate" hreflang="en-us" href="https://blog.cloudflare.com/improving-the-trustworthiness-of-javascript-on-the-web/"><!-- General Meta Tags --><meta property="article:published_time" content="2025-10-16T14:00+00:00"><meta property="article:modified_time" content="2025-10-16T13:00:09.340Z"><meta property="article:tag" content="Security"><meta property="article:tag" content="Malicious JavaScript"><meta property="article:tag" content="JavaScript"><meta property="article:tag" content="Deep Dive"><meta property="article:tag" content="Cryptography"><meta property="article:tag" content="Research"><meta property="article:publisher" content="https://www.facebook.com/cloudflare"><!-- Facebook Meta Tags --><meta property="og:site_name" content="The Cloudflare Blog"><meta property="og:type" content="article"><meta property="og:title" content="Improving the trustworthiness of Javascript on the Web"><meta property="og:description" content="Today, there's no way to audit a siteâs client-side code as it changes, making it hard to trust sites that use cryptography. We preview a specification we coauthored that adds auditability to the web.
"><meta property="og:url" content="https://blog.cloudflare.com/improving-the-trustworthiness-of-javascript-on-the-web/"><meta property="og:image:width" content="1200"><meta property="og:image:height" content="628"><!-- Twitter/X Meta Tags --><meta name="twitter:title" content="Improving the trustworthiness of Javascript on the Web"><meta name="twitter:description" content="Today, there's no way to audit a siteâs client-side code as it changes, making it hard to trust sites that use cryptography. We preview a specification we coauthored that adds auditability to the web.
"><meta name="twitter:url" content="https://blog.cloudflare.com/improving-the-trustworthiness-of-javascript-on-the-web/"><meta name="twitter:card" content="summary_large_image"><meta name="twitter:label1" content="Written by"><meta name="twitter:data1" content="Michael Rosenberg"><meta name="twitter:label2" content="Filed under"><meta name="twitter:data2" content="Security,Malicious JavaScript,JavaScript,Deep Dive,Cryptography,Research"><meta name="twitter:site" content="@cloudflare"><meta property="og:image" content="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5j5YpBibRfLDbgQWfNYz4S/990ec92b60da30d6cf77f1ae5e8e9212/BLOG-2875_OG.png"><meta name="twitter:image" content="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5j5YpBibRfLDbgQWfNYz4S/990ec92b60da30d6cf77f1ae5e8e9212/BLOG-2875_OG.png"><link rel="stylesheet" href="/_astro/index.D82Gkzoe.css">
<style>@keyframes astroFadeInOut{0%{opacity:1}to{opacity:0}}@keyframes astroFadeIn{0%{opacity:0;mix-blend-mode:plus-lighter}to{opacity:1;mix-blend-mode:plus-lighter}}@keyframes astroFadeOut{0%{opacity:1;mix-blend-mode:plus-lighter}to{opacity:0;mix-blend-mode:plus-lighter}}@keyframes astroSlideFromRight{0%{transform:translate(100%)}}@keyframes astroSlideFromLeft{0%{transform:translate(-100%)}}@keyframes astroSlideToRight{to{transform:translate(100%)}}@keyframes astroSlideToLeft{to{transform:translate(-100%)}}@media (prefers-reduced-motion){::view-transition-group(*),::view-transition-old(*),::view-transition-new(*){animation:none!important}[data-astro-transition-scope]{animation:none!important}}
</style></head><style>astro-island,astro-slot,astro-static-slot{display:contents}</style><script>(()=>{var e=async t=>{await(await t())()};(self.Astro||(self.Astro={})).only=e;window.dispatchEvent(new Event("astro:only"));})();;(()=>{var A=Object.defineProperty;var g=(i,o,a)=>o in i?A(i,o,{enumerable:!0,configurable:!0,writable:!0,value:a}):i[o]=a;var d=(i,o,a)=>g(i,typeof o!="symbol"?o+"":o,a);{let i={0:t=>m(t),1:t=>a(t),2:t=>new RegExp(t),3:t=>new Date(t),4:t=>new Map(a(t)),5:t=>new Set(a(t)),6:t=>BigInt(t),7:t=>new URL(t),8:t=>new Uint8Array(t),9:t=>new Uint16Array(t),10:t=>new Uint32Array(t),11:t=>1/0*t},o=t=>{let[l,e]=t;return l in i?i[l](e):void 0},a=t=>t.map(o),m=t=>typeof t!="object"||t===null?t:Object.fromEntries(Object.entries(t).map(([l,e])=>[l,o(e)]));class y extends HTMLElement{constructor(){super(...arguments);d(this,"Component");d(this,"hydrator");d(this,"hydrate",async()=>{var b;if(!this.hydrator||!this.isConnected)return;let e=(b=this.parentElement)==null?void 0:b.closest("astro-island[ssr]");if(e){e.addEventListener("astro:hydrate",this.hydrate,{once:!0});return}let c=this.querySelectorAll("astro-slot"),n={},h=this.querySelectorAll("template[data-astro-template]");for(let r of h){let s=r.closest(this.tagName);s!=null&&s.isSameNode(this)&&(n[r.getAttribute("data-astro-template")||"default"]=r.innerHTML,r.remove())}for(let r of c){let s=r.closest(this.tagName);s!=null&&s.isSameNode(this)&&(n[r.getAttribute("name")||"default"]=r.innerHTML)}let p;try{p=this.hasAttribute("props")?m(JSON.parse(this.getAttribute("props"))):{}}catch(r){let s=this.getAttribute("component-url")||"<unknown>",v=this.getAttribute("component-export");throw v&&(s+=` (export ${v})`),console.error(`[hydrate] Error parsing props for component ${s}`,this.getAttribute("props"),r),r}let u;await this.hydrator(this)(this.Component,p,n,{client:this.getAttribute("client")}),this.removeAttribute("ssr"),this.dispatchEvent(new CustomEvent("astro:hydrate"))});d(this,"unmount",()=>{this.isConnected||this.dispatchEvent(new CustomEvent("astro:unmount"))})}disconnectedCallback(){document.removeEventListener("astro:after-swap",this.unmount),document.addEventListener("astro:after-swap",this.unmount,{once:!0})}connectedCallback(){if(!this.hasAttribute("await-children")||document.readyState==="interactive"||document.readyState==="complete")this.childrenConnectedCallback();else{let e=()=>{document.removeEventListener("DOMContentLoaded",e),c.disconnect(),this.childrenConnectedCallback()},c=new MutationObserver(()=>{var n;((n=this.lastChild)==null?void 0:n.nodeType)===Node.COMMENT_NODE&&this.lastChild.nodeValue==="astro:end"&&(this.lastChild.remove(),e())});c.observe(this,{childList:!0}),document.addEventListener("DOMContentLoaded",e)}}async childrenConnectedCallback(){let e=this.getAttribute("before-hydration-url");e&&await import(e),this.start()}async start(){let e=JSON.parse(this.getAttribute("opts")),c=this.getAttribute("client");if(Astro[c]===void 0){window.addEventListener(`astro:${c}`,()=>this.start(),{once:!0});return}try{await Astro[c](async()=>{let n=this.getAttribute("renderer-url"),[h,{default:p}]=await Promise.all([import(this.getAttribute("component-url")),n?import(n):()=>()=>{}]),u=this.getAttribute("component-export")||"default";if(!u.includes("."))this.Component=h[u];else{this.Component=h;for(let f of u.split("."))this.Component=this.Component[f]}return this.hydrator=p,this.hydrate},e,this)}catch(n){console.error(`[astro-island] Error hydrating ${this.getAttribute("component-url")}`,n)}}attributeChangedCallback(){this.hydrate()}}d(y,"observedAttributes",["props"]),customElements.get("astro-island")||customElements.define("astro-island",y)}})();</script><astro-island uid="Z2iRFh4" component-url="/_astro/GoogleAnalytics.O41kpLbs.js" component-export="GoogleAnalytics" renderer-url="/_astro/client.CI64Qvmy.js" props="{&quot;title&quot;:[0,&quot;Improving the trustworthiness of Javascript on the Web&quot;],&quot;canonical&quot;:[0,&quot;https://blog.cloudflare.com/improving-the-trustworthiness-of-javascript-on-the-web&quot;],&quot;info&quot;:[0,{&quot;id&quot;:[0,&quot;6GRxDReQHjD7T0xpfjf7Iq&quot;],&quot;title&quot;:[0,&quot;Improving the trustworthiness of Javascript on the Web&quot;],&quot;slug&quot;:[0,&quot;improving-the-trustworthiness-of-javascript-on-the-web&quot;],&quot;excerpt&quot;:[0,&quot;There&#39;s no way to audit a siteâs client-side code as it changes, making it hard to trust sites that use cryptography. We preview a specification we co-authored that adds auditability to the web.&quot;],&quot;featured&quot;:[0,false],&quot;html&quot;:[0,&quot;&lt;p&gt;The web is the most powerful application platform in existence. As long as you have the &lt;a href=\&quot;https://developer.mozilla.org/en-US/docs/Web/API\&quot;&gt;&lt;u&gt;right API&lt;/u&gt;&lt;/a&gt;, you can safely run anything you want in a browser.&lt;/p&gt;&lt;p&gt;Wellâ¦ anything but cryptography.&lt;/p&gt;&lt;p&gt;It is as true today as it was in 2011 that &lt;a href=\&quot;https://web.archive.org/web/20200731144044/https://www.nccgroup.com/us/about-us/newsroom-and-events/blog/2011/august/javascript-cryptography-considered-harmful/\&quot;&gt;&lt;u&gt;Javascript cryptography is Considered Harmful&lt;/u&gt;&lt;/a&gt;. The main problem is code distribution. Consider an end-to-end-encrypted messaging web application. The application generates &lt;a href=\&quot;https://www.cloudflare.com/learning/ssl/what-is-a-cryptographic-key/\&quot;&gt;&lt;u&gt;cryptographic keys&lt;/u&gt;&lt;/a&gt; in the clientâs browser that lets users view and send &lt;a href=\&quot;https://en.wikipedia.org/wiki/End-to-end_encryption\&quot;&gt;&lt;u&gt;end-to-end encrypted&lt;/u&gt;&lt;/a&gt; messages to each other. If the application is compromised, what would stop the malicious actor from simply modifying their Javascript to exfiltrate messages?&lt;/p&gt;&lt;p&gt;It is interesting to note that smartphone apps donât have this issue. This is because app stores do a lot of heavy lifting to provide security for the app ecosystem. Specifically, they provide &lt;b&gt;integrity&lt;/b&gt;, ensuring that apps being delivered are not tampered with, &lt;b&gt;consistency&lt;/b&gt;, ensuring all users get the same app, and &lt;b&gt;transparency&lt;/b&gt;, ensuring that the record of versions of an app is truthful and publicly visible.&lt;/p&gt;&lt;p&gt;It would be nice if we could get these properties for our end-to-end encrypted web application, and the web as a whole, without requiring a single central authority like an app store. Further, such a system would benefit all in-browser uses of cryptography, not just end-to-end-encrypted apps. For example, many web-based confidential &lt;a href=\&quot;https://www.cloudflare.com/learning/ai/what-is-large-language-model/\&quot;&gt;&lt;u&gt;LLMs&lt;/u&gt;&lt;/a&gt;, cryptocurrency wallets, and voting systems use in-browser Javascript cryptography for the last step of their verification chains.&lt;/p&gt;&lt;p&gt;In this post, we will provide an early look at such a system, called &lt;a href=\&quot;https://github.com/beurdouche/explainers/blob/main/waict-explainer.md\&quot;&gt;&lt;u&gt;Web Application Integrity, Consistency, and Transparency&lt;/u&gt;&lt;/a&gt; (WAICT) that we have helped author. WAICT is a &lt;a href=\&quot;https://www.w3.org/\&quot;&gt;&lt;u&gt;W3C&lt;/u&gt;&lt;/a&gt;-backed effort among browser vendors, cloud providers, and encrypted communication developers to bring stronger security guarantees to the entire web. We will discuss the problem we need to solve, and build up to a solution resembling the &lt;a href=\&quot;https://github.com/rozbb/draft-waict-transparency\&quot;&gt;&lt;u&gt;current transparency specification draft&lt;/u&gt;&lt;/a&gt;. We hope to build even wider consensus on the solution design in the near future.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;defining-the-web-application\&quot;&gt;Defining the Web Application&lt;/h2&gt;\n      &lt;a href=\&quot;#defining-the-web-application\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;In order to talk about security guarantees of a web application, it is first necessary to define precisely what the application &lt;i&gt;is&lt;/i&gt;. A smartphone application is essentially just a zip file. But a website is made up of interlinked assets, including HTML, Javascript, WASM, and CSS, that can each be locally or externally hosted. Further, if any asset changes, it could drastically change the functioning of the application. A coherent definition of an application thus requires the application to commit to precisely the assets it loads. This is done using integrity features, which we describe now.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;subresource-integrity\&quot;&gt;Subresource Integrity&lt;/h3&gt;\n      &lt;a href=\&quot;#subresource-integrity\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;An important building block for defining a single coherent application is &lt;b&gt;subresource integrity&lt;/b&gt; (SRI). SRI is a feature built into most browsers that permits a website to specify the cryptographic hash of external resources, e.g.,&lt;/p&gt;\n            &lt;pre class=\&quot;language-javascript\&quot;&gt;&lt;code class=\&quot;language-javascript\&quot;&gt;&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.13.7/underscore-min.js&amp;quot; integrity=&amp;quot;sha512-dvWGkLATSdw5qWb2qozZBRKJ80Omy2YN/aF3wTUVC5+D1eqbA+TjWpPpoj8vorK5xGLMa2ZqIeWCpDZP/+pQGQ==&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;This causes the browser to fetch &lt;code&gt;underscore.js&lt;/code&gt; from &lt;code&gt;cdnjs.cloudflare.com&lt;/code&gt; and verify that its SHA-512 hash matches the given hash in the tag. If they match, the script is loaded. If not, an error is thrown and nothing is executed.&lt;/p&gt;&lt;p&gt;If every external script, stylesheet, etc. on a page comes with an SRI integrity attribute, then the whole page is defined by just its HTML. This is close to what we want, but a web application can consist of many pages, and there is no way for a page to enforce the hash of the pages it links to.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;integrity-manifest\&quot;&gt;Integrity Manifest&lt;/h3&gt;\n      &lt;a href=\&quot;#integrity-manifest\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;We would like to have a way of enforcing integrity on an entire site, i.e., every asset under a domain. For this, WAICT defines an &lt;b&gt;integrity manifest&lt;/b&gt;, a configuration file that websites can provide to clients. One important item in the manifest is the &lt;b&gt;asset hashes dictionary&lt;/b&gt;, mapping a hash belonging to an asset that the browser might load from that domain, to the path of that asset. Assets that may occur at any path, e.g., an error page, map to the empty string:&lt;/p&gt;\n            &lt;pre class=\&quot;language-JSON\&quot;&gt;&lt;code class=\&quot;language-JSON\&quot;&gt;&amp;quot;hashes&amp;quot;: {\n&amp;quot;81db308d0df59b74d4a9bd25c546f25ec0fdb15a8d6d530c07a89344ae8eeb02&amp;quot;: &amp;quot;/assets/js/main.js&amp;quot;,\n&amp;quot;fbd1d07879e672fd4557a2fa1bb2e435d88eac072f8903020a18672d5eddfb7c&amp;quot;: &amp;quot;/index.html&amp;quot;,\n&amp;quot;5e737a67c38189a01f73040b06b4a0393b7ea71c86cf73744914bbb0cf0062eb&amp;quot;: &amp;quot;/vendored/main.css&amp;quot;,\n&amp;quot;684ad58287ff2d085927cb1544c7d685ace897b6b25d33e46d2ec46a355b1f0e&amp;quot;: &amp;quot;&amp;quot;,\n&amp;quot;f802517f1b2406e308599ca6f4c02d2ae28bb53ff2a5dbcddb538391cb6ad56a&amp;quot;: &amp;quot;&amp;quot;\n}\n&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;The other main component of the manifest is the &lt;b&gt;integrity policy&lt;/b&gt;, which tells the browser which data types are being enforced and how strictly. For example, the policy in the manifest below will:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Reject any script before running it, if itâs missing an SRI tag and doesnât appear in the hashes&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Reject any WASM possibly after running it, if itâs missing an SRI tag and doesnât appear in hashes&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;\n            &lt;pre class=\&quot;language-JSON\&quot;&gt;&lt;code class=\&quot;language-JSON\&quot;&gt;&amp;quot;integrity-policy&amp;quot;: &amp;quot;blocked-destinations=(script), checked-destinations=(wasm)&amp;quot;&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;Put together, these make up the integrity manifest:&lt;/p&gt;\n            &lt;pre class=\&quot;language-JSON\&quot;&gt;&lt;code class=\&quot;language-JSON\&quot;&gt;&amp;quot;manifest&amp;quot;: {\n  &amp;quot;version&amp;quot;: 1,\n  &amp;quot;integrity-policy&amp;quot;: ...,\n  &amp;quot;hashes&amp;quot;: ...,\n}\n&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;Thus, when both SRI and integrity manifests are used, the entire site and its interpretation by the browser is uniquely determined by the hash of the integrity manifest. This is exactly what we wanted. We have distilled the problem of endowing authenticity, consistent distribution, etc. to a web application to one of endowing the same properties to a single hash.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;achieving-transparency\&quot;&gt;Achieving Transparency&lt;/h2&gt;\n      &lt;a href=\&quot;#achieving-transparency\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Recall, a transparent web application is one whose code is stored in a publicly accessible, append-only log. This is helpful in two ways: 1) if a user is served malicious code and they learn about it, there is a public record of the code they ran, and so they can prove it to external parties, and 2) if a user is served malicious code and they donât learn about it, there is still a chance that an external auditor may comb through the historical web application code and find the malicious code anyway. Of course, transparency does not help detect malicious code or even prevent its distribution, but it at least makes it &lt;i&gt;publicly auditable&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Now that we have a single hash that commits to an entire websiteâs contents, we can talk about ensuring that that hash ends up in a public log. We have several important requirements here:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Do not break existing sites.&lt;/b&gt; This one is a given. Whatever system gets deployed, it should not interfere with the correct functioning of existing websites. Participation in transparency should be strictly opt-in.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;No added round trips.&lt;/b&gt; Transparency should not cause extra network round trips between the client and the server. Otherwise there will be a network latency penalty for users who want transparency.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;User privacy.&lt;/b&gt; A user should not have to identify themselves to any party more than they already do. That means no connections to new third parties, and no sending identifying information to the website.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;User statelessness.&lt;/b&gt; A user should not have to store site-specific data. We do not want solutions that rely on storing or gossipping per-site cryptographic information.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Non-centralization.&lt;/b&gt; There should not be a single point of failure in the systemâif any single party experiences downtime, the system should still be able to make progress. Similarly, there should be no single point of trustâif a user distrusts any single party, the user should still receive all the security benefits of the system.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Ease of opt-in.&lt;/b&gt; The barrier of entry for transparency should be as low as possible. A site operator should be able to start logging their site cheaply and without being an expert.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Ease of opt-out.&lt;/b&gt; It should be easy for a website to stop participating in transparency. Further, to avoid accidental lock-in like the &lt;a href=\&quot;https://en.wikipedia.org/wiki/HTTP_Public_Key_Pinning#Criticism_and_decline\&quot;&gt;&lt;u&gt;defunct HPKP spec&lt;/u&gt;&lt;/a&gt;, it should be possible for this to happen even if all cryptographic material is lost, e.g., in the seizure or selling of a domain.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Opt-out is transparent.&lt;/b&gt; As described before, because transparency is optional, it is possible for an attacker to disable the siteâs transparency, serve malicious content, then enable transparency again. We must make sure this kind of attack is detectable, i.e., the act of disabling transparency must itself be logged somewhere.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Monitorability.&lt;/b&gt; A website operator should be able to efficiently monitor the transparency information being published about their website. In particular, they should not have to run a high-network-load, always-on program just to notify them if their site has been hijacked.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;With these requirements in place, we can move on to construction. We introduce a data structure that will be essential to the design.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;hash-chain\&quot;&gt;Hash Chain&lt;/h3&gt;\n      &lt;a href=\&quot;#hash-chain\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Almost everything in transparency is an append-only log, i.e., a data structure that acts like a list and has the ability to produce an &lt;b&gt;inclusion proof&lt;/b&gt;, i.e., a proof that an element occurs at a particular index in the list; and a &lt;b&gt;consistency proof&lt;/b&gt;, i.e., a proof that a list is an extension of a previous version of the list. A consistency proof between two lists demonstrates that no elements were modified or deleted, only added.&lt;/p&gt;&lt;p&gt;The simplest possible append-only log is a &lt;b&gt;hash chain&lt;/b&gt;, a list-like data structure wherein each subsequent element is hashed into the running &lt;i&gt;chain hash&lt;/i&gt;. The final chain hash is a succinct representation of the entire list.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5nVcIeoKTYEd0hydT9jdpj/fd90a78cba46c1893058a7ff40a42fac/BLOG-2875_2.png\&quot; alt=\&quot;Two rows of three circles each. The top row (green) is shifted to the right of the bottom row (orange). Each green node has a solid line connecting it to the orange node to its bottom-left, and the green node to its left, if there is one. The orange nodes are labeled, from left to right, elem1, elem2, elem3. The green nodes are labeled, from left to right, âch1 = H(elem1)â, âch2 = H(ch1, elem2)â, and âch3 = H(ch2, elem3)â.\&quot; class=\&quot;kg-image\&quot; width=\&quot;1424\&quot; height=\&quot;820\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;&lt;sub&gt;A hash chain. The green nodes represent the &lt;/sub&gt;&lt;sub&gt;&lt;i&gt;chain hash&lt;/i&gt;&lt;/sub&gt;&lt;sub&gt;, i.e., the hash of the element below it, concatenated with the previous chain hash. &lt;/sub&gt;&lt;/p&gt;&lt;p&gt;The proof structures are quite simple. To prove inclusion of the element at index i, the prover provides the chain hash before &lt;code&gt;i&lt;/code&gt;, and all the elements after &lt;code&gt;i&lt;/code&gt;:&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7tYbCRVVTV3osE3lWs8YjG/be76d6022420ffa3d78b0180ef69bb1a/BLOG-2875_3.png\&quot; alt=\&quot;Three labeled components. The first component, labeled âinclusion proofâ, is a box containing a green node labeled ch1, and two orange circles labeled elem2 and elem3, respectively. The second component, labeled âVerifier knowsâ is a box containing a single green node with a purple ring around it, labeled ch-prime-3. The third component, labeled âVerifier computesâ, is as follows. Similar to the hash chain before, there is a top row of three green nodes and a bottom row of two orange nodes. As before, there are lines connecting each green node to its left and bottom-left neighbor, but now these lines are light grey and dashed. The orange nodes are labeled elem2 and elem3. The leftmost node in the top row is labeled ch1. The remaining top row nodes are lighter green. They are labeled ch2 and ch3. Finally, separately from the rows, there is an equation, with a question mark above the equals sign.Â  On the left hand side is a copy of the light green node labeled ch3. On the right hand side is a copy of the node labeled ch-prime-3.Â \&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;859\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;&lt;sub&gt;Proof of inclusion for the second element in the hash chain. The verifier knows only the final chain hash. It checks equality of the final computed chain hash with the known final chain hash. The light green nodes represent hashes that the verifier computes. &lt;/sub&gt;&lt;/p&gt;&lt;p&gt;Similarly, to prove consistency between the chains of size i and j, the prover provides the elements between i and j:&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/rR4DMJIVxNxePI6DARtFD/e9da2930043864a4add3a74b699535d6/BLOG-2875_4.png\&quot; alt=\&quot;Three labeled components. The first component, labeled âconsistency proofâ, is a box containing two orange circles labeled elem2 and elem3. The next component, labeled âverifier knows,â is a box containing chain hash values ch-prime-1 and ch-prime-3, both in green with a purple ring around it. The third component, labeled âverifier computesâ is as follows. Similar to the hash chain before, there is a top row of three green nodes and a bottom row of two orange nodes. Again, all lines are grey and dashed, the orange nodes are labeled elem2 and elem3, and the two rightmost green nodes are light green and labeled ch2 and ch3. The leftmost node in the top row is now labeled ch-prime-1. Finally, as before, there is an equation comparing ch3 with ch-prime-3.\&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;668\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;&lt;sub&gt;Proof of consistency of the chain of size one and chain of size three. The verifier has the chain hashes from the starting and ending chains. It checks equality of the final computed chain hash with the known ending chain hash. The light green nodes represent hashes that the verifier computes. &lt;/sub&gt;&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;building-transparency\&quot;&gt;Building Transparency&lt;/h3&gt;\n      &lt;a href=\&quot;#building-transparency\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;We can use hash chains to build a transparency scheme for websites.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h4 id=\&quot;per-site-logs\&quot;&gt;Per-Site Logs&lt;/h4&gt;\n      &lt;a href=\&quot;#per-site-logs\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;As a first step, letâs give every site its own log, instantiated as a hash chain (we will discuss how these all come together into one big log later). The items of the log are just the manifest of the site at a particular point in time:&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/35o9mKoVPkOExKRFHRgWTu/305d589e0a584a3200670aab5b060c2b/BLOG-2875_5.png\&quot; alt=\&quot;A hash chain as originally. The bottom row is three orange circles and the top row is three green circles, shifted to the right of the bottom row. The top rightmost circle is labeled âchain hashâ. The bottom row circles are labeled manifest1, manifest2, and manifest3. Solid lines connect each green circle with the green one to its left (if it exists) and an orange circle to its bottom left.\&quot; class=\&quot;kg-image\&quot; width=\&quot;1540\&quot; height=\&quot;656\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;&lt;sub&gt;A siteâs hash chain-based log, containing three historical manifests. &lt;/sub&gt;&lt;/p&gt;&lt;p&gt;In reality, the log does not store the manifest itself, but the manifest hash. Sites designate an &lt;b&gt;asset host&lt;/b&gt; that knows how to map hashes to the data they reference. This is a content-addressable storage backend, and can be implemented using strongly cached static hosting solutions.&lt;/p&gt;&lt;p&gt;A log on its own is not very trustworthy. Whoever runs the log can add and remove elements at will and then recompute the hash chain. To maintain the append-only-ness of the chain, we designate a trusted third party, called a &lt;b&gt;witness&lt;/b&gt;. Given a hash chain consistency proof and a new chain hash, a witness:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Verifies the consistency proof with respect to its old stored chain hash, and the new provided chain hash.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;If successful, signs the new chain hash along with a signature timestamp.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Now, when a user navigates to a website with transparency enabled, the sequence of events is:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;The site serves its manifest, an inclusion proof showing that the manifest appears in the log, and all the signatures from all the witnesses who have validated the log chain hash.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The browser verifies the signatures from whichever witnesses it trusts.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The browser verifies the inclusion proof. The manifest must be the newest entry in the chain (we discuss how to serve old manifests later).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The browser proceeds with the usual manifest and SRI integrity checks.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;At this point, the user knows that the given manifest has been recorded in a log whose chain hash has been saved by a trustworthy witness, so they can be reasonably sure that the manifest wonât be removed from history. Further, assuming the asset host functions correctly, the user knows that a copy of all the received code is readily available.&lt;/p&gt;&lt;p&gt;&lt;b&gt;The need to signal transparency.&lt;/b&gt; The above algorithm works, but we have a problem: if an attacker takes control of a site, they can simply stop serving transparency information and thus implicitly disable transparency without detection. So we need an explicit mechanism that keeps track of every website that has enrolled into transparency.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;the-transparency-service\&quot;&gt;The Transparency Service&lt;/h3&gt;\n      &lt;a href=\&quot;#the-transparency-service\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;To store all the sites enrolled into transparency, we want a global data structure that maps a site domain to the site logâs chain hash. One efficient way of representing this is a &lt;b&gt;prefix tree&lt;/b&gt; (a.k.a., a &lt;i&gt;trie&lt;/i&gt;). Every leaf in the tree corresponds to a siteâs domain, and its value is the chain hash of that siteâs log, the current log size, and the siteâs asset host URL. For a site to prove validity of its transparency data, it will have to present an inclusion proof for its leaf. Fortunately, these proofs are efficient for prefix trees.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/26ieMXRdvWIhLKv6J6Cdd7/29814a4a51c8ca8e3279e9b5756d0c67/BLOG-2875_6.png\&quot; alt=\&quot;A binary tree. Each node is a blue circle. The top circle, the root node, is labeled âroot hashâ. Two solid lines come out of the bottom of the root node, one to the left and one to the right. The left one is labeled with the alphabet range âa-oâ. It connects to a node labeled âexample.comâ. This node has a curvy dashed arrow coming from it and pointing to the rightmost green node in a miniature hash chain representation. The right line coming from the root node is labeled with the alphabet range âp-zâ, and connects to another blue node. This node itself has children. The right line is labeled with the alphabet range âr-zâ and connects to a node labeled ârust-lang.orgâ. The left line is labeled with the alphabet range âp-qâ and connects to another blue node. This blue node itself has children. The left line is labeled with the alphabet range âpa-psâ and connects to a node labeled âpets.comâ. The right line is labeled with the alphabet range âpr-qâ and connects to a node labeled âproduces.comâ.\&quot; class=\&quot;kg-image\&quot; width=\&quot;1988\&quot; height=\&quot;1568\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;&lt;sub&gt;A prefix tree with four elements. Each leafâs path corresponds to a domain. Each leafâs value is the chain hash of its siteâs log. &lt;/sub&gt;&lt;/p&gt;&lt;p&gt;To add itself to the tree, a site proves possession of its domain to the &lt;b&gt;transparency service&lt;/b&gt;, i.e., the party that operates the prefix tree, and provides an asset host URL. To update the entry, the site sends the new entry to the transparency service, which will compute the new chain hash. And to unenroll from transparency, the site just requests to have its entry removed from the tree (an adversary can do this too; we discuss how to detect this below).&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h4 id=\&quot;proving-to-witnesses-and-browsers\&quot;&gt;Proving to Witnesses and Browsers&lt;/h4&gt;\n      &lt;a href=\&quot;#proving-to-witnesses-and-browsers\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Now witnesses only need to look at the prefix tree instead of individual site logs, and thus they must verify whole-tree updates. The most important thing to ensure is that every siteâs log is append-only. So whenever the tree is updated, it must produce a âproofâ containing every new/deleted/modified entry, as well as a consistency proof for each entry showing that the site log corresponding to that entry has been properly appended to. Once the witness has verified this prefix tree update proof, it signs the root.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2bq4UBxoOgKPcysPPxnKD8/9e8c2a8a3b092fffae853b8d477efb07/BLOG-2875_7.png\&quot; alt=\&quot;A sequence diagram with parties, left to right, User, Site, Asset Host, Transparency Service, and Witnesses. The sequence is as follows. The site sends new assets to the asset host and the new manifest hash to the transparency service. The transparency service waits to collect these updates from many sites. Eventually, the transparency service sends a new root and tree update proof to the witnesses, and gets back a many-times signed root. It returns the signed root and prefix tree inclusion proof to the site. Later, a user connects to the site, requesting GET /index.html. The site responds with index.html, the signed root, the inclusion proof, and the integrity manifest. The user checks the integrity, inclusion proof, and signatures.\&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;1973\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;&lt;sub&gt;The sequence of updating a siteâs assets and serving the site with transparency enabled.&lt;/sub&gt;&lt;/p&gt;&lt;p&gt;The client-side verification procedure is as in the previous section, with two modifications:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;The client now verifies two inclusion proofs: one for the integrity policyâs membership in the site log, and one for the site logâs membership in a prefix tree.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The client verifies the signature over the prefix tree root, since the witness no longer signs individual chain hashes. As before, the acceptable public keys are whichever witnesses the client trusts.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;b&gt;Signaling transparency.&lt;/b&gt; Now that there is a single source of truth, namely the prefix tree, a client can know a site is enrolled in transparency by simply fetching the siteâs entry in the tree. This alone would work, but it violates our requirement of âno added round trips,â so we instead require that client browsers will ship with the list of sites included in the prefix tree. We call this the &lt;b&gt;transparency preload list&lt;/b&gt;.Â &lt;/p&gt;&lt;p&gt;If a site appears in the preload list, the browser will expect it to provide an inclusion proof in the prefix tree, or else a proof of non-inclusion in a newer version of the prefix tree, thereby showing theyâve unenrolled. The site must provide one of these proofs until the last preload list it appears in has expired. Finally, even though the preload list is derived from the prefix tree, there is nothing enforcing this relationship. Thus, the preload list should also be published transparently.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h4 id=\&quot;filling-in-missing-properties\&quot;&gt;Filling in Missing Properties&lt;/h4&gt;\n      &lt;a href=\&quot;#filling-in-missing-properties\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Remember we still have the requirements of monitorability, opt-out being transparent, and no single point of failure/trust. We fill in those details now.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Adding monitorability.&lt;/b&gt; So far, in order for a site operator to ensure their site was not hijacked, they would have to constantly query every transparency service for its domain and verify that it hasnât been tampered with. This is certainly better than the &lt;a href=\&quot;https://ct.cloudflare.com/\&quot;&gt;&lt;u&gt;500k events per hour&lt;/u&gt;&lt;/a&gt; that CT monitors have to ingest, but it still requires the monitor to be constantly polling the prefix tree, and it imposes a constant load for the transparency service.&lt;/p&gt;&lt;p&gt;We add a field to the prefix tree leaf structure: the leaf now stores a âcreatedâ timestamp, containing the time the leaf was created. Witnesses ensure that the âcreatedâ field remains the same over all leaf updates (and it is deleted when the leaf is deleted). To monitor, a site operator need only keep the last observed âcreatedâ and âlog sizeâ fields of its leaf. If it fetches the latest leaf and sees both unchanged, it knows that no changes occurred since the last check.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Adding transparency of opt-out.&lt;/b&gt; We must also do the same thing as above for leaf deletions. When a leaf is deleted, a monitor should be able to learn when the deletion occurred within some reasonable time frame. Thus, rather than outright removing a leaf, the transparency service responds to unenrollment requests by replacing the leaf with a &lt;b&gt;tombstone&lt;/b&gt; value, containing just a âcreatedâ timestamp. As before, witnesses ensure that this field remains unchanged until the leaf is permanently deleted (after some visibility period) or re-enrolled.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Permitting multiple transparency services.&lt;/b&gt; Since we require that there be no single point of failure or trust, we imagine an ecosystem where there are a handful of non-colluding, reasonably trustworthy transparency service providers, each with their own prefix tree. Like Certificate Transparency (CT), this set should not be too large. It must be small enough that reasonable levels of trust can be established, and so that independent auditors can reasonably handle the load of verifying all of them.&lt;/p&gt;&lt;p&gt;Ok thatâs the end of the most technical part of this post. Weâre now going to talk about how to tweak this system to provide all kinds of additional nice properties.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;not-achieving-consistency\&quot;&gt;(Not) Achieving Consistency&lt;/h2&gt;\n      &lt;a href=\&quot;#not-achieving-consistency\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Transparency would be useless if, every time a site updates, it serves 100,000 new versions of itself. Any auditor would have to go through every single version of the code in order to ensure no user was targeted with malware. This is bad even if the velocity of versions is lower. If a site publishes just one new version per week, but every version from the past ten years is still servable, then users can still be served extremely old, potentially vulnerable versions of the site, without anyone knowing. Thus, in order to make transparency valuable, we need &lt;b&gt;consistency&lt;/b&gt;, the property that every browser sees the same version of the site at a given time.&lt;/p&gt;&lt;p&gt;We will not achieve the strongest version of consistency, but it turns out that weaker notions are sufficient for us. If, unlike the above scenario, a site had 8 valid versions of itself at a given time, then that would be pretty manageable for an auditor. So even though itâs true that users donât all see the same version of the site, they will all still benefit from transparency, as desired.&lt;/p&gt;&lt;p&gt;We describe two types of inconsistency and how we mitigate them.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;tree-inconsistency\&quot;&gt;Tree Inconsistency&lt;/h3&gt;\n      &lt;a href=\&quot;#tree-inconsistency\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Tree inconsistency occurs when transparency servicesâ prefix trees disagree on the chain hash of a site, thus disagreeing on the history of the site. One way to fully eliminate this is to establish a consensus mechanism for prefix trees. A simple one is majority voting: if there are five transparency services, a site must present three tree inclusion proofs to a user, showing the chain hash is present in three trees. This, of course, triples the tree inclusion proof size, and lowers the fault tolerance of the entire system (if three log operators go down, then no transparent site can publish any updates).&lt;/p&gt;&lt;p&gt;Instead of consensus, we opt to simply limit the amount of inconsistency by limiting the number of transparency services. In 2025, Chrome &lt;a href=\&quot;https://www.gstatic.com/ct/log_list/v3/log_list.json\&quot;&gt;&lt;u&gt;trusts&lt;/u&gt;&lt;/a&gt; eight Certificate Transparency logs. A similar number of transparency services would be fine for our system. Plus, it is still possible to detect and prove the existence of inconsistencies between trees, since roots are signed by witnesses. So if it becomes the norm to use the same version on all trees, then social pressure can be applied when sites violate this.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;temporal-inconsistency\&quot;&gt;Temporal Inconsistency&lt;/h3&gt;\n      &lt;a href=\&quot;#temporal-inconsistency\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Temporal inconsistency occurs when a user gets a newer or older version of the site (both still unexpired), depending on some external factors such as geographic location or cookie values. In the extreme, as stated above, if a signed prefix root is valid for ten years, then a site can serve a user any version of the site from the last ten years.&lt;/p&gt;&lt;p&gt;As with tree inconsistency, this can be resolved using consensus mechanisms. If, for example, the latest manifest were published on a blockchain, then a user could fetch the latest blockchain head and ensure they got the latest version of the site. However, this incurs an extra network round trip for the client, and requires sites to wait for their hash to get published on-chain before they can update. More importantly, building this kind of consensus mechanism into our specification would drastically increase its complexity. Weâre aiming for v1.0 here.&lt;/p&gt;&lt;p&gt;We mitigate temporal inconsistency by requiring reasonably short validity periods for witness signatures. Making prefix root signatures valid for, e.g., one week would drastically limit the number of simultaneously servable versions. The cost is that site operators must now query the transparency service at least once a week for the new signed root and inclusion proof, even if nothing in the site changed. The sites cannot skip this, and the transparency service must be able to handle this load. This parameter must be tuned carefully.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;beyond-integrity-consistency-and-transparency\&quot;&gt;Beyond Integrity, Consistency, and Transparency&lt;/h2&gt;\n      &lt;a href=\&quot;#beyond-integrity-consistency-and-transparency\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Providing integrity, consistency, and transparency is already a huge endeavor, but there are some additional app store-like security features that can be integrated into this system without too much work.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;code-signing\&quot;&gt;Code Signing&lt;/h3&gt;\n      &lt;a href=\&quot;#code-signing\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;One problem that WAICT doesnât solve is that of &lt;i&gt;provenance&lt;/i&gt;: where did the code the user is running come from, precisely? In settings where audits of code happen frequently, this is not so important, because some third party will be reading the code regardless. But for smaller self-hosted deployments of open-source software, this may not be viable. For example, if Alice hosts her own version of &lt;a href=\&quot;https://cryptpad.org/\&quot;&gt;&lt;u&gt;Cryptpad&lt;/u&gt;&lt;/a&gt; for her friend Bob, how can Bob be sure the code matches the real code in Cryptpadâs Github repo?&lt;/p&gt;&lt;p&gt;&lt;b&gt;WEBCAT.&lt;/b&gt; The folks at the Freedom of Press Foundation (FPF) have built a solution to this, called &lt;a href=\&quot;https://securedrop.org/news/introducing-webcat-web-based-code-assurance-and-transparency/\&quot;&gt;&lt;u&gt;WEBCAT&lt;/u&gt;&lt;/a&gt;. This protocol allows site owners to announce the identities of the developers that have signed the siteâs integrity manifest, i.e., have signed all the code and other assets that the site is serving to the user. Users with the WEBCAT plugin can then see the developerâs &lt;a href=\&quot;https://www.sigstore.dev/\&quot;&gt;&lt;u&gt;Sigstore&lt;/u&gt;&lt;/a&gt; signatures, and trust the code based on that.&lt;/p&gt;&lt;p&gt;Weâve made WAICT extensible enough to fit WEBCAT inside and benefit from the transparency components. Concretely, we permit manifests to hold additional metadata, which we call &lt;b&gt;extensions&lt;/b&gt;. In this case, the extension holds a list of developersâ Sigstore identities. To be useful, browsers must expose an API for browser plugins to access these extension values. With this API, independent parties can build plugins for whatever feature they wish to layer on top of WAICT.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;cooldown\&quot;&gt;Cooldown&lt;/h2&gt;\n      &lt;a href=\&quot;#cooldown\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;So far we have not built anything that can prevent attacks in the moment. An attacker who breaks into a website can still delete any code-signing extensions, or just unenroll the site from transparency entirely, and continue with their attack as normal. The unenrollment will be logged, but the malicious code will not be, and by the time anyone sees the unenrollment, it may be too late.&lt;/p&gt;&lt;p&gt;To prevent spontaneous unenrollment, we can enforce &lt;b&gt;unenrollment cooldown&lt;/b&gt; client-side. Suppose the cooldown period is 24 hours. Then the rule is: if a site appears on the preload list, then the client will require that either 1) the site have transparency enabled, or 2) the site have a tombstone entry that is at least 24 hours old. Thus, an attacker will be forced to either serve a transparency-enabled version of the site, or serve a broken site for 24 hours.&lt;/p&gt;&lt;p&gt;Similarly, to prevent spontaneous extension modifications, we can enforce &lt;b&gt;extension cooldown&lt;/b&gt; on the client. We will take code signing as an example, saying that any change in developer identities requires a 24 hour waiting period to be accepted. First, we require that extension &lt;code&gt;dev-ids&lt;/code&gt; has a preload list of its own, letting the client know which sites have opted into code signing (if a preload list doesnât exist then any site can delete the extension at any time). The client rule is as follows: if the site appears in the preload list, then both 1) &lt;code&gt;dev-ids&lt;/code&gt; must exist as an extension in the manifest, and 2) &lt;code&gt;dev-ids-inclusion&lt;/code&gt; must contain an inclusion proof showing that the current value of dev-ids was in a prefix tree that is at least 24 hours old. With this rule, a client will reject values of &lt;code&gt;dev-ids&lt;/code&gt; that are newer than a day. If a site wants to delete &lt;code&gt;dev-ids&lt;/code&gt;, they must 1) request that it be removed from the preload list, and 2) in the meantime, replace the dev-ids value with the empty string and update &lt;code&gt;dev-ids-inclusion&lt;/code&gt; to reflect the new value.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;deployment-considerations\&quot;&gt;Deployment Considerations&lt;/h2&gt;\n      &lt;a href=\&quot;#deployment-considerations\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;There are a lot of distinct roles in this ecosystem. Letâs sketch out the trust and resource requirements for each role.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Transparency service.&lt;/b&gt; These parties store metadata for every transparency-enabled site on the web. If there are 100 million domains, and each entry is 256B each (a few hashes, plus a URL), this comes out to 26GB for a single tree, not including the intermediate hashes. To prevent size blowup, there would probably have to be a pruning rule that unenrolls sites after a long inactivity period. Transparency services should have largely uncorrelated downtime, since, if all services go down, no transparency-enabled site can make any updates. Thus, transparency services must have a moderate amount of storage, be relatively highly available, and have downtime periods uncorrelated with each other.&lt;/p&gt;&lt;p&gt;Transparency services require some trust, but their behavior is narrowly constrained by witnesses. Theoretically, a service can replace any leafâs chain hash with its own, and the witness will validate it (as long as the consistency proof is valid). But such changes are detectable by anyone that monitors that leaf.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Witness.&lt;/b&gt; These parties verify prefix tree updates and sign the resulting roots. Their storage costs are similar to that of a transparency service, since they must keep a full copy of a prefix tree for every transparency service they witness. Also like the transparency services, they must have high uptime. Witnesses must also be trusted to keep their signing key secret for a long period of time, at least long enough to permit browser trust stores to be updated when a new key is created.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Asset host.&lt;/b&gt; These parties carry little trust. They cannot serve bad data, since any query response is hashed and compared to a known hash. The only malicious behavior an asset host can do is refuse to respond to queries. Asset hosts can also do this by accident due to downtime.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Client.&lt;/b&gt; This is the most trust-sensitive part. The client is the software that performs all the transparency and integrity checks. This is, of course, the web browser itself. We must trust this.&lt;/p&gt;&lt;p&gt;We at Cloudflare would like to contribute what we can to this ecosystem. It should be possible to run both a transparency service and a witness. Of course, our witness should not monitor our own transparency service. Rather, we can witness other organizationsâ transparency services, and our transparency service can be witnessed by other organizations.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;supporting-alternate-ecosystems\&quot;&gt;Supporting Alternate Ecosystems&lt;/h3&gt;\n      &lt;a href=\&quot;#supporting-alternate-ecosystems\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;WAICT should be compatible with non-standard ecosystems, ones where the large players do not really exist, or at least not in the way they usually do. We are working with the FPF on defining transparency for alternate ecosystems with different network and trust environments. The primary example we have is that of the Tor ecosystem.&lt;/p&gt;&lt;p&gt;A paranoid Tor user may not trust existing transparency services or witnesses, and there might not be any other trusted party with the resources to self-host these functionalities. For this use case, it may be reasonable to put the &lt;a href=\&quot;https://github.com/freedomofpress/webcat-infra-chain\&quot;&gt;&lt;u&gt;prefix tree on a blockchain somewhere&lt;/u&gt;&lt;/a&gt;. This makes the usual domain validation impossible (thereâs no validator server to speak of), but this is fine for onion services. Since an onion address is just a public key, a signature is sufficient to prove ownership of the domain.&lt;/p&gt;&lt;p&gt;One consequence of a consensus-backed prefix tree is that witnesses are now unnecessary, and there is only need for the single, canonical, transparency service. This mostly solves the problems of tree inconsistency at the expense of latency of updates.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;next-steps\&quot;&gt;Next Steps&lt;/h2&gt;\n      &lt;a href=\&quot;#next-steps\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;We are still very early in the standardization process. One of the more immediate next steps is to get subresource integrity working for more data types, particularly WASM and images. After that, we can begin standardizing the integrity manifest format. And then after that we can start standardizing all the other features. We intend to work on this specification hand-in-hand with browsers and the IETF, and we hope to have some exciting betas soon.&lt;/p&gt;&lt;p&gt;In the meantime, you can follow along with our &lt;a href=\&quot;https://github.com/rozbb/draft-waict-transparency\&quot;&gt;&lt;u&gt;transparency specification draft&lt;/u&gt;&lt;/a&gt;, check out the open problems, and share your ideas. Pull requests and issues are always welcome!&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;acknowledgements\&quot;&gt;Acknowledgements&lt;/h2&gt;\n      &lt;a href=\&quot;#acknowledgements\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Many thanks to Dennis Jackson from Mozilla for the lengthy back-and-forth meetings on design, to Giulio B and Cory Myers from FPF for their immensely helpful influence and feedback, and to Richard Hansen for great feedback.&lt;/p&gt;&quot;],&quot;published_at&quot;:[0,&quot;2025-10-16T14:00+00:00&quot;],&quot;updated_at&quot;:[0,&quot;2025-10-16T13:00:09.340Z&quot;],&quot;feature_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1ycccYkFLGh6O5X82vi46F/c39a22d072a2b8f731315b76a672ff27/BLOG-2875_1.png&quot;],&quot;tags&quot;:[1,[[0,{&quot;id&quot;:[0,&quot;6Mp7ouACN2rT3YjL1xaXJx&quot;],&quot;name&quot;:[0,&quot;Security&quot;],&quot;slug&quot;:[0,&quot;security&quot;]}],[0,{&quot;id&quot;:[0,&quot;7BhREQYSSCo9INFzIXH0G0&quot;],&quot;name&quot;:[0,&quot;Malicious JavaScript&quot;],&quot;slug&quot;:[0,&quot;malicious-javascript&quot;]}],[0,{&quot;id&quot;:[0,&quot;78aSAeMjGNmCuetQ7B4OgU&quot;],&quot;name&quot;:[0,&quot;JavaScript&quot;],&quot;slug&quot;:[0,&quot;javascript&quot;]}],[0,{&quot;id&quot;:[0,&quot;2UVIYusJwlvsmPYl2AvSuR&quot;],&quot;name&quot;:[0,&quot;Deep Dive&quot;],&quot;slug&quot;:[0,&quot;deep-dive&quot;]}],[0,{&quot;id&quot;:[0,&quot;1QsJUMpv0QBSLiVZLLQJ3V&quot;],&quot;name&quot;:[0,&quot;Cryptography&quot;],&quot;slug&quot;:[0,&quot;cryptography&quot;]}],[0,{&quot;id&quot;:[0,&quot;1x7tpPmKIUCt19EDgM1Tsl&quot;],&quot;name&quot;:[0,&quot;Research&quot;],&quot;slug&quot;:[0,&quot;research&quot;]}]]],&quot;relatedTags&quot;:[0],&quot;authors&quot;:[1,[[0,{&quot;name&quot;:[0,&quot;Michael Rosenberg&quot;],&quot;slug&quot;:[0,&quot;michael-rosenberg&quot;],&quot;bio&quot;:[0],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/65QlcKadfDOXGKGv78Y4Cz/b7562dd249bffe7e919d99a6b0cb63b3/Michael_Rosenberg.jpg&quot;],&quot;location&quot;:[0],&quot;website&quot;:[0],&quot;twitter&quot;:[0],&quot;facebook&quot;:[0],&quot;publiclyIndex&quot;:[0,true]}]]],&quot;meta_description&quot;:[0,&quot;Today, there&#39;s no way to audit a siteâs client-side code as it changes, making it hard to trust sites that use cryptography. We preview a specification we coauthored that adds auditability to the web.\n&quot;],&quot;primary_author&quot;:[0,{}],&quot;localeList&quot;:[0,{&quot;name&quot;:[0,&quot;blog-english-only&quot;],&quot;enUS&quot;:[0,&quot;English for Locale&quot;],&quot;zhCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhHansCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhTW&quot;:[0,&quot;No Page for Locale&quot;],&quot;frFR&quot;:[0,&quot;No Page for Locale&quot;],&quot;deDE&quot;:[0,&quot;No Page for Locale&quot;],&quot;itIT&quot;:[0,&quot;No Page for Locale&quot;],&quot;jaJP&quot;:[0,&quot;No Page for Locale&quot;],&quot;koKR&quot;:[0,&quot;No Page for Locale&quot;],&quot;ptBR&quot;:[0,&quot;No Page for Locale&quot;],&quot;esLA&quot;:[0,&quot;No Page for Locale&quot;],&quot;esES&quot;:[0,&quot;No Page for Locale&quot;],&quot;enAU&quot;:[0,&quot;No Page for Locale&quot;],&quot;enCA&quot;:[0,&quot;No Page for Locale&quot;],&quot;enIN&quot;:[0,&quot;No Page for Locale&quot;],&quot;enGB&quot;:[0,&quot;No Page for Locale&quot;],&quot;idID&quot;:[0,&quot;No Page for Locale&quot;],&quot;ruRU&quot;:[0,&quot;No Page for Locale&quot;],&quot;svSE&quot;:[0,&quot;No Page for Locale&quot;],&quot;viVN&quot;:[0,&quot;No Page for Locale&quot;],&quot;plPL&quot;:[0,&quot;No Page for Locale&quot;],&quot;arAR&quot;:[0,&quot;No Page for Locale&quot;],&quot;nlNL&quot;:[0,&quot;No Page for Locale&quot;],&quot;thTH&quot;:[0,&quot;No Page for Locale&quot;],&quot;trTR&quot;:[0,&quot;No Page for Locale&quot;],&quot;heIL&quot;:[0,&quot;No Page for Locale&quot;],&quot;lvLV&quot;:[0,&quot;No Page for Locale&quot;],&quot;etEE&quot;:[0,&quot;No Page for Locale&quot;],&quot;ltLT&quot;:[0,&quot;No Page for Locale&quot;]}],&quot;url&quot;:[0,&quot;https://blog.cloudflare.com/improving-the-trustworthiness-of-javascript-on-the-web&quot;],&quot;metadata&quot;:[0,{&quot;title&quot;:[0,&quot;Improving the trustworthiness of Javascript on the Web&quot;],&quot;description&quot;:[0,&quot;Today, there&#39;s no way to audit a siteâs client-side code as it changes, making it hard to trust sites that use cryptography. We preview a specification we coauthored that adds auditability to the web.\n&quot;],&quot;imgPreview&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5j5YpBibRfLDbgQWfNYz4S/990ec92b60da30d6cf77f1ae5e8e9212/BLOG-2875_OG.png&quot;]}],&quot;publicly_index&quot;:[0,true]}],&quot;tagInfo&quot;:[0],&quot;authorInfo&quot;:[0],&quot;translatedPosts&quot;:[1,[]]}" ssr client="only" opts="{&quot;name&quot;:&quot;GoogleAnalytics&quot;,&quot;value&quot;:&quot;react&quot;}"></astro-island><script>(()=>{var l=(n,t)=>{let i=async()=>{await(await n())()},e=typeof t.value=="object"?t.value:void 0,s={timeout:e==null?void 0:e.timeout};"requestIdleCallback"in window?window.requestIdleCallback(i,s):setTimeout(i,s.timeout||200)};(self.Astro||(self.Astro={})).idle=l;window.dispatchEvent(new Event("astro:idle"));})();</script><astro-island uid="Zg91vu" prefix="r7" component-url="/_astro/Navigation.BG9ngiam.js" component-export="Navigation" renderer-url="/_astro/client.CI64Qvmy.js" props="{&quot;title&quot;:[0,&quot;The Cloudflare Blog&quot;],&quot;logo&quot;:[0,&quot;//images.ctfassets.net/zkvhlag99gkb/69RwBidpiEHCDZ9rFVVk7T/092507edbed698420b89658e5a6d5105/CF_logo_stacked_blktype.png&quot;],&quot;pagesStore&quot;:[0,{&quot;page&quot;:[0,&quot;Post&quot;],&quot;slug&quot;:[0,&quot;improving-the-trustworthiness-of-javascript-on-the-web&quot;],&quot;translationsAvailable&quot;:[1,[]],&quot;navData&quot;:[1,[[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;6Foe3R8of95cWVnQwe5Toi&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T22:44:28.803Z&quot;],&quot;updatedAt&quot;:[0,&quot;2025-10-14T05:04:54.303Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,262],&quot;revision&quot;:[0,70],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;AI&quot;],&quot;name&quot;:[0,&quot;AI&quot;],&quot;slug&quot;:[0,&quot;ai&quot;],&quot;featured&quot;:[0,true],&quot;publiclyIndex&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;4HIPcb68qM0e26fIxyfzwQ&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:43:21.536Z&quot;],&quot;updatedAt&quot;:[0,&quot;2025-10-14T05:04:54.137Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,168],&quot;revision&quot;:[0,56],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Developers&quot;],&quot;name&quot;:[0,&quot;Developers&quot;],&quot;slug&quot;:[0,&quot;developers&quot;],&quot;featured&quot;:[0,true],&quot;publiclyIndex&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;5kZtWqjqa7aOUoZr8NFGwI&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:43:26.040Z&quot;],&quot;updatedAt&quot;:[0,&quot;2025-10-14T05:04:55.442Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,217],&quot;revision&quot;:[0,53],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Cloudflare Radar&quot;],&quot;name&quot;:[0,&quot;Radar&quot;],&quot;slug&quot;:[0,&quot;cloudflare-radar&quot;],&quot;featured&quot;:[0,true],&quot;publiclyIndex&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;6QktrXeEFcl4e2dZUTZVGl&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:43:20.198Z&quot;],&quot;updatedAt&quot;:[0,&quot;2025-04-09T11:02:56.665Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,68],&quot;revision&quot;:[0,28],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Product News&quot;],&quot;name&quot;:[0,&quot;Product News&quot;],&quot;slug&quot;:[0,&quot;product-news&quot;],&quot;featured&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;6Mp7ouACN2rT3YjL1xaXJx&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:42:46.231Z&quot;],&quot;updatedAt&quot;:[0,&quot;2025-10-14T05:04:57.781Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,185],&quot;revision&quot;:[0,54],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Security&quot;],&quot;name&quot;:[0,&quot;Security&quot;],&quot;slug&quot;:[0,&quot;security&quot;],&quot;featured&quot;:[0,true],&quot;publiclyIndex&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;16yk8DVbNNifxov5cWvAov&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:56:23.848Z&quot;],&quot;updatedAt&quot;:[0,&quot;2025-10-14T05:04:58.023Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,75],&quot;revision&quot;:[0,32],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Policy &amp; Legal&quot;],&quot;name&quot;:[0,&quot;Policy &amp; Legal&quot;],&quot;slug&quot;:[0,&quot;policy&quot;],&quot;featured&quot;:[0,true],&quot;publiclyIndex&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;J61Eszqn98amrYHq4IhTx&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:43:46.068Z&quot;],&quot;updatedAt&quot;:[0,&quot;2025-10-14T05:04:56.395Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,148],&quot;revision&quot;:[0,47],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Zero Trust&quot;],&quot;name&quot;:[0,&quot;Zero Trust&quot;],&quot;slug&quot;:[0,&quot;zero-trust&quot;],&quot;featured&quot;:[0,true],&quot;publiclyIndex&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;48r7QV00gLMWOIcM1CSDRy&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:54:22.790Z&quot;],&quot;updatedAt&quot;:[0,&quot;2025-04-07T23:03:52.422Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,66],&quot;revision&quot;:[0,28],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Speed &amp; Reliability&quot;],&quot;name&quot;:[0,&quot;Speed &amp; Reliability&quot;],&quot;slug&quot;:[0,&quot;speed-and-reliability&quot;],&quot;featured&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;4g8tPriKOAUwdUT4jNPebe&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:46:40.927Z&quot;],&quot;updatedAt&quot;:[0,&quot;2025-09-19T22:57:38.748Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,79],&quot;revision&quot;:[0,30],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Life at Cloudflare&quot;],&quot;name&quot;:[0,&quot;Life at Cloudflare&quot;],&quot;slug&quot;:[0,&quot;life-at-cloudflare&quot;],&quot;featured&quot;:[0,true],&quot;publiclyIndex&quot;:[0,true]}]}],[0,{&quot;metadata&quot;:[0,{&quot;tags&quot;:[1,[]],&quot;concepts&quot;:[1,[]]}],&quot;sys&quot;:[0,{&quot;space&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Space&quot;],&quot;id&quot;:[0,&quot;zkvhlag99gkb&quot;]}]}],&quot;id&quot;:[0,&quot;V86khSc459Yi1AhTlvtY7&quot;],&quot;type&quot;:[0,&quot;Entry&quot;],&quot;createdAt&quot;:[0,&quot;2024-10-09T19:46:53.657Z&quot;],&quot;updatedAt&quot;:[0,&quot;2025-02-04T17:12:59.473Z&quot;],&quot;environment&quot;:[0,{&quot;sys&quot;:[0,{&quot;id&quot;:[0,&quot;master&quot;],&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;Environment&quot;]}]}],&quot;publishedVersion&quot;:[0,57],&quot;revision&quot;:[0,21],&quot;contentType&quot;:[0,{&quot;sys&quot;:[0,{&quot;type&quot;:[0,&quot;Link&quot;],&quot;linkType&quot;:[0,&quot;ContentType&quot;],&quot;id&quot;:[0,&quot;blogTag&quot;]}]}],&quot;locale&quot;:[0,&quot;en-US&quot;]}],&quot;fields&quot;:[0,{&quot;entryTitle&quot;:[0,&quot;Partners&quot;],&quot;name&quot;:[0,&quot;Partners&quot;],&quot;slug&quot;:[0,&quot;partners&quot;],&quot;featured&quot;:[0,true]}]}]]]}],&quot;locale&quot;:[0,&quot;en-us&quot;],&quot;translations&quot;:[0,{&quot;posts.by&quot;:[0,&quot;By&quot;],&quot;footer.gdpr&quot;:[0,&quot;GDPR&quot;],&quot;lang_blurb1&quot;:[0,&quot;This post is also available in {lang1}.&quot;],&quot;lang_blurb2&quot;:[0,&quot;This post is also available in {lang1} and {lang2}.&quot;],&quot;lang_blurb3&quot;:[0,&quot;This post is also available in {lang1}, {lang2} and {lang3}.&quot;],&quot;footer.press&quot;:[0,&quot;Press&quot;],&quot;header.title&quot;:[0,&quot;The Cloudflare Blog&quot;],&quot;search.clear&quot;:[0,&quot;Clear&quot;],&quot;search.filter&quot;:[0,&quot;Filter&quot;],&quot;search.source&quot;:[0,&quot;Source&quot;],&quot;footer.careers&quot;:[0,&quot;Careers&quot;],&quot;footer.company&quot;:[0,&quot;Company&quot;],&quot;footer.support&quot;:[0,&quot;Support&quot;],&quot;footer.the_net&quot;:[0,&quot;theNet&quot;],&quot;search.filters&quot;:[0,&quot;Filters&quot;],&quot;footer.our_team&quot;:[0,&quot;Our team&quot;],&quot;footer.webinars&quot;:[0,&quot;Webinars&quot;],&quot;page.more_posts&quot;:[0,&quot;More posts&quot;],&quot;posts.time_read&quot;:[0,&quot;{time} min read&quot;],&quot;search.language&quot;:[0,&quot;Language&quot;],&quot;footer.community&quot;:[0,&quot;Community&quot;],&quot;footer.resources&quot;:[0,&quot;Resources&quot;],&quot;footer.solutions&quot;:[0,&quot;Solutions&quot;],&quot;footer.trademark&quot;:[0,&quot;Trademark&quot;],&quot;header.subscribe&quot;:[0,&quot;Subscribe&quot;],&quot;footer.compliance&quot;:[0,&quot;Compliance&quot;],&quot;footer.free_plans&quot;:[0,&quot;Free plans&quot;],&quot;footer.impact_ESG&quot;:[0,&quot;Impact/ESG&quot;],&quot;posts.follow_on_X&quot;:[0,&quot;Follow on X&quot;],&quot;footer.help_center&quot;:[0,&quot;Help center&quot;],&quot;footer.network_map&quot;:[0,&quot;Network Map&quot;],&quot;header.please_wait&quot;:[0,&quot;Please Wait&quot;],&quot;page.related_posts&quot;:[0,&quot;Related posts&quot;],&quot;search.result_stat&quot;:[0,&quot;Results &lt;strong&gt;{search_range}&lt;/strong&gt; of &lt;strong&gt;{search_total}&lt;/strong&gt; for &lt;strong&gt;{search_keyword}&lt;/strong&gt;&quot;],&quot;footer.case_studies&quot;:[0,&quot;Case Studies&quot;],&quot;footer.connect_2024&quot;:[0,&quot;Connect 2024&quot;],&quot;footer.terms_of_use&quot;:[0,&quot;Terms of Use&quot;],&quot;footer.white_papers&quot;:[0,&quot;White Papers&quot;],&quot;footer.cloudflare_tv&quot;:[0,&quot;Cloudflare TV&quot;],&quot;footer.community_hub&quot;:[0,&quot;Community Hub&quot;],&quot;footer.compare_plans&quot;:[0,&quot;Compare plans&quot;],&quot;footer.contact_sales&quot;:[0,&quot;Contact Sales&quot;],&quot;header.contact_sales&quot;:[0,&quot;Contact Sales&quot;],&quot;header.email_address&quot;:[0,&quot;Email Address&quot;],&quot;page.error.not_found&quot;:[0,&quot;Page not found&quot;],&quot;footer.developer_docs&quot;:[0,&quot;Developer docs&quot;],&quot;footer.privacy_policy&quot;:[0,&quot;Privacy Policy&quot;],&quot;footer.request_a_demo&quot;:[0,&quot;Request a demo&quot;],&quot;page.continue_reading&quot;:[0,&quot;Continue reading&quot;],&quot;footer.analysts_report&quot;:[0,&quot;Analyst reports&quot;],&quot;footer.for_enterprises&quot;:[0,&quot;For enterprises&quot;],&quot;footer.getting_started&quot;:[0,&quot;Getting Started&quot;],&quot;footer.learning_center&quot;:[0,&quot;Learning Center&quot;],&quot;footer.project_galileo&quot;:[0,&quot;Project Galileo&quot;],&quot;pagination.newer_posts&quot;:[0,&quot;Newer Posts&quot;],&quot;pagination.older_posts&quot;:[0,&quot;Older Posts&quot;],&quot;posts.social_buttons.x&quot;:[0,&quot;Discuss on X&quot;],&quot;search.icon_aria_label&quot;:[0,&quot;Search&quot;],&quot;search.source_location&quot;:[0,&quot;Source/Location&quot;],&quot;footer.about_cloudflare&quot;:[0,&quot;About Cloudflare&quot;],&quot;footer.athenian_project&quot;:[0,&quot;Athenian Project&quot;],&quot;footer.become_a_partner&quot;:[0,&quot;Become a partner&quot;],&quot;footer.cloudflare_radar&quot;:[0,&quot;Cloudflare Radar&quot;],&quot;footer.network_services&quot;:[0,&quot;Network services&quot;],&quot;footer.trust_and_safety&quot;:[0,&quot;Trust &amp; Safety&quot;],&quot;header.get_started_free&quot;:[0,&quot;Get Started Free&quot;],&quot;page.search.placeholder&quot;:[0,&quot;Search Cloudflare&quot;],&quot;footer.cloudflare_status&quot;:[0,&quot;Cloudflare Status&quot;],&quot;footer.cookie_preference&quot;:[0,&quot;Cookie Preferences&quot;],&quot;header.valid_email_error&quot;:[0,&quot;Must be valid email.&quot;],&quot;search.result_stat_empty&quot;:[0,&quot;Results &lt;strong&gt;{search_range}&lt;/strong&gt; of &lt;strong&gt;{search_total}&lt;/strong&gt;&quot;],&quot;footer.connectivity_cloud&quot;:[0,&quot;Connectivity cloud&quot;],&quot;footer.developer_services&quot;:[0,&quot;Developer services&quot;],&quot;footer.investor_relations&quot;:[0,&quot;Investor relations&quot;],&quot;page.not_found.error_code&quot;:[0,&quot;Error Code: 404&quot;],&quot;search.autocomplete_title&quot;:[0,&quot;Insert a query. Press enter to send&quot;],&quot;footer.logos_and_press_kit&quot;:[0,&quot;Logos &amp; press kit&quot;],&quot;footer.application_services&quot;:[0,&quot;Application services&quot;],&quot;footer.get_a_recommendation&quot;:[0,&quot;Get a recommendation&quot;],&quot;posts.social_buttons.reddit&quot;:[0,&quot;Discuss on Reddit&quot;],&quot;footer.sse_and_sase_services&quot;:[0,&quot;SSE and SASE services&quot;],&quot;page.not_found.outdated_link&quot;:[0,&quot;You may have used an outdated link, or you may have typed the address incorrectly.&quot;],&quot;footer.report_security_issues&quot;:[0,&quot;Report Security Issues&quot;],&quot;page.error.error_message_page&quot;:[0,&quot;Sorry, we can&#39;t find the page you are looking for.&quot;],&quot;header.subscribe_notifications&quot;:[0,&quot;Subscribe to receive notifications of new posts:&quot;],&quot;footer.cloudflare_for_campaigns&quot;:[0,&quot;Cloudflare for Campaigns&quot;],&quot;header.subscription_confimation&quot;:[0,&quot;Subscription confirmed. Thank you for subscribing!&quot;],&quot;posts.social_buttons.hackernews&quot;:[0,&quot;Discuss on Hacker News&quot;],&quot;footer.diversity_equity_inclusion&quot;:[0,&quot;Diversity, equity &amp; inclusion&quot;],&quot;footer.critical_infrastructure_defense_project&quot;:[0,&quot;Critical Infrastructure Defense Project&quot;]}]}" ssr client="idle" opts="{&quot;name&quot;:&quot;NavigationComponent&quot;,&quot;value&quot;:true}" await-children><header class="flex flex-row flex-wrap justify-between items-flex-end mw8 center mv3 pl3 pr1"><div class="w-100 flex items-flex-end justify-between justify-start-l"><div class="w-100 tr flex justify-end"><div class="flex justify-between items-center"><span class="dn di-l pr1"><a href="https://dash.cloudflare.com/sign-up" class="f1 blue1 dn di-l b no-underline underline-hover" target="_blank" rel="noreferrer">Get Started Free</a></span><span class="f1 gray4 dn di-l pr1">|</span><span class="dn di-l"><a target="_blank" href="https://www.cloudflare.com/plans/enterprise/contact/" class="f1 gray4 no-underline underline-hover pr1" rel="noreferrer">Contact Sales</a></span></div></div></div><div class="w-100 w-50-l flex items-end nb5 nb1-l"><a href="/" class="header-logo mr4 dn db-l"><img class="header-logo" src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/69RwBidpiEHCDZ9rFVVk7T/092507edbed698420b89658e5a6d5105/CF_logo_stacked_blktype.png" alt="The Cloudflare Blog" width="170" height="57"/></a><h2 class="mt0 mb1 dn di-l"><a href="/" class="fw5 f5 gray3 no-underline"><span class="dn di-l">The Cloudflare Blog</span></a></h2></div><div class="w-100 w-50-l dn db-l"><div class="w-100 tr mkto-sub-message"><p class="f2">Subscribe to receive notifications of new posts:</p></div><div class="w-100 tr"><div class="marketo-form-container"><form id="mktoForm_1653"><div class="top-subscribe-form-container"><div class="top-subscribe-form-field"><input placeholder="Email Address" class="top-subscribe-form-input" name="email" type="email" title="Must be valid email."/></div><button class="top-subscribe-form-button" type="button">Subscribe</button></div></form></div></div></div></header><nav dir="ltr" class="bb b--black-10 db dn-l w-100 ph3 "><div class=" flex justify-between items-center" style="height:44px"><a href="/search/"><img class="h-6 w-6" src="/images/magnifier.svg" alt="magnifier icon"/></a><button type="button" style="background:transparent;border:none"><img src="/images/hamburger.svg" alt="hamburger menu"/></button></div><div class="js-mobile-nav-container dn"><div class="flex flex-column flex-wrap bg-gray9 o-95 absolute ph3 z-1 left-0 right-0 mx-4"><div class="pv3 ph2 tl"><a href="/tag/ai/" class="no-underline gray1 f4 fw7">AI</a></div><div class="pv3 ph2 tl"><a href="/tag/developers/" class="no-underline gray1 f4 fw7">Developers</a></div><div class="pv3 ph2 tl"><a href="/tag/cloudflare-radar/" class="no-underline gray1 f4 fw7">Radar</a></div><div class="pv3 ph2 tl"><a href="/tag/product-news/" class="no-underline gray1 f4 fw7">Product News</a></div><div class="pv3 ph2 tl"><a href="/tag/security/" class="no-underline gray1 f4 fw7">Security</a></div><div class="pv3 ph2 tl"><a href="/tag/policy/" class="no-underline gray1 f4 fw7">Policy &amp; Legal</a></div><div class="pv3 ph2 tl"><a href="/tag/zero-trust/" class="no-underline gray1 f4 fw7">Zero Trust</a></div><div class="pv3 ph2 tl"><a href="/tag/speed-and-reliability/" class="no-underline gray1 f4 fw7">Speed &amp; Reliability</a></div><div class="pv3 ph2 tl"><a href="/tag/life-at-cloudflare/" class="no-underline gray1 f4 fw7">Life at Cloudflare</a></div><div class="pv3 ph2 tl"><a href="/tag/partners/" class="no-underline gray1 f4 fw7">Partners</a></div></div></div></nav><nav id="nav" class="w-100 bb-0 bb-l b--black-10 z-1"><div id="desktop-nav-items-container" class="flex flex-wrap justify-between items-center mw8 center mv3 mv0-l"><div data-tag="ai" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/ai/" class="no-underline gray1 f2 fw5 pv3">AI</a></div><div data-tag="developers" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/developers/" class="no-underline gray1 f2 fw5 pv3">Developers</a></div><div data-tag="cloudflare-radar" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/cloudflare-radar/" class="no-underline gray1 f2 fw5 pv3">Radar</a></div><div data-tag="product-news" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/product-news/" class="no-underline gray1 f2 fw5 pv3">Product News</a></div><div data-tag="security" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/security/" class="no-underline gray1 f2 fw5 pv3">Security</a></div><div data-tag="policy" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/policy/" class="no-underline gray1 f2 fw5 pv3">Policy &amp; Legal</a></div><div data-tag="zero-trust" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/zero-trust/" class="no-underline gray1 f2 fw5 pv3">Zero Trust</a></div><div data-tag="speed-and-reliability" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/speed-and-reliability/" class="no-underline gray1 f2 fw5 pv3">Speed &amp; Reliability</a></div><div data-tag="life-at-cloudflare" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/life-at-cloudflare/" class="no-underline gray1 f2 fw5 pv3">Life at Cloudflare</a></div><div data-tag="partners" class="nav-item nav-item-desktop ml3 mr2 dn db-l pv3"><a href="/tag/partners/" class="no-underline gray1 f2 fw5 pv3">Partners</a></div><div class="nav-item ml2 mr3 dn db-l pv3" data-tag="search icon"><a href="/search/"><img id="search-icon" class="h-6 w-6" src="/images/magnifier.svg" alt="magnifier icon"/></a></div></div></nav><!--astro:end--></astro-island><progress class="reading-progress" value="0" max="100" aria-label="Reading progress"></progress><script> async function replaceServerIsland(id, r) { let s = document.querySelector(`script[data-island-id="${id}"]`); if (!s || r.status !== 200 || r.headers.get('content-type')?.split(';')[0].trim() !== 'text/html') return; let html = await r.text(); while (s.previousSibling && s.previousSibling.nodeType !== 8 && s.previousSibling.data !== '[if astro]>server-island-start<![endif]') s.previousSibling.remove(); s.previousSibling?.remove(); s.before(document.createRange().createContextualFragment(html)); s.remove(); } </script><script>(()=>{var e=async t=>{await(await t())()};(self.Astro||(self.Astro={})).load=e;window.dispatchEvent(new Event("astro:load"));})();</script><astro-island uid="1jSxCM" prefix="r3" component-url="/_astro/Post.CrIniNkB.js" component-export="Post" renderer-url="/_astro/client.CI64Qvmy.js" props="{&quot;post&quot;:[0,{&quot;id&quot;:[0,&quot;6GRxDReQHjD7T0xpfjf7Iq&quot;],&quot;title&quot;:[0,&quot;Improving the trustworthiness of Javascript on the Web&quot;],&quot;slug&quot;:[0,&quot;improving-the-trustworthiness-of-javascript-on-the-web&quot;],&quot;excerpt&quot;:[0,&quot;There&#39;s no way to audit a siteâs client-side code as it changes, making it hard to trust sites that use cryptography. We preview a specification we co-authored that adds auditability to the web.&quot;],&quot;featured&quot;:[0,false],&quot;html&quot;:[0,&quot;&lt;p&gt;The web is the most powerful application platform in existence. As long as you have the &lt;a href=\&quot;https://developer.mozilla.org/en-US/docs/Web/API\&quot;&gt;&lt;u&gt;right API&lt;/u&gt;&lt;/a&gt;, you can safely run anything you want in a browser.&lt;/p&gt;&lt;p&gt;Wellâ¦ anything but cryptography.&lt;/p&gt;&lt;p&gt;It is as true today as it was in 2011 that &lt;a href=\&quot;https://web.archive.org/web/20200731144044/https://www.nccgroup.com/us/about-us/newsroom-and-events/blog/2011/august/javascript-cryptography-considered-harmful/\&quot;&gt;&lt;u&gt;Javascript cryptography is Considered Harmful&lt;/u&gt;&lt;/a&gt;. The main problem is code distribution. Consider an end-to-end-encrypted messaging web application. The application generates &lt;a href=\&quot;https://www.cloudflare.com/learning/ssl/what-is-a-cryptographic-key/\&quot;&gt;&lt;u&gt;cryptographic keys&lt;/u&gt;&lt;/a&gt; in the clientâs browser that lets users view and send &lt;a href=\&quot;https://en.wikipedia.org/wiki/End-to-end_encryption\&quot;&gt;&lt;u&gt;end-to-end encrypted&lt;/u&gt;&lt;/a&gt; messages to each other. If the application is compromised, what would stop the malicious actor from simply modifying their Javascript to exfiltrate messages?&lt;/p&gt;&lt;p&gt;It is interesting to note that smartphone apps donât have this issue. This is because app stores do a lot of heavy lifting to provide security for the app ecosystem. Specifically, they provide &lt;b&gt;integrity&lt;/b&gt;, ensuring that apps being delivered are not tampered with, &lt;b&gt;consistency&lt;/b&gt;, ensuring all users get the same app, and &lt;b&gt;transparency&lt;/b&gt;, ensuring that the record of versions of an app is truthful and publicly visible.&lt;/p&gt;&lt;p&gt;It would be nice if we could get these properties for our end-to-end encrypted web application, and the web as a whole, without requiring a single central authority like an app store. Further, such a system would benefit all in-browser uses of cryptography, not just end-to-end-encrypted apps. For example, many web-based confidential &lt;a href=\&quot;https://www.cloudflare.com/learning/ai/what-is-large-language-model/\&quot;&gt;&lt;u&gt;LLMs&lt;/u&gt;&lt;/a&gt;, cryptocurrency wallets, and voting systems use in-browser Javascript cryptography for the last step of their verification chains.&lt;/p&gt;&lt;p&gt;In this post, we will provide an early look at such a system, called &lt;a href=\&quot;https://github.com/beurdouche/explainers/blob/main/waict-explainer.md\&quot;&gt;&lt;u&gt;Web Application Integrity, Consistency, and Transparency&lt;/u&gt;&lt;/a&gt; (WAICT) that we have helped author. WAICT is a &lt;a href=\&quot;https://www.w3.org/\&quot;&gt;&lt;u&gt;W3C&lt;/u&gt;&lt;/a&gt;-backed effort among browser vendors, cloud providers, and encrypted communication developers to bring stronger security guarantees to the entire web. We will discuss the problem we need to solve, and build up to a solution resembling the &lt;a href=\&quot;https://github.com/rozbb/draft-waict-transparency\&quot;&gt;&lt;u&gt;current transparency specification draft&lt;/u&gt;&lt;/a&gt;. We hope to build even wider consensus on the solution design in the near future.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;defining-the-web-application\&quot;&gt;Defining the Web Application&lt;/h2&gt;\n      &lt;a href=\&quot;#defining-the-web-application\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;In order to talk about security guarantees of a web application, it is first necessary to define precisely what the application &lt;i&gt;is&lt;/i&gt;. A smartphone application is essentially just a zip file. But a website is made up of interlinked assets, including HTML, Javascript, WASM, and CSS, that can each be locally or externally hosted. Further, if any asset changes, it could drastically change the functioning of the application. A coherent definition of an application thus requires the application to commit to precisely the assets it loads. This is done using integrity features, which we describe now.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;subresource-integrity\&quot;&gt;Subresource Integrity&lt;/h3&gt;\n      &lt;a href=\&quot;#subresource-integrity\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;An important building block for defining a single coherent application is &lt;b&gt;subresource integrity&lt;/b&gt; (SRI). SRI is a feature built into most browsers that permits a website to specify the cryptographic hash of external resources, e.g.,&lt;/p&gt;\n            &lt;pre class=\&quot;language-javascript\&quot;&gt;&lt;code class=\&quot;language-javascript\&quot;&gt;&amp;lt;script src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.13.7/underscore-min.js&amp;quot; integrity=&amp;quot;sha512-dvWGkLATSdw5qWb2qozZBRKJ80Omy2YN/aF3wTUVC5+D1eqbA+TjWpPpoj8vorK5xGLMa2ZqIeWCpDZP/+pQGQ==&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;This causes the browser to fetch &lt;code&gt;underscore.js&lt;/code&gt; from &lt;code&gt;cdnjs.cloudflare.com&lt;/code&gt; and verify that its SHA-512 hash matches the given hash in the tag. If they match, the script is loaded. If not, an error is thrown and nothing is executed.&lt;/p&gt;&lt;p&gt;If every external script, stylesheet, etc. on a page comes with an SRI integrity attribute, then the whole page is defined by just its HTML. This is close to what we want, but a web application can consist of many pages, and there is no way for a page to enforce the hash of the pages it links to.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;integrity-manifest\&quot;&gt;Integrity Manifest&lt;/h3&gt;\n      &lt;a href=\&quot;#integrity-manifest\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;We would like to have a way of enforcing integrity on an entire site, i.e., every asset under a domain. For this, WAICT defines an &lt;b&gt;integrity manifest&lt;/b&gt;, a configuration file that websites can provide to clients. One important item in the manifest is the &lt;b&gt;asset hashes dictionary&lt;/b&gt;, mapping a hash belonging to an asset that the browser might load from that domain, to the path of that asset. Assets that may occur at any path, e.g., an error page, map to the empty string:&lt;/p&gt;\n            &lt;pre class=\&quot;language-JSON\&quot;&gt;&lt;code class=\&quot;language-JSON\&quot;&gt;&amp;quot;hashes&amp;quot;: {\n&amp;quot;81db308d0df59b74d4a9bd25c546f25ec0fdb15a8d6d530c07a89344ae8eeb02&amp;quot;: &amp;quot;/assets/js/main.js&amp;quot;,\n&amp;quot;fbd1d07879e672fd4557a2fa1bb2e435d88eac072f8903020a18672d5eddfb7c&amp;quot;: &amp;quot;/index.html&amp;quot;,\n&amp;quot;5e737a67c38189a01f73040b06b4a0393b7ea71c86cf73744914bbb0cf0062eb&amp;quot;: &amp;quot;/vendored/main.css&amp;quot;,\n&amp;quot;684ad58287ff2d085927cb1544c7d685ace897b6b25d33e46d2ec46a355b1f0e&amp;quot;: &amp;quot;&amp;quot;,\n&amp;quot;f802517f1b2406e308599ca6f4c02d2ae28bb53ff2a5dbcddb538391cb6ad56a&amp;quot;: &amp;quot;&amp;quot;\n}\n&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;The other main component of the manifest is the &lt;b&gt;integrity policy&lt;/b&gt;, which tells the browser which data types are being enforced and how strictly. For example, the policy in the manifest below will:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Reject any script before running it, if itâs missing an SRI tag and doesnât appear in the hashes&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Reject any WASM possibly after running it, if itâs missing an SRI tag and doesnât appear in hashes&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;\n            &lt;pre class=\&quot;language-JSON\&quot;&gt;&lt;code class=\&quot;language-JSON\&quot;&gt;&amp;quot;integrity-policy&amp;quot;: &amp;quot;blocked-destinations=(script), checked-destinations=(wasm)&amp;quot;&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;Put together, these make up the integrity manifest:&lt;/p&gt;\n            &lt;pre class=\&quot;language-JSON\&quot;&gt;&lt;code class=\&quot;language-JSON\&quot;&gt;&amp;quot;manifest&amp;quot;: {\n  &amp;quot;version&amp;quot;: 1,\n  &amp;quot;integrity-policy&amp;quot;: ...,\n  &amp;quot;hashes&amp;quot;: ...,\n}\n&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;Thus, when both SRI and integrity manifests are used, the entire site and its interpretation by the browser is uniquely determined by the hash of the integrity manifest. This is exactly what we wanted. We have distilled the problem of endowing authenticity, consistent distribution, etc. to a web application to one of endowing the same properties to a single hash.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;achieving-transparency\&quot;&gt;Achieving Transparency&lt;/h2&gt;\n      &lt;a href=\&quot;#achieving-transparency\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Recall, a transparent web application is one whose code is stored in a publicly accessible, append-only log. This is helpful in two ways: 1) if a user is served malicious code and they learn about it, there is a public record of the code they ran, and so they can prove it to external parties, and 2) if a user is served malicious code and they donât learn about it, there is still a chance that an external auditor may comb through the historical web application code and find the malicious code anyway. Of course, transparency does not help detect malicious code or even prevent its distribution, but it at least makes it &lt;i&gt;publicly auditable&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Now that we have a single hash that commits to an entire websiteâs contents, we can talk about ensuring that that hash ends up in a public log. We have several important requirements here:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Do not break existing sites.&lt;/b&gt; This one is a given. Whatever system gets deployed, it should not interfere with the correct functioning of existing websites. Participation in transparency should be strictly opt-in.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;No added round trips.&lt;/b&gt; Transparency should not cause extra network round trips between the client and the server. Otherwise there will be a network latency penalty for users who want transparency.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;User privacy.&lt;/b&gt; A user should not have to identify themselves to any party more than they already do. That means no connections to new third parties, and no sending identifying information to the website.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;User statelessness.&lt;/b&gt; A user should not have to store site-specific data. We do not want solutions that rely on storing or gossipping per-site cryptographic information.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Non-centralization.&lt;/b&gt; There should not be a single point of failure in the systemâif any single party experiences downtime, the system should still be able to make progress. Similarly, there should be no single point of trustâif a user distrusts any single party, the user should still receive all the security benefits of the system.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Ease of opt-in.&lt;/b&gt; The barrier of entry for transparency should be as low as possible. A site operator should be able to start logging their site cheaply and without being an expert.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Ease of opt-out.&lt;/b&gt; It should be easy for a website to stop participating in transparency. Further, to avoid accidental lock-in like the &lt;a href=\&quot;https://en.wikipedia.org/wiki/HTTP_Public_Key_Pinning#Criticism_and_decline\&quot;&gt;&lt;u&gt;defunct HPKP spec&lt;/u&gt;&lt;/a&gt;, it should be possible for this to happen even if all cryptographic material is lost, e.g., in the seizure or selling of a domain.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Opt-out is transparent.&lt;/b&gt; As described before, because transparency is optional, it is possible for an attacker to disable the siteâs transparency, serve malicious content, then enable transparency again. We must make sure this kind of attack is detectable, i.e., the act of disabling transparency must itself be logged somewhere.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;Monitorability.&lt;/b&gt; A website operator should be able to efficiently monitor the transparency information being published about their website. In particular, they should not have to run a high-network-load, always-on program just to notify them if their site has been hijacked.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;With these requirements in place, we can move on to construction. We introduce a data structure that will be essential to the design.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;hash-chain\&quot;&gt;Hash Chain&lt;/h3&gt;\n      &lt;a href=\&quot;#hash-chain\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Almost everything in transparency is an append-only log, i.e., a data structure that acts like a list and has the ability to produce an &lt;b&gt;inclusion proof&lt;/b&gt;, i.e., a proof that an element occurs at a particular index in the list; and a &lt;b&gt;consistency proof&lt;/b&gt;, i.e., a proof that a list is an extension of a previous version of the list. A consistency proof between two lists demonstrates that no elements were modified or deleted, only added.&lt;/p&gt;&lt;p&gt;The simplest possible append-only log is a &lt;b&gt;hash chain&lt;/b&gt;, a list-like data structure wherein each subsequent element is hashed into the running &lt;i&gt;chain hash&lt;/i&gt;. The final chain hash is a succinct representation of the entire list.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5nVcIeoKTYEd0hydT9jdpj/fd90a78cba46c1893058a7ff40a42fac/BLOG-2875_2.png\&quot; alt=\&quot;Two rows of three circles each. The top row (green) is shifted to the right of the bottom row (orange). Each green node has a solid line connecting it to the orange node to its bottom-left, and the green node to its left, if there is one. The orange nodes are labeled, from left to right, elem1, elem2, elem3. The green nodes are labeled, from left to right, âch1 = H(elem1)â, âch2 = H(ch1, elem2)â, and âch3 = H(ch2, elem3)â.\&quot; class=\&quot;kg-image\&quot; width=\&quot;1424\&quot; height=\&quot;820\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;&lt;sub&gt;A hash chain. The green nodes represent the &lt;/sub&gt;&lt;sub&gt;&lt;i&gt;chain hash&lt;/i&gt;&lt;/sub&gt;&lt;sub&gt;, i.e., the hash of the element below it, concatenated with the previous chain hash. &lt;/sub&gt;&lt;/p&gt;&lt;p&gt;The proof structures are quite simple. To prove inclusion of the element at index i, the prover provides the chain hash before &lt;code&gt;i&lt;/code&gt;, and all the elements after &lt;code&gt;i&lt;/code&gt;:&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7tYbCRVVTV3osE3lWs8YjG/be76d6022420ffa3d78b0180ef69bb1a/BLOG-2875_3.png\&quot; alt=\&quot;Three labeled components. The first component, labeled âinclusion proofâ, is a box containing a green node labeled ch1, and two orange circles labeled elem2 and elem3, respectively. The second component, labeled âVerifier knowsâ is a box containing a single green node with a purple ring around it, labeled ch-prime-3. The third component, labeled âVerifier computesâ, is as follows. Similar to the hash chain before, there is a top row of three green nodes and a bottom row of two orange nodes. As before, there are lines connecting each green node to its left and bottom-left neighbor, but now these lines are light grey and dashed. The orange nodes are labeled elem2 and elem3. The leftmost node in the top row is labeled ch1. The remaining top row nodes are lighter green. They are labeled ch2 and ch3. Finally, separately from the rows, there is an equation, with a question mark above the equals sign.Â  On the left hand side is a copy of the light green node labeled ch3. On the right hand side is a copy of the node labeled ch-prime-3.Â \&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;859\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;&lt;sub&gt;Proof of inclusion for the second element in the hash chain. The verifier knows only the final chain hash. It checks equality of the final computed chain hash with the known final chain hash. The light green nodes represent hashes that the verifier computes. &lt;/sub&gt;&lt;/p&gt;&lt;p&gt;Similarly, to prove consistency between the chains of size i and j, the prover provides the elements between i and j:&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/rR4DMJIVxNxePI6DARtFD/e9da2930043864a4add3a74b699535d6/BLOG-2875_4.png\&quot; alt=\&quot;Three labeled components. The first component, labeled âconsistency proofâ, is a box containing two orange circles labeled elem2 and elem3. The next component, labeled âverifier knows,â is a box containing chain hash values ch-prime-1 and ch-prime-3, both in green with a purple ring around it. The third component, labeled âverifier computesâ is as follows. Similar to the hash chain before, there is a top row of three green nodes and a bottom row of two orange nodes. Again, all lines are grey and dashed, the orange nodes are labeled elem2 and elem3, and the two rightmost green nodes are light green and labeled ch2 and ch3. The leftmost node in the top row is now labeled ch-prime-1. Finally, as before, there is an equation comparing ch3 with ch-prime-3.\&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;668\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;&lt;sub&gt;Proof of consistency of the chain of size one and chain of size three. The verifier has the chain hashes from the starting and ending chains. It checks equality of the final computed chain hash with the known ending chain hash. The light green nodes represent hashes that the verifier computes. &lt;/sub&gt;&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;building-transparency\&quot;&gt;Building Transparency&lt;/h3&gt;\n      &lt;a href=\&quot;#building-transparency\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;We can use hash chains to build a transparency scheme for websites.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h4 id=\&quot;per-site-logs\&quot;&gt;Per-Site Logs&lt;/h4&gt;\n      &lt;a href=\&quot;#per-site-logs\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;As a first step, letâs give every site its own log, instantiated as a hash chain (we will discuss how these all come together into one big log later). The items of the log are just the manifest of the site at a particular point in time:&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/35o9mKoVPkOExKRFHRgWTu/305d589e0a584a3200670aab5b060c2b/BLOG-2875_5.png\&quot; alt=\&quot;A hash chain as originally. The bottom row is three orange circles and the top row is three green circles, shifted to the right of the bottom row. The top rightmost circle is labeled âchain hashâ. The bottom row circles are labeled manifest1, manifest2, and manifest3. Solid lines connect each green circle with the green one to its left (if it exists) and an orange circle to its bottom left.\&quot; class=\&quot;kg-image\&quot; width=\&quot;1540\&quot; height=\&quot;656\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;&lt;sub&gt;A siteâs hash chain-based log, containing three historical manifests. &lt;/sub&gt;&lt;/p&gt;&lt;p&gt;In reality, the log does not store the manifest itself, but the manifest hash. Sites designate an &lt;b&gt;asset host&lt;/b&gt; that knows how to map hashes to the data they reference. This is a content-addressable storage backend, and can be implemented using strongly cached static hosting solutions.&lt;/p&gt;&lt;p&gt;A log on its own is not very trustworthy. Whoever runs the log can add and remove elements at will and then recompute the hash chain. To maintain the append-only-ness of the chain, we designate a trusted third party, called a &lt;b&gt;witness&lt;/b&gt;. Given a hash chain consistency proof and a new chain hash, a witness:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Verifies the consistency proof with respect to its old stored chain hash, and the new provided chain hash.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;If successful, signs the new chain hash along with a signature timestamp.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Now, when a user navigates to a website with transparency enabled, the sequence of events is:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;The site serves its manifest, an inclusion proof showing that the manifest appears in the log, and all the signatures from all the witnesses who have validated the log chain hash.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The browser verifies the signatures from whichever witnesses it trusts.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The browser verifies the inclusion proof. The manifest must be the newest entry in the chain (we discuss how to serve old manifests later).&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The browser proceeds with the usual manifest and SRI integrity checks.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;At this point, the user knows that the given manifest has been recorded in a log whose chain hash has been saved by a trustworthy witness, so they can be reasonably sure that the manifest wonât be removed from history. Further, assuming the asset host functions correctly, the user knows that a copy of all the received code is readily available.&lt;/p&gt;&lt;p&gt;&lt;b&gt;The need to signal transparency.&lt;/b&gt; The above algorithm works, but we have a problem: if an attacker takes control of a site, they can simply stop serving transparency information and thus implicitly disable transparency without detection. So we need an explicit mechanism that keeps track of every website that has enrolled into transparency.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;the-transparency-service\&quot;&gt;The Transparency Service&lt;/h3&gt;\n      &lt;a href=\&quot;#the-transparency-service\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;To store all the sites enrolled into transparency, we want a global data structure that maps a site domain to the site logâs chain hash. One efficient way of representing this is a &lt;b&gt;prefix tree&lt;/b&gt; (a.k.a., a &lt;i&gt;trie&lt;/i&gt;). Every leaf in the tree corresponds to a siteâs domain, and its value is the chain hash of that siteâs log, the current log size, and the siteâs asset host URL. For a site to prove validity of its transparency data, it will have to present an inclusion proof for its leaf. Fortunately, these proofs are efficient for prefix trees.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/26ieMXRdvWIhLKv6J6Cdd7/29814a4a51c8ca8e3279e9b5756d0c67/BLOG-2875_6.png\&quot; alt=\&quot;A binary tree. Each node is a blue circle. The top circle, the root node, is labeled âroot hashâ. Two solid lines come out of the bottom of the root node, one to the left and one to the right. The left one is labeled with the alphabet range âa-oâ. It connects to a node labeled âexample.comâ. This node has a curvy dashed arrow coming from it and pointing to the rightmost green node in a miniature hash chain representation. The right line coming from the root node is labeled with the alphabet range âp-zâ, and connects to another blue node. This node itself has children. The right line is labeled with the alphabet range âr-zâ and connects to a node labeled ârust-lang.orgâ. The left line is labeled with the alphabet range âp-qâ and connects to another blue node. This blue node itself has children. The left line is labeled with the alphabet range âpa-psâ and connects to a node labeled âpets.comâ. The right line is labeled with the alphabet range âpr-qâ and connects to a node labeled âproduces.comâ.\&quot; class=\&quot;kg-image\&quot; width=\&quot;1988\&quot; height=\&quot;1568\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;&lt;sub&gt;A prefix tree with four elements. Each leafâs path corresponds to a domain. Each leafâs value is the chain hash of its siteâs log. &lt;/sub&gt;&lt;/p&gt;&lt;p&gt;To add itself to the tree, a site proves possession of its domain to the &lt;b&gt;transparency service&lt;/b&gt;, i.e., the party that operates the prefix tree, and provides an asset host URL. To update the entry, the site sends the new entry to the transparency service, which will compute the new chain hash. And to unenroll from transparency, the site just requests to have its entry removed from the tree (an adversary can do this too; we discuss how to detect this below).&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h4 id=\&quot;proving-to-witnesses-and-browsers\&quot;&gt;Proving to Witnesses and Browsers&lt;/h4&gt;\n      &lt;a href=\&quot;#proving-to-witnesses-and-browsers\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Now witnesses only need to look at the prefix tree instead of individual site logs, and thus they must verify whole-tree updates. The most important thing to ensure is that every siteâs log is append-only. So whenever the tree is updated, it must produce a âproofâ containing every new/deleted/modified entry, as well as a consistency proof for each entry showing that the site log corresponding to that entry has been properly appended to. Once the witness has verified this prefix tree update proof, it signs the root.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2bq4UBxoOgKPcysPPxnKD8/9e8c2a8a3b092fffae853b8d477efb07/BLOG-2875_7.png\&quot; alt=\&quot;A sequence diagram with parties, left to right, User, Site, Asset Host, Transparency Service, and Witnesses. The sequence is as follows. The site sends new assets to the asset host and the new manifest hash to the transparency service. The transparency service waits to collect these updates from many sites. Eventually, the transparency service sends a new root and tree update proof to the witnesses, and gets back a many-times signed root. It returns the signed root and prefix tree inclusion proof to the site. Later, a user connects to the site, requesting GET /index.html. The site responds with index.html, the signed root, the inclusion proof, and the integrity manifest. The user checks the integrity, inclusion proof, and signatures.\&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;1973\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;&lt;sub&gt;The sequence of updating a siteâs assets and serving the site with transparency enabled.&lt;/sub&gt;&lt;/p&gt;&lt;p&gt;The client-side verification procedure is as in the previous section, with two modifications:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;The client now verifies two inclusion proofs: one for the integrity policyâs membership in the site log, and one for the site logâs membership in a prefix tree.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The client verifies the signature over the prefix tree root, since the witness no longer signs individual chain hashes. As before, the acceptable public keys are whichever witnesses the client trusts.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;b&gt;Signaling transparency.&lt;/b&gt; Now that there is a single source of truth, namely the prefix tree, a client can know a site is enrolled in transparency by simply fetching the siteâs entry in the tree. This alone would work, but it violates our requirement of âno added round trips,â so we instead require that client browsers will ship with the list of sites included in the prefix tree. We call this the &lt;b&gt;transparency preload list&lt;/b&gt;.Â &lt;/p&gt;&lt;p&gt;If a site appears in the preload list, the browser will expect it to provide an inclusion proof in the prefix tree, or else a proof of non-inclusion in a newer version of the prefix tree, thereby showing theyâve unenrolled. The site must provide one of these proofs until the last preload list it appears in has expired. Finally, even though the preload list is derived from the prefix tree, there is nothing enforcing this relationship. Thus, the preload list should also be published transparently.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h4 id=\&quot;filling-in-missing-properties\&quot;&gt;Filling in Missing Properties&lt;/h4&gt;\n      &lt;a href=\&quot;#filling-in-missing-properties\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Remember we still have the requirements of monitorability, opt-out being transparent, and no single point of failure/trust. We fill in those details now.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Adding monitorability.&lt;/b&gt; So far, in order for a site operator to ensure their site was not hijacked, they would have to constantly query every transparency service for its domain and verify that it hasnât been tampered with. This is certainly better than the &lt;a href=\&quot;https://ct.cloudflare.com/\&quot;&gt;&lt;u&gt;500k events per hour&lt;/u&gt;&lt;/a&gt; that CT monitors have to ingest, but it still requires the monitor to be constantly polling the prefix tree, and it imposes a constant load for the transparency service.&lt;/p&gt;&lt;p&gt;We add a field to the prefix tree leaf structure: the leaf now stores a âcreatedâ timestamp, containing the time the leaf was created. Witnesses ensure that the âcreatedâ field remains the same over all leaf updates (and it is deleted when the leaf is deleted). To monitor, a site operator need only keep the last observed âcreatedâ and âlog sizeâ fields of its leaf. If it fetches the latest leaf and sees both unchanged, it knows that no changes occurred since the last check.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Adding transparency of opt-out.&lt;/b&gt; We must also do the same thing as above for leaf deletions. When a leaf is deleted, a monitor should be able to learn when the deletion occurred within some reasonable time frame. Thus, rather than outright removing a leaf, the transparency service responds to unenrollment requests by replacing the leaf with a &lt;b&gt;tombstone&lt;/b&gt; value, containing just a âcreatedâ timestamp. As before, witnesses ensure that this field remains unchanged until the leaf is permanently deleted (after some visibility period) or re-enrolled.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Permitting multiple transparency services.&lt;/b&gt; Since we require that there be no single point of failure or trust, we imagine an ecosystem where there are a handful of non-colluding, reasonably trustworthy transparency service providers, each with their own prefix tree. Like Certificate Transparency (CT), this set should not be too large. It must be small enough that reasonable levels of trust can be established, and so that independent auditors can reasonably handle the load of verifying all of them.&lt;/p&gt;&lt;p&gt;Ok thatâs the end of the most technical part of this post. Weâre now going to talk about how to tweak this system to provide all kinds of additional nice properties.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;not-achieving-consistency\&quot;&gt;(Not) Achieving Consistency&lt;/h2&gt;\n      &lt;a href=\&quot;#not-achieving-consistency\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Transparency would be useless if, every time a site updates, it serves 100,000 new versions of itself. Any auditor would have to go through every single version of the code in order to ensure no user was targeted with malware. This is bad even if the velocity of versions is lower. If a site publishes just one new version per week, but every version from the past ten years is still servable, then users can still be served extremely old, potentially vulnerable versions of the site, without anyone knowing. Thus, in order to make transparency valuable, we need &lt;b&gt;consistency&lt;/b&gt;, the property that every browser sees the same version of the site at a given time.&lt;/p&gt;&lt;p&gt;We will not achieve the strongest version of consistency, but it turns out that weaker notions are sufficient for us. If, unlike the above scenario, a site had 8 valid versions of itself at a given time, then that would be pretty manageable for an auditor. So even though itâs true that users donât all see the same version of the site, they will all still benefit from transparency, as desired.&lt;/p&gt;&lt;p&gt;We describe two types of inconsistency and how we mitigate them.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;tree-inconsistency\&quot;&gt;Tree Inconsistency&lt;/h3&gt;\n      &lt;a href=\&quot;#tree-inconsistency\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Tree inconsistency occurs when transparency servicesâ prefix trees disagree on the chain hash of a site, thus disagreeing on the history of the site. One way to fully eliminate this is to establish a consensus mechanism for prefix trees. A simple one is majority voting: if there are five transparency services, a site must present three tree inclusion proofs to a user, showing the chain hash is present in three trees. This, of course, triples the tree inclusion proof size, and lowers the fault tolerance of the entire system (if three log operators go down, then no transparent site can publish any updates).&lt;/p&gt;&lt;p&gt;Instead of consensus, we opt to simply limit the amount of inconsistency by limiting the number of transparency services. In 2025, Chrome &lt;a href=\&quot;https://www.gstatic.com/ct/log_list/v3/log_list.json\&quot;&gt;&lt;u&gt;trusts&lt;/u&gt;&lt;/a&gt; eight Certificate Transparency logs. A similar number of transparency services would be fine for our system. Plus, it is still possible to detect and prove the existence of inconsistencies between trees, since roots are signed by witnesses. So if it becomes the norm to use the same version on all trees, then social pressure can be applied when sites violate this.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;temporal-inconsistency\&quot;&gt;Temporal Inconsistency&lt;/h3&gt;\n      &lt;a href=\&quot;#temporal-inconsistency\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Temporal inconsistency occurs when a user gets a newer or older version of the site (both still unexpired), depending on some external factors such as geographic location or cookie values. In the extreme, as stated above, if a signed prefix root is valid for ten years, then a site can serve a user any version of the site from the last ten years.&lt;/p&gt;&lt;p&gt;As with tree inconsistency, this can be resolved using consensus mechanisms. If, for example, the latest manifest were published on a blockchain, then a user could fetch the latest blockchain head and ensure they got the latest version of the site. However, this incurs an extra network round trip for the client, and requires sites to wait for their hash to get published on-chain before they can update. More importantly, building this kind of consensus mechanism into our specification would drastically increase its complexity. Weâre aiming for v1.0 here.&lt;/p&gt;&lt;p&gt;We mitigate temporal inconsistency by requiring reasonably short validity periods for witness signatures. Making prefix root signatures valid for, e.g., one week would drastically limit the number of simultaneously servable versions. The cost is that site operators must now query the transparency service at least once a week for the new signed root and inclusion proof, even if nothing in the site changed. The sites cannot skip this, and the transparency service must be able to handle this load. This parameter must be tuned carefully.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;beyond-integrity-consistency-and-transparency\&quot;&gt;Beyond Integrity, Consistency, and Transparency&lt;/h2&gt;\n      &lt;a href=\&quot;#beyond-integrity-consistency-and-transparency\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Providing integrity, consistency, and transparency is already a huge endeavor, but there are some additional app store-like security features that can be integrated into this system without too much work.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;code-signing\&quot;&gt;Code Signing&lt;/h3&gt;\n      &lt;a href=\&quot;#code-signing\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;One problem that WAICT doesnât solve is that of &lt;i&gt;provenance&lt;/i&gt;: where did the code the user is running come from, precisely? In settings where audits of code happen frequently, this is not so important, because some third party will be reading the code regardless. But for smaller self-hosted deployments of open-source software, this may not be viable. For example, if Alice hosts her own version of &lt;a href=\&quot;https://cryptpad.org/\&quot;&gt;&lt;u&gt;Cryptpad&lt;/u&gt;&lt;/a&gt; for her friend Bob, how can Bob be sure the code matches the real code in Cryptpadâs Github repo?&lt;/p&gt;&lt;p&gt;&lt;b&gt;WEBCAT.&lt;/b&gt; The folks at the Freedom of Press Foundation (FPF) have built a solution to this, called &lt;a href=\&quot;https://securedrop.org/news/introducing-webcat-web-based-code-assurance-and-transparency/\&quot;&gt;&lt;u&gt;WEBCAT&lt;/u&gt;&lt;/a&gt;. This protocol allows site owners to announce the identities of the developers that have signed the siteâs integrity manifest, i.e., have signed all the code and other assets that the site is serving to the user. Users with the WEBCAT plugin can then see the developerâs &lt;a href=\&quot;https://www.sigstore.dev/\&quot;&gt;&lt;u&gt;Sigstore&lt;/u&gt;&lt;/a&gt; signatures, and trust the code based on that.&lt;/p&gt;&lt;p&gt;Weâve made WAICT extensible enough to fit WEBCAT inside and benefit from the transparency components. Concretely, we permit manifests to hold additional metadata, which we call &lt;b&gt;extensions&lt;/b&gt;. In this case, the extension holds a list of developersâ Sigstore identities. To be useful, browsers must expose an API for browser plugins to access these extension values. With this API, independent parties can build plugins for whatever feature they wish to layer on top of WAICT.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;cooldown\&quot;&gt;Cooldown&lt;/h2&gt;\n      &lt;a href=\&quot;#cooldown\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;So far we have not built anything that can prevent attacks in the moment. An attacker who breaks into a website can still delete any code-signing extensions, or just unenroll the site from transparency entirely, and continue with their attack as normal. The unenrollment will be logged, but the malicious code will not be, and by the time anyone sees the unenrollment, it may be too late.&lt;/p&gt;&lt;p&gt;To prevent spontaneous unenrollment, we can enforce &lt;b&gt;unenrollment cooldown&lt;/b&gt; client-side. Suppose the cooldown period is 24 hours. Then the rule is: if a site appears on the preload list, then the client will require that either 1) the site have transparency enabled, or 2) the site have a tombstone entry that is at least 24 hours old. Thus, an attacker will be forced to either serve a transparency-enabled version of the site, or serve a broken site for 24 hours.&lt;/p&gt;&lt;p&gt;Similarly, to prevent spontaneous extension modifications, we can enforce &lt;b&gt;extension cooldown&lt;/b&gt; on the client. We will take code signing as an example, saying that any change in developer identities requires a 24 hour waiting period to be accepted. First, we require that extension &lt;code&gt;dev-ids&lt;/code&gt; has a preload list of its own, letting the client know which sites have opted into code signing (if a preload list doesnât exist then any site can delete the extension at any time). The client rule is as follows: if the site appears in the preload list, then both 1) &lt;code&gt;dev-ids&lt;/code&gt; must exist as an extension in the manifest, and 2) &lt;code&gt;dev-ids-inclusion&lt;/code&gt; must contain an inclusion proof showing that the current value of dev-ids was in a prefix tree that is at least 24 hours old. With this rule, a client will reject values of &lt;code&gt;dev-ids&lt;/code&gt; that are newer than a day. If a site wants to delete &lt;code&gt;dev-ids&lt;/code&gt;, they must 1) request that it be removed from the preload list, and 2) in the meantime, replace the dev-ids value with the empty string and update &lt;code&gt;dev-ids-inclusion&lt;/code&gt; to reflect the new value.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;deployment-considerations\&quot;&gt;Deployment Considerations&lt;/h2&gt;\n      &lt;a href=\&quot;#deployment-considerations\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;There are a lot of distinct roles in this ecosystem. Letâs sketch out the trust and resource requirements for each role.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Transparency service.&lt;/b&gt; These parties store metadata for every transparency-enabled site on the web. If there are 100 million domains, and each entry is 256B each (a few hashes, plus a URL), this comes out to 26GB for a single tree, not including the intermediate hashes. To prevent size blowup, there would probably have to be a pruning rule that unenrolls sites after a long inactivity period. Transparency services should have largely uncorrelated downtime, since, if all services go down, no transparency-enabled site can make any updates. Thus, transparency services must have a moderate amount of storage, be relatively highly available, and have downtime periods uncorrelated with each other.&lt;/p&gt;&lt;p&gt;Transparency services require some trust, but their behavior is narrowly constrained by witnesses. Theoretically, a service can replace any leafâs chain hash with its own, and the witness will validate it (as long as the consistency proof is valid). But such changes are detectable by anyone that monitors that leaf.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Witness.&lt;/b&gt; These parties verify prefix tree updates and sign the resulting roots. Their storage costs are similar to that of a transparency service, since they must keep a full copy of a prefix tree for every transparency service they witness. Also like the transparency services, they must have high uptime. Witnesses must also be trusted to keep their signing key secret for a long period of time, at least long enough to permit browser trust stores to be updated when a new key is created.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Asset host.&lt;/b&gt; These parties carry little trust. They cannot serve bad data, since any query response is hashed and compared to a known hash. The only malicious behavior an asset host can do is refuse to respond to queries. Asset hosts can also do this by accident due to downtime.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Client.&lt;/b&gt; This is the most trust-sensitive part. The client is the software that performs all the transparency and integrity checks. This is, of course, the web browser itself. We must trust this.&lt;/p&gt;&lt;p&gt;We at Cloudflare would like to contribute what we can to this ecosystem. It should be possible to run both a transparency service and a witness. Of course, our witness should not monitor our own transparency service. Rather, we can witness other organizationsâ transparency services, and our transparency service can be witnessed by other organizations.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;supporting-alternate-ecosystems\&quot;&gt;Supporting Alternate Ecosystems&lt;/h3&gt;\n      &lt;a href=\&quot;#supporting-alternate-ecosystems\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;WAICT should be compatible with non-standard ecosystems, ones where the large players do not really exist, or at least not in the way they usually do. We are working with the FPF on defining transparency for alternate ecosystems with different network and trust environments. The primary example we have is that of the Tor ecosystem.&lt;/p&gt;&lt;p&gt;A paranoid Tor user may not trust existing transparency services or witnesses, and there might not be any other trusted party with the resources to self-host these functionalities. For this use case, it may be reasonable to put the &lt;a href=\&quot;https://github.com/freedomofpress/webcat-infra-chain\&quot;&gt;&lt;u&gt;prefix tree on a blockchain somewhere&lt;/u&gt;&lt;/a&gt;. This makes the usual domain validation impossible (thereâs no validator server to speak of), but this is fine for onion services. Since an onion address is just a public key, a signature is sufficient to prove ownership of the domain.&lt;/p&gt;&lt;p&gt;One consequence of a consensus-backed prefix tree is that witnesses are now unnecessary, and there is only need for the single, canonical, transparency service. This mostly solves the problems of tree inconsistency at the expense of latency of updates.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;next-steps\&quot;&gt;Next Steps&lt;/h2&gt;\n      &lt;a href=\&quot;#next-steps\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;We are still very early in the standardization process. One of the more immediate next steps is to get subresource integrity working for more data types, particularly WASM and images. After that, we can begin standardizing the integrity manifest format. And then after that we can start standardizing all the other features. We intend to work on this specification hand-in-hand with browsers and the IETF, and we hope to have some exciting betas soon.&lt;/p&gt;&lt;p&gt;In the meantime, you can follow along with our &lt;a href=\&quot;https://github.com/rozbb/draft-waict-transparency\&quot;&gt;&lt;u&gt;transparency specification draft&lt;/u&gt;&lt;/a&gt;, check out the open problems, and share your ideas. Pull requests and issues are always welcome!&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;acknowledgements\&quot;&gt;Acknowledgements&lt;/h2&gt;\n      &lt;a href=\&quot;#acknowledgements\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Many thanks to Dennis Jackson from Mozilla for the lengthy back-and-forth meetings on design, to Giulio B and Cory Myers from FPF for their immensely helpful influence and feedback, and to Richard Hansen for great feedback.&lt;/p&gt;&quot;],&quot;published_at&quot;:[0,&quot;2025-10-16T14:00+00:00&quot;],&quot;updated_at&quot;:[0,&quot;2025-10-16T13:00:09.340Z&quot;],&quot;feature_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1ycccYkFLGh6O5X82vi46F/c39a22d072a2b8f731315b76a672ff27/BLOG-2875_1.png&quot;],&quot;tags&quot;:[1,[[0,{&quot;id&quot;:[0,&quot;6Mp7ouACN2rT3YjL1xaXJx&quot;],&quot;name&quot;:[0,&quot;Security&quot;],&quot;slug&quot;:[0,&quot;security&quot;]}],[0,{&quot;id&quot;:[0,&quot;7BhREQYSSCo9INFzIXH0G0&quot;],&quot;name&quot;:[0,&quot;Malicious JavaScript&quot;],&quot;slug&quot;:[0,&quot;malicious-javascript&quot;]}],[0,{&quot;id&quot;:[0,&quot;78aSAeMjGNmCuetQ7B4OgU&quot;],&quot;name&quot;:[0,&quot;JavaScript&quot;],&quot;slug&quot;:[0,&quot;javascript&quot;]}],[0,{&quot;id&quot;:[0,&quot;2UVIYusJwlvsmPYl2AvSuR&quot;],&quot;name&quot;:[0,&quot;Deep Dive&quot;],&quot;slug&quot;:[0,&quot;deep-dive&quot;]}],[0,{&quot;id&quot;:[0,&quot;1QsJUMpv0QBSLiVZLLQJ3V&quot;],&quot;name&quot;:[0,&quot;Cryptography&quot;],&quot;slug&quot;:[0,&quot;cryptography&quot;]}],[0,{&quot;id&quot;:[0,&quot;1x7tpPmKIUCt19EDgM1Tsl&quot;],&quot;name&quot;:[0,&quot;Research&quot;],&quot;slug&quot;:[0,&quot;research&quot;]}]]],&quot;relatedTags&quot;:[0],&quot;authors&quot;:[1,[[0,{&quot;name&quot;:[0,&quot;Michael Rosenberg&quot;],&quot;slug&quot;:[0,&quot;michael-rosenberg&quot;],&quot;bio&quot;:[0],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/65QlcKadfDOXGKGv78Y4Cz/b7562dd249bffe7e919d99a6b0cb63b3/Michael_Rosenberg.jpg&quot;],&quot;location&quot;:[0],&quot;website&quot;:[0],&quot;twitter&quot;:[0],&quot;facebook&quot;:[0],&quot;publiclyIndex&quot;:[0,true]}]]],&quot;meta_description&quot;:[0,&quot;Today, there&#39;s no way to audit a siteâs client-side code as it changes, making it hard to trust sites that use cryptography. We preview a specification we coauthored that adds auditability to the web.\n&quot;],&quot;primary_author&quot;:[0,{}],&quot;localeList&quot;:[0,{&quot;name&quot;:[0,&quot;blog-english-only&quot;],&quot;enUS&quot;:[0,&quot;English for Locale&quot;],&quot;zhCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhHansCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhTW&quot;:[0,&quot;No Page for Locale&quot;],&quot;frFR&quot;:[0,&quot;No Page for Locale&quot;],&quot;deDE&quot;:[0,&quot;No Page for Locale&quot;],&quot;itIT&quot;:[0,&quot;No Page for Locale&quot;],&quot;jaJP&quot;:[0,&quot;No Page for Locale&quot;],&quot;koKR&quot;:[0,&quot;No Page for Locale&quot;],&quot;ptBR&quot;:[0,&quot;No Page for Locale&quot;],&quot;esLA&quot;:[0,&quot;No Page for Locale&quot;],&quot;esES&quot;:[0,&quot;No Page for Locale&quot;],&quot;enAU&quot;:[0,&quot;No Page for Locale&quot;],&quot;enCA&quot;:[0,&quot;No Page for Locale&quot;],&quot;enIN&quot;:[0,&quot;No Page for Locale&quot;],&quot;enGB&quot;:[0,&quot;No Page for Locale&quot;],&quot;idID&quot;:[0,&quot;No Page for Locale&quot;],&quot;ruRU&quot;:[0,&quot;No Page for Locale&quot;],&quot;svSE&quot;:[0,&quot;No Page for Locale&quot;],&quot;viVN&quot;:[0,&quot;No Page for Locale&quot;],&quot;plPL&quot;:[0,&quot;No Page for Locale&quot;],&quot;arAR&quot;:[0,&quot;No Page for Locale&quot;],&quot;nlNL&quot;:[0,&quot;No Page for Locale&quot;],&quot;thTH&quot;:[0,&quot;No Page for Locale&quot;],&quot;trTR&quot;:[0,&quot;No Page for Locale&quot;],&quot;heIL&quot;:[0,&quot;No Page for Locale&quot;],&quot;lvLV&quot;:[0,&quot;No Page for Locale&quot;],&quot;etEE&quot;:[0,&quot;No Page for Locale&quot;],&quot;ltLT&quot;:[0,&quot;No Page for Locale&quot;]}],&quot;url&quot;:[0,&quot;https://blog.cloudflare.com/improving-the-trustworthiness-of-javascript-on-the-web&quot;],&quot;metadata&quot;:[0,{&quot;title&quot;:[0,&quot;Improving the trustworthiness of Javascript on the Web&quot;],&quot;description&quot;:[0,&quot;Today, there&#39;s no way to audit a siteâs client-side code as it changes, making it hard to trust sites that use cryptography. We preview a specification we coauthored that adds auditability to the web.\n&quot;],&quot;imgPreview&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5j5YpBibRfLDbgQWfNYz4S/990ec92b60da30d6cf77f1ae5e8e9212/BLOG-2875_OG.png&quot;]}],&quot;publicly_index&quot;:[0,true]}],&quot;initialReadingTime&quot;:[0,&quot;19&quot;],&quot;relatedPosts&quot;:[1,[[0,{&quot;id&quot;:[0,&quot;12E3V053vhNrZrU5I2AAV1&quot;],&quot;title&quot;:[0,&quot;How we found a bug in Go&#39;s arm64 compiler&quot;],&quot;slug&quot;:[0,&quot;how-we-found-a-bug-in-gos-arm64-compiler&quot;],&quot;excerpt&quot;:[0,&quot;84 million requests a second means even rare bugs appear often. We&#39;ll reveal how we discovered a race condition in the Go arm64 compiler and got it fixed.&quot;],&quot;featured&quot;:[0,false],&quot;html&quot;:[0,&quot;&lt;p&gt;Every second, 84 million HTTP requests are hitting Cloudflare across our fleet of data centers in 330 cities. It means that even the rarest of bugs can show up frequently. In fact, it was our scale that recently led us to discover a bug in Go&amp;#39;s arm64 compiler which causes a race condition in the generated code.&lt;/p&gt;&lt;p&gt;This post breaks down how we first encountered the bug, investigated it, and ultimately drove to the root cause.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;investigating-a-strange-panic\&quot;&gt;Investigating a strange panic&lt;/h2&gt;\n      &lt;a href=\&quot;#investigating-a-strange-panic\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;We run a service in our network which configures the kernel to handle traffic for some products like &lt;a href=\&quot;https://www.cloudflare.com/network-services/products/magic-transit/\&quot;&gt;&lt;u&gt;Magic Transit&lt;/u&gt;&lt;/a&gt; and &lt;a href=\&quot;https://www.cloudflare.com/network-services/products/magic-wan/\&quot;&gt;&lt;u&gt;Magic WAN&lt;/u&gt;&lt;/a&gt;. Our monitoring watches this closely, and it started to observe very sporadic panics on arm64 machines.&lt;/p&gt;&lt;p&gt;We first saw one with a fatal error stating that &lt;a href=\&quot;https://github.com/golang/go/blob/c0ee2fd4e309ef0b8f4ab6f4860e2626c8e00802/src/runtime/traceback.go#L566\&quot;&gt;&lt;u&gt;traceback did not unwind completely&lt;/u&gt;&lt;/a&gt;. That error suggests that invariants were violated when traversing the stack, likely because of stack corruption. After a brief investigation we decided that it was probably rare stack memory corruption. This was a largely idle control plane service where unplanned restarts have negligible impact, and so we felt that following up was not a priority unless it kept happening.&lt;/p&gt;&lt;p&gt;And then it kept happening.Â &lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h4 id=\&quot;coredumps-per-hour\&quot;&gt;Coredumps per hour&lt;/h4&gt;\n      &lt;a href=\&quot;#coredumps-per-hour\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    \n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7ohMD2ph3I9l7lbZQWZ4xl/243e679d8293565fc6a55a670c9f3583/BLOG-2906_2.png\&quot; alt=\&quot;BLOG-2906 2\&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;526\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;When we first saw this bug we saw that the fatal errors correlated with recovered panics. These were caused by some old code which used panic/recover as error handling.Â &lt;/p&gt;&lt;p&gt;At this point, our theory was:Â &lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;All of the fatal panics happen within stack unwinding.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;We correlated an increased volume of recovered panics with these fatal panics.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Recovering a panic unwinds goroutine stacks to call deferred functions.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;A related &lt;a href=\&quot;https://github.com/golang/go/issues/73259\&quot;&gt;&lt;u&gt;Go issue (#73259)&lt;/u&gt;&lt;/a&gt; reported an arm64 stack unwinding crash.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Letâs stop using panic/recover for error handling and wait out the upstream fix?&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;So we did that and watched as fatal panics stopped occurring as the release rolled out. Fatal panics gone, our theoretical mitigation seemed to work, and this was no longer our problem. We subscribed to the upstream issue so we could update when it was resolved and put it out of our minds.&lt;/p&gt;&lt;p&gt;But, this turned out to be a much stranger bug than expected. Putting it out of our minds was premature as the same class of fatal panics came back at a much higher rate. A month later, we were seeing up to 30 daily fatal panics with no real discernible cause; while that might account for only one machine a day in less than 10% of our data centers, we found it concerning that we didnât understand the cause. The first thing we checked was the number of recovered panics, to match our previous pattern, but there were none. More interestingly, we could not correlate this increased rate of fatal panics with anything. A release? Infrastructure changes? The position of Mars? &lt;/p&gt;&lt;p&gt;At this point we felt like we needed to dive deeper to better understand the root cause. Pattern matching and hoping was clearly insufficient.Â &lt;/p&gt;&lt;p&gt;We saw two classes of this bug -- a crash while accessing invalid memory and an explicitly checked fatal error.Â &lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h4 id=\&quot;fatal-error\&quot;&gt;Fatal Error&lt;/h4&gt;\n      &lt;a href=\&quot;#fatal-error\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    \n            &lt;pre class=\&quot;language-text\&quot;&gt;&lt;code class=\&quot;language-text\&quot;&gt;goroutine 153 gp=0x4000105340 m=324 mp=0x400639ea08 [GC worker (active)]:\n/usr/local/go/src/runtime/asm_arm64.s:244 +0x6c fp=0x7ff97fffe870 sp=0x7ff97fffe860 pc=0x55558d4098fc\nruntime.systemstack(0x0)\n       /usr/local/go/src/runtime/mgc.go:1508 +0x68 fp=0x7ff97fffe860 sp=0x7ff97fffe810 pc=0x55558d3a9408\nruntime.gcBgMarkWorker.func2()\n       /usr/local/go/src/runtime/mgcmark.go:1102\nruntime.gcDrainMarkWorkerIdle(...)\n       /usr/local/go/src/runtime/mgcmark.go:1188 +0x434 fp=0x7ff97fffe810 sp=0x7ff97fffe7a0 pc=0x55558d3ad514\nruntime.gcDrain(0x400005bc50, 0x7)\n       /usr/local/go/src/runtime/mgcmark.go:212 +0x1c8 fp=0x7ff97fffe7a0 sp=0x7ff97fffe6f0 pc=0x55558d3ab248\nruntime.markroot(0x400005bc50, 0x17e6, 0x1)\n       /usr/local/go/src/runtime/mgcmark.go:238 +0xa8 fp=0x7ff97fffe6f0 sp=0x7ff97fffe6a0 pc=0x55558d3ab578\nruntime.markroot.func1()\n       /usr/local/go/src/runtime/mgcmark.go:887 +0x290 fp=0x7ff97fffe6a0 sp=0x7ff97fffe560 pc=0x55558d3acaa0\nruntime.scanstack(0x4014494380, 0x400005bc50)\n       /usr/local/go/src/runtime/traceback.go:447 +0x2ac fp=0x7ff97fffe560 sp=0x7ff97fffe4d0 pc=0x55558d3eeb7c\nruntime.(*unwinder).next(0x7ff97fffe5b0?)\n       /usr/local/go/src/runtime/traceback.go:566 +0x110 fp=0x7ff97fffe4d0 sp=0x7ff97fffe490 pc=0x55558d3eed40\nruntime.(*unwinder).finishInternal(0x7ff97fffe4f8?)\n       /usr/local/go/src/runtime/panic.go:1073 +0x38 fp=0x7ff97fffe490 sp=0x7ff97fffe460 pc=0x55558d403388\nruntime.throw({0x55558de6aa27?, 0x7ff97fffe638?})\nruntime stack:\nfatal error: traceback did not unwind completely\n       stack=[0x4015d6a000-0x4015d8a000\nruntime: g8221077: frame.sp=0x4015d784c0 top=0x4015d89fd0&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h4 id=\&quot;segmentation-fault\&quot;&gt;Segmentation fault&lt;/h4&gt;\n      &lt;a href=\&quot;#segmentation-fault\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    \n            &lt;pre class=\&quot;language-TEXT\&quot;&gt;&lt;code class=\&quot;language-TEXT\&quot;&gt;goroutine 187 gp=0x40003aea80 m=13 mp=0x40003ca008 [GC worker (active)]:\n       /usr/local/go/src/runtime/asm_arm64.s:244 +0x6c fp=0x7fff2afde870 sp=0x7fff2afde860 pc=0x55557e2d98fc\nruntime.systemstack(0x0)\n       /usr/local/go/src/runtime/mgc.go:1489 +0x94 fp=0x7fff2afde860 sp=0x7fff2afde810 pc=0x55557e279434\nruntime.gcBgMarkWorker.func2()\n       /usr/local/go/src/runtime/mgcmark.go:1112\nruntime.gcDrainMarkWorkerDedicated(...)\n       /usr/local/go/src/runtime/mgcmark.go:1188 +0x434 fp=0x7fff2afde810 sp=0x7fff2afde7a0 pc=0x55557e27d514\nruntime.gcDrain(0x4000059750, 0x3)\n       /usr/local/go/src/runtime/mgcmark.go:212 +0x1c8 fp=0x7fff2afde7a0 sp=0x7fff2afde6f0 pc=0x55557e27b248\nruntime.markroot(0x4000059750, 0xb8, 0x1)\n       /usr/local/go/src/runtime/mgcmark.go:238 +0xa8 fp=0x7fff2afde6f0 sp=0x7fff2afde6a0 pc=0x55557e27b578\nruntime.markroot.func1()\n       /usr/local/go/src/runtime/mgcmark.go:887 +0x290 fp=0x7fff2afde6a0 sp=0x7fff2afde560 pc=0x55557e27caa0\nruntime.scanstack(0x40042cc000, 0x4000059750)\n       /usr/local/go/src/runtime/traceback.go:458 +0x188 fp=0x7fff2afde560 sp=0x7fff2afde4d0 pc=0x55557e2bea58\nruntime.(*unwinder).next(0x7fff2afde5b0)\ngoroutine 0 gp=0x40003af880 m=13 mp=0x40003ca008 [idle]:\nPC=0x55557e2bea58 m=13 sigcode=1 addr=0x118\nSIGSEGV: segmentation violation&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Now we could observe some clear patterns. Both errors occur when unwinding the stack in &lt;code&gt;(*unwinder).next&lt;/code&gt;. In one case we saw an intentional&lt;a href=\&quot;https://github.com/golang/go/blob/b3251514531123d7fd007682389bce7428d159a0/src/runtime/traceback.go#L566\&quot;&gt; &lt;u&gt;fatal error&lt;/u&gt;&lt;/a&gt; as the runtime identified that unwinding could not complete and the stack was in a bad state. In the other case there was a direct memory access error that happened while trying to unwind the stack. The segfault was discussed in the &lt;a href=\&quot;https://github.com/golang/go/issues/73259#issuecomment-2786818812\&quot;&gt;&lt;u&gt;GitHub issue&lt;/u&gt;&lt;/a&gt; and a Go engineer identified it as dereference of a go scheduler struct, &lt;a href=\&quot;https://github.com/golang/go/blob/924fe98902cdebf20825ab5d1e4edfc0fed2966f/src/runtime/runtime2.go#L536\&quot;&gt;&lt;u&gt;m&lt;/u&gt;&lt;/a&gt;, when&lt;a href=\&quot;https://github.com/golang/go/blob/b3251514531123d7fd007682389bce7428d159a0/src/runtime/traceback.go#L458\&quot;&gt; &lt;u&gt;unwinding&lt;/u&gt;&lt;/a&gt;.Â   &lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;a-review-of-go-scheduler-structs\&quot;&gt;A review of Go scheduler structs&lt;/h3&gt;\n      &lt;a href=\&quot;#a-review-of-go-scheduler-structs\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Go uses a lightweight userspace scheduler to manage concurrency. Many goroutines are scheduled on a smaller number of kernel threads â this is often referred to as M:N scheduling. Any individual goroutine can be scheduled on any kernel thread. The scheduler has three core types â &lt;a href=\&quot;https://github.com/golang/go/blob/924fe98902cdebf20825ab5d1e4edfc0fed2966f/src/runtime/runtime2.go#L394\&quot;&gt;&lt;code&gt;&lt;u&gt;g&lt;/u&gt;&lt;/code&gt;&lt;/a&gt;Â  (the goroutine), &lt;a href=\&quot;https://github.com/golang/go/blob/924fe98902cdebf20825ab5d1e4edfc0fed2966f/src/runtime/runtime2.go#L536\&quot;&gt;&lt;code&gt;&lt;u&gt;m&lt;/u&gt;&lt;/code&gt;&lt;/a&gt; (the kernel thread, or âmachineâ), and &lt;a href=\&quot;https://github.com/golang/go/blob/924fe98902cdebf20825ab5d1e4edfc0fed2966f/src/runtime/runtime2.go#L644\&quot;&gt;&lt;code&gt;&lt;u&gt;p&lt;/u&gt;&lt;/code&gt;&lt;/a&gt; (the physical execution context, orÂ  âprocessorâ). For a goroutine to be scheduled a free &lt;code&gt;m&lt;/code&gt; must acquire a free &lt;code&gt;p&lt;/code&gt;, which will execute a g. Each &lt;code&gt;g&lt;/code&gt; contains a field for its m if it is currently running, otherwise it will be &lt;b&gt;nil&lt;/b&gt;. This is all the context needed for this post but the &lt;a href=\&quot;https://github.com/golang/go/blob/master/src/runtime/HACKING.md#gs-ms-ps\&quot;&gt;&lt;u&gt;go runtime docs&lt;/u&gt;&lt;/a&gt; explore this more comprehensively.Â &lt;/p&gt;&lt;p&gt;At this point we can start to make inferences on whatâs happening: the program crashes because we try to unwind a goroutine stack which is invalid. In the first backtrace, if a &lt;a href=\&quot;https://github.com/golang/go/blob/b3251514531123d7fd007682389bce7428d159a0/src/runtime/traceback.go#L446\&quot;&gt;&lt;u&gt;return address is null, we call &lt;/u&gt;&lt;code&gt;&lt;u&gt;finishInternal&lt;/u&gt;&lt;/code&gt;&lt;u&gt; and abort because the stack was not fully unwound&lt;/u&gt;&lt;/a&gt;. The segmentation fault case in the second backtrace is a bit more interesting: if instead the return address is non-zero but not a function then the unwinder code assumes that the goroutine is currently running. It&amp;#39;ll then dereference m and fault by accessing &lt;code&gt;m.incgo&lt;/code&gt; (the offset of &lt;code&gt;incgo&lt;/code&gt; into &lt;code&gt;struct m&lt;/code&gt; is 0x118, the faulting memory access). &lt;/p&gt;&lt;p&gt;What, then, is causing this corruption? The traces were difficult to get anything useful from â our service has hundreds if not thousands of active goroutines. It was fairly clear from the beginning that the panic was remote from the actual bug. The crashes were all observed while unwinding the stack and if this were an issue any time the stack was unwound on arm64 we would be seeing it in many more services. We felt pretty confident that the stack unwinding was happening correctly but on an invalid stack.Â &lt;/p&gt;&lt;p&gt;Our investigation stalled for a while at this point â making guesses, testing guesses, trying to infer if the panic rate went up or down, or if nothing changed. There was &lt;a href=\&quot;https://github.com/golang/go/issues/73259\&quot;&gt;&lt;u&gt;a known issue&lt;/u&gt;&lt;/a&gt; on Goâs GitHub issue tracker which matched our symptoms almost exactly, but what they discussed was mostly what we already knew. At some point when looking through the linked stack traces we realized that their crash referenced an old version of a library that we were also using â Go Netlink.&lt;/p&gt;\n            &lt;pre class=\&quot;language-text\&quot;&gt;&lt;code class=\&quot;language-text\&quot;&gt;goroutine 1267 gp=0x4002a8ea80 m=nil [runnable (scan)]:\nruntime.asyncPreempt2()\n        /usr/local/go/src/runtime/preempt.go:308 +0x3c fp=0x4004cec4c0 sp=0x4004cec4a0 pc=0x46353c\nruntime.asyncPreempt()\n        /usr/local/go/src/runtime/preempt_arm64.s:47 +0x9c fp=0x4004cec6b0 sp=0x4004cec4c0 pc=0x4a6a8c\ngithub.com/vishvananda/netlink/nl.(*NetlinkSocket).Receive(0x14360300000000?)\n        /go/pkg/mod/github.com/!data!dog/netlink@v1.0.1-0.20240223195320-c7a4f832a3d1/nl/nl_linux.go:803 +0x130 fp=0x4004cfc710 sp=0x4004cec6c0 pc=0xf95de0\n&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;&lt;/p&gt;&lt;p&gt;We spot-checked a few stack traces and confirmed the presence of this Netlink library. Querying our logs showed that not only did we share a library â every single segmentation fault we observed had happened while preempting&lt;a href=\&quot;https://github.com/vishvananda/netlink/blob/e1e260214862392fb28ff72c9b11adc84df73e2c/nl/nl_linux.go#L880\&quot;&gt; &lt;code&gt;&lt;u&gt;NetlinkSocket.Receive&lt;/u&gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;whats-async-preemption\&quot;&gt;Whatâs (async) preemption?&lt;/h3&gt;\n      &lt;a href=\&quot;#whats-async-preemption\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;In the prehistoric era of Go (&amp;lt;=1.13) the runtime was cooperatively scheduled. A goroutine would run until it decided it was ready to yield to the scheduler â usually due to explicit calls to &lt;code&gt;runtime.Gosched()&lt;/code&gt; or injected yield points at function calls/IO operations. Since&lt;a href=\&quot;https://go.dev/doc/go1.14#runtime\&quot;&gt; &lt;u&gt;Go 1.14&lt;/u&gt;&lt;/a&gt; the runtime instead does async preemption. The Go runtime has a thread &lt;code&gt;sysmon&lt;/code&gt; which tracks the runtime of goroutines and will preempt any that run for longer than 10ms (at time of writing). It does this by sending &lt;code&gt;SIGURG&lt;/code&gt; to the OS thread and in the signal handler will modify the program counter and stack to mimic a call to &lt;code&gt;asyncPreempt&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;At this point we had two broad theories:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;This is a Go Netlink bug â likely due to &lt;code&gt;unsafe.Pointer&lt;/code&gt; usage which invoked undefined behavior but is only actually broken on arm64&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;This is a Go runtime bug and we&amp;#39;re only triggering it in &lt;code&gt;NetlinkSocket.Receive&lt;/code&gt; for some reason&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After finding the same bug publicly reported upstream, we were feeling confident this was caused by a Go runtime bug. However, upon seeing that both issues implicated the same function, we felt more skeptical â notably the Go Netlink library uses unsafe.Pointer so memory corruption was a plausible explanation even if we didn&amp;#39;t understand why.&lt;/p&gt;&lt;p&gt;After an unsuccessful code audit we had hit a wall. The crashes were rare and remote from the root cause. Maybe these crashes were caused by a runtime bug, maybe they were caused by a Go Netlink bug. It seemed clear that there was something wrong with this area of the code, but code auditing wasnât going anywhere. &lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;breakthrough\&quot;&gt;Breakthrough&lt;/h2&gt;\n      &lt;a href=\&quot;#breakthrough\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;At this point we had a fairly good understanding of what was crashing but very little understanding of &lt;b&gt;why&lt;/b&gt; it was happening. It was clear that the root cause of the stack unwinder crashing was remote from the actual crash, and that it had to do with &lt;code&gt;(*NetlinkSocket).Receive&lt;/code&gt;, but why? We were able to capture a &lt;b&gt;coredump&lt;/b&gt; of a production crash and view it in a debugger. The backtrace confirmed what we already knew â that there was a segmentation fault when unwinding a stack. The crux of the issue revealed itself when we looked at the goroutine which had been preempted while calling &lt;code&gt;(*NetlinkSocket).Receive&lt;/code&gt;.Â     &lt;/p&gt;\n            &lt;pre class=\&quot;language-text\&quot;&gt;&lt;code class=\&quot;language-text\&quot;&gt;(dlv) bt\n0  0x0000555577579dec in runtime.asyncPreempt2\n   at /usr/local/go/src/runtime/preempt.go:306\n1  0x00005555775bc94c in runtime.asyncPreempt\n   at /usr/local/go/src/runtime/preempt_arm64.s:47\n2  0x0000555577cb2880 in github.com/vishvananda/netlink/nl.(*NetlinkSocket).Receive\n   at\n/vendor/github.com/vishvananda/netlink/nl/nl_linux.go:779\n3  0x0000555577cb19a8 in github.com/vishvananda/netlink/nl.(*NetlinkRequest).Execute\n   at \n/vendor/github.com/vishvananda/netlink/nl/nl_linux.go:532\n4  0x0000555577551124 in runtime.heapSetType\n   at /usr/local/go/src/runtime/mbitmap.go:714\n5  0x0000555577551124 in runtime.heapSetType\n   at /usr/local/go/src/runtime/mbitmap.go:714\n...\n(dlv) disass -a 0x555577cb2878 0x555577cb2888\nTEXT github.com/vishvananda/netlink/nl.(*NetlinkSocket).Receive(SB) /vendor/github.com/vishvananda/netlink/nl/nl_linux.go\n        nl_linux.go:779 0x555577cb2878  fdfb7fa9        LDP -8(RSP), (R29, R30)\n        nl_linux.go:779 0x555577cb287c  ff430191        ADD $80, RSP, RSP\n        nl_linux.go:779 0x555577cb2880  ff434091        ADD $(16&amp;lt;&amp;lt;12), RSP, RSP\n        nl_linux.go:779 0x555577cb2884  c0035fd6        RET\n&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;&lt;/p&gt;&lt;p&gt;The goroutine was paused between two opcodes in the function epilogue. Since the process of unwinding a stack relies on the stack frame being in a consistent state, it felt immediately suspicious that we preempted in the middle of adjusting the stack pointer. The goroutine had been paused at 0x555577cb2880, between&lt;code&gt; ADD $80, RSP, RSP and ADD $(16&amp;lt;&amp;lt;12), RSP, RSP&lt;/code&gt;.Â &lt;/p&gt;&lt;p&gt;We queried the service logs to confirm our theory. This wasnât isolated â the majority of stack traces showed that this same opcode was preempted. This was no longer a weird production crash we couldnât reproduce. A crash happened when the Go runtime preempted between these two stack pointer adjustments. We had our smoking gun.Â &lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;building-a-minimal-reproducer\&quot;&gt;Building a minimal reproducer&lt;/h2&gt;\n      &lt;a href=\&quot;#building-a-minimal-reproducer\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;At this point we felt pretty confident that this was actually just a runtime bug and it should be reproducible in an isolated environment without any dependencies. The theory at this point was:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Stack unwinding is triggered by garbage collection&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Async preemption between a split stack pointer adjustment causes a crash&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;What if we make a function which splits the adjustment and then call it in a loop?&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;\n            &lt;pre class=\&quot;language-Go\&quot;&gt;&lt;code class=\&quot;language-Go\&quot;&gt;package main\n\nimport (\n\t&amp;quot;runtime&amp;quot;\n)\n\n//go:noinline\nfunc big_stack(val int) int {\n\tvar big_buffer = make([]byte, 1 &amp;lt;&amp;lt; 16)\n\n\tsum := 0\n\t// prevent the compiler from optimizing out the stack\n\tfor i := 0; i &amp;lt; (1&amp;lt;&amp;lt;16); i++ {\n\t\tbig_buffer[i] = byte(val)\n\t}\n\tfor i := 0; i &amp;lt; (1&amp;lt;&amp;lt;16); i++ {\n\t\tsum ^= int(big_buffer[i])\n\t}\n\treturn sum\n}\n\nfunc main() {\n\tgo func() {\n\t\tfor {\n\t\t\truntime.GC()\n\t\t}\n\t}()\n\tfor {\n\t\t_ = big_stack(1000)\n\t}\n}\n&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;&lt;/p&gt;&lt;p&gt;This function ends up with a stack frame slightly larger than can be represented in 16 bits, and so on arm64 the Go compiler will split the stack pointer adjustment into two opcodes. If the runtime preempts between these opcodes then the stack unwinder will read an invalid stack pointer and crash.Â &lt;/p&gt;\n            &lt;pre class=\&quot;language-text\&quot;&gt;&lt;code class=\&quot;language-text\&quot;&gt;; epilogue for main.big_stack\nADD $8, RSP, R29\nADD $(16&amp;lt;&amp;lt;12), R29, R29\nADD $16, RSP, RSP\n; preemption is problematic between these opcodes\nADD $(16&amp;lt;&amp;lt;12), RSP, RSP\nRET\n&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;&lt;/p&gt;&lt;p&gt;After running this for a few minutes the program panicked as expected!&lt;/p&gt;\n            &lt;pre class=\&quot;language-text\&quot;&gt;&lt;code class=\&quot;language-text\&quot;&gt;SIGSEGV: segmentation violation\nPC=0x60598 m=8 sigcode=1 addr=0x118\n\ngoroutine 0 gp=0x400019c540 m=8 mp=0x4000198708 [idle]:\nruntime.(*unwinder).next(0x400030fd10)\n        /home/thea/sdk/go1.23.4/src/runtime/traceback.go:458 +0x188 fp=0x400030fcc0 sp=0x400030fc30 pc=0x60598\nruntime.scanstack(0x40000021c0, 0x400002f750)\n        /home/thea/sdk/go1.23.4/src/runtime/mgcmark.go:887 +0x290 \n\n[...]\n\ngoroutine 1 gp=0x40000021c0 m=nil [runnable (scan)]:\nruntime.asyncPreempt2()\n        /home/thea/sdk/go1.23.4/src/runtime/preempt.go:308 +0x3c fp=0x40003bfcf0 sp=0x40003bfcd0 pc=0x400cc\nruntime.asyncPreempt()\n        /home/thea/sdk/go1.23.4/src/runtime/preempt_arm64.s:47 +0x9c fp=0x40003bfee0 sp=0x40003bfcf0 pc=0x75aec\nmain.big_stack(0x40003cff38?)\n        /home/thea/dev/stack_corruption_reproducer/main.go:29 +0x94 fp=0x40003cff00 sp=0x40003bfef0 pc=0x77c04\nSegmentation fault (core dumped)\n\nreal    1m29.165s\nuser    4m4.987s\nsys     0m43.212s&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;&lt;/p&gt;&lt;p&gt;A reproducible crash with standard library only? This felt like conclusive evidence that our problem was a runtime bug.&lt;/p&gt;&lt;p&gt;This was an extremely particular reproducer! Even now with a good understanding of the bug and its fix, some of the behavior is still puzzling. It&amp;#39;s a one-instruction race condition, so itâs unsurprising that small changes could have large impact. For example, this reproducer was originally written and tested on Go 1.23.4, but did not crash when compiled with 1.23.9 (the version in production), even though we could objdump the binary and see the split ADD still present! We donât have a definite explanation for this behavior â even with the bug present there remain a few unknown variables which affect the likelihood of hitting the race condition.Â &lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;a-single-instruction-race-condition-window\&quot;&gt;A single-instruction race condition window&lt;/h2&gt;\n      &lt;a href=\&quot;#a-single-instruction-race-condition-window\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;arm64 is a fixed-length 4-byte instruction set architecture. This has a lot of implications on codegen but most relevant to this bug is the fact that immediate length is limited.&lt;a href=\&quot;https://developer.arm.com/documentation/ddi0596/2020-12/Base-Instructions/ADD--immediate---Add--immediate--\&quot;&gt; &lt;code&gt;&lt;u&gt;add&lt;/u&gt;&lt;/code&gt;&lt;/a&gt; gets a 12-bit immediate,&lt;a href=\&quot;https://developer.arm.com/documentation/dui0802/a/A64-General-Instructions/MOV--wide-immediate-\&quot;&gt; &lt;code&gt;&lt;u&gt;mov&lt;/u&gt;&lt;/code&gt;&lt;/a&gt; gets a 16-bit immediate, etc. How does the architecture handle this when the operands don&amp;#39;t fit? It depends â &lt;code&gt;ADD&lt;/code&gt; in particular reserves a bit for &amp;quot;shift left by 12&amp;quot; so any 24 bit addition can be decomposed into two opcodes. Other instructions are decomposed similarly, or just require loading an immediate into a register first.Â &lt;/p&gt;&lt;p&gt;The very last step of the Go compiler before emitting machine code involves transforming the program into &lt;code&gt;obj.Prog&lt;/code&gt; structs. It&amp;#39;s a very low level intermediate representation (IR) that mostly serves to be translated into machine code.Â &lt;/p&gt;\n            &lt;pre class=\&quot;language-Go\&quot;&gt;&lt;code class=\&quot;language-Go\&quot;&gt;//https://github.com/golang/go/blob/fa2bb342d7b0024440d996c2d6d6778b7a5e0247/src/cmd/internal/obj/arm64/obj7.go#L856\n\n// Pop stack frame.\n// ADD $framesize, RSP, RSP\np = obj.Appendp(p, c.newprog)\np.As = AADD\np.From.Type = obj.TYPE_CONST\np.From.Offset = int64(c.autosize)\np.To.Type = obj.TYPE_REG\np.To.Reg = REGSP\np.Spadj = -c.autosize\n&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;&lt;/p&gt;&lt;p&gt;Notably, this IR is not aware of immediate length limitations. Instead, this happens in&lt;a href=\&quot;https://github.com/golang/go/blob/2f653a5a9e9112ff64f1392ff6e1d404aaf23e8c/src/cmd/internal/obj/arm64/asm7.go\&quot;&gt; &lt;u&gt;asm7.go&lt;/u&gt;&lt;/a&gt; when Go&amp;#39;s internal intermediate representation is translated into arm64 machine code. The assembler will classify an immediate in &lt;a href=\&quot;https://github.com/golang/go/blob/2f653a5a9e9112ff64f1392ff6e1d404aaf23e8c/src/cmd/internal/obj/arm64/asm7.go#L1905\&quot;&gt;&lt;u&gt;conclass&lt;/u&gt;&lt;/a&gt; based on bit size and then use that when emitting instructions â extra if needed.&lt;/p&gt;&lt;p&gt;The Go assembler uses a combination of (&lt;code&gt;mov, add&lt;/code&gt;) opcodes for some adds that fit in 16-bit immediates, and prefers (&lt;code&gt;add, add + lsl 12&lt;/code&gt;) opcodes for 16-bit+ immediates.Â   &lt;/p&gt;&lt;p&gt;Compare a stack of (slightly larger than) &lt;code&gt;1&amp;lt;&amp;lt;15&lt;/code&gt;:&lt;/p&gt;\n            &lt;pre class=\&quot;language-text\&quot;&gt;&lt;code class=\&quot;language-text\&quot;&gt;; //go:noinline\n; func big_stack() byte {\n; \tvar big_stack = make([]byte, 1&amp;lt;&amp;lt;15)\n; \treturn big_stack[0]\n; }\nMOVD $32776, R27\nADD R27, RSP, R29\nMOVD $32784, R27\nADD R27, RSP, RSP\nRET\n&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;&lt;/p&gt;&lt;p&gt;With a stack of &lt;code&gt;1&amp;lt;&amp;lt;16&lt;/code&gt;:&lt;/p&gt;\n            &lt;pre class=\&quot;language-text\&quot;&gt;&lt;code class=\&quot;language-text\&quot;&gt;; //go:noinline\n; func big_stack() byte {\n; \tvar big_stack = make([]byte, 1&amp;lt;&amp;lt;16)\n; \treturn big_stack[0]\n; } \nADD $8, RSP, R29\nADD $(16&amp;lt;&amp;lt;12), R29, R29\nADD $16, RSP, RSP\nADD $(16&amp;lt;&amp;lt;12), RSP, RSP\nRET\n&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;In the larger stack case, there is a point between &lt;code&gt;ADD x, RSP, RSP&lt;/code&gt; opcodes where the stack pointer is not pointing to the tip of a stack frame. We thought at first that this was a matter of memory corruption â that in handling async preemption the runtime would push a function call on the stack and corrupt the middle of the stack. However, this goroutine is already in the function epilogue â any data we corrupt is actively in the process of being thrown away. What&amp;#39;s the issue then?  &lt;/p&gt;&lt;p&gt;The Go runtime often needs to &lt;b&gt;unwind&lt;/b&gt; the stack, which means walking backwards through the chain of function calls. For example: garbage collection uses it to find live references on the stack, panicking relies on it to evaluate &lt;code&gt;defer&lt;/code&gt; functions, and generating stack traces needs to print the call stack. For this to work the stack pointer &lt;b&gt;must be accurate during unwinding&lt;/b&gt; because of how golang dereferences sp to determine the calling function. If the stack pointer is partially modified, the unwinder will look for the calling function in the middle of the stack. The underlying data is meaningless when interpreted as directions to a parent stack frame and then the runtime will likely crash.Â &lt;/p&gt;\n            &lt;pre class=\&quot;language-Go\&quot;&gt;&lt;code class=\&quot;language-Go\&quot;&gt;//https://github.com/golang/go/blob/66536242fce34787230c42078a7bbd373ef8dcb0/src/runtime/traceback.go#L373\n\nif innermost &amp;amp;&amp;amp; frame.sp &amp;lt; frame.fp || frame.lr == 0 {\n    lrPtr = frame.sp\n    frame.lr = *(*uintptr)(unsafe.Pointer(lrPtr))\n}\n&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;&lt;/p&gt;&lt;p&gt;When async preemption happens it will push a function call onto the stack but the parent stack frame is no longer correct because sp was only partially adjusted when the preemption happened. The crash flow looks something like this:  &lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Async preemption happens between the two opcodes that &lt;code&gt;add x, rsp&lt;/code&gt; expands to&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Garbage collection triggers stack unwinding (to check for heap object liveness)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The unwinder starts traversing the stack of the problematic goroutine and correctly unwinds up to the problematic function&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The unwinder dereferences &lt;code&gt;sp&lt;/code&gt; to determine the parent function&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Almost certainly the data behind &lt;code&gt;sp&lt;/code&gt; is not a function&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Crash&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5LKOBC6lQzuKvwy0vyEfk2/054c9aaedc14d155294a682f7de3a610/BLOG-2906_3.png\&quot; alt=\&quot;BLOG-2906 3\&quot; class=\&quot;kg-image\&quot; width=\&quot;784\&quot; height=\&quot;491\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;We saw earlier a faulting stack trace which ended in &lt;code&gt;(*NetlinkSocket).Receive&lt;/code&gt; â in this case stack unwinding faulted while it was trying to determine the parent frame.Â    &lt;/p&gt;\n            &lt;pre class=\&quot;language-text\&quot;&gt;&lt;code class=\&quot;language-text\&quot;&gt;goroutine 90 gp=0x40042cc000 m=nil [preempted (scan)]:\nruntime.asyncPreempt2()\n/usr/local/go/src/runtime/preempt.go:306 +0x2c fp=0x40060a25d0 sp=0x40060a25b0 pc=0x55557e299dec\nruntime.asyncPreempt()\n/usr/local/go/src/runtime/preempt_arm64.s:47 +0x9c fp=0x40060a27c0 sp=0x40060a25d0 pc=0x55557e2dc94c\ngithub.com/vishvananda/netlink/nl.(*NetlinkSocket).Receive(0xff48ce6e060b2848?)\n/vendor/github.com/vishvananda/netlink/nl/nl_linux.go:779 +0x130 fp=0x40060b2820 sp=0x40060a27d0 pc=0x55557e9d2880\n&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;&lt;/p&gt;&lt;p&gt;Once we discovered the root cause we reported it with a reproducer and the bug was quickly fixed. This bug is fixed in &lt;a href=\&quot;https://github.com/golang/go/commit/e8794e650e05fad07a33fb6e3266a9e677d13fa8\&quot;&gt;&lt;u&gt;go1.23.12&lt;/u&gt;&lt;/a&gt;, &lt;a href=\&quot;https://github.com/golang/go/commit/6e1c4529e4e00ab58572deceab74cc4057e6f0b6\&quot;&gt;&lt;u&gt;go1.24.6&lt;/u&gt;&lt;/a&gt;, and &lt;a href=\&quot;https://github.com/golang/go/commit/f7cc61e7d7f77521e073137c6045ba73f66ef902\&quot;&gt;&lt;u&gt;go1.25.0&lt;/u&gt;&lt;/a&gt;. Previously, the go compiler emitted a single &lt;code&gt;add x, rsp&lt;/code&gt; instruction and relied on the assembler to split immediates into multiple opcodes as necessary. After this change, stacks larger than 1&amp;lt;&amp;lt;12 will build the offset in a temporary register and then add that to &lt;code&gt;rsp&lt;/code&gt; in a single, indivisible opcode. A goroutine can be preempted before or after the stack pointer modification, but never during. This means that the stack pointer is always valid and there is no race condition.&lt;/p&gt;\n            &lt;pre class=\&quot;language-text\&quot;&gt;&lt;code class=\&quot;language-text\&quot;&gt;LDP -8(RSP), (R29, R30)\nMOVD $32, R27\nMOVK $(1&amp;lt;&amp;lt;16), R27\nADD R27, RSP, RSP\nRET&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;&lt;/p&gt;&lt;p&gt;This was a very fun problem to debug. We donât often see bugs where you can accurately blame the compiler. Debugging it took weeks and we had to learn about areas of the Go runtime that people donât usually need to think about. Itâs a nice example of a rare race condition, the sort of bug that can only really be quantified at a large scale.&lt;/p&gt;&lt;p&gt;Weâre always looking for people who enjoy this kind of detective work. &lt;a href=\&quot;https://www.cloudflare.com/careers/jobs/?department=Engineering\&quot;&gt;&lt;u&gt;Our engineering teams are hiring&lt;/u&gt;&lt;/a&gt;.   &lt;/p&gt;&quot;],&quot;published_at&quot;:[0,&quot;2025-10-08T14:00+00:00&quot;],&quot;updated_at&quot;:[0,&quot;2025-10-16T07:32:50.845Z&quot;],&quot;feature_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1zaMttyutjMsqHUuEpCss3/8b7eb27d92e5fc53f6541d04fe0b778f/Bug_Bounty.png&quot;],&quot;tags&quot;:[1,[[0,{&quot;id&quot;:[0,&quot;2UVIYusJwlvsmPYl2AvSuR&quot;],&quot;name&quot;:[0,&quot;Deep Dive&quot;],&quot;slug&quot;:[0,&quot;deep-dive&quot;]}],[0,{&quot;id&quot;:[0,&quot;KDI5hQcs301H8vxpGKXO0&quot;],&quot;name&quot;:[0,&quot;Go&quot;],&quot;slug&quot;:[0,&quot;go&quot;]}],[0,{&quot;id&quot;:[0,&quot;6lhzEBz2B56RKa4nUEAGYJ&quot;],&quot;name&quot;:[0,&quot;Programming&quot;],&quot;slug&quot;:[0,&quot;programming&quot;]}]]],&quot;relatedTags&quot;:[0],&quot;authors&quot;:[1,[[0,{&quot;name&quot;:[0,&quot;Thea Heinen&quot;],&quot;slug&quot;:[0,&quot;thea-heinen&quot;],&quot;bio&quot;:[0],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1EE96CpoAMWY7aI0eTF6Ze/7f1ce70b27bd49ebf197bae9d22253d9/PXL_20240216_211439533.jpg&quot;],&quot;location&quot;:[0],&quot;website&quot;:[0],&quot;twitter&quot;:[0],&quot;facebook&quot;:[0],&quot;publiclyIndex&quot;:[0,true]}]]],&quot;meta_description&quot;:[0,&quot;84 million requests a second means even rare bugs appear often. We&#39;ll reveal how we discovered a race condition in the Go arm64 compiler and got it fixed.&quot;],&quot;primary_author&quot;:[0,{}],&quot;localeList&quot;:[0,{&quot;name&quot;:[0,&quot;LOC: How we found a bug in Go&#39;s arm64 compiler&quot;],&quot;enUS&quot;:[0,&quot;English for Locale&quot;],&quot;zhCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhHansCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhTW&quot;:[0,&quot;No Page for Locale&quot;],&quot;frFR&quot;:[0,&quot;No Page for Locale&quot;],&quot;deDE&quot;:[0,&quot;No Page for Locale&quot;],&quot;itIT&quot;:[0,&quot;No Page for Locale&quot;],&quot;jaJP&quot;:[0,&quot;Translated for Locale&quot;],&quot;koKR&quot;:[0,&quot;No Page for Locale&quot;],&quot;ptBR&quot;:[0,&quot;No Page for Locale&quot;],&quot;esLA&quot;:[0,&quot;No Page for Locale&quot;],&quot;esES&quot;:[0,&quot;No Page for Locale&quot;],&quot;enAU&quot;:[0,&quot;No Page for Locale&quot;],&quot;enCA&quot;:[0,&quot;No Page for Locale&quot;],&quot;enIN&quot;:[0,&quot;No Page for Locale&quot;],&quot;enGB&quot;:[0,&quot;No Page for Locale&quot;],&quot;idID&quot;:[0,&quot;No Page for Locale&quot;],&quot;ruRU&quot;:[0,&quot;No Page for Locale&quot;],&quot;svSE&quot;:[0,&quot;No Page for Locale&quot;],&quot;viVN&quot;:[0,&quot;No Page for Locale&quot;],&quot;plPL&quot;:[0,&quot;No Page for Locale&quot;],&quot;arAR&quot;:[0,&quot;No Page for Locale&quot;],&quot;nlNL&quot;:[0,&quot;No Page for Locale&quot;],&quot;thTH&quot;:[0,&quot;No Page for Locale&quot;],&quot;trTR&quot;:[0,&quot;No Page for Locale&quot;],&quot;heIL&quot;:[0,&quot;No Page for Locale&quot;],&quot;lvLV&quot;:[0,&quot;No Page for Locale&quot;],&quot;etEE&quot;:[0,&quot;No Page for Locale&quot;],&quot;ltLT&quot;:[0,&quot;No Page for Locale&quot;]}],&quot;url&quot;:[0,&quot;https://blog.cloudflare.com/how-we-found-a-bug-in-gos-arm64-compiler&quot;],&quot;metadata&quot;:[0,{&quot;title&quot;:[0,&quot;How we found a bug in Go&#39;s arm64 compiler&quot;],&quot;description&quot;:[0,&quot;84 million requests a second means even rare bugs appear often. We&#39;ll reveal how we discovered a race condition in the Go arm64 compiler and got it fixed.&quot;],&quot;imgPreview&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/45p8HVRfk35dfKi2bmrTXs/545379fb250a4c31bf69677951efe584/BLOG-2906_OG.png&quot;]}],&quot;publicly_index&quot;:[0,true]}],[0,{&quot;id&quot;:[0,&quot;4k1NhJtljIsH7GOkpHg1Ei&quot;],&quot;title&quot;:[0,&quot;15 years of helping build a better Internet: a look back at Birthday Week 2025&quot;],&quot;slug&quot;:[0,&quot;birthday-week-2025-wrap-up&quot;],&quot;excerpt&quot;:[0,&quot;Rust-powered core systems, post-quantum upgrades, developer access for students, PlanetScale integration, open-source partnerships, and our biggest internship program ever â 1,111 interns in 2026.&quot;],&quot;featured&quot;:[0,false],&quot;html&quot;:[0,&quot;&lt;p&gt;Cloudflare launched fifteen years ago with a mission to help build a better Internet. Over that time the Internet has changed and so has what it needs from teams like ours.Â  In this yearâs &lt;a href=\&quot;https://blog.cloudflare.com/cloudflare-2025-annual-founders-letter/\&quot;&gt;&lt;u&gt;Founderâs Letter&lt;/u&gt;&lt;/a&gt;, Matthew and Michelle discussed the role we have played in the evolution of the Internet, from helping encryption grow from 10% to 95% of Internet traffic to more recent challenges like how people consume content.Â &lt;/p&gt;&lt;p&gt;We spend Birthday Week every year releasing the products and capabilities we believe the Internet needs at this moment and around the corner. Previous &lt;a href=\&quot;https://blog.cloudflare.com/tag/birthday-week/\&quot;&gt;&lt;u&gt;Birthday Weeks&lt;/u&gt;&lt;/a&gt; saw the launch of &lt;a href=\&quot;https://blog.cloudflare.com/introducing-cloudflares-automatic-ipv6-gatewa/\&quot;&gt;&lt;u&gt;IPv6 gateway&lt;/u&gt;&lt;/a&gt; in 2011,Â  &lt;a href=\&quot;https://blog.cloudflare.com/introducing-universal-ssl/\&quot;&gt;&lt;u&gt;Universal SSL&lt;/u&gt;&lt;/a&gt; in 2014, &lt;a href=\&quot;https://blog.cloudflare.com/introducing-cloudflare-workers/\&quot;&gt;&lt;u&gt;Cloudflare Workers&lt;/u&gt;&lt;/a&gt; and &lt;a href=\&quot;https://blog.cloudflare.com/unmetered-mitigation/\&quot;&gt;&lt;u&gt;unmetered DDoS protection&lt;/u&gt;&lt;/a&gt; in 2017, &lt;a href=\&quot;https://blog.cloudflare.com/introducing-cloudflare-radar/\&quot;&gt;&lt;u&gt;Cloudflare Radar&lt;/u&gt;&lt;/a&gt; in 2020, &lt;a href=\&quot;https://blog.cloudflare.com/introducing-r2-object-storage/\&quot;&gt;&lt;u&gt;R2 Object Storage&lt;/u&gt;&lt;/a&gt; with zero egress fees in 2021,Â  &lt;a href=\&quot;https://blog.cloudflare.com/post-quantum-tunnel/\&quot;&gt;&lt;u&gt;post-quantum upgrades for Cloudflare Tunnel&lt;/u&gt;&lt;/a&gt; in 2022, &lt;a href=\&quot;https://blog.cloudflare.com/best-place-region-earth-inference/\&quot;&gt;&lt;u&gt;Workers AI&lt;/u&gt;&lt;/a&gt; and &lt;a href=\&quot;https://blog.cloudflare.com/announcing-encrypted-client-hello/\&quot;&gt;&lt;u&gt;Encrypted Client Hello&lt;/u&gt;&lt;/a&gt; in 2023. And those are just a sample of the launches.&lt;/p&gt;&lt;p&gt;This yearâs themes focused on helping prepare the Internet for a new model of monetization that encourages great content to be published, fostering more opportunities to build community both inside and outside of Cloudflare, and evergreen missions like making more features available to everyone and constantly improving the speed and security of what we offer.&lt;/p&gt;&lt;p&gt;We shipped a lot of new things this year. In case you missed the dozens of blog posts, here is a breakdown of everything we announced during Birthday Week 2025.Â &lt;/p&gt;&lt;p&gt;&lt;b&gt;Monday, September 22&lt;/b&gt;&lt;/p&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-1wig{font-weight:bold;text-align:left;vertical-align:top}\n.tg .tg-8fnt{color:#15C;font-weight:bold;text-align:left;text-decoration:underline;vertical-align:top}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n@media screen and (max-width: 767px) {.tg {width: auto !important;}.tg col {width: auto !important;}.tg-wrap {overflow-x: auto;-webkit-overflow-scrolling: touch;}}&lt;/style&gt;\n&lt;div class=\&quot;tg-wrap\&quot;&gt;&lt;table class=\&quot;tg\&quot;&gt;&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th class=\&quot;tg-1wig\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;What&lt;/span&gt;&lt;/th&gt;\n    &lt;th class=\&quot;tg-1wig\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;In a sentence â¦&lt;/span&gt;&lt;/th&gt;\n  &lt;/tr&gt;&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/cloudflare-1111-intern-program/?_gl=1*rxpw9t*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MTgwNzEkajI4JGwwJGgw\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Help build the future: announcing Cloudflareâs goal to hire 1,111 interns in 2026&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;To invest in the next generation of builders, we announced our most ambitious intern program yet with a goal to hire 1,111 interns in 2026.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/supporting-the-future-of-the-open-web/?_gl=1*1l701kl*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MTg0MDMkajYwJGwwJGgw\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Supporting the future of the open web: Cloudflare is sponsoring Ladybird and Omarchy&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;To support a diverse and open Internet, we are now sponsoring Ladybird (an independent browser) and Omarchy (an open-source Linux distribution and developer environment).&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/new-hubs-for-startups/?_gl=1*s35rml*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MTg2NjEkajYwJGwwJGgw/\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Come build with us: Cloudflareâs new hubs for startups&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;We are opening our office doors in four major cities (San Francisco, Austin, London, and Lisbon) as free hubs for startups to collaborate and connect with the builder community.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/ai-crawl-control-for-project-galileo/?_gl=1*n9jmji*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MTg2ODUkajM2JGwwJGgw\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Free access to Cloudflare developer services for non-profit and civil society organizations&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;We extended our Cloudflare for Startups program to non-profits and public-interest organizations, offering free credits for our developer tools.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/workers-for-students/?_gl=1*lq39wt*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MTg3NDgkajYwJGwwJGgw\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Introducing free access to Cloudflare developer features for students&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;We are removing cost as a barrier for the next generation by giving students with .edu emails 12 months of free access to our paid developer platform features.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/capnweb-javascript-rpc-library/?_gl=1*19mcm4k*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjA2MTgkajYwJGwwJGgw\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Capân Web: a new RPC system for browsers and web servers&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;We open-sourced Cap&#39;n Web, a new JavaScript-native RPC protocol that simplifies powerful, schema-free communication for web applications.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/workers-launchpad-006/?_gl=1*8z9nf6*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjA3MTckajUwJGwwJGgw\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;A lookback at Workers Launchpad and a warm welcome to Cohort #6&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;We announced Cohort #6 of the Workers Launchpad, our accelerator program for startups building on Cloudflare.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;Tuesday, September 23&lt;/b&gt;&lt;/p&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-1wig{font-weight:bold;text-align:left;vertical-align:top}\n.tg .tg-8fnt{color:#15C;font-weight:bold;text-align:left;text-decoration:underline;vertical-align:top}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n@media screen and (max-width: 767px) {.tg {width: auto !important;}.tg col {width: auto !important;}.tg-wrap {overflow-x: auto;-webkit-overflow-scrolling: touch;}}&lt;/style&gt;\n&lt;div class=\&quot;tg-wrap\&quot;&gt;&lt;table class=\&quot;tg\&quot;&gt;&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th class=\&quot;tg-1wig\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;What&lt;/span&gt;&lt;/th&gt;\n    &lt;th class=\&quot;tg-1wig\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;In a sentence â¦&lt;/span&gt;&lt;/th&gt;\n  &lt;/tr&gt;&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/per-customer-bot-defenses/?_gl=1*1i1oipn*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjA3NjAkajckbDAkaDA./\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Building unique, per-customer defenses against advanced bot threats in the AI era&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;New anomaly detection system that uses machine learning trained on each zone to build defenses against AI-driven bot attacks. &lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/cloudflare-astro-tanstack/?_gl=1*v1uhzx*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjE2MzckajYwJGwwJGgw\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Why Cloudflare, Netlify, and Webflow are collaborating to support Open Source tools&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;To support the open web, we joined forces with Webflow to sponsor Astro, and with Netlify to sponsor TanStack.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/x402/?_gl=1*kizcyy*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjA5OTUkajYkbDAkaDA./\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Launching the x402 Foundation with Coinbase, and support for x402 transactions&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;We are partnering with Coinbase to create the x402 Foundation, encouraging the adoption of the &lt;/span&gt;&lt;a href=\&quot;https://github.com/coinbase/x402?cf_target_id=4D4A124640BFF471F5B56706F9A86B34\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;x402 protocol&lt;/span&gt;&lt;/a&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt; to allow clients and services to exchange value on the web using a common language&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/ai-crawl-control-for-project-galileo/?_gl=1*1r1zsjt*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjE3NjYkajYwJGwwJGgw\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Helping protect journalists and local news from AI crawlers with Project Galileo&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;We are extending our free Bot Management and AI Crawl Control services to journalists and news organizations through Project Galileo.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/confidence-score-rubric/\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Cloudflare Confidence Scorecards - making AI safer for the Internet&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;Automated evaluation of AI and SaaS tools, helping organizations to embrace AI without compromising security.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;Wednesday, September 24&lt;/b&gt;&lt;/p&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-1wig{font-weight:bold;text-align:left;vertical-align:top}\n.tg .tg-8fnt{color:#15C;font-weight:bold;text-align:left;text-decoration:underline;vertical-align:top}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n@media screen and (max-width: 767px) {.tg {width: auto !important;}.tg col {width: auto !important;}.tg-wrap {overflow-x: auto;-webkit-overflow-scrolling: touch;}}&lt;/style&gt;\n&lt;div class=\&quot;tg-wrap\&quot;&gt;&lt;table class=\&quot;tg\&quot;&gt;&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th class=\&quot;tg-1wig\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;What&lt;/span&gt;&lt;/th&gt;\n    &lt;th class=\&quot;tg-1wig\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;In a sentence â¦&lt;/span&gt;&lt;/th&gt;\n  &lt;/tr&gt;&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/automatically-secure/?_gl=1*8mjfiy*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjE4MTckajkkbDAkaDA.\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Automatically Secure: how we upgraded 6,000,000 domains by default&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;Our Automatic SSL/TLS system has upgraded over 6 million domains to more secure encryption modes by default and will soon automatically enable post-quantum connections.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/content-signals-policy/?_gl=1*lfy031*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjE5NTkkajYwJGwwJGgw/\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Giving users choice with Cloudflareâs new Content Signals Policy&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;The Content Signals Policy is a new standard for robots.txt that lets creators express clear preferences for how AI can use their content.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/building-a-better-internet-with-responsible-ai-bot-principles/?_gl=1*hjo4nx*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjIwMTIkajckbDAkaDA.\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;To build a better Internet in the age of AI, we need responsible AI bot principles&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;A proposed set of responsible AI bot principles to start a conversation around transparency and respect for content creators&#39; preferences.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/saas-to-saas-security/?_gl=1*tigi23*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjIwNjgkajYwJGwwJGgw\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Securing data in SaaS to SaaS applications&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;New security tools to give companies visibility and control over data flowing between SaaS applications.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/post-quantum-warp/?_gl=1*1vy23vv*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjIyMDIkajYwJGwwJGgw\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Securing today for the quantum future: WARP client now supports post-quantum cryptography (PQC)&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;Cloudflareâs WARP client now supports post-quantum cryptography, providing quantum-resistant encryption for traffic. &lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/a-simpler-path-to-a-safer-internet-an-update-to-our-csam-scanning-tool/?_gl=1*1avvoeq*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjIxMTUkajEzJGwwJGgw\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;A simpler path to a safer Internet: an update to our CSAM scanning tool&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;We made our CSAM Scanning Tool easier to adopt by removing the need to create and provide unique credentials, helping more site owners protect their platforms.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;\n&lt;b&gt;Thursday, September 25&lt;/b&gt;&lt;/p&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-1wig{font-weight:bold;text-align:left;vertical-align:top}\n.tg .tg-8fnt{color:#15C;font-weight:bold;text-align:left;text-decoration:underline;vertical-align:top}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n@media screen and (max-width: 767px) {.tg {width: auto !important;}.tg col {width: auto !important;}.tg-wrap {overflow-x: auto;-webkit-overflow-scrolling: touch;}}&lt;/style&gt;\n&lt;div class=\&quot;tg-wrap\&quot;&gt;&lt;table class=\&quot;tg\&quot;&gt;&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th class=\&quot;tg-1wig\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;What&lt;/span&gt;&lt;/th&gt;\n    &lt;th class=\&quot;tg-1wig\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;In a sentence â¦&lt;/span&gt;&lt;/th&gt;\n  &lt;/tr&gt;&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/enterprise-grade-features-for-all/?_gl=1*ll2laa*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjIyODIkajYwJGwwJGgw/\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Every Cloudflare feature, available to everyone&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;We are making every Cloudflare feature, starting with Single Sign On (SSO), available for anyone to purchase on any plan. &lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/cloudflare-developer-platform-keeps-getting-better-faster-and-more-powerful/?_gl=1*1dwrmxx*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjI0MzgkajYwJGwwJGgw/\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Cloudflare&#39;s developer platform keeps getting better, faster, and more powerful&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;Updates across Workers and beyond for a more powerful developer platform â such as support for larger and more concurrent Container images, support for external models from OpenAI and Anthropic in AI Search (previously AutoRAG), and more. &lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/planetscale-postgres-workers/?_gl=1*1e87q21*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjI2MDUkajYwJGwwJGgw\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Partnering to make full-stack fast: deploy PlanetScale databases directly from Workers&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;You can now connect Cloudflare Workers to PlanetScale databases directly, with connections automatically optimized by Hyperdrive.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/cloudflare-data-platform/?_gl=1*1gj7lyv*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjI5MDckajYwJGwwJGgw\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Announcing the Cloudflare Data Platform&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;A complete solution for ingesting, storing, and querying analytical data tables using open standards like Apache Iceberg. &lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/r2-sql-deep-dive/?_gl=1*88kngf*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjI5MzAkajM3JGwwJGgw\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;R2 SQL: a deep dive into our new distributed query engine&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;A technical deep dive on R2 SQL, a serverless query engine for petabyte-scale datasets in R2.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/safe-in-the-sandbox-security-hardening-for-cloudflare-workers/?_gl=1*y25my1*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjI4ODQkajMkbDAkaDA./\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Safe in the sandbox: security hardening for Cloudflare Workers&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;A deep-dive into how weâve hardened the Workers runtime with new defense-in-depth security measures, including V8 sandboxes and hardware-assisted memory protection keys.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/sovereign-ai-and-choice/?_gl=1*1gvqucw*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjI4NjkkajE4JGwwJGgw/\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Choice: the path to AI sovereignty&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;To champion AI sovereignty, we&#39;ve added locally-developed open-source models from India, Japan, and Southeast Asia to our Workers AI platform.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/email-service/?_gl=1*z3yus0*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjI4MjckajYwJGwwJGgw\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Announcing Cloudflare Email Serviceâs private beta&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;We announced the Cloudflare Email Service private beta, allowing developers to reliably send and receive transactional emails directly from Cloudflare Workers.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/nodejs-workers-2025/?_gl=1*gzumry*_gcl_aw*R0NMLjE3NTg5MTQ0ODEuQ2p3S0NBanc4OWpHQmhCMEVpd0EybzFPbnp1VkVIN2UybUZJcERvWWtJMV9Rc2FlbTFEV19FU19qVjR1QnVmcEE3QVdkeU9zaVRIZGl4b0N4dHNRQXZEX0J3RQ..*_gcl_dc*R0NMLjE3NTgyMDc1NDEuQ2owS0NRancyNjdHQmhDU0FSSXNBT2pWSjRIWTFOVTZVWDFyVEJVNGNyd243d3RwX3lheFBuNnZJdXJlOUVmWmRzWkJJa1ZyejF4cDFDSWFBa2pBRUFMd193Y0I.*_gcl_au*MTI5NDk3ODE3OC4xNzUzMTQwMzIw*_ga*ZTI0NWUyMDQtZDM1YS00NTFkLWIwM2UtYjhhNzliZWQxY2Nj*_ga_SQCRB0TXZW*czE3NTg5MTY5NDEkbzYkZzEkdDE3NTg5MjI2ODgkajYwJGwwJGgw/\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;A year of improving Node.js compatibility in Cloudflare Workers&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;There are hundreds of new Node.js APIs now available that make it easier to run existing Node.js code on our platform. &lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;Friday, September 26&lt;/b&gt;&lt;/p&gt;&lt;style type=\&quot;text/css\&quot;&gt;\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-1wig{font-weight:bold;text-align:left;vertical-align:top}\n.tg .tg-8fnt{color:#15C;font-weight:bold;text-align:left;text-decoration:underline;vertical-align:top}\n.tg .tg-0lax{text-align:left;vertical-align:top}\n&lt;/style&gt;\n&lt;table class=\&quot;tg\&quot;&gt;&lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th class=\&quot;tg-1wig\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;What&lt;/span&gt;&lt;/th&gt;\n    &lt;th class=\&quot;tg-1wig\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;In a sentence â¦&lt;/span&gt;&lt;/th&gt;\n  &lt;/tr&gt;&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/20-percent-internet-upgrade\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Cloudflare just got faster and more secure, powered by Rust&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;We have re-engineered our core proxy with a new modular, Rust-based architecture, cutting median response time by 10ms for millions. &lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com//introducing-observatory-and-smart-shield/\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Introducing Observatory and Smart Shield&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;New monitoring tools in the Cloudflare dashboard that provide actionable recommendations and one-click fixes for performance issues.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/monitoring-as-sets-and-why-they-matter/\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Monitoring AS-SETs and why they matter&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;Cloudflare Radar now includes Internet Routing Registry (IRR) data, allowing network operators to monitor AS-SETs to help prevent route leaks.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/an-ai-index-for-all-our-customers\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;An AI Index for all our customers&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;We announced the private beta of AI Index, a new service that creates an AI-optimized search index for your domain that you control and can monetize.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/new-regional-internet-traffic-and-certificate-transparency-insights-on-radar/\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Introducing new regional Internet traffic and Certificate Transparency insights on Cloudflare Radar&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;Sub-national traffic insights and Certificate Transparency dashboards for TLS monitoring.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/eliminating-cold-starts-2-shard-and-conquer/\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Eliminating Cold Starts 2: shard and conquer&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;We have reduced Workers cold starts by 10x by implementing a new \&quot;worker sharding\&quot; system that routes requests to already-loaded Workers.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-8fnt\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/network-performance-update-birthday-week-2025/\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Network performance update: Birthday Week 2025&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;The TCP Connection Time (Trimean) graph shows that we are the fastest TCP connection time in 40% of measured ISPs â and the fastest across the top networks.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/how-cloudflare-uses-the-worlds-greatest-collection-of-performance-data/\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;How Cloudflare uses performance data to make the worldâs fastest global network even faster&lt;/span&gt;&lt;/a&gt;&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;We are using our network&#39;s vast performance data to tune congestion control algorithms, improving speeds by an average of 10% for QUIC traffic.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;a href=\&quot;https://blog.cloudflare.com/code-mode/\&quot;&gt;&lt;span style=\&quot;font-weight:700;font-style:normal;text-decoration:underline;color:#15C;background-color:transparent\&quot;&gt;Code Mode: the better way to use MCP&lt;/td&gt;\n    &lt;td class=\&quot;tg-0lax\&quot;&gt;&lt;span style=\&quot;font-weight:400;font-style:normal;text-decoration:none;color:#000;background-color:transparent\&quot;&gt;It turns out we&#39;ve all been using MCP wrong. Most agents today use MCP by exposing the \&quot;tools\&quot; directly to the LLM. We tried something different: Convert the MCP tools into a TypeScript API, and then ask an LLM to write code that calls that API. The results are striking.&lt;/span&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;come-build-with-us\&quot;&gt;Come build with us!&lt;/h3&gt;\n      &lt;a href=\&quot;#come-build-with-us\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Helping build a better Internet has always been about more than just technology. Like the announcements about interns or working together in our offices, the community of people behind helping build a better Internet matters to its future. This week, we rolled out our most ambitious set of initiatives ever to support the builders, founders, and students who are creating the future.&lt;/p&gt;&lt;p&gt;For founders and startups, we are thrilled to welcome &lt;b&gt;Cohort #6&lt;/b&gt; to the &lt;b&gt;Workers Launchpad&lt;/b&gt;, our accelerator program that gives early-stage companies the resources they need to scale. But weâre not stopping there. Weâre opening our doors, literally, by launching &lt;b&gt;new physical hubs for startups&lt;/b&gt; in our San Francisco, Austin, London, and Lisbon offices. These spaces will provide access to mentorship, resources, and a community of fellow builders.&lt;/p&gt;&lt;p&gt;Weâre also investing in the next generation of talent. We announced &lt;b&gt;free access to the Cloudflare developer platform for all students&lt;/b&gt;, giving them the tools to learn and experiment without limits. To provide a path from the classroom to the industry, we also announced our goal to hire &lt;b&gt;1,111 interns in 2026&lt;/b&gt; âÂ our biggest commitment yet to fostering future tech leaders.&lt;/p&gt;&lt;p&gt;And because a better Internet is for everyone, weâre extending our support to &lt;b&gt;non-profits and public-interest organizations&lt;/b&gt;, offering them free access to our production-grade developer tools, so they can focus on their missions.&lt;/p&gt;&lt;p&gt;Whether you&amp;#39;re a founder with a big idea, a student just getting started, or a team working for a cause you believe in, we want to help you succeed.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;until-next-year\&quot;&gt;Until next year&lt;/h3&gt;\n      &lt;a href=\&quot;#until-next-year\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Thank you to our customers, our community, and the millions of developers who trust us to help them build, secure, and accelerate the Internet. Your curiosity and feedback drive our innovation.&lt;/p&gt;&lt;p&gt;Itâs been an incredible 15 years. And as always, weâre just getting started!&lt;/p&gt;&lt;p&gt;&lt;i&gt;(Watch the full conversation on our show &lt;/i&gt;&lt;a href=\&quot;ThisWeekinNET.com\&quot;&gt;&lt;i&gt;ThisWeekinNET.com&lt;/i&gt;&lt;/a&gt;&lt;i&gt; about what we launched during Birthday Week 2025 &lt;/i&gt;&lt;a href=\&quot;https://youtu.be/Z2uHFc9ua9s?feature=shared\&quot;&gt;&lt;i&gt;&lt;b&gt;&lt;u&gt;here&lt;/u&gt;&lt;/b&gt;&lt;/i&gt;&lt;/a&gt;&lt;i&gt;.) &lt;/i&gt;&lt;/p&gt;&quot;],&quot;published_at&quot;:[0,&quot;2025-09-29T14:00+00:00&quot;],&quot;updated_at&quot;:[0,&quot;2025-10-03T15:46:10.413Z&quot;],&quot;feature_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4o7ZlislB0NhFCy354yVhT/0a15a12961fbd507899843b2e6111b37/unnamed__37_.png&quot;],&quot;tags&quot;:[1,[[0,{&quot;id&quot;:[0,&quot;1Cv5JjXzKWKEA10JdYbXu1&quot;],&quot;name&quot;:[0,&quot;Birthday Week&quot;],&quot;slug&quot;:[0,&quot;birthday-week&quot;]}],[0,{&quot;id&quot;:[0,&quot;V86khSc459Yi1AhTlvtY7&quot;],&quot;name&quot;:[0,&quot;Partners&quot;],&quot;slug&quot;:[0,&quot;partners&quot;]}],[0,{&quot;id&quot;:[0,&quot;3JAY3z7p7An94s6ScuSQPf&quot;],&quot;name&quot;:[0,&quot;Developer Platform&quot;],&quot;slug&quot;:[0,&quot;developer-platform&quot;]}],[0,{&quot;id&quot;:[0,&quot;5Ol0Sw9kBTwIstJ84njaO7&quot;],&quot;name&quot;:[0,&quot;Workers Launchpad&quot;],&quot;slug&quot;:[0,&quot;workers-launchpad&quot;]}],[0,{&quot;id&quot;:[0,&quot;4gN0ARax0fHxjtZL07THOe&quot;],&quot;name&quot;:[0,&quot;Performance&quot;],&quot;slug&quot;:[0,&quot;performance&quot;]}],[0,{&quot;id&quot;:[0,&quot;6Mp7ouACN2rT3YjL1xaXJx&quot;],&quot;name&quot;:[0,&quot;Security&quot;],&quot;slug&quot;:[0,&quot;security&quot;]}],[0,{&quot;id&quot;:[0,&quot;5RrjSR5vIOJAfRdT8966hf&quot;],&quot;name&quot;:[0,&quot;Cache&quot;],&quot;slug&quot;:[0,&quot;cache&quot;]}],[0,{&quot;id&quot;:[0,&quot;1OAcGRrbAS8T2hKb2tqB7N&quot;],&quot;name&quot;:[0,&quot;Speed&quot;],&quot;slug&quot;:[0,&quot;speed&quot;]}],[0,{&quot;id&quot;:[0,&quot;4HIPcb68qM0e26fIxyfzwQ&quot;],&quot;name&quot;:[0,&quot;Developers&quot;],&quot;slug&quot;:[0,&quot;developers&quot;]}],[0,{&quot;id&quot;:[0,&quot;6Foe3R8of95cWVnQwe5Toi&quot;],&quot;name&quot;:[0,&quot;AI&quot;],&quot;slug&quot;:[0,&quot;ai&quot;]}],[0,{&quot;id&quot;:[0,&quot;2FQK880QI5lKEUCjVHBber&quot;],&quot;name&quot;:[0,&quot;1.1.1.1&quot;],&quot;slug&quot;:[0,&quot;1-1-1-1&quot;]}],[0,{&quot;id&quot;:[0,&quot;urEf9QllkDeGxTu3ysdlo&quot;],&quot;name&quot;:[0,&quot;Application Security&quot;],&quot;slug&quot;:[0,&quot;application-security&quot;]}],[0,{&quot;id&quot;:[0,&quot;36Dg2NwTgUHhrlE0FRpSdJ&quot;],&quot;name&quot;:[0,&quot;Application Services&quot;],&quot;slug&quot;:[0,&quot;application-services&quot;]}],[0,{&quot;id&quot;:[0,&quot;4l3WDYLk6bXCyaRc9pRzXa&quot;],&quot;name&quot;:[0,&quot;Bots&quot;],&quot;slug&quot;:[0,&quot;bots&quot;]}],[0,{&quot;id&quot;:[0,&quot;3aRZvV7ApVpkYKGhnNQH4w&quot;],&quot;name&quot;:[0,&quot;CDN&quot;],&quot;slug&quot;:[0,&quot;cdn&quot;]}],[0,{&quot;id&quot;:[0,&quot;5tk59ZFOQlw6hnNzbDnhZJ&quot;],&quot;name&quot;:[0,&quot;Cloudflare for Startups&quot;],&quot;slug&quot;:[0,&quot;cloudflare-for-startups&quot;]}],[0,{&quot;id&quot;:[0,&quot;4Z2oveL0P0AeqGa5lL4Vo1&quot;],&quot;name&quot;:[0,&quot;Cloudflare One&quot;],&quot;slug&quot;:[0,&quot;cloudflare-one&quot;]}],[0,{&quot;id&quot;:[0,&quot;3QNaVNNpUXrfZYUGDJkXwA&quot;],&quot;name&quot;:[0,&quot;Cloudflare Zero Trust&quot;],&quot;slug&quot;:[0,&quot;cloudflare-zero-trust&quot;]}],[0,{&quot;id&quot;:[0,&quot;6hbkItfupogJP3aRDAq6v8&quot;],&quot;name&quot;:[0,&quot;Cloudflare Workers&quot;],&quot;slug&quot;:[0,&quot;workers&quot;]}]]],&quot;relatedTags&quot;:[0],&quot;authors&quot;:[1,[[0,{&quot;name&quot;:[0,&quot;Nikita Cano&quot;],&quot;slug&quot;:[0,&quot;nikita&quot;],&quot;bio&quot;:[0,&quot;Product Manager, Rules and Insights (Configuration Rules, Compression Rules, Page Rules, Redirect Rules, Origin Rules, Snippets, Trace, Traffic Sequence, Transform Rules, URL Normalization, etc.)&quot;],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6hGB1W3bIJaibV4F7Qe0L8/56f554eeae28828297135a54eacc3065/nikita.jpeg&quot;],&quot;location&quot;:[0,&quot;London, United Kingdom&quot;],&quot;website&quot;:[0,&quot;https://nikitacano.com&quot;],&quot;twitter&quot;:[0,null],&quot;facebook&quot;:[0,null],&quot;publiclyIndex&quot;:[0,true]}],[0,{&quot;name&quot;:[0,&quot;Korinne Alpers&quot;],&quot;slug&quot;:[0,&quot;korinne-alpers&quot;],&quot;bio&quot;:[0],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5cfasTtVaoOsISarcB9F4Z/1686863c1bbd4dc0b74c7229cfcee42c/Korinne_Alpers.jpg&quot;],&quot;location&quot;:[0],&quot;website&quot;:[0],&quot;twitter&quot;:[0],&quot;facebook&quot;:[0],&quot;publiclyIndex&quot;:[0,true]}]]],&quot;meta_description&quot;:[0,&quot;Cloudflare just turned 15! Birthday Week 2025 celebrated innovation at scale: Rust-powered core systems, post-quantum upgrades, developer access for students, PlanetScale integration, open-source partnerships, and our biggest internship program ever â 1,111 interns in 2026.&quot;],&quot;primary_author&quot;:[0,{}],&quot;localeList&quot;:[0,{&quot;name&quot;:[0,&quot;LOC: 15 years of helping build a better Internet: a look back at Birthday Week 2025&quot;],&quot;enUS&quot;:[0,&quot;English for Locale&quot;],&quot;zhCN&quot;:[0,&quot;Translated for Locale&quot;],&quot;zhHansCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhTW&quot;:[0,&quot;Translated for Locale&quot;],&quot;frFR&quot;:[0,&quot;Translated for Locale&quot;],&quot;deDE&quot;:[0,&quot;Translated for Locale&quot;],&quot;itIT&quot;:[0,&quot;No Page for Locale&quot;],&quot;jaJP&quot;:[0,&quot;Translated for Locale&quot;],&quot;koKR&quot;:[0,&quot;Translated for Locale&quot;],&quot;ptBR&quot;:[0,&quot;No Page for Locale&quot;],&quot;esLA&quot;:[0,&quot;No Page for Locale&quot;],&quot;esES&quot;:[0,&quot;Translated for Locale&quot;],&quot;enAU&quot;:[0,&quot;No Page for Locale&quot;],&quot;enCA&quot;:[0,&quot;No Page for Locale&quot;],&quot;enIN&quot;:[0,&quot;No Page for Locale&quot;],&quot;enGB&quot;:[0,&quot;No Page for Locale&quot;],&quot;idID&quot;:[0,&quot;No Page for Locale&quot;],&quot;ruRU&quot;:[0,&quot;No Page for Locale&quot;],&quot;svSE&quot;:[0,&quot;No Page for Locale&quot;],&quot;viVN&quot;:[0,&quot;No Page for Locale&quot;],&quot;plPL&quot;:[0,&quot;No Page for Locale&quot;],&quot;arAR&quot;:[0,&quot;No Page for Locale&quot;],&quot;nlNL&quot;:[0,&quot;No Page for Locale&quot;],&quot;thTH&quot;:[0,&quot;No Page for Locale&quot;],&quot;trTR&quot;:[0,&quot;No Page for Locale&quot;],&quot;heIL&quot;:[0,&quot;No Page for Locale&quot;],&quot;lvLV&quot;:[0,&quot;No Page for Locale&quot;],&quot;etEE&quot;:[0,&quot;No Page for Locale&quot;],&quot;ltLT&quot;:[0,&quot;No Page for Locale&quot;]}],&quot;url&quot;:[0,&quot;https://blog.cloudflare.com/birthday-week-2025-wrap-up&quot;],&quot;metadata&quot;:[0,{&quot;title&quot;:[0,&quot;15 years of helping build a better Internet: A look back at Birthday Week 2025&quot;],&quot;description&quot;:[0,&quot;Cloudflare just turned 15! Birthday Week 2025 celebrated innovation at scale: Rust-powered core systems, post-quantum upgrades, developer access for students, PlanetScale integration, open-source partnerships, and our biggest internship program ever â 1,111 interns in 2026.&quot;],&quot;imgPreview&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2zbjXPDrTva3PsfI0LXpH0/1be8467639262d3c946ae07e846d4c85/15_years_of_helping_build_a_better_Internet-_a_look_back_at_Birthday_Week_2025-OG.png&quot;]}],&quot;publicly_index&quot;:[0,true]}],[0,{&quot;id&quot;:[0,&quot;7d41Nh5ZiG8DbEjjwhJF3H&quot;],&quot;title&quot;:[0,&quot;Cloudflare just got faster and more secure, powered by Rust&quot;],&quot;slug&quot;:[0,&quot;20-percent-internet-upgrade&quot;],&quot;excerpt&quot;:[0,&quot;Weâve replaced the original core system in Cloudflare with a new modular Rust-based proxy, replacing NGINX. &quot;],&quot;featured&quot;:[0,false],&quot;html&quot;:[0,&quot;&lt;p&gt;Cloudflare is relentless about building and running the worldâs fastest network. We have been &lt;a href=\&quot;https://blog.cloudflare.com/tag/network-performance-update/\&quot;&gt;&lt;u&gt;tracking and reporting on our network performance since 2021&lt;/u&gt;&lt;/a&gt;: you can see the latest update &lt;a href=\&quot;https://blog.cloudflare.com/tag/network-performance-update/\&quot;&gt;&lt;u&gt;here&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Building the fastest network requires work in many areas. We invest a lot of time in our hardware, to have efficient and fast machines. We invest in peering arrangements, to make sure we can talk to every part of the Internet with minimal delay. On top of this, we also have to invest in the software we run our network on, especially as each new product can otherwise add more processing delay.&lt;/p&gt;&lt;p&gt;No matter how fast messages arrive, we introduce a bottleneck if that software takes too long to think about how to process and respond to requests. Today we are excited to share a significant upgrade to our software that cuts the median time we take to respond by 10ms and delivers a 25% performance boost, as measured by third-party CDN performance tests.&lt;/p&gt;&lt;p&gt;We&amp;#39;ve spent the last year rebuilding major components of our system, and we&amp;#39;ve just slashed the latency of traffic passing through our network for millions of our customers. At the same time, we&amp;#39;ve made our system more secure, and we&amp;#39;ve reduced the time it takes for us to build and release new products.Â &lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;where-did-we-start\&quot;&gt;Where did we start?&lt;/h2&gt;\n      &lt;a href=\&quot;#where-did-we-start\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Every request that hits Cloudflare starts a journey through our network. It might come from a browser loading a webpage, a mobile app calling an API, or automated traffic from another service. These requests first terminate at our HTTP and TLS layer, then pass into a system we call FL, and finally through &lt;a href=\&quot;https://blog.cloudflare.com/pingora-open-source/\&quot;&gt;&lt;u&gt;Pingora&lt;/u&gt;&lt;/a&gt;, which performs cache lookups or fetches data from the origin if needed.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/CKW3jrB9vw4UhXx6OYJpt/928b9e9c1c794f7622fc4ad469d66b60/image3.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;846\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;FL is the brain of Cloudflare. Once a request reaches FL, we then run the various security and performance features in our network. It applies each customerâs unique configuration and settings, from enforcing &lt;a href=\&quot;https://developers.cloudflare.com/waf/managed-rules/\&quot;&gt;&lt;u&gt;WAF rules &lt;/u&gt;&lt;/a&gt;and &lt;a href=\&quot;https://www.cloudflare.com/ddos/\&quot;&gt;&lt;u&gt;DDoS protection&lt;/u&gt;&lt;/a&gt; to routing traffic to the &lt;a href=\&quot;https://developers.cloudflare.com/learning-paths/workers/devplat/intro-to-devplat/\&quot;&gt;&lt;u&gt;Developer Platform &lt;/u&gt;&lt;/a&gt;and &lt;a href=\&quot;https://developers.cloudflare.com/r2/\&quot;&gt;&lt;u&gt;R2&lt;/u&gt;&lt;/a&gt;.Â &lt;/p&gt;&lt;p&gt;Built more than 15 years ago, FL has been at the core of Cloudflareâs network. It enables us to deliver a broad range of features, but over time that flexibility became a challenge. As we added more products, FL grew harder to maintain, slower to process requests, and more difficult to extend. Each new feature required careful checks across existing logic, and every addition introduced a little more latency, making it increasingly difficult to sustain the performance we wanted.&lt;/p&gt;&lt;p&gt;You can see how FL is key to our system â weâve often called it the âbrainâ of Cloudflare. Itâs also one of the oldest parts of our system: the first commit to the codebase was made by one of our founders, Lee Holloway, well before our initial launch. Weâre celebrating our 15th Birthday this week - this system started 9 months before that!&lt;/p&gt;\n            &lt;pre class=\&quot;language-Rust\&quot;&gt;&lt;code class=\&quot;language-Rust\&quot;&gt;commit 39c72e5edc1f05ae4c04929eda4e4d125f86c5ce\nAuthor: Lee Holloway &amp;lt;q@t60.(none)&amp;gt;\nDate:   Wed Jan 6 09:57:55 2010 -0800\n\n    nginx-fl initial configuration&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;As the commit implies, the first version of FL was implemented based on the NGINX webserver, with product logic implemented in PHP.Â  After 3 years, the system became too complex to manage effectively, and too slow to respond, and an almost complete rewrite of the running system was performed. This led to another significant commit, this time made by Dane Knecht, who is now our CTO.&lt;/p&gt;\n            &lt;pre class=\&quot;language-Rust\&quot;&gt;&lt;code class=\&quot;language-Rust\&quot;&gt;commit bedf6e7080391683e46ab698aacdfa9b3126a75f\nAuthor: Dane Knecht\nDate:   Thu Sep 19 19:31:15 2013 -0700\n\n    remove PHP.&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;From this point on, FL was implemented using NGINX, the &lt;a href=\&quot;https://openresty.org/en/\&quot;&gt;&lt;u&gt;OpenResty&lt;/u&gt;&lt;/a&gt; framework, and &lt;a href=\&quot;https://luajit.org/\&quot;&gt;&lt;u&gt;LuaJIT&lt;/u&gt;&lt;/a&gt;.Â  While this was great for a long time, over the last few years it started to show its age. We had to spend increasing amounts of time fixing or working around obscure bugs in LuaJIT. The highly dynamic and unstructured nature of our Lua code, which was a blessing when first trying to implement logic quickly, became a source of errors and delay when trying to integrate large amounts of complex product logic. Each time a new product was introduced, we had to go through all the other existing products to check if they might be affected by the new logic.&lt;/p&gt;&lt;p&gt;It was clear that we needed a rethink. So, in July 2024, we cut an initial commit for a brand new, and radically different, implementation. To save time agreeing on a new name for this, we just called it âFL2â, and started, of course, referring to the original FL as âFL1â.&lt;/p&gt;\n            &lt;pre class=\&quot;language-Rust\&quot;&gt;&lt;code class=\&quot;language-Rust\&quot;&gt;commit a72698fc7404a353a09a3b20ab92797ab4744ea8\nAuthor: Maciej Lechowski\nDate:   Wed Jul 10 15:19:28 2024 +0100\n\n    Create fl2 project&lt;/pre&gt;&lt;/code&gt;\n            \n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;rust-and-rigid-modularization\&quot;&gt;Rust and rigid modularization&lt;/h2&gt;\n      &lt;a href=\&quot;#rust-and-rigid-modularization\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;We werenât starting from scratch. Weâve &lt;a href=\&quot;https://blog.cloudflare.com/how-we-built-pingora-the-proxy-that-connects-cloudflare-to-the-internet/\&quot;&gt;&lt;u&gt;previously blogged&lt;/u&gt;&lt;/a&gt; about how we replaced another one of our legacy systems with Pingora, which is built in the &lt;a href=\&quot;https://www.rust-lang.org/\&quot;&gt;&lt;u&gt;Rust&lt;/u&gt;&lt;/a&gt; programming language, using the &lt;a href=\&quot;https://tokio.rs/\&quot;&gt;&lt;u&gt;Tokio&lt;/u&gt;&lt;/a&gt; runtime. Weâve also &lt;a href=\&quot;https://blog.cloudflare.com/introducing-oxy/\&quot;&gt;&lt;u&gt;blogged about Oxy&lt;/u&gt;&lt;/a&gt;, our internal framework for building proxies in Rust. We write a lot of Rust, and weâve gotten pretty good at it.&lt;/p&gt;&lt;p&gt;We built FL2 in Rust, on Oxy, and built a strict module framework to structure all the logic in FL2.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;why-oxy\&quot;&gt;Why Oxy?&lt;/h2&gt;\n      &lt;a href=\&quot;#why-oxy\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;When we set out to build FL2, we knew we werenât just replacing an old system; we were rebuilding the foundations of Cloudflare. That meant we needed more than just a proxy; we needed a framework that could evolve with us, handle the immense scale of our network, and let teams move quickly without sacrificing safety or performance.Â &lt;/p&gt;&lt;p&gt;Oxy gives us a powerful combination of performance, safety, and flexibility. Built in Rust, it eliminates entire classes of bugs that plagued our Nginx/LuaJIT-based FL1, like memory safety issues and data races, while delivering C-level performance. At Cloudflareâs scale, those guarantees arenât nice-to-haves, theyâre essential. Every microsecond saved per request translates into tangible improvements in user experience, and every crash or edge case avoided keeps the Internet running smoothly. Rustâs strict compile-time guarantees also pair perfectly with FL2âs modular architecture, where we enforce clear contracts between product modules and their inputs and outputs.&lt;/p&gt;&lt;p&gt;But the choice wasnât just about language. Oxy is the culmination of years of experience building high-performance proxies. It already powers several major Cloudflare services, from our &lt;a href=\&quot;https://developers.cloudflare.com/cloudflare-one/\&quot;&gt;&lt;u&gt;Zero Trust&lt;/u&gt;&lt;/a&gt; Gateway to &lt;a href=\&quot;https://blog.cloudflare.com/icloud-private-relay/\&quot;&gt;&lt;u&gt;Appleâs iCloud Private Relay&lt;/u&gt;&lt;/a&gt;, so we knew it could handle the diverse traffic patterns and protocol combinations that FL2 would see. Its extensibility model lets us intercept, analyze, and manipulate traffic from&lt;a href=\&quot;https://www.cloudflare.com/en-gb/learning/ddos/glossary/open-systems-interconnection-model-osi/\&quot;&gt;&lt;u&gt; layer 3 up to layer 7&lt;/u&gt;&lt;/a&gt;, and even decapsulate and reprocess traffic at different layers. That flexibility is key to FL2âs design because it means we can treat everything from HTTP to raw IP traffic consistently and evolve the platform to support new protocols and features without rewriting fundamental pieces.&lt;/p&gt;&lt;p&gt;Oxy also comes with a rich set of built-in capabilities that previously required large amounts of bespoke code. Things like monitoring, soft reloads, dynamic configuration loading and swapping are all part of the framework. That lets product teams focus on the unique business logic of their module rather than reinventing the plumbing every time. This solid foundation means we can make changes with confidence, ship them quickly, and trust theyâll behave as expected once deployed.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;smooth-restarts-keeping-the-internet-flowing\&quot;&gt;Smooth restarts - keeping the Internet flowing&lt;/h2&gt;\n      &lt;a href=\&quot;#smooth-restarts-keeping-the-internet-flowing\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;One of the most impactful improvements Oxy brings is handling of restarts. Any software under continuous development and improvement will eventually need to be updated. In desktop software, this is easy: you close the program, install the update, and reopen it. On the web, things are much harder. Our software is in constant use and cannot simply stop. A dropped HTTP request can cause a page to fail to load, and a broken connection can kick you out of a video call. Reliability is not optional.&lt;/p&gt;&lt;p&gt;In FL1, upgrades meant restarts of the proxy process. Restarting a proxy meant terminating the process entirely, which immediately broke any active connections. That was particularly painful for long-lived connections such as WebSockets, streaming sessions, and real-time APIs. Even planned upgrades could cause user-visible interruptions, and unplanned restarts during incidents could be even worse.&lt;/p&gt;&lt;p&gt;Oxy changes that. It includes a built-in mechanism for &lt;a href=\&quot;https://blog.cloudflare.com/oxy-the-journey-of-graceful-restarts/\&quot;&gt;&lt;u&gt;graceful restarts&lt;/u&gt;&lt;/a&gt; that lets us roll out new versions without dropping connections whenever possible. When a new instance of an Oxy-based service starts up, the old one stops accepting new connections but continues to serve existing ones, allowing those sessions to continue uninterrupted until they end naturally.&lt;/p&gt;&lt;p&gt;This means that if you have an ongoing WebSocket session when we deploy a new version, that session can continue uninterrupted until it ends naturally, rather than being torn down by the restart. Across Cloudflareâs fleet, deployments are orchestrated over several hours, so the aggregate rollout is smooth and nearly invisible to end users.&lt;/p&gt;&lt;p&gt;We take this a step further by using systemd socket activation. Instead of letting each proxy manage its own sockets, we let systemd create and own them. This decouples the lifetime of sockets from the lifetime of the Oxy application itself. If an Oxy process restarts or crashes, the sockets remain open and ready to accept new connections, which will be served as soon as the new process is running. That eliminates the âconnection refusedâ errors that could happen during restarts in FL1 and improves overall availability during upgrades.&lt;/p&gt;&lt;p&gt;We also built our own coordination mechanisms in Rust to replace Go libraries like &lt;a href=\&quot;https://github.com/cloudflare/tableflip\&quot;&gt;&lt;u&gt;tableflip&lt;/u&gt;&lt;/a&gt; with &lt;a href=\&quot;https://github.com/cloudflare/shellflip\&quot;&gt;&lt;u&gt;shellflip&lt;/u&gt;&lt;/a&gt;. This uses a restart coordination socket that validates configuration, spawns new instances, and ensures the new version is healthy before the old one shuts down. This improves feedback loops and lets our automation tools detect and react to failures immediately, rather than relying on blind signal-based restarts.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;composing-fl2-from-modules\&quot;&gt;Composing FL2 from Modules&lt;/h2&gt;\n      &lt;a href=\&quot;#composing-fl2-from-modules\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;To avoid the problems we had in FL1, we wanted a design where all interactions between product logic were explicit and easy to understand.Â &lt;/p&gt;&lt;p&gt;So, on top of the foundations provided by Oxy, we built a platform which separates all the logic built for our products into well-defined modules. After some experimentation and research, we designed a module system which enforces some strict rules:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;No IO (input or output) can be performed by the module.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The module provides a list of &lt;b&gt;phases&lt;/b&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Phases are evaluated in a strictly defined order, which is the same for every request.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Each phase defines a set of inputs which the platform provides to it, and a set of outputs which it may emit.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Hereâs an example of what a module phase definition looks like:&lt;/p&gt;\n            &lt;pre class=\&quot;language-Rust\&quot;&gt;&lt;code class=\&quot;language-Rust\&quot;&gt;Phase {\n    name: phases::SERVE_ERROR_PAGE,\n    request_types_enabled: PHASE_ENABLED_FOR_REQUEST_TYPE,\n    inputs: vec![\n        InputKind::IPInfo,\n        InputKind::ModuleValue(\n            MODULE_VALUE_CUSTOM_ERRORS_FETCH_WORKER_RESPONSE.as_str(),\n        ),\n        InputKind::ModuleValue(MODULE_VALUE_ORIGINAL_SERVE_RESPONSE.as_str()),\n        InputKind::ModuleValue(MODULE_VALUE_RULESETS_CUSTOM_ERRORS_OUTPUT.as_str()),\n        InputKind::ModuleValue(MODULE_VALUE_RULESETS_UPSTREAM_ERROR_DETAILS.as_str()),\n        InputKind::RayId,\n        InputKind::StatusCode,\n        InputKind::Visitor,\n    ],\n    outputs: vec![OutputValue::ServeResponse],\n    filters: vec![],\n    func: phase_serve_error_page::callback,\n}&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;This phase is for our custom error page product.Â  It takes a few things as input â information about the IP of the visitor, some header and other HTTP information, and some âmodule values.â Module values allow one module to pass information to another, and theyâre key to making the strict properties of the module system workable. For example, this module needs some information that is produced by the output of our rulesets-based custom errors product (the â&lt;code&gt;MODULE_VALUE_RULESETS_CUSTOM_ERRORS_OUTPUT&lt;/code&gt;â input). These input and output definitions are enforced at compile time.&lt;/p&gt;&lt;p&gt;While these rules are strict, weâve found that we can implement all our product logic within this framework. The benefit of doing so is that we can immediately tell which other products might affect each other.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;how-to-replace-a-running-system\&quot;&gt;How to replace a running system&lt;/h2&gt;\n      &lt;a href=\&quot;#how-to-replace-a-running-system\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Building a framework is one thing. Building all the product logic and getting it right, so that customers donât notice anything other than a performance improvement, is another.&lt;/p&gt;&lt;p&gt;The FL code base supports 15 years of Cloudflare products, and itâs changing all the time. We couldnât stop development. So, one of our first tasks was to find ways to make the migration easier and safer.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;step-1-rust-modules-in-openresty\&quot;&gt;Step 1 - Rust modules in OpenResty&lt;/h3&gt;\n      &lt;a href=\&quot;#step-1-rust-modules-in-openresty\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Itâs a big enough distraction from shipping products to customers to rebuild product logic in Rust. Asking all our teams to maintain two versions of their product logic, and reimplement every change a second time until we finished our migration was too much.&lt;/p&gt;&lt;p&gt;So, we implemented a layer in our old NGINX and OpenResty based FL which allowed the new modules to be run. Instead of maintaining a parallel implementation, teams could implement their logic in Rust, and replace their old Lua logic with that, without waiting for the full replacement of the old system.&lt;/p&gt;&lt;p&gt;For example, hereâs part of the implementation for the custom error page module phase defined earlier (weâve cut out some of the more boring details, so this doesnât quite compile as-written):&lt;/p&gt;\n            &lt;pre class=\&quot;language-Rust\&quot;&gt;&lt;code class=\&quot;language-Rust\&quot;&gt;pub(crate) fn callback(_services: &amp;amp;mut Services, input: &amp;amp;Input&amp;lt;&amp;#039;_&amp;gt;) -&amp;gt; Output {\n    // Rulesets produced a response to serve - this can either come from a special\n    // Cloudflare worker for serving custom errors, or be directly embedded in the rule.\n    if let Some(rulesets_params) = input\n        .get_module_value(MODULE_VALUE_RULESETS_CUSTOM_ERRORS_OUTPUT)\n        .cloned()\n    {\n        // Select either the result from the special worker, or the parameters embedded\n        // in the rule.\n        let body = input\n            .get_module_value(MODULE_VALUE_CUSTOM_ERRORS_FETCH_WORKER_RESPONSE)\n            .and_then(|response| {\n                handle_custom_errors_fetch_response(&amp;quot;rulesets&amp;quot;, response.to_owned())\n            })\n            .or(rulesets_params.body);\n\n        // If we were able to load a body, serve it, otherwise let the next bit of logic\n        // handle the response\n        if let Some(body) = body {\n            let final_body = replace_custom_error_tokens(input, &amp;amp;body);\n\n            // Increment a metric recording number of custom error pages served\n            custom_pages::pages_served(&amp;quot;rulesets&amp;quot;).inc();\n\n            // Return a phase output with one final action, causing an HTTP response to be served.\n            return Output::from(TerminalAction::ServeResponse(ResponseAction::OriginError {\n                rulesets_params.status,\n                source: &amp;quot;rulesets http_custom_errors&amp;quot;,\n                headers: rulesets_params.headers,\n                body: Some(Bytes::from(final_body)),\n            }));\n        }\n    }\n}&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;The internal logic in each module is quite cleanly separated from the handling of data, with very clear and explicit error handling encouraged by the design of the Rust language.&lt;/p&gt;&lt;p&gt;Many of our most actively developed modules were handled this way, allowing the teams to maintain their change velocity during our migration.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;step-2-testing-and-automated-rollouts\&quot;&gt;Step 2 - Testing and automated rollouts&lt;/h3&gt;\n      &lt;a href=\&quot;#step-2-testing-and-automated-rollouts\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    \n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6OElHIMjnkIQmsbx92ZOYc/545a26ba623a253ea1a5c6b13279301d/image4.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;743\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;Itâs essential to have a seriously powerful test framework to cover such a migration.Â  We built a system, internally named Flamingo, which allows us to run thousands of full end-to-end test requests concurrently against our production and pre-production systems. The same tests run against FL1 and FL2, giving us confidence that weâre not changing behaviours.&lt;/p&gt;&lt;p&gt;Whenever we deploy a change, that change is rolled out gradually across many stages, with increasing amounts of traffic. Each stage is automatically evaluated, and only passes when the full set of tests have been successfully run against it - as well as overall performance and resource usage metrics being within acceptable bounds. This system is fully automated, and pauses or rolls back changes if the tests fail.\n&lt;/p&gt;&lt;p&gt;The benefit is that weâre able to build and ship new product features in FL2 within 48 hours - where it would have taken weeks in FL1. In fact, at least one of the announcements this week involved such a change!&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;step-3-fallbacks\&quot;&gt;Step 3 - Fallbacks&lt;/h3&gt;\n      &lt;a href=\&quot;#step-3-fallbacks\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Over 100 engineers have worked on FL2, and we have over 130 modules. And weâre not quite done yet. We&amp;#39;re still putting the final touches on the system, to make sure it replicates all the behaviours of FL1.&lt;/p&gt;&lt;p&gt;So how do we send traffic to FL2 without it being able to handle everything? If FL2 receives a request, or a piece of configuration for a request, that it doesnât know how to handle, it gives up and does what weâve called a &lt;b&gt;fallback&lt;/b&gt; - it passes the whole thing over to FL1. It does this at the network level - it just passes the bytes on to FL1.&lt;/p&gt;&lt;p&gt;As well as making it possible for us to send traffic to FL2 without it being fully complete, this has another massive benefit. When we have implemented a piece of new functionality in FL2, but want to double check that it is working the same as in FL1, we can evaluate the functionality in FL2, and then trigger a fallback. We are able to compare the behaviour of the two systems, allowing us to get a high confidence that our implementation was correct.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;step-4-rollout\&quot;&gt;Step 4 - Rollout&lt;/h3&gt;\n      &lt;a href=\&quot;#step-4-rollout\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;We started running customer traffic through FL2 early in 2025, and have been progressively increasing the amount of traffic served throughout the year. Essentially, weâve been watching two graphs: one with the proportion of traffic routed to FL2 going up, and another with the proportion of traffic failing to be served by FL2 and falling back to FL1 going down.&lt;/p&gt;&lt;p&gt;We started this process by passing traffic for our free customers through the system. We were able to prove that the system worked correctly, and drive the fallback rates down for our major modules. Our &lt;a href=\&quot;https://community.cloudflare.com/\&quot;&gt;&lt;u&gt;Cloudflare Community&lt;/u&gt;&lt;/a&gt; MVPs acted as an early warning system, smoke testing and flagging when they suspected the new platform might be the cause of a new reported problem. Crucially their support allowed our team to investigate quickly, apply targeted fixes, or confirm the move to FL2 was not to blame.&lt;/p&gt;&lt;p&gt;\nWe then advanced to our paying customers, gradually increasing the amount of customers using the system. We also worked closely with some of our largest customers, who wanted the performance benefits of FL2, and onboarded them early in exchange for lots of feedback on the system.&lt;/p&gt;&lt;p&gt;Right now, most of our customers are using FL2. We still have a few features to complete, and are not quite ready to onboard everyone, but our target is to turn off FL1 within a few more months.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;impact-of-fl2\&quot;&gt;Impact of FL2&lt;/h2&gt;\n      &lt;a href=\&quot;#impact-of-fl2\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;As we described at the start of this post, FL2 is substantially faster than FL1. The biggest reason for this is simply that FL2 performs less work. You might have noticed in the module definition example a line&lt;/p&gt;\n            &lt;pre class=\&quot;language-Rust\&quot;&gt;&lt;code class=\&quot;language-Rust\&quot;&gt;    filters: vec![],&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;Every module is able to provide a set of filters, which control whether they run or not. This means that we donât run logic for every product for every request â we can very easily select just the required set of modules. The incremental cost for each new product we develop has gone away.&lt;/p&gt;&lt;p&gt;Another huge reason for better performance is that FL2 is a single codebase, implemented in a performance focussed language. In comparison, FL1 was based on NGINX (which is written in C), combined with LuaJIT (Lua, and C interface layers), and also contained plenty of Rust modules.Â  In FL1, we spent a lot of time and memory converting data from the representation needed by one language, to the representation needed by another.&lt;/p&gt;&lt;p&gt;As a result, our internal measures show that FL2 uses less than half the CPU of FL1, and much less than half the memory. Thatâs a huge bonus â we can spend the CPU on delivering more and more features for our customers!&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;how-do-we-measure-if-we-are-getting-better\&quot;&gt;How do we measure if we are getting better?&lt;/h2&gt;\n      &lt;a href=\&quot;#how-do-we-measure-if-we-are-getting-better\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Using our own tools and independent benchmarks like &lt;a href=\&quot;https://www.cdnperf.com/\&quot;&gt;&lt;u&gt;CDNPerf&lt;/u&gt;&lt;/a&gt;, we measured the impact of FL2 as we rolled it out across the network. The results are clear: websites are responding 10 ms faster at the median, a 25% performance boost.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/eDqQvbAfrQoSXPZed0fd7/d7fe0d28e33a3f2e8dfcd27cf79c900f/image1.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;1092\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;security\&quot;&gt;Security&lt;/h2&gt;\n      &lt;a href=\&quot;#security\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;FL2 is also more secure by design than FL1. No software system is perfect, but the Rust language brings us huge benefits over LuaJIT. Rust has strong compile-time memory checks and a type system that avoids large classes of errors. Combine that with our rigid module system, and we can make most changes with high confidence.&lt;/p&gt;&lt;p&gt;Of course, no system is secure if used badly. Itâs easy to write code in Rust, which causes memory corruption. To reduce risk, we maintain strong compile time linting and checking, together with strict coding standards, testing and review processes.&lt;/p&gt;&lt;p&gt;We have long followed a policy that any unexplained crash of our systems needs to be &lt;a href=\&quot;https://blog.cloudflare.com/however-improbable-the-story-of-a-processor-bug/\&quot;&gt;&lt;u&gt;investigated as a high priority&lt;/u&gt;&lt;/a&gt;. We wonât be relaxing that policy, though the main cause of novel crashes in FL2 so far has been due to hardware failure. The massively reduced rates of such crashes will give us time to do a good job of such investigations.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;whats-next\&quot;&gt;Whatâs next?&lt;/h2&gt;\n      &lt;a href=\&quot;#whats-next\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Weâre spending the rest of 2025 completing the migration from FL1 to FL2, and will turn off FL1 in early 2026. Weâre already seeing the benefits in terms of customer performance and speed of development, and weâre looking forward to giving these to all our customers.&lt;/p&gt;&lt;p&gt;We have one last service to completely migrate. The âHTTP &amp;amp; TLS Terminationâ box from the diagram way back at the top is also an NGINX service, and weâre midway through a rewrite in Rust. Weâre making good progress on this migration, and expect to complete it early next year.&lt;/p&gt;&lt;p&gt;After that, when everything is modular, in Rust and tested and scaled, we can really start to optimize! Weâll reorganize and simplify how the modules connect to each other, expand support for non-HTTP traffic like RPC and streams, and much more.Â &lt;/p&gt;&lt;p&gt;If youâre interested in being part of this journey, check out our &lt;a href=\&quot;https://www.cloudflare.com/careers/\&quot;&gt;&lt;u&gt;careers page&lt;/u&gt;&lt;/a&gt; for open roles - weâre always looking for new talent to help us to help build a better Internet.&lt;/p&gt;&lt;div style=\&quot;position: relative; padding-top: 56.25%;\&quot;&gt;\n  &lt;iframe\n    src=\&quot;https://customer-rhnwzxvb3mg4wz3v.cloudflarestream.com/8d9b2a46a830add5b19c64aaa77f1ff1/iframe?poster=https%3A%2F%2Fcustomer-rhnwzxvb3mg4wz3v.cloudflarestream.com%2F8d9b2a46a830add5b19c64aaa77f1ff1%2Fthumbnails%2Fthumbnail.jpg%3Ftime%3D0m5s%26height%3D600\&quot;\n    loading=\&quot;lazy\&quot;\n    style=\&quot;border: none; position: absolute; top: 0; left: 0; height: 100%; width: 100%;\&quot;\n    allow=\&quot;accelerometer; gyroscope; autoplay; encrypted-media; picture-in-picture;\&quot;\n    allowfullscreen=\&quot;true\&quot;\n  &gt;&lt;/iframe&gt;\n&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&quot;],&quot;published_at&quot;:[0,&quot;2025-09-26T14:00+00:00&quot;],&quot;updated_at&quot;:[0,&quot;2025-10-01T19:38:14.614Z&quot;],&quot;feature_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2GUKNR9jGUpLX1qjIFcV2h/f4706e05785de7f027f9bd4a2a7161cc/image2.png&quot;],&quot;tags&quot;:[1,[[0,{&quot;id&quot;:[0,&quot;1Cv5JjXzKWKEA10JdYbXu1&quot;],&quot;name&quot;:[0,&quot;Birthday Week&quot;],&quot;slug&quot;:[0,&quot;birthday-week&quot;]}],[0,{&quot;id&quot;:[0,&quot;w4e8pkoz9c8xNDVhy9eNe&quot;],&quot;name&quot;:[0,&quot;Rust&quot;],&quot;slug&quot;:[0,&quot;rust&quot;]}],[0,{&quot;id&quot;:[0,&quot;3FBpuRfF7HUFga2Z5jgAFf&quot;],&quot;name&quot;:[0,&quot;NGINX&quot;],&quot;slug&quot;:[0,&quot;nginx&quot;]}],[0,{&quot;id&quot;:[0,&quot;2UVIYusJwlvsmPYl2AvSuR&quot;],&quot;name&quot;:[0,&quot;Deep Dive&quot;],&quot;slug&quot;:[0,&quot;deep-dive&quot;]}],[0,{&quot;id&quot;:[0,&quot;4ggKJG4JUzqG9FpAPIxwij&quot;],&quot;name&quot;:[0,&quot;Engineering&quot;],&quot;slug&quot;:[0,&quot;engineering&quot;]}]]],&quot;relatedTags&quot;:[0],&quot;authors&quot;:[1,[[0,{&quot;name&quot;:[0,&quot;Richard Boulton&quot;],&quot;slug&quot;:[0,&quot;richard&quot;],&quot;bio&quot;:[0,null],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1txFE2DMbnjFPes7HcHdLj/2446d6393523994a68cc872fbdb7a44c/richard.jpg&quot;],&quot;location&quot;:[0,null],&quot;website&quot;:[0,null],&quot;twitter&quot;:[0,null],&quot;facebook&quot;:[0,null],&quot;publiclyIndex&quot;:[0,true]}],[0,{&quot;name&quot;:[0,&quot;Steve Goldsmith&quot;],&quot;slug&quot;:[0,&quot;steve-goldsmith&quot;],&quot;bio&quot;:[0],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/KqdGpozSazI55A5VgXSdl/7f90d8fdfccd5c923ae51f9e8561e53e/Steve_Goldsmith.png&quot;],&quot;location&quot;:[0],&quot;website&quot;:[0],&quot;twitter&quot;:[0],&quot;facebook&quot;:[0],&quot;publiclyIndex&quot;:[0,true]}],[0,{&quot;name&quot;:[0,&quot;Maurizio Abba&quot;],&quot;slug&quot;:[0,&quot;maurizio-abba&quot;],&quot;bio&quot;:[0],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3390iTcZ01ixqSvPU9BMwJ/2f2c5096fb5dc1dade811ebbe306801a/Maurizio_Abba.jpg&quot;],&quot;location&quot;:[0],&quot;website&quot;:[0],&quot;twitter&quot;:[0],&quot;facebook&quot;:[0],&quot;publiclyIndex&quot;:[0,true]}],[0,{&quot;name&quot;:[0,&quot;Matthew Bullock&quot;],&quot;slug&quot;:[0,&quot;matthew-bullock&quot;],&quot;bio&quot;:[0],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6glr6c3xSYZVYVEOrV8vOj/f98c7dc32bee1845224820a5f9964c9e/Matthew_Bullock.jpg&quot;],&quot;location&quot;:[0],&quot;website&quot;:[0],&quot;twitter&quot;:[0],&quot;facebook&quot;:[0],&quot;publiclyIndex&quot;:[0,true]}]]],&quot;meta_description&quot;:[0,&quot;Weâve replaced the original core system in Cloudflare with a new modular Rust-based proxy, replacing NGINX. Itâs not only substantially faster for all our customers, itâs also more secure, and lets us ship new products quicker than ever before.&quot;],&quot;primary_author&quot;:[0,{}],&quot;localeList&quot;:[0,{&quot;name&quot;:[0,&quot;blog-english-only&quot;],&quot;enUS&quot;:[0,&quot;English for Locale&quot;],&quot;zhCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhHansCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhTW&quot;:[0,&quot;No Page for Locale&quot;],&quot;frFR&quot;:[0,&quot;No Page for Locale&quot;],&quot;deDE&quot;:[0,&quot;No Page for Locale&quot;],&quot;itIT&quot;:[0,&quot;No Page for Locale&quot;],&quot;jaJP&quot;:[0,&quot;No Page for Locale&quot;],&quot;koKR&quot;:[0,&quot;No Page for Locale&quot;],&quot;ptBR&quot;:[0,&quot;No Page for Locale&quot;],&quot;esLA&quot;:[0,&quot;No Page for Locale&quot;],&quot;esES&quot;:[0,&quot;No Page for Locale&quot;],&quot;enAU&quot;:[0,&quot;No Page for Locale&quot;],&quot;enCA&quot;:[0,&quot;No Page for Locale&quot;],&quot;enIN&quot;:[0,&quot;No Page for Locale&quot;],&quot;enGB&quot;:[0,&quot;No Page for Locale&quot;],&quot;idID&quot;:[0,&quot;No Page for Locale&quot;],&quot;ruRU&quot;:[0,&quot;No Page for Locale&quot;],&quot;svSE&quot;:[0,&quot;No Page for Locale&quot;],&quot;viVN&quot;:[0,&quot;No Page for Locale&quot;],&quot;plPL&quot;:[0,&quot;No Page for Locale&quot;],&quot;arAR&quot;:[0,&quot;No Page for Locale&quot;],&quot;nlNL&quot;:[0,&quot;No Page for Locale&quot;],&quot;thTH&quot;:[0,&quot;No Page for Locale&quot;],&quot;trTR&quot;:[0,&quot;No Page for Locale&quot;],&quot;heIL&quot;:[0,&quot;No Page for Locale&quot;],&quot;lvLV&quot;:[0,&quot;No Page for Locale&quot;],&quot;etEE&quot;:[0,&quot;No Page for Locale&quot;],&quot;ltLT&quot;:[0,&quot;No Page for Locale&quot;]}],&quot;url&quot;:[0,&quot;https://blog.cloudflare.com/20-percent-internet-upgrade&quot;],&quot;metadata&quot;:[0,{&quot;title&quot;:[0,&quot;Cloudflare just got faster and more secure, powered by Rust&quot;],&quot;description&quot;:[0,&quot;Weâve replaced the original core system in Cloudflare with a new modular Rust-based proxy, replacing NGINX. Itâs not only substantially faster for all our customers, itâs also more secure, and lets us ship new products quicker than ever before.&quot;],&quot;imgPreview&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7CuDYmnhcjbOyk4aLYEjBT/1c43939f2750244917d664560232183f/OG_Share_2024_-_2025-09-26T153125.900.png&quot;]}],&quot;publicly_index&quot;:[0,true]}],[0,{&quot;id&quot;:[0,&quot;7bZyPF4nBnr5gisZW2crax&quot;],&quot;title&quot;:[0,&quot;Safe in the sandbox: security hardening for Cloudflare Workers&quot;],&quot;slug&quot;:[0,&quot;safe-in-the-sandbox-security-hardening-for-cloudflare-workers&quot;],&quot;excerpt&quot;:[0,&quot;We are further hardening Cloudflare Workers with the latest software and hardware features. We use defense-in-depth, including V8 sandboxes and the CPU&#39;s memory protection keys to keep your data safe.&quot;],&quot;featured&quot;:[0,false],&quot;html&quot;:[0,&quot;&lt;p&gt;As a &lt;a href=\&quot;https://www.cloudflare.com/learning/serverless/what-is-serverless/\&quot;&gt;&lt;u&gt;serverless&lt;/u&gt;&lt;/a&gt; cloud provider, we run your code on our globally distributed infrastructure. Being able to run customer code on our network means that anyone can take advantage of our global presence and low latency. Workers isnât just efficient though, we also make it simple for our users. In short: &lt;a href=\&quot;https://workers.cloudflare.com/\&quot;&gt;&lt;u&gt;You write code. We handle the rest&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Part of &amp;#39;handling the rest&amp;#39; is making Workers as secure as possible. We have previously written about our &lt;a href=\&quot;https://blog.cloudflare.com/mitigating-spectre-and-other-security-threats-the-cloudflare-workers-security-model/\&quot;&gt;&lt;u&gt;security architecture&lt;/u&gt;&lt;/a&gt;. Making Workers secure is an interesting problem because the whole point of Workers is that we are running third party code on our hardware. This is one of the hardest security problems there is: any attacker has the full power available of a programming language running on the victim&amp;#39;s system when they are crafting their attacks.&lt;/p&gt;&lt;p&gt;This is why we are constantly updating and improving the Workers Runtime to take advantage of the latest improvements in both hardware and software. This post shares some of the latest work we have been doing to keep Workers secure.&lt;/p&gt;&lt;p&gt;Some background first: &lt;a href=\&quot;https://www.cloudflare.com/developer-platform/products/workers/\&quot;&gt;&lt;u&gt;Workers&lt;/u&gt;&lt;/a&gt; is built around the &lt;a href=\&quot;https://v8.dev/\&quot;&gt;&lt;u&gt;V8&lt;/u&gt;&lt;/a&gt; JavaScript runtime, originally developed for Chromium-based browsers like Chrome. This gives us a head start, because V8 was forged in an adversarial environment, where it has always been under intense attack and &lt;a href=\&quot;https://github.blog/security/vulnerability-research/getting-rce-in-chrome-with-incorrect-side-effect-in-the-jit-compiler/\&quot;&gt;&lt;u&gt;scrutiny&lt;/u&gt;&lt;/a&gt;. Like Workers, Chromium is built to run adversarial code safely. That&amp;#39;s why V8 is constantly being tested against the best fuzzers and sanitizers, and over the years, it has been hardened with new technologies like &lt;a href=\&quot;https://v8.dev/blog/oilpan-library\&quot;&gt;&lt;u&gt;Oilpan/cppgc&lt;/u&gt;&lt;/a&gt; and improved static analysis.&lt;/p&gt;&lt;p&gt;We use V8 in a slightly different way, though, so we will be describing in this post how we have been making some changes to V8 to improve security in our use case.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;hardware-assisted-security-improvements-from-memory-protection-keys\&quot;&gt;Hardware-assisted security improvements from Memory Protection Keys&lt;/h2&gt;\n      &lt;a href=\&quot;#hardware-assisted-security-improvements-from-memory-protection-keys\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Modern CPUs from Intel, AMD, and ARM have support for &lt;a href=\&quot;https://man7.org/linux/man-pages/man7/pkeys.7.html\&quot;&gt;&lt;u&gt;memory protection keys&lt;/u&gt;&lt;/a&gt;, sometimes called &lt;i&gt;PKU&lt;/i&gt;, Protection Keys for Userspace. This is a great security feature which increases the power of virtual memory and memory protection.&lt;/p&gt;&lt;p&gt;Traditionally, the memory protection features of the CPU in your PC or phone were mainly used to protect the kernel and to protect different processes from each other. Within each process, all threads had access to the same memory. Memory protection keys allow us to prevent specific threads from accessing memory regions they shouldn&amp;#39;t have access to.&lt;/p&gt;&lt;p&gt;V8 already &lt;a href=\&quot;https://issues.chromium.org/issues/41480375\&quot;&gt;&lt;u&gt;uses memory protection keys&lt;/u&gt;&lt;/a&gt; for the &lt;a href=\&quot;https://en.wikipedia.org/wiki/Just-in-time_compilation\&quot;&gt;&lt;u&gt;JIT compilers&lt;/u&gt;&lt;/a&gt;. The JIT compilers for a language like JavaScript generate optimized, specialized versions of your code as it runs. Typically, the compiler is running on its own thread, and needs to be able to write data to the code area in order to install its optimized code. However, the compiler thread doesn&amp;#39;t need to be able to run this code. The regular execution thread, on the other hand, needs to be able to run, but not modify, the optimized code. Memory protection keys offer a way to give each thread the permissions it needs, but &lt;a href=\&quot;https://en.wikipedia.org/wiki/W%5EX\&quot;&gt;&lt;u&gt;no more&lt;/u&gt;&lt;/a&gt;. And the V8 team in the Chromium project certainly aren&amp;#39;t standing still. They describe some of their future plans for memory protection keys &lt;a href=\&quot;https://docs.google.com/document/d/1l3urJdk1M3JCLpT9HDvFQKOxuKxwINcXoYoFuKkfKcc/edit?tab=t.0#heading=h.gpz70vgxo7uc\&quot;&gt;&lt;u&gt;here&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In Workers, we have some different requirements than Chromium. &lt;a href=\&quot;https://developers.cloudflare.com/workers/reference/security-model/\&quot;&gt;&lt;u&gt;The security architecture for Workers&lt;/u&gt;&lt;/a&gt; uses V8 isolates to separate different scripts that are running on our servers. (In addition, we have &lt;a href=\&quot;https://blog.cloudflare.com/spectre-research-with-tu-graz/\&quot;&gt;&lt;u&gt;extra mitigations&lt;/u&gt;&lt;/a&gt; to harden the system against &lt;a href=\&quot;https://en.wikipedia.org/wiki/Spectre_(security_vulnerability)\&quot;&gt;&lt;u&gt;Spectre&lt;/u&gt;&lt;/a&gt; attacks). If V8 is working as intended, this should be enough, but we believe in &lt;i&gt;defense in depth&lt;/i&gt;: multiple, overlapping layers of security controls.&lt;/p&gt;&lt;p&gt;That&amp;#39;s why we have deployed internal modifications to V8 to use memory protection keys to isolate the isolates from each other. There are up to 15 different keys available on a modern x64 CPU and a few are used for other purposes in V8, so we have about 12 to work with. We give each isolate a random key which is used to protect its V8 &lt;i&gt;heap data&lt;/i&gt;, the memory area containing the JavaScript objects a script creates as it runs. This means security bugs that might previously have allowed an attacker to read data from a different isolate would now hit a hardware trap in 92% of cases. (Assuming 12 keys, 92% is about 11/12.)&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4cHaaZrAhQf759og04S63G/59ff1974dc878ec8ad7d40f1f079be37/image9.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;1466\&quot; height=\&quot;606\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;The illustration shows an attacker attempting to read from a different isolate. Most of the time this is detected by the mismatched memory protection key, which kills their script and notifies us, so we can investigate and remediate. The red arrow represents the case where the attacker got lucky by hitting an isolate with the same memory protection key, represented by the isolates having the same colors.&lt;/p&gt;&lt;p&gt;However, we can further improve on a 92% protection rate. In the last part of this blog post we&amp;#39;ll explain how we can lift that to 100% for a particular common scenario. But first, let&amp;#39;s look at a software hardening feature in V8 that we are taking advantage of.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;the-v8-sandbox-a-software-based-security-boundary\&quot;&gt;The V8 sandbox, a software-based security boundary&lt;/h2&gt;\n      &lt;a href=\&quot;#the-v8-sandbox-a-software-based-security-boundary\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Over the past few years, V8 has been gaining another defense in depth feature: the V8 sandbox. (Not to be confused with the &lt;a href=\&quot;https://blog.cloudflare.com/sandboxing-in-linux-with-zero-lines-of-code/\&quot;&gt;&lt;u&gt;layer 2 sandbox&lt;/u&gt;&lt;/a&gt; which Workers have been using since the beginning.) The V8 sandbox has been a multi-year project that has been gaining &lt;a href=\&quot;https://v8.dev/blog/sandbox\&quot;&gt;&lt;u&gt;maturity&lt;/u&gt;&lt;/a&gt; for a while. The sandbox project stems from the observation that many V8 security vulnerabilities start by corrupting objects in the V8 heap memory. Attackers then leverage this corruption to reach other parts of the process, giving them the opportunity to escalate and gain more access to the victim&amp;#39;s browser, or even the entire system.&lt;/p&gt;&lt;p&gt;V8&amp;#39;s sandbox project is an ambitious software security mitigation that aims to thwart that escalation: to make it impossible for the attacker to progress from a corruption on the V8 heap to a compromise of the rest of the process. This means, among other things, removing all pointers from the heap. But first, let&amp;#39;s explain in as simple terms as possible, what a memory corruption attack is.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;memory-corruption-attacks\&quot;&gt;Memory corruption attacks&lt;/h3&gt;\n      &lt;a href=\&quot;#memory-corruption-attacks\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;A memory corruption attack tricks a program into misusing its own memory. Computer memory is just a store of integers, where each integer is stored in a location. The locations each have an &lt;i&gt;address&lt;/i&gt;, which is also just a number. Programs interpret the data in these locations in different ways, such as text, pixels, or &lt;i&gt;pointers&lt;/i&gt;. Pointers are addresses that identify a different memory location, so they act as a sort of arrow that points to some other piece of data.&lt;/p&gt;&lt;p&gt;Here&amp;#39;s a concrete example, which uses a buffer overflow. This is a form of attack that was historically common and relatively simple to understand: Imagine a program has a small buffer (like a 16-character text field) followed immediately by an 8-byte pointer to some ordinary data. An attacker might send the program a 24-character string, causing a &amp;quot;buffer overflow.&amp;quot; Because of a vulnerability in the program, the first 16 characters fill the intended buffer, but the remaining 8 characters spill over and overwrite the adjacent pointer.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5VlcKOYtfRHwWZVDb6GOPm/517ae1987c89273e1f33eb6ca11d752d/image5.png\&quot; alt=\&quot;See below for how such an attack would now be thwarted.\&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;831\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;&lt;sup&gt;&lt;i&gt;See below for how such an attack would now be thwarted.&lt;/i&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;Now the pointer has been redirected to point at sensitive data of the attacker&amp;#39;s choosing, rather than the normal data it was originally meant to access. When the program tries to use what it believes is its normal pointer, it&amp;#39;s actually accessing sensitive data chosen by the attacker.&lt;/p&gt;&lt;p&gt;This type of attack works in steps: first create a small confusion (like the buffer overflow), then use that confusion to create bigger problems, eventually gaining access to data or capabilities the attacker shouldn&amp;#39;t have.Â  The attacker can eventually use the misdirection to either steal information or plant malicious data that the program will treat as legitimate.&lt;/p&gt;&lt;p&gt;This was a somewhat abstract description of memory corruption attacks using a buffer overflow, one of the simpler techniques. For some much more detailed and recent examples, see &lt;a href=\&quot;https://googleprojectzero.blogspot.com/2015/06/what-is-good-memory-corruption.html\&quot;&gt;&lt;u&gt;this description from Google&lt;/u&gt;&lt;/a&gt;, or this &lt;a href=\&quot;https://medium.com/@INTfinitySG/miscellaneous-series-2-a-script-kiddie-diary-in-v8-exploit-research-part-1-5b0bab211f5a\&quot;&gt;&lt;u&gt;breakdown of a V8 vulnerability&lt;/u&gt;&lt;/a&gt;.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;compressed-pointers-in-v8\&quot;&gt;Compressed pointers in V8&lt;/h3&gt;\n      &lt;a href=\&quot;#compressed-pointers-in-v8\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Many attacks are based on corrupting pointers, so ideally we would remove all pointers from the memory of the program.Â  Since an object-oriented language&amp;#39;s heap is absolutely full of pointers, that would seem, on its face, to be a hopeless task, but it is enabled by an earlier development. Starting in 2020, V8 has offered the option of saving memory by using &lt;a href=\&quot;https://v8.dev/blog/pointer-compression\&quot;&gt;&lt;u&gt;compressed pointers&lt;/u&gt;&lt;/a&gt;. This means that, on a 64-bit system, the heap uses only 32 bit offsets, relative to a base address. This limits the total heap to maximally 4 GiB, a limitation that is acceptable for a browser, and also fine for individual scripts running in a V8 isolate on Cloudflare Workers.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/sO5ByQzR62UcxZiaxwcaq/2f2f0c04af57bb492e9ecaa321935112/image1.png\&quot; alt=\&quot;An artificial object with various fields, showing how the layout differs in a compressed vs. an uncompressed heap. The boxes are 64 bits wide.\&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;453\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;&lt;sup&gt;&lt;i&gt;An artificial object with various fields, showing how the layout differs in a compressed vs. an uncompressed heap. The boxes are 64 bits wide.&lt;/i&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;If the whole of the heap is in a single 4 GiB area then the first 32 bits of all pointers will be the same, and we don&amp;#39;t need to store them in every pointer field in every object. In the diagram we can see that the object pointers all start with 0x12345678, which is therefore redundant and doesn&amp;#39;t need to be stored. This means that object pointer fields and integer fields can be reduced from 64 to 32 bits.&lt;/p&gt;&lt;p&gt;We still need 64 bit fields for some fields like double precision floats and for the sandbox offsets of buffers, which are typically used by the script for input and output data. See below for details.&lt;/p&gt;&lt;p&gt;Integers in an uncompressed heap are stored in the high 32 bits of a 64 bit field. In the compressed heap, the top 31 bits of a 32 bit field are used. In both cases the lowest bit is set to 0 to indicate integers (as opposed to pointers or offsets).&lt;/p&gt;&lt;p&gt;Conceptually, we have two methods for compressing and decompressing, using a base address that is divisible by 4 GiB:&lt;/p&gt;\n            &lt;pre class=\&quot;language-C++\&quot;&gt;&lt;code class=\&quot;language-C++\&quot;&gt;// Decompress a 32 bit offset to a 64 bit pointer by adding a base address.\nvoid* Decompress(uint32_t offset) { return base + offset; }\n// Compress a 64 bit pointer to a 32 bit offset by discarding the high bits.\nuint32_t Compress(void* pointer) { return (intptr_t)pointer &amp;amp; 0xffffffff; }&lt;/pre&gt;&lt;/code&gt;\n            &lt;p&gt;This pointer compression feature, originally primarily designed to save memory, can be used as the basis of a sandbox.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h3 id=\&quot;from-compressed-pointers-to-the-sandbox\&quot;&gt;From compressed pointers to the sandbox&lt;/h3&gt;\n      &lt;a href=\&quot;#from-compressed-pointers-to-the-sandbox\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;The biggest 32-bit unsigned integer is about 4 billion, so the &lt;code&gt;Decompress()&lt;/code&gt; function cannot generate any pointer that is outside the range [base, base + 4Â GiB]. You could say the pointers are trapped in this area, so it is sometimes called the &lt;i&gt;pointer cage&lt;/i&gt;. V8 can reserve 4 GiB of virtual address space for the pointer cage so that only V8 objects appear in this range. By eliminating &lt;i&gt;all&lt;/i&gt; pointers from this range, and following some other strict rules, V8 can contain any memory corruption by an attacker to this cage. Even if an attacker corrupts a 32 bit offset within the cage, it is still only a 32 bit offset and can only be used to create new pointers that are still trapped within the pointer cage.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3r5H81eDvHgaPIBFw5gG6B/65ffa220f9141a81af893183a09321ac/image7.png\&quot; alt=\&quot;The buffer overflow attack from earlier no longer works because only the attacker&#39;s own data is available in the pointer cage.\&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;861\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;&lt;sup&gt;&lt;i&gt;The buffer overflow attack from earlier no longer works because only the attacker&amp;#39;s own data is available in the pointer cage.&lt;/i&gt;&lt;/sup&gt;&lt;/p&gt;&lt;p&gt;To construct the sandbox, we take the 4 GiB pointer cage and add another 4 GiB for buffers and other data structures to make the 8 GiB sandbox. This is why the buffer offsets above are 33 bits, so they can reach buffers in the second half of the sandbox (40 bits in Chromium with larger sandboxes). V8 stores these buffer offsets in the high 33 bits and shifts down by 31 bits before use, in case an attacker corrupted the low bits.&lt;/p&gt;&lt;p&gt;Cloudflare Workers have made use of compressed pointers in V8 for a while, but for us to get the full power of the sandbox we had to make some changes. Until recently, all isolates in a process had to be one single sandbox if you were using the sandboxed configuration of V8. This would have limited the total size of all V8 heaps to be less than 4 GiB, far too little for our architecture, which relies on serving 1000s of scripts at once.&lt;/p&gt;&lt;p&gt;That&amp;#39;s why we commissioned &lt;a href=\&quot;https://www.igalia.com/\&quot;&gt;&lt;u&gt;Igalia&lt;/u&gt;&lt;/a&gt; to add&lt;a href=\&quot;https://dbezhetskov.dev/multi-sandboxes/\&quot;&gt;&lt;u&gt; isolate groups&lt;/u&gt;&lt;/a&gt; to V8. Each isolate group has its own sandbox and can have 1 or more isolates within it. Building on this change we have been able to start using the sandbox, eliminating a whole class of potential security issues in one stroke. Although we can place multiple isolates in the same sandbox, we are currently only putting a single isolate in each sandbox.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/3jwaGI8xIAC6755vw2BWfE/d8b0cd5b36dbe8b5e628c62ef7f3d474/image2.png\&quot; alt=\&quot;The layout of the sandbox. In the sandbox there can be more than one isolate, but all their heap pages must be in the pointer cage: the first 4 GiB of the sandbox. Instead of pointers between the objects, we use 32 bit offsets. The offsets for the buffers are 33 bits, so they can reach the whole sandbox, but not outside it.\&quot; class=\&quot;kg-image\&quot; width=\&quot;1094\&quot; height=\&quot;774\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;&lt;sup&gt;&lt;i&gt;The layout of the sandbox. In the sandbox there can be more than one isolate, but all their heap pages must be in the pointer cage: the first 4 GiB of the sandbox. Instead of pointers between the objects, we use 32 bit offsets. The offsets for the buffers are 33 bits, so they can reach the whole sandbox, but not outside it.&lt;/i&gt;&lt;/sup&gt;&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;virtual-memory-isnt-infinite-theres-a-lot-going-on-in-a-linux-process\&quot;&gt;Virtual memory isn&amp;#39;t infinite, there&amp;#39;s a lot going on in a Linux process&lt;/h2&gt;\n      &lt;a href=\&quot;#virtual-memory-isnt-infinite-theres-a-lot-going-on-in-a-linux-process\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;At this point, we were not quite done, though. Each sandbox reserves 8 GiB of space in the virtual memory map of the process, and it must be 4 GiB aligned &lt;a href=\&quot;https://v8.dev/blog/pointer-compression\&quot;&gt;&lt;u&gt;for efficiency&lt;/u&gt;&lt;/a&gt;. It uses much less physical memory, but the sandbox mechanism requires this much virtual space for its security properties. This presents us with a problem, since a Linux process &amp;#39;only&amp;#39; has 128 TiB of virtual address space in a 4-level page table (another 128 TiB are reserved for the kernel, not available to user space).&lt;/p&gt;&lt;p&gt;At Cloudflare, we want to run Workers as efficiently as possible to keep costs and prices down, and to offer a generous free tier. That means that on each machine we have so many isolates running (one per sandbox) that it becomes hard to place them all in a 128 TiB space.&lt;/p&gt;&lt;p&gt;Knowing this, we have to place the sandboxes carefully in memory. Unfortunately, the Linux syscall, &lt;a href=\&quot;https://man7.org/linux/man-pages/man2/mmap.2.html\&quot;&gt;&lt;u&gt;mmap&lt;/u&gt;&lt;/a&gt;, does not allow us to specify the alignment of an allocation unless you can guess a free location to request. To get an 8 GiB area that is 4 GiB aligned, we have to ask for 12 GiB, then find the aligned 8 GiB area that must exist within that, and return the unused (hatched) edges to the OS:&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7Dqey3y5ZsPugD3pyRpQUY/cdadceeb96dbb01a2062dc98c7c554bc/image6.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;266\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;If we allow the Linux kernel to place sandboxes randomly, we end up with a layout like this with gaps. Especially after running for a while, there can be both 8 GiB and 4 GiB gaps between sandboxes:&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6oaIPZnjaJrLYoFK6v03oI/6c53895f1151d70f71511d8cdfa35f00/image3.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;417\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;Sadly, because of our 12 GiB alignment trick, we can&amp;#39;t even make use of the 8 GiB gaps. If we ask the OS for 12 GiB, it will never give us a gap like the 8 GiB gap between the green and blue sandboxes above. In addition, there are a host of other things going on in the virtual address space of a Linux process: the malloc implementation may want to grab pages at particular addresses, the executable and libraries are mapped at a random location by ASLR, and V8 has allocations outside the sandbox.&lt;/p&gt;&lt;p&gt;The latest generation of x64 CPUs supports a much bigger address space, which solves both problems, and Linux kernels are able to make use of the extra bits with &lt;a href=\&quot;https://en.wikipedia.org/wiki/Intel_5-level_paging\&quot;&gt;&lt;u&gt;five level page tables&lt;/u&gt;&lt;/a&gt;. A process has to &lt;a href=\&quot;https://lwn.net/Articles/717293/\&quot;&gt;&lt;u&gt;opt into this&lt;/u&gt;&lt;/a&gt;, which is done by a single mmap call suggesting an address outside the 47 bit area. The reason this needs an opt-in is that some programs can&amp;#39;t cope with such high addresses. Curiously, V8 is one of them.&lt;/p&gt;&lt;p&gt;This isn&amp;#39;t hard to fix in V8, but not all of our fleet has been upgraded yet to have the necessary hardware. So for now, we need a solution that works with the existing hardware. We have modified V8 to be able to grab huge memory areas and then use &lt;a href=\&quot;https://man7.org/linux/man-pages/man2/mprotect.2.html\&quot;&gt;&lt;u&gt;mprotect syscalls&lt;/u&gt;&lt;/a&gt; to create tightly packed 8 GiB spaces for sandboxes, bypassing the inflexible mmap API.&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7kPgAWxoR7nDsZHUOBsNMp/15e7b2a1aac827acfce8b0d614e44cde/image8.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;612\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;putting-it-all-together\&quot;&gt;Putting it all together&lt;/h2&gt;\n      &lt;a href=\&quot;#putting-it-all-together\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;Taking control of the sandbox placement like this actually gives us a security benefit, but first we need to describe a particular threat model.&lt;/p&gt;&lt;p&gt;We assume for the purposes of this threat model that an attacker has an arbitrary way to corrupt data within the sandbox. This is historically the first step in many V8 exploits. So much so that there is a &lt;a href=\&quot;https://bughunters.google.com/about/rules/chrome-friends/5745167867576320/chrome-vulnerability-reward-program-rules#v8-sandbox-bypass-rewards\&quot;&gt;&lt;u&gt;special tier&lt;/u&gt;&lt;/a&gt; in Google&amp;#39;s V8 bug bounty program where you may &lt;i&gt;assume&lt;/i&gt; you have this ability to corrupt memory, and they will pay out if you can leverage that to a more serious exploit.&lt;/p&gt;&lt;p&gt;However, we assume that the attacker does not have the ability to execute arbitrary machine code. If they did, they could &lt;a href=\&quot;https://www.usenix.org/system/files/sec20fall_connor_prepub.pdf\&quot;&gt;&lt;u&gt;disable memory protection keys&lt;/u&gt;&lt;/a&gt;. Having access to the in-sandbox memory only gives the attacker access to their own data. So the attacker must attempt to escalate, by corrupting data inside the sandbox to access data outside the sandbox.&lt;/p&gt;&lt;p&gt;You will recall that the compressed, sandboxed V8 heap only contains 32 bit offsets. Therefore, no corruption there can reach outside the pointer cage. But there are also arrays in the sandbox â vectors of data with a given size that can be accessed with an index. In our threat model, the attacker can modify the sizes recorded for those arrays and the indexes used to access elements in the arrays. That means an attacker could potentially turn an array in the sandbox into a tool for accessing memory incorrectly. For this reason, the V8 sandbox normally has &lt;i&gt;guard regions&lt;/i&gt; around it: These are 32 GiB virtual address ranges that have no virtual-to-physical address mappings. This helps guard against the worst case scenario: Indexing an array where the elements are 8 bytes in size (e.g. an array of double precision floats) using a maximal 32 bit index. Such an access could reach a distance of up to 32 GiB outside the sandbox: 8 times the maximal 32 bit index of four billion.&lt;/p&gt;&lt;p&gt;We want such accesses to trigger an alarm, rather than letting an attacker access nearby memory.Â  This happens automatically with guard regions, but we don&amp;#39;t have space for conventional 32 GiB guard regions around every sandbox.&lt;/p&gt;&lt;p&gt;Instead of using conventional guard regions, we can make use of memory protection keys. By carefully controlling which isolate group uses which key, we can ensure that no sandbox within 32 GiB has the same protection key. Essentially, the sandboxes are acting as each other&amp;#39;s guard regions, protected by memory protection keys. Now we only need a wasted 32 GiB guard region at the start and end of the huge packed sandbox areas.\n&lt;/p&gt;\n          &lt;figure class=\&quot;kg-card kg-image-card\&quot;&gt;\n          &lt;Image src=\&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/53MPs8P84ayqEiTXh7gV5O/88104f74f1d51dbdda8d987e1c7df3aa/image10.png\&quot; alt=\&quot;\&quot; class=\&quot;kg-image\&quot; width=\&quot;1999\&quot; height=\&quot;493\&quot; loading=\&quot;lazy\&quot;/&gt;\n          &lt;/figure&gt;&lt;p&gt;With the new sandbox layout, we use strictly rotating memory protection keys. Because we are not using randomly chosen memory protection keys, for this threat model the 92% problem described above disappears. Any in-sandbox security issue is unable to reach a sandbox with the same memory protection key. In the diagram, we show that there is no memory within 32 GiB of a given sandbox that has the same memory protection key. Any attempt to access memory within 32 GiB of a sandbox will trigger an alarm, just like it would with unmapped guard regions.&lt;/p&gt;\n    &lt;div class=\&quot;flex anchor relative\&quot;&gt;\n      &lt;h2 id=\&quot;the-future\&quot;&gt;The future&lt;/h2&gt;\n      &lt;a href=\&quot;#the-future\&quot; aria-hidden=\&quot;true\&quot; class=\&quot;relative sm:absolute sm:-left-5\&quot;&gt;\n        &lt;svg width=\&quot;16\&quot; height=\&quot;16\&quot; viewBox=\&quot;0 0 24 24\&quot;&gt;&lt;path fill=\&quot;currentcolor\&quot; d=\&quot;m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z\&quot;&gt;&lt;/path&gt;&lt;/svg&gt;\n      &lt;/a&gt;\n    &lt;/div&gt;\n    &lt;p&gt;In a way, this whole blog post is about things our customers &lt;i&gt;don&amp;#39;t&lt;/i&gt; need to do. They don&amp;#39;t need to upgrade their server software to get the latest patches, we do that for them. They don&amp;#39;t need to worry whether they are using the most secure or efficient configuration. So there&amp;#39;s no call to action here, except perhaps to sleep easy.&lt;/p&gt;&lt;p&gt;However, if you find work like this interesting, and especially if you have experience with the implementation of V8 or similar language runtimes, then you should consider coming to work for us. &lt;a href=\&quot;https://job-boards.greenhouse.io/cloudflare/jobs/6718312?gh_jid=6718312\&quot;&gt;&lt;u&gt;We are recruiting both in the US and in Europe&lt;/u&gt;&lt;/a&gt;. It&amp;#39;s a great place to work, and Cloudflare is going from strength to strength.&lt;/p&gt;&quot;],&quot;published_at&quot;:[0,&quot;2025-09-25T14:00+00:00&quot;],&quot;updated_at&quot;:[0,&quot;2025-09-25T13:27:51.318Z&quot;],&quot;feature_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7sgyEKfivxzLgwks0Yjraq/90d3c84bbff05e49a5b2c3564ab7bec7/Hero.png&quot;],&quot;tags&quot;:[1,[[0,{&quot;id&quot;:[0,&quot;6hbkItfupogJP3aRDAq6v8&quot;],&quot;name&quot;:[0,&quot;Cloudflare Workers&quot;],&quot;slug&quot;:[0,&quot;workers&quot;]}],[0,{&quot;id&quot;:[0,&quot;1Cv5JjXzKWKEA10JdYbXu1&quot;],&quot;name&quot;:[0,&quot;Birthday Week&quot;],&quot;slug&quot;:[0,&quot;birthday-week&quot;]}],[0,{&quot;id&quot;:[0,&quot;5kIxDMJCg3PXQxVINDL0Cw&quot;],&quot;name&quot;:[0,&quot;Attacks&quot;],&quot;slug&quot;:[0,&quot;attacks&quot;]}],[0,{&quot;id&quot;:[0,&quot;4ggKJG4JUzqG9FpAPIxwij&quot;],&quot;name&quot;:[0,&quot;Engineering&quot;],&quot;slug&quot;:[0,&quot;engineering&quot;]}],[0,{&quot;id&quot;:[0,&quot;383iv0UQ6Lp0GZwOAxGq2p&quot;],&quot;name&quot;:[0,&quot;Linux&quot;],&quot;slug&quot;:[0,&quot;linux&quot;]}],[0,{&quot;id&quot;:[0,&quot;7BhREQYSSCo9INFzIXH0G0&quot;],&quot;name&quot;:[0,&quot;Malicious JavaScript&quot;],&quot;slug&quot;:[0,&quot;malicious-javascript&quot;]}],[0,{&quot;id&quot;:[0,&quot;6Mp7ouACN2rT3YjL1xaXJx&quot;],&quot;name&quot;:[0,&quot;Security&quot;],&quot;slug&quot;:[0,&quot;security&quot;]}],[0,{&quot;id&quot;:[0,&quot;2pFyOCtANFB5qS6nbtQbVp&quot;],&quot;name&quot;:[0,&quot;Vulnerabilities&quot;],&quot;slug&quot;:[0,&quot;vulnerabilities&quot;]}]]],&quot;relatedTags&quot;:[0],&quot;authors&quot;:[1,[[0,{&quot;name&quot;:[0,&quot;Erik Corry&quot;],&quot;slug&quot;:[0,&quot;erik-corry&quot;],&quot;bio&quot;:[0],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/6gfuhEABjcBkfIQUrIjdkD/7233fd2150ea5d3107e6e8e725405ac2/Erik_Corry&quot;],&quot;location&quot;:[0],&quot;website&quot;:[0],&quot;twitter&quot;:[0],&quot;facebook&quot;:[0],&quot;publiclyIndex&quot;:[0,true]}],[0,{&quot;name&quot;:[0,&quot;Ketan Gupta&quot;],&quot;slug&quot;:[0,&quot;ketan-gupta&quot;],&quot;bio&quot;:[0],&quot;profile_image&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/4HNGL8tqmoWI8yZJEEynzY/4dc4778dc00d47cc7da853c61c224fd7/Ketan_Gupta.webp&quot;],&quot;location&quot;:[0],&quot;website&quot;:[0],&quot;twitter&quot;:[0],&quot;facebook&quot;:[0],&quot;publiclyIndex&quot;:[0,true]}]]],&quot;meta_description&quot;:[0,&quot;Cloudflare Workers are constantly being updated to be as secure and efficient as possible. We are further hardening Workers by making use of the latest software and hardware features. We use defense-in-depth, including V8 sandboxes and the CPU&#39;s memory protection keys, to keep your data safe.&quot;],&quot;primary_author&quot;:[0,{}],&quot;localeList&quot;:[0,{&quot;name&quot;:[0,&quot;blog-english-only&quot;],&quot;enUS&quot;:[0,&quot;English for Locale&quot;],&quot;zhCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhHansCN&quot;:[0,&quot;No Page for Locale&quot;],&quot;zhTW&quot;:[0,&quot;No Page for Locale&quot;],&quot;frFR&quot;:[0,&quot;No Page for Locale&quot;],&quot;deDE&quot;:[0,&quot;No Page for Locale&quot;],&quot;itIT&quot;:[0,&quot;No Page for Locale&quot;],&quot;jaJP&quot;:[0,&quot;No Page for Locale&quot;],&quot;koKR&quot;:[0,&quot;No Page for Locale&quot;],&quot;ptBR&quot;:[0,&quot;No Page for Locale&quot;],&quot;esLA&quot;:[0,&quot;No Page for Locale&quot;],&quot;esES&quot;:[0,&quot;No Page for Locale&quot;],&quot;enAU&quot;:[0,&quot;No Page for Locale&quot;],&quot;enCA&quot;:[0,&quot;No Page for Locale&quot;],&quot;enIN&quot;:[0,&quot;No Page for Locale&quot;],&quot;enGB&quot;:[0,&quot;No Page for Locale&quot;],&quot;idID&quot;:[0,&quot;No Page for Locale&quot;],&quot;ruRU&quot;:[0,&quot;No Page for Locale&quot;],&quot;svSE&quot;:[0,&quot;No Page for Locale&quot;],&quot;viVN&quot;:[0,&quot;No Page for Locale&quot;],&quot;plPL&quot;:[0,&quot;No Page for Locale&quot;],&quot;arAR&quot;:[0,&quot;No Page for Locale&quot;],&quot;nlNL&quot;:[0,&quot;No Page for Locale&quot;],&quot;thTH&quot;:[0,&quot;No Page for Locale&quot;],&quot;trTR&quot;:[0,&quot;No Page for Locale&quot;],&quot;heIL&quot;:[0,&quot;No Page for Locale&quot;],&quot;lvLV&quot;:[0,&quot;No Page for Locale&quot;],&quot;etEE&quot;:[0,&quot;No Page for Locale&quot;],&quot;ltLT&quot;:[0,&quot;No Page for Locale&quot;]}],&quot;url&quot;:[0,&quot;https://blog.cloudflare.com/safe-in-the-sandbox-security-hardening-for-cloudflare-workers&quot;],&quot;metadata&quot;:[0,{&quot;title&quot;:[0,&quot;Safe in the sandbox: security hardening for Cloudflare Workers&quot;],&quot;description&quot;:[0,&quot;Cloudflare Workers are constantly being updated to be as secure and efficient as possible. We are further hardening Workers by making use of the latest software and hardware features. We use defense-in-depth, including V8 sandboxes and the CPU&#39;s memory protection keys, to keep your data safe.&quot;],&quot;imgPreview&quot;:[0,&quot;https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1vtdPfgEPYHJkjJfX8KN3b/7b13fffc98ce48628ebf3a5b68272ac2/OG_Share_2024_-_2025-09-25T120447.574.png&quot;]}],&quot;publicly_index&quot;:[0,true]}]]],&quot;locale&quot;:[0,&quot;en-us&quot;],&quot;translations&quot;:[0,{&quot;posts.by&quot;:[0,&quot;By&quot;],&quot;footer.gdpr&quot;:[0,&quot;GDPR&quot;],&quot;lang_blurb1&quot;:[0,&quot;This post is also available in {lang1}.&quot;],&quot;lang_blurb2&quot;:[0,&quot;This post is also available in {lang1} and {lang2}.&quot;],&quot;lang_blurb3&quot;:[0,&quot;This post is also available in {lang1}, {lang2} and {lang3}.&quot;],&quot;footer.press&quot;:[0,&quot;Press&quot;],&quot;header.title&quot;:[0,&quot;The Cloudflare Blog&quot;],&quot;search.clear&quot;:[0,&quot;Clear&quot;],&quot;search.filter&quot;:[0,&quot;Filter&quot;],&quot;search.source&quot;:[0,&quot;Source&quot;],&quot;footer.careers&quot;:[0,&quot;Careers&quot;],&quot;footer.company&quot;:[0,&quot;Company&quot;],&quot;footer.support&quot;:[0,&quot;Support&quot;],&quot;footer.the_net&quot;:[0,&quot;theNet&quot;],&quot;search.filters&quot;:[0,&quot;Filters&quot;],&quot;footer.our_team&quot;:[0,&quot;Our team&quot;],&quot;footer.webinars&quot;:[0,&quot;Webinars&quot;],&quot;page.more_posts&quot;:[0,&quot;More posts&quot;],&quot;posts.time_read&quot;:[0,&quot;{time} min read&quot;],&quot;search.language&quot;:[0,&quot;Language&quot;],&quot;footer.community&quot;:[0,&quot;Community&quot;],&quot;footer.resources&quot;:[0,&quot;Resources&quot;],&quot;footer.solutions&quot;:[0,&quot;Solutions&quot;],&quot;footer.trademark&quot;:[0,&quot;Trademark&quot;],&quot;header.subscribe&quot;:[0,&quot;Subscribe&quot;],&quot;footer.compliance&quot;:[0,&quot;Compliance&quot;],&quot;footer.free_plans&quot;:[0,&quot;Free plans&quot;],&quot;footer.impact_ESG&quot;:[0,&quot;Impact/ESG&quot;],&quot;posts.follow_on_X&quot;:[0,&quot;Follow on X&quot;],&quot;footer.help_center&quot;:[0,&quot;Help center&quot;],&quot;footer.network_map&quot;:[0,&quot;Network Map&quot;],&quot;header.please_wait&quot;:[0,&quot;Please Wait&quot;],&quot;page.related_posts&quot;:[0,&quot;Related posts&quot;],&quot;search.result_stat&quot;:[0,&quot;Results &lt;strong&gt;{search_range}&lt;/strong&gt; of &lt;strong&gt;{search_total}&lt;/strong&gt; for &lt;strong&gt;{search_keyword}&lt;/strong&gt;&quot;],&quot;footer.case_studies&quot;:[0,&quot;Case Studies&quot;],&quot;footer.connect_2024&quot;:[0,&quot;Connect 2024&quot;],&quot;footer.terms_of_use&quot;:[0,&quot;Terms of Use&quot;],&quot;footer.white_papers&quot;:[0,&quot;White Papers&quot;],&quot;footer.cloudflare_tv&quot;:[0,&quot;Cloudflare TV&quot;],&quot;footer.community_hub&quot;:[0,&quot;Community Hub&quot;],&quot;footer.compare_plans&quot;:[0,&quot;Compare plans&quot;],&quot;footer.contact_sales&quot;:[0,&quot;Contact Sales&quot;],&quot;header.contact_sales&quot;:[0,&quot;Contact Sales&quot;],&quot;header.email_address&quot;:[0,&quot;Email Address&quot;],&quot;page.error.not_found&quot;:[0,&quot;Page not found&quot;],&quot;footer.developer_docs&quot;:[0,&quot;Developer docs&quot;],&quot;footer.privacy_policy&quot;:[0,&quot;Privacy Policy&quot;],&quot;footer.request_a_demo&quot;:[0,&quot;Request a demo&quot;],&quot;page.continue_reading&quot;:[0,&quot;Continue reading&quot;],&quot;footer.analysts_report&quot;:[0,&quot;Analyst reports&quot;],&quot;footer.for_enterprises&quot;:[0,&quot;For enterprises&quot;],&quot;footer.getting_started&quot;:[0,&quot;Getting Started&quot;],&quot;footer.learning_center&quot;:[0,&quot;Learning Center&quot;],&quot;footer.project_galileo&quot;:[0,&quot;Project Galileo&quot;],&quot;pagination.newer_posts&quot;:[0,&quot;Newer Posts&quot;],&quot;pagination.older_posts&quot;:[0,&quot;Older Posts&quot;],&quot;posts.social_buttons.x&quot;:[0,&quot;Discuss on X&quot;],&quot;search.icon_aria_label&quot;:[0,&quot;Search&quot;],&quot;search.source_location&quot;:[0,&quot;Source/Location&quot;],&quot;footer.about_cloudflare&quot;:[0,&quot;About Cloudflare&quot;],&quot;footer.athenian_project&quot;:[0,&quot;Athenian Project&quot;],&quot;footer.become_a_partner&quot;:[0,&quot;Become a partner&quot;],&quot;footer.cloudflare_radar&quot;:[0,&quot;Cloudflare Radar&quot;],&quot;footer.network_services&quot;:[0,&quot;Network services&quot;],&quot;footer.trust_and_safety&quot;:[0,&quot;Trust &amp; Safety&quot;],&quot;header.get_started_free&quot;:[0,&quot;Get Started Free&quot;],&quot;page.search.placeholder&quot;:[0,&quot;Search Cloudflare&quot;],&quot;footer.cloudflare_status&quot;:[0,&quot;Cloudflare Status&quot;],&quot;footer.cookie_preference&quot;:[0,&quot;Cookie Preferences&quot;],&quot;header.valid_email_error&quot;:[0,&quot;Must be valid email.&quot;],&quot;search.result_stat_empty&quot;:[0,&quot;Results &lt;strong&gt;{search_range}&lt;/strong&gt; of &lt;strong&gt;{search_total}&lt;/strong&gt;&quot;],&quot;footer.connectivity_cloud&quot;:[0,&quot;Connectivity cloud&quot;],&quot;footer.developer_services&quot;:[0,&quot;Developer services&quot;],&quot;footer.investor_relations&quot;:[0,&quot;Investor relations&quot;],&quot;page.not_found.error_code&quot;:[0,&quot;Error Code: 404&quot;],&quot;search.autocomplete_title&quot;:[0,&quot;Insert a query. Press enter to send&quot;],&quot;footer.logos_and_press_kit&quot;:[0,&quot;Logos &amp; press kit&quot;],&quot;footer.application_services&quot;:[0,&quot;Application services&quot;],&quot;footer.get_a_recommendation&quot;:[0,&quot;Get a recommendation&quot;],&quot;posts.social_buttons.reddit&quot;:[0,&quot;Discuss on Reddit&quot;],&quot;footer.sse_and_sase_services&quot;:[0,&quot;SSE and SASE services&quot;],&quot;page.not_found.outdated_link&quot;:[0,&quot;You may have used an outdated link, or you may have typed the address incorrectly.&quot;],&quot;footer.report_security_issues&quot;:[0,&quot;Report Security Issues&quot;],&quot;page.error.error_message_page&quot;:[0,&quot;Sorry, we can&#39;t find the page you are looking for.&quot;],&quot;header.subscribe_notifications&quot;:[0,&quot;Subscribe to receive notifications of new posts:&quot;],&quot;footer.cloudflare_for_campaigns&quot;:[0,&quot;Cloudflare for Campaigns&quot;],&quot;header.subscription_confimation&quot;:[0,&quot;Subscription confirmed. Thank you for subscribing!&quot;],&quot;posts.social_buttons.hackernews&quot;:[0,&quot;Discuss on Hacker News&quot;],&quot;footer.diversity_equity_inclusion&quot;:[0,&quot;Diversity, equity &amp; inclusion&quot;],&quot;footer.critical_infrastructure_defense_project&quot;:[0,&quot;Critical Infrastructure Defense Project&quot;]}],&quot;localesAvailable&quot;:[1,[]],&quot;footerBlurb&quot;:[0,&quot;Cloudflare&#39;s connectivity cloud protects &lt;a target=&#39;_blank&#39; href=&#39;https://www.cloudflare.com/network-services/&#39; rel=&#39;noreferrer&#39;&gt;entire corporate networks&lt;/a&gt;, helps customers build &lt;a target=&#39;_blank&#39; href=&#39;https://workers.cloudflare.com/&#39; rel=&#39;noreferrer&#39;&gt;Internet-scale applications efficiently&lt;/a&gt;, accelerates any &lt;a target=&#39;_blank&#39; href=&#39;https://www.cloudflare.com/performance/accelerate-internet-applications/&#39; rel=&#39;noreferrer&#39;&gt;website or Internet application&lt;/a&gt;, &lt;a target=&#39;_blank&#39; href=&#39;https://www.cloudflare.com/ddos/&#39; rel=&#39;noreferrer&#39;&gt;wards off DDoS attacks&lt;/a&gt;, keeps &lt;a target=&#39;_blank&#39; href=&#39;https://www.cloudflare.com/application-security/&#39; rel=&#39;noreferrer&#39;&gt;hackers at bay&lt;/a&gt;, and can help you on &lt;a target=&#39;_blank&#39; href=&#39;https://www.cloudflare.com/products/zero-trust/&#39; rel=&#39;noreferrer&#39;&gt;your journey to Zero Trust&lt;/a&gt;.&lt;br/&gt;&lt;br/&gt;Visit &lt;a target=&#39;_blank&#39; href=&#39;https://one.one.one.one/&#39; rel=&#39;noreferrer&#39;&gt;1.1.1.1&lt;/a&gt; from any device to get started with our free app that makes your Internet faster and safer.&lt;br/&gt;&lt;br/&gt;To learn more about our mission to help build a better Internet, &lt;a target=&#39;_blank&#39; href=&#39;https://www.cloudflare.com/learning/what-is-cloudflare/&#39; rel=&#39;noreferrer&#39;&gt;start here&lt;/a&gt;. If you&amp;apos;re looking for a new career direction, check out &lt;a target=&#39;_blank&#39; href=&#39;http://www.cloudflare.com/careers&#39; rel=&#39;noreferrer&#39;&gt;our open positions&lt;/a&gt;.&quot;]}" ssr client="load" opts="{&quot;name&quot;:&quot;Post&quot;,&quot;value&quot;:true}" await-children><main id="post" class="flex flex-row flex-wrap items-center justify-center pt2 pt4-l"><article class="post-full mw-100 ph3 ph0-l fs-20px"><h1 class="f6 f7-l fw4 gray1 pt1 pt3-l mb1">Improving the trustworthiness of Javascript on the Web</h1><p class="f3 fw5 gray5 db di-l mt2">2025-10-16</p><ul class="author-lists flex pl0 mt4"><li class="list flex items-center pr2 mb1-ns"><a href="/author/michael-rosenberg/" class="static-avatar pr1"><img class="author-profile-image br-100 mr2" src="https://blog.cloudflare.com/cdn-cgi/image/format=auto,dpr=3,width=64,height=64,gravity=face,fit=crop,zoom=0.5/https://cf-assets.www.cloudflare.com/zkvhlag99gkb/65QlcKadfDOXGKGv78Y4Cz/b7562dd249bffe7e919d99a6b0cb63b3/Michael_Rosenberg.jpg" alt="Michael Rosenberg" width="62" height="62"/></a><div class="author-name-tooltip"><a href="/author/michael-rosenberg/" class="fw4 f3 no-underline black mr3">Michael Rosenberg</a></div></li></ul><section class="post-full-content"><div class="mb2 gray5">19 min read</div><img class="mr2" src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/1ycccYkFLGh6O5X82vi46F/c39a22d072a2b8f731315b76a672ff27/BLOG-2875_1.png" alt=""/><div class="post-content lh-copy gray1"><p>The web is the most powerful application platform in existence. As long as you have the <a href="https://developer.mozilla.org/en-US/docs/Web/API"><u>right API</u></a>, you can safely run anything you want in a browser.</p><p>Wellâ¦ anything but cryptography.</p><p>It is as true today as it was in 2011 that <a href="https://web.archive.org/web/20200731144044/https://www.nccgroup.com/us/about-us/newsroom-and-events/blog/2011/august/javascript-cryptography-considered-harmful/"><u>Javascript cryptography is Considered Harmful</u></a>. The main problem is code distribution. Consider an end-to-end-encrypted messaging web application. The application generates <a href="https://www.cloudflare.com/learning/ssl/what-is-a-cryptographic-key/"><u>cryptographic keys</u></a> in the clientâs browser that lets users view and send <a href="https://en.wikipedia.org/wiki/End-to-end_encryption"><u>end-to-end encrypted</u></a> messages to each other. If the application is compromised, what would stop the malicious actor from simply modifying their Javascript to exfiltrate messages?</p><p>It is interesting to note that smartphone apps donât have this issue. This is because app stores do a lot of heavy lifting to provide security for the app ecosystem. Specifically, they provide <b>integrity</b>, ensuring that apps being delivered are not tampered with, <b>consistency</b>, ensuring all users get the same app, and <b>transparency</b>, ensuring that the record of versions of an app is truthful and publicly visible.</p><p>It would be nice if we could get these properties for our end-to-end encrypted web application, and the web as a whole, without requiring a single central authority like an app store. Further, such a system would benefit all in-browser uses of cryptography, not just end-to-end-encrypted apps. For example, many web-based confidential <a href="https://www.cloudflare.com/learning/ai/what-is-large-language-model/"><u>LLMs</u></a>, cryptocurrency wallets, and voting systems use in-browser Javascript cryptography for the last step of their verification chains.</p><p>In this post, we will provide an early look at such a system, called <a href="https://github.com/beurdouche/explainers/blob/main/waict-explainer.md"><u>Web Application Integrity, Consistency, and Transparency</u></a> (WAICT) that we have helped author. WAICT is a <a href="https://www.w3.org/"><u>W3C</u></a>-backed effort among browser vendors, cloud providers, and encrypted communication developers to bring stronger security guarantees to the entire web. We will discuss the problem we need to solve, and build up to a solution resembling the <a href="https://github.com/rozbb/draft-waict-transparency"><u>current transparency specification draft</u></a>. We hope to build even wider consensus on the solution design in the near future.</p>
    <div class="flex anchor relative">
      <h2 id="defining-the-web-application">Defining the Web Application</h2>
      <a href="#defining-the-web-application" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>In order to talk about security guarantees of a web application, it is first necessary to define precisely what the application <i>is</i>. A smartphone application is essentially just a zip file. But a website is made up of interlinked assets, including HTML, Javascript, WASM, and CSS, that can each be locally or externally hosted. Further, if any asset changes, it could drastically change the functioning of the application. A coherent definition of an application thus requires the application to commit to precisely the assets it loads. This is done using integrity features, which we describe now.</p>
    <div class="flex anchor relative">
      <h3 id="subresource-integrity">Subresource Integrity</h3>
      <a href="#subresource-integrity" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>An important building block for defining a single coherent application is <b>subresource integrity</b> (SRI). SRI is a feature built into most browsers that permits a website to specify the cryptographic hash of external resources, e.g.,</p>
            <pre class="language-javascript"><code class="language-javascript">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.13.7/underscore-min.js&quot; integrity=&quot;sha512-dvWGkLATSdw5qWb2qozZBRKJ80Omy2YN/aF3wTUVC5+D1eqbA+TjWpPpoj8vorK5xGLMa2ZqIeWCpDZP/+pQGQ==&quot;&gt;&lt;/script&gt;</pre></code>
            <p>This causes the browser to fetch <code>underscore.js</code> from <code>cdnjs.cloudflare.com</code> and verify that its SHA-512 hash matches the given hash in the tag. If they match, the script is loaded. If not, an error is thrown and nothing is executed.</p><p>If every external script, stylesheet, etc. on a page comes with an SRI integrity attribute, then the whole page is defined by just its HTML. This is close to what we want, but a web application can consist of many pages, and there is no way for a page to enforce the hash of the pages it links to.</p>
    <div class="flex anchor relative">
      <h3 id="integrity-manifest">Integrity Manifest</h3>
      <a href="#integrity-manifest" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>We would like to have a way of enforcing integrity on an entire site, i.e., every asset under a domain. For this, WAICT defines an <b>integrity manifest</b>, a configuration file that websites can provide to clients. One important item in the manifest is the <b>asset hashes dictionary</b>, mapping a hash belonging to an asset that the browser might load from that domain, to the path of that asset. Assets that may occur at any path, e.g., an error page, map to the empty string:</p>
            <pre class="language-JSON"><code class="language-JSON">&quot;hashes&quot;: {
&quot;81db308d0df59b74d4a9bd25c546f25ec0fdb15a8d6d530c07a89344ae8eeb02&quot;: &quot;/assets/js/main.js&quot;,
&quot;fbd1d07879e672fd4557a2fa1bb2e435d88eac072f8903020a18672d5eddfb7c&quot;: &quot;/index.html&quot;,
&quot;5e737a67c38189a01f73040b06b4a0393b7ea71c86cf73744914bbb0cf0062eb&quot;: &quot;/vendored/main.css&quot;,
&quot;684ad58287ff2d085927cb1544c7d685ace897b6b25d33e46d2ec46a355b1f0e&quot;: &quot;&quot;,
&quot;f802517f1b2406e308599ca6f4c02d2ae28bb53ff2a5dbcddb538391cb6ad56a&quot;: &quot;&quot;
}
</pre></code>
            <p>The other main component of the manifest is the <b>integrity policy</b>, which tells the browser which data types are being enforced and how strictly. For example, the policy in the manifest below will:</p><ol><li><p>Reject any script before running it, if itâs missing an SRI tag and doesnât appear in the hashes</p></li><li><p>Reject any WASM possibly after running it, if itâs missing an SRI tag and doesnât appear in hashes</p></li></ol>
            <pre class="language-JSON"><code class="language-JSON">&quot;integrity-policy&quot;: &quot;blocked-destinations=(script), checked-destinations=(wasm)&quot;</pre></code>
            <p>Put together, these make up the integrity manifest:</p>
            <pre class="language-JSON"><code class="language-JSON">&quot;manifest&quot;: {
  &quot;version&quot;: 1,
  &quot;integrity-policy&quot;: ...,
  &quot;hashes&quot;: ...,
}
</pre></code>
            <p>Thus, when both SRI and integrity manifests are used, the entire site and its interpretation by the browser is uniquely determined by the hash of the integrity manifest. This is exactly what we wanted. We have distilled the problem of endowing authenticity, consistent distribution, etc. to a web application to one of endowing the same properties to a single hash.</p>
    <div class="flex anchor relative">
      <h2 id="achieving-transparency">Achieving Transparency</h2>
      <a href="#achieving-transparency" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>Recall, a transparent web application is one whose code is stored in a publicly accessible, append-only log. This is helpful in two ways: 1) if a user is served malicious code and they learn about it, there is a public record of the code they ran, and so they can prove it to external parties, and 2) if a user is served malicious code and they donât learn about it, there is still a chance that an external auditor may comb through the historical web application code and find the malicious code anyway. Of course, transparency does not help detect malicious code or even prevent its distribution, but it at least makes it <i>publicly auditable</i>.</p><p>Now that we have a single hash that commits to an entire websiteâs contents, we can talk about ensuring that that hash ends up in a public log. We have several important requirements here:</p><ol><li><p><b>Do not break existing sites.</b> This one is a given. Whatever system gets deployed, it should not interfere with the correct functioning of existing websites. Participation in transparency should be strictly opt-in.</p></li><li><p><b>No added round trips.</b> Transparency should not cause extra network round trips between the client and the server. Otherwise there will be a network latency penalty for users who want transparency.</p></li><li><p><b>User privacy.</b> A user should not have to identify themselves to any party more than they already do. That means no connections to new third parties, and no sending identifying information to the website.</p></li><li><p><b>User statelessness.</b> A user should not have to store site-specific data. We do not want solutions that rely on storing or gossipping per-site cryptographic information.</p></li><li><p><b>Non-centralization.</b> There should not be a single point of failure in the systemâif any single party experiences downtime, the system should still be able to make progress. Similarly, there should be no single point of trustâif a user distrusts any single party, the user should still receive all the security benefits of the system.</p></li><li><p><b>Ease of opt-in.</b> The barrier of entry for transparency should be as low as possible. A site operator should be able to start logging their site cheaply and without being an expert.</p></li><li><p><b>Ease of opt-out.</b> It should be easy for a website to stop participating in transparency. Further, to avoid accidental lock-in like the <a href="https://en.wikipedia.org/wiki/HTTP_Public_Key_Pinning#Criticism_and_decline"><u>defunct HPKP spec</u></a>, it should be possible for this to happen even if all cryptographic material is lost, e.g., in the seizure or selling of a domain.</p></li><li><p><b>Opt-out is transparent.</b> As described before, because transparency is optional, it is possible for an attacker to disable the siteâs transparency, serve malicious content, then enable transparency again. We must make sure this kind of attack is detectable, i.e., the act of disabling transparency must itself be logged somewhere.</p></li><li><p><b>Monitorability.</b> A website operator should be able to efficiently monitor the transparency information being published about their website. In particular, they should not have to run a high-network-load, always-on program just to notify them if their site has been hijacked.</p></li></ol><p>With these requirements in place, we can move on to construction. We introduce a data structure that will be essential to the design.</p>
    <div class="flex anchor relative">
      <h3 id="hash-chain">Hash Chain</h3>
      <a href="#hash-chain" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>Almost everything in transparency is an append-only log, i.e., a data structure that acts like a list and has the ability to produce an <b>inclusion proof</b>, i.e., a proof that an element occurs at a particular index in the list; and a <b>consistency proof</b>, i.e., a proof that a list is an extension of a previous version of the list. A consistency proof between two lists demonstrates that no elements were modified or deleted, only added.</p><p>The simplest possible append-only log is a <b>hash chain</b>, a list-like data structure wherein each subsequent element is hashed into the running <i>chain hash</i>. The final chain hash is a succinct representation of the entire list.</p>
          <figure class="kg-card kg-image-card">
          <Image src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/5nVcIeoKTYEd0hydT9jdpj/fd90a78cba46c1893058a7ff40a42fac/BLOG-2875_2.png" alt="Two rows of three circles each. The top row (green) is shifted to the right of the bottom row (orange). Each green node has a solid line connecting it to the orange node to its bottom-left, and the green node to its left, if there is one. The orange nodes are labeled, from left to right, elem1, elem2, elem3. The green nodes are labeled, from left to right, âch1 = H(elem1)â, âch2 = H(ch1, elem2)â, and âch3 = H(ch2, elem3)â." class="kg-image" width="1424" height="820" loading="lazy"/>
          </figure><p><sub>A hash chain. The green nodes represent the </sub><sub><i>chain hash</i></sub><sub>, i.e., the hash of the element below it, concatenated with the previous chain hash. </sub></p><p>The proof structures are quite simple. To prove inclusion of the element at index i, the prover provides the chain hash before <code>i</code>, and all the elements after <code>i</code>:</p>
          <figure class="kg-card kg-image-card">
          <Image src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/7tYbCRVVTV3osE3lWs8YjG/be76d6022420ffa3d78b0180ef69bb1a/BLOG-2875_3.png" alt="Three labeled components. The first component, labeled âinclusion proofâ, is a box containing a green node labeled ch1, and two orange circles labeled elem2 and elem3, respectively. The second component, labeled âVerifier knowsâ is a box containing a single green node with a purple ring around it, labeled ch-prime-3. The third component, labeled âVerifier computesâ, is as follows. Similar to the hash chain before, there is a top row of three green nodes and a bottom row of two orange nodes. As before, there are lines connecting each green node to its left and bottom-left neighbor, but now these lines are light grey and dashed. The orange nodes are labeled elem2 and elem3. The leftmost node in the top row is labeled ch1. The remaining top row nodes are lighter green. They are labeled ch2 and ch3. Finally, separately from the rows, there is an equation, with a question mark above the equals sign.Â  On the left hand side is a copy of the light green node labeled ch3. On the right hand side is a copy of the node labeled ch-prime-3.Â " class="kg-image" width="1999" height="859" loading="lazy"/>
          </figure><p><sub>Proof of inclusion for the second element in the hash chain. The verifier knows only the final chain hash. It checks equality of the final computed chain hash with the known final chain hash. The light green nodes represent hashes that the verifier computes. </sub></p><p>Similarly, to prove consistency between the chains of size i and j, the prover provides the elements between i and j:</p>
          <figure class="kg-card kg-image-card">
          <Image src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/rR4DMJIVxNxePI6DARtFD/e9da2930043864a4add3a74b699535d6/BLOG-2875_4.png" alt="Three labeled components. The first component, labeled âconsistency proofâ, is a box containing two orange circles labeled elem2 and elem3. The next component, labeled âverifier knows,â is a box containing chain hash values ch-prime-1 and ch-prime-3, both in green with a purple ring around it. The third component, labeled âverifier computesâ is as follows. Similar to the hash chain before, there is a top row of three green nodes and a bottom row of two orange nodes. Again, all lines are grey and dashed, the orange nodes are labeled elem2 and elem3, and the two rightmost green nodes are light green and labeled ch2 and ch3. The leftmost node in the top row is now labeled ch-prime-1. Finally, as before, there is an equation comparing ch3 with ch-prime-3." class="kg-image" width="1999" height="668" loading="lazy"/>
          </figure><p><sub>Proof of consistency of the chain of size one and chain of size three. The verifier has the chain hashes from the starting and ending chains. It checks equality of the final computed chain hash with the known ending chain hash. The light green nodes represent hashes that the verifier computes. </sub></p>
    <div class="flex anchor relative">
      <h3 id="building-transparency">Building Transparency</h3>
      <a href="#building-transparency" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>We can use hash chains to build a transparency scheme for websites.</p>
    <div class="flex anchor relative">
      <h4 id="per-site-logs">Per-Site Logs</h4>
      <a href="#per-site-logs" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>As a first step, letâs give every site its own log, instantiated as a hash chain (we will discuss how these all come together into one big log later). The items of the log are just the manifest of the site at a particular point in time:</p>
          <figure class="kg-card kg-image-card">
          <Image src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/35o9mKoVPkOExKRFHRgWTu/305d589e0a584a3200670aab5b060c2b/BLOG-2875_5.png" alt="A hash chain as originally. The bottom row is three orange circles and the top row is three green circles, shifted to the right of the bottom row. The top rightmost circle is labeled âchain hashâ. The bottom row circles are labeled manifest1, manifest2, and manifest3. Solid lines connect each green circle with the green one to its left (if it exists) and an orange circle to its bottom left." class="kg-image" width="1540" height="656" loading="lazy"/>
          </figure><p><sub>A siteâs hash chain-based log, containing three historical manifests. </sub></p><p>In reality, the log does not store the manifest itself, but the manifest hash. Sites designate an <b>asset host</b> that knows how to map hashes to the data they reference. This is a content-addressable storage backend, and can be implemented using strongly cached static hosting solutions.</p><p>A log on its own is not very trustworthy. Whoever runs the log can add and remove elements at will and then recompute the hash chain. To maintain the append-only-ness of the chain, we designate a trusted third party, called a <b>witness</b>. Given a hash chain consistency proof and a new chain hash, a witness:</p><ol><li><p>Verifies the consistency proof with respect to its old stored chain hash, and the new provided chain hash.</p></li><li><p>If successful, signs the new chain hash along with a signature timestamp.</p></li></ol><p>Now, when a user navigates to a website with transparency enabled, the sequence of events is:</p><ol><li><p>The site serves its manifest, an inclusion proof showing that the manifest appears in the log, and all the signatures from all the witnesses who have validated the log chain hash.</p></li><li><p>The browser verifies the signatures from whichever witnesses it trusts.</p></li><li><p>The browser verifies the inclusion proof. The manifest must be the newest entry in the chain (we discuss how to serve old manifests later).</p></li><li><p>The browser proceeds with the usual manifest and SRI integrity checks.</p></li></ol><p>At this point, the user knows that the given manifest has been recorded in a log whose chain hash has been saved by a trustworthy witness, so they can be reasonably sure that the manifest wonât be removed from history. Further, assuming the asset host functions correctly, the user knows that a copy of all the received code is readily available.</p><p><b>The need to signal transparency.</b> The above algorithm works, but we have a problem: if an attacker takes control of a site, they can simply stop serving transparency information and thus implicitly disable transparency without detection. So we need an explicit mechanism that keeps track of every website that has enrolled into transparency.</p>
    <div class="flex anchor relative">
      <h3 id="the-transparency-service">The Transparency Service</h3>
      <a href="#the-transparency-service" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>To store all the sites enrolled into transparency, we want a global data structure that maps a site domain to the site logâs chain hash. One efficient way of representing this is a <b>prefix tree</b> (a.k.a., a <i>trie</i>). Every leaf in the tree corresponds to a siteâs domain, and its value is the chain hash of that siteâs log, the current log size, and the siteâs asset host URL. For a site to prove validity of its transparency data, it will have to present an inclusion proof for its leaf. Fortunately, these proofs are efficient for prefix trees.</p>
          <figure class="kg-card kg-image-card">
          <Image src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/26ieMXRdvWIhLKv6J6Cdd7/29814a4a51c8ca8e3279e9b5756d0c67/BLOG-2875_6.png" alt="A binary tree. Each node is a blue circle. The top circle, the root node, is labeled âroot hashâ. Two solid lines come out of the bottom of the root node, one to the left and one to the right. The left one is labeled with the alphabet range âa-oâ. It connects to a node labeled âexample.comâ. This node has a curvy dashed arrow coming from it and pointing to the rightmost green node in a miniature hash chain representation. The right line coming from the root node is labeled with the alphabet range âp-zâ, and connects to another blue node. This node itself has children. The right line is labeled with the alphabet range âr-zâ and connects to a node labeled ârust-lang.orgâ. The left line is labeled with the alphabet range âp-qâ and connects to another blue node. This blue node itself has children. The left line is labeled with the alphabet range âpa-psâ and connects to a node labeled âpets.comâ. The right line is labeled with the alphabet range âpr-qâ and connects to a node labeled âproduces.comâ." class="kg-image" width="1988" height="1568" loading="lazy"/>
          </figure><p><sub>A prefix tree with four elements. Each leafâs path corresponds to a domain. Each leafâs value is the chain hash of its siteâs log. </sub></p><p>To add itself to the tree, a site proves possession of its domain to the <b>transparency service</b>, i.e., the party that operates the prefix tree, and provides an asset host URL. To update the entry, the site sends the new entry to the transparency service, which will compute the new chain hash. And to unenroll from transparency, the site just requests to have its entry removed from the tree (an adversary can do this too; we discuss how to detect this below).</p>
    <div class="flex anchor relative">
      <h4 id="proving-to-witnesses-and-browsers">Proving to Witnesses and Browsers</h4>
      <a href="#proving-to-witnesses-and-browsers" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>Now witnesses only need to look at the prefix tree instead of individual site logs, and thus they must verify whole-tree updates. The most important thing to ensure is that every siteâs log is append-only. So whenever the tree is updated, it must produce a âproofâ containing every new/deleted/modified entry, as well as a consistency proof for each entry showing that the site log corresponding to that entry has been properly appended to. Once the witness has verified this prefix tree update proof, it signs the root.</p>
          <figure class="kg-card kg-image-card">
          <Image src="https://cf-assets.www.cloudflare.com/zkvhlag99gkb/2bq4UBxoOgKPcysPPxnKD8/9e8c2a8a3b092fffae853b8d477efb07/BLOG-2875_7.png" alt="A sequence diagram with parties, left to right, User, Site, Asset Host, Transparency Service, and Witnesses. The sequence is as follows. The site sends new assets to the asset host and the new manifest hash to the transparency service. The transparency service waits to collect these updates from many sites. Eventually, the transparency service sends a new root and tree update proof to the witnesses, and gets back a many-times signed root. It returns the signed root and prefix tree inclusion proof to the site. Later, a user connects to the site, requesting GET /index.html. The site responds with index.html, the signed root, the inclusion proof, and the integrity manifest. The user checks the integrity, inclusion proof, and signatures." class="kg-image" width="1999" height="1973" loading="lazy"/>
          </figure><p><sub>The sequence of updating a siteâs assets and serving the site with transparency enabled.</sub></p><p>The client-side verification procedure is as in the previous section, with two modifications:</p><ol><li><p>The client now verifies two inclusion proofs: one for the integrity policyâs membership in the site log, and one for the site logâs membership in a prefix tree.</p></li><li><p>The client verifies the signature over the prefix tree root, since the witness no longer signs individual chain hashes. As before, the acceptable public keys are whichever witnesses the client trusts.</p></li></ol><p><b>Signaling transparency.</b> Now that there is a single source of truth, namely the prefix tree, a client can know a site is enrolled in transparency by simply fetching the siteâs entry in the tree. This alone would work, but it violates our requirement of âno added round trips,â so we instead require that client browsers will ship with the list of sites included in the prefix tree. We call this the <b>transparency preload list</b>.Â </p><p>If a site appears in the preload list, the browser will expect it to provide an inclusion proof in the prefix tree, or else a proof of non-inclusion in a newer version of the prefix tree, thereby showing theyâve unenrolled. The site must provide one of these proofs until the last preload list it appears in has expired. Finally, even though the preload list is derived from the prefix tree, there is nothing enforcing this relationship. Thus, the preload list should also be published transparently.</p>
    <div class="flex anchor relative">
      <h4 id="filling-in-missing-properties">Filling in Missing Properties</h4>
      <a href="#filling-in-missing-properties" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>Remember we still have the requirements of monitorability, opt-out being transparent, and no single point of failure/trust. We fill in those details now.</p><p><b>Adding monitorability.</b> So far, in order for a site operator to ensure their site was not hijacked, they would have to constantly query every transparency service for its domain and verify that it hasnât been tampered with. This is certainly better than the <a href="https://ct.cloudflare.com/"><u>500k events per hour</u></a> that CT monitors have to ingest, but it still requires the monitor to be constantly polling the prefix tree, and it imposes a constant load for the transparency service.</p><p>We add a field to the prefix tree leaf structure: the leaf now stores a âcreatedâ timestamp, containing the time the leaf was created. Witnesses ensure that the âcreatedâ field remains the same over all leaf updates (and it is deleted when the leaf is deleted). To monitor, a site operator need only keep the last observed âcreatedâ and âlog sizeâ fields of its leaf. If it fetches the latest leaf and sees both unchanged, it knows that no changes occurred since the last check.</p><p><b>Adding transparency of opt-out.</b> We must also do the same thing as above for leaf deletions. When a leaf is deleted, a monitor should be able to learn when the deletion occurred within some reasonable time frame. Thus, rather than outright removing a leaf, the transparency service responds to unenrollment requests by replacing the leaf with a <b>tombstone</b> value, containing just a âcreatedâ timestamp. As before, witnesses ensure that this field remains unchanged until the leaf is permanently deleted (after some visibility period) or re-enrolled.</p><p><b>Permitting multiple transparency services.</b> Since we require that there be no single point of failure or trust, we imagine an ecosystem where there are a handful of non-colluding, reasonably trustworthy transparency service providers, each with their own prefix tree. Like Certificate Transparency (CT), this set should not be too large. It must be small enough that reasonable levels of trust can be established, and so that independent auditors can reasonably handle the load of verifying all of them.</p><p>Ok thatâs the end of the most technical part of this post. Weâre now going to talk about how to tweak this system to provide all kinds of additional nice properties.</p>
    <div class="flex anchor relative">
      <h2 id="not-achieving-consistency">(Not) Achieving Consistency</h2>
      <a href="#not-achieving-consistency" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>Transparency would be useless if, every time a site updates, it serves 100,000 new versions of itself. Any auditor would have to go through every single version of the code in order to ensure no user was targeted with malware. This is bad even if the velocity of versions is lower. If a site publishes just one new version per week, but every version from the past ten years is still servable, then users can still be served extremely old, potentially vulnerable versions of the site, without anyone knowing. Thus, in order to make transparency valuable, we need <b>consistency</b>, the property that every browser sees the same version of the site at a given time.</p><p>We will not achieve the strongest version of consistency, but it turns out that weaker notions are sufficient for us. If, unlike the above scenario, a site had 8 valid versions of itself at a given time, then that would be pretty manageable for an auditor. So even though itâs true that users donât all see the same version of the site, they will all still benefit from transparency, as desired.</p><p>We describe two types of inconsistency and how we mitigate them.</p>
    <div class="flex anchor relative">
      <h3 id="tree-inconsistency">Tree Inconsistency</h3>
      <a href="#tree-inconsistency" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>Tree inconsistency occurs when transparency servicesâ prefix trees disagree on the chain hash of a site, thus disagreeing on the history of the site. One way to fully eliminate this is to establish a consensus mechanism for prefix trees. A simple one is majority voting: if there are five transparency services, a site must present three tree inclusion proofs to a user, showing the chain hash is present in three trees. This, of course, triples the tree inclusion proof size, and lowers the fault tolerance of the entire system (if three log operators go down, then no transparent site can publish any updates).</p><p>Instead of consensus, we opt to simply limit the amount of inconsistency by limiting the number of transparency services. In 2025, Chrome <a href="https://www.gstatic.com/ct/log_list/v3/log_list.json"><u>trusts</u></a> eight Certificate Transparency logs. A similar number of transparency services would be fine for our system. Plus, it is still possible to detect and prove the existence of inconsistencies between trees, since roots are signed by witnesses. So if it becomes the norm to use the same version on all trees, then social pressure can be applied when sites violate this.</p>
    <div class="flex anchor relative">
      <h3 id="temporal-inconsistency">Temporal Inconsistency</h3>
      <a href="#temporal-inconsistency" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>Temporal inconsistency occurs when a user gets a newer or older version of the site (both still unexpired), depending on some external factors such as geographic location or cookie values. In the extreme, as stated above, if a signed prefix root is valid for ten years, then a site can serve a user any version of the site from the last ten years.</p><p>As with tree inconsistency, this can be resolved using consensus mechanisms. If, for example, the latest manifest were published on a blockchain, then a user could fetch the latest blockchain head and ensure they got the latest version of the site. However, this incurs an extra network round trip for the client, and requires sites to wait for their hash to get published on-chain before they can update. More importantly, building this kind of consensus mechanism into our specification would drastically increase its complexity. Weâre aiming for v1.0 here.</p><p>We mitigate temporal inconsistency by requiring reasonably short validity periods for witness signatures. Making prefix root signatures valid for, e.g., one week would drastically limit the number of simultaneously servable versions. The cost is that site operators must now query the transparency service at least once a week for the new signed root and inclusion proof, even if nothing in the site changed. The sites cannot skip this, and the transparency service must be able to handle this load. This parameter must be tuned carefully.</p>
    <div class="flex anchor relative">
      <h2 id="beyond-integrity-consistency-and-transparency">Beyond Integrity, Consistency, and Transparency</h2>
      <a href="#beyond-integrity-consistency-and-transparency" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>Providing integrity, consistency, and transparency is already a huge endeavor, but there are some additional app store-like security features that can be integrated into this system without too much work.</p>
    <div class="flex anchor relative">
      <h3 id="code-signing">Code Signing</h3>
      <a href="#code-signing" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>One problem that WAICT doesnât solve is that of <i>provenance</i>: where did the code the user is running come from, precisely? In settings where audits of code happen frequently, this is not so important, because some third party will be reading the code regardless. But for smaller self-hosted deployments of open-source software, this may not be viable. For example, if Alice hosts her own version of <a href="https://cryptpad.org/"><u>Cryptpad</u></a> for her friend Bob, how can Bob be sure the code matches the real code in Cryptpadâs Github repo?</p><p><b>WEBCAT.</b> The folks at the Freedom of Press Foundation (FPF) have built a solution to this, called <a href="https://securedrop.org/news/introducing-webcat-web-based-code-assurance-and-transparency/"><u>WEBCAT</u></a>. This protocol allows site owners to announce the identities of the developers that have signed the siteâs integrity manifest, i.e., have signed all the code and other assets that the site is serving to the user. Users with the WEBCAT plugin can then see the developerâs <a href="https://www.sigstore.dev/"><u>Sigstore</u></a> signatures, and trust the code based on that.</p><p>Weâve made WAICT extensible enough to fit WEBCAT inside and benefit from the transparency components. Concretely, we permit manifests to hold additional metadata, which we call <b>extensions</b>. In this case, the extension holds a list of developersâ Sigstore identities. To be useful, browsers must expose an API for browser plugins to access these extension values. With this API, independent parties can build plugins for whatever feature they wish to layer on top of WAICT.</p>
    <div class="flex anchor relative">
      <h2 id="cooldown">Cooldown</h2>
      <a href="#cooldown" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>So far we have not built anything that can prevent attacks in the moment. An attacker who breaks into a website can still delete any code-signing extensions, or just unenroll the site from transparency entirely, and continue with their attack as normal. The unenrollment will be logged, but the malicious code will not be, and by the time anyone sees the unenrollment, it may be too late.</p><p>To prevent spontaneous unenrollment, we can enforce <b>unenrollment cooldown</b> client-side. Suppose the cooldown period is 24 hours. Then the rule is: if a site appears on the preload list, then the client will require that either 1) the site have transparency enabled, or 2) the site have a tombstone entry that is at least 24 hours old. Thus, an attacker will be forced to either serve a transparency-enabled version of the site, or serve a broken site for 24 hours.</p><p>Similarly, to prevent spontaneous extension modifications, we can enforce <b>extension cooldown</b> on the client. We will take code signing as an example, saying that any change in developer identities requires a 24 hour waiting period to be accepted. First, we require that extension <code>dev-ids</code> has a preload list of its own, letting the client know which sites have opted into code signing (if a preload list doesnât exist then any site can delete the extension at any time). The client rule is as follows: if the site appears in the preload list, then both 1) <code>dev-ids</code> must exist as an extension in the manifest, and 2) <code>dev-ids-inclusion</code> must contain an inclusion proof showing that the current value of dev-ids was in a prefix tree that is at least 24 hours old. With this rule, a client will reject values of <code>dev-ids</code> that are newer than a day. If a site wants to delete <code>dev-ids</code>, they must 1) request that it be removed from the preload list, and 2) in the meantime, replace the dev-ids value with the empty string and update <code>dev-ids-inclusion</code> to reflect the new value.</p>
    <div class="flex anchor relative">
      <h2 id="deployment-considerations">Deployment Considerations</h2>
      <a href="#deployment-considerations" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>There are a lot of distinct roles in this ecosystem. Letâs sketch out the trust and resource requirements for each role.</p><p><b>Transparency service.</b> These parties store metadata for every transparency-enabled site on the web. If there are 100 million domains, and each entry is 256B each (a few hashes, plus a URL), this comes out to 26GB for a single tree, not including the intermediate hashes. To prevent size blowup, there would probably have to be a pruning rule that unenrolls sites after a long inactivity period. Transparency services should have largely uncorrelated downtime, since, if all services go down, no transparency-enabled site can make any updates. Thus, transparency services must have a moderate amount of storage, be relatively highly available, and have downtime periods uncorrelated with each other.</p><p>Transparency services require some trust, but their behavior is narrowly constrained by witnesses. Theoretically, a service can replace any leafâs chain hash with its own, and the witness will validate it (as long as the consistency proof is valid). But such changes are detectable by anyone that monitors that leaf.</p><p><b>Witness.</b> These parties verify prefix tree updates and sign the resulting roots. Their storage costs are similar to that of a transparency service, since they must keep a full copy of a prefix tree for every transparency service they witness. Also like the transparency services, they must have high uptime. Witnesses must also be trusted to keep their signing key secret for a long period of time, at least long enough to permit browser trust stores to be updated when a new key is created.</p><p><b>Asset host.</b> These parties carry little trust. They cannot serve bad data, since any query response is hashed and compared to a known hash. The only malicious behavior an asset host can do is refuse to respond to queries. Asset hosts can also do this by accident due to downtime.</p><p><b>Client.</b> This is the most trust-sensitive part. The client is the software that performs all the transparency and integrity checks. This is, of course, the web browser itself. We must trust this.</p><p>We at Cloudflare would like to contribute what we can to this ecosystem. It should be possible to run both a transparency service and a witness. Of course, our witness should not monitor our own transparency service. Rather, we can witness other organizationsâ transparency services, and our transparency service can be witnessed by other organizations.</p>
    <div class="flex anchor relative">
      <h3 id="supporting-alternate-ecosystems">Supporting Alternate Ecosystems</h3>
      <a href="#supporting-alternate-ecosystems" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>WAICT should be compatible with non-standard ecosystems, ones where the large players do not really exist, or at least not in the way they usually do. We are working with the FPF on defining transparency for alternate ecosystems with different network and trust environments. The primary example we have is that of the Tor ecosystem.</p><p>A paranoid Tor user may not trust existing transparency services or witnesses, and there might not be any other trusted party with the resources to self-host these functionalities. For this use case, it may be reasonable to put the <a href="https://github.com/freedomofpress/webcat-infra-chain"><u>prefix tree on a blockchain somewhere</u></a>. This makes the usual domain validation impossible (thereâs no validator server to speak of), but this is fine for onion services. Since an onion address is just a public key, a signature is sufficient to prove ownership of the domain.</p><p>One consequence of a consensus-backed prefix tree is that witnesses are now unnecessary, and there is only need for the single, canonical, transparency service. This mostly solves the problems of tree inconsistency at the expense of latency of updates.</p>
    <div class="flex anchor relative">
      <h2 id="next-steps">Next Steps</h2>
      <a href="#next-steps" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>We are still very early in the standardization process. One of the more immediate next steps is to get subresource integrity working for more data types, particularly WASM and images. After that, we can begin standardizing the integrity manifest format. And then after that we can start standardizing all the other features. We intend to work on this specification hand-in-hand with browsers and the IETF, and we hope to have some exciting betas soon.</p><p>In the meantime, you can follow along with our <a href="https://github.com/rozbb/draft-waict-transparency"><u>transparency specification draft</u></a>, check out the open problems, and share your ideas. Pull requests and issues are always welcome!</p>
    <div class="flex anchor relative">
      <h2 id="acknowledgements">Acknowledgements</h2>
      <a href="#acknowledgements" aria-hidden="true" class="relative sm:absolute sm:-left-5">
        <svg width="16" height="16" viewBox="0 0 24 24"><path fill="currentcolor" d="m12.11 15.39-3.88 3.88a2.52 2.52 0 0 1-3.5 0 2.47 2.47 0 0 1 0-3.5l3.88-3.88a1 1 0 0 0-1.42-1.42l-3.88 3.89a4.48 4.48 0 0 0 6.33 6.33l3.89-3.88a1 1 0 1 0-1.42-1.42Zm8.58-12.08a4.49 4.49 0 0 0-6.33 0l-3.89 3.88a1 1 0 0 0 1.42 1.42l3.88-3.88a2.52 2.52 0 0 1 3.5 0 2.47 2.47 0 0 1 0 3.5l-3.88 3.88a1 1 0 1 0 1.42 1.42l3.88-3.89a4.49 4.49 0 0 0 0-6.33ZM8.83 15.17a1 1 0 0 0 1.1.22 1 1 0 0 0 .32-.22l4.92-4.92a1 1 0 0 0-1.42-1.42l-4.92 4.92a1 1 0 0 0 0 1.42Z"></path></svg>
      </a>
    </div>
    <p>Many thanks to Dennis Jackson from Mozilla for the lengthy back-and-forth meetings on design, to Giulio B and Cory Myers from FPF for their immensely helpful influence and feedback, and to Richard Hansen for great feedback.</p></div></section><section class="post-full-content flex flex-row flex-wrap mw7 center mb4"><div class="post-content lh-copy w-100 gray1 bt b--gray8 pt4">Cloudflare's connectivity cloud protects <a target='_blank' href='https://www.cloudflare.com/network-services/' rel='noreferrer'>entire corporate networks</a>, helps customers build <a target='_blank' href='https://workers.cloudflare.com/' rel='noreferrer'>Internet-scale applications efficiently</a>, accelerates any <a target='_blank' href='https://www.cloudflare.com/performance/accelerate-internet-applications/' rel='noreferrer'>website or Internet application</a>, <a target='_blank' href='https://www.cloudflare.com/ddos/' rel='noreferrer'>wards off DDoS attacks</a>, keeps <a target='_blank' href='https://www.cloudflare.com/application-security/' rel='noreferrer'>hackers at bay</a>, and can help you on <a target='_blank' href='https://www.cloudflare.com/products/zero-trust/' rel='noreferrer'>your journey to Zero Trust</a>.<br/><br/>Visit <a target='_blank' href='https://one.one.one.one/' rel='noreferrer'>1.1.1.1</a> from any device to get started with our free app that makes your Internet faster and safer.<br/><br/>To learn more about our mission to help build a better Internet, <a target='_blank' href='https://www.cloudflare.com/learning/what-is-cloudflare/' rel='noreferrer'>start here</a>. If you&apos;re looking for a new career direction, check out <a target='_blank' href="https://www.cloudflare.com/careers" rel='noreferrer'>our open positions</a>.</div></section><astro-slot> <!--[if astro]>server-island-start<![endif]--><link rel="preload" as="fetch" href="/_server-islands/SocialLinks?e=default&p=&s=%7B%22default%22%3A%22+%3Csvg+width%3D%5C%22232px%5C%22+height%3D%5C%2252px%5C%22+viewBox%3D%5C%220+0+232px+52px%5C%22+fill%3D%5C%22none%5C%22+xmlns%3D%5C%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%5C%22%3E+%3Cdefs%3E+%3CclipPath+id%3D%5C%22skelly-clip%5C%22%3E+%3Crect+width%3D%5C%22232px%5C%22+height%3D%5C%2252px%5C%22+x%3D%5C%220%5C%22+y%3D%5C%220%5C%22+rx%3D%5C%228%5C%22%3E%3C%2Frect%3E+%3C%2FclipPath%3E+%3ClinearGradient+id%3D%5C%22gradient%5C%22%3E+%3Cstop+offset%3D%5C%220%25%5C%22+stop-color%3D%5C%22%23F6F6F6%5C%22+stop-opacity%3D%5C%221%5C%22%3E+%3Canimate+attributeName%3D%5C%22offset%5C%22+dur%3D%5C%221s%5C%22+keyTimes%3D%5C%220%3B+0.25%3B+1%5C%22+repeatCount%3D%5C%22indefinite%5C%22+values%3D%5C%22-2%3B+-2%3B+1%5C%22%3E%3C%2Fanimate%3E+%3C%2Fstop%3E+%3Cstop+offset%3D%5C%2250%25%5C%22+stop-color%3D%5C%22%23E8E6E6%5C%22+stop-opacity%3D%5C%221%5C%22%3E+%3Canimate+attributeName%3D%5C%22offset%5C%22+dur%3D%5C%221s%5C%22+keyTimes%3D%5C%220%3B+0.25%3B+1%5C%22+repeatCount%3D%5C%22indefinite%5C%22+values%3D%5C%22-1%3B+-1%3B+2%5C%22%3E%3C%2Fanimate%3E+%3C%2Fstop%3E+%3Cstop+offset%3D%5C%22100%25%5C%22+stop-color%3D%5C%22%23F6F6F6%5C%22+stop-opacity%3D%5C%221%5C%22%3E+%3Canimate+attributeName%3D%5C%22offset%5C%22+dur%3D%5C%221s%5C%22+keyTimes%3D%5C%220%3B+0.25%3B+1%5C%22+repeatCount%3D%5C%22indefinite%5C%22+values%3D%5C%220%3B+0%3B+3%5C%22%3E%3C%2Fanimate%3E+%3C%2Fstop%3E+%3C%2FlinearGradient%3E+%3C%2Fdefs%3E+%3Crect+width%3D%5C%22232px%5C%22+height%3D%5C%2252px%5C%22+fill%3D%5C%22url%28%23gradient%29%5C%22+x%3D%5C%220%5C%22+y%3D%5C%220%5C%22+clip-path%3D%5C%22url%28%23skelly-clip%29%5C%22%3E%3C%2Frect%3E+%3C%2Fsvg%3E+%22%7D" crossorigin="anonymous"><script type="module" data-astro-rerun data-island-id="15a87124-2dd8-4696-bb4b-23f1c2aef822">let response = await fetch('/_server-islands/SocialLinks?e=default&p=&s=%7B%22default%22%3A%22+%3Csvg+width%3D%5C%22232px%5C%22+height%3D%5C%2252px%5C%22+viewBox%3D%5C%220+0+232px+52px%5C%22+fill%3D%5C%22none%5C%22+xmlns%3D%5C%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%5C%22%3E+%3Cdefs%3E+%3CclipPath+id%3D%5C%22skelly-clip%5C%22%3E+%3Crect+width%3D%5C%22232px%5C%22+height%3D%5C%2252px%5C%22+x%3D%5C%220%5C%22+y%3D%5C%220%5C%22+rx%3D%5C%228%5C%22%3E%3C%2Frect%3E+%3C%2FclipPath%3E+%3ClinearGradient+id%3D%5C%22gradient%5C%22%3E+%3Cstop+offset%3D%5C%220%25%5C%22+stop-color%3D%5C%22%23F6F6F6%5C%22+stop-opacity%3D%5C%221%5C%22%3E+%3Canimate+attributeName%3D%5C%22offset%5C%22+dur%3D%5C%221s%5C%22+keyTimes%3D%5C%220%3B+0.25%3B+1%5C%22+repeatCount%3D%5C%22indefinite%5C%22+values%3D%5C%22-2%3B+-2%3B+1%5C%22%3E%3C%2Fanimate%3E+%3C%2Fstop%3E+%3Cstop+offset%3D%5C%2250%25%5C%22+stop-color%3D%5C%22%23E8E6E6%5C%22+stop-opacity%3D%5C%221%5C%22%3E+%3Canimate+attributeName%3D%5C%22offset%5C%22+dur%3D%5C%221s%5C%22+keyTimes%3D%5C%220%3B+0.25%3B+1%5C%22+repeatCount%3D%5C%22indefinite%5C%22+values%3D%5C%22-1%3B+-1%3B+2%5C%22%3E%3C%2Fanimate%3E+%3C%2Fstop%3E+%3Cstop+offset%3D%5C%22100%25%5C%22+stop-color%3D%5C%22%23F6F6F6%5C%22+stop-opacity%3D%5C%221%5C%22%3E+%3Canimate+attributeName%3D%5C%22offset%5C%22+dur%3D%5C%221s%5C%22+keyTimes%3D%5C%220%3B+0.25%3B+1%5C%22+repeatCount%3D%5C%22indefinite%5C%22+values%3D%5C%220%3B+0%3B+3%5C%22%3E%3C%2Fanimate%3E+%3C%2Fstop%3E+%3C%2FlinearGradient%3E+%3C%2Fdefs%3E+%3Crect+width%3D%5C%22232px%5C%22+height%3D%5C%2252px%5C%22+fill%3D%5C%22url%28%23gradient%29%5C%22+x%3D%5C%220%5C%22+y%3D%5C%220%5C%22+clip-path%3D%5C%22url%28%23skelly-clip%29%5C%22%3E%3C%2Frect%3E+%3C%2Fsvg%3E+%22%7D');
replaceServerIsland('15a87124-2dd8-4696-bb4b-23f1c2aef822', response);</script> </astro-slot><iframe sandbox="allow-scripts allow-popups allow-popups-to-escape-sandbox" title="cloudflare-tv-live-link" id="cloudflare-tv-embed" src="https://cloudflare.tv/embed/live.html" loading="lazy"></iframe><a href="/tag/security/" class="dib pl2 pr2 pt1 pb1 mb2 bg-gray8 no-underline blue3 f2 mr1">Security</a><a href="/tag/malicious-javascript/" class="dib pl2 pr2 pt1 pb1 mb2 bg-gray8 no-underline blue3 f2 mr1">Malicious JavaScript</a><a href="/tag/javascript/" class="dib pl2 pr2 pt1 pb1 mb2 bg-gray8 no-underline blue3 f2 mr1">JavaScript</a><a href="/tag/deep-dive/" class="dib pl2 pr2 pt1 pb1 mb2 bg-gray8 no-underline blue3 f2 mr1">Deep Dive</a><a href="/tag/cryptography/" class="dib pl2 pr2 pt1 pb1 mb2 bg-gray8 no-underline blue3 f2 mr1">Cryptography</a><a href="/tag/research/" class="dib pl2 pr2 pt1 pb1 mb2 bg-gray8 no-underline blue3 f2 mr1">Research</a></article></main><div class="ph3 pv3"><div class=" flex flex-row flex-wrap mw7 center"><div class="w-100 bt b--gray8"><p class="black fw5 f4 mt4">Follow on X</p></div><div class="w-100 pb2"><span>Cloudflare</span><span class="ph2">|</span><a href="https://x.com/@cloudflare" class="no-underline">@cloudflare</a></div></div></div><div data-testid="related-posts-section" class="pv4 ph3 ph0-l flex flex-row flex-wrap mw7 center"><div class="w-100 bt b--gray8"><p class="orange fw5 f4 mt4 ttu">Related posts</p></div><article data-testid="related-posts-article" class="w-100 w-100-m w-50-l ph3 mb4"><p data-testid="related-posts-article-date" class="f3 fw5 gray5" data-iso-date="2025-10-08T14:00+00:00">October 08, 2025  2:00 PM</p><a data-testid="related-posts-article-title" href="/how-we-found-a-bug-in-gos-arm64-compiler/" class="no-underline gray1 f4 fw5"><h2 class="gray1 f4 fw5 mt2">How we found a bug in Go&#x27;s arm64 compiler</h2></a><p data-testid="related-posts-article-excerpt" class="gray1 lh-copy">84 million requests a second means even rare bugs appear often. We&#x27;ll reveal how we discovered a race condition in the Go arm64 compiler and got it fixed.<!-- -->...</p><ul class="flex pl0 fw6 f2 mb3 flex flex-wrap"><span>By<!-- -->Â </span><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/thea-heinen/" class="fw5 f2 black no-underline">Thea Heinen</a></div></li></ul><div data-testid="related-posts-article-tags" class="flex flex-row flex-wrap"><span><a href="/tag/deep-dive/" class="no-underline f1 fw2 blue3 underline-hover">Deep Dive<!-- -->,</a>Â </span><span><a href="/tag/go/" class="no-underline f1 fw2 blue3 underline-hover">Go<!-- -->,</a>Â </span><span><a href="/tag/programming/" class="no-underline f1 fw2 blue3 underline-hover">Programming</a>Â </span></div></article><article data-testid="related-posts-article" class="w-100 w-100-m w-50-l ph3 mb4"><p data-testid="related-posts-article-date" class="f3 fw5 gray5" data-iso-date="2025-09-29T14:00+00:00">September 29, 2025  2:00 PM</p><a data-testid="related-posts-article-title" href="/birthday-week-2025-wrap-up/" class="no-underline gray1 f4 fw5"><h2 class="gray1 f4 fw5 mt2">15 years of helping build a better Internet: a look back at Birthday Week 2025</h2></a><p data-testid="related-posts-article-excerpt" class="gray1 lh-copy">Rust-powered core systems, post-quantum upgrades, developer access for students, PlanetScale integration, open-source partnerships, and our biggest internship program ever â 1,111 interns in 2026.<!-- -->...</p><ul class="flex pl0 fw6 f2 mb3 flex flex-wrap"><span>By<!-- -->Â </span><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/nikita/" class="fw5 f2 black no-underline">Nikita Cano</a><span class="fw5 f2 black no-underline">,Â </span></div></li><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/korinne-alpers/" class="fw5 f2 black no-underline">Korinne Alpers</a></div></li></ul><div data-testid="related-posts-article-tags" class="flex flex-row flex-wrap"><span><a href="/tag/birthday-week/" class="no-underline f1 fw2 blue3 underline-hover">Birthday Week<!-- -->,</a>Â </span><span><a href="/tag/partners/" class="no-underline f1 fw2 blue3 underline-hover">Partners<!-- -->,</a>Â </span><span><a href="/tag/developer-platform/" class="no-underline f1 fw2 blue3 underline-hover">Developer Platform<!-- -->,</a>Â </span><span><a href="/tag/workers-launchpad/" class="no-underline f1 fw2 blue3 underline-hover">Workers Launchpad<!-- -->,</a>Â </span><span><a href="/tag/performance/" class="no-underline f1 fw2 blue3 underline-hover">Performance<!-- -->,</a>Â </span><span><a href="/tag/security/" class="no-underline f1 fw2 blue3 underline-hover">Security<!-- -->,</a>Â </span><span><a href="/tag/cache/" class="no-underline f1 fw2 blue3 underline-hover">Cache<!-- -->,</a>Â </span><span><a href="/tag/speed/" class="no-underline f1 fw2 blue3 underline-hover">Speed<!-- -->,</a>Â </span><span><a href="/tag/developers/" class="no-underline f1 fw2 blue3 underline-hover">Developers<!-- -->,</a>Â </span><span><a href="/tag/ai/" class="no-underline f1 fw2 blue3 underline-hover">AI<!-- -->,</a>Â </span><span><a href="/tag/1-1-1-1/" class="no-underline f1 fw2 blue3 underline-hover">1.1.1.1<!-- -->,</a>Â </span><span><a href="/tag/application-security/" class="no-underline f1 fw2 blue3 underline-hover">Application Security<!-- -->,</a>Â </span><span><a href="/tag/application-services/" class="no-underline f1 fw2 blue3 underline-hover">Application Services<!-- -->,</a>Â </span><span><a href="/tag/bots/" class="no-underline f1 fw2 blue3 underline-hover">Bots<!-- -->,</a>Â </span><span><a href="/tag/cdn/" class="no-underline f1 fw2 blue3 underline-hover">CDN<!-- -->,</a>Â </span><span><a href="/tag/cloudflare-for-startups/" class="no-underline f1 fw2 blue3 underline-hover">Cloudflare for Startups<!-- -->,</a>Â </span><span><a href="/tag/cloudflare-one/" class="no-underline f1 fw2 blue3 underline-hover">Cloudflare One<!-- -->,</a>Â </span><span><a href="/tag/cloudflare-zero-trust/" class="no-underline f1 fw2 blue3 underline-hover">Cloudflare Zero Trust<!-- -->,</a>Â </span><span><a href="/tag/workers/" class="no-underline f1 fw2 blue3 underline-hover">Cloudflare Workers</a>Â </span></div></article><article data-testid="related-posts-article" class="w-100 w-100-m w-50-l ph3 mb4"><p data-testid="related-posts-article-date" class="f3 fw5 gray5" data-iso-date="2025-09-26T14:00+00:00">September 26, 2025  2:00 PM</p><a data-testid="related-posts-article-title" href="/20-percent-internet-upgrade/" class="no-underline gray1 f4 fw5"><h2 class="gray1 f4 fw5 mt2">Cloudflare just got faster and more secure, powered by Rust</h2></a><p data-testid="related-posts-article-excerpt" class="gray1 lh-copy">Weâve replaced the original core system in Cloudflare with a new modular Rust-based proxy, replacing NGINX. <!-- -->...</p><ul class="flex pl0 fw6 f2 mb3 flex flex-wrap"><span>By<!-- -->Â </span><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/richard/" class="fw5 f2 black no-underline">Richard Boulton</a><span class="fw5 f2 black no-underline">,Â </span></div></li><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/steve-goldsmith/" class="fw5 f2 black no-underline">Steve Goldsmith</a><span class="fw5 f2 black no-underline">,Â </span></div></li><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/maurizio-abba/" class="fw5 f2 black no-underline">Maurizio Abba</a><span class="fw5 f2 black no-underline">,Â </span></div></li><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/matthew-bullock/" class="fw5 f2 black no-underline">Matthew Bullock</a></div></li></ul><div data-testid="related-posts-article-tags" class="flex flex-row flex-wrap"><span><a href="/tag/birthday-week/" class="no-underline f1 fw2 blue3 underline-hover">Birthday Week<!-- -->,</a>Â </span><span><a href="/tag/rust/" class="no-underline f1 fw2 blue3 underline-hover">Rust<!-- -->,</a>Â </span><span><a href="/tag/nginx/" class="no-underline f1 fw2 blue3 underline-hover">NGINX<!-- -->,</a>Â </span><span><a href="/tag/deep-dive/" class="no-underline f1 fw2 blue3 underline-hover">Deep Dive<!-- -->,</a>Â </span><span><a href="/tag/engineering/" class="no-underline f1 fw2 blue3 underline-hover">Engineering</a>Â </span></div></article><article data-testid="related-posts-article" class="w-100 w-100-m w-50-l ph3 mb4"><p data-testid="related-posts-article-date" class="f3 fw5 gray5" data-iso-date="2025-09-25T14:00+00:00">September 25, 2025  2:00 PM</p><a data-testid="related-posts-article-title" href="/safe-in-the-sandbox-security-hardening-for-cloudflare-workers/" class="no-underline gray1 f4 fw5"><h2 class="gray1 f4 fw5 mt2">Safe in the sandbox: security hardening for Cloudflare Workers</h2></a><p data-testid="related-posts-article-excerpt" class="gray1 lh-copy">We are further hardening Cloudflare Workers with the latest software and hardware features. We use defense-in-depth, including V8 sandboxes and the CPU&#x27;s memory protection keys to keep your data safe.<!-- -->...</p><ul class="flex pl0 fw6 f2 mb3 flex flex-wrap"><span>By<!-- -->Â </span><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/erik-corry/" class="fw5 f2 black no-underline">Erik Corry</a><span class="fw5 f2 black no-underline">,Â </span></div></li><li class="list flex items-center" style="white-space:nowrap"><div class="author-name-tooltip"><a href="/author/ketan-gupta/" class="fw5 f2 black no-underline">Ketan Gupta</a></div></li></ul><div data-testid="related-posts-article-tags" class="flex flex-row flex-wrap"><span><a href="/tag/workers/" class="no-underline f1 fw2 blue3 underline-hover">Cloudflare Workers<!-- -->,</a>Â </span><span><a href="/tag/birthday-week/" class="no-underline f1 fw2 blue3 underline-hover">Birthday Week<!-- -->,</a>Â </span><span><a href="/tag/attacks/" class="no-underline f1 fw2 blue3 underline-hover">Attacks<!-- -->,</a>Â </span><span><a href="/tag/engineering/" class="no-underline f1 fw2 blue3 underline-hover">Engineering<!-- -->,</a>Â </span><span><a href="/tag/linux/" class="no-underline f1 fw2 blue3 underline-hover">Linux<!-- -->,</a>Â </span><span><a href="/tag/malicious-javascript/" class="no-underline f1 fw2 blue3 underline-hover">Malicious JavaScript<!-- -->,</a>Â </span><span><a href="/tag/security/" class="no-underline f1 fw2 blue3 underline-hover">Security<!-- -->,</a>Â </span><span><a href="/tag/vulnerabilities/" class="no-underline f1 fw2 blue3 underline-hover">Vulnerabilities</a>Â </span></div></article></div><!--astro:end--></astro-island><footer class="pt4 pb4 pl1 pr1 main-footer"><div class="mw8 center dn db-l ph3"><div class="flex flex-row justify-between"><div class="main-footer__menu-group"><ul id="getting-started-menu" class="list pl0"><li class="pt1 pb1 f1 main-footer__menu-group__header js-toggle-footer-group" data-submenu="getting-started-menu">Getting Started<i class="icon-caret-down"></i></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/plans/free/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="free-plans" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Free plans</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/enterprise/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="enterprise" class="f1 blue3 no-underline underline-hover" rel="noreferrer">For enterprises</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/plans/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="compare-plans" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Compare plans</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/about-your-website/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="get-a-recommendation" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Get a recommendation</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/plans/enterprise/demo/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="request-a-demo" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Request a demo</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/plans/enterprise/contact/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="contact-sales" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Contact Sales</a></li></ul></div><div class="main-footer__menu-group"><ul id="company-menu" class="list pl0"><li class="pt1 pb1 f1" data-submenu="company-menu">Resources<i class="icon-caret-down"></i></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/learning/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="learning-center" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Learning Center</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/analysts/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="analysts-report" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Analyst reports</a></li><li class="pt1 pb1"><a href="https://radar.cloudflare.com/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="overview" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Cloudflare Radar</a></li><li class="pt1 pb1"><a href="https://cloudflare.tv/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="tv" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Cloudflare TV</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/case-studies/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="case-studies" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Case Studies</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/resource-hub/?resourcetype=Webinar" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="webinars" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Webinars</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/resource-hub/?resourcetype=Whitepaper" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="white-papers" class="f1 blue3 no-underline underline-hover" rel="noreferrer">White Papers</a></li><li class="pt1 pb1"><a href="https://developers.cloudflare.com" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="developer-docs" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Developer docs</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/the-net/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="theNet" class="f1 blue3 no-underline underline-hover" rel="noreferrer">theNet</a></li></ul></div><div class="main-footer__menu-group"><ul id="sales-menu" class="list pl0"><li class="pt1 pb1 f1 main-footer__menu-group__header js-toggle-footer-group" data-submenu="sales-menu">Solutions<i class="icon-caret-down"></i></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/connectivity-cloud/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="connectivity-cloud" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Connectivity cloud</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/zero-trust/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="zero-trust" class="f1 blue3 no-underline underline-hover" rel="noreferrer">SSE and SASE services</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/application-services/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="application-services" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Application services</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/network-services/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="network-services" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Network services</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/developer-platform/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="developer-services" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Developer services</a></li></ul></div><div class="main-footer__menu-group"><ul id="community-menu" class="list pl0"><li class="pt1 pb1 f1 main-footer__menu-group__header js-toggle-footer-group" data-submenu="community-menu">Community<i class="icon-caret-down"></i></li><li class="pt1 pb1"><a href="https://community.cloudflare.com" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="community_hub" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Community Hub</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/galileo/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="galileo" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Project Galileo</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/athenian/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="athenian" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Athenian Project</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/campaigns/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="cloudflare-for-campaigns" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Cloudflare for Campaigns</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/partners/technology-partners/cidp/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="critical-infrastructure-defense-project" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Critical Infrastructure Defense Project</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/connect2024/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="connect-2024" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Connect 2024</a></li></ul></div><div class="main-footer__menu-group"><ul id="support-menu" class="list pl0"><li class="pt1 pb1 f1 main-footer__menu-group__header js-toggle-footer-group" data-submenu="support-menu">Support<i class="icon-caret-down"></i></li><li class="pt1 pb1"><a href="https://support.cloudflare.com" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="help-center" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Help center</a></li><li class="pt1 pb1"><a href="https://www.cloudflarestatus.com" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="status" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Cloudflare Status</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/compliance/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="compliance" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Compliance</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/gdpr/introduction/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="gdpr" class="f1 blue3 no-underline underline-hover" rel="noreferrer">GDPR</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/trust-hub/abuse-approach/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="trust-and-safety" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Trust &amp; Safety</a></li></ul></div><div class="main-footer__menu-group"><ul id="company-menu" class="list pl0"><li class="pt1 pb1 f1 main-footer__menu-group__header js-toggle-footer-group" data-submenu="company-menu">Company<i class="icon-caret-down"></i></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/about-overview/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="overview" class="f1 blue3 no-underline underline-hover" rel="noreferrer">About Cloudflare</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/people/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="our_team" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Our team</a></li><li class="pt1 pb1"><a href="https://cloudflare.net/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="investor-relations" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Investor relations</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/press/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="press" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Press</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/careers/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="careers" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Careers</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/diversity-equity-and-inclusion/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="diversity-equity-inclusion" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Diversity, equity &amp; inclusion</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/impact/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="impact-ESG" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Impact/ESG</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/network/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="network_map" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Network Map</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/press-kit/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="press-kit" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Logos &amp; press kit</a></li><li class="pt1 pb1"><a href="https://www.cloudflare.com/partners/" target="_blank" data-tracking-category="footer" data-tracking-action="click" data-tracking-label="partners" class="f1 blue3 no-underline underline-hover" rel="noreferrer">Become a partner</a></li></ul></div></div></div><div class="mw8 center ph3"><div class="flex flex-row flex-wrap justify-center md:justify-between items-center pt4"><div class="flex flex-row space-x-4 items-start w-25-l pb4 pb0-l"><a target="_blank" rel="noreferrer" href="https://www.facebook.com/Cloudflare/" class="w-8"><img class="w-8" src="https://www.cloudflare.com/img/footer/facebook.svg" alt="facebook"/></a><a target=" _blank" rel="noreferrer" href="https://x.com/Cloudflare" class="w-8"><img class="w-8" src="https://www.cloudflare.com/img/footer/twitter.svg" alt="X"/></a><a target="_blank" rel="noreferrer" href="https://www.linkedin.com/company/cloudflare" class="w-8"><img class="w-8" src="https://www.cloudflare.com/img/footer/linkedin.svg" alt="linkedin"/></a><a target="_blank" rel="noreferrer" href="https://www.youtube.com/cloudflare" class="w-8"><img class="w-8" src="https://www.cloudflare.com/img/footer/youtube.svg" alt="youtube"/></a><a target="_blank" rel="noreferrer" href="https://www.instagram.com/cloudflare" class="w-8"><img class="w-8" src="https://www.cloudflare.com/img/footer/instagram.svg" alt="instagram"/></a></div><div class="w-70-l tr-l tl-ns"><div><span class="main-footer__copyright f1">Â© <!-- -->2025<!-- --> Cloudflare, Inc.<!-- --> </span><span class="main-footer__copyright f1">|</span><a href="https://www.cloudflare.com/privacypolicy/" target="_blank" class="main-footer__copyright f1 no-underline underline-hover" rel="noreferrer"> <!-- -->Privacy Policy<!-- --> </a><span class="main-footer__copyright f1">|</span><a href="https://www.cloudflare.com/website-terms/" target="_blank" class="main-footer__copyright f1 no-underline underline-hover" rel="noreferrer"> <!-- -->Terms of Use<!-- --> </a><span class="main-footer__copyright f1">|</span><a href="https://www.cloudflare.com/disclosure/" target="_blank" class="main-footer__copyright f1 no-underline underline-hover" rel="noreferrer"> <!-- -->Report Security Issues<!-- --> </a><span class="main-footer__copyright f1">|</span><img class="mw2 ph1" src="/images/privacy-options.svg" alt="Privacy Options"/><a href="#cookie-settings" id="ot-sdk-btn" class="ot-sdk-show-settings main-footer__copyright f1 no-underline underline-hover"><span class="brandGray5">Cookie Preferences</span> </a><span class="main-footer__copyright f1">|</span><a href="https://www.cloudflare.com/trademark/" target="_blank" class="main-footer__copyright f1 no-underline underline-hover" rel="noreferrer"> <!-- -->Trademark<!-- --> </a></div></div></div></div></footer></html><script defer src="https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015" integrity="sha512-ZpsOmlRQV6y907TI0dKBHq9Md29nnaEIPlkf84rnaERnq6zvWvPUqr2ft8M1aS28oN72PdrCzSjY4U6VaAw1EQ==" data-cf-beacon='{"rayId":"990d10fab9cb05ab","version":"2025.9.1","serverTiming":{"name":{"cfExtPri":true,"cfEdge":true,"cfOrigin":true,"cfL4":true,"cfSpeedBrain":true,"cfCacheStatus":true}},"token":"2bc156e5f250476cb274d269511ffb57","b":1}' crossorigin="anonymous"></script>
