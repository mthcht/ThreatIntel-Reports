<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<link rel="alternate"
      type="application/rss+xml"
      href="https://blog.digital-investigations.info/rss.xml"
      title="RSS feed for https://blog.digital-investigations.info/">
<title>Understanding BlackMatter's API Hashing</title>
<meta name="author" content="Jan Gru">
   <meta name="referrer" content="no-referrer">
   <link rel="stylesheet" href="static/style.css" type="text/css">
   <meta name="viewport" content="initial-scale=1,width=device-width,minimum-scale=1">
   <script type="text/x-mathjax-config">
     MathJax.Hub.Config({
         displayAlign: "center",
         displayIndent: "0em",

         "HTML-CSS": { scale: 100,
                         linebreaks: { automatic: "false" },
                         webFont: "TeX"
                        },
         SVG: {scale: 100,
               linebreaks: { automatic: "false" },
               font: "TeX"},
         NativeMML: {scale: 100},
         TeX: { equationNumbers: {autoNumber: "AMS"},
                MultLineWidth: "85%",
                TagSide: "right",
                TagIndent: ".8em"
              }
   });
   </script>
   <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
   <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script></head>
<body>
<div id="preamble" class="status"><div class="header">
    <a href="https://blog.digital-investigations.info/">A Blog on digital investigations</a>
    <div class="sitelinks">
      <a href="https://github.com/jgru">Github</a>
      |
      <a href="https://twitter.com">Twitter</a>
      <br>
      <a href="archive.html">Index of Posts</a>
    </div>
  </div></div>
<div id="content">
<div class="headline"><h1 class="post-title"><a href="https://blog.digital-investigations.info/2021-08-05-understanding-blackmatters-api-hashing.html">Understanding BlackMatter's API Hashing</a></h1>
<div class="taglist">:<a href="https://blog.digital-investigations.info//tag-ti.html">TI</a>:<a href="https://blog.digital-investigations.info//tag-rem.html">REM</a>:</div></div><div class="post-date"><2021-08-04></div>
<div id="outline-container-org6a295d8" class="outline-2">
<h2 id="org6a295d8">tl;dr:</h2>
<div class="outline-text-2" id="text-org6a295d8">
<p>
The ransomware <b>BlackMatter</b> aims at stepping into the void, which was left by <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.revil">REvil's</a> and <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.darkside">DarkSide's</a> (temporary) retreat. At this point in time this new ransomware seems to pose a serious threat. In this blogpost BlackMatter's API hashing mechanism is described in detail and a Ghidra-script is supplied <sup><a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a></sup> to aid future analyses.
</p>

<p>
<b>The API hashing algorithm:</b>
To calculate the API hashes for function names, each and every character is added up, while a binary rotation to the right by 13 bits is performed in each iteration. The hash of the housing module, which was calculated in the same manner before, serves as a seed value for the respective hash.
</p>

<p>
<b>Storing addresses:</b>
Notably, BlackMatter does not store the function addresses in clear after resolving them. Instead it uses an array of "trampoline-pointers", which point to small, dynamically allocated assembly blocks (12 bytes in size), which perform the XOR-decoding of the encoded version of the respective function address, that was placed in there during import resolution and call it afterwards.
</p>
</div>
</div>

<div id="outline-container-org8b1568e" class="outline-2">
<h2 id="org8b1568e">Motivation</h2>
<div class="outline-text-2" id="text-org8b1568e">
<p>
A new ransomware gang named <i>BlackMatter</i> appeared in July 2021 and started to recruit affiliates at the underground forums <i>Exploit</i> and <i>XSS</i><sup><a id="fnr.2" class="footref" href="#fn.2" role="doc-backlink">2</a></sup>.
They fill the void, which is left by <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.darkside">DarkSide</a>'s shutdown after the Colonial Pipeline attack<sup><a id="fnr.3" class="footref" href="#fn.3" role="doc-backlink">3</a></sup> and <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.revil">REvil</a>'s disappearing in the mid of July after pwning Kaseya<sup><a id="fnr.4" class="footref" href="#fn.4" role="doc-backlink">4</a></sup>.
</p>

<p>
On the 2nd of August 2021 an interview of D. Smilyanets (<i>The Record</i>) with the alleged threat actor behind <i>BlackMatter</i> was published<sup><a id="fnr.5" class="footref" href="#fn.5" role="doc-backlink">5</a></sup>. Within this interview, the actor states, that he is neither the successor of <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.darkside">DarkSide</a> nor <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.revil">REvil</a>, instead he proclaims, that <i>BlackMatter</i> tries to unify the best of the ransomwares <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.lockbit">LockBit</a>, <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.revil">REvil</a> and <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.darkside">DarkSide</a>, which all have their individual strengths in the opinion of the alleged actor behind "the new ransomware on the block".
</p>

<p>
At this point in time it seems to be a valid assumption, that <i>BlackMatter</i> will keep the DFIR-community and the law enforcement agencies busy for the next few weeks, therefore initial analyses might be helpful to get to know the threat imposed by this probably rebranded actor.
</p>
</div>
</div>

<div id="outline-container-orga949bbf" class="outline-2">
<h2 id="orga949bbf">Scope</h2>
<div class="outline-text-2" id="text-orga949bbf">
<p>
For this analysis the <i>BlackMatter</i>-sample with SHA256
</p>
<pre class="example">
7f6dd0ca03f04b64024e86a72a6d7cfab6abccc2173b85896fc4b431990a5984
</pre>
<p>
was used. It has a compilation timestamp of 23rd of July 2021 20:51:18 UTC and was published on the 2nd of August 2021 at <a href="https://bazaar.abuse.ch/">MalwareBazaar</a><sup><a id="fnr.6" class="footref" href="#fn.6" role="doc-backlink">6</a></sup>.
</p>

<p>
This blog post deals with the API hashing found in this sample and shows a way to defeat it with the help of Ghidra scripting. Resolving the hidden imports, is the main prerequisite for a static analysis of <i>BlackMatter</i>-binaries. However, further steps, like the decoding of its eventually available config data, are not in scope of this blog post.
</p>
</div>
</div>

<div id="outline-container-org6d29494" class="outline-2">
<h2 id="org6d29494">Findings</h2>
<div class="outline-text-2" id="text-org6d29494">
<p>
Directly after the entry point of the executable, the function at address <code>00405e5c</code>, which is responsible for initializing the import resolution is called, as the following figure of the decompiled code illustrates.
</p>


<figure id="org5c156ed">
<img src="2021-08-05/perform_import_resolution.png" alt="perform_import_resolution.png">

<figcaption><span class="figure-number">Figure 1: </span>Decompilation of the setup function at <code>00405e5c</code>, which kicks off the import resolution</figcaption>
</figure>

<p>
At l. 10 and l. 15 of this function the actual import resolution is started by calling another function at <code>0040581d</code>, named <code>resolveHashedImport</code> in the figure above. In this function all the heavy lifting required to resolve symbols is performed, e.g. the loaded modules are traversed in memory by utilizing the doubly-linked list named <code>InLoadOrderModuleList</code> of the <code>PEB_LDR_DATA</code>-struct and so on.
</p>

<p>
The goal of those initial calls is to retrieve <code>HeapCreate</code> and <code>HeapAlloc</code> (l. 10 and 15) at first. This is only possible since the called function at <code>0040581d</code> ensures that <code>LoadLibraryA</code> and <code>GetProcAddress</code> are loaded on the first invocation by recursive calls to itself, as it is shown in the following figure exemplary for <code>LoadLibraryA</code>.
</p>


<figure id="org051e096">
<img src="2021-08-05/recursive_loadlibrary_resolution.png" alt="recursive_loadlibrary_resolution.png">

<figcaption><span class="figure-number">Figure 2: </span>Recursive call from within <code>0040581d</code> to load <code>LoadLibraryA</code> on the first invocation</figcaption>
</figure>

<p>
So how is the hash, which is passed to the function called at <code>00405844</code> calculated by <i>BlackMatter</i>?
</p>
</div>

<div id="outline-container-org3e5b7de" class="outline-3">
<h3 id="org3e5b7de">Hash calculation</h3>
<div class="outline-text-3" id="text-org3e5b7de">
<p>
For the calculation of the API hash each character is added up one by another. In each iteration  a seeded ROR-13-operation is performed, as the following figure illustrates.
</p>


<figure id="org2b9ef32">
<img src="2021-08-05/calc_func_hash.png" alt="calc_func_hash.png">

<figcaption><span class="figure-number">Figure 3: </span>Algorithm to calculate the API hash</figcaption>
</figure>

<p>
Because of the fact, that the hash of the module name is used as a seed, a two step process has to be employed to construct the final API hash for a single function.
</p>

<p>
First, the module name is hashed in a similar manner with a seed of 0. This happens in the function at <code>004010bb</code>, which is not shown here. It is looped over the characters, which are transformed to lower case. In each iteration a rotation by 13 bits of the dword value resulting from the previous iteration is performed and the current character value is added. This leads to the following Python implementation:
</p>

<pre class="example">
def calc_mod_hash(modname):
    mask = 0xFFFFFFFF
    h = 0
    for c in modname + "\x00":
	cc = ord(c)
	if (0x40 &lt; cc and cc &lt; 0x5b):
	    cc = (cc | 0x20) &amp; mask
	h = (h &gt;&gt; 0xd) | (h &lt;&lt; 0x13)
	h = (h + cc) &amp; mask

    return h
</pre>

<p>
The resulting hash of the module name is then used as a seed for the similar but simpler function presented at fig. 3, which finally calculates the actual function hash.
The following Python code shows the logic found in this function at <code>00401096</code>:
</p>

<pre class="example">
def calc_func_hash(modhash, funcname):
    mask = 0xFFFFFFFF
    h = modhash
    for c in funcname + "\x00":
	cc = ord(c)
	h = (h &gt;&gt; 0xd) | (h &lt;&lt; 0x13)
	h = (h + cc) &amp; mask

    return h
</pre>

<p>
<i><b>Note</b>: It is important to add the nullbyte, so that for a function name of n characters, n+1 ROR-operations are performed.<sup><a id="fnr.7" class="footref" href="#fn.7" role="doc-backlink">7</a></sup></i>
</p>

<p>
In summary this leads to the following calculation of a function hash as it is used by <i>BlackMatter</i>:
</p>
<pre class="example">
def get_api_hash(modname, funcname):
    return calc_func_hash(calc_mod_hash(modname), funcname)
</pre>

<p>
Let's test it:
</p>
<pre class="example">
mn = "kernel32.dll"
fn = "GetProcAddress"
print(hex(get_api_hash(mn, fn)))

mn = "kernel32.dll"
fn = "LoadLibraryA"
print(hex(get_api_hash(mn, fn)))
</pre>

<pre class="example" id="orgec6adf7">
#+Result
: 0xbb93705c
: 0x27d05eb2
</pre>

<p>
Indeed, both hashes can be found in the binary, as fig. 3 shows:
</p>


<figure id="orgdef5b37">
<img src="2021-08-05/recursive_resolution.png" alt="recursive_resolution.png">

<figcaption><span class="figure-number">Figure 4: </span>Function hashes of <code>LoadLibraryA</code> and <code>GetProcAdress</code></figcaption>
</figure>

<p>
Actually only <code>0x5d6015f ^ 0x22065fed</code>, wich results in <code>0x27d05eb2</code> can be found, since all API hashes are stored XORed with <code>0x22065fed</code> and are XORed again with this value before a comparison with the calculated hash.
</p>
</div>
</div>

<div id="outline-container-org8d6a84a" class="outline-3">
<h3 id="org8d6a84a">(Re)storing imports</h3>
<div class="outline-text-3" id="text-org8d6a84a">
<p>
After the a/m and absolutely required functions like <code>HeapAlloc</code>, <code>LoadLibraryA</code>, etc. have been loaded. <i>BlackMatter</i> resolves blocks of hashed functions stored as dwords in global memory (2nd arg to function<sup><a id="fnr.8" class="footref" href="#fn.8" role="doc-backlink">8</a></sup>) and stores pointers to dynamically allocated "structs" in global memory as well (1st arg to function<sup><a id="fnr.9" class="footref" href="#fn.9" role="doc-backlink">9</a></sup>):
</p>


<figure id="orgca06017">
<img src="2021-08-05/load_funcs_from_kernel32.png" alt="load_funcs_from_kernel32.png">

<figcaption><span class="figure-number">Figure 5: </span>Resolving array of hashes (here for Kernel32.dll)</figcaption>
</figure>

<p>
Line 18 in fig. 1 already showed this code in a decompiled representation.
</p>

<p>
Fig. 6 shows the decompilation of the called function beginning at <code>00405a86</code>. Within there, it is looped over the array of function hashes until the value <code>0xCCCCCCCC</code> is reached. This serves as an indicator of the end of the list of function hashes, so the loop stops in l. 19, when this value is read.
</p>


<figure id="orgaa74ea0">
<img src="2021-08-05/storing_of_func_address.png" alt="storing_of_func_address.png">

<figcaption><span class="figure-number">Figure 6: </span>Storing XORed function address with Assembly instructions</figcaption>
</figure>

<p>
Line 29 ff. looks very interesting here.
To further complicate analysis, <i>BlackMatter</i> does not store the function address itself in the result array. Instead it stores a pointer to 12 bytes of dynamically allocated memory.
In these 12 bytes it does not store the function address in clear. Instead the results of XOR-operations (here XORed with <code>0x22065fed</code>) are stored together with assembly instructions to decode the real function address on the fly, when the function is called as fig. 6 suggests.
</p>

<p>
So the global array of pointers which is passed as a buffer to hold the results of the import resolution (e.g. l. 18 ff. in fig. 1 and fig. 5) acts as trampoline, so that on each call, it is jumped to a 12 byte "function-struct", which is comprised of the following opcode sequence on the heap, where the questionmarks resemble the XORed-function address in question:
</p>

<pre class="example">
B8 ?? ?? ?? ?? 35 ED 5F 06 22 E0 FF
</pre>

<p>
Upon execution, these instructions load the XORed-function address into EAX and perform the XOR-operation again to reverse it and to finally call the decoded function address, so that the actual libary-call is performed without storing the function-addresses in memory.
</p>
</div>
</div>

<div id="outline-container-org3aa2ba8" class="outline-3">
<h3 id="org3aa2ba8">Import resolution with Ghidra scripting</h3>
<div class="outline-text-3" id="text-org3aa2ba8">
<p>
The labelling of the a/m "trampoline-pointers", whose call ultimately leads to the execution of the a/m opcode-sequence should be automated with Ghidra's scripting capabilities. To accomplish this, have a look at the following Java-code in my Gist:
</p>

<p>
<a href="https://gist.github.com/jgru/c58851bde4ee4778d83c84babb2f69d1#file-blackmatterapihashing-java">https://gist.github.com/jgru/c58851bde4ee4778d83c84babb2f69d1#file-blackmatterapihashing-java</a>
</p>

<p>
Note, that this Ghidra-script is based on <a href="https://twitter.com/larsborn">L. Wallenborn</a>'s and <a href="https://twitter.com/huettenhain">J. HÃ¼ttenhain</a>'s template code<sup><a id="fnr.10" class="footref" href="#fn.10" role="doc-backlink">10</a></sup>. (Thank you guys for your invaluable teaching!)
</p>

<p>
Upon execution the script asks for the name of the resolving function (the one called in fig. 5), which takes the two pointers to global memory regions (here at <code>00405a86</code>). In the next GUI-dialog, that pops up, the XOR-key has to be specified (here <code>0x22065fed</code>). Afterwards you have to choose the file, containing the precomputed hashes, which should be used for name resolution. This list can be found at my Gist as well:
</p>

<p>
<a href="https://gist.github.com/jgru/c58851bde4ee4778d83c84babb2f69d1#file-blackmatter_api-hash-json">https://gist.github.com/jgru/c58851bde4ee4778d83c84babb2f69d1#file-blackmatter_api-hash-json</a>
</p>

<p>
If you stumble upon a <i>BlackMatter</i>-sample, that uses the same ROR-13-hashing, this script might help to get you started quickly with the analysis.
</p>
</div>
</div>
</div>

<div id="outline-container-org904e863" class="outline-2">
<h2 id="org904e863">Conclusion</h2>
<div class="outline-text-2" id="text-org904e863">
<p>
This blog post detailed the API-hashing mechanism employed by the new ransomware <i>BlackMatter</i>.
</p>

<p>
To hash a function name, <i>BlackMatter</i> employs a seeded ROR13 in an iterative manner. That is a rotation of the dword by 13 bits to the right. The name of the housing module, hashed in the same way, but with an initial value of 0, is used as a seed for this trivial hashing algorithm.
It has to be noted, that due to the implementation with a do-while-loop, for a function name of length <i>n</i> (terminating zero-byte excluded) <i>n+1</i> ROR-operations will be performed.
The API hashes are initially stored as dwords in global arrays XORed with <code>0x22065fed</code>.
</p>

<p>
Interestingly, the imported function addresses are stored in a dynamically allocated memory region. To further complicate analysis, <i>BlackMatter</i> does not store the function address itself, but the result of an XOR-operation (here again XORed with <code>0x22065fed</code>) together with assembly instructions to decode it on the fly, when the function is called by a pointer to this memory location housing these instructions.
</p>

<p>
During the import resolution-routine at <code>00405a86</code>, which is called multiple times with different arrays of API hashes, pointers to those opcode-sequences are stored in a global array, which is then referenced for executing the single functions, when needed.
</p>

<p>
If you have any notes, errata, hints, feedback, etc., please send a mail to <code>ca473c19fd9b81c045094121827b3548 at digital-investigations.info</code>.
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
See <a href="https://gist.github.com/jgru/c58851bde4ee4778d83c84babb2f69d1#file-blackmatterapihashing-java">https://gist.github.com/jgru/c58851bde4ee4778d83c84babb2f69d1#file-blackmatterapihashing-java</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2" role="doc-backlink">2</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
See <a href="https://therecord.media/blackmatter-ransomware-targets-companies-with-revenues-of-100-million-and-more/">https://therecord.media/blackmatter-ransomware-targets-companies-with-revenues-of-100-million-and-more/</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.3" class="footnum" href="#fnr.3" role="doc-backlink">3</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
See <a href="https://www.securityweek.com/darkside-ransomware-shutdown-exit-scam-or-running-hills">https://www.securityweek.com/darkside-ransomware-shutdown-exit-scam-or-running-hills</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.4" class="footnum" href="#fnr.4" role="doc-backlink">4</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
See <a href="https://www.bleepingcomputer.com/news/security/revil-ransomware-gangs-web-sites-mysteriously-shut-down/">https://www.bleepingcomputer.com/news/security/revil-ransomware-gangs-web-sites-mysteriously-shut-down/</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.5" class="footnum" href="#fnr.5" role="doc-backlink">5</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
See <a href="https://therecord.media/an-interview-with-blackmatter-a-new-ransomware-group-thats-learning-from-the-mistakes-of-darkside-and-revil/">https://therecord.media/an-interview-with-blackmatter-a-new-ransomware-group-thats-learning-from-the-mistakes-of-darkside-and-revil/</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.6" class="footnum" href="#fnr.6" role="doc-backlink">6</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
See <a href="https://bazaar.abuse.ch/sample/7f6dd0ca03f04b64024e86a72a6d7cfab6abccc2173b85896fc4b431990a5984/">https://bazaar.abuse.ch/sample/7f6dd0ca03f04b64024e86a72a6d7cfab6abccc2173b85896fc4b431990a5984/</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.7" class="footnum" href="#fnr.7" role="doc-backlink">7</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
Thanks to @sisoma2 for pointing this out in his implementation <a href="https://twitter.com/sisoma2/status/1422547399285870594">https://twitter.com/sisoma2/status/1422547399285870594</a>
</p></div></div>

<div class="footdef"><sup><a id="fn.8" class="footnum" href="#fnr.8" role="doc-backlink">8</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
E.g. at <code>00405afc</code>, <code>00405bbc</code>,&#x2026;
</p></div></div>

<div class="footdef"><sup><a id="fn.9" class="footnum" href="#fnr.9" role="doc-backlink">9</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
E.g. at <code>004112ac</code>, <code>00411368</code>,&#x2026;
</p></div></div>

<div class="footdef"><sup><a id="fn.10" class="footnum" href="#fnr.10" role="doc-backlink">10</a></sup> <div class="footpara" role="doc-footnote"><p class="footpara">
See <a href="https://github.com/nullteilerfrei/reversing-class">https://github.com/nullteilerfrei/reversing-class</a>
</p></div></div>


</div>
</div><div class="taglist"><a href="https://blog.digital-investigations.info/tags.html">Tags</a>: <a href="https://blog.digital-investigations.info/tag-ti.html">TI</a> <a href="https://blog.digital-investigations.info/tag-rem.html">REM</a> </div></div>
<div id="postamble" class="status"><div class="footer"><div id="archive"><a href="archive.html">Archive</a><p></p></div><p>Generated by <a href="http://www.gnu.org/software/emacs/">Emacs</a> 29.x (<a href="http://orgmode.org">Org mode</a> 9.x)</p><p>Copyright &copy; 2022 - <span id="footerYear"></span>&nbsp;&nbsp;-&nbsp;&nbsp;Powered by <a href="https://github.com/bastibe/org-static-blog" target="_blank">org-static-blog</a><script type="text/javascript">document.getElementById("footerYear").innerHTML = (new Date()).getFullYear();</script></p></div></div></div>
</body>
</html>
