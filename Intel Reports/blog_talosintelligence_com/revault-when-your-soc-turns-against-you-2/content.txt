<!doctype html>
<html lang="en">

<head>
    <title>ReVault! When your SoC turns against you… deep dive edition</title>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://blog.talosintelligence.com/assets/css/bootstrap.min.css?v=94d1fb2008">

    <link rel="stylesheet" href="https://blog.talosintelligence.com/assets/css/navigation.css?v=94d1fb2008">
    <link rel="stylesheet" href="https://blog.talosintelligence.com/assets/css/footer.css?v=94d1fb2008">

    <link rel="stylesheet" href="https://blog.talosintelligence.com/assets/css/pagination.css?v=94d1fb2008">

    <link rel="stylesheet" href="https://blog.talosintelligence.com/assets/css/banners.css?v=94d1fb2008">

    <link rel="stylesheet" href="https://blog.talosintelligence.com/assets/css/style.css?v=94d1fb2008">

    <link rel="stylesheet" href="https://blog.talosintelligence.com/assets/css/prism.css?v=94d1fb2008">
    <link rel="stylesheet" href="https://blog.talosintelligence.com/assets/css/prism-vsc-dark-plus.css?v=94d1fb2008">
    <link rel="stylesheet" href="https://blog.talosintelligence.com/assets/css/prism-talos.css?v=94d1fb2008">

    <link rel="stylesheet" href="https://blog.talosintelligence.com/assets/css/landing-page.css?v=94d1fb2008">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;1,100;1,300;1,400&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Fira+Mono:wght@400;500&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;1,100;1,300;1,400&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/ghost-theme-utils@latest/dist/css/style.min.css" rel="stylesheet">


    <meta name="description" content="Talos reported 5 vulnerabilities to Broadcom and Dell affecting both the ControlVault3 Firmware and its associated Windows APIs that we are calling “ReVault”.">
    <link rel="icon" href="https://blog.talosintelligence.com/content/images/size/w256h256/2022/07/talos_o_square.png" type="image/png">
    <link rel="canonical" href="https://blog.talosintelligence.com/revault-when-your-soc-turns-against-you-2/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    
    <meta property="og:site_name" content="Cisco Talos Blog">
    <meta property="og:type" content="article">
    <meta property="og:title" content="ReVault! When your SoC turns against you… deep dive edition">
    <meta property="og:description" content="Talos reported 5 vulnerabilities to Broadcom and Dell affecting both the ControlVault3 Firmware and its associated Windows APIs that we are calling “ReVault”.">
    <meta property="og:url" content="https://blog.talosintelligence.com/revault-when-your-soc-turns-against-you-2/">
    <meta property="og:image" content="https://blog.talosintelligence.com/content/images/size/w1200/2022/10/GnericCiscoTalos-Header-1.jpg">
    <meta property="article:published_time" content="2025-08-09T13:00:26.000Z">
    <meta property="article:modified_time" content="2025-08-09T23:32:35.000Z">
    <meta property="article:tag" content="Vulnerability Deep Dive">
    
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="ReVault! When your SoC turns against you… deep dive edition">
    <meta name="twitter:description" content="Talos reported 5 vulnerabilities to Broadcom and Dell affecting both the ControlVault3 Firmware and its associated Windows APIs that we are calling “ReVault”.">
    <meta name="twitter:url" content="https://blog.talosintelligence.com/revault-when-your-soc-turns-against-you-2/">
    <meta name="twitter:image" content="https://blog.talosintelligence.com/content/images/size/w1200/2022/10/GnericCiscoTalos-Header.jpg">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="Philippe Laulheret">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="Vulnerability Deep Dive">
    <meta name="twitter:site" content="@TalosSecurity">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="600">
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "Cisco Talos Blog",
        "url": "https://blog.talosintelligence.com/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://blog.talosintelligence.com/content/images/2022/11/TalosBrand_ukraine.svg"
        }
    },
    "author": {
        "@type": "Person",
        "name": "Philippe Laulheret",
        "url": "https://blog.talosintelligence.com/author/philippe/",
        "sameAs": []
    },
    "headline": "ReVault! When your SoC turns against you… deep dive edition",
    "url": "https://blog.talosintelligence.com/revault-when-your-soc-turns-against-you-2/",
    "datePublished": "2025-08-09T13:00:26.000Z",
    "dateModified": "2025-08-09T23:32:35.000Z",
    "keywords": "Vulnerability Deep Dive",
    "description": "Talos reported 5 vulnerabilities to Broadcom and Dell affecting both the ControlVault3 Firmware and its associated Windows APIs that we are calling “ReVault”. ",
    "mainEntityOfPage": "https://blog.talosintelligence.com/revault-when-your-soc-turns-against-you-2/"
}
    </script>

    <meta name="generator" content="Ghost 5.130">
    <link rel="alternate" type="application/rss+xml" title="Cisco Talos Blog" href="https://blog.talosintelligence.com/rss/">
    
    <script defer src="https://cdn.jsdelivr.net/ghost/sodo-search@~1.8/umd/sodo-search.min.js" data-key="4ffb0139d74ada998f4b141e4d" data-styles="https://cdn.jsdelivr.net/ghost/sodo-search@~1.8/umd/main.css" data-sodo-search="https://cisco-talos-blog.ghost.io/" data-locale="en" crossorigin="anonymous"></script>
    
    <link href="https://blog.talosintelligence.com/webmentions/receive/" rel="webmention">
    <script defer src="/public/cards.min.js?v=94d1fb2008"></script><style>:root {--ghost-accent-color: #006db6;}</style>
    <link rel="stylesheet" type="text/css" href="/public/cards.min.css?v=94d1fb2008">
    <style type='text/css'>
    img[src*="icon_check_white.svg"] { width: 20px; margin-left: 0px; margin-right: auto; }
    
    #ghost-portal-root { display: none; }
</style>
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-F45RVJG3BK"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-F45RVJG3BK');
</script>
</head>

<body class="post-template tag-vulnerability-deep-dive">

    <div id="mobile-page-header" class="desktop-hide">
    <h1>Cisco Talos Blog</h1>
</div>

<nav id="nav">
    <input id="nav-trigger" class="nav-trigger" type="checkbox"/>
    <label for="nav-trigger">
        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="22px" height="16px" viewBox="0 0 22 16">
            <g id="menu-icon">
                <path fill="#FFFFFF" d="M20.5,3h-19C0.672,3,0,2.329,0,1.5S0.672,0,1.5,0h19C21.328,0,22,0.671,22,1.5S21.328,3,20.5,3z"></path>
                <path fill="#FFFFFF" d="M20.5,9.5h-19C0.672,9.5,0,8.828,0,8c0-0.829,0.672-1.5,1.5-1.5h19C21.328,6.5,22,7.171,22,8   C22,8.828,21.328,9.5,20.5,9.5z"></path>
                <path fill="#FFFFFF" d="M20.5,16h-19C0.672,16,0,15.328,0,14.5S0.672,13,1.5,13h19c0.828,0,1.5,0.672,1.5,1.5S21.328,16,20.5,16z"></path>
            </g>
        </svg>
    </label>
    <div id="top-nav-bar">
    </div>

    <div id="navigation">
        <div class="navigation-logos-wrapper">
            <div id="talos-logo-wrapper">
                <a class="navbar-brand" href="https://talosintelligence.com">
                </a>
            </div>
        </div>
        <div class="navigation-links-wrapper">
            <ul class="main-nav-list">
                <li class="nav-item">
                    <div class="primary-link-wrapper">
                        <a class="primary_nav_link" href="https://talosintelligence.com/reputation">
                            <div class="mobile-nav-icon"><!-- Generator: Adobe Illustrator 24.2.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 20 20" height="20px" width="20px" style="enable-background:new 0 0 20 20;" xml:space="preserve">
                            <style type="text/css">
                                .white{fill:#FFFFFF;}
                            </style>
                            <g>
                                <path class="white" d="M19.5,9.5h-1.1c-0.3-4.2-3.6-7.6-7.8-7.8V0.5C10.5,0.2,10.3,0,10,0l0,0C9.7,0,9.5,0.2,9.5,0.5l0,0v1.1   C5.3,1.9,1.9,5.3,1.6,9.5H0.5C0.2,9.5,0,9.7,0,10s0.2,0.5,0.5,0.5l0,0h1.1c0.3,4.2,3.6,7.6,7.8,7.8v1.1c0,0.3,0.2,0.5,0.5,0.5l0,0   c0.3,0,0.5-0.2,0.5-0.5l0,0v-1.1c4.2-0.3,7.6-3.6,7.8-7.8h1.1c0.3,0,0.5-0.2,0.5-0.5C20,9.7,19.8,9.5,19.5,9.5 M16.6,10.5h0.7   c-0.3,3.6-3.2,6.5-6.8,6.8v-0.8c0-0.3-0.2-0.5-0.5-0.5l0,0c-0.3,0-0.5,0.2-0.5,0.5v0.8C5.8,17,3,14.2,2.7,10.5h0.8   C3.8,10.5,4,10.3,4,10S3.8,9.5,3.5,9.5l0,0H2.7C3,5.8,5.8,3,9.5,2.7v0.8C9.5,3.7,9.7,4,10,4l0,0c0.3,0,0.5-0.2,0.5-0.5V2.7   C14.2,3,17,5.8,17.3,9.5h-0.7c-0.3,0-0.5,0.2-0.5,0.5C16.1,10.3,16.3,10.5,16.6,10.5L16.6,10.5"></path>
                                                            <circle class="white" cx="10" cy="10" r="3.2"></circle>
                            </g>
                            </svg>
                            </div>
                            <span class="top-nav-link-text">
                                Intelligence Center
                            </span>
                        </a>
                    </div>
                    <input class="sub-nav-trigger" id="intelligence-sub-trigger" type="checkbox">
                    <label class="sub-nav-trigger-label" for="intelligence-sub-trigger">
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="48.167px" height="47.75px" viewBox="0 0 48.167 47.75">
                            <circle opacity="0.4" fill="none" stroke="#FFFFFF" stroke-miterlimit="10" cx="24.083" cy="23.875" r="22"></circle>
                            <g>
                                <circle fill="#FFFFFF" cx="24.083" cy="16.068" r="2.496"></circle>
                                <circle fill="#FFFFFF" cx="24.083" cy="23.875" r="2.496"></circle>
                                <circle fill="#FFFFFF" cx="24.083" cy="31.682" r="2.496"></circle>
                            </g>
                        </svg>

                    </label>
                    <ul class="sub-nav sub-nav-single-list">
                        <li class="desktop-hide">
                            <a class="mobile_nav_link" href="https://talosintelligence.com/reputation"><h1>Intelligence Center</h1>
                            </a></li>
                        <li class="desktop-hide">
                            <label class="subnav-back-button" for="intelligence-sub-trigger">BACK</label>
                        </li>
                        <li><a class="secondary_nav_link" href="https://talosintelligence.com/reputation_center">Intelligence Search</a></li>
                        <li><a class="secondary_nav_link" href="https://talosintelligence.com/reputation_center/email_rep">Email &amp; Spam Trends</a></li>
                    </ul>
                    <div class="desktop-hide subnav-overlay"><!-- Generator: Adobe Illustrator 24.2.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 20 20" height="20px" width="20px" style="enable-background:new 0 0 20 20;" xml:space="preserve">
                        <style type="text/css">
                            .white{fill:#FFFFFF;}
                        </style>
                                                <g>
                            <path class="white" d="M19.5,9.5h-1.1c-0.3-4.2-3.6-7.6-7.8-7.8V0.5C10.5,0.2,10.3,0,10,0l0,0C9.7,0,9.5,0.2,9.5,0.5l0,0v1.1   C5.3,1.9,1.9,5.3,1.6,9.5H0.5C0.2,9.5,0,9.7,0,10s0.2,0.5,0.5,0.5l0,0h1.1c0.3,4.2,3.6,7.6,7.8,7.8v1.1c0,0.3,0.2,0.5,0.5,0.5l0,0   c0.3,0,0.5-0.2,0.5-0.5l0,0v-1.1c4.2-0.3,7.6-3.6,7.8-7.8h1.1c0.3,0,0.5-0.2,0.5-0.5C20,9.7,19.8,9.5,19.5,9.5 M16.6,10.5h0.7   c-0.3,3.6-3.2,6.5-6.8,6.8v-0.8c0-0.3-0.2-0.5-0.5-0.5l0,0c-0.3,0-0.5,0.2-0.5,0.5v0.8C5.8,17,3,14.2,2.7,10.5h0.8   C3.8,10.5,4,10.3,4,10S3.8,9.5,3.5,9.5l0,0H2.7C3,5.8,5.8,3,9.5,2.7v0.8C9.5,3.7,9.7,4,10,4l0,0c0.3,0,0.5-0.2,0.5-0.5V2.7   C14.2,3,17,5.8,17.3,9.5h-0.7c-0.3,0-0.5,0.2-0.5,0.5C16.1,10.3,16.3,10.5,16.6,10.5L16.6,10.5"></path>
                                                    <circle class="white" cx="10" cy="10" r="3.2"></circle>
                        </g>
                        </svg>
                    </div>
                </li>
                <li class="nav-item">
                    <div class="primary-link-wrapper">
                        <a class="primary_nav_link" href="https://talosintelligence.com/vulnerability_info"><div class="mobile-nav-icon"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="26px" height="20px" viewBox="0 0 26 20">
                            <g id="vuln-icon" class="nav-icon">
                                <path fill="#FFFFFF" d="M24.256,18.49L13.872,0.503C13.692,0.192,13.36,0,13,0c-0.359,0-0.692,0.192-0.872,0.503L1.744,18.49  c-0.18,0.312-0.18,0.695,0,1.006C1.924,19.809,2.257,20,2.616,20h20.769c0.359,0,0.691-0.191,0.871-0.504  C24.436,19.186,24.436,18.803,24.256,18.49 M14.268,18.215h-2.533v-1.85h2.533V18.215z M14.268,15.441h-2.533L10.89,6.515h4.222  L14.268,15.441z"></path>
                            </g>
                        </svg>
                        </div>
                            <span class="top-nav-link-text">
                            Vulnerability Research
                            </span>
                        </a></div>
                    <input class="sub-nav-trigger" id="vuln-sub-trigger" type="checkbox">
                    <label class="sub-nav-trigger-label" for="vuln-sub-trigger">
                        <div class="mobile-nav-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="48.167px" height="47.75px" viewBox="0 0 48.167 47.75">
                            <circle opacity="0.4" fill="none" stroke="#FFFFFF" stroke-miterlimit="10" cx="24.083" cy="23.875" r="22"></circle>
                            <g>
                                <circle fill="#FFFFFF" cx="24.083" cy="16.068" r="2.496"></circle>
                                <circle fill="#FFFFFF" cx="24.083" cy="23.875" r="2.496"></circle>
                                <circle fill="#FFFFFF" cx="24.083" cy="31.682" r="2.496"></circle>
                            </g>
                        </svg>
                        </div>
                    </label>
                    <ul class="sub-nav sub-nav-single-list">
                        <li class="desktop-hide">
                            <a href="https://talosintelligence.com/vulnerability_info"><h1>Vulnerability Research</h1>
                            </a></li>
                        <li class="desktop-hide">
                            <label class="subnav-back-button" for="vuln-sub-trigger">BACK</label>
                        </li>
                        <li><a class="vulnerabilty-info-nav-link" href="https://talosintelligence.com/vulnerability_reports">Vulnerability Reports</a></li>
                        <li><a class="vulnerabilty-info-nav-link" href="https://talosintelligence.com/ms_advisories">Microsoft Advisories</a></li>
                    </ul>
                    <div class="desktop-hide subnav-overlay">
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="26px" height="20px" viewBox="0 0 26 20">
                        <g id="vuln-icon" class="nav-icon">
                            <path fill="#FFFFFF" d="M24.256,18.49L13.872,0.503C13.692,0.192,13.36,0,13,0c-0.359,0-0.692,0.192-0.872,0.503L1.744,18.49  c-0.18,0.312-0.18,0.695,0,1.006C1.924,19.809,2.257,20,2.616,20h20.769c0.359,0,0.691-0.191,0.871-0.504  C24.436,19.186,24.436,18.803,24.256,18.49 M14.268,18.215h-2.533v-1.85h2.533V18.215z M14.268,15.441h-2.533L10.89,6.515h4.222  L14.268,15.441z"></path>
                        </g>
                        </svg>
                    </div>
                </li>


               <li class="nav-item">
                   <div class="primary-link-wrapper">
                        <a class="primary_nav_link" href="https://talosintelligence.com/incident_response">
                           <div class="mobile-nav-icon">
                               <svg xmlns="http://www.w3.org/2000/svg" width="111.588" height="148.311" viewBox="0 0 111.588 148.311">
                                    <path d="M1.181,128.446v15.7a4.167,4.167,0,0,0,4.167,4.167h100.9a4.167,4.167,0,0,0,4.167-4.167v-15.7a4.167,4.167,0,0,0-4.167-4.167H5.348a4.167,4.167,0,0,0-4.167,4.166M55.8,63.109a3.277,3.277,0,1,1,0,6.553c-10.344,0-20.755,8.578-20.755,18.57a3.277,3.277,0,1,1-6.554,0C28.489,73.947,41.93,63.109,55.8,63.109Zm0-12.016c-21.787,0-39.325,17.81-39.325,39.937v26.7H95.122V91.03c0-22.128-17.537-39.937-39.324-39.937m52.365-38.3a3.291,3.291,0,0,0-2.254,1.024L88.432,31.294a3.283,3.283,0,0,0,4.642,4.644l17.478-17.479a3.278,3.278,0,0,0-2.389-5.666m-105.138,0a3.276,3.276,0,0,0-1.98,5.666L18.522,35.938a3.283,3.283,0,0,0,4.643-4.644L5.687,13.817A3.255,3.255,0,0,0,3.025,12.793ZM55.389.026a3.276,3.276,0,0,0-2.867,3.345V19.642a3.277,3.277,0,1,0,6.554,0V3.371A3.283,3.283,0,0,0,55.389.026Z" fill="#fff"></path>
                                </svg>
                            </div>
                            <span class="top-nav-link-text">
                                Incident Response
                            </span>
                       </a>
                   </div>
                   <input class="sub-nav-trigger" id="ir-sub-trigger" type="checkbox">
                   <label class="sub-nav-trigger-label" for="ir-sub-trigger">
                       <div class="mobile-nav-icon">
                           <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="48.167px" height="47.75px" viewBox="0 0 48.167 47.75">
                                <circle opacity="0.4" fill="none" stroke="#FFFFFF" stroke-miterlimit="10" cx="24.083" cy="23.875" r="22"></circle>
                               <g>
                                <circle fill="#FFFFFF" cx="24.083" cy="16.068" r="2.496"></circle>
                                <circle fill="#FFFFFF" cx="24.083" cy="23.875" r="2.496"></circle>
                                <circle fill="#FFFFFF" cx="24.083" cy="31.682" r="2.496"></circle>
                               </g>
                           </svg>
                       </div>
                   </label>
                   <ul class="sub-nav sub-nav-single-list">
                       <li class="desktop-hide">
                           <a href="/incident_response">
                               <h1>Incident Response</h1>
                           </a>
                        </li>
                       <li class="desktop-hide">
                           <label class="subnav-back-button" for="ir-sub-trigger">BACK</label>
                       </li>
                       <li>
                           <a class="secondary_nav_link" href="https://talosintelligence.com/incident_response/services#reactive-services">Reactive Services</a>
                       </li>
                       <li>
                           <a class="secondary_nav_link" href="https://talosintelligence.com/incident_response/services#proactive-services">Proactive Services</a></li>
                       <li>
                           <a href="https://talosintelligence.com/incident_response/contact">Emergency Support</a>
                        </li>
                   </ul>
                   <div class="desktop-hide subnav-overlay"><svg xmlns="http://www.w3.org/2000/svg" width="111.588" height="148.311" viewBox="0 0 111.588 148.311">
                     <path d="M1.181,128.446v15.7a4.167,4.167,0,0,0,4.167,4.167h100.9a4.167,4.167,0,0,0,4.167-4.167v-15.7a4.167,4.167,0,0,0-4.167-4.167H5.348a4.167,4.167,0,0,0-4.167,4.166M55.8,63.109a3.277,3.277,0,1,1,0,6.553c-10.344,0-20.755,8.578-20.755,18.57a3.277,3.277,0,1,1-6.554,0C28.489,73.947,41.93,63.109,55.8,63.109Zm0-12.016c-21.787,0-39.325,17.81-39.325,39.937v26.7H95.122V91.03c0-22.128-17.537-39.937-39.324-39.937m52.365-38.3a3.291,3.291,0,0,0-2.254,1.024L88.432,31.294a3.283,3.283,0,0,0,4.642,4.644l17.478-17.479a3.278,3.278,0,0,0-2.389-5.666m-105.138,0a3.276,3.276,0,0,0-1.98,5.666L18.522,35.938a3.283,3.283,0,0,0,4.643-4.644L5.687,13.817A3.255,3.255,0,0,0,3.025,12.793ZM55.389.026a3.276,3.276,0,0,0-2.867,3.345V19.642a3.277,3.277,0,1,0,6.554,0V3.371A3.283,3.283,0,0,0,55.389.026Z" fill="#fff"></path>
                   </svg>
                </div>
               </li>





                <li class="nav-item">
                    <a class="primary_nav_link" href="https://blog.talosintelligence.com">
                        <div class="mobile-nav-icon">
                        <!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" width="260px" height="296.5px" viewBox="0 0 260 296.5" enable-background="new 0 0 260 296.5" xml:space="preserve">
                        <path fill="#FFFFFF" d="M243.586,42.404h-14.448c-0.943-4.513-3.143-8.813-6.616-12.33L201.793,9.098  c-4.7-4.757-10.972-7.377-17.66-7.377c-6.578,0-12.777,2.547-17.457,7.173l-33.875,33.511H17.586c-6.6,0-12,5.399-12,12V226.28  c0,6.6,5.4,12,12,12H153.83l84.21,56.278l-27.448-56.278h32.994c6.6,0,12-5.4,12-12V54.404  C255.586,47.804,250.186,42.404,243.586,42.404z M214.662,48.045c-0.01,0.2-0.021,0.399-0.044,0.599  c-0.008,0.069-0.021,0.139-0.031,0.207c-0.046,0.345-0.113,0.688-0.196,1.026c-0.034,0.137-0.063,0.273-0.103,0.408  c-0.039,0.135-0.087,0.267-0.133,0.399c-0.051,0.151-0.102,0.302-0.16,0.45c-0.049,0.126-0.105,0.249-0.16,0.373  c-0.068,0.153-0.139,0.307-0.216,0.457c-0.059,0.116-0.12,0.23-0.184,0.345c-0.088,0.157-0.181,0.312-0.278,0.465  c-0.065,0.104-0.13,0.206-0.2,0.308c-0.115,0.168-0.239,0.33-0.366,0.492c-0.064,0.081-0.124,0.165-0.19,0.244  c-0.199,0.238-0.409,0.472-0.635,0.694L82.458,182.308l-47.932,12.871l13.427-47.74L177.223,19.561  c1.917-1.895,4.414-2.84,6.911-2.84c2.534,0,5.068,0.975,6.99,2.92l20.726,20.974c0.545,0.552,1.002,1.156,1.39,1.79  c0.574,0.938,0.975,1.951,1.206,2.993c0.004,0.021,0.01,0.04,0.014,0.06c0.049,0.226,0.086,0.453,0.119,0.682  c0.008,0.06,0.017,0.118,0.024,0.178c0.026,0.211,0.045,0.424,0.058,0.636c0.004,0.077,0.007,0.153,0.009,0.23  c0.007,0.203,0.011,0.407,0.005,0.61C214.673,47.877,214.666,47.961,214.662,48.045z"></path>
                        </svg>
                    </div>
                        <span class="top-nav-link-text">Blog</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="primary_nav_link" href="https://support.talosintelligence.com">
                        <div class="mobile-nav-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" width="26px" height="20px" viewBox="0 0 123.17 159.292">
                            <path d="M61.59,0,0,17.069v85.32c0,23.472,61.59,56.9,61.59,56.9s61.58-36.288,61.58-56.9V17.069Zm-.433,149.746C38.314,136.662,8.128,114.3,8.128,102.389V23.239l53.029-14.7Z" fill="#fff"></path>
                        </svg>
                        </div>
                        <span class="top-nav-link-text">Support</span>
                    </a>
                </li>
            </ul>


<!--                <li class="nav-item desktop-hide">-->
<!--                    <button class="search-button" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg> <span>Search Blog</span></button>-->
<!--                </li>-->

            <ul class="secondary-nav-list">
                <div class="more-desktop-link">
                    <div class="more-link-wrapper">
                        <span class="more-nav-link">
                            <div class="desktop-nav-icon more-menu-icon">
                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="22px" height="16px" viewBox="0 0 22 16">
                                <g id="menu-icon">
                                    <path fill="#FFFFFF" d="M20.5,3h-19C0.672,3,0,2.329,0,1.5S0.672,0,1.5,0h19C21.328,0,22,0.671,22,1.5S21.328,3,20.5,3z"></path>
                                    <path fill="#FFFFFF" d="M20.5,9.5h-19C0.672,9.5,0,8.828,0,8c0-0.829,0.672-1.5,1.5-1.5h19C21.328,6.5,22,7.171,22,8   C22,8.828,21.328,9.5,20.5,9.5z"></path>
                                    <path fill="#FFFFFF" d="M20.5,16h-19C0.672,16,0,15.328,0,14.5S0.672,13,1.5,13h19c0.828,0,1.5,0.672,1.5,1.5S21.328,16,20.5,16z"></path>
                                </g>
                                </svg>
                            </div>
                            <span class="top-nav-link-text top-nav-more-text">
                            More
                            </span>
                        </span>
                    </div>
                </div>
                <li class="nav-item more-text-link">
                    <div class="more-link-wrapper more-link-wrapper-mobile">
                        <span class="more-nav-link">
                            <div class="mobile-nav-icon"><!-- Generator: Adobe Illustrator 24.2.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 20 20" style="enable-background:new 0 0 20 20;" width="25px" height="25px" xml:space="preserve">
                                <style type="text/css">
                                    .white{fill:#FFFFFF;}
                                </style>
                                <path class="white" d="M19.4,17.1c0,0.1-0.1,0-0.2,0c0,0-1.3-0.9-2-1.4c-0.2-0.1-0.5-0.1-0.6,0.1c-0.3,0.3-0.6,0.8-0.9,1.3  c-0.1,0.2-0.1,0.5,0.1,0.6l2,1.5c0.1,0,0,0.1,0.1,0.2c0,0.1,0,0.1-0.1,0.2c-1.2,0.5-2.6,0.2-3.5-0.7c-0.8-0.9-1-2-0.7-3.1L4.5,6.5  c-1,0.3-2.3,0-3-0.9c-0.8-0.9-1.1-1.7-1-2.7c0-0.1,0-0.1,0.1-0.2c0.1,0,0.2,0.1,0.2,0.1l2,1.5C3,4.4,3.3,4.5,3.4,4.2  c0,0,0.5-0.8,0.9-1.3c0.1-0.2,0.1-0.5-0.1-0.6L2.3,0.9c-0.1,0,0-0.1-0.1-0.3c0-0.1,0-0.1,0.1-0.2C3.5-0.1,5,0.2,5.8,1.1  c0.8,0.9,1,2,0.7,3.1l9.1,9.3c1-0.3,2.3,0,3,0.9c0.7,0.7,0.9,1.5,0.9,2.5C19.5,16.9,19.5,17,19.4,17.1z"></path>
                                </svg>
                            </div>
                            <span class="top-nav-link-text top-nav-more-text">
                            Security Resources
                            </span>
                        </span>
                    </div>
                    <input class="sub-nav-trigger" id="security-resources-sub-trigger" type="checkbox">
                    <label class="sub-nav-trigger-label" for="security-resources-sub-trigger">
                        <div class="mobile-nav-icon"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="48.167px" height="47.75px" viewBox="0 0 48.167 47.75">
                            <circle opacity="0.4" fill="none" stroke="#FFFFFF" stroke-miterlimit="10" cx="24.083" cy="23.875" r="22"></circle>
                            <g>
                                <circle fill="#FFFFFF" cx="24.083" cy="16.068" r="2.496"></circle>
                                <circle fill="#FFFFFF" cx="24.083" cy="23.875" r="2.496"></circle>
                                <circle fill="#FFFFFF" cx="24.083" cy="31.682" r="2.496"></circle>
                            </g>
                        </svg>
                        </div>
                    </label>
                    <div class="sub-nav sub-nav-multiple-list sub-nav-multiple-list-left">
                        <div class="sub-nav-multiple-wrapper">
                            <div class="sub-nav-list-top-of-mobile-wrapper">
                                <h1 class="sub-nav-list-header sub-nav-list-top-of-mobile">Security Resources</h1>
                                <ul class="sub-nav-list">
                                    <li class="desktop-hide">
                                        <label class="subnav-back-button" for="security-resources-sub-trigger">BACK</label>
                                    </li>
                                </ul>
                            </div>
                            <div class="sub-nav-list-item-wrapper">
                                <span class="sub-nav-desktop-header uppercase">Security Resources</span>
                                <ul class="sub-nav-list">
                                    <li>
                                        <a href="https://talosintelligence.com/software"><span>Open Source Security Tools</span>
                                        </a></li>
                                    <li>
                                        <a href="https://talosintelligence.com/categories"><span>Intelligence Categories Reference</span>
                                        </a></li>
                                    <li>
                                        <a href="https://talosintelligence.com/secure-endpoint-naming"><span>Secure Endpoint Naming Reference</span>
                                        </a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="desktop-hide subnav-overlay"><!-- Generator: Adobe Illustrator 24.2.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 20 20" style="enable-background:new 0 0 20 20;" width="25px" height="25px" xml:space="preserve">
                        <style type="text/css">
                            .white{fill:#FFFFFF;}
                        </style>
                                                <path class="white" d="M19.4,17.1c0,0.1-0.1,0-0.2,0c0,0-1.3-0.9-2-1.4c-0.2-0.1-0.5-0.1-0.6,0.1c-0.3,0.3-0.6,0.8-0.9,1.3  c-0.1,0.2-0.1,0.5,0.1,0.6l2,1.5c0.1,0,0,0.1,0.1,0.2c0,0.1,0,0.1-0.1,0.2c-1.2,0.5-2.6,0.2-3.5-0.7c-0.8-0.9-1-2-0.7-3.1L4.5,6.5  c-1,0.3-2.3,0-3-0.9c-0.8-0.9-1.1-1.7-1-2.7c0-0.1,0-0.1,0.1-0.2c0.1,0,0.2,0.1,0.2,0.1l2,1.5C3,4.4,3.3,4.5,3.4,4.2  c0,0,0.5-0.8,0.9-1.3c0.1-0.2,0.1-0.5-0.1-0.6L2.3,0.9c-0.1,0,0-0.1-0.1-0.3c0-0.1,0-0.1,0.1-0.2C3.5-0.1,5,0.2,5.8,1.1  c0.8,0.9,1,2,0.7,3.1l9.1,9.3c1-0.3,2.3,0,3,0.9c0.7,0.7,0.9,1.5,0.9,2.5C19.5,16.9,19.5,17,19.4,17.1z"></path>
                        </svg>
                    </div>
                </li>
                <li class="nav-item">
                    <div class="more-link-wrapper more-link-wrapper-mobile">
                        <span class="more-nav-link">
                            <div class="mobile-nav-icon"><!-- Generator: Adobe Illustrator 24.2.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 20 20" width="25px" height="25px" style="enable-background:new 0 0 20 20;" xml:space="preserve">
                                <style type="text/css">
                                    .sticoncomment{fill-rule:evenodd;clip-rule:evenodd;fill:#FFFFFF;}
                                </style>
                                <path class="sticoncomment" d="M13.6,7.1H6.4c-0.3,0-0.6-0.3-0.6-0.6c0-0.3,0.3-0.6,0.6-0.6l7.2,0c0.3,0,0.6,0.3,0.6,0.6  C14.2,6.8,13.9,7.1,13.6,7.1L13.6,7.1z M13.6,9.4H6.4c-0.3,0-0.6-0.3-0.6-0.6s0.3-0.6,0.6-0.6l7.2,0c0.3,0,0.6,0.3,0.6,0.6  C14.2,9.2,13.9,9.4,13.6,9.4L13.6,9.4z M11.5,11.7H6.4c-0.3,0-0.6-0.3-0.6-0.6c0-0.3,0.3-0.6,0.6-0.6h5.1c0.3,0,0.6,0.3,0.6,0.6  C12.1,11.5,11.8,11.7,11.5,11.7z M15.8,3H4.2C3.5,3,3,3.5,3,4.2V17l2.8-2.3h10c0.6,0,1.2-0.5,1.2-1.2V4.2C17,3.5,16.5,3,15.8,3  L15.8,3z"></path>
                                </svg>
                            </div>
                            <span class="top-nav-link-text top-nav-more-text">
                            Media
                            </span>
                        </span>
                    </div>
                    <input class="sub-nav-trigger" id="media-sub-trigger" type="checkbox">
                    <label class="sub-nav-trigger-label" for="media-sub-trigger">
                        <div class="mobile-nav-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="48.167px" height="47.75px" viewBox="0 0 48.167 47.75">
                            <circle opacity="0.4" fill="none" stroke="#FFFFFF" stroke-miterlimit="10" cx="24.083" cy="23.875" r="22"></circle>
                            <g>
                                <circle fill="#FFFFFF" cx="24.083" cy="16.068" r="2.496"></circle>
                                <circle fill="#FFFFFF" cx="24.083" cy="23.875" r="2.496"></circle>
                                <circle fill="#FFFFFF" cx="24.083" cy="31.682" r="2.496"></circle>
                            </g>
                            </svg>
                        </div>
                    </label>
                    <div class="sub-nav sub-nav-multiple-list sub-nav-multiple-list-middle">
                        <div class="sub-nav-multiple-wrapper">
                            <div class="sub-nav-list-top-of-mobile-wrapper">
                                <h1 class="sub-nav-list-header sub-nav-list-top-of-mobile">Media</h1>
                                <ul class="sub-nav-list">
                                    <li class="desktop-hide">
                                        <label class="subnav-back-button" for="media-sub-trigger">BACK</label>
                                    </li>
                                </ul>
                            </div>
                            <div class="sub-nav-list-item-wrapper">
                                <span class="sub-nav-desktop-header uppercase">Media</span>
                                <ul class="sub-nav-list">
                                    <li>
                                        <a href="https://blog.talosintelligence.com"><span>Talos Intelligence Blog</span>
                                        </a></li>
                                    <li>
                                        <a href="https://blog.talosintelligence.com/category/threat-source-newsletter/"><span>Threat Source Newsletter</span>
                                        </a></li>
                                    <li>
                                        <a href="https://talosintelligence.com/podcasts/shows/beers_with_talos"><span>Beers with Talos Podcast</span>
                                        </a></li>
                                    <li>
                                        <a href="https://talosintelligence.com/podcasts/shows/talos_takes"><span>Talos Takes Podcast</span>
                                        </a></li>
                                    <li>
                                        <a target="_blank" href="https://www.youtube.com/channel/UCPZ1DtzQkStYBSG3GTNoyfg/featured"><span>Talos Videos</span>
                                        </a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="desktop-hide subnav-overlay"><!-- Generator: Adobe Illustrator 24.2.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 20 20" width="25px" height="25px" style="enable-background:new 0 0 20 20;" xml:space="preserve">
                        <style type="text/css">
                            .sticoncomment{fill-rule:evenodd;clip-rule:evenodd;fill:#FFFFFF;}
                        </style>
                        <path class="sticoncomment" d="M13.6,7.1H6.4c-0.3,0-0.6-0.3-0.6-0.6c0-0.3,0.3-0.6,0.6-0.6l7.2,0c0.3,0,0.6,0.3,0.6,0.6  C14.2,6.8,13.9,7.1,13.6,7.1L13.6,7.1z M13.6,9.4H6.4c-0.3,0-0.6-0.3-0.6-0.6s0.3-0.6,0.6-0.6l7.2,0c0.3,0,0.6,0.3,0.6,0.6  C14.2,9.2,13.9,9.4,13.6,9.4L13.6,9.4z M11.5,11.7H6.4c-0.3,0-0.6-0.3-0.6-0.6c0-0.3,0.3-0.6,0.6-0.6h5.1c0.3,0,0.6,0.3,0.6,0.6  C12.1,11.5,11.8,11.7,11.5,11.7z M15.8,3H4.2C3.5,3,3,3.5,3,4.2V17l2.8-2.3h10c0.6,0,1.2-0.5,1.2-1.2V4.2C17,3.5,16.5,3,15.8,3  L15.8,3z"></path>
                        </svg>
                    </div>
                </li>
                <li class="nav-item">
                    <div class="more-link-wrapper more-link-wrapper-mobile">
                        <span class="more-nav-link">
                            <div class="mobile-nav-icon">
                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="25px" height="25px" viewBox="0 0 55 55">
                                <g>
                                    <g class="mobile-nav-home">
                                        <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M45.201,12.343c0.378,0.48,0.758,0.925,1.096,1.401    c2.975,4.207,4.543,8.876,4.494,14.044c-0.05,5.452-1.643,10.386-5.186,14.593c-3.484,4.133-7.929,6.73-13.182,7.895    c-6.313,1.398-12.216,0.275-17.695-3.131c-0.441-0.273-0.847-0.6-1.266-0.904c-0.11-0.078-0.208-0.174-0.337-0.287    c0.127-0.141,0.246-0.27,0.366-0.398c0.887-0.949,1.765-1.904,2.663-2.844c0.114-0.119,0.321-0.217,0.485-0.217    c3.658-0.006,7.318,0,10.975,0.008c3.458,0.006,6.913,0.02,10.369,0.02c0.957,0,1.871-0.193,2.62-0.844    c0.797-0.693,1.157-1.596,1.157-2.643c0.001-7.533,0.003-15.067-0.005-22.601c-0.002-0.309,0.088-0.524,0.3-0.743    C43.098,14.598,44.127,13.49,45.201,12.343"></path>
                                        <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M41.402,8.822c-0.99,1.027-1.994,2.021-2.935,3.072    c-0.312,0.35-0.616,0.416-1.036,0.415c-6.98-0.009-13.957-0.007-20.938-0.007c-2.039,0-3.561,1.514-3.561,3.557    c0,6.504,0.002,13.008,0.006,19.512c0.002,0.973,0.011,1.943,0.004,2.914c0,0.133-0.04,0.301-0.127,0.393    c-1.069,1.162-2.15,2.314-3.229,3.469c-0.021,0.023-0.052,0.039-0.109,0.08c-0.159-0.188-0.323-0.369-0.471-0.562    c-2.535-3.348-4.119-7.102-4.605-11.268c-0.61-5.229,0.194-10.229,2.835-14.839c2.669-4.664,6.655-7.805,11.618-9.75    c3.205-1.257,6.533-1.852,9.977-1.621c4.478,0.298,8.553,1.754,12.227,4.325c0.101,0.072,0.197,0.151,0.291,0.229    C41.364,8.755,41.374,8.778,41.402,8.822"></path>
                                        <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M39.799,12.47c0.873-0.911,1.749-1.829,2.676-2.797    c0.605,0.564,1.195,1.112,1.816,1.691c-0.941,0.985-1.817,1.903-2.703,2.83c-0.276-0.339-0.511-0.688-0.807-0.975    C40.492,12.941,40.145,12.728,39.799,12.47"></path>
                                        <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M10.35,43.279c0.969-1.016,1.885-1.977,2.76-2.893    c0.213,0.369,0.376,0.762,0.639,1.072c0.265,0.312,0.627,0.539,0.98,0.832c-0.853,0.891-1.713,1.791-2.624,2.746    C11.513,44.445,10.939,43.869,10.35,43.279"></path>
                                    </g>
                                </g>
                                </svg>
                            </div>
                            <span class="top-nav-link-text top-nav-more-text">
                            Company
                            </span>
                        </span>
                    </div>
                    <input class="sub-nav-trigger" id="company-sub-trigger" type="checkbox">
                    <label class="sub-nav-trigger-label" for="company-sub-trigger">
                        <div class="mobile-nav-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="48.167px" height="47.75px" viewBox="0 0 48.167 47.75">
                            <circle opacity="0.4" fill="none" stroke="#FFFFFF" stroke-miterlimit="10" cx="24.083" cy="23.875" r="22"></circle>
                            <g>
                                <circle fill="#FFFFFF" cx="24.083" cy="16.068" r="2.496"></circle>
                                <circle fill="#FFFFFF" cx="24.083" cy="23.875" r="2.496"></circle>
                                <circle fill="#FFFFFF" cx="24.083" cy="31.682" r="2.496"></circle>
                            </g>
                        </svg>
                        </div>
                    </label>
                    <div class="sub-nav sub-nav-multiple-list sub-nav-multiple-list-right">
                        <div class="sub-nav-multiple-wrapper">
                            <div class="sub-nav-list-top-of-mobile-wrapper">
                                <h1 class="sub-nav-list-header sub-nav-list-top-of-mobile">Company</h1>
                                <ul class="sub-nav-list">
                                    <li class="desktop-hide">
                                        <label class="subnav-back-button" for="company-sub-trigger">BACK</label>
                                    </li>
                                </ul>
                            </div>
                            <div class="sub-nav-list-item-wrapper">
                                <span class="sub-nav-desktop-header uppercase">Company</span>
                                <ul class="sub-nav-list">
                                    <li>
                                        <a href="https://talosintelligence.com/about"><span>About Talos</span>
                                        </a></li>
                                    <li>
                                        <a href="https://talosintelligence.com/careers"><span>Careers</span>
                                        </a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="desktop-hide subnav-overlay"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="25px" height="25px" viewBox="0 0 55 55">
                        <g>
                            <g class="mobile-nav-home">
                                <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M45.201,12.343c0.378,0.48,0.758,0.925,1.096,1.401    c2.975,4.207,4.543,8.876,4.494,14.044c-0.05,5.452-1.643,10.386-5.186,14.593c-3.484,4.133-7.929,6.73-13.182,7.895    c-6.313,1.398-12.216,0.275-17.695-3.131c-0.441-0.273-0.847-0.6-1.266-0.904c-0.11-0.078-0.208-0.174-0.337-0.287    c0.127-0.141,0.246-0.27,0.366-0.398c0.887-0.949,1.765-1.904,2.663-2.844c0.114-0.119,0.321-0.217,0.485-0.217    c3.658-0.006,7.318,0,10.975,0.008c3.458,0.006,6.913,0.02,10.369,0.02c0.957,0,1.871-0.193,2.62-0.844    c0.797-0.693,1.157-1.596,1.157-2.643c0.001-7.533,0.003-15.067-0.005-22.601c-0.002-0.309,0.088-0.524,0.3-0.743    C43.098,14.598,44.127,13.49,45.201,12.343"></path>
                                <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M41.402,8.822c-0.99,1.027-1.994,2.021-2.935,3.072    c-0.312,0.35-0.616,0.416-1.036,0.415c-6.98-0.009-13.957-0.007-20.938-0.007c-2.039,0-3.561,1.514-3.561,3.557    c0,6.504,0.002,13.008,0.006,19.512c0.002,0.973,0.011,1.943,0.004,2.914c0,0.133-0.04,0.301-0.127,0.393    c-1.069,1.162-2.15,2.314-3.229,3.469c-0.021,0.023-0.052,0.039-0.109,0.08c-0.159-0.188-0.323-0.369-0.471-0.562    c-2.535-3.348-4.119-7.102-4.605-11.268c-0.61-5.229,0.194-10.229,2.835-14.839c2.669-4.664,6.655-7.805,11.618-9.75    c3.205-1.257,6.533-1.852,9.977-1.621c4.478,0.298,8.553,1.754,12.227,4.325c0.101,0.072,0.197,0.151,0.291,0.229    C41.364,8.755,41.374,8.778,41.402,8.822"></path>
                                <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M39.799,12.47c0.873-0.911,1.749-1.829,2.676-2.797    c0.605,0.564,1.195,1.112,1.816,1.691c-0.941,0.985-1.817,1.903-2.703,2.83c-0.276-0.339-0.511-0.688-0.807-0.975    C40.492,12.941,40.145,12.728,39.799,12.47"></path>
                                <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M10.35,43.279c0.969-1.016,1.885-1.977,2.76-2.893    c0.213,0.369,0.376,0.762,0.639,1.072c0.265,0.312,0.627,0.539,0.98,0.832c-0.853,0.891-1.713,1.791-2.624,2.746    C11.513,44.445,10.939,43.869,10.35,43.279"></path>
                            </g>
                        </g>
                    </svg>
                    </div>
                </li>
            </ul>
            <div class="nav-search-wrapper">
                <button class="search-button" data-ghost-search>
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
                </button>
            </div>
        </div>



    </div>
</nav>

    

    <main id="site-main">

            <div class="banner-content-wrapper">
                <div class="container">
                    <div class="row">
                            <div class="col vulnerability-deep-dive-graphic banner-post-graphic"></div>

                    </div>
                </div>
            </div>
                <div class="container-fluid">
                    <div class="row banner-bg-container banner-bg-2">
                        <div class="col left-bg-2"></div>
                        <div class="col right-bg-2"></div>
                    </div>
                </div>

            
        <div class="container-fluid">
            <div class="row main-content-row">
                <div class="col">
                    <div class="post-full-content">
                        
<article class="post tag-vulnerability-deep-dive featured no-image no-image blog-series-article">

    <h1 class="text-center">ReVault! When your SoC turns against you… deep dive edition</h1>

    <div class="text-center m-1">
        <div class="post-author">
            <span>By </span>
                <a href="https://blog.talosintelligence.com/author/philippe/">Philippe Laulheret</a>
        </div>

        <br/>
        <time class="post-datetime" datetime="August 9, 2025 09:00">
            Saturday, August 9, 2025 09:00
        </time>

        <div class="m-3">
                        <a href="https://blog.talosintelligence.com/category/vulnerability-deep-dive/" class="category primary-category">
                            Vulnerability Deep Dive
                        </a>
                            </div>
    </div>

    <section class="post-content-wrapper mt-5">
        <div class="post-content">
            <p>For a high-level overview of this research, you can refer to our <a href="https://blog.talosintelligence.com/revault-when-your-soc-turns-against-you/" rel="noreferrer">Vulnerability Spotlight</a>. This is the in-depth version that shares many more technical details. In this post, we’ll be covering the entire research process as well as providing technical explanations of the exploits behind the attack scenarios.</p><p><a href="https://www.dell.com/support/home/en-vc/drivers/driversdetails?driverid=twf65" rel="noreferrer">Dell ControlVault</a> is “a hardware-based security solution that provides a secure bank that stores your passwords, biometric templates, and security codes within the firmware.” A daughter board provides this functionality and performs these security features in firmware. Dell refers to the daughter board as a Unified Security Hub (USH), as it is used as a hub to run ControlVault (CV), connecting various security peripherals such as a fingerprint reader, smart card reader and NFC reader.</p><h1 id="why-target-controlvault3">Why target ControlVault3?</h1><p>Hindsight is 20/20 and in retrospect, there are plenty of valid reasons to look at it:</p><ul><li> There is no public research on this device. </li><li>It is used for security and enhanced logins and thus is used for sensitive functions. </li><li>It is found in countless Dell laptops and, in particular, places that seek this extra layer of security (e.g., finance, healthcare, government, etc.) are more likely to have it in their environment. </li></ul><p>But what really kickstarted this research project was spotting this target that seemed “promising.” What first caught our attention is that most of the Windows services involved with ControlVault3 are not Address Space Layout Randomization (ASLR)-enabled. This means easier exploitation, and possible technical debt in the codebase. Further, the setup bundle comes with multiple drivers and what appears to be a mix of clear text and encrypted firmware. This makes for an exciting challenge that calls for further investigation.</p><h2 id="making-a-plan">Making a plan</h2><p>When starting a vulnerability research project, it is good to have some ideas of what we’re trying to achieve. Let’s make a plan that will act as our North Star and guide our steps along the way:</p><ol><li>The main application is encrypted, and we want to see what this firmware hides. One of our first tasks should be to find a way to decrypt the application firmware.</li><li>This is a vulnerability research project and, as such, we need to understand how to interact with Control Vault, understand its attack surface, and look for vulnerabilities.</li><li>The Windows services run without ASLR and have SYSTEM privileges. Those could be standalone targets for local escalation of privilege (EoP) and/or may have interesting exploitation paths.</li></ol><h2 id="gathering-information">Gathering information</h2><p>Information gathering occurred throughout the project. However, to clarify this discussion, we’ll now summarize some of the early findings.</p><p>ControlVault is made by Broadcom and leverages their <a href="https://www.broadcom.com/products/embedded-and-networking-processors/secure/bcm5820x">5820X chip series</a>. Technically, we are only talking about ControlVault3 (or ControlVault3+), but there was a ControlVault2 and a ControlVault (1 being implied) that were using different hardware. The first mentions of ControlVault date back to 2009-2011.</p><p>Online research for the BCM5820X chip series yields minimal results, with this <a href="https://csrc.nist.gov/CSRC/media/projects/cryptographic-module-validation-program/documents/security-policies/140sp3920.pdf">NIST certification</a> being the only notable finding. This document clarifies the security posture of the chip and gives some insight into the operations of its cryptographic module.</p><p>Other useful resources are forum posts where power users talk about Control Vault, particularly when the power users discuss making it work on Linux. One post eventually lead to a <a href="https://git.launchpad.net/~oem-solutions-engineers/libfprint-2-tod1-broadcom/+git/libfprint-2-tod1-broadcom/">repository</a> providing official (but limited) Linux support. It is worth noting that one of the shared objects in this repository, “libfprint-2-tod-1-broadcom.so”, ships with debug symbols. This can help when reversing the ControlVault ecosystem.</p><p>Finally, for a physical representation, the USH board that connects to the laptop and runs the ControlVault firmware is shown below:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image.png" class="kg-image" alt="" loading="lazy" width="593" height="230"><figcaption><span style="white-space: pre-wrap;">Figure 1: Picture of a USH Board running ControlVault.</span></figcaption></figure><p>When connected inside the laptop, it looks like this (battery removed to show the board):</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-1.png" class="kg-image" alt="" loading="lazy" width="975" height="677" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-1.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-1.png 975w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 2: USH board (highlighted in orange) inside a Dell Latitude laptop.</span></figcaption></figure><h2 id="interesting-files-in-controlvault3-bundle">Interesting files in ControlVault3 bundle</h2><p>ControlVault comes with a lot of files. We cannot look at all of them at once, but there are a few that stick out, mainly the “bin” and “firmware” folders. The former contains the main services used to communicate with ControlVault and the associated shared objects, while the latter is used to push data to the device.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/BinFwFolders.png" class="kg-image" alt="" loading="lazy" width="466" height="320"><figcaption><i><em class="italic" style="white-space: pre-wrap;">Figure 3: Bin and firmware folders from the ControlVault3 installer.</em></i></figcaption></figure><p>The firmware folder is also particularly interesting as it contains what we can presume is the code running on the ControlVault device. If we look at the content of these files by running the “strings” command or by opening them in a hex editor, we find that the ones with “SBI” in their names are in plaintext, while the ones named “bcmCitadelXXX” appear to be either compressed or encrypted. From the information we gathered earlier, we know that “SBI” stands for “Secure Boot Image” and is part of the early stage of the device’s boot process; we can then guess the “bcmCitadelXXX” files are the main application firmware that gets started by the SBI.</p><h1 id="reversing-the-bootloader">Reversing the bootloader</h1><p>As the SBI files are in plaintext and we know from the Broadcom’s documentation that they are ARM code, we can have a look at one of them in our favorite disassembler/decompiler, which might help us figure out how to handle the application firmware itself.</p><h2 id="identifying-the-sbi-load-address">Identifying the SBI load address</h2><p>The usual first step is to identify the load address of this blob of data which, in our case, is 0x2400CC00. The data starts with a 0x400 bytes header, thus leading to a more reasonable 0x2400D000 base address for the actual start of the code.</p><p>To find this value, the trick is to first load the code at an arbitrary address and then look for absolute addresses (e.g., pointers to strings, addresses of functions, etc.) and play the guessing game while rebasing the firmware until everything lines up. The SBI firmware includes a lot of strings, so it’s fairly easy to spot when they are referenced properly. Alternatively, function pointers can also be useful and, conveniently, some can be found close to the start of the code, as an ARM vector table is placed there. This gives away the load address.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-2.png" class="kg-image" alt="" loading="lazy" width="975" height="621" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-2.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-2.png 975w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 4: Vector table and beginning of the code inside the SBI.</span></figcaption></figure><h2 id="determining-the-software-architecture">Determining the software architecture</h2><p>Here, we need to make a choice of what to focus on first. We can either try to map out the general architecture of the SBI and understand how it works or instead keep our eyes on the ball and look for how the application firmware is being decrypted. In practice, we did the latter, but let’s provide a few spoilers to make this easier to follow.</p><h2 id="functions-and-parameters-names">Functions and parameters names</h2><p>The firmware relies heavily on logging, which can leak function names, variables and some details about the logic of the code itself.</p><p>The firmware appears to be running a custom real-time operating system (RTOS) called Citadel RTOS. We can also find debug strings referring to OpenRTOS, which was likely used as a base to CitadelRTOS.</p><p>And as mentioned previously, the Linux implementation comes with debug symbols for the host API, which provides lots of data structures and enum values used by ControlVault.</p><h2 id="communication-with-the-firmware">Communication with the firmware</h2><p>Before going too far into reversing the SBI, let’s have a high-level overview of how communication occurs between host (Windows) and firmware.</p><p>Essentially, the USH board is connected to the laptop’s motherboard and appears as a USB device in the device manager. A driver, “cvusbdrv.sys”,<strong> </strong>creates a device file that can be opened from userland. Various DeviceIoControl commands can be used to manage and communicate with the device:</p><pre><code class="language-C">{
  IOCTL_SUBMIT = 0x5500E004,  // sends CV Command
  IOCTL_RESULT = 0x5500E008,  // result from CV Command
  IOCTL_HSREQ = 0x5500E00C, // Host Storage Request, used by bcmHostStorageService
  IOCTL_HCREQ = 0x5500E01C,  // Host Control Request, used by bcmHostControlService
  IOCTL_FPREQ = 0x5500E024,  // Fingerprint Request 
  IOCTL_CACHE_VER = 0x5500E028,  // Returned cached version string
  IOCTL_CLREQ = 0x5500E030, // Contactless Request (NFC)
};
</code></pre><p>Communicating with the driver can be made easier by using userland APIs. In particular, the “bcmbipdll.dll” file implements more than 160 high-level functions that can be used to send specific commands to the firmware. These functions are prefixed with “cv_” (e.g., “cv_open”, “cv_close”, “cv_create_object”, etc.) and are referenced as “CV Commands”. Behind the scenes, when invoking one of these commands, IOCTL_SUBMIT / IOCTL_RESULT is issued, and the relevant data is sent over USB to the firmware.</p><p>Upon receiving data from the USB endpoints, the firmware will process the data packets and route them to dedicated code paths. For CV commands, the data is passed to a function called “CvManager /CvManager_SBI” that dispatches the command to the function implementing it.</p><h3 id="example-manual-communication-with-controlvault">Example: Manual communication with ControlVault</h3><p>A simple Python script can be used to load “bcmbipdll.dll” and invoke its functions.</p><p>For instance, the following will retrieve the version string of the firmware:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-3.png" class="kg-image" alt="" loading="lazy" width="869" height="761" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-3.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-3.png 869w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 5: Python snippet to retrieve CV's version string.</span></figcaption></figure><p>The return value:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-4.png" class="kg-image" alt="" loading="lazy" width="979" height="190" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-4.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-4.png 979w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 6: Version string obtained from cv_get_ush_ver.</span></figcaption></figure><p>As a reminder, the Linux implementation of the host APIs (libfprint-2-tod1-broadcom/usr/lib/x86_64-linux-gnu/libfprint-2/tod-1/ libfprint-2-tod-1-broadcom.so) comes with debug symbols and thus can be used to identify the various structures and parameters involved in the invocation of each CV command.</p><p>We will revisit the communication mechanism in the “Exploiting a SYSTEM service” section, but for now, we can return to our original goal of figuring out how to decrypt the application firmware.</p><h2 id="finding-the-firmware-decryption-mechanism">Finding the firmware decryption mechanism</h2><p>We can search the strings inside the SBI to see if anything mentions decryption:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-5.png" class="kg-image" alt="" loading="lazy" width="672" height="191" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-5.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-5.png 672w"><figcaption><span style="white-space: pre-wrap;">Figure 7: Strings from the SBI firmware mentioning decryption.</span></figcaption></figure><p>As seen in the screenshot above, the USH_UPGRADE functionality mentions decryption failures. And indeed, this functionality is related to application firmware decryption. The USH_UPGRADE functionality is implemented by three CV commands:</p><ul><li>CV_CMD_FW_UPGRADE_START</li><li>CV_CMD_FW_UPGRADE_UPDATE</li><li> CV_CMD_FW_UPGRADE_COMPLETE</li></ul><p>Those commands are issued by the “cv_firmware_upgrade” function in “bcmbipdll.dll”.</p><p>The firmware update process is a little convoluted:</p>
<!--kg-card-begin: html-->
<ol>
  <li>The host will first flash a file called “bcm_cv_clear_scd.otp” solely composed of “0123456789abcdef” repeated many times. For that, it will use the “cv_flash_update” function.</li>
  <li>The host will call “cv_reboot_to_sbi” to restart in SBI mode.</li>
  <li>The host will send the CV_CMD_FW_UPGRADE_START command handled in the SBI by “ushFieldUpgradeStart”:</li>
  <ol type="a" start="1">
    <li>The SBI will try to load from Flash something called a Secure Code Descriptor (SCD) that contains key material (e.g., decryption key, IV, and RSA - public key) but will revert to hardcoded default if no SCD is available. This is what got flashed/erased during step 1.</li>
    </ol>
</ol>
<!--kg-card-end: html-->
<figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-10.png" class="kg-image" alt="" loading="lazy" width="975" height="461" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-10.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-10.png 975w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 8 Using hardcoded defaults during ushFieldUpgradeStart.</span></figcaption></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-11.png" class="kg-image" alt="" loading="lazy" width="975" height="106" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-11.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-11.png 975w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 9 Calling the decryption function.</span></figcaption></figure>
<!--kg-card-begin: html-->
<ol>
<ol type="a" start="2">
  <li>The host will send the first 0x2B0 bytes of the encrypted application firmware. This is an encrypted header defining the parameters of the soon-to-be installed firmware.</li>
  <li>The SBI will try to decrypt (AES-CBC), validate, and cryptographically verify
the header using key material from the SCD or the hardcoded defaults.</li>
  <li>Upon success, the SBI will generate new key material to be stored in a
different section of the SCD and used to store the firmware in an encrypted
form. This is because the SoC used by ControlVault can execute in place
(XIP) encrypted code thanks to its Secure Memory Access Unit (SMAU).</li>
</ol>
</ol>
<ol start="4">
  <li>Then, the host will send the rest of the firmware split into chunks of 0x100 bytes via the CV_CMD_FW_UPGRADE_UPDATE command handled in the SBI by the “ushFieldUpgradeUpdate” function.</li>
  <ol type="a" start="1">
    <li>The firmware chunks are decrypted using the same method, but instead of
using a default IV, the code relies on a custom function from the SMAU
device to generate an IV based upon the address of the memory block being
decrypted. <br>Note: The base address of this application firmware can be guessed from
reversing and is 0x63030000.</li>
</ol>
</ol>
<!--kg-card-end: html-->
<figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-12.png" class="kg-image" alt="" loading="lazy" width="975" height="354" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-12.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-12.png 975w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 10 Computation of address-based IV.</span></figcaption></figure>
<!--kg-card-begin: html-->
<ol>
<ol type="a" start="2">
  <li>A rolling hash (SHA256) of the decrypted blocks is kept for further validation.</li>
</ol>
</ol>
<ol start="5">
  <li>When done sending the encrypted firmware, the host will send the
CV_CMD_FW_UPGRADE_COMPLETE command handled in the SBI by the
“ushFieldUpgradeComplete” function.</li>
  <ol type="a" start="1">
    <li>The SBI will verify the signature of the firmware received based upon the
already verified header and the rolling hash that was computed while
decrypting firmware pages.</li>
    <li>Upon success, the new SCD will be encrypted and committed to flash using
a per-device AES key stored in the chip OTP fuses. </li>
    </ol>
</ol>
<!--kg-card-end: html-->
<p>Luckily, the hardcoded keys in the “bcmsbiCitadelA0_1.otp<strong>”</strong> file are the ones that were used to encrypt the application firmware, and by re-implementing the algorithm described above, we can successfully decrypt the application firmware and move on to our second objective: looking for vulnerabilities.</p><h1 id="attack-surface-mapping-and-vulnerability-research">Attack surface mapping and vulnerability research</h1><p>With a freshly decrypted firmware image, it’s easy to jump the gun and start reversing everything, but before we get into the deep end, we should stop and strategize. So, let’s have a look at the architecture of the system and the potential areas of interest:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-13.png" class="kg-image" alt="" loading="lazy" width="981" height="536" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-13.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-13.png 981w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 11: System architecture.</span></figcaption></figure><p>There are a few angles we can consider:</p><ul><li>From the host, could we send malicious data to corrupt the application firmware or the SBI code?</li><li>Could we tamper with the firmware itself and make it misbehave? </li><li>Could a malicious firmware image compromise the host? </li><li>What about the hardware peripherals? Could they be compromised or used to compromise the firmware?</li></ul><p>The research we’ve conducted explores the first three questions. The fourth one is a potential future research project. Answering the first question will help achieve the next two, so let’s start with this first one.</p><h2 id="finding-vulnerabilities-in-the-application-firmware">Finding vulnerabilities in the application firmware</h2><p>The application firmware accepts more than150 CV commands. This is a massive attack surface and there is a lot to look at. Most of these commands expect a “session” to be already established using the “cv_open” command. &nbsp;When the interaction is over, the “cv_close” function is used to terminate the session. Let’s look at how these two operate.</p><h3 id="cvopen-and-cvclose">cv_open and cv_close</h3><p>The prototype of “cv_open” is as such:</p><pre><code class="language-C">int __fastcall cv_open(cv_session_flags a1, cv_app_id *appId, cv_user_id *userId, int
*pHandle)
</code></pre><p>Its implementation is below:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-14.png" class="kg-image" alt="" loading="lazy" width="975" height="635" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-14.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-14.png 975w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 12: Call to cv_open.</span></figcaption></figure><p>We can see that memory is allocated (line 29), then a tag “SeSs” is written (line 36) as the first four bytes of the session object. After some more processing, the pointer to the session is returned as a handle (line 44) back to the host. The choice of using a pointer as a handle is already a little questionable as it leaks a heap address to the host, but let’s continue.</p><p>The prototype for “cv_close” is as follows:</p><pre><code class="language-C">int __fastcall cv_close(cv_session *)</code></pre><p>The function takes the pointer to the session we’ve obtained from “cv_open” and attempts to close it by doing the following:</p><ol><li>Validate the session (see below)</li><li>Erase the “SeSs” tag</li><li>Free the memory</li></ol><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-15.png" class="kg-image" alt="" loading="lazy" width="975" height="667" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-15.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-15.png 975w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 13: Implementation of cv_close.</span></figcaption></figure><p>Meanwhile, the “validate_session” function will:</p><ol><li>Verify the pointer provided is within the CV_HEAP</li><li>Verify the first 4 bytes match the “SeSs” tag</li><li>Extra checks irrelevant for us</li></ol><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-16.png" class="kg-image" alt="" loading="lazy" width="775" height="399" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-16.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-16.png 775w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 14: Session validation.</span></figcaption></figure><p>This is particularly interesting because, assuming one can place some arbitrary data on the heap, it then becomes easy to forge a fake session and free it, corrupting heap memory in the process. This issue was reported as <a href="https://talosintelligence.com/vulnerability_reports/TALOS-2024-2129" rel="noreferrer">CVE-2025-25215</a>.</p><p>As expected, it is indeed possible to place attacker-controlled data on the heap using functions like “cv_create_object” or “cv_set_object”. Locating said data is a little trickier, as the handles returned by “cv_create_object” are random rather than heap addresses. However, it is possible to create a “session oracle” to help locate real and forged sessions alike. To do so, we can leverage one of the many CV functions that require a session handle but will return a unique error code if the session is invalid. For instance, “cv_get_random” can be used as such:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-17.png" class="kg-image" alt="" loading="lazy" width="975" height="290" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-17.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-17.png 975w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 15: Implementation of cv_get_random.</span></figcaption></figure><p>If the session fails the “validate_session” check, “cv_get_random” will return CV_INVALID_HANDLE, otherwise it will either return CV_SUCCESS or CV_INVALID_OUTPUT_PARAMETER_LENGTH. This gives a way to identify valid-looking sessions without any side effect.</p><p>Debug strings in the application firmware indicate that the heap implementation used is “heap_4.c” from OpenRTOS. At this point, we could use standard heap exploitation techniques to try and corrupt memory, but instead, we chose to look for more vulnerabilities that may be easier to exploit.</p><h3 id="securebioidentify">securebio_identify</h3><p>This function is one of the few that does not have “cv” in its names but is called via “cv_identify_feature_set_authenticated”. It is part of the implementation of the WinBio framework used by Windows Hello during fingerprint handling.</p><p>The function expects a handle to an object, retrieves it, and copies some of its content:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-18.png" class="kg-image" alt="" loading="lazy" width="975" height="370" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-18.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-18.png 975w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 16: ”securebio_identify” retrieves and copies object content.</span></figcaption></figure><p>The data is copied from one of the object’s properties into the “data2” stack buffer. To copy the data, “memcpy” is using the property’s size assuming it will fit inside the “data2” buffer. This can be a dangerous assumption: If this property was to be larger than expected, it would lead to a stack overflow.</p><p>In practice, objects allocated with “cv_create_object” cannot be used this way as there are checks in place to limit the size of this property. However, because we can corrupt heap data, it is possible to forge a malicious object that will trigger the bug. Alternatively, there might be other legitimate avenues to load a malicious object. For instance, “cv_import_object” is a good candidate. Due to the complexity of the function, we focused on the heap corruption approach instead. Regardless, this bug was reported as <a href="https://talosintelligence.com/vulnerability_reports/TALOS-2024-2130">CVE-2025-24922</a>.</p><p>The general approach to exploiting “securebio_identify” is as follows:</p><ol><li>Create a large object on the heap containing fake heap metadata followed by the “SeSs” tag.</li><li>Locate the fake session and free it is using “cv_close”. This will mark a chunk of heap memory as freed even though it is still being used by the large object we’ve created.</li><li>Allocate a smaller object that will end up being allocated inside the hole we’ve poked inside the large object from step 1.</li><li>Use “cv_set_object” to modify the data of the large object and thus corrupt the fields of the small object.</li><li>Use the corrupted small object to trigger the stack overflow inside “securebio_identify”. Because the firmware doesn’t have ASLR, it’s easy to find gadgets to fully exploit the function and gain arbitrary code execution inside the firmware.</li><li>Optional: Use the large object as an output buffer to store data produced by our exploit and retrieve its content from the host</li></ol><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/heap_diagram_slower.gif" class="kg-image" alt="" loading="lazy" width="1672" height="402" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/heap_diagram_slower.gif 600w, https://blog.talosintelligence.com/content/images/size/w1000/2025/08/heap_diagram_slower.gif 1000w, https://blog.talosintelligence.com/content/images/size/w1600/2025/08/heap_diagram_slower.gif 1600w, https://blog.talosintelligence.com/content/images/2025/08/heap_diagram_slower.gif 1672w" sizes="(min-width: 720px) 720px"><figcaption><i><em class="italic" style="white-space: pre-wrap;">Figure 17. Overlapping two objects to exploit securebio_identify.</em></i></figcaption></figure><p>An example of this attack will be used in the next section.</p><h3 id="more-firmware-vulnerabilities">More firmware vulnerabilities</h3><p>While looking at the application firmware, we also found an out-of-bound read in the “cv_send_blockdata” and an out-of-bound write in “cv_upgrade_sensor_firmware”. Those were reported respectively as <a href="https://talosintelligence.com/vulnerability_reports/TALOS-2024-2127">CVE-2025-24311</a> and <a href="https://talosintelligence.com/vulnerability_reports/TALOS-2025-2137">CVE-2025-25050</a>. We did not use these vulnerabilities for further exploitation.</p><h2 id="arbitrary-code-execution-in-the-application-firmware-what%E2%80%99s-next">Arbitrary code execution in the application firmware: What’s next?</h2><p>If we circle back to our list of goals, now that we have gained code execution in the firmware, we can try to attack the host from this vantage point. To have a stronger and more meaningful case, it would be more interesting to first find a way to permanently modify the firmware. So, let’s do that!</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-19.png" class="kg-image" alt="" loading="lazy" width="979" height="646" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-19.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-19.png 979w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 18: Secure boot process.</span></figcaption></figure><p>This diagram showcases the ControlVault boot process:</p><ol><li>The Bootrom verifies the SBIs.</li><li>The SBI retrieves keys from the OTP memory to decrypt the SCD.</li><li>From the decrypted SCD, the SBI loads the required key material and sets up the SMAU to execute the encrypted firmware in place.</li><li>The application firmware is executed.</li></ol><p>Surprisingly, at boot time, there’s no cryptographic verification of the application firmware. Cryptographic verification only happens during the firmware update process. The security of the application firmware mostly relies on the security of the OTP keys and the key material stored in the SCD. But now that we have code execution on the firmware, can we leak this key material?</p><h3 id="sotpreadkey">sotp_read_key</h3><p>The “sotp_read_key” is an internal (i.e., non CV) function that can be used to read key material from the OTP memory of the Broadcom chip. In particular, it is possible to retrieve the AES and HMAC keys that are used to encrypt and authenticate the SCD:</p><figure class="kg-card kg-video-card kg-width-regular kg-card-hascaption" data-kg-thumbnail="https://blog.talosintelligence.com/content/media/2025/08/demo_leak_keys_thumb.jpg" data-kg-custom-thumbnail="">
            <div class="kg-video-container">
                <video src="https://blog.talosintelligence.com/content/media/2025/08/demo_leak_keys.mp4" poster="https://img.spacergif.org/v1/1920x1080/0a/spacer.png" width="1920" height="1080" playsinline="" preload="metadata" style="background: transparent url('https://blog.talosintelligence.com/content/media/2025/08/demo_leak_keys_thumb.jpg') 50% 50% / cover no-repeat;"></video>
                <div class="kg-video-overlay">
                    <button class="kg-video-large-play-icon" aria-label="Play video">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path d="M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z"></path>
                        </svg>
                    </button>
                </div>
                <div class="kg-video-player-container">
                    <div class="kg-video-player">
                        <button class="kg-video-play-icon" aria-label="Play video">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path d="M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z"></path>
                            </svg>
                        </button>
                        <button class="kg-video-pause-icon kg-video-hide" aria-label="Pause video">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <rect x="3" y="1" width="7" height="22" rx="1.5" ry="1.5"></rect>
                                <rect x="14" y="1" width="7" height="22" rx="1.5" ry="1.5"></rect>
                            </svg>
                        </button>
                        <span class="kg-video-current-time">0:00</span>
                        <div class="kg-video-time">
                            /<span class="kg-video-duration">0:18</span>
                        </div>
                        <input type="range" class="kg-video-seek-slider" max="100" value="0">
                        <button class="kg-video-playback-rate" aria-label="Adjust playback speed">1×</button>
                        <button class="kg-video-unmute-icon" aria-label="Unmute">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path d="M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z"></path>
                            </svg>
                        </button>
                        <button class="kg-video-mute-icon kg-video-hide" aria-label="Mute">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path d="M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z"></path>
                            </svg>
                        </button>
                        <input type="range" class="kg-video-volume-slider" max="100" value="100">
                    </div>
                </div>
            </div>
            <figcaption><p><i><em class="italic" style="white-space: pre-wrap;">Figure 19: Demo of dumping OTP keys.</em></i></p></figcaption>
        </figure><p>By obtaining the device OTP keys, it becomes possible to decrypt its SCD blob and/or forge a new one. This is particularly interesting as we can write an arbitrary SCD blob to flash using the “cv_flash_update” function.</p><p>We can create our own RSA public/private keypair and replace the SCD’s public key with the one we’ve just created. Upon firmware update, the new RSA public key will be used for firmware verification. This way, we can modify a firmware file and install it on our device.</p><p>To confirm the process works, we modify a firmware to make it send an arbitrary message when Windows requests its USB descriptor:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-20.png" class="kg-image" alt="" loading="lazy" width="588" height="366"><figcaption><span style="white-space: pre-wrap;">Figure 20: Malicious USB descriptor returned by a tampered ControlVault.</span></figcaption></figure><h2 id="firmware-modification">Firmware modification</h2><h3 id="patching-%E2%80%9Ccvfingerprintidentify%E2%80%9D">Patching “cv_fingerprint_identify”</h3><p>With the ability to tamper with the firmware, a new attack vector gets unlocked: we can now modify the behaviors of certain functions. In particular, “cv_fingerprint_identify” is used by Windows Hello when a user tries to login with their fingerprint. The host will send a list of handles to check if any of the CV stored fingerprint templates match the fingerprint currently touching the reader. This pseudo matching-in-sensor is done to avoid storing fingerprints templates on the host itself as it could lead to privacy concerns. This creates an interesting opportunity: what if “cv_fingerprint_identify” were to always return true, and thus make Windows Hello accept any fingerprint.</p><figure class="kg-card kg-video-card kg-width-regular kg-card-hascaption" data-kg-thumbnail="https://blog.talosintelligence.com/content/media/2025/08/demo_fingerprint2_resized-1_thumb.jpg" data-kg-custom-thumbnail="">
            <div class="kg-video-container">
                <video src="https://blog.talosintelligence.com/content/media/2025/08/demo_fingerprint2_resized-1.mp4" poster="https://img.spacergif.org/v1/1920x1080/0a/spacer.png" width="1920" height="1080" playsinline="" preload="metadata" style="background: transparent url('https://blog.talosintelligence.com/content/media/2025/08/demo_fingerprint2_resized-1_thumb.jpg') 50% 50% / cover no-repeat;"></video>
                <div class="kg-video-overlay">
                    <button class="kg-video-large-play-icon" aria-label="Play video">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path d="M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z"></path>
                        </svg>
                    </button>
                </div>
                <div class="kg-video-player-container">
                    <div class="kg-video-player">
                        <button class="kg-video-play-icon" aria-label="Play video">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path d="M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z"></path>
                            </svg>
                        </button>
                        <button class="kg-video-pause-icon kg-video-hide" aria-label="Pause video">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <rect x="3" y="1" width="7" height="22" rx="1.5" ry="1.5"></rect>
                                <rect x="14" y="1" width="7" height="22" rx="1.5" ry="1.5"></rect>
                            </svg>
                        </button>
                        <span class="kg-video-current-time">0:00</span>
                        <div class="kg-video-time">
                            /<span class="kg-video-duration">0:07</span>
                        </div>
                        <input type="range" class="kg-video-seek-slider" max="100" value="0">
                        <button class="kg-video-playback-rate" aria-label="Adjust playback speed">1×</button>
                        <button class="kg-video-unmute-icon" aria-label="Unmute">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path d="M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z"></path>
                            </svg>
                        </button>
                        <button class="kg-video-mute-icon kg-video-hide" aria-label="Mute">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path d="M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z"></path>
                            </svg>
                        </button>
                        <input type="range" class="kg-video-volume-slider" max="100" value="100">
                    </div>
                </div>
            </div>
            <figcaption><p><i><em class="italic" style="white-space: pre-wrap;">Figure 21: Demo of bypassing Windows Hello.</em></i></p></figcaption>
        </figure><h2 id="exploiting-a-system-service">Exploiting a SYSTEM service</h2><p>Another consequence of being able to modify the firmware running on our device is that now we can explore the question of whether a malicious ControlVault device can compromise its host.</p><h3 id="primer-on-host-fw-communication">Primer on host-FW communication</h3><p>Let’s consider what happens when calling one of the CV Commands, for example “cv_get_random”:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-21.png" class="kg-image" alt="" loading="lazy" width="975" height="384" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-21.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-21.png 975w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 22: Calling cv_get_random.</span></figcaption></figure><p></p>
<!--kg-card-begin: html-->
<ol>
  <li>The “InitParam_List” function is called to populate two separate arrays of objects: “out_param_list_entry” and “in_param_list_entry”. The former is used to specify the arguments going to the firmware while the latter is used to prepare for the return values expected from the command.</li>
  <ol type="a">
    <li>The first parameter of “InitParam_List” is the type of data encapsulation: </li>
  </ol>
</ol>
<!--kg-card-end: html-->
<pre><code class="language-C">cv_param_type_e::CV_ENCAP_STRUC = 0x0, 
cv_param_type_e::CV_ENCAP_LENVAL_STRUC = 0x1, 
cv_param_type_e::CV_ENCAP_LENVAL_PAIR = 0x2,
cv_param_type_e::CV_ENCAP_INOUT_LENVAL_PAIR = 0x3</code></pre>
<!--kg-card-begin: html-->
<ol start="2">
<ol type="a" start="2">
  <li>Depending on the encapsulation type, the parameters will be
encapsulated/decapsulated slightly differently: </li>
  <ul>
    <li>STRUC will result in a regular buffer being decapsulated</li>
    <li>LENVAL_STRUC will result in a length-prefixed buffer (i.e., the first four
bytes is the size of the data followed by the actual data)</li>
    <li>LENVAL_PAIR will be decapsulated as two separate parameters (size and
buffer)
</li>
    <li>INOUT_LENVAL_PAIR will be initialized without data but will get
decapsulated as two parameters like LENVAL_PAIR</li>
  </ul>
</ol>
<li>“cvhManagerCVAPICall” is called to perform the command and retrieve its result.</li>
  <ol type="a">
    <li>From a high-level perspective, when this function is called, the data we are
sending gets serialized in the appropriate format and an IOCTL_SUBMIT call
is issued; the data is sent to the firmware eventually.</li>
    <li>Once the execution of the command is complete, data is returned and
deserialized to be populated into the “in_param_list_entry array” that was
prepared in the previous step</li>
    </ol>
  <li>Finally, the function “cvhSaveReturnValues” is used to parse the
“in_param_list_entry array” and extract these values into a caller-provided array of
objects. </li>
  <ol type="a">
    <li>For instance, in the screenshot above (figure 22), there is one parameter in the
“in_param_list_entry” and its type is CV_ENCAP_INOUT_LENVAL_PAIR. As
such, upon calling the “cvhSaveReturnValues”, two parameters will be
produced: the first one being the size of the data returned by
“cv_get_random” and the second being the actual data. </li>
    </ol>
</ol>
<!--kg-card-end: html-->
<p>On the firmware side, when handling the CV commands, the return values are re-defined, which is surprising:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-22.png" class="kg-image" alt="" loading="lazy" width="975" height="155" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-22.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-22.png 975w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 23: CvManager handling the cv_get_random command (firmware-side).</span></figcaption></figure><p>It turns out that the way this data is processed leads to an unsafe deserialization. We cover the root-cause analysis of this issue in <a href="https://talosintelligence.com/vulnerability_reports/TALOS-2025-2153" rel="noreferrer">CVE-2025-24919</a>. In short, the redefinition of the firmware-to-host parameters firmware-side can lead to invalid decapsulation of the data on the host. For instance, if a malicious firmware image were to change the return type of “cv_get_random” to be CV_ENCAP_STRUC instead of being CV_INOUT_LENVAL_PAIR, the “pLen” argument that is meant to receive the size of the produced data would instead be filled with the data itself. In figure 22, the “pLen” variable is a stack variable meant to receive a size value as an integer; any data larger than four bytes would thus overflow the stack, possibly leading to arbitrary code execution.</p><h3 id="exploitation-constraints">Exploitation constraints</h3><p>“bcmbipdll.dll” file and some of the ControlVault services are not ASLR enabled, which makes exploitation much easier, as it is possible to hardcode offsets which removes the need of finding an information leak that could be leveraged by a malicious ControlVault device. Data Execution Prevention (DEP) is in place, so it is still necessary to perform a ROP chain attack for further exploitation. Surprisingly, another common mitigation is only partially implemented; stack canaries are only occasionally present in the ControlVault services and DLLs. For instance, in the case of “cv_get_random”, even though “pLen” is a stack variable, no stack cookie is included to protect this function. This leads to the side-quest of identifying CV commands that are easy to exploit but also are used in a high privilege context.</p><p>In practice, we have these constraints for our ideal CV command to target:</p><ul><li>It needs to be used (directly or inside a call-chain) by a high-privilege service.</li><li>One of the variables fed to the CV Command needs to be a stack variable that can be corrupted using the bug reported in CVE-2025-24919 (e.g., like the “pLen” variable in “cv_get_random”).</li><li>No stack cookie must be present between the to-be-corrupted stack variable and the return address being the target of the stack overflow.</li></ul><h3 id="finding-what-to-target">Finding what to target</h3><p>The “cv_get_random” function would be an ideal candidate, but unfortunately it’s hard to find code that is using this function reliably.</p><p>After investigating most of the CV commands, we found the following:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-23.png" class="kg-image" alt="" loading="lazy" width="975" height="513" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-23.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-23.png 975w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 24: WBFUSH_ExistsCVObject calling CSS_GetObject.</span></figcaption></figure><p>The first argument to this function, “cvHandle”, is a handle to an object. It is passed to “CSS_GetObject”, which will populate the stack variable “objHeader” with the header of the object tied to this handle. Down the call-stack, “cv_get_object” is called with both the “cvHandle” and the “objHeader” variables. Due to these functions’ stack layout, it is possible to leverage CVE-2025-24919 to corrupt the “objHeader” variable and trigger a stack overflow in its parent function.</p><h3 id="exploitation-details">Exploitation details</h3><p>The “WBFUSH_ExistCVObject” function is used by the “BCMStorageAdapter.dll” to verify if an object handle is tied to a real object stored in the ControlVault firmware. Meanwhile, “BCMStorageAdapter” is part of Broadcom’s implementation of the adapters required to interface with the Windows Biometric Framework (WBF). These adapters are necessary to interface a fingerprint reader with WBF to be used with Windows Hello (fingerprint login) or other biometric-enabled scenarios. Here is the call stack to reach the vulnerable function:</p><pre><code>StorageAdapterControlUnit 
  -&gt; WBFUSH_ExistsCVObject 
    -&gt; CSS_GetObject
      -&gt; cv_get_object</code></pre><p>The “StorageAdapterControlUnit” function can be reached by a regular user opening the proper adapter with “WinBioOpenSession” and then issuing a “WinBioControlUnit” command with the “WINBIO_COMPONENT_STORAGE” component.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-24.png" class="kg-image" alt="" loading="lazy" width="975" height="392" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-24.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-24.png 975w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 25: WinBioControlUnit prototype.</span></figcaption></figure><p>The “ControlCode” parameter specifies which adapter’s function to invoke.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-25.png" class="kg-image" alt="" loading="lazy" width="975" height="421" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-25.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-25.png 975w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 26: StorageAdapterControlUnit with ControlCode=2.</span></figcaption></figure><p>By reversing “BCMStorageAdapter !StorageAdapterControlUnit”, we find that using “ControlCode=2” will lead to calling the “WBFUSH_ExistsCVObject” with caller provided handle. Specifically, the first four bytes of the “SendBuffer” argument passed to “WinBioControlUnit” are cast into the expected object handle.</p><p>With this in mind, the exploitation process is as follows:</p><ol><li>Achieve code execution on the firmware to leak the device keys and gain the ability to forge a firmware file that will be accepted by this specific device.</li><li>Forge a malicious firmware update with a modified “cv_get_object” function.<ol><li>The “cv_get_object” function will be backdoored: if the object handle matches a specific magic value (e.g., 0x1337) it will return the stack-overflow payload and tamper with the encapsulation parameters to trigger CVE-2025-24919. If the handle is not 0x1337, “cv_get_object” will execute normally to avoid unintended side-effects from the backdoor.</li><li>The stack-overflow payload will be a ROP chain that will eventually lead to the execution of a reverse-shell.</li></ol></li><li>Install the malicious firmware update.</li><li>Invoke the “WinBioControlUnit” function with “ControlCode=2” and “b”\x37\x13\x00\x00”” as the “SendBuffer” (little-endian representation of 0x1337 as a DWORD).</li><li>Connect to the reverse shell and observe having obtained SYSTEM privileges.</li></ol><figure class="kg-card kg-video-card kg-width-regular kg-card-hascaption" data-kg-thumbnail="https://blog.talosintelligence.com/content/media/2025/08/bcm_demo4-1_thumb.jpg" data-kg-custom-thumbnail="">
            <div class="kg-video-container">
                <video src="https://blog.talosintelligence.com/content/media/2025/08/bcm_demo4-1.mp4" poster="https://img.spacergif.org/v1/1920x1080/0a/spacer.png" width="1920" height="1080" playsinline="" preload="metadata" style="background: transparent url('https://blog.talosintelligence.com/content/media/2025/08/bcm_demo4-1_thumb.jpg') 50% 50% / cover no-repeat;"></video>
                <div class="kg-video-overlay">
                    <button class="kg-video-large-play-icon" aria-label="Play video">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path d="M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z"></path>
                        </svg>
                    </button>
                </div>
                <div class="kg-video-player-container">
                    <div class="kg-video-player">
                        <button class="kg-video-play-icon" aria-label="Play video">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path d="M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z"></path>
                            </svg>
                        </button>
                        <button class="kg-video-pause-icon kg-video-hide" aria-label="Pause video">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <rect x="3" y="1" width="7" height="22" rx="1.5" ry="1.5"></rect>
                                <rect x="14" y="1" width="7" height="22" rx="1.5" ry="1.5"></rect>
                            </svg>
                        </button>
                        <span class="kg-video-current-time">0:00</span>
                        <div class="kg-video-time">
                            /<span class="kg-video-duration">0:22</span>
                        </div>
                        <input type="range" class="kg-video-seek-slider" max="100" value="0">
                        <button class="kg-video-playback-rate" aria-label="Adjust playback speed">1×</button>
                        <button class="kg-video-unmute-icon" aria-label="Unmute">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path d="M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z"></path>
                            </svg>
                        </button>
                        <button class="kg-video-mute-icon kg-video-hide" aria-label="Mute">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path d="M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z"></path>
                            </svg>
                        </button>
                        <input type="range" class="kg-video-volume-slider" max="100" value="100">
                    </div>
                </div>
            </div>
            <figcaption><p><i><em class="italic" style="white-space: pre-wrap;">Figure 27: Demo SYSTEM service exploit.</em></i></p></figcaption>
        </figure><h2 id="going-further">Going further</h2><h3 id="implant">Implant</h3><p>The process described above could be seen as one of the most convoluted ways to perform an elevation of privileges to SYSTEM on Windows. However, this should be considered in context. There are other services and functions that could be used instead. In our example here, we picked functions that were easy to build a demo with. In practice, other functions could be leveraged so that no user interaction would be required to trigger the vulnerabilities. This would make sense for a standalone implant that could lay dormant and trigger from time to time in order to call home. Development of a weaponized implant is of course beyond the scope of our research.</p><h3 id="physical-attacks">Physical attacks</h3><p>Another promising angle that we have yet to mention is physical access. The USH board is an internal USB device. It is possible to open the laptop that contains the board and connect to it directly provided the proper connector. There are mitigations against physical access (e.g., chassis intrusion alerts), but those are generally opt-in. As such, an attacker with 10-20 minutes of physical access could perform the same attacks described in this deep dive, but without any of the other requirements (e.g., no need to be able to log in as user; disk encryption would not protect against this, etc.).</p><p>The following video is a short demo of the feasibility of connecting directly to a USH board over USB.</p><figure class="kg-card kg-video-card kg-width-regular kg-card-hascaption" data-kg-thumbnail="https://blog.talosintelligence.com/content/media/2025/08/physical_attack_thumb.jpg" data-kg-custom-thumbnail="">
            <div class="kg-video-container">
                <video src="https://blog.talosintelligence.com/content/media/2025/08/physical_attack.mp4" poster="https://img.spacergif.org/v1/1920x1080/0a/spacer.png" width="1920" height="1080" playsinline="" preload="metadata" style="background: transparent url('https://blog.talosintelligence.com/content/media/2025/08/physical_attack_thumb.jpg') 50% 50% / cover no-repeat;"></video>
                <div class="kg-video-overlay">
                    <button class="kg-video-large-play-icon" aria-label="Play video">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                            <path d="M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z"></path>
                        </svg>
                    </button>
                </div>
                <div class="kg-video-player-container">
                    <div class="kg-video-player">
                        <button class="kg-video-play-icon" aria-label="Play video">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path d="M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z"></path>
                            </svg>
                        </button>
                        <button class="kg-video-pause-icon kg-video-hide" aria-label="Pause video">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <rect x="3" y="1" width="7" height="22" rx="1.5" ry="1.5"></rect>
                                <rect x="14" y="1" width="7" height="22" rx="1.5" ry="1.5"></rect>
                            </svg>
                        </button>
                        <span class="kg-video-current-time">0:00</span>
                        <div class="kg-video-time">
                            /<span class="kg-video-duration">0:19</span>
                        </div>
                        <input type="range" class="kg-video-seek-slider" max="100" value="0">
                        <button class="kg-video-playback-rate" aria-label="Adjust playback speed">1×</button>
                        <button class="kg-video-unmute-icon" aria-label="Unmute">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path d="M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z"></path>
                            </svg>
                        </button>
                        <button class="kg-video-mute-icon kg-video-hide" aria-label="Mute">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path d="M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z"></path>
                            </svg>
                        </button>
                        <input type="range" class="kg-video-volume-slider" max="100" value="100">
                    </div>
                </div>
            </div>
            <figcaption><p><span style="white-space: pre-wrap;">Figure 28: Demo physical attack.</span></p></figcaption>
        </figure><p>Please note that in the video above, a ControlVault device is already present but disabled. This is because the machine used already had a ControlVault device built in. The relevant driver/dll were also already installed. Upon connecting the USB cable, a new ControlVault device pops up and this is the one that is being interacted with.</p><h1 id="impact">Impact</h1><h2 id="attack-scenario">Attack scenario</h2><p>The risks we’ve explored in this article can be summarized in the following diagram:</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://blog.talosintelligence.com/content/images/2025/08/image-26.png" class="kg-image" alt="" loading="lazy" width="973" height="627" srcset="https://blog.talosintelligence.com/content/images/size/w600/2025/08/image-26.png 600w, https://blog.talosintelligence.com/content/images/2025/08/image-26.png 973w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Figure 29: Attack scenarios.</span></figcaption></figure><p>The ability to modify the firmware running on one of the USH boards can be used by a local attacker to either gain privileges, bypass fingerprint login and/or compromise Windows. A threat actor could also leverage this in a post-compromise situation. If a user’s workstation is compromised, one could tamper with the ControlVault firmware running on their machine to act as an implant that could remain present even after a full system reinstall.</p><h2 id="detection">Detection</h2><p>Detecting a compromised ControlVault device can be tricky. An implant could ignore new firmware updates. This is why verifying that a legitimate firmware update can be successfully installed and then returns the expected version string is a good first check to perform. </p><p>This can be done with the Python code provided at the beginning of this article (figure 5). Alternatively, a second way is to look at the properties of the ControlVault device in the - device manager. The “Versioning” panel will show the ControlVault firmware version as reported by the device.</p><p>Indication of local exploitation of the ControlVault device can be detected by monitoring unexpected processes loading “bcmbipdll.dll” or those trying to open a handle to the ControlVault device itself. The path for the device may depend on the laptop model and its internal USB connections. The full path can be retrieved using “SetupDiGetClassDevsW / SetupDiEnumDeviceInterfaces” with the InterfaceGuid: {79D2E5E9-8883-4E9D-91CBA14D2B145A41}.</p><p>Cisco customers using Cisco Secure Endpoint can be made aware of potential risks with the signature definition “bcmbipdll.dll Loaded by Abnormal Process”.&nbsp;</p><p>Finally, unexpected crashes in “WinBioSvc”, “bcmHostStorageService”, “bcmHostControlService” or “bcmUshUpgradeService” could be signs of something being amiss.</p><h1 id="conclusion">Conclusion</h1><p>ControlVault is a surprisingly complex attack surface spanning the whole gamut from hardware to firmware and software. Multiple peripherals, frameworks and drivers are involved as well. It has a legacy codebase that can be traced back to the early 2010s and various first party software has interacted with it over the years. This deep dive has barely scratched the surface of ControlVault’s complexity and yet we showed how far reaching the consequences of a compromise could lead to. The most surprising thing could be that our work appears to be the first public research on the subject. Firmware security isn’t a new topic, but still, how many other ControlVault-like devices are yet to be found and assessed for the unexpected risk they may bring?</p>
        </div>
    </section>
    <div class="social-media-wrapper">
    <h5>Share this post</h5>
    <ul class="social-media-share-list">
        <li>
            <a class="share-facebook" title="Share this on Facebook" data-text="ReVault! When your SoC turns against you… deep dive edition" data-href="https://blog.talosintelligence.com/revault-when-your-soc-turns-against-you-2/" rel="nofollow" target="_blank" href="https://www.facebook.com/sharer.php?u=https://blog.talosintelligence.com/revault-when-your-soc-turns-against-you-2/"></a>
        </li>
        <li>
            <a class="share-x" title="Post This" data-text="ReVault! When your SoC turns against you… deep dive edition" data-href="https://blog.talosintelligence.com/revault-when-your-soc-turns-against-you-2/" rel="nofollow" target="_blank" href="https://x.com/share?url=https://blog.talosintelligence.com/revault-when-your-soc-turns-against-you-2/"></a>
        </li>
        <li>
            <a class="share-linkedin" title="Share this on LinkedIn" data-text="ReVault! When your SoC turns against you… deep dive edition" data-href="https://blog.talosintelligence.com/revault-when-your-soc-turns-against-you-2/" rel="nofollow" target="_blank" href="https://www.linkedin.com/sharing/share-offsite/?url=https://blog.talosintelligence.com/revault-when-your-soc-turns-against-you-2/"></a>
        </li>
        <li>
            <a class="share-reddit" title="Reddit This" data-text="ReVault! When your SoC turns against you… deep dive edition" data-href="https://blog.talosintelligence.com/revault-when-your-soc-turns-against-you-2/" rel="nofollow" target="_blank" href="https://www.reddit/submit?url=https://blog.talosintelligence.com/revault-when-your-soc-turns-against-you-2/"></a>
        </li>
        <li>
            <a class="share-email" title="Email This" href="mailto:?body=ReVault! When your SoC turns against you… deep dive editionhttps://blog.talosintelligence.com/revault-when-your-soc-turns-against-you-2/"></a>
        </li>
    </ul>
</div></article>
                    </div>
                </div>
                <div class="col-lg alt-layout-row-dk sidebar" id="side-bar">


                            <h4>Related Content</h4>
                                <div class="sidebar-snippet-wrapper">
                                    <a href="/decrement-by-one-to-rule-them-all/">
                                        <h3>Decrement by one to rule them all: AsIO3.sys driver exploitation</h3>
                                        <span  class="preview-attributes">June 26, 2025 06:00</span>
                                        <p>Cisco Talos uncovered and analyzed two critical vulnerabilities in ASUS&#39; AsIO3.sys driver, highlighting serious security risks and the importance of robust driver design.</p>
                                    </a>
                                </div>
                                <div class="sidebar-snippet-wrapper">
                                    <a href="/small-praise-for-modern-compilers-a-case-of-ubuntu-printing-vulnerability-that-wasnt/">
                                        <h3>Small praise for modern compilers - A case of Ubuntu printing vulnerability that wasn’t</h3>
                                        <span  class="preview-attributes">February 10, 2025 08:30</span>
                                        <p>During an earlier investigation of the macOS printing subsystem, IPP-USB protocol caught our attention. We decided to take a look at how other operating systems handle the same functionality.</p>
                                    </a>
                                </div>
                                <div class="sidebar-snippet-wrapper">
                                    <a href="/finding-vulnerabilities-in-clipsp-the-driver-at-the-core-of-windows-client-license-platform/">
                                        <h3>Finding vulnerabilities in ClipSp, the driver at the core of Windows’ Client License Platform</h3>
                                        <span  class="preview-attributes">November 25, 2024 08:00</span>
                                        <p>By Philippe Laulheret

ClipSP (clipsp.sys) is a Windows driver used to implement client licensing and system policies on Windows 10 and 11 systems.

Cisco Talos researchers have discovered eight vulnerabilities related to clipsp.sys ranging from signature bypass to elevation of privileges and sandbox escape:

 * TALOS-2024-1964 (CVE-2024-38184)
 * TALOS-2024-1965 (CVE-2024-38185)</p>
                                    </a>
                                </div>
                </div>
            </div>
        </div>
    </main>



    <footer id="footer">
    <div class="row footer_nav_wrapper">
        <div class="col-xl-10 col-12">
            <div class="multi-col-list-wrapper">
                <ul class="footer-parent-list">
                    <li class="footer-links-group">
                        <ul>
                            <li>
                                <h6><a href="https://talosintelligence.com/reputation">Intelligence Center</a></h6>
                            </li>
                            <li><a href="https://talosintelligence.com/reputation_center">Intelligence Search</a></li>
                            <li><a href="https://talosintelligence.com/reputation_center/email_rep">Email &amp; Spam Trends</a></li>
                        </ul>
                    </li>
                    <li class="footer-links-group">
                        <ul>
                            <li>
                                <h6><a href="https://talosintelligence.com/vulnerability_info">Vulnerability Research</a></h6>
                            </li>
                            <li><a href="https://talosintelligence.com/vulnerability_reports">Vulnerability Reports</a></li>
                            <li><a href="https://talosintelligence.com/ms_advisories">Microsoft Advisories</a></li>
                        </ul>
                    </li>
                    <li class="footer-links-group">
                         <ul>
                            <li>
                                <h6><a href="https://talosintelligence.com/incident_response">Incident Response</a></h6>
                            </li>
                            <li>
                                <a href="https://talosintelligence.com/incident_response/services#reactive-services">Reactive Services</a>
                            </li>
                            <li>
                                <a href="https://talosintelligence.com/incident_response/services#proactive-services">Proactive Services</a>
                            </li>
                            <li>
                                <a href="https://talosintelligence.com/incident_response/contact">Emergency Support</a>
                            </li>
                        </ul>
                    </li>
                    <li class="footer-links-group">
                        <ul>
                            <li>
                                <h6>Security Resources</h6>
                            </li>
                            <li><a href="https://talosintelligence.com/software">Open Source Security Tools</a></li>
                            <li><a href="https://talosintelligence.com/categories">Intelligence Categories Reference</a></li>
                            <li><a href="https://talosintelligence.com/secure-endpoint-naming">Secure Endpoint Naming Reference</a></li>
                        </ul>
                    </li>
                    <li class="footer-links-group">
                        <ul>
                            <li>
                                <h6>Media</h6>
                            </li>
                            <li><a href="https://blog.talosintelligence.com">Talos Intelligence Blog</a></li>
                            <li><a href="https://blog.talosintelligence.com/category/threat-source-newsletter/">Threat Source Newsletter</a></li>
                            <li><a href="https://talosintelligence.com/podcasts/shows/beers_with_talos">Beers with Talos Podcast</a></li>
                            <li><a href="https://talosintelligence.com/podcasts/shows/talos_takes">Talos Takes Podcast</a></li>
                            <li><a target="_blank" href="https://www.youtube.com/channel/UCPZ1DtzQkStYBSG3GTNoyfg/featured">Talos Videos</a></li>
                        </ul>
                    </li>
                    <li class="footer-links-group">
                        <ul>
                            <li>
                                <h6>Support</h6>
                            </li>
                            <li><a href="https://support.talosintelligence.com">Support Documentation</a></li>
                        </ul>
                    </li>
                    <li class="footer-links-group">
                        <ul>
                            <li>
                                <h6>Company</h6>
                            </li>
                            <li><a href="https://talosintelligence.com/about">About Talos</a></li>
                            <li><a href="https://talosintelligence.com/careers">Careers</a></li>
                            <li><a target="_blank" href="https://www.cisco.com/c/en/us/products/security/product-listing.html">Cisco Security</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
        <div class="col-xl-2 col-12 connect_social">
            <div class="connect-footer-section-wrapper">
                <h6>Follow us</h6>
                <ul>
                    <li>
                        <a target="_blank" href="https://x.com/talossecurity"><div class="footer-media-icon" id="footer-media-icon-x"></div>
                        </a></li>
                    <li>
                        <a target="_blank" href="https://www.youtube.com/channel/UCPZ1DtzQkStYBSG3GTNoyfg/featured"><div class="footer-media-icon" id="footer-media-icon-youtube"></div>
                        </a></li>
                    <li>
                        <a target="_blank" href="https://www.linkedin.com/company/cisco-talos-intelligence-group/"><div class="footer-media-icon" id="footer-media-icon-linkedin"></div>
                        </a></li>
                </ul>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12 footer_corporate">
            <a target="_blank" href="http://tools.cisco.com/security/center/home.x"><img alt="Cisco" src="https://blog.talosintelligence.com/assets/images/logo_cisco_white.svg">
            </a><p class="copyright">
            ©
            <span id='current-year'></span>
            Cisco Systems, Inc. and/or its affiliates. All rights
            reserved. View our
            <a target="_blank" class="underline" href="http://www.cisco.com/web/siteassets/legal/privacy_full.html">Privacy Policy.</a>
        </p>
        </div>
    </div>
</footer>
    


<!-- jQuery first, then Popper.js, then Bootstrap JS -->
<script src="https://blog.talosintelligence.com/assets/js/jquery-3.6.0.min.js?v=94d1fb2008"></script>
<script src="https://blog.talosintelligence.com/assets/js/popper.min.js?v=94d1fb2008"></script>
<script src="https://blog.talosintelligence.com/assets/js/bootstrap.bundle.min.js?v=94d1fb2008"></script>
<script src="https://blog.talosintelligence.com/assets/js/date.js?v=94d1fb2008"></script>
<script src="https://blog.talosintelligence.com/assets/js/prism.js?v=94d1fb2008"></script>
<script src="https://cdn.jsdelivr.net/npm/ghost-theme-utils@latest/dist/js/ghost-theme-utils.min.js" async defer></script>


<script defer src="https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015" integrity="sha512-ZpsOmlRQV6y907TI0dKBHq9Md29nnaEIPlkf84rnaERnq6zvWvPUqr2ft8M1aS28oN72PdrCzSjY4U6VaAw1EQ==" data-cf-beacon='{"rayId":"96cb3c4baf6c6cd4","version":"2025.7.0","serverTiming":{"name":{"cfExtPri":true,"cfEdge":true,"cfOrigin":true,"cfL4":true,"cfSpeedBrain":true,"cfCacheStatus":true}},"token":"35f8ae698f9d471b83b846a751388737","b":1}' crossorigin="anonymous"></script>
</body>

</html>