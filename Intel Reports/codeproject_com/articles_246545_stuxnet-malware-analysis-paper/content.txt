<!DOCTYPE HTML>


<html lang="en">
<head>

	
	<link rel="preconnect" href="https://www.google-analytics.com">

	<link rel="preconnect" href="https://www.codeproject.com">


	<link rel="preload" href="https://www.codeproject.com/App_Themes/CodeProject/Img/logo250x135.gif" as="image">


	<link rel="preload" href="/App_Themes/CodeProject/Img/logo135-bg.gif" as="image">
	<link rel="preload" href="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js" as="script" type="text/javascript" >


	<title>Stuxnet Malware Analysis Paper- CodeProject</title> 
    
	<link type="text/css" rel="stylesheet" href="https://www.codeproject.com/App_Themes/CodeProject/Css/Article.min.css?dt=2.8:2024-12-08:1">


    <script type="text/javascript" src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.4.1.min.js" defer ></script>
<script type="text/javascript" src="https://www.codeproject.com/script/Articles/JS/article.min.js?dt=2.8:2024-12-08:1" defer ></script>

	
<meta http-equiv="content-language" content="en-US">
<meta charset="UTF-8">
<meta name="Description" content="This article will focus on Stuxnet’s windows infection methods and spreading methods. The tricks were used by stuxnet and the evidences behind the criminals of stuxnet.">
<meta name="Keywords" content="Windows, Advanced">
<meta name="Author" content="AmrThabet">
<meta name="Rating" content="General">
<meta name="Revisit-After" content="1 days">
<meta name="application-name" content="CodeProject">
<meta name="google-translate-customization" content="d908bb7ce7aff658-4c2f3a504525c916-g629383f736781a8a-13">



<link rel="dns-prefetch" href="//ajax.googleapis.com"> 
<link rel="canonical" href="https://www.codeproject.com/Articles/246545/Stuxnet-Malware-Analysis-Paper" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@CodeProject" />
<meta name="og:site_name" content="CodeProject" />
<meta name="twitter:creator" content="@CodeProject" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="9/6/2011 2:57:00 PM" />
<meta property="article:modified_time" content="9/9/2011 5:59:00 PM" />
<meta name="twitter:label1" content="Written by">
<meta name="twitter:data1" content="AmrThabet">
<meta name="twitter:label2" content="Reading time">
<meta name="twitter:data2" content="29 min read">
<meta property="og:url" content="https://www.codeproject.com/Articles/246545/Stuxnet-Malware-Analysis-Paper" />
<meta property="og:title" content="Stuxnet Malware Analysis Paper" />
<meta property="og:description" content="This article will focus on Stuxnet’s windows infection methods and spreading methods. The tricks were used by stuxnet and the evidences behind the criminals of stuxnet." />


<meta name="viewport" content="width=device-width, initial-scale=1.0">

<link rel="apple-touch-icon" sizes="144x144" href="/favicon/apple-touch-icon.png"> 
<link rel="icon" type="image/png" sizes="32x32" href="/favicon/favicon-32x32.png"> 
<link rel="icon" type="image/png" sizes="16x16" href="/favicon/favicon-16x16.png"> 
<link rel="manifest" href="/favicon/manifest.json"> 
<link rel="mask-icon" href="/favicon/safari-pinned-tab.svg" color="#ff9900">
	<script type='application/ld+json'>{
  "@context": "http://schema.org",
  "@type": "TechArticle",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "https://www.codeproject.com/Articles/246545/Stuxnet-Malware-Analysis-Paper"
   },
  "name": "Stuxnet Malware Analysis Paper",
  "headline": "Stuxnet Malware Analysis Paper",
  "url": "https://www.codeproject.com/Articles/246545/Stuxnet-Malware-Analysis-Paper",
  "discussionUrl": "https://www.codeproject.com/Articles/246545/Stuxnet-Malware-Analysis-Paper#_comments",
  "isFamilyFriendly": "true",
  "image": "https://www.codeproject.com/App_Themes/CodeProject/Img/Article100.png",
  "keywords": "Windows,Advanced",
  "commentCount": "0",
  "editor" : {
    "@type" : "Person",
    "name" : "Editor",
    "url" : "https://www.codeproject.com/script/Membership/View.aspx?mid=3873871"
  },
  "license": "http://www.codeproject.com/info/cpol10.aspx",
  "publisher" : {
    "@type" : "Organization",
    "name" : "CodeProject"
  },
  "description": "This article will focus on Stuxnet’s windows infection methods and spreading methods. The tricks were used by stuxnet and the evidences behind the criminals of stuxnet.",
  "articleSection": "Windows",
  "author" : [{
      "@type" : "Person",
      "name" : "AmrThabet",
      "url" : "https://www.codeproject.com/script/Membership/View.aspx?mid=5879897"
    }],
  "datePublished": "2011-09-06",
  "dateCreated": "2011-09-06",
  "dateModified": "2011-09-09"
,
  "contentRating" : {
    "@type" : "Rating",
    "ratingValue" : 4.95,
    "bestRating" : 5,
    "worstRating" : 1
  }
}</script>

<script type='application/ld+json'>{
  "@context": "http://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [{
    "@type": "ListItem",
    "position": 1,
    "item" : {
      "@id" : "/script/Content/Tag.aspx?tags=operating-systems",
      "name" : "operating-systems"
    }
  },{
    "@type": "ListItem",
    "position": 2,
    "item" : {
      "@id" : "/script/Content/Tag.aspx?tags=Windows",
      "name" : "Windows"
    }
  }]
}</script>


	<base target="_top" />
	
    


<script type='text/javascript'>
function defrm () { /* thanks twitter */
    document.write = '';
    window.top.location = window.self.location;
    setTimeout(function() { document.body.innerHTML = ''; }, 0);
    window.self.onload = function(evt) { document.body.innerHTML = ''; };
}

if (window.top !== window.self) {
    try {
        if (window.top.location.host) { /* will throw for all except chrome */ }
        else { defrm(); /* chrome */ }
    } catch (ex) { defrm(); /* everyone else */ }
}

// Specific case where a site is screwing with us.
if (typeof(DemoUrl) !== 'undefined') {
    document.write(unescape('%3Cme') + 'ta http' + '-equiv="re' + 'fresh con' +
                           'tent="1;url=' + DemoUrl + unescape('"%3CE'));
}
</script>
	





    <script async type="text/javascript" src="https://www.googletagmanager.com/gtag/js?id=UA-1735123-1"></script>
    <script type="text/javascript">
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());

        gtag('config', 'UA-1735123-1' );
    </script>

</head>	

<body class="chrome chrome129">



<a class="access-link" href="#Main"><img alt="Click here to Skip to main content" src="https://www.codeproject.com/images/t.gif" /></a>




<div class="page-background">

	
	

	

	
    <div id="ctl00_STM" class="site-top-menu fixed narrow">
        <div class="main-content">
            

<div class="container memberbar clearfix flex-container flex-extend">

	<div id="ctl00_MemberBar_GenInfo" class="flex-item align-left">65,938 articles</div>
	
	<div id="ctl00_MemberBar_ChangeNotice" class="flex-item align-left">CodeProject
	is changing. <a href="/info/Changes.aspx">Read more</a>.</div>

	<div class="flex-item">
		
	</div>

	<div class="flex-item align-right">

		

		

		
	</div>
</div>
        </div>
    </div>

	
    <div id="ctl00_SH" class="site-header fixed narrow">
        <div class="main-content">
            <div class="logo"><a href="/"><img id="ctl00_Logo" tabindex="1" title="CodeProject" src="https://www.codeproject.com/App_Themes/CodeProject/Img/logo250x135.gif" alt="Home" style="height:135px;width:250px;border-width:0px;" /></a></div>
            <div class="promo"></div>
        </div>
    </div>

	
			
	

	<div id="A" class="container-content-wrap fixed narrow"> 

	<div class="container-content">

        
		<div class="clearfix">
			<div class="container-breadcrumb float-left ">
				<div><a rel="nofollow" href="/script/Content/SiteMap.aspx">Articles</a> / <a rel="nofollow" href="/script/Content/Tag.aspx?tags=operating-systems">operating-systems</a> / <a rel="nofollow" href="/script/Content/Tag.aspx?tags=Windows">Windows</a></div>
			</div>

            <div class="float-left">
				
			</div>

			<div class="edit-links float-right">
				



 
&nbsp;










			</div>

			<div class="article-nav float-right">
				


<div style="display:inline-block;position:relative;top:-6px;margin-right:20px">
    
</div>



 

<a id="ctl00_ActionLinks_PrintMd" data-tooltip="Print" data-enabletooltip="true" data-width="auto" href="/Articles/246545/Stuxnet-Malware-Analysis-Paper?display=Print">
   <img src="/App_Themes/CodeProject/Img/print48.png" 
	    width="24" height="24" style="border:0">
</a>



<span id="ctl00_ActionLinks_R">
    
    
</span>
			</div>
		</div>

        
		<div class="extended article-container-parts">

			
		    
            

			
			<div id="AT" class="article-container  fixed narrow" style="max-width:inherit;"> 

				<div class="article">

					<form name="aspnetForm" method="post" action="./View.aspx" id="aspnetForm" style="margin:0;padding:0">
<div>
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="JY0yzZZ5nDQnT+rGPs5HvmkbuOsKIimCKpUBpgh/BOvlyj/dtP0JvA+fvfkHFbcaT8th5iv8w9qpENkIRLv5TXW4DwsghmBeIFcdnHWnSxHYFU9tHBmVRCEcAA+TNuYGkoxVxuFV3HySJ/U1q0304VI/Vywa1xh9LClY7eNIvwxzDIK+O8JTu7fXEtZN4x32GDAih71hrsv9Kh87ZSWRzwsvkhiBeU3ss9QMDnS+5h2M9826AIkhh3yKVujJXX9UEd63TvwxWNlneAemrjvf6MzPjWsqkEkuLcEaWQsARnift/miixtFkmc//lQMadA6t9/Q2ploLRzvyc3oOK8fYDydQBK/YHkCuinTQC+WL3enSBypCEigKQsFurlcZyrsCK4JxivB6rLb4nBUE+v0HClINMlGp/Jbu7xLhcDpBNmY6vrAmAkpeGWH4042EHeOUDWxeG2TunqsAVfeT0TKfJMwRlxzUlV/f8FecbXEX+unBFFQWj6LIgAAERGN8OsH+ojd1H3ObsF4Px2l460NdbGvzvxOAgogfUAx+RhB76lxSQI6YEZ7AfQfaMBE47D6r9UZzSTlQjqBEnEhhj9x9IL+sHBajk0KAhrMObYz+Tng7IrUMb5CvPK/GALMcVsT0BwtQymbekR6W4bNFFhVTjABJhP+OJ0DWo7MwkIu2SDngQTGTImXyUUlKE+2IH5OrmRsrq/m9AG8M4V99CXsT0IK2P8cLdg6GU3xR7BmdxuA/sWoHz6U09FV2tSKTdbRMqMpOxKXhjKMdmK9jHFtH13ArmKUAU4MLHXg+50LyubOHOY/o8AE6FrQO6KqAwivYOnbDSuBfQNpYeecUdbVToY5VOfEU4iL4FkaHh4aEwgfbePmPptsJ6IGi3wa/EfatiSxfnQ/A6XEzfNnF3/iUr3vA/YVODksAFVJFB37M5DXPKaWYMrUX9hMyCCplS1qVWByA5aSUMjL27RJcCOtWVN2DTs8UIJDbMdADiUerw92K+FhJhBBrBLNHy+PSMh7KhblnaNeCXuihtqQHNqSIM4SPFhPYjb+lXAkR1M8hJE9Bo45jw/fmWxeZlQcV7Vy+leLF+t8QjK6FUjqb5aHm1yvG7rFt7K4NGtm3ypQQu0JmUyDoYpoTDuK2m2JSGSAW/3D7OF9xR54jxuZBrC9/Z0z7Tzuz7jLEZrBTM/ASLp1gF/zGRQP/G/GgcXEOx6y3FkdeEle3txAIXOMslnytYHZB+FCW1y3+JXE9h/TVVFB9eeDdcImMRQj9UOXuhQ/K2IaNZXQ252Ks9Ce0KhNycQL6BH1wjFY46T3SwIxHJL5VXhbubZ8FvH3VJmsVUkbo3ANe+O9DghLmRgzvLsfpIrLS4NU87hQ+UMLyP5UPB6ArJsDs97LsNCh7LYBlbwYApEc+u168U/PNGT8w59Sv4JgF5fxXGQNb9+XcayVkt/neS8zjkhrAWxGvSITsPzWwe8IdCxfFcD80MPfCfNpkQvYMh7XwNYVDf3g65LCqaK9aXlNN4TrgwZAhsnKQmNYaoZJhBRvfgNXFPMe3HVEKMjz6oPUo45gFTsDUw2y/Akerlb3IuLDiMgNGlcRxAtEW2qC/0wFVjVBQYc5gEy0f/YLpfiLnIyqVwBj+1kaFbiW1aoopEisw50PhHxtL1JVIQJOAixBqKs0H/J3/L9tisCsDmRizH+vGcS9t32BVNc2EWodxxLUY/pqxywTYpdxOhYc4KPfbAEwmc0xEt5FYh3ZiJUSn664KsiYzh+eRjVhe3qE/EOdKOibWXC56yFSzE/X/QXrMQuWFTu54oL82BaLbp/Ff99emb8kst4z+vehCioKG7CY+269L4/0yneSGg2Q7H5cEZ8Vsw5tWByCwtwCyyqgEV5yBTH6/vKSkvEotuZCk9jUvfyw655sd+B4xuU6pcfJ2TJKfhA48yN8E4lhnR+Sq+48+YjbE6FKt8DbQqXGrWeAbHCz2HWXIBaYWsW7xHVQiva/7AxAI7mu8acJBbjbYrcUJmh9CrFnaNZJGOSHsOVPCIEuyFy32nSdX4YEhAE6T/STiLZv2YC9Bm2NncLbo/srnz3CGK+BD/FTQPGAGoIwrfRJmhwH2WB3104tCw==" />
</div>

<div>

	<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="10C1FD69" />
</div>

					
					 
					<div class="header">
					    <a name="Main"></a>
					    <a name="_articleTop" id="_articleTop"></a>

					    
						<div>
							<span id="ctl00_TagListHorz_TagWrp" class="tags horizontal">

	
	

	
	<span id="ctl00_TagListHorz_VisibleTags"><div class="t"><a rel="tag" href="/Tags/Windows" data-id="94">Windows</a></div></span> 

	
	
</span>


						</div>
					    <div class="title">
					        <h1 id="ctl00_ArticleTitle">Stuxnet Malware Analysis Paper</h1>
					    </div>

                        <div>
					        
					        <div class="entry flex-container">

								

                                <div class="flex-item" style="flex:1 1 auto">
                                    <div class="flex-container" style="justify-content:space-between;flex-wrap:wrap-reverse">
                                       <span id="ctl00_Authors" class="author flex-item"><a href="/script/Membership/View.aspx?mid=5879897" rel="author">AmrThabet</a></span> 

                                        <div class="flex-item" style="margin-top:-4px;">
                                            <div id="ctl00_RateArticle_RatingTable" class="small-text" data-objectref="2_246545">

	<meta itemprop="upvoteCount" content="50">


	<div id="ctl00_RateArticle_RatingRow" class="flex-container rating-container large-stars">

					
		

		
		<div class="nowrap tooltip">

			
			<div id="ctl00_RateArticle_ResultNoHist" class="rating-result"><div class="flex-container rating-stars large-stars"><div><img src='https://www.codeproject.com/script/Ratings/Images/star-fill-lg.png' style='width:24px;height:24px'></div><div><img src='https://www.codeproject.com/script/Ratings/Images/star-fill-lg.png' style='width:24px;height:24px'></div><div><img src='https://www.codeproject.com/script/Ratings/Images/star-fill-lg.png' style='width:24px;height:24px'></div><div><img src='https://www.codeproject.com/script/Ratings/Images/star-fill-lg.png' style='width:24px;height:24px'></div><div style='width:22px;' class='clipped'><img src='https://www.codeproject.com/script/Ratings/Images/star-fill-lg.png' style='width:24px;height:24px'></div><div style='width:2px;position:relative' class='clipped'><img src='https://www.codeproject.com/script/Ratings/Images/star-empty-lg.png' style='width:24px;height:24px;position:absolute;top:0px;right:0'></div></div></div>
			

			
			

			
            

			
                

		</div>
		
	
		
		<div id="ctl00_RateArticle_VoteCountNoHist" class="rating-votes nowrap">4.95/5  (51 votes)</div>	

		

		
		<div class="rating-undo" title="Undo vote" style="margin-left:5px;display:none"></div>

		
		
	</div>

	
	

</div>

                                        </div>
                                    </div>

                                    <div class="flex-container" style="color:#666;font-size:smaller">
                                        <span id="ctl00_LastUpdated" class="date flex-item-tight" title="Date last updated">9 Sep 2011</span><a id="ctl00_LicenseLink" title="The Code Project Open License (CPOL)" class="license flex-item-tight" title="Licence" href="http://www.codeproject.com/info/cpol10.aspx">CPOL</a><span id="ctl00_ReadingTime" class="stats flex-item-tight">29 min read</span><span id="ctl00_HorizontalStats" class="stats flex-item-tight"><span class="stats"><span title='Views'><img src='https://www.codeproject.com/App_Themes/CodeProject/Img/views32.png' style='width:16px'> 243.3K</span> &nbsp; <span title='Downloads'><img src='https://www.codeproject.com/App_Themes/CodeProject/Img/download32.png' style='width:16px'> 5.8K</span> &nbsp; </span></span>
                                    </div>
                                </div>
					        </div>

                            

                        </div>

                        <div id="ctl00_DescriptionSpot" class="summary">This article will focus on Stuxnet’s windows infection methods and spreading methods. The tricks were used by stuxnet and the evidences behind the criminals of stuxnet.</div><span id="ctl00_ThumbnailUrl" class="date" content="https://www.codeproject.com/script/Articles/Images/article100x80.png"></span>			

                    </div>
                    
					
					

					

					
					

					
					

						
					

					

						
						<div id="contentdiv" class="text">
						



<!-- Article Starts -->

<ul class="download">
	<li><a href="/KB/Articles/StuxnetMalware/Stuxnet_Malware_Analysis_Paper.pdf">Download the Article in PDF - 2.17 MB </a></li></ul>

<h2>Table Of Contents</h2>

<ul>
	<li><a href="#ch1">1. Introduction:</a>&nbsp;</li>	<li><a href="#ch2">2. Payload:</a>&nbsp;</li>	<li><a href="#ch3">3. Suspects:</a></li>	<li><a href="#ch4">4. Technical Details:</a>
	<ul>
		<li><a href="#ch4.1">4.1.Stuxnet Live Cycle</a></li>		<li><a href="#ch4.2">4.2. Main Dropper (~WTR4132.TMP)</a></li>		<li><a href="#ch4.3">4.3. Main Stuxnet DLL</a>
		<ul>
			<li><a href="#ch4.3.1">4.3.1. Escalating the Privileges and Injecting Into a New Process</a></li>			<li><a href="#ch4.3.2">4.3.2. Main Stuxnet DLL: Installing Stuxnet into the Infected Machine</a></li>		</ul>
		</li>		<li><a href="#ch4.4">4.4. Spreading Mechanism</a>
		<ul>
			<li><a href="#ch4.4.1">4.4.1. The USB Drives Infection</a></li>			<li><a href="#ch4.4.2">4.4.2. Spreading via Network</a></li>		</ul>
		</li>		<li><a href="#ch4.5">4.5. Updating Mechanism</a>
		<ul>
			<li><a href="#ch4.5.1">4.5.1. Updating via Internet</a></li>			<li><a href="#ch4.5.2">4.5.2. Updating via Peer to Peer Connection</a></li>		</ul>
		</li>		<li><a href="#ch4.6">4.6. Rootkits</a>
		<ul>
			<li><a href="#ch4.6.1">4.6.1. User-Mode Rootkit (~WTR4141.TMP)</a></li>			<li><a href="#ch4.6.2">4.6.2. Kernel-Mode Rootkit (MRxNet)</a></li>		</ul>
		</li>		<li><a href="#ch4.7">4.7. Loading Mechanism</a>
		<ul>
			<li><a href="#ch4.7.1">4.7.1. ~WTR4141.TMP</a></li>			<li><a href="#ch4.7.2">4.7.2. MRxCls Loader Driver</a>
			<ul>
				<li><a href="#ch4.7.2.1">4.7.2.1. The Input</a></li>				<li><a href="#ch4.7.2.2">4.7.2.2. Initialization</a></li>				<li><a href="#ch4.7.2.3">4.7.2.3. Stage One : Injecting data in kernel-mode</a></li>				<li><a href="#ch4.7.2.4">4.7.2.4. Stage Two : Creating kernel32 Import and Overwriting the Entrypoint</a></li>				<li><a href="#ch4.7.2.5">4.7.2.5. Stage Three : Loading and Executing Stuxnet in The User-Mode</a></li>			</ul>
			</li>		</ul>
		</li>	</ul>
	</li>	<li><a href="#ch5">5. Conclusion</a></li>	<li><a href="#ch6">6. References:</a></li></ul>

<p><a name="ch1"></a></p>

<h2>1. Introduction</h2>

<p>Stuxnet is not only a new virus or worm but it's a new era of malware. This virus changed the meaning of malware and their goals. You hear about a virus annoying people or stealing banks or credit cards, but that's the first time you hear about virus damages buildings, destroys machines or kills people and that's Stuxnet.<br>
Stuxnet has gained a lot of attention from malware researchers and media in the last year. It's created to sabotage Iran's nuclear program.</p>

<p>This complex threat uses up to four zero-day vulnerabilities in windows OS and includes many tricks to avoid being detected by the behavioral-blocking antivirus programs. It damaged the Iranian nuclear reactor and its machines by infecting the PLCs (Programmable Logic Controller) that control the machines there. That makes it modify the control program which changes the behavior of the machine.</p>

<p>Here we will talk about the technical details about stuxnet and the experience that I got from analyzing this malware. We will talk about how stuxnet works and the stuxnet life cycle. But here we will not talk about the SCADA systems and how stuxnet infects them and we will take a hint on the vulnerabilities that are used by stuxnet.</p>

<p><a name="ch2"></a></p>

<h2>2. Payload</h2>

<p>This worm was created mainly to sabotage the Iranian Nuclear Program. Once installed on a PC, Stuxnet uses Siemens' default passwords to gain access to the systems that run the WinCC and PCS 7 programs which control and modify the code of the PLCs (programmable logic controller) which control the machines themselves</p>

<p>Stuxnet operates in two stages after infection, according to Symantec Security Response Supervisor Liam O'Murchu. First it uploads configuration information about the Siemens system to a command-and-control server. Then the attackers are able to pick a target and actually reprogram the way it works. "They decide how they want the PLCs to work for them, and then they send code to the infected machines that will change how the PLCs work," O'Murchu said.</p>

<p>It managed to infect facilities tied to Iran's controversial nuclear programme before re-programming control systems to spin up high-speed centrifuges and slow them down</p>

<p><a name="ch3"></a></p>

<h2>3. Suspects</h2>

<p>Israel is an obvious suspect. Israel considers a nuclear Iran to be a direct existential threat. But, until now, there's no real evidence says that Israel who really creates this worm. There are some theories said that there are evidences on Israel as the creator depending on some dates and words found inside the malware and also there's an analysis from the industrial control-systems maker "Siemens" reportedly backs speculation that Iran may have been the target of Stuxnet's attack and that Israel may have been involved.</p>

<p>A report by the New York Times suggested Stuxnet was a joint US-Israeli operation that was tested by Israel on industrial control systems at the Dimona nuclear complex during 2008 prior to its release a year later, around June 2009. The worm wasn't detected by anyone until a year later, suggesting that for all its possible shortcomings the worm was effective at escaping detection on compromised systems.</p>

<p>But these evidences aren't real evidences in the court and the wormâ€˜s still a perfect crime.</p>

<p><a name="ch4"></a></p>

<h2>4.Technical Details</h2>

<p><a name="ch4.1"></a></p>

<h3>4.1.Stuxnet Live Cycle</h3>

<p><img border="0" height="480" hspace="0" src="/KB/Articles/StuxnetMalware/01.jpg" width="497"></p>

<p>This is the live cycle of stuxnet virus on windows OS. We will describe every step in this cycle beginning by WTR4132.TMP File and that's the main dropper of stuxnet worm.</p>

<p><a name="ch4.2"></a></p>

<h3>4.2. Main Dropper (~WTR4132.TMP)</h3>

<p>This File is a dynamic link library file loaded into Explorer.exe (we will describe the loading of it in the booting mechanism). It begins the execution by searching for a section in it named ".stub" section.</p>

<p><img border="0" height="180" hspace="0" src="/KB/Articles/StuxnetMalware/02_small.jpg" width="640"></p>

<p>This section contains the main stuxnet DLL file. And this DLL contains all stuxnet's functions, mechanisms, files and rootkits.</p>

<p>And that's the MZ File inside .stub section:</p>

<p>&nbsp;<br>
<img border="0" height="156" hspace="0" src="/KB/Articles/StuxnetMalware/03.jpg" width="640"></p>

<p>This Section (".stub") includes also the configuration data of stuxnet which is so important on the spreading mechanism, updating mechanism and many other things.</p>

<p>After finding this section, it loads stuxnet DLL file in a special way. First, it allocates a memory buffer for the DLL file to be loaded. Then, it patches 6 <em>ntdll.dll</em> APIs with these names:</p>

<ol>
	<li><em>ZwMapViewOfSection</em></li>	<li><em>ZwCreateSection</em></li>	<li><em>ZwOpenFile </em></li>	<li><em>ZwClose </em></li>	<li><em>ZwQueryAttributesFile&nbsp;</em></li>	<li><em>ZwQuerySection</em></li></ol>

<p>To force these APIs to make .stub section like the file which you need to open with ZwOpenFile and to read from this section as it's a file on the harddisk. These patches make LoadLibraryA load a DLL file not from the harddisk (as usual) but from a place in the memory.</p>

<p>It calls LoadLibraryA with the DLLName like KERNEL32.DLL.ASLR.XXXX to load the Main DLL File as I described above and at then end, it calls to Function #15 in the Main Stuxnet DLL.</p>

<p><a name="ch4.3"></a></p>

<h3>4.3. Main Stuxnet DLL</h3>

<p><em><a name="ch4.3.1"></a> </em></p>

<h3><em>4.3.1. Escalating the Privileges and Injecting Into a New Process</em></h3>

<p>When the main DLL begins the execution. It unupx itself (as the DLL is upxed) and then checks the configuration data of this stuxnet sample and checks the environment to choose if it will continue or exit from the beginning.</p>

<p>It checks if the configuration data is correct and recent and then it checks the admin rights. If it's not running on administrator level, it uses one of two zero-day vulnerabilities to escalate the privileges and run in the administrator level.</p>

<p><em>CVE-2010-2743(MS-10-073) "“Win32K.sys Keyboard Layout Vulnerability<br>
CVE-xxxx-xxxx(MS-xx-xxx) "“Windows Task Scheduler Vulnerability</em></p>

<p>These two vulnerabilities allow the worm to escalate the privileges and run in a new process ("csrss.exe" in case of Win32K.sys) or as a new task in the Task Scheduler case. It makes also some other checks like checking on 64bits or 32bits and so on. After everything goes right and the environment is prepared to be infected by stuxnet, it injects itself into another process to install itself from that process. The injection begins by searching for an Antivirus application installed in the machine.</p>

<p>Depending on the antivirus application (AVP or McAfee or what?), stuxnet chooses the process to inject itself into. If there's no antivirus program it chooses "lsass.exe"</p>

<p>You will see the processes that stuxnet could choose in this Figure:</p>

<p><br>
<img border="0" height="320" hspace="0" src="/KB/Articles/StuxnetMalware/04.jpg" width="382"></p>

<p>It doesn't search for that process in the task manager to inject itself into, but it creates a new process (using CreateProcess) of the chosen application in the suspended form like that:</p>

<div class='pre-lang' id='premain950983'><div>ASM</div><div class='pre-action-link'><span id='copycode950983' class='copy-code' data-index='950983' style='visibility:hidden'><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' viewBox='0 0 460 460' style='width: 16px;height:16px;' xml:space='preserve'><g><path d='M425.934,0H171.662c-18.122,0-32.864,14.743-32.864,32.864v77.134h30V32.864c0-1.579,1.285-2.864,2.864-2.864h254.272     c1.579,0,2.864,1.285,2.864,2.864v254.272c0,1.58-1.285,2.865-2.864,2.865h-74.729v30h74.729 c18.121,0,32.864-14.743,32.864-32.865V32.864C458.797,14.743,444.055,0,425.934,0z'></path><path d='M288.339,139.998H34.068c-18.122,0-32.865,14.743-32.865,32.865v254.272C1.204,445.257,15.946,460,34.068,460h254.272 c18.122,0,32.865-14.743,32.865-32.864V172.863C321.206,154.741,306.461,139.998,288.339,139.998z M288.341,430H34.068    c-1.58,0-2.865-1.285-2.865-2.864V172.863c0-1.58,1.285-2.865,2.865-2.865h254.272c1.58,0,2.865,1.285,2.865,2.865v254.273h0.001 C291.206,428.715,289.92,430,288.341,430z'></path></g></svg></span></div></div>
<pre id='pre950983' style='margin-top:0;' class='lang-asm' data-language='asm' data-allowShrink='True' data-collapse='False'>
<span class="code-keyword">ESP</span> ==&gt;  &gt; 0006F4F8  |ModuleFileName = <span class="code-string">"</span><span class="code-string">C:\WINDOWS\\system32\\lsass.exe"</span>
ESP+4    &gt; <span class="code-digit">00000000</span>  |CommandLine = NULL
ESP+8    &gt; <span class="code-digit">00000000</span>  |pProcessSecurity = NULL
ESP+C    &gt; <span class="code-digit">00000000</span>  |pThreadSecurity = NULL
ESP+10   &gt; <span class="code-digit">00000001</span>  |InheritHandles = TRUE
ESP+14   &gt; 0800000C  |CreationFlags = CREATE_SUSPENDED|DETACHED_PROCESS|CREATE_NO_WINDOW
ESP+18   &gt; <span class="code-digit">00000000</span>  |pEnvironment = NULL
ESP+1C   &gt; <span class="code-digit">00000000</span>  |CurrentDir = NULL
ESP+20   &gt; 0006F13C  |pStartupInfo = 0006F13C
ESP+24   &gt; 0006F730  \pProcessInfo = 0006F730.</pre>

<p>After creating this process, it injects itself by a special way. This special way is to unload the program from its memory (ex. unload lsass.exe module from its memory) and load another PE File from stuxnet DLL resources in the same place of the previously unloaded module (lsass.exe for example).</p>

<p>Before loading this new PE File, stuxnet makes some modifications to the file by adding new section (in the beginning) named <strong>".verif"</strong>. This section makes the PE File's size equal to the size of the previously unloaded module. And at the place of the entrypoint of the unloaded module, stuxnet writes a "jmp" instruction to the entrypoint of this PE File.</p>

<p><img border="0" height="133" hspace="0" src="/KB/Articles/StuxnetMalware/05_small.jpg" width="640"></p>

<p>The last step, stuxnet copies the .stub section and the main DLL to the memory of the infected process and writes on .bin section the pointer to this memory buffer.</p>

<p><img border="0" height="333" hspace="0" src="/KB/Articles/StuxnetMalware/06_small.jpg" width="640"></p>

<p>At the end, stuxnet resumes the main thread of this infected process. The PE file reloads the main stuxnet DLL and calls to Function #16.</p>

<p><em><a name="ch4.3.2"></a> </em></p>

<h3><em>4.3.2. Main Stuxnet DLL: Installing Stuxnet into the Infected Machine</em></h3>

<p>The Function #16 begins by checking the configuration data and be sure that everything is ready to begin the installation. And also, it checks if the there's a value in the registry with this name "<code>NTVDM TRACE</code>" in</p>

<p><code>SOFTWARE\Microsoft\Windows\CurrentVersion\MS-DOS Emulation</code></p>

<p>And then, it checks if this value equal to "19790509". This special number seems a date "May 9, 1979" and this date has a historical meaning (by Wikipedia) "Habib Elghanian was executed by a firing squad in Tehran sending shock waves through the closely knit Iranian Jewish community"</p>

<p><img border="0" height="123" hspace="0" src="/KB/Articles/StuxnetMalware/07_small.jpg" width="640"></p>

<p>After this test, Stuxnet installs itself with writing 6 files in the Windows directory 4 encrypted files:</p>

<ul>
	<li><em>C:\WINDOWS\inf\oem7A.PNF</em></li>	<li><em>C:\WINDOWS\inf\oem6C.PNF</em></li>	<li><em>C:\WINDOWS\inf\mdmcpq3.PNF</em></li>	<li><em>C:\WINDOWS\inf\mdmeric3.PNF</em></li></ul>

<p>And 2 device drivers:</p>

<ul>
	<li><em>C:\WINDOWS\system32\Drivers\mrxnet.sys</em></li>	<li><em>C:\WINDOWS\system32\Drivers\mrxcls.sys</em></li></ul>

<p>After that, it installs the device drivers into the registry to be sure that they will run every time the computer boots.<br>
It forces them to be loaded in the beginning before most of windows system applications (and that's will be explained later).</p>

<p><img border="0" height="328" hspace="0" src="/KB/Articles/StuxnetMalware/08_small.jpg" width="640"> <img border="0" height="329" hspace="0" src="/KB/Articles/StuxnetMalware/09_small.jpg" width="640"></p>

<p>After the installation, it loads the mrxnet driver by calling <code>ZwLoadDriver</code>. It calls to this function after adjusting its privileges by "<code>AdjustTokenPrivileges</code>" to add the <code>SeLoadDriverPrivilege </code>to its privileges.</p>

<p>At the end, it modifies the Windows Firewall (Windows Defender) setting to avoid being stopped by this firewall. It some values in the key:</p>

<div class='pre-lang' id='premain796145'><div> </div><div class='pre-action-link'><span id='copycode796145' class='copy-code' data-index='796145' style='visibility:hidden'><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' viewBox='0 0 460 460' style='width: 16px;height:16px;' xml:space='preserve'><g><path d='M425.934,0H171.662c-18.122,0-32.864,14.743-32.864,32.864v77.134h30V32.864c0-1.579,1.285-2.864,2.864-2.864h254.272     c1.579,0,2.864,1.285,2.864,2.864v254.272c0,1.58-1.285,2.865-2.864,2.865h-74.729v30h74.729 c18.121,0,32.864-14.743,32.864-32.865V32.864C458.797,14.743,444.055,0,425.934,0z'></path><path d='M288.339,139.998H34.068c-18.122,0-32.865,14.743-32.865,32.865v254.272C1.204,445.257,15.946,460,34.068,460h254.272 c18.122,0,32.865-14.743,32.865-32.864V172.863C321.206,154.741,306.461,139.998,288.339,139.998z M288.341,430H34.068    c-1.58,0-2.865-1.285-2.865-2.864V172.863c0-1.58,1.285-2.865,2.865-2.865h254.272c1.58,0,2.865,1.285,2.865,2.865v254.273h0.001 C291.206,428.715,289.92,430,288.341,430z'></path></g></svg></span></div></div>
<pre id='pre796145' style='margin-top:0;' data-language='text' data-allowShrink='True' data-collapse='False'>
SOFTWARE\Microsoft\Windows Defender\Real-Time Protection </pre>

<p>And the values are:</p>

<ul>
	<li><code>EnableUnknownPrompts</code></li>	<li><code>EnableKnownGoodPrompts</code></li>	<li><code>ServicesAndDriversAgent</code></li></ul>

<p>It sets them all to zero and disables the firewall for stuxnet.</p>

<p>Now the installation ends and now we will talk about the spreading mechanisms</p>

<p><a name="ch4.4"></a></p>

<h3>4.4. Spreading Mechanism</h3>

<p><a name="ch4.4.1"></a></p>

<h3><em>4.4.1. The USB Drives Infection</em></h3>

<p>For infecting USB Flash memory, Stuxnet creates a new hidden window "<code>AFX64c313</code>" and get notified of any new USB flash memory inserted to the computer by waiting for "<code>WM_DEVICECHANGE</code>" Windows Message. After getting notified of a new drive added to the computer (USB Flash Memory), stuxnet writes 6 files into the flash memory drive:</p>

<ul>
	<li>Copy of Shortcut to.lnk</li>	<li>Copy of Copy of Shortcut to.lnk</li>	<li>Copy of Copy of Copy of Shortcut to.lnk</li>	<li>Copy of Copy of Copy of Copy of Shortcut to.lnk</li></ul>

<p>And 2 executable files (DLL files):</p>

<ul>
	<li><em>~WTR4141.tmp</em></li>	<li><em>~WTR4132.tmp</em></li></ul>

<p>These malformed shortcut files use vulnerability in Windows Shell named:</p>

<p><em>CVE-2010-2568(MS-10-046) -Windows Shell LNK Vulnerability</em></p>

<p>This vulnerability is not a buffer-overflow vulnerability but it's due to a bad way for windows to load icons for LNK files which creates the vulnerability.</p>

<p>These shortcuts are special shortcuts for an unknown type of files named CPL Files. These files are the Control Panel applications like datetime.cpl in windows directory (you can test it) and many of them in windows directory.</p>

<p>You can create a shortcut similar to these shortcuts by choosing Control Panel then Switch to classical view then right click on any application of them and click "create shortcut" as what you see in the picture:</p>

<p><img border="0" height="158" hspace="0" src="/KB/Articles/StuxnetMalware/10.jpg" width="203"></p>

<p>If you try to compare this shortcut with the malformed shortcut by stuxnet you will see that:</p>

<p><img border="0" height="200" hspace="0" src="/KB/Articles/StuxnetMalware/11_small.jpg" width="640"></p>

<p>They are very similar (the white spaces are the similar places). Maybe the differences are in the end of the shortcut.</p>

<p>If we analyze the shortcut, we will see that all shortcuts contain the following sections:</p>


	<table border="1" cellpadding="1" cellspacing="1"><tbody>		<tr>			<td><strong>.LNK File Format</strong></td>		</tr>		<tr>			<td>1. Header</td>		</tr>		<tr>			<td>2. Shell Item Id List</td>		</tr>		<tr>			<td>3. File Location Info</td>		</tr>		<tr>			<td>4. Description</td>		</tr>		<tr>			<td>5. Relative Path</td>		</tr>		<tr>			<td>6. Working Directory</td>		</tr>		<tr>			<td>7. Command Line Arguments</td>		</tr>		<tr>			<td>8. Icon Filename</td>		</tr>		<tr>			<td>9. Additional Info</td>		</tr>	</tbody></table>

<p>In our Malformed Shortcut, it has only the first 2 sections. The first section is like this:</p>


	<table border="1" cellpadding="1" cellspacing="1" width="500"><tbody>		<tr>			<td><strong>Stuxnet's Shortcut Header</strong></td>		</tr>	</tbody></table>


	<table border="1" cellpadding="1" cellspacing="1" width="500"><tbody>		<tr>			<td>Magic</td>			<td>4C 00 00 00</td>		</tr>		<tr>			<td>GUID</td>			<td>01 14 02 00 00 00 00 00 C0 00 00 00 00 00 00 46</td>		</tr>		<tr>			<td>Shortcut flags</td>			<td>0x0000001 : Shell Item ID List present</td>		</tr>		<tr>			<td>Target File flags</td>			<td>00 00 00 00</td>		</tr>		<tr>			<td>Creation Time</td>			<td>00 00 00 00 00 00 00 00</td>		</tr>		<tr>			<td>Last access time:</td>			<td>00 00 00 00 00 00 00 00</td>		</tr>		<tr>			<td>Modified time</td>			<td>00 00 00 00 00 00 00 00</td>		</tr>		<tr>			<td>File length</td>			<td>00 00 00 00 (the target is not a file)</td>		</tr>		<tr>			<td>Icon Number</td>			<td>00 00 00 00</td>		</tr>		<tr>			<td>Show Window</td>			<td>01 00 00 00 == 1 (Normal Window)</td>		</tr>		<tr>			<td>Hot Key</td>			<td>00 00 00 00</td>		</tr>		<tr>			<td>Reserved</td>			<td>00 00 00 00</td>		</tr>		<tr>			<td>Reserved</td>			<td>00 00 00 00</td>		</tr>	</tbody></table>

<p>This header is exactly the same in the CPL Shortcut that you create before. The next Section is the Shell Item ID List.</p>

<p>It's hard to explain this section but every object in windows (like a folder, a file, the control panel and so on) has a PIDL. I don't have any idea PIDLs but it's an ID with reference to this object.</p>

<p>The Shell Item ID List begins by an unsigned short represent the size of the whole Section (in the Original CPL File the size == size_of_whole_file "“ size_of_header).</p>

<p>After that, this unsigned short followed by a size of an ID and then the ID of an item in the list then the next size and item and so on until reach the end of this section. This section ends by an item its size equal to zero.</p>

<p>These IDs could represent a file like that:</p>

<p><img border="0" height="96" hspace="0" src="/KB/Articles/StuxnetMalware/12.jpg" width="631"></p>

<p>Or represent a virtual object like Control Panel like in this malformed shortcut.</p>

<p>In the malformed shortcut, this section begins with the pid of the Control Panel and then some other pids until reach an item contains the path and the filename of stuxnet DLL (<code>"~WTR4141.TMP"</code>)</p>

<p>The path is like that:</p>

<div class='pre-lang' id='premain383727'><div> </div><div class='pre-action-link'><span id='copycode383727' class='copy-code' data-index='383727' style='visibility:hidden'><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' viewBox='0 0 460 460' style='width: 16px;height:16px;' xml:space='preserve'><g><path d='M425.934,0H171.662c-18.122,0-32.864,14.743-32.864,32.864v77.134h30V32.864c0-1.579,1.285-2.864,2.864-2.864h254.272     c1.579,0,2.864,1.285,2.864,2.864v254.272c0,1.58-1.285,2.865-2.864,2.865h-74.729v30h74.729 c18.121,0,32.864-14.743,32.864-32.865V32.864C458.797,14.743,444.055,0,425.934,0z'></path><path d='M288.339,139.998H34.068c-18.122,0-32.865,14.743-32.865,32.865v254.272C1.204,445.257,15.946,460,34.068,460h254.272 c18.122,0,32.865-14.743,32.865-32.864V172.863C321.206,154.741,306.461,139.998,288.339,139.998z M288.341,430H34.068    c-1.58,0-2.865-1.285-2.865-2.864V172.863c0-1.58,1.285-2.865,2.865-2.865h254.272c1.58,0,2.865,1.285,2.865,2.865v254.273h0.001 C291.206,428.715,289.92,430,288.341,430z'></path></g></svg></span></div></div>
<pre id='pre383727' style='margin-top:0;' data-language='text' data-allowShrink='True' data-collapse='False'>
\\.\STORAGE#RemovableMedia#7&amp;364cf31c&amp;0&amp;RM#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}\~WTR4141.tmp </pre>

<p>You will ask me, so why there are four shortcut files?</p>

<p>Because every file of them contains a different form of the path to wtr4141.tmp file to ensure that stuxnet is compatible with all versions of windows OS that have this vulnerability</p>

<p>The paths are these:</p>

<p><strong>Windows7: </strong></p>

<p><code>\\.\STORAGE#Volume#_??_USBSTOR#Disk&amp;Ven_____USB&amp;Prod_FLASH_DRIVE&amp;Rev_#12345000100000000173&amp;0#{53f56307-b6bf-11d0-94f2-00a0c91efb8b}#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}\~WTR4141.tmp</code></p>

<p><strong>Windows Vista: </strong></p>

<p><code>\\.\STORAGE#Volume#1&amp;19f7e59c&amp;0&amp;_??_USBSTOR#Disk&amp;Ven_____USB&amp;Prod_FLASH_DRIVE&amp;Rev_#12345000100000000173&amp;0#{53f56307-b6bf-11d0-94f2-00a0c91efb8b}#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}\~WTR4141.tmp</code></p>

<p><strong>Windows XP, Windows Server 2003 and Windows 2000: </strong></p>

<p><code>\\.\STORAGE#RemovableMedia#8&amp;1c5235dc&amp;0&amp;RM#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}\~WTR4141.tmp</code></p>

<p>These paths force <em>Explorer.exe</em> to load stuxnet and execute its code.</p>

<p>The Explorer calls to an API named "Shell32.LoadCPLModule" to load the icon for this shortcut which calls to LoadLibraryA API which executes the main function of wtr4141.tmp.</p>

<p>That's the infection mechanism for Stuxnet using this vulnerability.</p>

<p><a name="ch4.4.2"></a></p>

<h3><em>4.4.2. Spreading via Network</em></h3>

<p>Stuxnet spreads via Network using one of vulnerabilities:</p>

<ul>
	<li><em>CVE-2008-4250(MS-08-067) "“Windows Server Service NetPathCanonicalize() Vulnerability</em></li>	<li><em>CVE-2010-2729(MS-10-061) "“Windows Print Spooler Service Vulnerability</em></li></ul>

<p>The first vulnerability is not a zero-day vulnerability, it's already known. This vulnerability was used before by Conficker. In this vulnerability, stuxnet looks for C$ and Admin$ shares on remote systems. Then, it copies itself as a file named "DEFRAGxxxxx.TMP" in the first writable directory found on the share.</p>

<p>And then, it tries to execute a command:</p>

<div class='pre-lang' id='premain67871'><div> </div><div class='pre-action-link'><span id='copycode67871' class='copy-code' data-index='67871' style='visibility:hidden'><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' viewBox='0 0 460 460' style='width: 16px;height:16px;' xml:space='preserve'><g><path d='M425.934,0H171.662c-18.122,0-32.864,14.743-32.864,32.864v77.134h30V32.864c0-1.579,1.285-2.864,2.864-2.864h254.272     c1.579,0,2.864,1.285,2.864,2.864v254.272c0,1.58-1.285,2.865-2.864,2.865h-74.729v30h74.729 c18.121,0,32.864-14.743,32.864-32.865V32.864C458.797,14.743,444.055,0,425.934,0z'></path><path d='M288.339,139.998H34.068c-18.122,0-32.865,14.743-32.865,32.865v254.272C1.204,445.257,15.946,460,34.068,460h254.272 c18.122,0,32.865-14.743,32.865-32.864V172.863C321.206,154.741,306.461,139.998,288.339,139.998z M288.341,430H34.068    c-1.58,0-2.865-1.285-2.865-2.864V172.863c0-1.58,1.285-2.865,2.865-2.865h254.272c1.58,0,2.865,1.285,2.865,2.865v254.273h0.001 C291.206,428.715,289.92,430,288.341,430z'></path></g></svg></span></div></div>
<pre id='pre67871' style='margin-top:0;' data-language='text' data-allowShrink='True' data-collapse='False'>
rundll32.exe "DEFRAGxxxxx.TMP",DllGetClassObjectEx</pre>

<p>The second vulnerability is a zero-day vulnerability. This vulnerability was first described by Carsten Kohler in Hackin9 Security Magazine 04-2009 in an article named "<em>Print Your Shell</em>"</p>

<p>This vulnerability wasn't used in the wild until Stuxnet. This vulnerability allows a guest user account to communicate to a machine with a shared printer and writes a file to the system directory in it.</p>

<p>The windows APIs for printing allows to choose the directory that you wish to copy your file to and with an API named "<code>GetSpoolFileHandle</code>" you can get the file handle of the newly created file in the target machine and then you can easily with ReadFile &amp; WriteFile APIs you can copy your file into the target machine.</p>

<p>For stuxnet, it copies 2 files into the target machine:</p>

<ul>
	<li><em>Windows\System32\winsta.exe</em></li>	<li><em>Windows\System32\wbem\mof\sysnullevnt.mof</em></li></ul>

<p>The first file is the stuxnet dropper and the second is a Managed Object Format file. This file (under some conditions) executes winsta.exe the stuxnet dropper.</p>

<p><a name="ch4.5"></a></p>

<h3>4.5. Updating Mechanism</h3>

<p><a name="ch4.5.1"></a></p>

<h3><em>4.5.1. Updating via Internet</em></h3>

<p>Stuxnet updates itself via Internet by establishing a HTTP connection to 2 malformed websites:</p>

<ul>
	<li><em>www.mypremierfutbol.com</em></li>	<li><em>www.todaysfutbol.com </em></li></ul>

<p>It sends an encrypted data like that:</p>

<p><em>http://www.mypremierfutbol.com/index.php?data=data_to_send</em></p>

<p>This data contains the IP, the Adaptor name and description and some other data related to the infected machine and stuxnet. After that it receives the newer version of stuxnet (in an encrypted form) begins by the imagebase then a flag and at the last the Executable Image</p>

<p><a name="ch4.5.2"></a></p>

<h3><em>4.5.2. Updating via Peer to Peer Connection</em></h3>

<p>After Stuxnet infects a machine, it creates a RPC server and listen to any connections comes from the any PC on the Network.</p>

<p>In the other PCs in the network, stuxnet establish a connection with this RPC Server.</p>

<p>This way allows stuxnet to update itself in the isolated PCs (from the Internet) but has in its network a PC has the ability to connect to the internet. This way is to suitable while infecting companies as there are some inside PCs haven't the ability to connect directly to the internet.</p>

<p><a name="ch4.6"></a></p>

<h3>4.6. Rootkits</h3>

<p><em><a name="ch4.6.1"></a> </em></p>

<h3><em>4.6.1. User-Mode Rootkit (~WTR4141.TMP)</em></h3>

<p>This file is a DLL File. It's loaded by the LNK Vulnerability. This file not only loads the Main Stuxnet Dropper (~WTR4132.TMP) but also it works as a user-mode rootkit to hide stuxnet files in the flash memory.</p>

<p>It firstly hooks the File Management APIs: (<code>FindFirstFileW</code>, <code>FindNextFileW</code>, <code>FindFirstFileExW</code>, <code>ntQueryDirectoryFile</code>, <code>zwQueryDirectoryFile</code>)</p>

<p>It hooks them by modifying the import table of the main process (Explorer.exe) and all loaded modules (searches for them in the TEB Thread Environment Block) by changing the address of these functions to the address of another functions inside the rootkit.</p>

<p><img border="0" height="474" hspace="0" src="/KB/Articles/StuxnetMalware/13.jpg" width="640"></p>

<p>These functions call to the original functions (windows APIs) and then modify their outputs to hide stuxnet files.</p>

<p>They check the output if it contains .LNK files with a specific size (4171 bytes) or contains a file named ~WTRabcd.TMP (as a+b+c+d = 10)</p>

<p><img border="0" height="471" hspace="0" src="/KB/Articles/StuxnetMalware/14.jpg" width="582"></p>

<p>This rootkit is only used once while infecting a PC but after that stuxnet installs another rootkit named "MRxNet" and it's a kernel-mode rootkit.</p>

<p><em><a name="ch4.6.2"></a> </em></p>

<h3><em>4.6.2. Kernel-Mode Rootkit (MRxNet)</em></h3>

<p><em>MRxNet is a simple filesystem filter created to hide the files that was created in the USB flash memory (.LNK &amp; TMP files) like in the user-mode rootkit. I reversed this driver manually into C++ using IDA Pro. You can download it code from My Blog: <a href="http://www.amrthabet.co.cc/">http://www.amrthabet.co.cc</a><br>
Or from the attachment files with this article</em></p>

<p><img border="0" height="238" hspace="0" src="/KB/Articles/StuxnetMalware/15_small.jpg" width="640"></p>

<p>But this rootkit doesn't modify the addresses in the import table, but it adds itself to the driver chain of these drivers</p>

<ul>
	<li><em>\\FileSystem\\ntfs</em></li>	<li><em>\\FileSystem\\fastfat</em></li>	<li><em>\\FileSystem\\cdfs</em></li></ul>

<p>These drivers are the main drivers for handling the files and folders in your machine. When MRxNet adds itself to the driver chain, it receives the requests (I/O Request Packets ISPs) to these drivers before these drivers receive them.</p>

<p>Receiving these requests allows MRxNet to modify the input to these drivers. And by using this trick MRxNet hides a directory named:</p>

<div class='pre-lang' id='premain651587'><div> </div><div class='pre-action-link'><span id='copycode651587' class='copy-code' data-index='651587' style='visibility:hidden'><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' viewBox='0 0 460 460' style='width: 16px;height:16px;' xml:space='preserve'><g><path d='M425.934,0H171.662c-18.122,0-32.864,14.743-32.864,32.864v77.134h30V32.864c0-1.579,1.285-2.864,2.864-2.864h254.272     c1.579,0,2.864,1.285,2.864,2.864v254.272c0,1.58-1.285,2.865-2.864,2.865h-74.729v30h74.729 c18.121,0,32.864-14.743,32.864-32.865V32.864C458.797,14.743,444.055,0,425.934,0z'></path><path d='M288.339,139.998H34.068c-18.122,0-32.865,14.743-32.865,32.865v254.272C1.204,445.257,15.946,460,34.068,460h254.272 c18.122,0,32.865-14.743,32.865-32.864V172.863C321.206,154.741,306.461,139.998,288.339,139.998z M288.341,430H34.068    c-1.58,0-2.865-1.285-2.865-2.864V172.863c0-1.58,1.285-2.865,2.865-2.865h254.272c1.58,0,2.865,1.285,2.865,2.865v254.273h0.001 C291.206,428.715,289.92,430,288.341,430z'></path></g></svg></span></div></div>
<pre id='pre651587' style='margin-top:0;' data-language='text' data-allowShrink='True' data-collapse='False'>
{58763ECF-8AC3-4a5f-9430-1A310CE4BE0A} </pre>

<p>By deleting its name from the input request (ISP) to these drivers. I don't know what this name represents it seems something like a GUID.</p>

<p>But the main goal of MRxNet is to modify the output of these drivers, so MRxNet adds to the request an IOCompletionRoutine. This routine is executed by the last driver executed in the chain after the result prepared (the reply to the request) and needed to be sent to the user again.</p>

<p>This function was created by Windows to modify the output of any driver and that's what MRxNet does.</p>

<p><img border="0" height="116" hspace="0" src="/KB/Articles/StuxnetMalware/16.jpg" width="517"></p>

<p>MRxNet modifies the output like the user-mode rootkit and deletes the entries that seem stuxnet files as what you can see in the figure:</p>

<p><img border="0" height="165" hspace="0" src="/KB/Articles/StuxnetMalware/17.jpg" width="480"></p>

<p>MRxNet contains a strange string in its data (seems a debug message before):<br>
<code>b:\\myrtus\\src\\objfre_w2k_x86\\i386\\guava.pdb</code><br>
This strange string contains a word "myrtus" and this word represents "MyRTUs" or represents a Hebrew word.</p>

<p>It could lead to the criminals behind this attack (Israel) or it could be a false positive "¦ but no one know.</p>

<p><a name="ch4.7"></a></p>

<h3>4.7. Loading Mechanism</h3>

<p><em><a name="ch4.7.1"></a> </em></p>

<h3><em>4.7.1. ~WTR4141.TMP</em></h3>

<p>This file (as we said before) is loaded by LNK Vulnerability. This file loads the Main Stuxnet Dropper by a known way. It calls to LoadLibraryA to load it and LoadLibraryA executes the main Entrypoint for this dropper to load and install stuxnet.</p>

<p><em><a name="ch4.7.2"></a> </em></p>

<h3><em>4.7.2. MRxCls Loader Driver</em></h3>

<p>MrxCls is a very complex project. It includes many features and abilities to load a program secretly without the attention of any Antivirus application specially the behavioral antiviruses.</p>

<p>This virus seems a separate project, wasn't created by the creators of Stuxnet worm. It seems that it was created by another department in the organization that creates Stuxnet.<br>
This driver wasn't modified along with the versions of stuxnet and also it contains many features that are not used by stuxnet worm.</p>

<p>This organization is not only an organization for programming but also it has spies and thieves in other companies that make it steal some certifications from big companies like Realtek Semi-Conductor Co-Op. This driver is signed with Realtek as a product from this company as you can in this image.</p>

<p><img border="0" height="365" hspace="0" src="/KB/Articles/StuxnetMalware/18_small.jpg" width="640"></p>

<p>That's what makes us sure that this virus is not a game from some virus writers but it's a planned crime.</p>

<p>Here we will talk about the technical details of the driver, how it works and the internal structure of it.</p>

<p>First we will talk about the input of the driver and then we will talk about how this driver deals with it.</p>

<p><a name="ch4.7.2.1"></a></p>

<h3><em>4.7.2.1. The Input</em></h3>

<p>MrxCls takes the parameters from the registry from a key name:</p>

<div class='pre-lang' id='premain621636'><div> </div><div class='pre-action-link'><span id='copycode621636' class='copy-code' data-index='621636' style='visibility:hidden'><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' viewBox='0 0 460 460' style='width: 16px;height:16px;' xml:space='preserve'><g><path d='M425.934,0H171.662c-18.122,0-32.864,14.743-32.864,32.864v77.134h30V32.864c0-1.579,1.285-2.864,2.864-2.864h254.272     c1.579,0,2.864,1.285,2.864,2.864v254.272c0,1.58-1.285,2.865-2.864,2.865h-74.729v30h74.729 c18.121,0,32.864-14.743,32.864-32.865V32.864C458.797,14.743,444.055,0,425.934,0z'></path><path d='M288.339,139.998H34.068c-18.122,0-32.865,14.743-32.865,32.865v254.272C1.204,445.257,15.946,460,34.068,460h254.272 c18.122,0,32.865-14.743,32.865-32.864V172.863C321.206,154.741,306.461,139.998,288.339,139.998z M288.341,430H34.068    c-1.58,0-2.865-1.285-2.865-2.864V172.863c0-1.58,1.285-2.865,2.865-2.865h254.272c1.58,0,2.865,1.285,2.865,2.865v254.273h0.001 C291.206,428.715,289.92,430,288.341,430z'></path></g></svg></span></div></div>
<pre id='pre621636' style='margin-top:0;' data-language='text' data-allowShrink='True' data-collapse='False'>
"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\MRxCls" </pre>

<p>It reads the "<code>Data</code>" value in this key as the parameter of the driver. This data contains an encrypted data. After decrypting it, we found this:</p>

<p><img border="0" height="412" hspace="0" src="/KB/Articles/StuxnetMalware/19.jpg" width="519"><br>
<img src="/KB/Articles/StuxnetMalware/20.jpg"></p>

<p>This data contains the name of some system processes and filenames for stuxnet files. This data tells the driver the filename of the stuxnet file and the process that stuxnet needs to inject its file in. This data is organized as follows:<br>
First the Header and its size is dynamic.</p>


	<table border="1" cellpadding="1" cellspacing="1"><tbody>		<tr>			<td><strong>Header</strong></td>		</tr>		<tr>			<td>Signature = 0 (4 bytes)</td>		</tr>		<tr>			<td>Pointer to The body (the end of Header) (4 bytes)</td>		</tr>		<tr>			<td>Reserved (4 bytes)</td>		</tr>		<tr>			<td>Number of Injections (4 bytes)</td>		</tr>	</tbody></table>

<p>After that there's an array of elements defined by the Number of Injections in the header. Every element contains the name of the infected process, the dll file to inject into this process, the flags and the key to decrypt the virus.</p>

<p>All stuxnet files are encrypted but with a key equal zero<br>
The structure of these elements is like that:</p>

<p>First it begins with the details of the infection and then followed with the Unicode strings of the process name and the stuxnet filename.</p>


	<table border="1" cellpadding="1" cellspacing="1"><tbody>		<tr>			<td><strong>The Elements</strong></td>		</tr>		<tr>			<td>Reserved (4 bytes)</td>		</tr>		<tr>			<td>The Exported Function To call in the injected dll (2 bytes)</td>		</tr>		<tr>			<td>Flags (2 bytes)</td>		</tr>		<tr>			<td>Key (4 bytes)</td>		</tr>		<tr>			<td>Reserved (4 bytes)</td>		</tr>	</tbody></table>

<p>Then the Unicode strings like that:</p>


	<table border="1" cellpadding="1" cellspacing="1"><tbody>		<tr>			<td>Size of the process name unicode string (4 bytes)</td>		</tr>		<tr>			<td>Process name (variable size)</td>		</tr>		<tr>			<td>The Size of the stuxnet filename string (4 bytes)</td>		</tr>		<tr>			<td>Unicode string of the stuxnet file (variable size)</td>		</tr>	</tbody></table>

<p>And that's repeated for every element in the array.</p>

<p>The Flags in The Elements Header contain 2 bits. The first bit describes if the file (that needs to be injected) is encrypted or not (and always it's encrypted).<br>
And the second bit describes if the infected process will contain the decrypted stuxnet file ( To be loaded by a built-in PE loader) or will only contain the filename of the stuxnet file to be loaded by LoadLibraryW in the user-mode (and that's never used)</p>

<p>So, Stuxnet worm writes an input data to the driver with this structure contains this information:</p>

<ul>
	<li><strong>services.exe:</strong>&nbsp; <code>\SystemRoot\inf\oem7A.PNF</code> (stuxnet main dll) and call to Export 1</li>	<li><strong>S7tgtopx.exe:</strong> <code>\SystemRoot\inf\oem7A.PNF </code>and call to Export 2 (SCADA infection)</li>	<li><strong>CCProjectMgr.exe:</strong> <code>SystemRoot\inf\oem7A.PNF </code>and call to Export 2</li>	<li><strong>explorer.exe:</strong> \<code>SystemRoot\inf\oem7m.PNF </code>and call to Export 2</li></ul>

<p>Stuxnet also always sets the flags equal "11" or 3 and that means that the stuxnet file is encrypted and needs to be decrypted and that the driver must read and decrypt it and then allocate memory in the infected process equal the size of the file to copy the file in. after that in the user-mode, the file will be loaded by a built-in PE loader that's injected in the process memory beside the injected file.</p>

<p>All the infection process will be described in the next sections but that's a brief.</p>

<p><em><a name="ch4.7.2.2"></a> </em></p>

<h3><em>4.7.2.2. Initialization</em></h3>

<p>First, stuxnet creates a registry key and add some values to it for registering the MrxCls driver to be loaded on every start.<br>
This key is "<code>SYSTEM\CurrentControlSet\Services\MRxCls</code>". It then adds the "<code>Data</code>" value that contains the parameters of the driver and makes it load as a boot driver and that makes it load before many service applications and drivers.</p>

<p>When it loads, it begins by decrypting a part from its data with size 0x278 bytes and gets the following data:</p>

<div class='pre-lang' id='premain755214'><div></div><div class='pre-action-link'><span id='copycode755214' class='copy-code' data-index='755214' style='visibility:hidden'><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' viewBox='0 0 460 460' style='width: 16px;height:16px;' xml:space='preserve'><g><path d='M425.934,0H171.662c-18.122,0-32.864,14.743-32.864,32.864v77.134h30V32.864c0-1.579,1.285-2.864,2.864-2.864h254.272     c1.579,0,2.864,1.285,2.864,2.864v254.272c0,1.58-1.285,2.865-2.864,2.865h-74.729v30h74.729 c18.121,0,32.864-14.743,32.864-32.865V32.864C458.797,14.743,444.055,0,425.934,0z'></path><path d='M288.339,139.998H34.068c-18.122,0-32.865,14.743-32.865,32.865v254.272C1.204,445.257,15.946,460,34.068,460h254.272 c18.122,0,32.865-14.743,32.865-32.864V172.863C321.206,154.741,306.461,139.998,288.339,139.998z M288.341,430H34.068    c-1.58,0-2.865-1.285-2.865-2.864V172.863c0-1.58,1.285-2.865,2.865-2.865h254.272c1.58,0,2.865,1.285,2.865,2.865v254.273h0.001 C291.206,428.715,289.92,430,288.341,430z'></path></g></svg></span></div></div>
<pre id='pre755214' style='margin-top:0;' data-allowShrink='True' data-collapse='False'>
..................\REGISTRY\MACHINE\SYSTEM\CurrentControlSet\Ser
vices\MRxCls..........................................Data......
................................................................
.....................................<span class="code-digit">0</span>??\Device\MRxClsDvX.......
................................................................
.............??&#194;&#187;</pre>

<p>&nbsp;</p>

<p>After that it gets the parameters form "Data" value, decrypts it and saves it as an element in a generic table.</p>

<p>Also it checks the "<code>InitSafeBootMode</code>" and checks for "<code>KdDebuggerEnabled</code>". If the kd debugger is enabled, it will end. And then, it creates a new device by calling "<code>IoCreateDevice</code>" API and creates a new driver named "<code>\Device\MRxClsDvX</code>".</p>

<p>It then gets some functions like "<code>RtlGetVersion</code>" and "<code>KeAreAllApcsDisabled</code>" with a function named "<code>MmGetSystemRoutineAddress</code>" (not <code>GetProcAddress</code>).</p>

<p>And at the end it calls to "<code>PsSetLoadImageNotifyRoutine</code>" to register a function to be called every time a process or a module is loaded in the memory (including <em>services.exe</em> and <em>kernel32.dll</em> that will be used in the driver).</p>

<p>Now we will talk about the <code>NotifyRoutine </code>and the stages of injecting stuxnet files into a system process.</p>

<p><em><a name="ch4.7.2.3"></a> </em></p>

<h3><em>4.7.2.3. Stage One : Injecting data in kernel-mode</em></h3>

<p>Every time a process or a module is loaded in the memory, this process is called given three parameters: The name of the module, the ProcessId and the ImageInfo.</p>

<p>It begins by checking the loaded module with "kernel32.dll" (and we will talk about it later) and if it's not kernel32, it parses the registry data (that's loaded and decrypted before) and loops on the elements of this data searching for the name of the process that needs to inject stuxnet file into and compare it with the loaded process's name.</p>

<p>When it found a process is needed to inject stuxnet file into. It loads the stuxnet file into the process's memory and decrypts it. After that, it copies a junk of data (contains code) into the process's memory and then it writes "MZ" and "PE" and some other data into this junk of data.</p>

<p>This junk of data seems that it's two PE files (was created separately before) and was deleted from them some common marks of a PE file (e.g. MZ, PE, 0x14C, 0xE0 and so on). These bytes prove that this is a PE file so the author of MrxCls deleted them and wrote a code to write them again in their places again (And that's surely a way to disguise them and hide the meaning of these junk data). Not only that but also he deleted the name of all sections.</p>

<p>Then, the driver writes in the process's memory the pointer to this place, pointer to the beginning of the MZ header (there's 0x101C bytes before it, remember that because we'll talk about it again in stage three) and the size of this PE module in specific places in memory inside the MZ module.</p>

<p>After that it jumps on the process PE module. It begins by parsing its PE and gets the entrypoint of the process's module and then, it checks that there's no relocables between the entrypoint and the entrypoint + 0xC (0xC is the size of the overwritten code at the entrypoint so it checks that to be sure there won't any problem on overwriting the entrypoint).</p>

<p>Then, it searches for a snippet of code in the process "<em>Ntoskrnl.exe</em>" or the process "<em>Ntkrnlpa.exe</em>". And this code snippet is:</p>

<p>For Windows 2000 or lower:</p>

<div class='pre-lang' id='premain288162'><div>ASM</div><div class='pre-action-link'><span id='copycode288162' class='copy-code' data-index='288162' style='visibility:hidden'><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' viewBox='0 0 460 460' style='width: 16px;height:16px;' xml:space='preserve'><g><path d='M425.934,0H171.662c-18.122,0-32.864,14.743-32.864,32.864v77.134h30V32.864c0-1.579,1.285-2.864,2.864-2.864h254.272     c1.579,0,2.864,1.285,2.864,2.864v254.272c0,1.58-1.285,2.865-2.864,2.865h-74.729v30h74.729 c18.121,0,32.864-14.743,32.864-32.865V32.864C458.797,14.743,444.055,0,425.934,0z'></path><path d='M288.339,139.998H34.068c-18.122,0-32.865,14.743-32.865,32.865v254.272C1.204,445.257,15.946,460,34.068,460h254.272 c18.122,0,32.865-14.743,32.865-32.864V172.863C321.206,154.741,306.461,139.998,288.339,139.998z M288.341,430H34.068    c-1.58,0-2.865-1.285-2.865-2.864V172.863c0-1.58,1.285-2.865,2.865-2.865h254.272c1.58,0,2.865,1.285,2.865,2.865v254.273h0.001 C291.206,428.715,289.92,430,288.341,430z'></path></g></svg></span></div></div>
<pre id='pre288162' style='margin-top:0;' class='lang-asm' data-language='asm' data-allowShrink='True' data-collapse='False'>
<span class="code-keyword">mov</span> <span class="code-keyword">eax</span>,<span class="code-digit">77</span>
<span class="code-keyword">lea</span> <span class="code-keyword">edx</span>,<span class="code-sdkkeyword">dword</span> <span class="code-sdkkeyword">ptr</span> [esp+4]
<span class="code-keyword">int</span> 2E
<span class="code-keyword">retn</span> <span class="code-digit">14</span></pre>

<p>Or in Windows XP or later:</p>

<div class='pre-lang' id='premain385155'><div>ASM</div><div class='pre-action-link'><span id='copycode385155' class='copy-code' data-index='385155' style='visibility:hidden'><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' viewBox='0 0 460 460' style='width: 16px;height:16px;' xml:space='preserve'><g><path d='M425.934,0H171.662c-18.122,0-32.864,14.743-32.864,32.864v77.134h30V32.864c0-1.579,1.285-2.864,2.864-2.864h254.272     c1.579,0,2.864,1.285,2.864,2.864v254.272c0,1.58-1.285,2.865-2.864,2.865h-74.729v30h74.729 c18.121,0,32.864-14.743,32.864-32.865V32.864C458.797,14.743,444.055,0,425.934,0z'></path><path d='M288.339,139.998H34.068c-18.122,0-32.865,14.743-32.865,32.865v254.272C1.204,445.257,15.946,460,34.068,460h254.272 c18.122,0,32.865-14.743,32.865-32.864V172.863C321.206,154.741,306.461,139.998,288.339,139.998z M288.341,430H34.068    c-1.58,0-2.865-1.285-2.865-2.864V172.863c0-1.58,1.285-2.865,2.865-2.865h254.272c1.58,0,2.865,1.285,2.865,2.865v254.273h0.001 C291.206,428.715,289.92,430,288.341,430z'></path></g></svg></span></div></div>
<pre id='pre385155' style='margin-top:0;' class='lang-asm' data-language='asm' data-allowShrink='True' data-collapse='False'>
<span class="code-keyword">push</span> <span class="code-digit">104</span> 
<span class="code-keyword">call</span> loc_1
???
loc_1:
	<span class="code-keyword">mov</span> <span class="code-keyword">eax</span>,<span class="code-digit">0</span>
	<span class="code-keyword">lea</span> <span class="code-keyword">edx</span>,<span class="code-sdkkeyword">dword</span> <span class="code-sdkkeyword">ptr</span> [esp+4]
	pushfd
	<span class="code-keyword">push</span> <span class="code-digit">8</span>
	<span class="code-keyword">call</span> ZwAllocateVirtualMemory
	<span class="code-keyword">retn</span> <span class="code-digit">14</span></pre>

<p>So, - as you can see - these snippets of code calls to ZwAllocateVirtualMemory. So the driver calls to one of them to call to ZwAllocateVirtualMemory given the parameters that change the memory permissions of the process entrypoint to entrypoint+0x0C from READ_ONLY to COPY_ON_WRITE (it seems a way to disguise the call to ZwAllocateVirtualMemory with these parameters to avoid the antiviruses).</p>

<p>At the end, it creates a buffer with size equal to the size of stuxnet file plus 0x28 bytes and then copy stuxnet file into this buffer (after 0x28 bytes) and writes some important data to the user-mode code (stage 3) in this 0x28 bytes with the following structure:</p>


	<table border="1" cellpadding="1" cellspacing="1"><tbody>		<tr>			<td><strong>Kernel-Mode to User-Mode Parameters </strong></td>		</tr>		<tr>			<td>Reserved (8 bytes)</td>		</tr>		<tr>			<td>Pointer to stuxnet file (buffer +28) (8 bytes)</td>		</tr>		<tr>			<td>Size of the stuxnet file (8 bytes)</td>		</tr>		<tr>			<td>the Exported function (8 bytes)</td>		</tr>		<tr>			<td>2nd bit in the flags in the data (about using a PELoader or LoadLibraryW) (8 bytes)</td>		</tr>	</tbody></table>

<p>Then, it creates a new element in the generic table with the following data (that will be exported to the stage 2):</p>


	<table border="1" cellpadding="1" cellspacing="1"><tbody>		<tr>			<td><strong>The Generic Table Element</strong></td>		</tr>		<tr>			<td>ProcessId</td>		</tr>		<tr>			<td>InjectedMemory at "MZ" + 0x2B8</td>		</tr>		<tr>			<td>InjectedMemory at "MZ" + 0x560 (the Entrypoint of the injected buffer)</td>		</tr>		<tr>			<td>Address of Entrypoint</td>		</tr>	</tbody></table>

<p>At last, it writes the place of this buffer (including stuxnet file) into a specific place in the copied PE module (the junk of data that copied to the process's memory previously).</p>

<p><a name="ch4.7.2.4"></a></p>

<h3><em>4.7.2.4. Stage Two : Creating kernel32 Import and Overwriting the Entrypoint</em></h3>

<p>As we said in the previous stage, the notify routine begins by checking the loaded module with "kernel32.dll". If not equal, it jumps to the stage 1. But if equal kernel32.dll, it jumps to the stage 2.</p>

<p>Because of it's the stage 2. It begins by checking that the stage 1 was passed and gets the results of this stage. It searches in the generic table for an element begins with the processId (the prcoessId that's the kernel32 module was loaded in) to get the generic table element with the structure that's in table 3-3-2.</p>

<p>Then, it creates an import table for the user-mode and writes them in the place that's in the 2nd element in the generic table element (InjectedMemory at "MZ" + 0x2B8). It gets 10 functions ?VirtualAlloc, VirtualFree, GetProcAddress, GetModuleHandle, LoadLibraryA, LoadLibraryW, lstrcmp, lstrcmpi, GetVersionEx, DeviceIoControl). It gets these functions using checksums written inside the driver.</p>

<p><img border="0" height="376" hspace="0" src="/KB/Articles/StuxnetMalware/21.jpg" width="403"></p>

<p>Then it saves the first 0xC bytes (12 bytes) after the import table by some bytes and then it modifies the entrypoint with the following:</p>

<div class='pre-lang' id='premain804579'><div>ASM</div><div class='pre-action-link'><span id='copycode804579' class='copy-code' data-index='804579' style='visibility:hidden'><svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' viewBox='0 0 460 460' style='width: 16px;height:16px;' xml:space='preserve'><g><path d='M425.934,0H171.662c-18.122,0-32.864,14.743-32.864,32.864v77.134h30V32.864c0-1.579,1.285-2.864,2.864-2.864h254.272     c1.579,0,2.864,1.285,2.864,2.864v254.272c0,1.58-1.285,2.865-2.864,2.865h-74.729v30h74.729 c18.121,0,32.864-14.743,32.864-32.865V32.864C458.797,14.743,444.055,0,425.934,0z'></path><path d='M288.339,139.998H34.068c-18.122,0-32.865,14.743-32.865,32.865v254.272C1.204,445.257,15.946,460,34.068,460h254.272 c18.122,0,32.865-14.743,32.865-32.864V172.863C321.206,154.741,306.461,139.998,288.339,139.998z M288.341,430H34.068    c-1.58,0-2.865-1.285-2.865-2.864V172.863c0-1.58,1.285-2.865,2.865-2.865h254.272c1.58,0,2.865,1.285,2.865,2.865v254.273h0.001 C291.206,428.715,289.92,430,288.341,430z'></path></g></svg></span></div></div>
<pre id='pre804579' style='margin-top:0;' class='lang-asm' data-language='asm' data-allowShrink='True' data-collapse='False'>
<span class="code-keyword">mov</span>     <span class="code-keyword">eax</span>, <span class="code-digit">0</span>
<span class="code-keyword">call</span>    <span class="code-keyword">eax</span></pre>

<p>And then it modifies the immediate of "mov eax,0" with 3rd element of the generic table buffer (InjectedMemory at "MZ" + 0x560) and that's the entrypoint of the injected code. The InjectedMemory at "MZ" + 0x2B8 becomes like that:</p>


	<table border="1" cellpadding="1" cellspacing="1"><tbody>		<tr>			<td><strong>InjectedMemory at "MZ" + 0x2B8</strong></td>		</tr>		<tr>			<td>00: Imagebase</td>		</tr>		<tr>			<td>08: VirtualAlloc</td>		</tr>		<tr>			<td>10: VirtualFree</td>		</tr>		<tr>			<td>18: GetProcAddress</td>		</tr>		<tr>			<td>20: GetModuleHandle</td>		</tr>		<tr>			<td>28: LoadLibraryA</td>		</tr>		<tr>			<td>30: LoadLibraryW</td>		</tr>		<tr>			<td>38: lstrcmp</td>		</tr>		<tr>			<td>40: lstrcmpi</td>		</tr>		<tr>			<td>48: GetVersionEx</td>		</tr>		<tr>			<td>50: DeviceIoControl</td>		</tr>		<tr>			<td>58: Ptr to the beginning of the memory (before 101C from MZ)</td>		</tr>		<tr>			<td>60: Ptr to the InjectedMemory at MZ</td>		</tr>		<tr>			<td>68: 8A0 Size</td>		</tr>		<tr>			<td>70: Unknown</td>		</tr>		<tr>			<td>78: The EntryPoint of the process</td>		</tr>	</tbody></table>

<p>At the end, it exits the notify routine to begin the stage 3 of injecting stuxnet file in a process in the user-mode.</p>

<p><a name="ch4.7.2.5"></a></p>

<h3><em>4.7.2.5. Stage Three : Loading and Executing Stuxnet in The User-Mode </em></h3>

<p>I begin reversing this part by injecting these data (including the import table) into an application (I choose windbg as the infected process with stuxnet) and begin reversing this part using Ollydbg.</p>

<p>This crafted code begins by creating a new MZ header (or writes the missing data into a modified PE module) by writing the missed bytes like "MZ" or "PE" and so on "¦ in the injected memory at the 0x101C bytes to become the 2nd MZ Header in the injected memory.</p>

<p>And then, it gets the address of some functions and creates an array with these functions like in the figure:</p>

<p><img border="0" height="216" hspace="0" src="/KB/Articles/StuxnetMalware/22.jpg" width="423"></p>

<p>The 0xF90 is the size of the 2nd MZ Header in the injected code. Then, the crafted code loads both of these injected modules (with these PE headers) into new allocated memories inside the virtual memory of the infected process using a built-in PE Loader.</p>

<p>This PE loader has the ability to fix the relocables and loading the headers and the sections in the correct place (but it's a simple PE loader at last)</p>

<p>After that it calls to the entrypoint of the 1st Module. This module begins by saving SHE and then loads Stuxnet File by using LoadLibraryW or its PEloader by checking the 2nd bit in the flags in the data at the beginning of stuxnet buffer (in table 3-3-1).</p>

<p><img border="0" height="345" hspace="0" src="/KB/Articles/StuxnetMalware/23.jpg" width="640"></p>

<p>After Loading Stuxnet, it calls the chosen exported function in the stuxnet module (which also written in the first 28 bytes in the stuxnet buffer which described in Table 3-3-1).</p>

<p>At the end, it rewrites the modified entrypoint with the original code which already saved in memory (check the Table 3-4-1).</p>

<p>At last, it calls to DeviceIoControl which sends an Io request packet to mrxcls driver to reset again the permissions of the entrypoint to the entrypoint+0xC to its original state (Read-Only) and then calls to the entrypoint to make the process to run normally.</p>

<p><a name="ch5"></a></p>

<h2>5. Conclusion</h2>

<p>Stuxnet takes the attention of media because of its complexity, its political goals and the criminals behind it.</p>

<p>Stuxnet is the most sophisticated worm ever seen in public until now. It contain 4 zero-day vulnerabilities and one used before, a vulnerability in WinCC OS and not only that but also it has three rootkits and the most interesting feature in it that it infects the PLC</p>

<p>This worm changes the meaning of malware and creates a new era for malware researchers.</p>

<p>I hope you enjoyed from this long article. I'm waiting for your feedback.</p>

<p><a name="ch6"></a></p>

<h2>6. References:</h2>

<ul>
	<li>1."<em>W32.Stuxne Dossier</em>" by Symantec</li>	<li>2."<em>Stuxnet Under the Microscope</em>" by ESET</li>	<li>3."<em>The MRXCLS.SYS Malware Loader</em>" at <a href="http://www.geoffchappell.com/viewer.htm?doc=notes/security/stuxnet/mrxcls.htm">http://www.geoffchappell.com/viewer.htm?doc=notes/security/stuxnet/mrxcls.htm</a></li></ul>

<!-- Article Ends -->


						</div>
						

						
						<h2>License</h2>
						<div id="LicenseTerms"><p>This article, along with any associated source code and files, is licensed under <a href="http://www.codeproject.com/info/cpol10.aspx" rel="license">The Code Project Open License (CPOL)</a></p></div>
						

						
						<br />
						
						    <br />
						
						

						<div class="clearfix"></div>

						<div style="padding-top:8px">
							
						</div>

					

				    
					</form>

				</div>

				
				<div class="bottom-promo"> 
				    
				</div>
				
                
                

				
				
				

			</div>
			

            
            
            

        </div>
        

		
		<div class="site-footer">
			<div class="align-left">
				<a id="ctl00_PermaLink" href="/Articles/246545/Stuxnet-Malware-Analysis-Paper">Permalink</a><br>
				<br>
				<a id="ctl00_PrivacyLink" href="/info/privacy.aspx">Privacy</a><br>
    			<a id="ctl00_CookiePolicyLink" href="/info/cookie.aspx">Cookies</a><br>
                <a id="ctl00_TermsOfUseLink" href="/info/TermsOfUse.aspx">Terms of Use</a><br>
			</div>

            <div class="align-center">
				


<div class="page-width">
    Layout: <a id="ctl00_PageWidth_FixedT" title="Fixed width layout" rel="nofollow" class=" active" href="/articles/246545/stuxnet-malware-analysis-paper?PageFlow=FixedWidth">fixed</a>
    |
    <a id="ctl00_PageWidth_FluidT" title="Fluid layout" rel="nofollow" href="/articles/246545/stuxnet-malware-analysis-paper?PageFlow=Fluid">fluid</a>
</div>


				

				

	            

                <br>
			</div>
                
			<div class="align-right">
				Article Copyright 2011 by AmrThabet<br />Everything else
				Copyright &copy; <a href="mailto:webmaster@codeproject.com">CodeProject</a>, 1999-2025<br />
                <br>
				Web01 
				2.8:2024-12-08:1<br>
			</div>
		</div>
		

		<br clear="all" />
		
			

	</div> 
	</div> 
</div>







<script type="text/javascript"> // DEFERRED script

document.addEventListener('DOMContentLoaded', function() {

	new CodeBlocks().initialise('#contentdiv');
	
	$('.author-wrapper .description').shorten({showChars: 400});
	
	anchorAnimate();
	
	$('#__EVENTVALIDATION').attr('autocomplete', 'off');

})
</script>








</body>

</html>