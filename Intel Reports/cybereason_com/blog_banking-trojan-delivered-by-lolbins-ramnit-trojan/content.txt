<!doctype html><!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en" > <![endif]--><!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en" >        <![endif]--><!--[if IE 8]>    <html class="no-js lt-ie9" lang="en" >               <![endif]--><!--[if gt IE 8]><!--><html class="no-js" lang="en"><!--<![endif]--><head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="author" content="Cybereason Nocturnus">
    <meta name="description" content="Cybereason detected an evasive infection technique used to spread a variant of the Ramnit banking Trojan as part of an Italian spam campaign. We investigate this attack, its use of sLoad, and its adoption of LOLbins to minimize discovery. ">
    <meta name="generator" content="HubSpot">
    <title>LOLbins and trojans: How the Ramnit Trojan spreads via sLoad in a cyberattack</title>
    <link rel="shortcut icon" href="https://www.cybereason.com/hubfs/cr-favicon-1.png">
    
<meta name="viewport" content="width=device-width, initial-scale=1">

    
    <meta property="og:description" content="Cybereason detected an evasive infection technique used to spread a variant of the Ramnit banking Trojan as part of an Italian spam campaign. We investigate this attack, its use of sLoad, and its adoption of LOLbins to minimize discovery. ">
    <meta property="og:title" content="LOLbins and trojans: How the Ramnit Trojan spreads via sLoad in a cyberattack">
    <meta name="twitter:description" content="Cybereason detected an evasive infection technique used to spread a variant of the Ramnit banking Trojan as part of an Italian spam campaign. We investigate this attack, its use of sLoad, and its adoption of LOLbins to minimize discovery. ">
    <meta name="twitter:title" content="LOLbins and trojans: How the Ramnit Trojan spreads via sLoad in a cyberattack">

    

    
    <style>
a.cta_button{-moz-box-sizing:content-box !important;-webkit-box-sizing:content-box !important;box-sizing:content-box !important;vertical-align:middle}.hs-breadcrumb-menu{list-style-type:none;margin:0px 0px 0px 0px;padding:0px 0px 0px 0px}.hs-breadcrumb-menu-item{float:left;padding:10px 0px 10px 10px}.hs-breadcrumb-menu-divider:before{content:'›';padding-left:10px}.hs-featured-image-link{border:0}.hs-featured-image{float:right;margin:0 0 20px 20px;max-width:50%}@media (max-width: 568px){.hs-featured-image{float:none;margin:0;width:100%;max-width:100%}}.hs-screen-reader-text{clip:rect(1px, 1px, 1px, 1px);height:1px;overflow:hidden;position:absolute !important;width:1px}
</style>

<link rel="stylesheet" href="https://www.cybereason.com/hubfs/hub_generated/module_assets/1/41681847227/1741488491170/module_CR_-_Malicious_Life_Network_--_Tier_One_Header.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hubfs/hub_generated/module_assets/1/41682410610/1741488492472/module_CR_-_Malicious_Life_Network_--_Main_Hero.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hubfs/hub_generated/module_assets/1/43300360745/1741488505140/module_CR_-_Malicious_Life_Network_--_Related_Posts.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hubfs/hub_generated/module_assets/1/86933076631/1741488758324/module_CR_-_Sticky_CTA_Bar.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hubfs/hub_generated/module_assets/1/34473990280/1740999337265/module_CR_-_Footer_Full__en_US.min.css">
    

    
<!--  Added by GoogleTagManager integration -->
<script>
var _hsp = window._hsp = window._hsp || [];
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}

var useGoogleConsentModeV2 = true;
var waitForUpdateMillis = 1000;



var hsLoadGtm = function loadGtm() {
    if(window._hsGtmLoadOnce) {
      return;
    }

    if (useGoogleConsentModeV2) {

      gtag('set','developer_id.dZTQ1Zm',true);

      gtag('consent', 'default', {
      'ad_storage': 'denied',
      'analytics_storage': 'denied',
      'ad_user_data': 'denied',
      'ad_personalization': 'denied',
      'wait_for_update': waitForUpdateMillis
      });

      _hsp.push(['useGoogleConsentModeV2'])
    }

    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-TJVVB7C');

    window._hsGtmLoadOnce = true;
};

_hsp.push(['addPrivacyConsentListener', function(consent){
  if(consent.allowed || (consent.categories && consent.categories.analytics)){
    hsLoadGtm();
  }
}]);

</script>

<!-- /Added by GoogleTagManager integration -->


<script src="https://use.typekit.net/vyv2ljd.js"></script>
<script>try{Typekit.load({ async: false });}catch(e){}</script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<link rel="preload" href="/hubfs/__dam/fonts/ionicons.eot" as="font" type="font/otf" crossorigin>
<link rel="preload" href="/hubfs/dam/fonts/criteria/Criteria-CF-Regular.woff2" as="font" type="font/woff2" crossorigin>
<link rel="preload" href="/hubfs/dam/fonts/criteria/Criteria-CF-Medium.woff2" as="font" type="font/woff2" crossorigin>
<link rel="preload" href="/hubfs/dam/fonts/peristyle/Peristyle-Black.woff2" as="font" type="font/woff2" crossorigin>
<link rel="amphtml" href="https://www.cybereason.com/blog/research/banking-trojan-delivered-by-lolbins-ramnit-trojan?hs_amp=true">

<meta property="og:image" content="https://www.cybereason.com/hubfs/image%20%285%29-1.png">
<meta property="og:image:width" content="1600">
<meta property="og:image:height" content="820">
<meta property="og:image:alt" content="image (5)-1">
<meta name="twitter:image" content="https://www.cybereason.com/hubfs/image%20%285%29-1.png">
<meta name="twitter:image:alt" content="image (5)-1">

<meta property="og:url" content="https://www.cybereason.com/blog/research/banking-trojan-delivered-by-lolbins-ramnit-trojan">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:creator" content="@cr_nocturnus">

<link rel="canonical" href="https://www.cybereason.com/blog/research/banking-trojan-delivered-by-lolbins-ramnit-trojan">

<meta property="og:type" content="article">
<link rel="alternate" type="application/rss+xml" href="https://www.cybereason.com/blog/rss.xml">
<meta name="twitter:domain" content="www.cybereason.com">
<script src="//platform.linkedin.com/in.js" type="text/javascript">
    lang: en_US
</script>

<meta http-equiv="content-language" content="en">
<link rel="stylesheet" href="//7052064.fs1.hubspotusercontent-na1.net/hubfs/7052064/hub_generated/template_assets/DEFAULT_ASSET/1760120066614/template_layout.min.css">


<link rel="stylesheet" href="https://www.cybereason.com/hubfs/hub_generated/template_assets/1/34470223313/1741528336747/template_cr-master__cta.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hubfs/hub_generated/template_assets/1/34470477360/1743626992502/template_cr-master__main.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hubfs/hub_generated/template_assets/1/35275979682/1741528339661/template_ionicons.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hubfs/hub_generated/template_assets/1/42760289143/1741528346957/template_cr-mln__build.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hubfs/hub_generated/template_assets/1/34470224480/1741528337131/template_cr-framework__bulma-columns.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hubfs/hub_generated/template_assets/1/35291999472/1741528340159/template_cr-framework__bulma.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hubfs/hub_generated/template_assets/1/42363645447/1741528345735/template_hamburger-animation.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hubfs/hub_generated/template_assets/1/42507091846/1741528346726/template_animate.min.css">


    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&amp;display=swap" rel="stylesheet">
<script src="/hubfs/dam/plugins/marker-animation.js"></script>
<script>
$(document).ready(function() {
  $('.highlight').markerAnimation({
    "color":'var(--cr-yellow)',
    "font_weight":'normal',
    "background-size": '200% 1.2em'
  });
});
</script>

    <style>
.cr-mln__blog-post .container-is-blog.cr-mln__blog-post--body .column:nth-of-type(2) img {
    background: #FFFFFF;
    border: 1px solid #CCCCCC;
    border-radius: 5px 5px 5px 5px;
    padding: 10px;
} 
</style>

</head>
<body class="   hs-content-id-6922400896 hs-blog-post hs-blog-id-5272851739" style="">
<!--  Added by AdRoll integration -->
<script type="text/javascript">
  adroll_adv_id = "GKBVDT7O5ZHV7BPLJ2GO75";
  adroll_pix_id = "LEUF46G3Y5H6XKRQDHO77F";
  var _hsp = window._hsp = window._hsp || [];
  (function () {
      var _onload = function(){
          if (document.readyState && !/loaded|complete/.test(document.readyState)){setTimeout(_onload, 10);return}
          if (!window.__adroll_loaded){__adroll_loaded=true;setTimeout(_onload, 50);return}
          _hsp.push(['addPrivacyConsentListener', function(consent) { if (consent.allowed || (consent.categories && consent.categories.advertisement)) {
            var scr = document.createElement("script");
            var host = (("https:" == document.location.protocol) ? "https://s.adroll.com" : "http://a.adroll.com");
            scr.setAttribute('async', 'true');
            scr.type = "text/javascript";
            scr.src = host + "/j/roundtrip.js";
            ((document.getElementsByTagName('head') || [null])[0] ||
                document.getElementsByTagName('script')[0].parentNode).appendChild(scr);
          }}]);
      };
      if (window.addEventListener) {window.addEventListener('load', _onload, false);}
      else {window.attachEvent('onload', _onload)}
  }());
</script>

<!-- /Added by AdRoll integration -->

<!--  Added by GoogleTagManager integration -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-TJVVB7C" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>

<!-- /Added by GoogleTagManager integration -->

    <div class="header-container-wrapper">
    <div class="header-container container-fluid">

<div class="row-fluid-wrapper row-depth-1 row-number-1 ">
<div class="row-fluid ">
<div class="span12 widget-span widget-type-custom_widget " style="" data-widget-type="custom_widget" data-x="0" data-w="12">
<div id="hs_cos_wrapper_module_1615433790649568" class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module" style="" data-hs-cos-general-type="widget" data-hs-cos-type="module"><section id="cr-malicious-life-network__tier-one-header" class="position-flex">
  <div class="#">
    <div id="logo"><a href="https://www.cybereason.com"><img src="https://www.cybereason.com/hubfs/dam/images/images-web/logos/cr-brand/cr-logo-inline--primary-black.png"></a></div>
    <div id="back-to">
      <a href="https://www.cybereason.com">Back to <span>Cybereason.com</span></a>
    </div>
    <!-- Hamburger Menu -->
    <button class="hamburger hamburger--collapse" type="button">
      <span class="hamburger-box">
        <span class="hamburger-inner"></span>
      </span>
    </button>
    <div class="cr-mln__hamburger-menu--overlay">
      <ul>
        <li><a href="https://www.cybereason.com/blog/all"><span class="underline">All Posts</span></a></li>
        <li><a href="/blog/category/research"><span class="underline">Research</span></a></li>
        <li><a href="/blog/category/podcasts"><span class="underline">Podcasts</span></a></li>
        <li><a href="/blog/category/webinars"><span class="underline">Webinars</span></a></li>
        <li><a href="/blog/category/resources"><span class="underline">Resources</span></a></li>
        <li><a href="/blog/category/videos"><span class="underline">Videos</span></a></li>
        <li><a href="/blog/category/news"><span class="underline">News</span></a></li>
      </ul>
      <div class="subscribe">
        <a href="#blog-subscribe">Subscribe</a>
      </div>
    </div>
    <!-- -->
  </div>
</section></div>

</div><!--end widget-span -->
</div><!--end row-->
</div><!--end row-wrapper -->

<div class="row-fluid-wrapper row-depth-1 row-number-2 ">
<div class="row-fluid ">
<div class="span12 widget-span widget-type-custom_widget mln-homepage" style="" data-widget-type="custom_widget" data-x="0" data-w="12">
<div id="hs_cos_wrapper_module_1615433785464566" class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module" style="" data-hs-cos-general-type="widget" data-hs-cos-type="module"><section class="cr-malicious-life-network__hero-main base">
  <div class="container-is-blog columns hero-content page-center">
    <div class="column is-5-fullhd is-5-desktop is-12-touch">
      <a href="/blog"><img class="cr-mln-logo" src="https://www.cybereason.com/hubfs/dam/images/images-web/logos/cr-brand/cr-malicious-life-logo-v2.png"></a>
    </div>
    <div class="column is-7-fullhd is-7-desktop is-hidden-mobile is-hidden-tablet-only">
      <div class="cr-mln__search-subscribe">
        <div class="cr-mln__search">
          <a href="#cr-search-modal" class="search-btn"><img src="https://www.cybereason.com/hubfs/dam/images/images-web/blog-images/template-images/cr-blog-icon--search-dark-gray.png" alt="Search"></a>
        </div>
        <div class="cr-mln__subscribe">
          <a class="btn-subscribe" href="#blog-subscribe">Subscribe</a>
        </div>
      </div>
      <div class="cr-mln__category-nav">
        <ul>
          <li><a href="/blog/category/all"><span class="underline">All</span></a></li>
          <li><a href="/blog/category/research"><span class="underline">Research</span></a></li>
          <li><a href="/blog/category/podcasts"><span class="underline">Podcasts</span></a></li>
          <li><a href="/blog/category/webinars"><span class="underline">Webinars</span></a></li>
          <li><a href="/blog/category/resources"><span class="underline">Resources</span></a></li>
          <li><a href="/blog/category/videos"><span class="underline">Videos</span></a></li>
          <li><a href="/blog/category/news"><span class="underline">News</span></a></li>
        </ul>
      </div>
    </div>
  </div>
      <!-- MOBILE Search and Subscribe -->
      <div class="container-is-blog columns is-gapless is-hidden-desktop cr-mln__search-subscribe--mobile">
        <div class="column">
          <a class="search-btn">Search</a>
        </div>
        <div class="column">
          <a class="#" href="#blog-subscribe">Subscribe</a>
        </div>
      </div>

      <!-- END MOBILE Search and Subscribe -->
  
  <!-- SEARCH Modal Wrap -->

  <div id="cr-search-modal">
        <!--THIS IS IMPORTANT! to close the modal, the class name has to match the name given on the ID -->
        <div id="btn-close-modal" class="close-cr-search-modal"> 
            X
        </div>

        <div class="modal-content">
            <div class="container columns">
              <div class="column">
                <div class="cr-search-modal__search-bar">
                  <h3>Search</h3>
                  <form action="/hs-search-results">
                    <input type="search" class="hs-search-field__input" name="term" autocomplete="on" placeholder="Search...">
                    <input type="hidden" name="type" value="BLOG_POST">
                    <input type="hidden" name="type" value="LISTING_PAGE">
                    <button type="submit" class="arrow"></button>
                  </form>
                  
                </div>

              </div>
          </div>
        </div>
    </div>
  <!-- END Search Modal Wrap -->

</section></div>

</div><!--end widget-span -->
</div><!--end row-->
</div><!--end row-wrapper -->

    </div><!--end header -->
</div><!--end header wrapper -->

<div class="body-container-wrapper">
    <div class="body-container container-fluid">

<div class="row-fluid-wrapper row-depth-1 row-number-1 ">
<div class="row-fluid ">
<div class="span12 widget-span widget-type-blog_content " style="" data-widget-type="blog_content" data-x="0" data-w="12">







<div class="cr-mln__blog-post">
  <div class="container-is-blog columns is-multiline page-center">

    <div class="column is-8-fullhd is-8-desktop is-offset-2-fullhd is-offset-2-desktop is-10-tablet is-offset-1-tablet">
      <div class="featured-image"><img src="https://www.cybereason.com/hubfs/image%20%285%29-1.png" alt=""></div>
      <h1><span id="hs_cos_wrapper_name" class="hs_cos_wrapper hs_cos_wrapper_meta_field hs_cos_wrapper_type_text" style="" data-hs-cos-general-type="meta_field" data-hs-cos-type="text">LOLbins and trojans: How the Ramnit Trojan spreads via sLoad in a cyberattack</span></h1>
      <div class="cr-mln__post-author-share">
      <div id="hubspot-author_data" class="hubspot-editable cr-mln__post-meta" data-hubspot-form-id="author_data" data-hubspot-name="Blog Author">
        
          <span class="descriptor">Written By</span>
          <p><span class="author">Cybereason Nocturnus</span></p>
         
      </div>
    </div>
     
    </div>
    
    <!-- Sticky Author and Social Box -->
    
    <!-- END Sticky Author and Social Box -->
      <div class="container-is-blog columns is-multiline page-center cr-mln__blog-post--body">
        
        <div class="column is-7-fullhd is-7-desktop is-10-tablet is-10-mobile is-offset-1-fullhd is-offset-1-desktop is-offset-1-tablet is-offset-1-mobile">
          <span id="hs_cos_wrapper_post_body" class="hs_cos_wrapper hs_cos_wrapper_meta_field hs_cos_wrapper_type_rich_text" style="" data-hs-cos-general-type="meta_field" data-hs-cos-type="rich_text"><h4 style="text-align: left; font-weight: normal; line-height: 1.75;">Research by Eli Salem, Lior Rochberger, &amp; Niv Yona</h4>
<p style="text-align: center;"><strong><img src="https://www.cybereason.com/hs-fs/hubfs/image%20(5)-1.png?width=542&amp;name=image%20(5)-1.png" alt="image (5)-1" width="542" style="width: 542px; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/image%20(5)-1.png?width=271&amp;name=image%20(5)-1.png 271w, https://www.cybereason.com/hs-fs/hubfs/image%20(5)-1.png?width=542&amp;name=image%20(5)-1.png 542w, https://www.cybereason.com/hs-fs/hubfs/image%20(5)-1.png?width=813&amp;name=image%20(5)-1.png 813w, https://www.cybereason.com/hs-fs/hubfs/image%20(5)-1.png?width=1084&amp;name=image%20(5)-1.png 1084w, https://www.cybereason.com/hs-fs/hubfs/image%20(5)-1.png?width=1355&amp;name=image%20(5)-1.png 1355w, https://www.cybereason.com/hs-fs/hubfs/image%20(5)-1.png?width=1626&amp;name=image%20(5)-1.png 1626w" sizes="(max-width: 542px) 100vw, 542px"></strong></p>
<h2 style="line-height: 1.75;">Introduction</h2>
<p>Cybereason’s Nocturnus and&nbsp;<a href="https://www.cybereason.com/services/active-hunting">Active Hunting Service</a>&nbsp;are two teams dedicated to easily detect threats on demand and proactively seek out malicious activity. The Ramnit Trojan research is a result of&nbsp;the Cybereason platform's&nbsp;capabilities presenting&nbsp;themselves during a threat hunting demonstration to one of our customers’ security teams. We uncovered a severe threat to the customer while&nbsp;onboarding the customer onto our Active Threat Hunting Service. The customer in question was infiltrated by a variant of the Ramnit banking Trojan. Although banking trojans typically target individuals to steal bank account credentials, the Ramnit banking Trojan can, and has, targeted users within organizations.</p>
<p><!--more--></p>
<p><em>Want to hear about more trojans? Check out our<a href="/new-ursnif-variant-webinar" rel=" noopener"> webinar on the Ursnif trojan.</a></em></p>
<p><span style="font-weight: 400;">In Proofpoint’s recently published report, </span><a href="https://www.proofpoint.com/us/threat-insight/post/sload-and-ramnit-pairing-sustained-campaigns-against-uk-and-italy"><i><span style="font-weight: 400;">sLoad and Ramnit pairing in sustained campaigns against the UK and Italy</span></i></a><span style="font-weight: 400;">, they explain how threat actor TA554 used the sLoad dropper to distribute the </span><a href="https://securityintelligence.com/news/ramnit-infects-more-than-100000-machines-in-two-months/"><span style="font-weight: 400;">Ramnit banking Trojan</span></a><span style="font-weight: 400;"> to target financial institutions across Italy, Canada, and the UK. Cybereason detected a similar evasive infection technique used to spread a variant of the Ramnit banking Trojan as part of an Italian spam campaign.&nbsp;</span></p>
<p><span style="font-weight: 400;">The Ramnit Trojan is a type of malware able to exfiltrate sensitive data. This kind of data can include anything ranging from <a href="https://hackercombat.com/ramnit-banking-trojan-august-2018s-top-malware/">banking credentials, FTP passwords, session cookies, and personal data</a>. Leaking this information can easily destroy user trust in a business, and in the process lose customers and ruin reputations. Luckily, our&nbsp;onboarding was timely, and was able to detect the trojan just as it was beginning to exfiltrate information. Our customer used our <a href="https://www.cybereason.com/blog/cybereason-guided-remediation-a-tailored-approach-for-enhanced-incident-response">remediation tool</a> immediately to stop the exfiltration in its tracks.</span></p>
<p><span style="font-weight: 400;">One of the main techniques used to minimize detection, as observed by our services team, was </span><a href="https://lolbas-project.github.io/"><span style="font-weight: 400;">living off the land binaries</span></a><span style="font-weight: 400;"> (LOLbins). In this research, </span><strong>we investigate this attack, its use of sLoad, and its adoption of LOLbins. </strong><span style="font-weight: 400;">The attackers&nbsp;used a combination of built-in Windows products including </span><a href="https://docs.microsoft.com/en-us/powershell/"><span style="font-weight: 400;">PowerShell</span></a><span style="font-weight: 400;">, </span><a href="https://docs.microsoft.com/en-us/windows/desktop/bits/bitsadmin-tool"><span style="font-weight: 400;">BITSAdmin</span></a><span style="font-weight: 400;">, and </span><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certutil" rel=" noopener"><span style="font-weight: 400;">certutil</span></a><span style="font-weight: 400;"> to avoid detection.</span></p>
<p><span style="font-weight: 400;">Using a legitimate native windows process to download malware is not novel in the security world. In fact, using legitimate products to perform malicious activities is steadily </span><a href="https://www.cybereason.com/2019-predictions-report"><span style="font-weight: 400;">gaining in popularity</span></a><span style="font-weight: 400;">. However, using LOLbins in this spam campaign is an intriguing, and, as you shall see, effective way to minimize the detection of the Ramnit banking Trojan.</span></p>
<p><span style="font-weight: 400;"></span><span style="font-weight: 400;">We divided the attack into different phases, which we then mapped to the MITRE ATT&amp;CK knowledge base.</span></p>
<h2 style="line-height: 1.75;">Phase one: Initial Infection and sLoad Payload Downloader</h2>
<p><img src="https://www.cybereason.com/hs-fs/hubfs/image%20(6)-2.png?width=600&amp;name=image%20(6)-2.png" alt="image (6)-2" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/image%20(6)-2.png?width=300&amp;name=image%20(6)-2.png 300w, https://www.cybereason.com/hs-fs/hubfs/image%20(6)-2.png?width=600&amp;name=image%20(6)-2.png 600w, https://www.cybereason.com/hs-fs/hubfs/image%20(6)-2.png?width=900&amp;name=image%20(6)-2.png 900w, https://www.cybereason.com/hs-fs/hubfs/image%20(6)-2.png?width=1200&amp;name=image%20(6)-2.png 1200w, https://www.cybereason.com/hs-fs/hubfs/image%20(6)-2.png?width=1500&amp;name=image%20(6)-2.png 1500w, https://www.cybereason.com/hs-fs/hubfs/image%20(6)-2.png?width=1800&amp;name=image%20(6)-2.png 1800w" sizes="(max-width: 600px) 100vw, 600px">&nbsp;</p>
<ul>
<li><strong>Spearphishing Link: </strong><a href="https://attack.mitre.org/techniques/T1192/"><strong>MITRE Technique T1192</strong></a></li>
</ul>
<p><span style="font-weight: 400;">Initially, the target receives a spearphishing email as part of an Italian spam campaign. This spam campaign specifically focused on Italian users. The email contains a link to a compromised website </span><i><span style="font-weight: 400;">(https://levashekhtman[.]com/assistenza-amministrativa/documento-aggiornato-FMV-61650861)</span></i><span style="font-weight: 400;">.</span></p>
<ul>
<li><strong>Download Additional Payload</strong></li>
</ul>
<p><span style="font-weight: 400;">Once the target connects to the compromised website, the site initiates the download of an additional payload. This payload is a</span><span style="font-weight: 400;"> compressed ZIP file </span><i><span style="font-weight: 400;">(</span></i><i><span style="font-weight: 400;">documento-aggiornato-FMV-61650861.zip(B564ED3DE7A49673AC19B6231E439032AE6EAA68))</span></i><span style="font-weight: 400;">. The ZIP file contains a non-malicious .jpg file and a .lnk shortcut file that has the nondescript icon of a typical Windows folder.</span></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200-1.png?width=491&amp;name=pasted%20image%200-1.png" alt="pasted image 0-1" width="491" style="width: 491px;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200-1.png?width=246&amp;name=pasted%20image%200-1.png 246w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200-1.png?width=491&amp;name=pasted%20image%200-1.png 491w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200-1.png?width=737&amp;name=pasted%20image%200-1.png 737w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200-1.png?width=982&amp;name=pasted%20image%200-1.png 982w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200-1.png?width=1228&amp;name=pasted%20image%200-1.png 1228w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200-1.png?width=1473&amp;name=pasted%20image%200-1.png 1473w" sizes="(max-width: 491px) 100vw, 491px"></span></i></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">The contents of the zipped file.</span></i></p>
<ul>
<li><strong>Shortcut Modification</strong><strong>: </strong><a href="https://attack.mitre.org/techniques/T1023/"><strong>MITRE Technique T1023</strong></a></li>
</ul>
<p><span style="font-weight: 400;">When the target opens the .lnk shortcut file, a CMD </span><span style="font-weight: 400;">spawns a PowerShell with obfuscated commands.</span></p>
<ul>
<li><strong>Powershell Obfuscation:</strong> <a href="https://attack.mitre.org/techniques/T1027/"><strong>MITRE Technique T1027</strong></a></li>
</ul>
<p><span style="font-weight: 400;">The PowerShell spawned by opening the .lnk file subsequently downloads the sLoad dropper. sLoad is a </span><a href="https://securityintelligence.com/news/lock-and-sload-powershell-malware-downloader-geofences-attacks-for-maximum-impact/"><span style="font-weight: 400;">PowerShell-based banking Trojan downloader</span></a><span style="font-weight: 400;"> that features reconnaissance, information gathering, screen capturing, and C2 abilities. </span></p>
<p><span style="font-weight: 400;">It starts the download by executing a PowerShell command that creates an </span><strong>empty </strong><span style="font-weight: 400;">.ps1 file &nbsp;</span><i><span style="font-weight: 400;">(oyCZpsgNEFvQnW.ps1, SHA1: B6E3C4A528E01B6DE055E089E3C0DD2DA79CFCBE)</span></i><span style="font-weight: 400;"> in the %AppData% folder. </span></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(1).png?width=558&amp;name=pasted%20image%200%20(1).png" alt="pasted image 0 (1)" width="558" style="width: 558px; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(1).png?width=279&amp;name=pasted%20image%200%20(1).png 279w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(1).png?width=558&amp;name=pasted%20image%200%20(1).png 558w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(1).png?width=837&amp;name=pasted%20image%200%20(1).png 837w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(1).png?width=1116&amp;name=pasted%20image%200%20(1).png 1116w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(1).png?width=1395&amp;name=pasted%20image%200%20(1).png 1395w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(1).png?width=1674&amp;name=pasted%20image%200%20(1).png 1674w" sizes="(max-width: 558px) 100vw, 558px"></span></i></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">The ZIP file uses the .lnk that links to a PowerShell with a malicious obfuscated encoded command.</span></i></p>
<p><span style="font-weight: 400;"><img src="https://files.slack.com/files-pri/T03CSH6QK-FFEU09P9A/image.png" width="1000" style="width: 1000px; margin: 0px auto; display: block;"></span></p>
<p style="text-align: center;"><em><span style="font-weight: 400;">The malicious PowerShell script uses several escape characters such as</span><strong> “, *</strong><span style="font-weight: 400;"> in order to avoid detection. This technique is a JavaScript language exploitation that is able to bypass antivirus product defenses.</span></em></p>
<ul>
<li><strong>BITSAdmin Abuse:</strong> <a href="https://attack.mitre.org/techniques/T1197/"><strong>MITRE Technique T1197</strong></a></li>
</ul>
<p><span style="font-weight: 400;">The malicious PowerShell script uses BITSAdmin to download sLoad from </span><i><span style="font-weight: 400;">bureaucratica[.]org/bureaux/tica</span></i><span style="font-weight: 400;"> and write it</span><span style="font-weight: 400;"> to the empty .ps1 file it created previously. BITSAdmin is</span><span style="font-weight: 400;"> a built-in Windows command-line tool for downloading, uploading, and monitoring jobs.</span><span style="font-weight: 400;"> Once the malicious PowerShell script is done writing sLoad into the .ps1 file, the file is executed.</span></p>
<ul>
<li><strong>Persistence Using Scheduled Task: </strong><a href="https://attack.mitre.org/techniques/T1053/"><strong>MITRE Technique T1053</strong></a></li>
</ul>
<p><span style="font-weight: 400;">The malicious PowerShell script creates a scheduled task </span><i><span style="font-weight: 400;">(AppRunLog)</span></i><span style="font-weight: 400;">. This task executes a malicious VBScript (</span><i><span style="font-weight: 400;">vmcpRAYW.vbs</span></i><span style="font-weight: 400;">).</span></p>
<h3 style="font-weight: normal; line-height: 1.75;">sLoad Analysis</h3>
<p><strong><img src="https://www.cybereason.com/hs-fs/hubfs/image%20(7).png?width=600&amp;name=image%20(7).png" alt="image (7)" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/image%20(7).png?width=300&amp;name=image%20(7).png 300w, https://www.cybereason.com/hs-fs/hubfs/image%20(7).png?width=600&amp;name=image%20(7).png 600w, https://www.cybereason.com/hs-fs/hubfs/image%20(7).png?width=900&amp;name=image%20(7).png 900w, https://www.cybereason.com/hs-fs/hubfs/image%20(7).png?width=1200&amp;name=image%20(7).png 1200w, https://www.cybereason.com/hs-fs/hubfs/image%20(7).png?width=1500&amp;name=image%20(7).png 1500w, https://www.cybereason.com/hs-fs/hubfs/image%20(7).png?width=1800&amp;name=image%20(7).png 1800w" sizes="(max-width: 600px) 100vw, 600px"></strong></p>
<h4><span style="font-weight: 400;">Anti-debugging and Analysis Techniques </span></h4>
<p><span style="font-weight: 400;">The .ps1 file (</span><i><span style="font-weight: 400;">oyCZpsgNEFvQnW.ps1</span></i><span style="font-weight: 400;">) contains sLoad and is essentially a malicious PowerShell script. The script is able to check to see if it is being debugged or run in a test environment by looking at the names of running processes and comparing them to a list of analysis tools, including:</span></p>
<ul>
<li style="font-weight: 400;"><span style="font-weight: 400; font-size: 18px;">SysInternals Tools</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400; font-size: 18px;">Packet Sniffing Tools</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400; font-size: 18px;">Debuggers and Disassemblers</span></li>
<li style="font-weight: 400;">&nbsp;</li>
</ul>
<p><span style="font-weight: 400;">The malicious sLoad script also contains a key (</span><i><span style="font-weight: 400;">1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16</span></i><span style="font-weight: 400;">) that will be used to encrypt and decrypt the main payload.</span></p>
<p><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/anti%20de.png?width=600&amp;name=anti%20de.png" alt="anti de" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/anti%20de.png?width=300&amp;name=anti%20de.png 300w, https://www.cybereason.com/hs-fs/hubfs/anti%20de.png?width=600&amp;name=anti%20de.png 600w, https://www.cybereason.com/hs-fs/hubfs/anti%20de.png?width=900&amp;name=anti%20de.png 900w, https://www.cybereason.com/hs-fs/hubfs/anti%20de.png?width=1200&amp;name=anti%20de.png 1200w, https://www.cybereason.com/hs-fs/hubfs/anti%20de.png?width=1500&amp;name=anti%20de.png 1500w, https://www.cybereason.com/hs-fs/hubfs/anti%20de.png?width=1800&amp;name=anti%20de.png 1800w" sizes="(max-width: 600px) 100vw, 600px"></span></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">oyCZpsgNEFvQnW.ps1 checks security products and contains the payload key.</span></i></p>
<p><span style="font-weight: 400;">The malicious sLoad script contains two encrypted files:</span></p>
<ul>
<li style="font-weight: 400;"><span style="font-weight: 400;">Config.ini (</span><i><span style="font-weight: 400;">82C3A3E1317CD5C671612430DDDED79DF9398BCC</span></i><span style="font-weight: 400;">)</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">Web.ini (</span><i><span style="font-weight: 400;">ABC14EB06235A957D3AD66E359DC0B1F1FDFAB8A</span></i><span style="font-weight: 400;">)</span></li>
</ul>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/2%20ini%20files%20red.png?width=1056&amp;name=2%20ini%20files%20red.png" alt="2 ini files red" width="1056" style="width: 1056px;" srcset="https://www.cybereason.com/hs-fs/hubfs/2%20ini%20files%20red.png?width=528&amp;name=2%20ini%20files%20red.png 528w, https://www.cybereason.com/hs-fs/hubfs/2%20ini%20files%20red.png?width=1056&amp;name=2%20ini%20files%20red.png 1056w, https://www.cybereason.com/hs-fs/hubfs/2%20ini%20files%20red.png?width=1584&amp;name=2%20ini%20files%20red.png 1584w, https://www.cybereason.com/hs-fs/hubfs/2%20ini%20files%20red.png?width=2112&amp;name=2%20ini%20files%20red.png 2112w, https://www.cybereason.com/hs-fs/hubfs/2%20ini%20files%20red.png?width=2640&amp;name=2%20ini%20files%20red.png 2640w, https://www.cybereason.com/hs-fs/hubfs/2%20ini%20files%20red.png?width=3168&amp;name=2%20ini%20files%20red.png 3168w" sizes="(max-width: 1056px) 100vw, 1056px"></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">oyCZpsgNEFvQnW.ps1 contains encrypted Config.ini &amp; Web.ini files.</span></i></p>
<p><span style="font-weight: 400;">It is interesting to note that the malicious sLoad script uses the computer’s GUID as the directory for all of its files and as part of the payload name.</span></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(2).png?width=817&amp;name=pasted%20image%200%20(2).png" alt="pasted image 0 (2)" width="817" style="width: 817px;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(2).png?width=409&amp;name=pasted%20image%200%20(2).png 409w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(2).png?width=817&amp;name=pasted%20image%200%20(2).png 817w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(2).png?width=1226&amp;name=pasted%20image%200%20(2).png 1226w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(2).png?width=1634&amp;name=pasted%20image%200%20(2).png 1634w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(2).png?width=2043&amp;name=pasted%20image%200%20(2).png 2043w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(2).png?width=2451&amp;name=pasted%20image%200%20(2).png 2451w" sizes="(max-width: 817px) 100vw, 817px"></span></i></p>
<p style="text-align: center;"><span style="font-size: 16px;"><i><span style="font-weight: 400;">oyCZpsgNEFvQnW.ps1 &nbsp;reads the computer’s GUID. </span></i></span></p>
<h4><span style="font-weight: 400;">sLoad Persistence </span></h4>
<p><span style="font-weight: 400;">sLoad ensures persistence by creating a scheduled task that allows sLoad to download the payload repeatedly. </span></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/task.png?width=990&amp;name=task.png" alt="task" width="990" style="width: 990px;" srcset="https://www.cybereason.com/hs-fs/hubfs/task.png?width=495&amp;name=task.png 495w, https://www.cybereason.com/hs-fs/hubfs/task.png?width=990&amp;name=task.png 990w, https://www.cybereason.com/hs-fs/hubfs/task.png?width=1485&amp;name=task.png 1485w, https://www.cybereason.com/hs-fs/hubfs/task.png?width=1980&amp;name=task.png 1980w, https://www.cybereason.com/hs-fs/hubfs/task.png?width=2475&amp;name=task.png 2475w, https://www.cybereason.com/hs-fs/hubfs/task.png?width=2970&amp;name=task.png 2970w" sizes="(max-width: 990px) 100vw, 990px"></span></i></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">oyCZpsgNEFvQnW.ps1 guarantees persistence using a scheduled task.</span></i></p>
<p><span style="font-weight: 400;">When the scheduled task runs, it spawns a malicious VBScript with a random name (</span><i><span style="font-weight: 400;">vmcpRAYW.vbs</span></i><span style="font-weight: 400;">) (</span><i><span style="font-weight: 400;">AEABE11F0496DA7E62501A35F4F03059F783C775</span></i><span style="font-weight: 400;">). The script executes a .ps1 file with the same name (</span><i><span style="font-weight: 400;">vmcpRAYW.ps1</span></i><span style="font-weight: 400;">) (</span><i><span style="font-weight: 400;">41FB1C6542975D47449EF6CB17B26CA8622CF9AE</span></i><span style="font-weight: 400;">) that decrypts config.ini with the key from the malicious sLoad script (</span><i><span style="font-weight: 400;">oyCZpsgNEFvQnW.ps1</span></i><span style="font-weight: 400;">). The decryption subsequently executes the sLoad payload.</span></p>
<p><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(3).png?width=600&amp;name=pasted%20image%200%20(3).png" alt="pasted image 0 (3)" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(3).png?width=300&amp;name=pasted%20image%200%20(3).png 300w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(3).png?width=600&amp;name=pasted%20image%200%20(3).png 600w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(3).png?width=900&amp;name=pasted%20image%200%20(3).png 900w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(3).png?width=1200&amp;name=pasted%20image%200%20(3).png 1200w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(3).png?width=1500&amp;name=pasted%20image%200%20(3).png 1500w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(3).png?width=1800&amp;name=pasted%20image%200%20(3).png 1800w" sizes="(max-width: 600px) 100vw, 600px"></span></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">Execution of the wscript and the .ps1 in the Cybereason UI.</span></i></p>
<br>
<h2 style="font-weight: normal; line-height: 1.75;">Phase Two: Decryption of config.ini and Execution of the sLoad Payload</h2>
<p><strong><img src="https://www.cybereason.com/hs-fs/hubfs/image%20(7)%20(1).png?width=600&amp;name=image%20(7)%20(1).png" alt="image (7) (1)" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/image%20(7)%20(1).png?width=300&amp;name=image%20(7)%20(1).png 300w, https://www.cybereason.com/hs-fs/hubfs/image%20(7)%20(1).png?width=600&amp;name=image%20(7)%20(1).png 600w, https://www.cybereason.com/hs-fs/hubfs/image%20(7)%20(1).png?width=900&amp;name=image%20(7)%20(1).png 900w, https://www.cybereason.com/hs-fs/hubfs/image%20(7)%20(1).png?width=1200&amp;name=image%20(7)%20(1).png 1200w, https://www.cybereason.com/hs-fs/hubfs/image%20(7)%20(1).png?width=1500&amp;name=image%20(7)%20(1).png 1500w, https://www.cybereason.com/hs-fs/hubfs/image%20(7)%20(1).png?width=1800&amp;name=image%20(7)%20(1).png 1800w" sizes="(max-width: 600px) 100vw, 600px"></strong></p>
<h4 style="font-size: 30px; line-height: 1.75;"><span style="font-weight: 400;">Execution</span></h4>
<p><span style="font-weight: 400;">Once config.ini is decrypted and executed, the second phase of sLoad takes place. The decrypted config.ini manages the functionality of the encrypted web.ini and contains the following instructions of the malware: </span><strong>screen capturing</strong><span style="font-weight: 400;">,</span><strong> collecting information about the infected machine</strong><span style="font-weight: 400;">,</span> <span style="font-weight: 400;">and</span><strong> downloading and uploading data</strong><span style="font-weight: 400;">. As part of its LOLbins technique, the payload maliciously executes using legitimate processes, including </span><a href="https://github.com/api0cradle/LOLBAS/blob/master/OSBinaries/Bitsadmin.md"><span style="font-weight: 400;">BITSAdmin</span></a><span style="font-weight: 400;"> &amp;</span><a href="https://github.com/api0cradle/LOLBAS/blob/master/OSBinaries/Certutil.md"><span style="font-weight: 400;"> certutil</span></a><span style="font-weight: 400;">.</span></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/webini.png?width=662&amp;name=webini.png" alt="webini" width="662" style="width: 662px;" srcset="https://www.cybereason.com/hs-fs/hubfs/webini.png?width=331&amp;name=webini.png 331w, https://www.cybereason.com/hs-fs/hubfs/webini.png?width=662&amp;name=webini.png 662w, https://www.cybereason.com/hs-fs/hubfs/webini.png?width=993&amp;name=webini.png 993w, https://www.cybereason.com/hs-fs/hubfs/webini.png?width=1324&amp;name=webini.png 1324w, https://www.cybereason.com/hs-fs/hubfs/webini.png?width=1655&amp;name=webini.png 1655w, https://www.cybereason.com/hs-fs/hubfs/webini.png?width=1986&amp;name=webini.png 1986w" sizes="(max-width: 662px) 100vw, 662px"></span></i></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">Analyzing the decoded Config.ini file, including getting data from web.ini and using the same key.</span></i></p>
<p><span style="font-weight: 400;">The decoded web.ini contains the list of malicious URLs, delimited by ‘,’ . The deobfuscated Config.ini splits the URLS by ‘,’ and runs BITSAdmin in the command line for each URL in the file. </span></p>
<img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(4).png?width=600&amp;name=pasted%20image%200%20(4).png" alt="pasted image 0 (4)" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(4).png?width=300&amp;name=pasted%20image%200%20(4).png 300w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(4).png?width=600&amp;name=pasted%20image%200%20(4).png 600w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(4).png?width=900&amp;name=pasted%20image%200%20(4).png 900w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(4).png?width=1200&amp;name=pasted%20image%200%20(4).png 1200w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(4).png?width=1500&amp;name=pasted%20image%200%20(4).png 1500w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(4).png?width=1800&amp;name=pasted%20image%200%20(4).png 1800w" sizes="(max-width: 600px) 100vw, 600px"><br>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">Executing the commands from Config.ini in order to decode web.ini.</span></i></p>
<img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(5).png?width=600&amp;name=pasted%20image%200%20(5).png" alt="pasted image 0 (5)" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(5).png?width=300&amp;name=pasted%20image%200%20(5).png 300w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(5).png?width=600&amp;name=pasted%20image%200%20(5).png 600w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(5).png?width=900&amp;name=pasted%20image%200%20(5).png 900w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(5).png?width=1200&amp;name=pasted%20image%200%20(5).png 1200w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(5).png?width=1500&amp;name=pasted%20image%200%20(5).png 1500w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(5).png?width=1800&amp;name=pasted%20image%200%20(5).png 1800w" sizes="(max-width: 600px) 100vw, 600px"><br>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">web.ini content, which includes malicious URLs as a combination of 2 different web.ini files.</span></i></p>
<p><span style="font-weight: 400;">As mentioned above, sLoad creates persistence through a scheduled task. Interestingly, sLoad domains stored in web.ini change every time sLoad is downloaded by the scheduled task. This ability to self-update allows sLoad to be more stealthy and nullifies defense tactics like detection by blacklisting domains. &nbsp;</span></p>
<h4 style="font-size: 30px; line-height: 1.75;"><span style="font-weight: 400;">Discovery &amp; Internal Reconnaissance</span></h4>
<p><span style="font-weight: 400;">As part of the sLoad attack lifecycle, it collects information about the infected machine through multiple different attack vectors.</span></p>
<p><span style="font-weight: 400;">sLoad attempts to collect information regarding </span><a href="https://docs.microsoft.com/en-us/windows/desktop/cimwin32prov/win32-logicaldisk"><span style="font-weight: 400;">Win32_LogicalDisk</span></a><span style="font-weight: 400;">, a data source that resolves to a local storage device on a computer system running Windows. It also attempts to extract information about network shares and physical devices by using the </span><a href="https://ss64.com/nt/net-view.html"><span style="font-weight: 400;">NET VIEW command</span></a><span style="font-weight: 400;">.</span></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/NETWORK.png?width=600&amp;name=NETWORK.png" alt="NETWORK" width="600" style="width: 600px; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/NETWORK.png?width=300&amp;name=NETWORK.png 300w, https://www.cybereason.com/hs-fs/hubfs/NETWORK.png?width=600&amp;name=NETWORK.png 600w, https://www.cybereason.com/hs-fs/hubfs/NETWORK.png?width=900&amp;name=NETWORK.png 900w, https://www.cybereason.com/hs-fs/hubfs/NETWORK.png?width=1200&amp;name=NETWORK.png 1200w, https://www.cybereason.com/hs-fs/hubfs/NETWORK.png?width=1500&amp;name=NETWORK.png 1500w, https://www.cybereason.com/hs-fs/hubfs/NETWORK.png?width=1800&amp;name=NETWORK.png 1800w" sizes="(max-width: 600px) 100vw, 600px"></span></i></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">sLoad collecting information about the hardware and the network.</span></i></p>
<p><span style="font-weight: 400;">The NET VIEW command shows a list of computers and network devices on the network. This is a legitimate command that can be used for internal reconnaissance and system information discovery. Using this command, attackers may attempt to get detailed information about the operating system and hardware, including version number, patches, hotfixes, service packs, and architecture, all through a legitimate command.</span></p>
<p><span style="font-weight: 400;">sLoad uses the NET VIEW command and saves the output to a file as part of its reconnaissance activities.</span></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(6).png?width=460&amp;name=pasted%20image%200%20(6).png" alt="pasted image 0 (6)" width="460" style="width: 460px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(6).png?width=230&amp;name=pasted%20image%200%20(6).png 230w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(6).png?width=460&amp;name=pasted%20image%200%20(6).png 460w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(6).png?width=690&amp;name=pasted%20image%200%20(6).png 690w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(6).png?width=920&amp;name=pasted%20image%200%20(6).png 920w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(6).png?width=1150&amp;name=pasted%20image%200%20(6).png 1150w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(6).png?width=1380&amp;name=pasted%20image%200%20(6).png 1380w" sizes="(max-width: 460px) 100vw, 460px"></span></i></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">NET VIEW command as detected in the Cybereason platform.</span></i></p>
<p><span style="font-weight: 400;">After obtaining information about the victim’s network, the payload collects additional information about the local operating system and processor.</span></p>
<p><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/collecting%20information%20about%20the%20system.png?width=437&amp;name=collecting%20information%20about%20the%20system.png" alt="collecting information about the system" width="437" style="width: 437px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/collecting%20information%20about%20the%20system.png?width=219&amp;name=collecting%20information%20about%20the%20system.png 219w, https://www.cybereason.com/hs-fs/hubfs/collecting%20information%20about%20the%20system.png?width=437&amp;name=collecting%20information%20about%20the%20system.png 437w, https://www.cybereason.com/hs-fs/hubfs/collecting%20information%20about%20the%20system.png?width=656&amp;name=collecting%20information%20about%20the%20system.png 656w, https://www.cybereason.com/hs-fs/hubfs/collecting%20information%20about%20the%20system.png?width=874&amp;name=collecting%20information%20about%20the%20system.png 874w, https://www.cybereason.com/hs-fs/hubfs/collecting%20information%20about%20the%20system.png?width=1093&amp;name=collecting%20information%20about%20the%20system.png 1093w, https://www.cybereason.com/hs-fs/hubfs/collecting%20information%20about%20the%20system.png?width=1311&amp;name=collecting%20information%20about%20the%20system.png 1311w" sizes="(max-width: 437px) 100vw, 437px"></span></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">sLoad checking the local operating system and processor.</span></i></p>
<h4 style="line-height: 1.75;"><span style="font-weight: 400; font-size: 30px;">Data Exfiltration </span></h4>
<p><span style="font-weight: 400;">The main method sLoad uses to collect information is via screen capturing. It continues to&nbsp;capture the screen&nbsp;throughout its entire execution, and exfiltrates the data using BITSAdmin and certutil.</span></p>
<p><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/screencapturefunc.png?width=600&amp;name=screencapturefunc.png" alt="screencapturefunc" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/screencapturefunc.png?width=300&amp;name=screencapturefunc.png 300w, https://www.cybereason.com/hs-fs/hubfs/screencapturefunc.png?width=600&amp;name=screencapturefunc.png 600w, https://www.cybereason.com/hs-fs/hubfs/screencapturefunc.png?width=900&amp;name=screencapturefunc.png 900w, https://www.cybereason.com/hs-fs/hubfs/screencapturefunc.png?width=1200&amp;name=screencapturefunc.png 1200w, https://www.cybereason.com/hs-fs/hubfs/screencapturefunc.png?width=1500&amp;name=screencapturefunc.png 1500w, https://www.cybereason.com/hs-fs/hubfs/screencapturefunc.png?width=1800&amp;name=screencapturefunc.png 1800w" sizes="(max-width: 600px) 100vw, 600px"></span></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">The sLoad main screen capturing function.</span></i></p>
<p><span style="font-weight: 400;">One of the most unique ways sLoad is able to steal information is in the way it searches and exfiltrates .ICA files. </span><a href="https://fileinfo.com/extension/ica"><span style="font-weight: 400;">ICA</span></a><span style="font-weight: 400;"> is a settings file format developed by Citrix Systems, a multinational software company that provides server, application, and desktop virtualization. Independent Computing Architecture (ICA) file types are used by Citrix Systems application servers to configure information between servers and clients. ICA files are a CITRIX connection profile used to store relevant connection details including username, passwords, and server IP addresses. If they contain all of this information, they can be used to authenticate and control a Citrix remote desktop.</span><span style="font-weight: 400;"><br></span><span style="font-weight: 400;">sLoad attempts to extract .ICA files from the infected machine, with a particular focus on files in Outlook's user directory. It stores the information in a file </span><i><span style="font-weight: 400;">(f.ini)</span></i><span style="font-weight: 400;">, and eventually sends the information to a remote C2 server using BITSAdmin.</span></p>
<img src="https://www.cybereason.com/hs-fs/hubfs/citrix.png?width=600&amp;name=citrix.png" alt="citrix" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/citrix.png?width=300&amp;name=citrix.png 300w, https://www.cybereason.com/hs-fs/hubfs/citrix.png?width=600&amp;name=citrix.png 600w, https://www.cybereason.com/hs-fs/hubfs/citrix.png?width=900&amp;name=citrix.png 900w, https://www.cybereason.com/hs-fs/hubfs/citrix.png?width=1200&amp;name=citrix.png 1200w, https://www.cybereason.com/hs-fs/hubfs/citrix.png?width=1500&amp;name=citrix.png 1500w, https://www.cybereason.com/hs-fs/hubfs/citrix.png?width=1800&amp;name=citrix.png 1800w" sizes="(max-width: 600px) 100vw, 600px"><br>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">Searching and storing .ICA files.</span></i></p>
<br>
<h4><span style="font-weight: 400;">How sLoad Manipulates BITSAdmin and certutil to Download the Ramnit Banking Trojan</span></h4>
<p><span style="font-weight: 400;">sLoad spawns a PowerShell script that uses BITSAdmin to download an encoded .txt payload from several malicious domains, including:</span></p>
<ul>
<li style="font-weight: 400;"><span style="font-weight: 400; font-size: 18px;">Packerd[.]me</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400; font-size: 18px;">Smokymountainsfineart[.]com</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400; font-size: 18px;">Reasgt[.]me</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400; font-size: 18px;">imperialsociety[.]org. </span></li>
</ul>
<br>
<p><span style="font-weight: 400;">All of these domains were observed within the attack frame days.</span></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/bitsadmin%20download%20-1.png?width=429&amp;name=bitsadmin%20download%20-1.png" alt="bitsadmin download -1" width="429" style="width: 429px; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/bitsadmin%20download%20-1.png?width=215&amp;name=bitsadmin%20download%20-1.png 215w, https://www.cybereason.com/hs-fs/hubfs/bitsadmin%20download%20-1.png?width=429&amp;name=bitsadmin%20download%20-1.png 429w, https://www.cybereason.com/hs-fs/hubfs/bitsadmin%20download%20-1.png?width=644&amp;name=bitsadmin%20download%20-1.png 644w, https://www.cybereason.com/hs-fs/hubfs/bitsadmin%20download%20-1.png?width=858&amp;name=bitsadmin%20download%20-1.png 858w, https://www.cybereason.com/hs-fs/hubfs/bitsadmin%20download%20-1.png?width=1073&amp;name=bitsadmin%20download%20-1.png 1073w, https://www.cybereason.com/hs-fs/hubfs/bitsadmin%20download%20-1.png?width=1287&amp;name=bitsadmin%20download%20-1.png 1287w" sizes="(max-width: 429px) 100vw, 429px"></span></i></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">The BITSAdmin command line.</span></i></p>
<p><span style="font-weight: 400;">certutil.exe is a command-line program that is installed as part of </span><a href="https://docs.microsoft.com/en-us/windows/desktop/seccrypto/certificate-services"><span style="font-weight: 400;">Certificate Services</span></a><span style="font-weight: 400;">. An attacker can use this built-in Windows utility to bypass the application locker and download and decode malicious files.</span></p>
<p><span style="font-weight: 400;">The encoded payloads were decoded into a malicious executable using certutil. </span></p>
<img src="https://www.cybereason.com/hs-fs/hubfs/certutil%20decode%20-%202.png?width=424&amp;name=certutil%20decode%20-%202.png" alt="certutil decode - 2" width="424" style="width: 424px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/certutil%20decode%20-%202.png?width=212&amp;name=certutil%20decode%20-%202.png 212w, https://www.cybereason.com/hs-fs/hubfs/certutil%20decode%20-%202.png?width=424&amp;name=certutil%20decode%20-%202.png 424w, https://www.cybereason.com/hs-fs/hubfs/certutil%20decode%20-%202.png?width=636&amp;name=certutil%20decode%20-%202.png 636w, https://www.cybereason.com/hs-fs/hubfs/certutil%20decode%20-%202.png?width=848&amp;name=certutil%20decode%20-%202.png 848w, https://www.cybereason.com/hs-fs/hubfs/certutil%20decode%20-%202.png?width=1060&amp;name=certutil%20decode%20-%202.png 1060w, https://www.cybereason.com/hs-fs/hubfs/certutil%20decode%20-%202.png?width=1272&amp;name=certutil%20decode%20-%202.png 1272w" sizes="(max-width: 424px) 100vw, 424px">
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">certutil decodes the .txt file.</span></i></p>
<p><span style="font-weight: 400;">After being decoded by certutil, the malicious executable </span><i><span style="font-weight: 400;">( _UWBwKlrFyeTXGjtV.exe) (ae5b322b7586706015d8b3e83334c78b77f8f905)</span></i><span style="font-weight: 400;"> is executed by PowerShell. This is the Ramnit banking Trojan.</span></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/powershell%20execute%20-%203.png?width=424&amp;name=powershell%20execute%20-%203.png" alt="powershell execute - 3" width="424" style="width: 424px; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/powershell%20execute%20-%203.png?width=212&amp;name=powershell%20execute%20-%203.png 212w, https://www.cybereason.com/hs-fs/hubfs/powershell%20execute%20-%203.png?width=424&amp;name=powershell%20execute%20-%203.png 424w, https://www.cybereason.com/hs-fs/hubfs/powershell%20execute%20-%203.png?width=636&amp;name=powershell%20execute%20-%203.png 636w, https://www.cybereason.com/hs-fs/hubfs/powershell%20execute%20-%203.png?width=848&amp;name=powershell%20execute%20-%203.png 848w, https://www.cybereason.com/hs-fs/hubfs/powershell%20execute%20-%203.png?width=1060&amp;name=powershell%20execute%20-%203.png 1060w, https://www.cybereason.com/hs-fs/hubfs/powershell%20execute%20-%203.png?width=1272&amp;name=powershell%20execute%20-%203.png 1272w" sizes="(max-width: 424px) 100vw, 424px"></span></i></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">PowerShell executes the Ramnit executable.</span></i></p>
<p><span style="font-weight: 400;">sLoad creates five .jpg files named </span><i><span style="font-weight: 400;">[ScreenCapture +&lt;incremented number&gt;] </span></i><span style="font-weight: 400;">using the </span><strong>Get-ScreenCapture</strong><span style="font-weight: 400;"> function and saves them to the folder&nbsp;created by the malware. It then continues to exploit BITSAdmin by using it to upload all five .jpg files to the malicious C2 server. </span></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/for%205%20screen.png?width=240&amp;name=for%205%20screen.png" alt="for 5 screen" width="240" style="width: 240px; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/for%205%20screen.png?width=120&amp;name=for%205%20screen.png 120w, https://www.cybereason.com/hs-fs/hubfs/for%205%20screen.png?width=240&amp;name=for%205%20screen.png 240w, https://www.cybereason.com/hs-fs/hubfs/for%205%20screen.png?width=360&amp;name=for%205%20screen.png 360w, https://www.cybereason.com/hs-fs/hubfs/for%205%20screen.png?width=480&amp;name=for%205%20screen.png 480w, https://www.cybereason.com/hs-fs/hubfs/for%205%20screen.png?width=600&amp;name=for%205%20screen.png 600w, https://www.cybereason.com/hs-fs/hubfs/for%205%20screen.png?width=720&amp;name=for%205%20screen.png 720w" sizes="(max-width: 240px) 100vw, 240px"></span></i></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">sLoad takes&nbsp;six screen capture images.</span></i></p>
<img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(7).png?width=600&amp;name=pasted%20image%200%20(7).png" alt="pasted image 0 (7)" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(7).png?width=300&amp;name=pasted%20image%200%20(7).png 300w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(7).png?width=600&amp;name=pasted%20image%200%20(7).png 600w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(7).png?width=900&amp;name=pasted%20image%200%20(7).png 900w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(7).png?width=1200&amp;name=pasted%20image%200%20(7).png 1200w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(7).png?width=1500&amp;name=pasted%20image%200%20(7).png 1500w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(7).png?width=1800&amp;name=pasted%20image%200%20(7).png 1800w" sizes="(max-width: 600px) 100vw, 600px">
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">sLoad screen capture function creating five images.</span></i></p>
<p><span style="font-weight: 400;">After the executable is initiated, the malware hides its tracks using CMD with the </span><strong>del</strong> <strong>command</strong><span style="font-weight: 400;"> to delete three files, including the encoded and decoded payloads, and the Ramnit banking Trojan executable (</span><i><span style="font-weight: 400;">( _UWBwKlrFyeTXGjtV.txt), ( _UWBwKlrFyeTXGjtV_1.txt), and</span></i> <i><span style="font-weight: 400;">( _UWBwKlrFyeTXGjtV.exe)) </span></i><span style="font-weight: 400;">.</span></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(8).png?width=504&amp;name=pasted%20image%200%20(8).png" alt="pasted image 0 (8)" width="504" style="width: 504px; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(8).png?width=252&amp;name=pasted%20image%200%20(8).png 252w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(8).png?width=504&amp;name=pasted%20image%200%20(8).png 504w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(8).png?width=756&amp;name=pasted%20image%200%20(8).png 756w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(8).png?width=1008&amp;name=pasted%20image%200%20(8).png 1008w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(8).png?width=1260&amp;name=pasted%20image%200%20(8).png 1260w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(8).png?width=1512&amp;name=pasted%20image%200%20(8).png 1512w" sizes="(max-width: 504px) 100vw, 504px"></span></i></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">sLoad hides evidence of the Ramnit executable.</span></i></p>
<p><span style="font-weight: 400;">The full chain of instructions displayed in the Cybereason platform can be seen in the sLoad payload deobfuscated code (config.ini).</span></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/chain%20of%20commands%20with%20words.png?width=600&amp;name=chain%20of%20commands%20with%20words.png" alt="chain of commands with words" width="600" style="width: 600px; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/chain%20of%20commands%20with%20words.png?width=300&amp;name=chain%20of%20commands%20with%20words.png 300w, https://www.cybereason.com/hs-fs/hubfs/chain%20of%20commands%20with%20words.png?width=600&amp;name=chain%20of%20commands%20with%20words.png 600w, https://www.cybereason.com/hs-fs/hubfs/chain%20of%20commands%20with%20words.png?width=900&amp;name=chain%20of%20commands%20with%20words.png 900w, https://www.cybereason.com/hs-fs/hubfs/chain%20of%20commands%20with%20words.png?width=1200&amp;name=chain%20of%20commands%20with%20words.png 1200w, https://www.cybereason.com/hs-fs/hubfs/chain%20of%20commands%20with%20words.png?width=1500&amp;name=chain%20of%20commands%20with%20words.png 1500w, https://www.cybereason.com/hs-fs/hubfs/chain%20of%20commands%20with%20words.png?width=1800&amp;name=chain%20of%20commands%20with%20words.png 1800w" sizes="(max-width: 600px) 100vw, 600px"></span></i></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">The sLoad deobfuscated chain of actions.</span></i></p>
<p><span style="font-weight: 400;">In addition to downloading an executable, sLoad includes a secondary, fileless attack vector that executes a PowerShell command from remote servers.</span></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(9).png?width=426&amp;name=pasted%20image%200%20(9).png" alt="pasted image 0 (9)" width="426" style="width: 426px; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(9).png?width=213&amp;name=pasted%20image%200%20(9).png 213w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(9).png?width=426&amp;name=pasted%20image%200%20(9).png 426w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(9).png?width=639&amp;name=pasted%20image%200%20(9).png 639w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(9).png?width=852&amp;name=pasted%20image%200%20(9).png 852w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(9).png?width=1065&amp;name=pasted%20image%200%20(9).png 1065w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(9).png?width=1278&amp;name=pasted%20image%200%20(9).png 1278w" sizes="(max-width: 426px) 100vw, 426px"></span></i></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(10).png?width=425&amp;name=pasted%20image%200%20(10).png" alt="pasted image 0 (10)" width="425" style="width: 425px; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(10).png?width=213&amp;name=pasted%20image%200%20(10).png 213w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(10).png?width=425&amp;name=pasted%20image%200%20(10).png 425w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(10).png?width=638&amp;name=pasted%20image%200%20(10).png 638w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(10).png?width=850&amp;name=pasted%20image%200%20(10).png 850w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(10).png?width=1063&amp;name=pasted%20image%200%20(10).png 1063w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(10).png?width=1275&amp;name=pasted%20image%200%20(10).png 1275w" sizes="(max-width: 425px) 100vw, 425px"></span></i></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">sLoad’s fileless command execution.</span></i></p>
<h2 style="font-weight: normal; line-height: 1.75;">Phase Three: The Ramnit Banking Trojan</h2>
<h4><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/image%20(8).png?width=600&amp;name=image%20(8).png" alt="image (8)" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/image%20(8).png?width=300&amp;name=image%20(8).png 300w, https://www.cybereason.com/hs-fs/hubfs/image%20(8).png?width=600&amp;name=image%20(8).png 600w, https://www.cybereason.com/hs-fs/hubfs/image%20(8).png?width=900&amp;name=image%20(8).png 900w, https://www.cybereason.com/hs-fs/hubfs/image%20(8).png?width=1200&amp;name=image%20(8).png 1200w, https://www.cybereason.com/hs-fs/hubfs/image%20(8).png?width=1500&amp;name=image%20(8).png 1500w, https://www.cybereason.com/hs-fs/hubfs/image%20(8).png?width=1800&amp;name=image%20(8).png 1800w" sizes="(max-width: 600px) 100vw, 600px"></span></h4>
<h4><span style="font-weight: 400;">Ramnit Analysis</span></h4>
<p><span style="font-weight: 400;">The payload of the BITSAdmin download </span><i><span style="font-weight: 400;">(&lt;GUID&gt;_UWBwKlrFyeTXGjtV.exe, S</span></i><strong><i>HA1:</i></strong><i><span style="font-weight: 400;">ae5b322b7586706015d8b3e83334c78b77f8f905)</span></i><span style="font-weight: 400;"> was an unknown version of the Ramnit banking Trojan at the time of initial analysis. It was first submitted to </span><a href="https://www.virustotal.com/en/file/f84cae61beca13e5746f0bac14b103a94a55cded4a5bbac07dd2675d35d5ac5f/analysis/"><span style="font-weight: 400;">VirusTotal</span></a><span style="font-weight: 400;"> after execution on the machine, not to Cybereason.</span></p>
<p><span style="font-weight: 400;">On execution, the Ramnit banking Trojan initiates its malicious activity through one of its persistence techniques. It creates scheduled tasks through the </span><a href="https://docs.microsoft.com/en-us/windows/desktop/wmisdk/com-api-for-wmi"><span style="font-weight: 400;">COM API</span></a><span style="font-weight: 400;"> that uses the </span><a href="https://docs.microsoft.com/en-us/windows/desktop/wmisdk/wmi-tasks--processes"><span style="font-weight: 400;">WMI process</span></a> <a href="https://www.howtogeek.com/332838/what-is-the-wmi-provider-host-wmiprvse.exe-and-why-is-it-using-so-much-cpu/"><span style="font-weight: 400;">wmiprvse.exe</span></a><span style="font-weight: 400;">. This process ensures the author of the task will be </span><strong>Microsoft, adding legitimacy to the operation</strong><span style="font-weight: 400;">. This is a LOL technique that ensures the Ramnit banking Trojan will stay hidden.</span></p>
<p><span style="font-weight: 400;">The Ramnit banking Trojan loads the COM API task module and initiates a scheduled task </span><i><span style="font-weight: 400;">(mikshpri)</span></i><span style="font-weight: 400;">.</span></p>
<p><img src="https://www.cybereason.com/hs-fs/hubfs/ramntask%20222222.png?width=600&amp;name=ramntask%20222222.png" alt="ramntask 222222" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/ramntask%20222222.png?width=300&amp;name=ramntask%20222222.png 300w, https://www.cybereason.com/hs-fs/hubfs/ramntask%20222222.png?width=600&amp;name=ramntask%20222222.png 600w, https://www.cybereason.com/hs-fs/hubfs/ramntask%20222222.png?width=900&amp;name=ramntask%20222222.png 900w, https://www.cybereason.com/hs-fs/hubfs/ramntask%20222222.png?width=1200&amp;name=ramntask%20222222.png 1200w, https://www.cybereason.com/hs-fs/hubfs/ramntask%20222222.png?width=1500&amp;name=ramntask%20222222.png 1500w, https://www.cybereason.com/hs-fs/hubfs/ramntask%20222222.png?width=1800&amp;name=ramntask%20222222.png 1800w" sizes="(max-width: 600px) 100vw, 600px"></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">Ramnit executable loads the COM API task module.</span></i></p>
<p><img src="https://www.cybereason.com/hs-fs/hubfs/t11userl.png?width=600&amp;name=t11userl.png" alt="t11userl" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/t11userl.png?width=300&amp;name=t11userl.png 300w, https://www.cybereason.com/hs-fs/hubfs/t11userl.png?width=600&amp;name=t11userl.png 600w, https://www.cybereason.com/hs-fs/hubfs/t11userl.png?width=900&amp;name=t11userl.png 900w, https://www.cybereason.com/hs-fs/hubfs/t11userl.png?width=1200&amp;name=t11userl.png 1200w, https://www.cybereason.com/hs-fs/hubfs/t11userl.png?width=1500&amp;name=t11userl.png 1500w, https://www.cybereason.com/hs-fs/hubfs/t11userl.png?width=1800&amp;name=t11userl.png 1800w" sizes="(max-width: 600px) 100vw, 600px"></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">The scheduled task using the WMI process.</span></i></p>
<p><span style="font-weight: 400;">After the tasks are scheduled, wmiprvse.exe spawns CMDs that create three files: &nbsp;</span></p>
<ul>
<li style="font-weight: 400;"><span style="font-weight: 400; font-size: 18px;">An empty .txt file.</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400; font-size: 18px;">A VBS file.</span></li>
<li style="font-weight: 400;"><span style="font-size: 18px;"><span style="font-weight: 400;">A PS file.</span><span style="font-weight: 400;"></span></span></li>
</ul>
<p>&nbsp;</p>
<img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(11).png?width=600&amp;name=pasted%20image%200%20(11).png" alt="pasted image 0 (11)" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(11).png?width=300&amp;name=pasted%20image%200%20(11).png 300w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(11).png?width=600&amp;name=pasted%20image%200%20(11).png 600w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(11).png?width=900&amp;name=pasted%20image%200%20(11).png 900w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(11).png?width=1200&amp;name=pasted%20image%200%20(11).png 1200w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(11).png?width=1500&amp;name=pasted%20image%200%20(11).png 1500w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(11).png?width=1800&amp;name=pasted%20image%200%20(11).png 1800w" sizes="(max-width: 600px) 100vw, 600px">
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">WMI spawn command lines that creates three files. (as seen in the Cybereason attack tree)</span></i></p>
<br><img src="https://www.cybereason.com/hs-fs/hubfs/image-60.png?width=600&amp;name=image-60.png" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/image-60.png?width=300&amp;name=image-60.png 300w, https://www.cybereason.com/hs-fs/hubfs/image-60.png?width=600&amp;name=image-60.png 600w, https://www.cybereason.com/hs-fs/hubfs/image-60.png?width=900&amp;name=image-60.png 900w, https://www.cybereason.com/hs-fs/hubfs/image-60.png?width=1200&amp;name=image-60.png 1200w, https://www.cybereason.com/hs-fs/hubfs/image-60.png?width=1500&amp;name=image-60.png 1500w, https://www.cybereason.com/hs-fs/hubfs/image-60.png?width=1800&amp;name=image-60.png 1800w" sizes="(max-width: 600px) 100vw, 600px">
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">WMI creates three files through the command line.</span></i></p>
<br>
<p><span style="font-weight: 400;">These three files are saved to the %AppData% folder and have names that depend on the computer they are executed on. After the files are created, the Ramnit banking Trojan executable writes a malicious script to the empty .txt file. This .txt file contains the additional Ramnit payload that will be loaded reflectively to the targeted processes </span></p>
<h4><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/ramnit%20write%20to%20txt%202%20userless.png?width=600&amp;name=ramnit%20write%20to%20txt%202%20userless.png" alt="ramnit write to txt 2 userless" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/ramnit%20write%20to%20txt%202%20userless.png?width=300&amp;name=ramnit%20write%20to%20txt%202%20userless.png 300w, https://www.cybereason.com/hs-fs/hubfs/ramnit%20write%20to%20txt%202%20userless.png?width=600&amp;name=ramnit%20write%20to%20txt%202%20userless.png 600w, https://www.cybereason.com/hs-fs/hubfs/ramnit%20write%20to%20txt%202%20userless.png?width=900&amp;name=ramnit%20write%20to%20txt%202%20userless.png 900w, https://www.cybereason.com/hs-fs/hubfs/ramnit%20write%20to%20txt%202%20userless.png?width=1200&amp;name=ramnit%20write%20to%20txt%202%20userless.png 1200w, https://www.cybereason.com/hs-fs/hubfs/ramnit%20write%20to%20txt%202%20userless.png?width=1500&amp;name=ramnit%20write%20to%20txt%202%20userless.png 1500w, https://www.cybereason.com/hs-fs/hubfs/ramnit%20write%20to%20txt%202%20userless.png?width=1800&amp;name=ramnit%20write%20to%20txt%202%20userless.png 1800w" sizes="(max-width: 600px) 100vw, 600px"></span></h4>
<p>&nbsp;</p>
<h4 style="line-height: 1.75;"><span style="font-weight: 400;">Activation of the Scheduled Task</span></h4>
<p><span style="font-weight: 400;">After the three files are created and the .txt file is populated, the scheduled task </span><i><span style="font-weight: 400;">(mikshpri)</span></i><span style="font-weight: 400;"> executes a VBScript (</span><i><span style="font-weight: 400;">mikshpri.vbs, </span></i><strong><i>&nbsp;SHA1:</i></strong><i><span style="font-weight: 400;">21B729CEEE16CF3993D8DDBFEEEBB4F960B46F09</span></i><span style="font-weight: 400;">) using </span><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/wscript"><span style="font-weight: 400;">wscript</span></a><span style="font-weight: 400;">.</span></p>
<p><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/two%20task%20end%20userl.png?width=600&amp;name=two%20task%20end%20userl.png" alt="two task end userl" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/two%20task%20end%20userl.png?width=300&amp;name=two%20task%20end%20userl.png 300w, https://www.cybereason.com/hs-fs/hubfs/two%20task%20end%20userl.png?width=600&amp;name=two%20task%20end%20userl.png 600w, https://www.cybereason.com/hs-fs/hubfs/two%20task%20end%20userl.png?width=900&amp;name=two%20task%20end%20userl.png 900w, https://www.cybereason.com/hs-fs/hubfs/two%20task%20end%20userl.png?width=1200&amp;name=two%20task%20end%20userl.png 1200w, https://www.cybereason.com/hs-fs/hubfs/two%20task%20end%20userl.png?width=1500&amp;name=two%20task%20end%20userl.png 1500w, https://www.cybereason.com/hs-fs/hubfs/two%20task%20end%20userl.png?width=1800&amp;name=two%20task%20end%20userl.png 1800w" sizes="(max-width: 600px) 100vw, 600px"></span></p>
<p><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(12).png?width=600&amp;name=pasted%20image%200%20(12).png" alt="pasted image 0 (12)" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(12).png?width=300&amp;name=pasted%20image%200%20(12).png 300w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(12).png?width=600&amp;name=pasted%20image%200%20(12).png 600w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(12).png?width=900&amp;name=pasted%20image%200%20(12).png 900w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(12).png?width=1200&amp;name=pasted%20image%200%20(12).png 1200w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(12).png?width=1500&amp;name=pasted%20image%200%20(12).png 1500w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(12).png?width=1800&amp;name=pasted%20image%200%20(12).png 1800w" sizes="(max-width: 600px) 100vw, 600px"></span></p>
<p><span style="font-weight: 400;">The VBScript executes the PowerShell script </span><i><span style="font-weight: 400;">(phnjyubk.ps1)</span></i><span style="font-weight: 400;"> in the same folder. The .ps1 file decodes the encoded .txt file </span><i><span style="font-weight: 400;">(ibgqbamp.txt)</span></i><span style="font-weight: 400;"> and executes it. In this process, the PowerShell script reads the encoded .txt file and puts it into a variable. The PowerShell script uses the </span><strong>Unprotect</strong><span style="font-weight: 400;"> command to decode the file, then saves it as another variable and executes its content.</span></p>
<p><i><span style="font-weight: 400;">phnjyubk.ps1</span></i><span style="font-weight: 400;">: &nbsp;</span><strong>SHA1:</strong><span style="font-weight: 400;"> 9344835036D0FA30B46EF1F4C3C16461E3F9B58F</span></p>
<p><i><span style="font-weight: 400;">Ibgqbamp.tx</span></i><span style="font-weight: 400;">t: &nbsp;</span><strong>SHA1:</strong><span style="font-weight: 400;"> 3544F637F5F53BF14B2A0CE7C24937A2C6BC8EFE</span></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(13).png?width=600&amp;name=pasted%20image%200%20(13).png" alt="pasted image 0 (13)" width="600" style="width: 600px; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(13).png?width=300&amp;name=pasted%20image%200%20(13).png 300w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(13).png?width=600&amp;name=pasted%20image%200%20(13).png 600w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(13).png?width=900&amp;name=pasted%20image%200%20(13).png 900w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(13).png?width=1200&amp;name=pasted%20image%200%20(13).png 1200w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(13).png?width=1500&amp;name=pasted%20image%200%20(13).png 1500w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(13).png?width=1800&amp;name=pasted%20image%200%20(13).png 1800w" sizes="(max-width: 600px) 100vw, 600px"></span></i></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">Execution of the wscript.</span></i></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(14).png?width=600&amp;name=pasted%20image%200%20(14).png" alt="pasted image 0 (14)" width="600" style="width: 600px; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(14).png?width=300&amp;name=pasted%20image%200%20(14).png 300w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(14).png?width=600&amp;name=pasted%20image%200%20(14).png 600w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(14).png?width=900&amp;name=pasted%20image%200%20(14).png 900w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(14).png?width=1200&amp;name=pasted%20image%200%20(14).png 1200w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(14).png?width=1500&amp;name=pasted%20image%200%20(14).png 1500w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(14).png?width=1800&amp;name=pasted%20image%200%20(14).png 1800w" sizes="(max-width: 600px) 100vw, 600px"></span></i></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">The contents of the VBScript.</span></i></p>
<img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(15).png?width=600&amp;name=pasted%20image%200%20(15).png" alt="pasted image 0 (15)" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(15).png?width=300&amp;name=pasted%20image%200%20(15).png 300w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(15).png?width=600&amp;name=pasted%20image%200%20(15).png 600w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(15).png?width=900&amp;name=pasted%20image%200%20(15).png 900w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(15).png?width=1200&amp;name=pasted%20image%200%20(15).png 1200w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(15).png?width=1500&amp;name=pasted%20image%200%20(15).png 1500w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(15).png?width=1800&amp;name=pasted%20image%200%20(15).png 1800w" sizes="(max-width: 600px) 100vw, 600px">
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">The contents of the Powershell script.</span></i></p>
<h4><span style="font-weight: 400;">Analysis of the .txt File</span></h4>
<p><span style="font-weight: 400;">After establishing its persistence using scheduled tasks, the Ramnit banking Trojan executes its reflective code injection. </span></p>
<p><span style="font-weight: 400;">The script decoded from the .txt file (</span><i><span style="font-weight: 400;">ibgqbamp.txt)</span></i><span style="font-weight: 400;"> is a modified version of an open source script (</span><a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-ReflectivePEInjection.ps1"><i><span style="font-weight: 400;">Invoke-ReflectivePEInjection.ps1</span></i></a><span style="font-weight: 400;">). It is a PowerShell post-exploitation framework developed by PowerSploit. This script has two modes: it can reflectively load a DLL/EXE into the PowerShell process, or it can reflectively load a DLL into a remote process. </span></p>
<p><span style="font-weight: 400;">After investigating the malicious .txt file </span><i><span style="font-weight: 400;">(</span></i><i><span style="font-weight: 400;">ibgqbamp.txt)</span></i><span style="font-weight: 400;">, it appears to extract two DLLs:</span></p>
<ol style="font-size: 18px;">
<li style="font-weight: 400;"><strong>RuntimeCheck.dll</strong><span style="font-weight: 400;"> is a module that was added by the attacker to the open source script in order to bypass the Anti Malware Scan Interface (AMSI) defense</span><i><span style="font-weight: 400;"> (</span></i><strong><i>SHA1</i></strong><i><span style="font-weight: 400;">:e680c19a48d43ab9fb3fcc76e2b05af62fe55f1a)</span></i><span style="font-weight: 400;">.</span></li>
<li style="font-weight: 400;"><strong>rmnsoft.dll </strong><span style="font-weight: 400;">is the network mechanism that connects with the C2 server </span><i><span style="font-weight: 400;">(</span></i><strong><i>SHA1</i></strong><i><span style="font-weight: 400;">:b4b93c740f4058b6607b3c509d50804b6119e010)</span></i><span style="font-weight: 400;">.</span></li>
</ol>
<br><img src="https://www.cybereason.com/hs-fs/hubfs/runtime%20check.png?width=600&amp;name=runtime%20check.png" alt="runtime check" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/runtime%20check.png?width=300&amp;name=runtime%20check.png 300w, https://www.cybereason.com/hs-fs/hubfs/runtime%20check.png?width=600&amp;name=runtime%20check.png 600w, https://www.cybereason.com/hs-fs/hubfs/runtime%20check.png?width=900&amp;name=runtime%20check.png 900w, https://www.cybereason.com/hs-fs/hubfs/runtime%20check.png?width=1200&amp;name=runtime%20check.png 1200w, https://www.cybereason.com/hs-fs/hubfs/runtime%20check.png?width=1500&amp;name=runtime%20check.png 1500w, https://www.cybereason.com/hs-fs/hubfs/runtime%20check.png?width=1800&amp;name=runtime%20check.png 1800w" sizes="(max-width: 600px) 100vw, 600px">
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">Runtime.check.dll &nbsp;bypassing the AMSI module.</span></i></p>
<img src="https://www.cybereason.com/hs-fs/hubfs/delete%20and%20mz%20userl.png?width=600&amp;name=delete%20and%20mz%20userl.png" alt="delete and mz userl" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/delete%20and%20mz%20userl.png?width=300&amp;name=delete%20and%20mz%20userl.png 300w, https://www.cybereason.com/hs-fs/hubfs/delete%20and%20mz%20userl.png?width=600&amp;name=delete%20and%20mz%20userl.png 600w, https://www.cybereason.com/hs-fs/hubfs/delete%20and%20mz%20userl.png?width=900&amp;name=delete%20and%20mz%20userl.png 900w, https://www.cybereason.com/hs-fs/hubfs/delete%20and%20mz%20userl.png?width=1200&amp;name=delete%20and%20mz%20userl.png 1200w, https://www.cybereason.com/hs-fs/hubfs/delete%20and%20mz%20userl.png?width=1500&amp;name=delete%20and%20mz%20userl.png 1500w, https://www.cybereason.com/hs-fs/hubfs/delete%20and%20mz%20userl.png?width=1800&amp;name=delete%20and%20mz%20userl.png 1800w" sizes="(max-width: 600px) 100vw, 600px">
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">Rmnsoft.dll, the ramnit module.</span></i></p>
<h4 style="line-height: 1.75;"><span style="font-weight: 400;">RuntimeCheck.dll and Bypassing AMSI</span></h4>
<p><span style="font-weight: 400;">As mentioned above, the attacker modified the </span><i><span style="font-weight: 400;">(</span></i><a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-ReflectivePEInjection.ps1"><i><span style="font-weight: 400;">Invoke-ReflectivePEInjection.ps1</span></i></a><i><span style="font-weight: 400;">)</span></i><span style="font-weight: 400;"> script and added a module to control and verify bypassing the AMSI defense mechanism. This module&nbsp;consists of five different functions, but most of them execute from the main function of the </span><strong>Disable()</strong><span style="font-weight: 400;"> module.</span></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/runtimecheck%20intro.png?width=600&amp;name=runtimecheck%20intro.png" alt="runtimecheck intro" width="600" style="width: 600px; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/runtimecheck%20intro.png?width=300&amp;name=runtimecheck%20intro.png 300w, https://www.cybereason.com/hs-fs/hubfs/runtimecheck%20intro.png?width=600&amp;name=runtimecheck%20intro.png 600w, https://www.cybereason.com/hs-fs/hubfs/runtimecheck%20intro.png?width=900&amp;name=runtimecheck%20intro.png 900w, https://www.cybereason.com/hs-fs/hubfs/runtimecheck%20intro.png?width=1200&amp;name=runtimecheck%20intro.png 1200w, https://www.cybereason.com/hs-fs/hubfs/runtimecheck%20intro.png?width=1500&amp;name=runtimecheck%20intro.png 1500w, https://www.cybereason.com/hs-fs/hubfs/runtimecheck%20intro.png?width=1800&amp;name=runtimecheck%20intro.png 1800w" sizes="(max-width: 600px) 100vw, 600px"></span></i></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">RuntimeCheck.dll</span></i></p>
<p><span style="font-weight: 400;">As described in the </span><a href="https://docs.microsoft.com/en-us/windows/desktop/amsi/antimalware-scan-interface-portal"><span style="font-weight: 400;">Microsoft Developer Network</span></a><span style="font-weight: 400;"> (MSDN): </span></p>
<p><i><span style="font-weight: 400;">“AMSI is a generic interface standard that allows applications and services to integrate with any anti malware product present on a machine. It provides enhanced malware protection for users and their data, applications, and workloads.</span></i></p>
<br>
<p><i><span style="font-weight: 400;">AMSI is anti malware vendor agnostic, designed to allow for the most common malware scanning and protection techniques provided by today’s anti malware products that can be integrated into applications. It supports a calling structure allowing for file and memory or stream scanning, content source URL/IP reputation checks, and other techniques.”</span></i></p>
<p><span style="font-weight: 400;">The </span><span style="font-weight: 400;"><a href="https://docs.microsoft.com/en-us/windows/desktop/amsi/antimalware-scan-interface-portal">Anti Malware Scan Interface</a>&nbsp;(AMSI)</span><span style="font-weight: 400;"> is designed for application developers that want to make requests to anti malware products from within their applications, as well as for third-party creators of anti malware products that want their products to offer the best features to applications.</span></p>
<p><span style="font-weight: 400;">By default, AMSI works with</span><a href="https://www.microsoft.com/en-us/windows/windows-defender/"><span style="font-weight: 400;"> Windows Defender</span></a><span style="font-weight: 400;"> to scan relevant data. However, if another antivirus engine registers itself as an </span><strong>AMSI Provider</strong><span style="font-weight: 400;">, Windows Defender will unregister itself and shut down.</span></p>
<p><span style="font-weight: 400;">In the </span><strong>Disable() </strong><span style="font-weight: 400;">module, there are several functions that work together to bypass AMSI. A </span><a href="https://www.cyberark.com/threat-research-blog/amsi-bypass-patching-technique/"><span style="font-weight: 400;">similar technique</span></a><span style="font-weight: 400;"> was described earlier this year by CyberArk. </span></p>
<p><span style="font-weight: 400;">In this instance, the attacker&nbsp;tries to bypass AMSI in order to evade its functionality. The attacker attempts to use hard-coded memory manipulation with bytes of arrays to change the </span><a href="https://docs.microsoft.com/en-us/windows/desktop/api/amsi/nf-amsi-amsiscanbuffer"><span style="font-weight: 400;">AmsiScanBuffer</span></a><span style="font-weight: 400;"> function arguments.</span></p>
<img src="https://www.cybereason.com/hs-fs/hubfs/evasion.png?width=600&amp;name=evasion.png" alt="evasion" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/evasion.png?width=300&amp;name=evasion.png 300w, https://www.cybereason.com/hs-fs/hubfs/evasion.png?width=600&amp;name=evasion.png 600w, https://www.cybereason.com/hs-fs/hubfs/evasion.png?width=900&amp;name=evasion.png 900w, https://www.cybereason.com/hs-fs/hubfs/evasion.png?width=1200&amp;name=evasion.png 1200w, https://www.cybereason.com/hs-fs/hubfs/evasion.png?width=1500&amp;name=evasion.png 1500w, https://www.cybereason.com/hs-fs/hubfs/evasion.png?width=1800&amp;name=evasion.png 1800w" sizes="(max-width: 600px) 100vw, 600px">
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">The technique used to bypass AMSI.</span></i></p>
<p><span style="font-weight: 400;">Once the attacker is able to bypass the AMSI defense system, they&nbsp;can lay the groundwork for the Ramnit banking Trojan module. This module is stored in the script as shellcode that will be injected reflectively.</span></p>
<h4><span style="font-weight: 400;">Rmnsoft.dll Analysis </span></h4>
<p><span style="font-weight: 400;">As mentioned above, the .txt file contains a second payload stored as shellcode, which is the Ramnit banking Trojan module.</span></p>
<p><span style="font-weight: 400;">Ramnit is one of the </span><a href="https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=Win32/Ramnit"><span style="font-weight: 400;">oldest banking Trojans</span></a><span style="font-weight: 400;">, and has been used by attackers since as early as 2010. Originally, it was used as a worm spreader. It was adapted for banking shortly after its developers adopted the </span><a href="https://www.cert.pl/en/news/single/ramnit-in-depth-analysis/"><span style="font-weight: 400;">leaked Zeus source code</span></a><span style="font-weight: 400;">.</span></p>
<p><span style="font-weight: 400;">Traditionally, the Ramnit banking Trojan module </span><i><span style="font-weight: 400;">(rmnsoft.dll)</span></i><span style="font-weight: 400;"> is responsible for multiple core malicious activities that are related to the network and communication of the banking Trojan. The module is also responsible for downloading several malicious modules that, when combined, expand the&nbsp;Ramnit features. These malicious activities include:</span></p>
<ul style="font-size: 18px;">
<li style="font-weight: 400;"><span style="font-weight: 400;">Man-in-the-Browser Attacks</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">Screen Capturing</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">Monitoring Keystrokes</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">Stealing Stored Credentials from FTP Clients</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">Stealing Cookies</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">Downloading Additional Malicious Files</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">Uploading Sensitive Data to a Remote C2 server</span></li>
</ul>
<br>
<p><span style="font-weight: 400;">After extracting the main module</span><i><span style="font-weight: 400;"> (rmnsoft.dll)</span></i><span style="font-weight: 400;">, it appears to have a list of targeted processes:</span></p>
<ul style="font-size: 18px;">
<li style="font-weight: 400;"><span style="font-weight: 400;">ImagingDevices.exe</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">Wab.exe</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">wabimg.exe</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">wmplayer.exe</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;">wordpad.exe</span></li>
</ul>
<br>
<p><span style="font-weight: 400;"> These processes eventually become the injected processes that contain the main module </span><i><span style="font-weight: 400;">(rmnsoft.dll)</span></i><span style="font-weight: 400;">. </span></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(16).png?width=600&amp;name=pasted%20image%200%20(16).png" alt="pasted image 0 (16)" width="600" style="width: 600px; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(16).png?width=300&amp;name=pasted%20image%200%20(16).png 300w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(16).png?width=600&amp;name=pasted%20image%200%20(16).png 600w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(16).png?width=900&amp;name=pasted%20image%200%20(16).png 900w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(16).png?width=1200&amp;name=pasted%20image%200%20(16).png 1200w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(16).png?width=1500&amp;name=pasted%20image%200%20(16).png 1500w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(16).png?width=1800&amp;name=pasted%20image%200%20(16).png 1800w" sizes="(max-width: 600px) 100vw, 600px"></span></i></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">Strings of targeted processes found in rmnsoft.dl.</span></i></p>
<br><br>
<h4 style="text-align: left;">rmnsoft.dll and Reflective Injection</h4>
<p><span style="font-weight: 400;">As mentioned above, the main purpose of the modified script </span><i><span style="font-weight: 400;">(Invoke-ReflectivePEInjection.ps1)</span></i><span style="font-weight: 400;"> stored as a .txt file is to either reflectively inject a selected payload into the PowerShell or remotely into a chosen process.</span></p>
<p><span style="font-weight: 400;">Once the wscript executes the PowerShell script </span><i><span style="font-weight: 400;">(phnjyubk.ps1)</span></i><span style="font-weight: 400;">, the rmnsoft.dll module is reflectively injected into the PowerShell process.</span></p>
<p><span style="font-weight: 400;"><br><img src="https://www.cybereason.com/hs-fs/hubfs/powershell%20injected.png?width=600&amp;name=powershell%20injected.png" alt="powershell injected" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/powershell%20injected.png?width=300&amp;name=powershell%20injected.png 300w, https://www.cybereason.com/hs-fs/hubfs/powershell%20injected.png?width=600&amp;name=powershell%20injected.png 600w, https://www.cybereason.com/hs-fs/hubfs/powershell%20injected.png?width=900&amp;name=powershell%20injected.png 900w, https://www.cybereason.com/hs-fs/hubfs/powershell%20injected.png?width=1200&amp;name=powershell%20injected.png 1200w, https://www.cybereason.com/hs-fs/hubfs/powershell%20injected.png?width=1500&amp;name=powershell%20injected.png 1500w, https://www.cybereason.com/hs-fs/hubfs/powershell%20injected.png?width=1800&amp;name=powershell%20injected.png 1800w" sizes="(max-width: 600px) 100vw, 600px"></span></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">The shellcode reflectively injected into PowerShell process.</span></i></p>
<p><span style="font-weight: 400;">After being reflected into the PowerShell process, the script (</span><i><span style="font-weight: 400;">phnjyubk.ps1) </span></i><span style="font-weight: 400;">executes a function to search for the chosen processes. Once it identifies the processes, it injects its malicious module </span><i><span style="font-weight: 400;">(rmnsoft.dll)</span></i><span style="font-weight: 400;"> into one of them .</span></p>
<img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(17).png?width=600&amp;name=pasted%20image%200%20(17).png" alt="pasted image 0 (17)" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(17).png?width=300&amp;name=pasted%20image%200%20(17).png 300w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(17).png?width=600&amp;name=pasted%20image%200%20(17).png 600w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(17).png?width=900&amp;name=pasted%20image%200%20(17).png 900w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(17).png?width=1200&amp;name=pasted%20image%200%20(17).png 1200w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(17).png?width=1500&amp;name=pasted%20image%200%20(17).png 1500w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(17).png?width=1800&amp;name=pasted%20image%200%20(17).png 1800w" sizes="(max-width: 600px) 100vw, 600px">
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">The script selects where to inject the Ramnit module according to the targeted strings.</span></i></p>
<p><span style="font-weight: 400;">As mentioned above, once the PowerShell script ends its execution, </span><i><span style="font-weight: 400;">wmiprvse.exe</span></i><span style="font-weight: 400;"> spawns a new process from the targeted list and performs its reflective DLL injection. </span><a href="https://docs.microsoft.com/en-us/windows/desktop/wmisdk/wmi-start-page"><span style="font-weight: 400;">Windows Management Instrumentation</span></a><span style="font-weight: 400;"> (WMI),</span> <span style="font-weight: 400;">as described in MSDN, is the infrastructure for data management and operations on Windows-based operating systems. Attackers can use WMI </span><a href="https://attack.mitre.org/techniques/T1047/"><span style="font-weight: 400;">(MITRE Technique T1047)</span> </a><span style="font-weight: 400;">to interact with local and remote systems and use them to perform many offensive tactics, such as gathering information for discovery and remote execution of files as part of </span><a href="https://attack.mitre.org/tactics/TA0008/"><span style="font-weight: 400;">lateral movement</span></a><span style="font-weight: 400;">.</span></p>
<img src="https://www.cybereason.com/hs-fs/hubfs/processtree%2034.png?width=600&amp;name=processtree%2034.png" alt="processtree 34" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/processtree%2034.png?width=300&amp;name=processtree%2034.png 300w, https://www.cybereason.com/hs-fs/hubfs/processtree%2034.png?width=600&amp;name=processtree%2034.png 600w, https://www.cybereason.com/hs-fs/hubfs/processtree%2034.png?width=900&amp;name=processtree%2034.png 900w, https://www.cybereason.com/hs-fs/hubfs/processtree%2034.png?width=1200&amp;name=processtree%2034.png 1200w, https://www.cybereason.com/hs-fs/hubfs/processtree%2034.png?width=1500&amp;name=processtree%2034.png 1500w, https://www.cybereason.com/hs-fs/hubfs/processtree%2034.png?width=1800&amp;name=processtree%2034.png 1800w" sizes="(max-width: 600px) 100vw, 600px"><br>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">The wmiprvse.exe injecting the &nbsp;module reflectively to the targeted processes, as seen in the Cybereason platform.</span></i></p>
<br><img src="https://www.cybereason.com/hs-fs/hubfs/processtree%20with%20colors.png?width=368&amp;name=processtree%20with%20colors.png" alt="processtree with colors" width="368" style="width: 368px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/processtree%20with%20colors.png?width=184&amp;name=processtree%20with%20colors.png 184w, https://www.cybereason.com/hs-fs/hubfs/processtree%20with%20colors.png?width=368&amp;name=processtree%20with%20colors.png 368w, https://www.cybereason.com/hs-fs/hubfs/processtree%20with%20colors.png?width=552&amp;name=processtree%20with%20colors.png 552w, https://www.cybereason.com/hs-fs/hubfs/processtree%20with%20colors.png?width=736&amp;name=processtree%20with%20colors.png 736w, https://www.cybereason.com/hs-fs/hubfs/processtree%20with%20colors.png?width=920&amp;name=processtree%20with%20colors.png 920w, https://www.cybereason.com/hs-fs/hubfs/processtree%20with%20colors.png?width=1104&amp;name=processtree%20with%20colors.png 1104w" sizes="(max-width: 368px) 100vw, 368px"><br>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">Execution of the injected wordpad.exe by WmiPrvSE.exe in </span></i><a href="https://processhacker.sourceforge.io/"><i><span style="font-weight: 400;">Process Hacker</span></i></a><i><span style="font-weight: 400;">.</span></i></p>
<p><span style="font-weight: 400;">When inspecting the memory section of any of the identified processes, we discovered a read-write-execute section that appears to be a Portable Executable file of size 116 kB. This section is where the module </span><i><span style="font-weight: 400;">(rmnsoft.dll)</span></i><span style="font-weight: 400;"> is injected and is responsible for the malicious network activity of the injected process.</span></p>
<p style="text-align: center;"><i><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/rwxcolor%20little.png?width=600&amp;name=rwxcolor%20little.png" alt="rwxcolor little" width="600" style="width: 600px; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/rwxcolor%20little.png?width=300&amp;name=rwxcolor%20little.png 300w, https://www.cybereason.com/hs-fs/hubfs/rwxcolor%20little.png?width=600&amp;name=rwxcolor%20little.png 600w, https://www.cybereason.com/hs-fs/hubfs/rwxcolor%20little.png?width=900&amp;name=rwxcolor%20little.png 900w, https://www.cybereason.com/hs-fs/hubfs/rwxcolor%20little.png?width=1200&amp;name=rwxcolor%20little.png 1200w, https://www.cybereason.com/hs-fs/hubfs/rwxcolor%20little.png?width=1500&amp;name=rwxcolor%20little.png 1500w, https://www.cybereason.com/hs-fs/hubfs/rwxcolor%20little.png?width=1800&amp;name=rwxcolor%20little.png 1800w" sizes="(max-width: 600px) 100vw, 600px"></span></i></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">rmnsoft.dll injected into ImagingDevices.exe. baidu.com is the address that the malware uses to check connectivity.</span></i></p>
<p><span style="font-weight: 400;">By checking any of the injected processes using the Cybereason platform, we can easily detect the presence of the module </span><i><span style="font-weight: 400;">(rmnsoft.dll)</span></i><span style="font-weight: 400;"> associated with Ramnit banking Trojan.</span></p>
<img src="https://www.cybereason.com/hs-fs/hubfs/module%20rmnsoft%20in%20cybereason.png?width=301&amp;name=module%20rmnsoft%20in%20cybereason.png" alt="module rmnsoft in cybereason" width="301" style="width: 301px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/module%20rmnsoft%20in%20cybereason.png?width=151&amp;name=module%20rmnsoft%20in%20cybereason.png 151w, https://www.cybereason.com/hs-fs/hubfs/module%20rmnsoft%20in%20cybereason.png?width=301&amp;name=module%20rmnsoft%20in%20cybereason.png 301w, https://www.cybereason.com/hs-fs/hubfs/module%20rmnsoft%20in%20cybereason.png?width=452&amp;name=module%20rmnsoft%20in%20cybereason.png 452w, https://www.cybereason.com/hs-fs/hubfs/module%20rmnsoft%20in%20cybereason.png?width=602&amp;name=module%20rmnsoft%20in%20cybereason.png 602w, https://www.cybereason.com/hs-fs/hubfs/module%20rmnsoft%20in%20cybereason.png?width=753&amp;name=module%20rmnsoft%20in%20cybereason.png 753w, https://www.cybereason.com/hs-fs/hubfs/module%20rmnsoft%20in%20cybereason.png?width=903&amp;name=module%20rmnsoft%20in%20cybereason.png 903w" sizes="(max-width: 301px) 100vw, 301px">
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">Ramnit banking Trojan malicious DLL loaded reflectively.</span></i></p>
<h4><span style="font-weight: 400;">Command and Control </span></h4>
<p><span style="font-weight: 400;">As mentioned above, the module </span><i><span style="font-weight: 400;">(ramnsoft.dll)</span></i><span style="font-weight: 400;"> is responsible for the network ability of the Ramnit banking Trojan.</span></p>
<p><span style="font-weight: 400;">The module contains several network functions that allow the malware to initiate a remote connection with a C2 server.</span></p>
<p><span style="font-weight: 400;">After the PowerShell script ends its execution, the new process is injected with the Ramnit banking Trojan DLL to collect information about the local system using the </span><strong>CreateToolhelp32Snapshot </strong><span style="font-weight: 400;">function. It sends this data to a C2 server using </span><a href="https://www.cybereason.com/blog/what-are-domain-generation-algorithms-dga"><span style="font-weight: 400;">Domain Generation Algorithms</span></a><span style="font-weight: 400;"> (DGA).</span></p>
<p><span style="font-weight: 400;">DGA are algorithms that periodically generate a large number of domain names that can be used as rendezvous points with their C2 servers. They are generally used by malware to evade domain-based firewall controls. Malware that uses DGAs will constantly probe for short-lived, registered domains that match the domain generated by the DGA to complete the C2 communication.</span></p>
<p><span style="font-weight: 400;"><img src="https://www.cybereason.com/hs-fs/hubfs/dga%20color%20side%20by%20side%20-%20third%20version.png?width=600&amp;name=dga%20color%20side%20by%20side%20-%20third%20version.png" alt="dga color side by side - third version" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/dga%20color%20side%20by%20side%20-%20third%20version.png?width=300&amp;name=dga%20color%20side%20by%20side%20-%20third%20version.png 300w, https://www.cybereason.com/hs-fs/hubfs/dga%20color%20side%20by%20side%20-%20third%20version.png?width=600&amp;name=dga%20color%20side%20by%20side%20-%20third%20version.png 600w, https://www.cybereason.com/hs-fs/hubfs/dga%20color%20side%20by%20side%20-%20third%20version.png?width=900&amp;name=dga%20color%20side%20by%20side%20-%20third%20version.png 900w, https://www.cybereason.com/hs-fs/hubfs/dga%20color%20side%20by%20side%20-%20third%20version.png?width=1200&amp;name=dga%20color%20side%20by%20side%20-%20third%20version.png 1200w, https://www.cybereason.com/hs-fs/hubfs/dga%20color%20side%20by%20side%20-%20third%20version.png?width=1500&amp;name=dga%20color%20side%20by%20side%20-%20third%20version.png 1500w, https://www.cybereason.com/hs-fs/hubfs/dga%20color%20side%20by%20side%20-%20third%20version.png?width=1800&amp;name=dga%20color%20side%20by%20side%20-%20third%20version.png 1800w" sizes="(max-width: 600px) 100vw, 600px"></span></p>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">After the injection, Ramnit checks connectivity using several hardcoded and legitimate domains such as baidu.com and google.com. After it verifies the connection externally, it sends data using DGA.</span></i></p>
<p><span style="font-weight: 400;">The injected process is able to scan the infected machine and map the running processes using the </span><a href="https://docs.microsoft.com/en-us/windows/desktop/api/tlhelp32/nf-tlhelp32-createtoolhelp32snapshot"><span style="font-weight: 400;">CreateToolhelp32Snapshot</span></a><span style="font-weight: 400;"> function.</span></p>
<img src="https://www.cybereason.com/hs-fs/hubfs/apimon1%20scaning%20processes.png?width=600&amp;name=apimon1%20scaning%20processes.png" alt="apimon1 scaning processes" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/apimon1%20scaning%20processes.png?width=300&amp;name=apimon1%20scaning%20processes.png 300w, https://www.cybereason.com/hs-fs/hubfs/apimon1%20scaning%20processes.png?width=600&amp;name=apimon1%20scaning%20processes.png 600w, https://www.cybereason.com/hs-fs/hubfs/apimon1%20scaning%20processes.png?width=900&amp;name=apimon1%20scaning%20processes.png 900w, https://www.cybereason.com/hs-fs/hubfs/apimon1%20scaning%20processes.png?width=1200&amp;name=apimon1%20scaning%20processes.png 1200w, https://www.cybereason.com/hs-fs/hubfs/apimon1%20scaning%20processes.png?width=1500&amp;name=apimon1%20scaning%20processes.png 1500w, https://www.cybereason.com/hs-fs/hubfs/apimon1%20scaning%20processes.png?width=1800&amp;name=apimon1%20scaning%20processes.png 1800w" sizes="(max-width: 600px) 100vw, 600px">
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">The malware snapshot winlogon.exe during its process.</span></i></p>
<br><img src="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(18).png?width=600&amp;name=pasted%20image%200%20(18).png" alt="pasted image 0 (18)" width="600" style="width: 600px; display: block; margin: 0px auto;" srcset="https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(18).png?width=300&amp;name=pasted%20image%200%20(18).png 300w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(18).png?width=600&amp;name=pasted%20image%200%20(18).png 600w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(18).png?width=900&amp;name=pasted%20image%200%20(18).png 900w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(18).png?width=1200&amp;name=pasted%20image%200%20(18).png 1200w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(18).png?width=1500&amp;name=pasted%20image%200%20(18).png 1500w, https://www.cybereason.com/hs-fs/hubfs/pasted%20image%200%20(18).png?width=1800&amp;name=pasted%20image%200%20(18).png 1800w" sizes="(max-width: 600px) 100vw, 600px"><br>
<p style="text-align: center; font-size: 16px;"><i><span style="font-weight: 400;">Resolved and unresolved DNS queries generated by the injected processes.</span></i></p>
<br>
<h2 style="line-height: 1.75;"><span style="font-weight: 400;">CONCLUSION</span></h2>
<p><span style="font-weight: 400;">Our Active Hunting Service was able to detect both the PowerShell script and the malicious use of certutil. Our customer was able to immediately stop the attack using the remediation section of our platform. From there, our hunting team pulled the rest of the attack together and completed the analysis</span></p>
<p><span style="font-weight: 400;">We were able to detect and evaluate an evasive infection technique used to spread a variant of the Ramnit banking Trojan as part of an Italian spam campaign. In our discovery, we highlighted the use of legitimate, built-in products used to perform malicious activities through LOLbins, as well as how sLoad operates and installs various payloads. The analysis of the tools and techniques used in the spam campaign show how truly effective these methods are at evading antivirus products. We anticipate&nbsp;using the sLoad PowerShell downloader and its variants as an infection vector won’t stop with just delivering Ramnit.&nbsp;It will soon&nbsp;be used to deliver more advanced and sophisticated attacks. This is an example of an undercover, under-the-radar way to more effectively attack,&nbsp;which we see as having dangerous potential in future use.</span></p>
<p>As a result of this activity, the customer was able to contain an advanced&nbsp;attack before any damage was done. The Ramnit trojan was contained, as well as the sLoad dropper, which has a high potential for damage as well. Persistence was disabled, and the entire attack was halted in its tracks.</p>
<p>Part of the difficulty identifying this attack is in how it evades detection. It is difficult to detect, even for security teams aware of the difficulty ensuring a secure system, as with our customer above. LOLbins are deceptive because their execution seems benign at first. As the use of LOLbins become more commonplace, we suspect this complex method of attack will become more common as well. The potential for damage will grow, as attackers will look to other, more destructive payloads.</p>
<p>Want to start threat hunting?</p>
<!--HubSpot Call-to-Action Code --><span class="hs-cta-wrapper" id="hs-cta-wrapper-bd3d67f0-ef17-4381-acb0-a0f9a958ebc6"><span class="hs-cta-node hs-cta-bd3d67f0-ef17-4381-acb0-a0f9a958ebc6" id="hs-cta-bd3d67f0-ef17-4381-acb0-a0f9a958ebc6"><!--[if lte IE 8]><div id="hs-cta-ie-element"></div><![endif]--><a href="https://cta-redirect.hubspot.com/cta/redirect/3354902/bd3d67f0-ef17-4381-acb0-a0f9a958ebc6"><img class="hs-cta-img" id="hs-cta-img-bd3d67f0-ef17-4381-acb0-a0f9a958ebc6" style="border-width:0px;" src="https://no-cache.hubspot.com/cta/default/3354902/bd3d67f0-ef17-4381-acb0-a0f9a958ebc6.png" alt="Check out our webinar on how to generate a hypothesis in a threat hunt."></a></span><script charset="utf-8" src="/hs/cta/cta/current.js"></script><script type="text/javascript"> hbspt.cta._relativeUrls=true;hbspt.cta.load(3354902, 'bd3d67f0-ef17-4381-acb0-a0f9a958ebc6', {"useNewLoader":"true","region":"na1"}); </script></span><!-- end HubSpot Call-to-Action Code --><br>
<h2><span style="font-weight: 100;">Indicators of Compromise</span></h2>
<br>
<table>
<tbody>
<tr>
<td>
<p><strong>IOC</strong></p>
</td>
<td>
<p><strong>Type</strong></p>
</td>
<td>
<p><strong>Description</strong></p>
</td>
</tr>
<tr>
<td>
<p><span style="font-weight: 400;">bureaucratica[.]org</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain</span></p>
</td>
<td><br>
<p><span style="font-weight: 400;">sLoad downloader</span></p>
</td>
</tr>
<tr>
<td>
<p><span style="font-weight: 400;">Smokymountainsfineart[.]com</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain</span></p>
</td>
<td>
<p><span style="font-weight: 400;">sLoad downloader</span></p>
</td>
</tr>
<tr>
<td>
<p><span style="font-weight: 400;">packerd[.]me</span><span style="font-weight: 400;"><br><br></span></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain</span></p>
</td>
<td>
<p><span style="font-weight: 400;">sLoad payload</span></p>
</td>
</tr>
<tr>
<td>
<p><span style="font-weight: 400;">reasgt[.]me</span><span style="font-weight: 400;"><br><br></span></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain</span></p>
</td>
<td>
<p><span style="font-weight: 400;">sLoad payload</span></p>
</td>
</tr>
<tr>
<td>
<p><span style="font-weight: 400;">momer[.]me</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain</span></p>
</td>
<td>
<p><span style="font-weight: 400;">sLoad payload</span></p>
</td>
</tr>
<tr>
<td>
<p><span style="font-weight: 400;">imperialsociety[.]org</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain</span></p>
</td>
<td>
<p><span style="font-weight: 400;">sLoad payload</span></p>
</td>
</tr>
<tr>
<td>
<p><span style="font-weight: 400;">185.197.75[.]10</span></p>
</td>
<td>
<p><span style="font-weight: 400;">IP</span></p>
</td>
<td>
<p><span style="font-weight: 400;">sLoad payload</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1 </strong></p>
<p><span style="font-weight: 400;">B564ED3DE7A49673AC19B6231E439032AE6EAA68</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">documento-aggiornato-PJ-27760855KD.zip</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1</strong></p>
<p><span style="font-weight: 400;">7FDBCB40E0BE3563B7093F32F4B2967A0550437F</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">documento-aggiornato-DK-DDEVWCUZ.zip</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1</strong></p>
<p><span style="font-weight: 400;">1281D1C4B74BCEB2F57853537B49622DA3626ACD</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">documento-aggiornato-5D-MD2OW1.zip</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1</strong></p>
<p><span style="font-weight: 400;">0D2DAC7B17C38E4C4695784C8D06FF618EBCC944</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">documento-aggiornato-novembre-VSS-6639623058.zip</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1</strong></p>
<p><span style="font-weight: 400;">4C315904CBA72F7961C46D2D3A9661330B88B649</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">documento-aggiornato-VX-SR8Uvbgb.zip</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1</strong></p>
<p><span style="font-weight: 400;">11BEAD9002F2C0F9E292AA6FD066C8B1D8E4EDA7</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">documento-aggiornato-novembre-IJM0006480.zip</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1</strong></p>
<p><span style="font-weight: 400;">EC9072840FA94B8B4E9B852D8A8C736CAEE5031E</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">documento-aggiornato-TR000022023.zip</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1</strong></p>
<p><span style="font-weight: 400;">53813EDDEE9C3F5C151340CEBE2F75039979DA3D</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">documento-aggiornato-DQ00091395.zip</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1</strong></p>
<p><span style="font-weight: 400;">CC6D4DACFA016F3DAF8810FC63C1534C1D93D22F</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">documento-aggiornato-novembre-ZN000986350.zip</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1 </strong></p>
<p><span style="font-weight: 400;">B6E3C4A528E01B6DE055E089E3C0DD2DA79CFCBE</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">oyCZpsgNEFvQnW.ps1</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1 </strong></p>
<p><span style="font-weight: 400;">AEABE11F0496DA7E62501A35F4F03059F783C775</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">vmcpRAYW.vbs</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1 </strong></p>
<p><span style="font-weight: 400;">ae5b322b7586706015d8b3e83334c78b77f8f905</span></p>
<br><br></td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">_uwbwklrfyetxgjtv.exe</span><span style="font-weight: 400;"><br><br></span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1 </strong></p>
<p><span style="font-weight: 400;">82C3A3E1317CD5C671612430DDDED79DF9398BCC</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">config.ini</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1 </strong></p>
<p><span style="font-weight: 400;">ABC14EB06235A957D3AD66E359DC0B1F1FDFAB8A</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">web.ini</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1 </strong></p>
<p><span style="font-weight: 400;">9344835036D0FA30B46EF1F4C3C16461E3F9B58F</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">phnjyubk.ps1</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1 </strong></p>
<p><span style="font-weight: 400;">21B729CEEE16CF3993D8DDBFEEEBB4F960B46F09</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">mikshpri.vbs</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1 </strong></p>
<p><span style="font-weight: 400;">3544F637F5F53BF14B2A0CE7C24937A2C6BC8EFE</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">ibgqbamp.txt</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1 </strong></p>
<p><span style="font-weight: 400;">e680c19a48d43ab9fb3fcc76e2b05af62fe55f1a</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">RuntimeCheck.dll</span></p>
</td>
</tr>
<tr>
<td>
<p><strong>SHA1 </strong></p>
<p><span style="font-weight: 400;">b4b93c740f4058b6607b3c509d50804b6119e010</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Hash</span></p>
</td>
<td>
<p><span style="font-weight: 400;">rmnsoft.dll</span></p>
</td>
</tr>
<tr>
<td>
<p><span style="font-weight: 400;">image.orchas[.]com</span><strong><br><br></strong></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain related to the .zip files</span></p>
</td>
</tr>
<tr>
<td>
<p><span style="font-weight: 400;">cavintageclothing[.]com</span><strong><br><br></strong></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain related to the .zip files</span></p>
</td>
</tr>
<tr>
<td>
<p><span style="font-weight: 400;">image.fagorham[.]com</span><strong><br><br></strong></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain related to the .zip files</span></p>
</td>
</tr>
<tr>
<td>
<p><span style="font-weight: 400;">image.visitacnj[.]com</span><strong><br><br></strong></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain related to the .zip files</span></p>
</td>
</tr>
<tr>
<td>
<p><span style="font-weight: 400;">image.steampunkvegan[.]com</span><strong><br><br></strong></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain related to the .zip files</span></p>
</td>
</tr>
<tr>
<td>
<p><span style="font-weight: 400;">firetechnicaladvisor[.]com</span><strong><br><br></strong></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain related to the .zip files</span></p>
</td>
</tr>
<tr>
<td>
<p><span style="font-weight: 400;">image.sewingagent[.]com</span><span style="font-weight: 400;"><br><br></span></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain</span></p>
</td>
<td>
<p><span style="font-weight: 400;">Domain related to the .zip files</span></p>
</td>
</tr>
</tbody>
</table></span>
          
          <!-- IOC PopUp Modal -->
          
          
          
          <!-- -->
          
          <!-- Social Share -->
          <div class="cr-blog-post__social-sharing">
            <span>Share</span>
            <div id="hs_cos_wrapper_module_161724375084957" class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module widget-type-social_sharing" style="" data-hs-cos-general-type="widget" data-hs-cos-type="module">






<div class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_social_sharing" data-hs-cos-general-type="widget" data-hs-cos-type="social_sharing">
  
	
  
    
    
    
			
		

    <a href="https://twitter.com/intent/tweet?original_referer=https://www.cybereason.com/blog/research/banking-trojan-delivered-by-lolbins-ramnit-trojan&amp;utm_medium=social&amp;utm_source=twitter&amp;url=https://www.cybereason.com/blog/research/banking-trojan-delivered-by-lolbins-ramnit-trojan&amp;utm_medium=social&amp;utm_source=twitter&amp;source=tweetbutton&amp;text=" target="_blank" rel="noopener" style="width:16px;">
      <img src="https://www.cybereason.com/hubfs/dam/images/images-web/blog-images/template-images/twitter-gray.svg" class="hs-image-widget hs-image-social-sharing-24" style="height:16px;width:16px;" width="16" hspace="0" alt="Share on twitter">
    </a>
	

  
	
  
    
    
    
			
		

    <a href="http://www.facebook.com/share.php?u=https://www.cybereason.com/blog/research/banking-trojan-delivered-by-lolbins-ramnit-trojan&amp;utm_medium=social&amp;utm_source=facebook" target="_blank" rel="noopener" style="width:16px;">
      <img src="https://www.cybereason.com/hubfs/dam/images/images-web/blog-images/template-images/facebook-gray.svg" class="hs-image-widget hs-image-social-sharing-24" style="height:16px;width:16px;" width="16" hspace="0" alt="Share on facebook">
    </a>
	

  
	
  
    
    
    
			
		

    <a href="http://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.cybereason.com/blog/research/banking-trojan-delivered-by-lolbins-ramnit-trojan&amp;utm_medium=social&amp;utm_source=linkedin" target="_blank" rel="noopener" style="width:16px;">
      <img src="https://www.cybereason.com/hubfs/dam/images/images-web/blog-images/template-images/linkedin-gray.svg" class="hs-image-widget hs-image-social-sharing-24" style="height:16px;width:16px;" width="16" hspace="0" alt="Share on linkedin">
    </a>
	

</div></div>
          </div> 
          
          
          <!-- CONDITIONAL Author Box Display -->
            <div class="container columns cr-mln__author-listing-single">
              
                <div class="column headshot is-3-full-hd is-3-desktop is-3-tablet is-12-mobile">
                  <img class="cr-speaker-headshot" src="https://www.cybereason.com/hubfs/CR_Owl_Web_Mono@3x%202.png" alt="Cybereason Nocturnus">
                </div>
              
              <div class="column is-9-full-hd is-9-desktop is-12-mobile">
                <span class="descriptor">About the Author</span>
                <h4>Cybereason Nocturnus</h4>
                
                  <a class="social" href="https://www.linkedin.com/company/cybereason" target="_blank">
                    <img src="https://www.cybereason.com/hubfs/dam/images/images-web/blog-images/template-images/icon-social-gray-linkedin.png">
                  </a>
                
                
                  <a class="social" href="https://twitter.com/cr_nocturnus" target="_blank">
                    <img src="https://www.cybereason.com/hubfs/dam/images/images-web/blog-images/template-images/icon-social-gray-twitter.svg">
                  </a>
                
                
                  <p>The Cybereason Nocturnus Team has brought the world’s brightest minds from the military, government intelligence, and enterprise security to uncover emerging threats across the globe. They specialize in analyzing new attack methodologies, reverse-engineering malware, and exposing unknown system vulnerabilities. The Cybereason Nocturnus Team was the first to release a vaccination for the 2017 NotPetya and Bad Rabbit cyberattacks.</p>
                
                
                  <a class="cr-button cr-button__min" href="https://www.cybereason.com/blog/authors/cybereason-nocturnus">All Posts by Cybereason Nocturnus</a>
                
              </div>            
            </div>
          
        <!-- CONDITIONAL Post Type Choices -->
        
        <!-- Malicious Life Post -->
        
        
        <!-- CISO Stories -->
        
        <!-- Webinar -->
        
          
        <!-- CONDITIONAL Transcript -->
          
        
         <!-- Related Posts -->
        <div id="hs_cos_wrapper_module_1649342860525315" class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module" style="" data-hs-cos-general-type="widget" data-hs-cos-type="module">
<section class="cr-section related-posts__wrapper">
  <div class="container container-is-blog page-center">
     <h3>Related Posts</h3>
     <div class="columns is-multiline">
       
  
 <div class="column is-6-fullhd is-6-desktop is-full-mobile blog-listing__single-post">
  <div class="text-content-bundle">
    <a href="https://www.cybereason.com/blog/research/powerless-trojan-iranian-apt-phosphorus-adds-new-powershell-backdoor-for-espionage"><img src="https://www.cybereason.com/hubfs/powerless.png" alt="PowerLess Trojan: Iranian APT Phosphorus Adds New PowerShell Backdoor for Espionage"></a>
    <h4><a href="https://www.cybereason.com/blog/research/powerless-trojan-iranian-apt-phosphorus-adds-new-powershell-backdoor-for-espionage"><span class="underline">PowerLess Trojan: Iranian APT Phosphorus Adds New PowerShell Backdoor for Espionage</span></a></h4>
     <p>Cybereason discovered a new toolset developed by Iranian APT Phosphorus which revealed a connection to Memento ransomware and includes the newly discovered PowerLess Backdoor that evades detection by running PowerShell in a .NET context...</p>
   </div>
 </div>


  
 <div class="column is-6-fullhd is-6-desktop is-full-mobile blog-listing__single-post">
  <div class="text-content-bundle">
    <a href="https://www.cybereason.com/blog/research/strifewater-rat-iranian-apt-moses-staff-adds-new-trojan-to-ransomware-operations"><img src="https://www.cybereason.com/hubfs/strifewater.png" alt="StrifeWater RAT: Iranian APT Moses Staff Adds New Trojan to Ransomware Operations"></a>
    <h4><a href="https://www.cybereason.com/blog/research/strifewater-rat-iranian-apt-moses-staff-adds-new-trojan-to-ransomware-operations"><span class="underline">StrifeWater RAT: Iranian APT Moses Staff Adds New Trojan to Ransomware Operations</span></a></h4>
     <p>Cybereason discovered an undocumented RAT dubbed StrifeWater attributed to Iranian APT Moses Staff who deploy destructive ransomware following network infiltration and the exfiltration of sensitive data...</p>
   </div>
 </div>



    </div>
  </div>
</section></div>
          
          
      </div>
        
        <!-- Sidebar -->

      <div class="column is-3-fullhd is-3-desktop is-12-mobile cr-malicious-life-network__sidebar">
        <div class="cr-ml-sidebar--group">
        <div class="top-stripe"></div>
        <div class="sidebar-block search-section">
          <form action="/hs-search-results">
            <input type="search" class="hs-search-field__input" name="term" autocomplete="on" placeholder="Search">
            <input type="hidden" name="type" value="BLOG_POST">
            <input type="hidden" name="type" value="LISTING_PAGE">
            <button type="submit" class="arrow"></button>
          </form>
        </div>
        <div class="sidebar-block subscribe">
          <a href="#blog-subscribe">
            <h4>Subscribe</h4>
            <span>Never miss a blog.</span>
          </a>
        </div>

        <div class="sidebar-block recent-posts">
          <h4>Recent Posts</h4>
          
            
                <div class="recent-posts__single-post">
                    <div class="text-content-bundle">
                        <a href="https://www.cybereason.com/blog/oracle-ebs-extortion-cl0p" class="post-name"><span class="underline">Addressing CL0P Extortion Campaign Targeting Oracle EBS CVE-2025-61882</span></a>
                       
                    </div>
                </div>
            
                <div class="recent-posts__single-post">
                    <div class="text-content-bundle">
                        <a href="https://www.cybereason.com/blog/11-essential-controls" class="post-name"><span class="underline">7000+ IRs Later: The 11 Essential Cybersecurity Controls</span></a>
                       
                    </div>
                </div>
            
                <div class="recent-posts__single-post">
                    <div class="text-content-bundle">
                        <a href="https://www.cybereason.com/blog/chrome-extension-campaign-madgicx" class="post-name"><span class="underline">Behind the Mask of Madgicx Plus: A Chrome Extension Campaign Targeting Meta Advertisers</span></a>
                       
                    </div>
                </div>
            
        </div>

        <div class="sidebar-block category-listing">
          <h4>Categories</h4>
          <ul>
            <li><a href="https://www.cybereason.com/blog/category/research">Research</a></li>
            <li><a href="https://www.cybereason.com/blog/category/podcasts">Podcasts</a></li>
            <li><a href="https://www.cybereason.com/blog/category/webinars">Webinars</a></li>
            <li><a href="https://www.cybereason.com/blog/category/resources">Resources</a></li>
            <li><a href="https://www.cybereason.com/blog/category/videos">Videos</a></li>
            <li><a href="https://www.cybereason.com/blog/category/news">News</a></li>
          </ul>

          <a class="rec-category__single--view-all" href="/blog/category/research">All Posts</a>
        </div>

        
      </div><!-- END .rec-categories__all -->
      
      
      
    </div>
       
    </div>
  </div>
</div></div>

</div><!--end row-->
</div><!--end row-wrapper -->

<div class="row-fluid-wrapper row-depth-1 row-number-2 ">
<div class="row-fluid ">
<div class="span12 widget-span widget-type-custom_widget " style="display: none;" data-widget-type="custom_widget" data-x="0" data-w="12">
<div id="hs_cos_wrapper_module_1616011887658867" class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module" style="" data-hs-cos-general-type="widget" data-hs-cos-type="module">
<section class="cr-section related-posts__wrapper">
  <div class="container container-is-blog page-center">
     <h3>Related Posts</h3>
     <div class="columns is-multiline">
       
  
 <div class="column is-6-fullhd is-6-desktop is-full-mobile blog-listing__single-post">
  <div class="text-content-bundle">
    <a href="https://www.cybereason.com/blog/research/powerless-trojan-iranian-apt-phosphorus-adds-new-powershell-backdoor-for-espionage"><img src="https://www.cybereason.com/hubfs/powerless.png" alt="PowerLess Trojan: Iranian APT Phosphorus Adds New PowerShell Backdoor for Espionage"></a>
    <h4><a href="https://www.cybereason.com/blog/research/powerless-trojan-iranian-apt-phosphorus-adds-new-powershell-backdoor-for-espionage"><span class="underline">PowerLess Trojan: Iranian APT Phosphorus Adds New PowerShell Backdoor for Espionage</span></a></h4>
     <p>Cybereason discovered a new toolset developed by Iranian APT Phosphorus which revealed a connection to Memento ransomware and includes the newly discovered PowerLess Backdoor that evades detection by running PowerShell in a .NET context...</p>
   </div>
 </div>


  
 <div class="column is-6-fullhd is-6-desktop is-full-mobile blog-listing__single-post">
  <div class="text-content-bundle">
    <a href="https://www.cybereason.com/blog/research/strifewater-rat-iranian-apt-moses-staff-adds-new-trojan-to-ransomware-operations"><img src="https://www.cybereason.com/hubfs/strifewater.png" alt="StrifeWater RAT: Iranian APT Moses Staff Adds New Trojan to Ransomware Operations"></a>
    <h4><a href="https://www.cybereason.com/blog/research/strifewater-rat-iranian-apt-moses-staff-adds-new-trojan-to-ransomware-operations"><span class="underline">StrifeWater RAT: Iranian APT Moses Staff Adds New Trojan to Ransomware Operations</span></a></h4>
     <p>Cybereason discovered an undocumented RAT dubbed StrifeWater attributed to Iranian APT Moses Staff who deploy destructive ransomware following network infiltration and the exfiltration of sensitive data...</p>
   </div>
 </div>



    </div>
  </div>
</section></div>

</div><!--end widget-span -->
</div><!--end row-->
</div><!--end row-wrapper -->

<div class="row-fluid-wrapper row-depth-1 row-number-3 ">
<div class="row-fluid ">
<div class="span12 widget-span widget-type-custom_widget " style="" data-widget-type="custom_widget" data-x="0" data-w="12">
<div id="hs_cos_wrapper_module_161767462015235" class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module widget-type-blog_subscribe" style="" data-hs-cos-general-type="widget" data-hs-cos-type="module"><div class="cr-mln__blog-listing-page__subscribe-footer">
  <div class="container container-is-blog columns page-center">
    <div class="column is-8-fullhd is-8-desktop is-10-tablet is-12-mobile">
      <span class="tag">NEWSLETTER</span>
      <h3>Never miss a blog</h3>
      <p>Get the latest research, expert insights, and security industry news.</p>
      <a class="cr-button cr-mln__subscribe" href="#blog-subscribe">Subscribe</a>
    </div>
    <!--<div class="column is-5-fullhd is-5-desktop is-half-tablet is-12-mobile is-offset-1-fullhd is-offset-1-desktop">
      <div class="inputs-wrapper">
        
        
      </div>
    </div>-->
  </div>
</div></div>

</div><!--end widget-span -->
</div><!--end row-->
</div><!--end row-wrapper -->

<div class="row-fluid-wrapper row-depth-1 row-number-4 ">
<div class="row-fluid ">
<div class="span12 widget-span widget-type-custom_widget " style="" data-widget-type="custom_widget" data-x="0" data-w="12">
<div id="hs_cos_wrapper_module_166508001252918" class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module" style="" data-hs-cos-general-type="widget" data-hs-cos-type="module"><div class="cr-sticky-cta-bar bg-black" id="sticky-bar">
  <div class="content">
    <span>Want to see the Cybereason Defense Platform in action?</span>
    <a class="cr-button cr-button__fill-yellow" href="https://www.cybereason.com/request-a-demo" target="_blank">Schedule a Demo</a>
  </div>
  <div class="close">X</div>
</div></div>

</div><!--end widget-span -->
</div><!--end row-->
</div><!--end row-wrapper -->

    </div><!--end body -->
</div><!--end body wrapper -->

<div class="footer-container-wrapper">
    <div class="footer-container container-fluid">

<div class="row-fluid-wrapper row-depth-1 row-number-1 ">
<div class="row-fluid ">
<div class="span12 widget-span widget-type-custom_widget " style="" data-widget-type="custom_widget" data-x="0" data-w="12">
<div id="hs_cos_wrapper_module_16036762394194314" class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module" style="" data-hs-cos-general-type="widget" data-hs-cos-type="module"><!-- FOOTER -->

<footer class="cr-section cr-footer cr-footer__full">
    <div class="container page-center">
      <div class="columns">
          <div class="column is-6-fullhd is-5-desktop cr-footer__col cr-footer__left">
            <div class="cr-footer__Left-logo">
              
                <a href="https://www.cybereason.com">
                  
                <img src="https://www.cybereason.com/hubfs/dam/images/images-web/logos/cr-brand/cr-logo-inline--primary-white.png">
              </a>
            </div>
          </div>
          <div class="columns column is-6-fullhd is-6-desktop cr-footer__col cr-footer__right">
            <div class="cr-footer__links-list column">
              <h4>About</h4>
              <ul>
                <li><a href="https://www.cybereason.com/company/who-we-are">Who We Are</a>
                </li><li><a href="https://www.cybereason.com/company/careers">Careers</a>
          <!-- </li><li><a href="https://www.cybereason.com/company/leadership">Leadership</a> --->
                </li><li><a href="https://www.cybereason.com/company/contact-us">Contact</a>
              </li></ul>
            </div>
            <div class="cr-footer__links-list column">
              <h4>Resources</h4>
              <ul>
                <li><a href="https://www.cybereason.com/blog">Blog</a></li>
                <li><a href="https://www.cybereason.com/resources/tag/case-study">Case Studies</a></li>
                <li><a href="https://www.cybereason.com/resources/tag/webinars">Webinars</a></li>
                <li><a href="https://www.cybereason.com/resources/tag/white-papers">White Papers</a></li>
             </ul>
            </div>
            <div class="cr-footer__links-list column">
              <h4>Platform</h4>
              <ul>
                
                <li><a href="https://www.cybereason.com/platform">Overview</a></li>
                <li><a href="https://www.cybereason.com/platform/endpoint-prevention">Endpoint Protection</a></li>
                <li><a href="https://www.cybereason.com/platform/endpoint-detection-response-edr">EDR</a></li>
                <li><a href="https://www.cybereason.com/platform/managed-detection-response-mdr">MDR</a></li>
              </ul>
            </div>
          </div>
      </div>
    </div>
  
    <div class="container page-center">
      <div class="columns cr-footer__bottom-bar">
        <div class="column">
          <p>©Cybereason 2025. All Rights Reserved.</p>
        </div>
        <div class="column bottom-bar__links">
          <ul>
            <li><a href="https://www.cybereason.com/terms-of-use">Terms of Use</a></li>
            <li><a href="https://www.cybereason.com/privacy-notice">Privacy Notice</a></li>
            <li><a href="https://www.cybereason.com/ccpa-privacy-request">Do Not Sell</a></li>
            <li><a href="https://www.cybereason.com/security">Security</a></li>
            <!--<li><a href="#">Cookie Policy</a></li>-->
          </ul>
        </div>

        <div class="column bottom-bar__social">
          <ul>
            <li><a class="facebook" href="https://www.facebook.com/Cybereason/"></a></li>
            <li><a class="twitter" href="https://twitter.com/cybereason"></a></li>
            <li><a class="youtube" href="https://www.youtube.com/channel/UCOm7AaB0HiNH4Phe66sK0Ew"></a></li>
            <li><a class="linkedin" href="https://www.linkedin.com/company/cybereason"></a></li>
            <li><a class="instagram" href="https://www.instagram.com/cybereason"></a></li>
          </ul>
        </div>
    </div>
  </div>

</footer></div>

</div><!--end widget-span -->
</div><!--end row-->
</div><!--end row-wrapper -->

    </div><!--end footer -->
</div><!--end footer wrapper -->

    
<!-- HubSpot performance collection script -->
<script defer src="/hs/hsstatic/content-cwv-embed/static-1.1293/embed.js"></script>
<script src="https://www.cybereason.com/hubfs/hub_generated/template_assets/1/42507089303/1741528346196/template_animatedModal.min.js"></script>
<script>
var hsVars = hsVars || {}; hsVars['language'] = 'en';
</script>

<script src="/hs/hsstatic/cos-i18n/static-1.53/bundles/project.js"></script>
<script src="https://www.cybereason.com/hubfs/hub_generated/module_assets/1/41681847227/1741488491170/module_CR_-_Malicious_Life_Network_--_Tier_One_Header.min.js"></script>
<script src="https://www.cybereason.com/hubfs/hub_generated/module_assets/1/41682410610/1741488492472/module_CR_-_Malicious_Life_Network_--_Main_Hero.min.js"></script>
<script src="https://www.cybereason.com/hubfs/hub_generated/module_assets/1/43300360745/1741488505140/module_CR_-_Malicious_Life_Network_--_Related_Posts.min.js"></script>
<script src="https://www.cybereason.com/hubfs/hub_generated/module_assets/1/86933076631/1741488758324/module_CR_-_Sticky_CTA_Bar.min.js"></script>

<!-- Start of HubSpot Analytics Code -->
<script type="text/javascript">
var _hsq = _hsq || [];
_hsq.push(["setContentType", "blog-post"]);
_hsq.push(["setCanonicalUrl", "https:\/\/www.cybereason.com\/blog\/research\/banking-trojan-delivered-by-lolbins-ramnit-trojan"]);
_hsq.push(["setPageId", "6922400896"]);
_hsq.push(["setContentMetadata", {
    "contentPageId": 6922400896,
    "legacyPageId": "6922400896",
    "contentFolderId": null,
    "contentGroupId": 5272851739,
    "abTestId": null,
    "languageVariantId": 6922400896,
    "languageCode": "en",
    
    
}]);
</script>

<script type="text/javascript" id="hs-script-loader" async defer src="/hs/scriptloader/3354902.js"></script>
<!-- End of HubSpot Analytics Code -->


<script type="text/javascript">
var hsVars = {
    render_id: "83c39e8f-810b-4f5c-be55-3090537ab7c9",
    ticks: 1760198217452,
    page_id: 6922400896,
    
    content_group_id: 5272851739,
    portal_id: 3354902,
    app_hs_base_url: "https://app.hubspot.com",
    cp_hs_base_url: "https://cp.hubspot.com",
    language: "en",
    analytics_page_type: "blog-post",
    scp_content_type: "",
    
    analytics_page_id: "6922400896",
    category_id: 3,
    folder_id: 0,
    is_hubspot_user: false
}
</script>


<script defer src="/hs/hsstatic/HubspotToolsMenu/static-1.432/js/index.js"></script>

<script>if ($('[id^="hs_form"]').length > 0) {
  var myInterval = setInterval(
  function() {
    var myFields = document.getElementsByClassName('hs-input');
    if (myFields.length > 0) {
      clearInterval(myInterval);
      for (var i = 0; i < myFields.length; i++) {
        var myField = myFields[i];
		var myTagName = myField.tagName.toLowerCase();
        if (myTagName == 'input' || myTagName == 'textarea') {
          if (myField.placeholder != null) {
            myField.placeholder = myField.placeholder.replace('*', '');
          }
        } else if (myTagName == 'select') {
          myField.options[0].innerHTML = myField.options[0].innerHTML.replace('*', '');
        }
      }
    }
  }, 100);
}
</script>

<div id="fb-root"></div>
  <script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_GB/sdk.js#xfbml=1&version=v3.0";
  fjs.parentNode.insertBefore(js, fjs);
 }(document, 'script', 'facebook-jssdk'));</script> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
 


    <script>
function sticky_relocate() {
  var window_top = $(window).scrollTop();
  var div_top = $('#sticky-anchor').offset().top;
  if (window_top > div_top) {
    $('#sticky').addClass('stick');
  } else {
    $('#sticky').removeClass('stick');
  }
}

$(function() {
  $(window).scroll(sticky_relocate);
  sticky_relocate();
});
</script>
    <!-- Generated by the HubSpot Template Builder - template version 1.03 -->

<script type="text/javascript" src="/_Incapsula_Resource?SWJIYLWA=719d34d31c8e3a6e6fffd425f7e032f3&ns=2&cb=1057615927" async></script></body></html>