<!doctype html><!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en" > <![endif]--><!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8" lang="en" >        <![endif]--><!--[if IE 8]>    <html class="no-js lt-ie9" lang="en" >               <![endif]--><!--[if gt IE 8]><!--><html class="no-js" lang="en"><!--<![endif]--><head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="author" content="Cybereason Nocturnus">
    <meta name="description" content="This research zeroes in on the Winnti malware arsenal and includes analysis of the observed malware and the complex Winnti infection chain, including evasive maneuvers and stealth techniques that are baked-in to the malware code...">
    <meta name="generator" content="HubSpot">
    <title>Operation CuckooBees: A Winnti Malware Arsenal Deep-Dive</title>
    <link rel="shortcut icon" href="https://www.cybereason.com/hubfs/cr-favicon-1.png">
    
<meta name="viewport" content="width=device-width, initial-scale=1">

    
    <meta property="og:description" content="This research zeroes in on the Winnti malware arsenal and includes analysis of the observed malware and the complex Winnti infection chain, including evasive maneuvers and stealth techniques that are baked-in to the malware code...">
    <meta property="og:title" content="Operation CuckooBees: A Winnti Malware Arsenal Deep-Dive">
    <meta name="twitter:description" content="This research zeroes in on the Winnti malware arsenal and includes analysis of the observed malware and the complex Winnti infection chain, including evasive maneuvers and stealth techniques that are baked-in to the malware code...">
    <meta name="twitter:title" content="Operation CuckooBees: A Winnti Malware Arsenal Deep-Dive">

    

    
    <style>
a.cta_button{-moz-box-sizing:content-box !important;-webkit-box-sizing:content-box !important;box-sizing:content-box !important;vertical-align:middle}.hs-breadcrumb-menu{list-style-type:none;margin:0px 0px 0px 0px;padding:0px 0px 0px 0px}.hs-breadcrumb-menu-item{float:left;padding:10px 0px 10px 10px}.hs-breadcrumb-menu-divider:before{content:'›';padding-left:10px}.hs-featured-image-link{border:0}.hs-featured-image{float:right;margin:0 0 20px 20px;max-width:50%}@media (max-width: 568px){.hs-featured-image{float:none;margin:0;width:100%;max-width:100%}}.hs-screen-reader-text{clip:rect(1px, 1px, 1px, 1px);height:1px;overflow:hidden;position:absolute !important;width:1px}
</style>

<link rel="stylesheet" href="https://www.cybereason.com/hs-fs/hubfs/hub_generated/module_assets/1/41681847227/1741488491170/module_CR_-_Malicious_Life_Network_--_Tier_One_Header.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hs-fs/hubfs/hub_generated/module_assets/1/41682410610/1741488492472/module_CR_-_Malicious_Life_Network_--_Main_Hero.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hs-fs/hubfs/hub_generated/module_assets/1/48386556055/1741488537305/module_CR_-_HTML_PopUp_Window_--_IOCs.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hs-fs/hubfs/hub_generated/module_assets/1/43300360745/1741488505140/module_CR_-_Malicious_Life_Network_--_Related_Posts.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hs-fs/hubfs/hub_generated/module_assets/1/86933076631/1741488758324/module_CR_-_Sticky_CTA_Bar.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hs-fs/hubfs/hub_generated/module_assets/1/34473990280/1740999337265/module_CR_-_Footer_Full__en_US.min.css">
    

    
<!--  Added by GoogleTagManager integration -->
<script>
var _hsp = window._hsp = window._hsp || [];
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}

var useGoogleConsentModeV2 = true;
var waitForUpdateMillis = 1000;



var hsLoadGtm = function loadGtm() {
    if(window._hsGtmLoadOnce) {
      return;
    }

    if (useGoogleConsentModeV2) {

      gtag('set','developer_id.dZTQ1Zm',true);

      gtag('consent', 'default', {
      'ad_storage': 'denied',
      'analytics_storage': 'denied',
      'ad_user_data': 'denied',
      'ad_personalization': 'denied',
      'wait_for_update': waitForUpdateMillis
      });

      _hsp.push(['useGoogleConsentModeV2'])
    }

    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-TJVVB7C');

    window._hsGtmLoadOnce = true;
};

_hsp.push(['addPrivacyConsentListener', function(consent){
  if(consent.allowed || (consent.categories && consent.categories.analytics)){
    hsLoadGtm();
  }
}]);

</script>

<!-- /Added by GoogleTagManager integration -->


<script src="https://use.typekit.net/vyv2ljd.js"></script>
<script>try{Typekit.load({ async: false });}catch(e){}</script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<link rel="preload" href="/hubfs/__dam/fonts/ionicons.eot" as="font" type="font/otf" crossorigin>
<link rel="preload" href="/hubfs/dam/fonts/criteria/Criteria-CF-Regular.woff2" as="font" type="font/woff2" crossorigin>
<link rel="preload" href="/hubfs/dam/fonts/criteria/Criteria-CF-Medium.woff2" as="font" type="font/woff2" crossorigin>
<link rel="preload" href="/hubfs/dam/fonts/peristyle/Peristyle-Black.woff2" as="font" type="font/woff2" crossorigin>
<link rel="amphtml" href="https://www.cybereason.com/blog/operation-cuckoobees-a-winnti-malware-arsenal-deep-dive?hs_amp=true">

<meta property="og:image" content="https://www.cybereason.com/hubfs/blog-post-text%20%2888%29.png">
<meta property="og:image:width" content="1200">
<meta property="og:image:height" content="628">

<meta name="twitter:image" content="https://www.cybereason.com/hubfs/blog-post-text%20%2888%29.png">


<meta property="og:url" content="https://www.cybereason.com/blog/operation-cuckoobees-a-winnti-malware-arsenal-deep-dive">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:creator" content="@cr_nocturnus">

<link rel="canonical" href="https://www.cybereason.com/blog/operation-cuckoobees-a-winnti-malware-arsenal-deep-dive">

<meta property="og:type" content="article">
<link rel="alternate" type="application/rss+xml" href="https://www.cybereason.com/blog/rss.xml">
<meta name="twitter:domain" content="www.cybereason.com">
<script src="//platform.linkedin.com/in.js" type="text/javascript">
    lang: en_US
</script>

<meta http-equiv="content-language" content="en">
<link rel="stylesheet" href="//7052064.fs1.hubspotusercontent-na1.net/hubfs/7052064/hub_generated/template_assets/DEFAULT_ASSET/1747334415152/template_layout.min.css">


<link rel="stylesheet" href="https://www.cybereason.com/hs-fs/hubfs/hub_generated/template_assets/1/34470223313/1741528336747/template_cr-master__cta.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hs-fs/hubfs/hub_generated/template_assets/1/34470477360/1743626992502/template_cr-master__main.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hs-fs/hubfs/hub_generated/template_assets/1/35275979682/1741528339661/template_ionicons.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hs-fs/hubfs/hub_generated/template_assets/1/42760289143/1741528346957/template_cr-mln__build.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hs-fs/hubfs/hub_generated/template_assets/1/34470224480/1741528337131/template_cr-framework__bulma-columns.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hs-fs/hubfs/hub_generated/template_assets/1/35291999472/1741528340159/template_cr-framework__bulma.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hs-fs/hubfs/hub_generated/template_assets/1/42363645447/1741528345735/template_hamburger-animation.min.css">
<link rel="stylesheet" href="https://www.cybereason.com/hs-fs/hubfs/hub_generated/template_assets/1/42507091846/1741528346726/template_animate.min.css">


    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&amp;display=swap" rel="stylesheet">
<script src="/hubfs/dam/plugins/marker-animation.js"></script>
<script>
$(document).ready(function() {
  $('.highlight').markerAnimation({
    "color":'var(--cr-yellow)',
    "font_weight":'normal',
    "background-size": '200% 1.2em'
  });
});
</script>

    <style>
.cr-mln__blog-post .container-is-blog.cr-mln__blog-post--body .column.is-7-fullhd.is-7-desktop img {
    background: #FFFFFF;
    border: 1px solid #CCCCCC;
    border-radius: 5px 5px 5px 5px;
    padding: 10px;
} 
</style>

</head>
<body class="   hs-content-id-71992970063 hs-blog-post hs-blog-id-5272851739" style="">
<!--  Added by GoogleTagManager integration -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-TJVVB7C" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>

<!-- /Added by GoogleTagManager integration -->

    <div class="header-container-wrapper">
    <div class="header-container container-fluid">

<div class="row-fluid-wrapper row-depth-1 row-number-1 ">
<div class="row-fluid ">
<div class="span12 widget-span widget-type-custom_widget " style="" data-widget-type="custom_widget" data-x="0" data-w="12">
<div id="hs_cos_wrapper_module_1615433790649568" class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module" style="" data-hs-cos-general-type="widget" data-hs-cos-type="module"><section id="cr-malicious-life-network__tier-one-header" class="position-flex">
  <div class="#">
    <div id="logo"><a href="https://www.cybereason.com"><img src="https://www.cybereason.com/hubfs/dam/images/images-web/logos/cr-brand/cr-logo-inline--primary-black.png"></a></div>
    <div id="back-to">
      <a href="https://www.cybereason.com">Back to <span>Cybereason.com</span></a>
    </div>
    <!-- Hamburger Menu -->
    <button class="hamburger hamburger--collapse" type="button">
      <span class="hamburger-box">
        <span class="hamburger-inner"></span>
      </span>
    </button>
    <div class="cr-mln__hamburger-menu--overlay">
      <ul>
        <li><a href="https://www.cybereason.com/blog/all"><span class="underline">All Posts</span></a></li>
        <li><a href="/blog/category/research"><span class="underline">Research</span></a></li>
        <li><a href="/blog/category/podcasts"><span class="underline">Podcasts</span></a></li>
        <li><a href="/blog/category/webinars"><span class="underline">Webinars</span></a></li>
        <li><a href="/blog/category/resources"><span class="underline">Resources</span></a></li>
        <li><a href="/blog/category/videos"><span class="underline">Videos</span></a></li>
        <li><a href="/blog/category/news"><span class="underline">News</span></a></li>
      </ul>
      <div class="subscribe">
        <a href="#blog-subscribe">Subscribe</a>
      </div>
    </div>
    <!-- -->
  </div>
</section></div>

</div><!--end widget-span -->
</div><!--end row-->
</div><!--end row-wrapper -->

<div class="row-fluid-wrapper row-depth-1 row-number-2 ">
<div class="row-fluid ">
<div class="span12 widget-span widget-type-custom_widget mln-homepage" style="" data-widget-type="custom_widget" data-x="0" data-w="12">
<div id="hs_cos_wrapper_module_1615433785464566" class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module" style="" data-hs-cos-general-type="widget" data-hs-cos-type="module"><section class="cr-malicious-life-network__hero-main base">
  <div class="container-is-blog columns hero-content page-center">
    <div class="column is-5-fullhd is-5-desktop is-12-touch">
      <a href="/blog"><img class="cr-mln-logo" src="https://www.cybereason.com/hubfs/dam/images/images-web/logos/cr-brand/cr-malicious-life-logo-v2.png"></a>
    </div>
    <div class="column is-7-fullhd is-7-desktop is-hidden-mobile is-hidden-tablet-only">
      <div class="cr-mln__search-subscribe">
        <div class="cr-mln__search">
          <a href="#cr-search-modal" class="search-btn"><img src="https://www.cybereason.com/hubfs/dam/images/images-web/blog-images/template-images/cr-blog-icon--search-dark-gray.png" alt="Search"></a>
        </div>
        <div class="cr-mln__subscribe">
          <a class="btn-subscribe" href="#blog-subscribe">Subscribe</a>
        </div>
      </div>
      <div class="cr-mln__category-nav">
        <ul>
          <li><a href="/blog/category/all"><span class="underline">All</span></a></li>
          <li><a href="/blog/category/research"><span class="underline">Research</span></a></li>
          <li><a href="/blog/category/podcasts"><span class="underline">Podcasts</span></a></li>
          <li><a href="/blog/category/webinars"><span class="underline">Webinars</span></a></li>
          <li><a href="/blog/category/resources"><span class="underline">Resources</span></a></li>
          <li><a href="/blog/category/videos"><span class="underline">Videos</span></a></li>
          <li><a href="/blog/category/news"><span class="underline">News</span></a></li>
        </ul>
      </div>
    </div>
  </div>
      <!-- MOBILE Search and Subscribe -->
      <div class="container-is-blog columns is-gapless is-hidden-desktop cr-mln__search-subscribe--mobile">
        <div class="column">
          <a class="search-btn">Search</a>
        </div>
        <div class="column">
          <a class="#" href="#blog-subscribe">Subscribe</a>
        </div>
      </div>

      <!-- END MOBILE Search and Subscribe -->
  
  <!-- SEARCH Modal Wrap -->

  <div id="cr-search-modal">
        <!--THIS IS IMPORTANT! to close the modal, the class name has to match the name given on the ID -->
        <div id="btn-close-modal" class="close-cr-search-modal"> 
            X
        </div>

        <div class="modal-content">
            <div class="container columns">
              <div class="column">
                <div class="cr-search-modal__search-bar">
                  <h3>Search</h3>
                  <form action="/hs-search-results">
                    <input type="search" class="hs-search-field__input" name="term" autocomplete="on" placeholder="Search...">
                    <input type="hidden" name="type" value="BLOG_POST">
                    <input type="hidden" name="type" value="LISTING_PAGE">
                    <button type="submit" class="arrow"></button>
                  </form>
                  
                </div>

              </div>
          </div>
        </div>
    </div>
  <!-- END Search Modal Wrap -->

</section></div>

</div><!--end widget-span -->
</div><!--end row-->
</div><!--end row-wrapper -->

    </div><!--end header -->
</div><!--end header wrapper -->

<div class="body-container-wrapper">
    <div class="body-container container-fluid">

<div class="row-fluid-wrapper row-depth-1 row-number-1 ">
<div class="row-fluid ">
<div class="span12 widget-span widget-type-blog_content " style="" data-widget-type="blog_content" data-x="0" data-w="12">







<div class="cr-mln__blog-post">
  <div class="container-is-blog columns is-multiline page-center">

    <div class="column is-8-fullhd is-8-desktop is-offset-2-fullhd is-offset-2-desktop is-10-tablet is-offset-1-tablet">
      <div class="featured-image"><img src="https://www.cybereason.com/hubfs/blog-post-text%20%2888%29.png" alt=""></div>
      <h1><span id="hs_cos_wrapper_name" class="hs_cos_wrapper hs_cos_wrapper_meta_field hs_cos_wrapper_type_text" style="" data-hs-cos-general-type="meta_field" data-hs-cos-type="text">Operation CuckooBees: A Winnti Malware Arsenal Deep-Dive</span></h1>
      <div class="cr-mln__post-author-share">
      <div id="hubspot-author_data" class="hubspot-editable cr-mln__post-meta" data-hubspot-form-id="author_data" data-hubspot-name="Blog Author">
        
          <span class="descriptor">Written By</span>
          <p><span class="author">Cybereason Nocturnus</span></p>
         
      </div>
    </div>
     
    </div>
    
    <!-- Sticky Author and Social Box -->
    
    <!-- END Sticky Author and Social Box -->
      <div class="container-is-blog columns is-multiline page-center cr-mln__blog-post--body">
        
        <div class="column is-7-fullhd is-7-desktop is-10-tablet is-10-mobile is-offset-1-fullhd is-offset-1-desktop is-offset-1-tablet is-offset-1-mobile">
          <span id="hs_cos_wrapper_post_body" class="hs_cos_wrapper hs_cos_wrapper_meta_field hs_cos_wrapper_type_rich_text" style="" data-hs-cos-general-type="meta_field" data-hs-cos-type="rich_text"><p>In <a href="/blog/operation-cuckoobees-deep-dive-into-stealthy-winnti-techniques" rel="noopener" target="_blank"><span>part one of this research</span></a>, the <a href="/services/incident-response" rel="noopener" target="_blank"><span>Cybereason Nocturnus Incident Response Team</span></a> provided a unique glimpse into the Winnti intrusion playbook, covering the techniques that were used by the group from initial compromise to stealing the data, as observed and analyzed by the Cybereason Incident Response team.&nbsp;</p>
<!--more-->
<p>This part of the research zeroes in on the Winnti malware arsenal that was discovered during the investigation conducted by the Cybereason IR and Nocturnus teams. In addition, our analysis of the observed malware provides a deeper understanding of the elaborate and multi-layered Winnti infection chain, including evasive maneuvers and stealth techniques that are baked-in to the malware code, as well as the functionality of the various malware.&nbsp;</p>
<p>Perhaps one of the most interesting and striking aspects of this report is the level of sophistication introduced by the malware authors. The infection and deployment chain is long, complicated and interdependent–should one step go wrong, the entire chain collapses - making it somewhat vulnerable, yet at the same time provides an extra level of security and stealth for the operation.&nbsp;</p>
<p>These steps have proven themselves effective time and time again, as the operation remained under-the-radar for years. While there have been past reports describing some aspects of these intrusions, at the time of writing this report there was no publicly available research that discussed all of the tools and techniques and the manner in which they all fit together, as mentioned in this report.&nbsp;</p>
<h2 style="font-size: 30px;">Key Findings</h2>
<ul>
<li aria-level="1"><strong>Attribution to the Winnti APT Group: </strong>based on the analysis of the forensic artifacts, Cybereason estimates with medium-high confidence that the perpetrators of the attack are linked to the notorious <a href="https://attack.mitre.org/groups/G0044/" rel="noopener" target="_blank"><span>Winnti APT group</span></a>, a group that has existed since at least 2010 and is believed to be operating on behalf of Chinese state interests and specializes in cyberespionage and intellectual property theft.&nbsp;</li>
</ul>
<ul>
<li aria-level="1"><strong>Discovery of New Malware in the Winnti Arsenal: </strong>the report exposes previously undocumented malware strain called DEPLOYLOG used by the Winnti APT group and highlights new versions of known Winnti malware, including Spyder Loader, PRIVATELOG, and WINNKIT.&nbsp;</li>
<li aria-level="1"><strong>Rarely Seen Abuse of the Windows CLFS Feature: </strong>the attackers leveraged the Windows CLFS mechanism and NTFS transaction manipulations which provided them with the ability to conceal their payloads and evade detection by traditional security products.</li>
</ul>
<ul>
<li aria-level="1"><strong>Intricate and Interdependent Payload Delivery: </strong>the report includes an analysis of the complex infection chain that led to the deployment of the WINNKIT rootkit composed of multiple interdependent components. The attackers implemented a delicate “house of cards” approach, meaning that each component depends on the others to function properly, making it very difficult to analyze each component separately. The malware from the Winnti arsenal that are analyzed in this report include:&nbsp;</li>
</ul>
<ul>
<li style="list-style-type: none;">
<ul>
<li aria-level="1"><strong>Spyder:</strong> A sophisticated modular backdoor</li>
</ul>
</li>
</ul>
<ul>
<li style="list-style-type: none;">
<ul>
<li aria-level="1"><strong>STASHLOG:</strong> The initial deployment tool “stashing” payloads in Windows CLFS&nbsp;</li>
</ul>
</li>
</ul>
<ul>
<li style="list-style-type: none;">
<ul>
<li aria-level="1"><strong>SPARKLOG: </strong>Extracts and deploys PRIVATELOG to gain privilege escalation and achieve persistence</li>
</ul>
</li>
</ul>
<ul>
<li style="list-style-type: none;">
<ul>
<li aria-level="1"><strong>PRIVATELOG: </strong>Extracts and deploys DEPLOYLOG</li>
</ul>
</li>
</ul>
<ul>
<li style="list-style-type: none;">
<ul>
<li aria-level="1"><strong>DEPLOYLOG:</strong> Deploys the WINNKIT Rootkit and serves as a userland agent&nbsp;</li>
</ul>
</li>
</ul>
<ul>
<li style="list-style-type: none;">
<ul>
<li aria-level="1"><strong>WINNKIT:</strong> The Winnti Kernel-level Rootkit</li>
</ul>
</li>
</ul>
<p>The following graph describes the infection chain presented in this attack:</p>
<p style="text-align: center;"><img class="has-border" src="https://www.cybereason.com/hs-fs/hubfs/image20-Apr-26-2022-08-16-47-67-PM.png?width=1535&amp;name=image20-Apr-26-2022-08-16-47-67-PM.png" alt="image20-Apr-26-2022-08-16-47-67-PM" width="1535" loading="lazy" style="width: 1535px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image20-Apr-26-2022-08-16-47-67-PM.png?width=768&amp;name=image20-Apr-26-2022-08-16-47-67-PM.png 768w, https://www.cybereason.com/hs-fs/hubfs/image20-Apr-26-2022-08-16-47-67-PM.png?width=1535&amp;name=image20-Apr-26-2022-08-16-47-67-PM.png 1535w, https://www.cybereason.com/hs-fs/hubfs/image20-Apr-26-2022-08-16-47-67-PM.png?width=2303&amp;name=image20-Apr-26-2022-08-16-47-67-PM.png 2303w, https://www.cybereason.com/hs-fs/hubfs/image20-Apr-26-2022-08-16-47-67-PM.png?width=3070&amp;name=image20-Apr-26-2022-08-16-47-67-PM.png 3070w, https://www.cybereason.com/hs-fs/hubfs/image20-Apr-26-2022-08-16-47-67-PM.png?width=3838&amp;name=image20-Apr-26-2022-08-16-47-67-PM.png 3838w, https://www.cybereason.com/hs-fs/hubfs/image20-Apr-26-2022-08-16-47-67-PM.png?width=4605&amp;name=image20-Apr-26-2022-08-16-47-67-PM.png 4605w" sizes="(max-width: 1535px) 100vw, 1535px"><span style="font-size: 16px;"><em>Winnti infection chain as observed in Operation CuckooBees&nbsp;</em></span></p>
<h2 style="font-size: 30px;">Initial Payload: Weaving in the Spyder Loader</h2>
<p><img src="https://www.cybereason.com/hs-fs/hubfs/image10-Apr-26-2022-08-17-34-41-PM.png?width=634&amp;name=image10-Apr-26-2022-08-17-34-41-PM.png" alt="image10-Apr-26-2022-08-17-34-41-PM" width="634" loading="lazy" style="width: 634px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image10-Apr-26-2022-08-17-34-41-PM.png?width=317&amp;name=image10-Apr-26-2022-08-17-34-41-PM.png 317w, https://www.cybereason.com/hs-fs/hubfs/image10-Apr-26-2022-08-17-34-41-PM.png?width=634&amp;name=image10-Apr-26-2022-08-17-34-41-PM.png 634w, https://www.cybereason.com/hs-fs/hubfs/image10-Apr-26-2022-08-17-34-41-PM.png?width=951&amp;name=image10-Apr-26-2022-08-17-34-41-PM.png 951w, https://www.cybereason.com/hs-fs/hubfs/image10-Apr-26-2022-08-17-34-41-PM.png?width=1268&amp;name=image10-Apr-26-2022-08-17-34-41-PM.png 1268w, https://www.cybereason.com/hs-fs/hubfs/image10-Apr-26-2022-08-17-34-41-PM.png?width=1585&amp;name=image10-Apr-26-2022-08-17-34-41-PM.png 1585w, https://www.cybereason.com/hs-fs/hubfs/image10-Apr-26-2022-08-17-34-41-PM.png?width=1902&amp;name=image10-Apr-26-2022-08-17-34-41-PM.png 1902w" sizes="(max-width: 634px) 100vw, 634px"></p>
<p>The <a href="https://st.drweb.com/static/new-www/news/2021/march/BackDoor.Spyder.1_en.pdf"><span>Spyder loader</span></a> is the first malicious binary the attackers execute on a targeted machine. This malware is executed from the batch files we discussed in our blog’s part 1 - <em>cc.bat</em> or <em>bc.bat</em>:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image42-2.png?width=628&amp;name=image42-2.png" alt="image42-2" width="628" loading="lazy" style="width: 628px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image42-2.png?width=314&amp;name=image42-2.png 314w, https://www.cybereason.com/hs-fs/hubfs/image42-2.png?width=628&amp;name=image42-2.png 628w, https://www.cybereason.com/hs-fs/hubfs/image42-2.png?width=942&amp;name=image42-2.png 942w, https://www.cybereason.com/hs-fs/hubfs/image42-2.png?width=1256&amp;name=image42-2.png 1256w, https://www.cybereason.com/hs-fs/hubfs/image42-2.png?width=1570&amp;name=image42-2.png 1570w, https://www.cybereason.com/hs-fs/hubfs/image42-2.png?width=1884&amp;name=image42-2.png 1884w" sizes="(max-width: 628px) 100vw, 628px"><span style="font-size: 16px;"><em>Batch file execution command</em></span></p>
<p>The loader’s purpose is to decrypt and load additional payloads and is being delivered in 2 variations. The first variation, is a modified <em>SQLite3 </em>DLL, that uses the export’s ordinal number 138 to serve malicious code, that loads and executes a file argument provided at runtime, in our case <em>C:\Windows\System32\x64.tlb</em>:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image5-Apr-26-2022-08-19-42-68-PM.png?width=670&amp;name=image5-Apr-26-2022-08-19-42-68-PM.png" alt="image5-Apr-26-2022-08-19-42-68-PM" width="670" loading="lazy" style="width: 670px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image5-Apr-26-2022-08-19-42-68-PM.png?width=335&amp;name=image5-Apr-26-2022-08-19-42-68-PM.png 335w, https://www.cybereason.com/hs-fs/hubfs/image5-Apr-26-2022-08-19-42-68-PM.png?width=670&amp;name=image5-Apr-26-2022-08-19-42-68-PM.png 670w, https://www.cybereason.com/hs-fs/hubfs/image5-Apr-26-2022-08-19-42-68-PM.png?width=1005&amp;name=image5-Apr-26-2022-08-19-42-68-PM.png 1005w, https://www.cybereason.com/hs-fs/hubfs/image5-Apr-26-2022-08-19-42-68-PM.png?width=1340&amp;name=image5-Apr-26-2022-08-19-42-68-PM.png 1340w, https://www.cybereason.com/hs-fs/hubfs/image5-Apr-26-2022-08-19-42-68-PM.png?width=1675&amp;name=image5-Apr-26-2022-08-19-42-68-PM.png 1675w, https://www.cybereason.com/hs-fs/hubfs/image5-Apr-26-2022-08-19-42-68-PM.png?width=2010&amp;name=image5-Apr-26-2022-08-19-42-68-PM.png 2010w" sizes="(max-width: 670px) 100vw, 670px"><span style="font-size: 16px;"><em>Malicious export ordinal number 138 “sqlite3_profile_v2”</em></span></p>
<p>As seen above, the loader is executed via the famous <em>LOLBIN rundll32.exe</em>, in the following manner:</p>
<p style="text-align: center;"><em>rundll32.exe &lt;modified sqlite3.dll file&gt;,#138 C:\Windows\System32\x64.tlb</em></p>
<p>Interestingly, Cybereason found this loader in different names and in different locations across infected machines:</p>
<ul>
<li aria-level="1">C:\Windows\System32\iumatl.dll</li>
<li aria-level="1">C:\Windows\System32\msdupld.dll</li>
<li aria-level="1">C:\Windows\System32\mscuplt.dll</li>
<li aria-level="1">C:\Windows\System32\msdupld.dll</li>
<li aria-level="1">C:\Windows\System32\netapi.dll</li>
<li aria-level="1">C:\Windows\System32\rpcutl.dll</li>
<li aria-level="1">C:\Windows\System32\dot3utl.dll</li>
<li aria-level="1">C:\Windows\System32\nlsutl.dll</li>
<li aria-level="1">C:\Windows\Branding\Basebrd\language.dll</li>
<li aria-level="1">C:\Program Files\Internet Explorer\SIGNUP\install.dll</li>
</ul>
<p>The attackers utilized the System32 directory, which holds a multitude of <a href="https://docs.microsoft.com/en-us/windows/win32/midl/com-dcom-and-type-libraries" rel="noopener" target="_blank"><span>TLB</span></a> and DLL files, to hide their external “TLB” payload and DLL loader to make it harder to detect.</p>
<p>This DLL wasn’t the only Spyder Loader we found, as Cybereason discovered a second variation of this malware in the form of a standalone executable called <em>sqlite3.exe, </em>masquerading as a <em>SQLite3-</em>related executable as well.</p>
<p>This version featured some improvements, such as logging messages, which shed some light on some of its functionality and capabilities:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image12-Apr-26-2022-08-20-36-62-PM.png?width=663&amp;name=image12-Apr-26-2022-08-20-36-62-PM.png" alt="image12-Apr-26-2022-08-20-36-62-PM" width="663" loading="lazy" style="width: 663px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image12-Apr-26-2022-08-20-36-62-PM.png?width=332&amp;name=image12-Apr-26-2022-08-20-36-62-PM.png 332w, https://www.cybereason.com/hs-fs/hubfs/image12-Apr-26-2022-08-20-36-62-PM.png?width=663&amp;name=image12-Apr-26-2022-08-20-36-62-PM.png 663w, https://www.cybereason.com/hs-fs/hubfs/image12-Apr-26-2022-08-20-36-62-PM.png?width=995&amp;name=image12-Apr-26-2022-08-20-36-62-PM.png 995w, https://www.cybereason.com/hs-fs/hubfs/image12-Apr-26-2022-08-20-36-62-PM.png?width=1326&amp;name=image12-Apr-26-2022-08-20-36-62-PM.png 1326w, https://www.cybereason.com/hs-fs/hubfs/image12-Apr-26-2022-08-20-36-62-PM.png?width=1658&amp;name=image12-Apr-26-2022-08-20-36-62-PM.png 1658w, https://www.cybereason.com/hs-fs/hubfs/image12-Apr-26-2022-08-20-36-62-PM.png?width=1989&amp;name=image12-Apr-26-2022-08-20-36-62-PM.png 1989w" sizes="(max-width: 663px) 100vw, 663px"><span style="font-size: 16px;"><em>Malicious export ordinal number 138 “sqlite3_profile_v2”</em></span></p>
<h3 style="font-size: 24px; font-weight: normal;"><span style="color: #434343;">The Spyder Loader Bag of Tricks</span></h3>
<p>Throughout its execution, the Spider Loader implements a few interesting methods to evade detection and to maintain stealth:</p>
<h4 style="font-weight: normal; font-size: 20px;"><span style="color: #666666;">Anti Analysis/Sandboxing</span></h4>
<p>At the beginning of execution, the loader checks if the file argument exists:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image29-Apr-26-2022-08-21-52-25-PM.png?width=709&amp;name=image29-Apr-26-2022-08-21-52-25-PM.png" alt="image29-Apr-26-2022-08-21-52-25-PM" width="709" loading="lazy" style="width: 709px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image29-Apr-26-2022-08-21-52-25-PM.png?width=355&amp;name=image29-Apr-26-2022-08-21-52-25-PM.png 355w, https://www.cybereason.com/hs-fs/hubfs/image29-Apr-26-2022-08-21-52-25-PM.png?width=709&amp;name=image29-Apr-26-2022-08-21-52-25-PM.png 709w, https://www.cybereason.com/hs-fs/hubfs/image29-Apr-26-2022-08-21-52-25-PM.png?width=1064&amp;name=image29-Apr-26-2022-08-21-52-25-PM.png 1064w, https://www.cybereason.com/hs-fs/hubfs/image29-Apr-26-2022-08-21-52-25-PM.png?width=1418&amp;name=image29-Apr-26-2022-08-21-52-25-PM.png 1418w, https://www.cybereason.com/hs-fs/hubfs/image29-Apr-26-2022-08-21-52-25-PM.png?width=1773&amp;name=image29-Apr-26-2022-08-21-52-25-PM.png 1773w, https://www.cybereason.com/hs-fs/hubfs/image29-Apr-26-2022-08-21-52-25-PM.png?width=2127&amp;name=image29-Apr-26-2022-08-21-52-25-PM.png 2127w" sizes="(max-width: 709px) 100vw, 709px"><span style="font-size: 16px;"><em>File argument validation</em></span></p>
<p>If it does, the loader checks for its size: if it is larger than 1.04 MB, it deletes it; if it is smaller than 1.04 MB or equal to it, it decrypts it in memory using the open-source <a href="https://cryptopp.com/" rel="noopener" target="_blank"><span>CryptoPP</span></a> C++ library and then deletes it from disk.</p>
<p>Cybereason assesses this condition is intended to validate that the loader won’t try to decrypt the wrong file, and as a precaution against <a href="https://attack.mitre.org/techniques/T1523/" rel="noopener" target="_blank"><span>analysis environments</span></a> or <a href="https://attack.mitre.org/techniques/T1497/" rel="noopener" target="_blank"><span>Sandboxes</span></a>.</p>
<h4 style="font-weight: normal; font-size: 20px;"><span style="color: #666666;">EDR Bypass Tricks</span></h4>
<p>After decrypting the payload, the attackers copy the system ntdll.dll file to <em>C:\Windows\System32\TN{random_characters}.dll</em>, and load it to memory:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image25-Apr-26-2022-08-22-27-29-PM.png?width=689&amp;name=image25-Apr-26-2022-08-22-27-29-PM.png" alt="image25-Apr-26-2022-08-22-27-29-PM" width="689" loading="lazy" style="width: 689px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image25-Apr-26-2022-08-22-27-29-PM.png?width=345&amp;name=image25-Apr-26-2022-08-22-27-29-PM.png 345w, https://www.cybereason.com/hs-fs/hubfs/image25-Apr-26-2022-08-22-27-29-PM.png?width=689&amp;name=image25-Apr-26-2022-08-22-27-29-PM.png 689w, https://www.cybereason.com/hs-fs/hubfs/image25-Apr-26-2022-08-22-27-29-PM.png?width=1034&amp;name=image25-Apr-26-2022-08-22-27-29-PM.png 1034w, https://www.cybereason.com/hs-fs/hubfs/image25-Apr-26-2022-08-22-27-29-PM.png?width=1378&amp;name=image25-Apr-26-2022-08-22-27-29-PM.png 1378w, https://www.cybereason.com/hs-fs/hubfs/image25-Apr-26-2022-08-22-27-29-PM.png?width=1723&amp;name=image25-Apr-26-2022-08-22-27-29-PM.png 1723w, https://www.cybereason.com/hs-fs/hubfs/image25-Apr-26-2022-08-22-27-29-PM.png?width=2067&amp;name=image25-Apr-26-2022-08-22-27-29-PM.png 2067w" sizes="(max-width: 689px) 100vw, 689px"><span style="font-size: 16px;"><em>Copying ntdll.dll to C:\Windows\System32\TN{randoms_chars}.dll</em></span></p>
<p>Then, they acquire the <em>NtProtectVirtualMemory </em>address from the copied and loaded file and call a specific routine (which we named as “BypassEdrHook”) multiple times using 2 arguments:</p>
<ul>
<li aria-level="1">The acquired address of <em>NtProtectVirtualMemory</em> in the loaded, copied DLL.</li>
<li aria-level="1">A string representing a native api function:</li>
</ul>
<p>&nbsp;</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image35-Apr-26-2022-08-23-37-43-PM.png?width=819&amp;name=image35-Apr-26-2022-08-23-37-43-PM.png" alt="image35-Apr-26-2022-08-23-37-43-PM" width="819" loading="lazy" style="width: 819px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image35-Apr-26-2022-08-23-37-43-PM.png?width=410&amp;name=image35-Apr-26-2022-08-23-37-43-PM.png 410w, https://www.cybereason.com/hs-fs/hubfs/image35-Apr-26-2022-08-23-37-43-PM.png?width=819&amp;name=image35-Apr-26-2022-08-23-37-43-PM.png 819w, https://www.cybereason.com/hs-fs/hubfs/image35-Apr-26-2022-08-23-37-43-PM.png?width=1229&amp;name=image35-Apr-26-2022-08-23-37-43-PM.png 1229w, https://www.cybereason.com/hs-fs/hubfs/image35-Apr-26-2022-08-23-37-43-PM.png?width=1638&amp;name=image35-Apr-26-2022-08-23-37-43-PM.png 1638w, https://www.cybereason.com/hs-fs/hubfs/image35-Apr-26-2022-08-23-37-43-PM.png?width=2048&amp;name=image35-Apr-26-2022-08-23-37-43-PM.png 2048w, https://www.cybereason.com/hs-fs/hubfs/image35-Apr-26-2022-08-23-37-43-PM.png?width=2457&amp;name=image35-Apr-26-2022-08-23-37-43-PM.png 2457w" sizes="(max-width: 819px) 100vw, 819px"><span style="font-size: 16px;"><em>Calling for the BypassEdrHook routine</em></span></p>
<p>The <em>BypassEdrHook</em> function will compare the first bytes in memory of the native API functions in the loaded<em> ntdll.dll</em> image to the first bytes in memory of the same function in the loaded/copied DLL memory image.</p>
<p>If the <em>ntdll</em> function’s first bytes are different from the first bytes of the copied DLL in memory, the attackers will conclude that this native function is hooked by an EDR tool.</p>
<p>To override it, the attackers count the number of different bytes at the beginning of these two functions, then they change the permissions of the relevant patched bytes in the original <em>ntdll.dll</em> image to <em>READWRITE_EXECUTE</em>, copy the original bytes from the loaded/copied DLL memory, and restore the previous page protection settings:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image33-Apr-26-2022-08-24-55-80-PM.png?width=840&amp;name=image33-Apr-26-2022-08-24-55-80-PM.png" alt="image33-Apr-26-2022-08-24-55-80-PM" width="840" loading="lazy" style="width: 840px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image33-Apr-26-2022-08-24-55-80-PM.png?width=420&amp;name=image33-Apr-26-2022-08-24-55-80-PM.png 420w, https://www.cybereason.com/hs-fs/hubfs/image33-Apr-26-2022-08-24-55-80-PM.png?width=840&amp;name=image33-Apr-26-2022-08-24-55-80-PM.png 840w, https://www.cybereason.com/hs-fs/hubfs/image33-Apr-26-2022-08-24-55-80-PM.png?width=1260&amp;name=image33-Apr-26-2022-08-24-55-80-PM.png 1260w, https://www.cybereason.com/hs-fs/hubfs/image33-Apr-26-2022-08-24-55-80-PM.png?width=1680&amp;name=image33-Apr-26-2022-08-24-55-80-PM.png 1680w, https://www.cybereason.com/hs-fs/hubfs/image33-Apr-26-2022-08-24-55-80-PM.png?width=2100&amp;name=image33-Apr-26-2022-08-24-55-80-PM.png 2100w, https://www.cybereason.com/hs-fs/hubfs/image33-Apr-26-2022-08-24-55-80-PM.png?width=2520&amp;name=image33-Apr-26-2022-08-24-55-80-PM.png 2520w" sizes="(max-width: 840px) 100vw, 840px"><span style="font-size: 16px;"><em>Check for EDR hook and bypass if true</em></span></p>
<p>This procedure will occur for the following native API functions:</p>
<ul>
<li aria-level="1">LdrLoadDll</li>
<li aria-level="1">KiUserApcDispatcher</li>
<li aria-level="1">NtAlpcConnectPort&nbsp;</li>
<li aria-level="1">NtAllocateVirtualMemory&nbsp;</li>
<li aria-level="1">NtFreeVirtualMemory&nbsp;</li>
<li aria-level="1">NtMapViewOfSection&nbsp;</li>
<li aria-level="1">NtQueueApcThread&nbsp;</li>
<li aria-level="1">NtReadVirtualMemory&nbsp;</li>
<li aria-level="1">NtSetContextThread&nbsp;</li>
<li aria-level="1">NtUnmapViewOfSection&nbsp;</li>
<li aria-level="1">NtWriteVirtualMemory&nbsp;</li>
<li aria-level="1">RtlInstallFunctionTableCallback&nbsp;</li>
</ul>
<p>Right afterward, the Spyder Loader will execute the payload reflectively, and lastly, will delete <em>TN{random_characters}.dll</em> to leave no traces.</p>
<h3 style="font-weight: normal; font-size: 24px;"><span style="color: #434343;">Attribution of the Spyder Payloads</span></h3>
<p>The above-mentioned PE files share similar code with other known Spyder loaders, such as the <em>oci.dll</em> payload mentioned in a <a href="https://securitynews.sonicwall.com/xmlpost/chinas-winnti-spyder-module/" rel="noopener" target="_blank"><span>SonicWall</span></a> blog from March 2021:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image14-Apr-26-2022-08-25-44-50-PM.png?width=1119&amp;name=image14-Apr-26-2022-08-25-44-50-PM.png" alt="image14-Apr-26-2022-08-25-44-50-PM" width="1119" loading="lazy" style="width: 1119px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image14-Apr-26-2022-08-25-44-50-PM.png?width=560&amp;name=image14-Apr-26-2022-08-25-44-50-PM.png 560w, https://www.cybereason.com/hs-fs/hubfs/image14-Apr-26-2022-08-25-44-50-PM.png?width=1119&amp;name=image14-Apr-26-2022-08-25-44-50-PM.png 1119w, https://www.cybereason.com/hs-fs/hubfs/image14-Apr-26-2022-08-25-44-50-PM.png?width=1679&amp;name=image14-Apr-26-2022-08-25-44-50-PM.png 1679w, https://www.cybereason.com/hs-fs/hubfs/image14-Apr-26-2022-08-25-44-50-PM.png?width=2238&amp;name=image14-Apr-26-2022-08-25-44-50-PM.png 2238w, https://www.cybereason.com/hs-fs/hubfs/image14-Apr-26-2022-08-25-44-50-PM.png?width=2798&amp;name=image14-Apr-26-2022-08-25-44-50-PM.png 2798w, https://www.cybereason.com/hs-fs/hubfs/image14-Apr-26-2022-08-25-44-50-PM.png?width=3357&amp;name=image14-Apr-26-2022-08-25-44-50-PM.png 3357w" sizes="(max-width: 1119px) 100vw, 1119px"><span style="font-size: 16px;"><em>Allocate memory and save WINAPI functions in array</em></span></p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image30-Apr-26-2022-08-26-35-37-PM.png?width=746&amp;name=image30-Apr-26-2022-08-26-35-37-PM.png" alt="image30-Apr-26-2022-08-26-35-37-PM" width="746" loading="lazy" style="width: 746px;" srcset="https://www.cybereason.com/hs-fs/hubfs/image30-Apr-26-2022-08-26-35-37-PM.png?width=373&amp;name=image30-Apr-26-2022-08-26-35-37-PM.png 373w, https://www.cybereason.com/hs-fs/hubfs/image30-Apr-26-2022-08-26-35-37-PM.png?width=746&amp;name=image30-Apr-26-2022-08-26-35-37-PM.png 746w, https://www.cybereason.com/hs-fs/hubfs/image30-Apr-26-2022-08-26-35-37-PM.png?width=1119&amp;name=image30-Apr-26-2022-08-26-35-37-PM.png 1119w, https://www.cybereason.com/hs-fs/hubfs/image30-Apr-26-2022-08-26-35-37-PM.png?width=1492&amp;name=image30-Apr-26-2022-08-26-35-37-PM.png 1492w, https://www.cybereason.com/hs-fs/hubfs/image30-Apr-26-2022-08-26-35-37-PM.png?width=1865&amp;name=image30-Apr-26-2022-08-26-35-37-PM.png 1865w, https://www.cybereason.com/hs-fs/hubfs/image30-Apr-26-2022-08-26-35-37-PM.png?width=2238&amp;name=image30-Apr-26-2022-08-26-35-37-PM.png 2238w" sizes="(max-width: 746px) 100vw, 746px"><span style="font-size: 16px;"><em>Jump to the payload</em></span></p>
<p>Moreover, our PE files also share a similar evasion technique in masquerading as a legitimate executable. In the aforementioned blog post, it disguised as <em>D3D DLL -</em> a <em>Direct3D 11</em> runtime DLL, now it disguise as <em>SQLite3:</em></p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image40-3.png?width=1287&amp;name=image40-3.png" alt="image40-3" width="1287" loading="lazy" style="width: 1287px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image40-3.png?width=644&amp;name=image40-3.png 644w, https://www.cybereason.com/hs-fs/hubfs/image40-3.png?width=1287&amp;name=image40-3.png 1287w, https://www.cybereason.com/hs-fs/hubfs/image40-3.png?width=1931&amp;name=image40-3.png 1931w, https://www.cybereason.com/hs-fs/hubfs/image40-3.png?width=2574&amp;name=image40-3.png 2574w, https://www.cybereason.com/hs-fs/hubfs/image40-3.png?width=3218&amp;name=image40-3.png 3218w, https://www.cybereason.com/hs-fs/hubfs/image40-3.png?width=3861&amp;name=image40-3.png 3861w" sizes="(max-width: 1287px) 100vw, 1287px"><span style="font-size: 16px;"><em>Same method with different targeted DLLs</em></span></p>
<p>These similarities, in addition to others, have led us to conclude that this file is an evolution of the Winnti Spyder Loader.</p>
<h2 style="font-size: 30px;">A Long and Winnti(ng) Road: The Winnti Multi-Phased Arsenal Deployment</h2>
<p>After deploying the initial payload, Winnti employs a sophisticated and unique multi-staged infection chain with numerous payloads. Each payload fulfills a unique role in the infection chain, which is successful only upon the complete deployment of all of the payloads.</p>
<p>In the upcoming sections, we will discuss the following payloads:</p>
<ul>
<li aria-level="1"><strong>STASHLOG</strong>: Stashes encrypted data in a CLFS log</li>
<li aria-level="1"><strong>SPARKLOG:</strong> Extracts data from the CLFS log and deploys PRIVATELOG while escalating privileges</li>
<li aria-level="1"><strong>PRIVATELOG:</strong> Extracts data from the CLFS log and deploys DEPLOYLOG. This payload also enables persistence in some cases</li>
<li aria-level="1"><strong>DEPLOYLOG:</strong> Extracts data from the CLFS log, deploys the WINNKIT Rootkit driver, and acts as the user-mode agent</li>
<li aria-level="1"><strong>WINNKIT</strong>: The Winnti Kernel-level Rootkit</li>
</ul>
<p>Several unique techniques are used by the Winnti group to store data, evade detection, and thwart investigations during this infection flow. One of those techniques, which Winnti heavily uses, is the CLFS mechanism.</p>
<h3 style="font-weight: normal; font-size: 24px;"><span style="color: #434343;">Abusing the Rarely Used CLFS Mechanism for Evasion</span></h3>
<h4 style="font-weight: normal; font-size: 20px;"><span style="color: #666666;">So what is CLFS?</span></h4>
<p><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/introduction-to-the-common-log-file-system" rel="noopener" target="_blank"><span>CLFS</span></a> (Common Log File System) is a logging framework that was first introduced by Microsoft in Windows Server 2003 R2, and is included in later Windows operating systems.</p>
<p>This mechanism provides a high-performance logging system for a variety of purposes ranging from simple error logs to transactional systems and data stream collection.</p>
<p>One of the main uses of CLFS in the Windows operating system is in the Windows Kernel Transaction Manager (KTM) for both Transactional NTFS (TxF) and Transactional Registry (TxR) operations. Transactional operations bring the concept of atomic transactions to Windows, allowing Windows to log different operations on those components and support the ability to roll back if needed.</p>
<p>The high-performance aspect of this framework is based on the concept of storing the log data in memory buffers for fast writing, reading and flushing them to disk–but not continuously, according to a stated policy.</p>
<p>CLFS employs a proprietary file format that isn't documented, and can only be accessed through the CLFS API functions. As of writing this report, there is no tool which can parse the flushed logs. This is a huge benefit for attackers, as it makes it more difficult to examine and detect them while using the CLFS mechanism.</p>
<p>On disk, the CLFS log store consists of:</p>
<ul>
<li aria-level="1">Base Log File (BLF file): Contains the log metadata.</li>
<li aria-level="1">One or more Container files: Contains the log data, where the container file sizes are registered in the BLF file.</li>
</ul>
<p>As will be discussed, Winnti group used this mechanism to store and hide the payload that will be extracted from the CLFS file and used by other PEs in the execution chain to build the attacker’s next steps.</p>
<h3 style="font-weight: normal; font-size: 24px;"><span style="color: #434343;">STASHLOG: Stashing the Winnti Arsenal via CLFS</span></h3>
<p><img src="https://www.cybereason.com/hs-fs/hubfs/image7-Apr-26-2022-08-29-02-84-PM.png?width=1107&amp;name=image7-Apr-26-2022-08-29-02-84-PM.png" alt="image7-Apr-26-2022-08-29-02-84-PM" width="1107" loading="lazy" style="width: 1107px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image7-Apr-26-2022-08-29-02-84-PM.png?width=554&amp;name=image7-Apr-26-2022-08-29-02-84-PM.png 554w, https://www.cybereason.com/hs-fs/hubfs/image7-Apr-26-2022-08-29-02-84-PM.png?width=1107&amp;name=image7-Apr-26-2022-08-29-02-84-PM.png 1107w, https://www.cybereason.com/hs-fs/hubfs/image7-Apr-26-2022-08-29-02-84-PM.png?width=1661&amp;name=image7-Apr-26-2022-08-29-02-84-PM.png 1661w, https://www.cybereason.com/hs-fs/hubfs/image7-Apr-26-2022-08-29-02-84-PM.png?width=2214&amp;name=image7-Apr-26-2022-08-29-02-84-PM.png 2214w, https://www.cybereason.com/hs-fs/hubfs/image7-Apr-26-2022-08-29-02-84-PM.png?width=2768&amp;name=image7-Apr-26-2022-08-29-02-84-PM.png 2768w, https://www.cybereason.com/hs-fs/hubfs/image7-Apr-26-2022-08-29-02-84-PM.png?width=3321&amp;name=image7-Apr-26-2022-08-29-02-84-PM.png 3321w" sizes="(max-width: 1107px) 100vw, 1107px"></p>
<p><a href="https://www.mandiant.com/resources/unknown-actor-using-clfs-log-files-for-stealth" rel="noopener" target="_blank"><span>STASHLOG</span></a> (shiver.exe / forsrv.exe) is a 32 bit executable that is being used to prepare the victim machine for further compromise, and to “stash” a malicious, encrypted payload to a CLFS log file. This payload will be decrypted at each phase to deliver the next phase in the infection.</p>
<p>Both STASHLOG and SPARKLOG, which will be described further in the next section, are executed using a second <em>cc.bat</em> file in the following form:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image47-2.png?width=968&amp;name=image47-2.png" alt="image47-2" width="968" loading="lazy" style="width: 968px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image47-2.png?width=484&amp;name=image47-2.png 484w, https://www.cybereason.com/hs-fs/hubfs/image47-2.png?width=968&amp;name=image47-2.png 968w, https://www.cybereason.com/hs-fs/hubfs/image47-2.png?width=1452&amp;name=image47-2.png 1452w, https://www.cybereason.com/hs-fs/hubfs/image47-2.png?width=1936&amp;name=image47-2.png 1936w, https://www.cybereason.com/hs-fs/hubfs/image47-2.png?width=2420&amp;name=image47-2.png 2420w, https://www.cybereason.com/hs-fs/hubfs/image47-2.png?width=2904&amp;name=image47-2.png 2904w" sizes="(max-width: 968px) 100vw, 968px"><span style="font-size: 16px;"><em>STASHLOG and SPARKLOG execution</em></span></p>
<h4 style="font-weight: normal; font-size: 20px;"><span style="color: #666666;">Different Modes of Execution</span></h4>
<p>STASHLOG has 2 modes of execution:</p>
<ul>
<li aria-level="1">Without arguments to initialize the environment towards infection.</li>
<li aria-level="1">With one argument to store the CLFS file for further use.</li>
</ul>
<h5 style="font-size: 18px;"><span style="color: #666666;">No Arguments Mode</span></h5>
<p>When no arguments are passed, STASHLOG prints the following output:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image44-2.png?width=568&amp;name=image44-2.png" alt="image44-2" width="568" loading="lazy" style="width: 568px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image44-2.png?width=284&amp;name=image44-2.png 284w, https://www.cybereason.com/hs-fs/hubfs/image44-2.png?width=568&amp;name=image44-2.png 568w, https://www.cybereason.com/hs-fs/hubfs/image44-2.png?width=852&amp;name=image44-2.png 852w, https://www.cybereason.com/hs-fs/hubfs/image44-2.png?width=1136&amp;name=image44-2.png 1136w, https://www.cybereason.com/hs-fs/hubfs/image44-2.png?width=1420&amp;name=image44-2.png 1420w, https://www.cybereason.com/hs-fs/hubfs/image44-2.png?width=1704&amp;name=image44-2.png 1704w" sizes="(max-width: 568px) 100vw, 568px"><span style="font-size: 16px;"><em>Execution example of STASHLOG without an argument</em></span></p>
<p>This output consists of the machine Globally Unique Identifier (GUID) along with a 56 byte string:</p>
<ul>
<li aria-level="1">The machine’s GUID - derived from the <em>HKLM\SOFTWARE\Microsoft\Cryptography</em> registry key.</li>
<li aria-level="1">The 56 byte string is generated from a random GUID created by the <em>CoCreateGUID</em> function. The string consists of the hex representation of the GUID, SHA1 hash of the hex GUID, and a SHA1 hash of the GUID + SHA1 of the GUID.</li>
</ul>
<p>This example demonstrates the process of building the 56 byte string:</p>
<ul>
<li aria-level="1">Let’s take a random GUID: {4684A5A2-942A-4DF6-AF1D-2A672F78F73E}</li>
<li aria-level="1">The random GUID’s Hex representation will be: <span style="color: #4472c4;">A2A584462A94F64DAF1D2A672F78F73E</span></li>
<li aria-level="1">Its SHA1 will be: <span style="color: #ff0000;">12C736FE6C9165B1C1026FAAD0051FB9F51DFF35</span></li>
<li aria-level="1">And finally the SHA1 of (GUID + SHA1(GUID)): <span style="color: #00b050;">FAB426F085460CEFD4A65B8A4396C05BF582CB20</span></li>
</ul>
<p>The final string will be:</p>
<ul>
<li><span style="color: #3d85c6;">A2A584462A94F64DAF1D2A672F78F73E</span><br><span style="color: #ff0201;">12C736FE6C9165B1C1026FAAD0051FB9F51DFF35</span><br><span style="color: #69a84f;">FAB426F085460CEFD4A65B8A4396C05BF582CB20</span></li>
</ul>
<p>The random GUID is then registered as a global atom entry in the form of ​​<em>win::{GUID}</em>:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image24-Apr-26-2022-08-31-57-00-PM.png?width=600&amp;name=image24-Apr-26-2022-08-31-57-00-PM.png" alt="image24-Apr-26-2022-08-31-57-00-PM" width="600" loading="lazy" style="width: 600px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image24-Apr-26-2022-08-31-57-00-PM.png?width=300&amp;name=image24-Apr-26-2022-08-31-57-00-PM.png 300w, https://www.cybereason.com/hs-fs/hubfs/image24-Apr-26-2022-08-31-57-00-PM.png?width=600&amp;name=image24-Apr-26-2022-08-31-57-00-PM.png 600w, https://www.cybereason.com/hs-fs/hubfs/image24-Apr-26-2022-08-31-57-00-PM.png?width=900&amp;name=image24-Apr-26-2022-08-31-57-00-PM.png 900w, https://www.cybereason.com/hs-fs/hubfs/image24-Apr-26-2022-08-31-57-00-PM.png?width=1200&amp;name=image24-Apr-26-2022-08-31-57-00-PM.png 1200w, https://www.cybereason.com/hs-fs/hubfs/image24-Apr-26-2022-08-31-57-00-PM.png?width=1500&amp;name=image24-Apr-26-2022-08-31-57-00-PM.png 1500w, https://www.cybereason.com/hs-fs/hubfs/image24-Apr-26-2022-08-31-57-00-PM.png?width=1800&amp;name=image24-Apr-26-2022-08-31-57-00-PM.png 1800w" sizes="(max-width: 600px) 100vw, 600px"><span style="font-size: 16px;"><em>An example of added Global Atom by STASHLOG</em></span></p>
<p>If an atom prefixed with <em>win::</em> already exists during execution, then the existing atom will be used instead of the newly generated one.</p>
<h5 style="font-size: 18px;"><span style="color: #666666;">One Argument Mode</span></h5>
<p>Upon execution with command line arguments, STASHLOG checks the existence of the global atom table entry<em> win::{GUID}</em>, and the process will quit immediately unless the value exists.&nbsp;</p>
<p>Then, STASHLOG loads the file found in the given argument into memory, checks its content, and stores it in a CLFS log file. STASHLOG prints log information about this process to the terminal:</p>
<ul>
<li aria-level="1">Preparing for log format transformation</li>
<li aria-level="1">Log transform step 1 completed</li>
<li aria-level="1">Log transform step 2 completed</li>
<li aria-level="1">Log transform step 3 completed</li>
<li aria-level="1">Log data transform completed</li>
<li aria-level="1">Successful STASHLOG execution log</li>
</ul>
<p>This output in this operation was redirected to a log file, as can be seen on <em>cc.bat</em>. Breaking down the transformation steps from the log:</p>
<ul>
<li aria-level="1"><strong>Step 1:</strong> Decrypt the given encrypted file and check the file validity<br>by looking for the destination BLF file location: <em>C:\Users\Default\NTUSER.DAT{&lt;GUID&gt;}.TM.BLF</em>. If the search yields no results, STASHLOG will create this file.</li>
<li aria-level="1"><strong>Step 2:</strong> Clear the targeted BLF file.</li>
<li aria-level="1"><strong>Step 3: </strong>Encrypt the malicious data and write it to a CLFS file.</li>
</ul>
<h5 style="font-size: 18px;">&nbsp;</h5>
<h5 style="font-size: 18px;"><span style="color: #666666;">Anti-Analysis Techniques</span><span style="color: #666666;"></span></h5>
<p>&nbsp;</p>
<h6 style="font-size: 18px;"><em><span style="color: #666666;">String Obfuscation</span></em></h6>
<p>Throughout the execution, STASHLOG uses the same string decryption technique used in other samples by XORing strings with pre-defined bytes, words or qwords, using the XMM registers. This decryption sequence is present at the beginning of every function that uses strings, where those strings are not saved globally, likely in an attempt to protect them.&nbsp;</p>
<p>As can be seen in the example below from STASHLOG, it uses it to decrypt several debug strings:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image37-3.png?width=584&amp;name=image37-3.png" alt="image37-3" width="584" loading="lazy" style="width: 584px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image37-3.png?width=292&amp;name=image37-3.png 292w, https://www.cybereason.com/hs-fs/hubfs/image37-3.png?width=584&amp;name=image37-3.png 584w, https://www.cybereason.com/hs-fs/hubfs/image37-3.png?width=876&amp;name=image37-3.png 876w, https://www.cybereason.com/hs-fs/hubfs/image37-3.png?width=1168&amp;name=image37-3.png 1168w, https://www.cybereason.com/hs-fs/hubfs/image37-3.png?width=1460&amp;name=image37-3.png 1460w, https://www.cybereason.com/hs-fs/hubfs/image37-3.png?width=1752&amp;name=image37-3.png 1752w" sizes="(max-width: 584px) 100vw, 584px"><span style="font-size: 16px;"><em>String decryption algorithm from shiver.exe</em></span></p>
<p>This technique is also being used in other samples in the chain, including SPARKLOG, PRIVATELOG and DEPLOYLOG.</p>
<h6 style="font-size: 18px;"><em><span style="color: #666666;">Anti-Disassembly</span></em></h6>
<p>This sample uses an interesting Anti-Disassembly technique which thwarts the disassembly process and makes the investigation job harder. Each function inside STASHLOG contains a jump list of every node in the function:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image1-Apr-26-2022-08-34-32-88-PM.png?width=1091&amp;name=image1-Apr-26-2022-08-34-32-88-PM.png" alt="image1-Apr-26-2022-08-34-32-88-PM" width="1091" loading="lazy" style="width: 1091px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image1-Apr-26-2022-08-34-32-88-PM.png?width=546&amp;name=image1-Apr-26-2022-08-34-32-88-PM.png 546w, https://www.cybereason.com/hs-fs/hubfs/image1-Apr-26-2022-08-34-32-88-PM.png?width=1091&amp;name=image1-Apr-26-2022-08-34-32-88-PM.png 1091w, https://www.cybereason.com/hs-fs/hubfs/image1-Apr-26-2022-08-34-32-88-PM.png?width=1637&amp;name=image1-Apr-26-2022-08-34-32-88-PM.png 1637w, https://www.cybereason.com/hs-fs/hubfs/image1-Apr-26-2022-08-34-32-88-PM.png?width=2182&amp;name=image1-Apr-26-2022-08-34-32-88-PM.png 2182w, https://www.cybereason.com/hs-fs/hubfs/image1-Apr-26-2022-08-34-32-88-PM.png?width=2728&amp;name=image1-Apr-26-2022-08-34-32-88-PM.png 2728w, https://www.cybereason.com/hs-fs/hubfs/image1-Apr-26-2022-08-34-32-88-PM.png?width=3273&amp;name=image1-Apr-26-2022-08-34-32-88-PM.png 3273w" sizes="(max-width: 1091px) 100vw, 1091px"><span style="font-size: 16px;"><em>Part of a Jump List from a function in STASHLOG</em></span></p>
<p>This jump list is then used as a flow control during the function execution. In some cases the address of the next node will be pushed to a register and then there will be a <em>JMP </em>to this register:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image4-Apr-26-2022-08-35-14-86-PM.png?width=625&amp;name=image4-Apr-26-2022-08-35-14-86-PM.png" alt="image4-Apr-26-2022-08-35-14-86-PM" width="625" loading="lazy" style="width: 625px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image4-Apr-26-2022-08-35-14-86-PM.png?width=313&amp;name=image4-Apr-26-2022-08-35-14-86-PM.png 313w, https://www.cybereason.com/hs-fs/hubfs/image4-Apr-26-2022-08-35-14-86-PM.png?width=625&amp;name=image4-Apr-26-2022-08-35-14-86-PM.png 625w, https://www.cybereason.com/hs-fs/hubfs/image4-Apr-26-2022-08-35-14-86-PM.png?width=938&amp;name=image4-Apr-26-2022-08-35-14-86-PM.png 938w, https://www.cybereason.com/hs-fs/hubfs/image4-Apr-26-2022-08-35-14-86-PM.png?width=1250&amp;name=image4-Apr-26-2022-08-35-14-86-PM.png 1250w, https://www.cybereason.com/hs-fs/hubfs/image4-Apr-26-2022-08-35-14-86-PM.png?width=1563&amp;name=image4-Apr-26-2022-08-35-14-86-PM.png 1563w, https://www.cybereason.com/hs-fs/hubfs/image4-Apr-26-2022-08-35-14-86-PM.png?width=1875&amp;name=image4-Apr-26-2022-08-35-14-86-PM.png 1875w" sizes="(max-width: 625px) 100vw, 625px"><span style="font-size: 16px;"><em>Jump to register</em></span></p>
<p>The more interesting use of the jump list is replacing the conditional jump commands like <em>JZ</em> and <em>JNZ</em> with a SET command that changes the register given as an argument to the value of the corresponding checked flag. For example, when using <em>SETZ eax, </em>the EAX register will be changed to “1” if the “0” flag is checked.&nbsp;</p>
<p>Using the set register, there will be a JMP to an address on the function’s jump list. This JMP is usually resolved for a switch-case mechanism, and IDA Pro disassembles it as one:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image39-2.png?width=429&amp;name=image39-2.png" alt="image39-2" width="429" loading="lazy" style="width: 429px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image39-2.png?width=215&amp;name=image39-2.png 215w, https://www.cybereason.com/hs-fs/hubfs/image39-2.png?width=429&amp;name=image39-2.png 429w, https://www.cybereason.com/hs-fs/hubfs/image39-2.png?width=644&amp;name=image39-2.png 644w, https://www.cybereason.com/hs-fs/hubfs/image39-2.png?width=858&amp;name=image39-2.png 858w, https://www.cybereason.com/hs-fs/hubfs/image39-2.png?width=1073&amp;name=image39-2.png 1073w, https://www.cybereason.com/hs-fs/hubfs/image39-2.png?width=1287&amp;name=image39-2.png 1287w" sizes="(max-width: 429px) 100vw, 429px"><span style="font-size: 16px;"><em>Example of jmp usage in IDA Pro</em></span></p>
<p>Using this method, the disassembler displays all the available <em>JMP</em> options based on the function’s jump list even though there are only two jump options - when the assigned register is either 0 or 1 (in the example above it’s the <em>ECX </em>register). These methods make the disassembled function very hard to read and investigate:</p>
<p style="text-align: center;"><span style="font-size: 10px; color: #575955;"><img src="https://www.cybereason.com/hs-fs/hubfs/image2-Apr-26-2022-08-36-46-90-PM.png?width=542&amp;name=image2-Apr-26-2022-08-36-46-90-PM.png" alt="image2-Apr-26-2022-08-36-46-90-PM" width="542" loading="lazy" style="width: 542px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image2-Apr-26-2022-08-36-46-90-PM.png?width=271&amp;name=image2-Apr-26-2022-08-36-46-90-PM.png 271w, https://www.cybereason.com/hs-fs/hubfs/image2-Apr-26-2022-08-36-46-90-PM.png?width=542&amp;name=image2-Apr-26-2022-08-36-46-90-PM.png 542w, https://www.cybereason.com/hs-fs/hubfs/image2-Apr-26-2022-08-36-46-90-PM.png?width=813&amp;name=image2-Apr-26-2022-08-36-46-90-PM.png 813w, https://www.cybereason.com/hs-fs/hubfs/image2-Apr-26-2022-08-36-46-90-PM.png?width=1084&amp;name=image2-Apr-26-2022-08-36-46-90-PM.png 1084w, https://www.cybereason.com/hs-fs/hubfs/image2-Apr-26-2022-08-36-46-90-PM.png?width=1355&amp;name=image2-Apr-26-2022-08-36-46-90-PM.png 1355w, https://www.cybereason.com/hs-fs/hubfs/image2-Apr-26-2022-08-36-46-90-PM.png?width=1626&amp;name=image2-Apr-26-2022-08-36-46-90-PM.png 1626w" sizes="(max-width: 542px) 100vw, 542px"></span><span style="font-size: 16px;"><em>Single function tree as could be seen in IDA Pro</em></span></p>
<h3 style="font-size: 24px; font-weight: normal;"><span style="color: #434343;">SPARKLOG: Deploying PRIVATELOG, the Next Link in the Infection Chain</span></h3>
<p><img src="https://www.cybereason.com/hs-fs/hubfs/image22-Apr-26-2022-08-37-25-41-PM.png?width=1134&amp;name=image22-Apr-26-2022-08-37-25-41-PM.png" alt="image22-Apr-26-2022-08-37-25-41-PM" width="1134" loading="lazy" style="width: 1134px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image22-Apr-26-2022-08-37-25-41-PM.png?width=567&amp;name=image22-Apr-26-2022-08-37-25-41-PM.png 567w, https://www.cybereason.com/hs-fs/hubfs/image22-Apr-26-2022-08-37-25-41-PM.png?width=1134&amp;name=image22-Apr-26-2022-08-37-25-41-PM.png 1134w, https://www.cybereason.com/hs-fs/hubfs/image22-Apr-26-2022-08-37-25-41-PM.png?width=1701&amp;name=image22-Apr-26-2022-08-37-25-41-PM.png 1701w, https://www.cybereason.com/hs-fs/hubfs/image22-Apr-26-2022-08-37-25-41-PM.png?width=2268&amp;name=image22-Apr-26-2022-08-37-25-41-PM.png 2268w, https://www.cybereason.com/hs-fs/hubfs/image22-Apr-26-2022-08-37-25-41-PM.png?width=2835&amp;name=image22-Apr-26-2022-08-37-25-41-PM.png 2835w, https://www.cybereason.com/hs-fs/hubfs/image22-Apr-26-2022-08-37-25-41-PM.png?width=3402&amp;name=image22-Apr-26-2022-08-37-25-41-PM.png 3402w" sizes="(max-width: 1134px) 100vw, 1134px"></p>
<p><a href="https://twitter.com/ESETresearch/status/1433819571207774209?s=20&amp;t=vQjvuSCLkka_ZKrngChcYg" rel="noopener" target="_blank"><span>SPARKLOG</span></a> (spark.exe) is a 32 bit executable written in C++, employed in this attack to extract a DLL from the CLFS file, decrypt it and then launch it for side-loading by Windows services running as SYSTEM. Executing this phase of the attack successfully enables the attackers to gain <a href="https://attack.mitre.org/tactics/TA0004/" rel="noopener" target="_blank"><span>Privilege Escalation</span></a> and also <a href="https://attack.mitre.org/tactics/TA0003/" rel="noopener" target="_blank"><span>Persistence</span></a> in a specific case.</p>
<h4 style="font-weight: normal; font-size: 20px;"><span style="color: #666666;">SPARKLOG Execution Flow</span></h4>
<p>The execution of SPARKLOG starts by creating a non-visible window followed by a message posted to trigger the execution of the main thread:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image34-Apr-26-2022-08-38-12-18-PM.png?width=658&amp;name=image34-Apr-26-2022-08-38-12-18-PM.png" alt="image34-Apr-26-2022-08-38-12-18-PM" width="658" loading="lazy" style="width: 658px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image34-Apr-26-2022-08-38-12-18-PM.png?width=329&amp;name=image34-Apr-26-2022-08-38-12-18-PM.png 329w, https://www.cybereason.com/hs-fs/hubfs/image34-Apr-26-2022-08-38-12-18-PM.png?width=658&amp;name=image34-Apr-26-2022-08-38-12-18-PM.png 658w, https://www.cybereason.com/hs-fs/hubfs/image34-Apr-26-2022-08-38-12-18-PM.png?width=987&amp;name=image34-Apr-26-2022-08-38-12-18-PM.png 987w, https://www.cybereason.com/hs-fs/hubfs/image34-Apr-26-2022-08-38-12-18-PM.png?width=1316&amp;name=image34-Apr-26-2022-08-38-12-18-PM.png 1316w, https://www.cybereason.com/hs-fs/hubfs/image34-Apr-26-2022-08-38-12-18-PM.png?width=1645&amp;name=image34-Apr-26-2022-08-38-12-18-PM.png 1645w, https://www.cybereason.com/hs-fs/hubfs/image34-Apr-26-2022-08-38-12-18-PM.png?width=1974&amp;name=image34-Apr-26-2022-08-38-12-18-PM.png 1974w" sizes="(max-width: 658px) 100vw, 658px"><span style="font-size: 16px;"><em>Non-visible window creation</em></span></p>
<p>The PE then retrieves an encrypted DLL content from the CLFS log file, decrypts it and gets the OS version in use. This OS version will be required later to understand how to deploy the DLL in the compromised machine. Then, it decrypts the strings <em>Global\HVID_</em> and <em>Global\APCI#</em>. First, it uses the <em>GetVolumeNameForVolumeMountPointA</em> API call to get the GUID of the operating system volume and acquires a handle to a <em>HVID_&lt;OS Volume GUID&gt;</em> event.&nbsp;</p>
<p>Then, it queries the <em>MachineGUID</em> value from the registry <em>HKLM\SOFTWARE\Microsoft\Cryptography</em> key and creates an event by the name of <em>Global\APCI#&lt;Machine GUID&gt;</em>. Using these events is a means of communication between the modules in the attack, and it will be used in further modules as well:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image41-3.png?width=648&amp;name=image41-3.png" alt="image41-3" width="648" loading="lazy" style="width: 648px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image41-3.png?width=324&amp;name=image41-3.png 324w, https://www.cybereason.com/hs-fs/hubfs/image41-3.png?width=648&amp;name=image41-3.png 648w, https://www.cybereason.com/hs-fs/hubfs/image41-3.png?width=972&amp;name=image41-3.png 972w, https://www.cybereason.com/hs-fs/hubfs/image41-3.png?width=1296&amp;name=image41-3.png 1296w, https://www.cybereason.com/hs-fs/hubfs/image41-3.png?width=1620&amp;name=image41-3.png 1620w, https://www.cybereason.com/hs-fs/hubfs/image41-3.png?width=1944&amp;name=image41-3.png 1944w" sizes="(max-width: 648px) 100vw, 648px"><span style="font-size: 16px;"><em>Building the HVID_ and APCI# events</em></span></p>
<p>Next, it starts to deploy PRIVATELOG based on the OS version. From Windows Vista to Windows 7, SPARKLOG uses a popular DLL side loading technique that involves dropping the DLL with the name <em>wlbsctrl.dll</em> to the <em>%SYSTEM32%\WindowsPowershell\v1.0</em> directory. It then stops <a href="https://github.com/securycore/Ikeext-Privesc" rel="noopener" target="_blank"><span>IKEEXT</span></a>, a service that was compromised by WINNTI in the <a href="https://speakerdeck.com/aragorntseng/winnti-is-coming-evolution-after-prosecution-at-hitcon2021?slide=23" rel="noopener" target="_blank"><span>past</span></a>, changes the configuration using <em>ChangeServiceConfigA</em> based on the argument count, then starts it again:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image6-Apr-26-2022-08-39-51-31-PM.png?width=663&amp;name=image6-Apr-26-2022-08-39-51-31-PM.png" alt="image6-Apr-26-2022-08-39-51-31-PM" width="663" loading="lazy" style="width: 663px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image6-Apr-26-2022-08-39-51-31-PM.png?width=332&amp;name=image6-Apr-26-2022-08-39-51-31-PM.png 332w, https://www.cybereason.com/hs-fs/hubfs/image6-Apr-26-2022-08-39-51-31-PM.png?width=663&amp;name=image6-Apr-26-2022-08-39-51-31-PM.png 663w, https://www.cybereason.com/hs-fs/hubfs/image6-Apr-26-2022-08-39-51-31-PM.png?width=995&amp;name=image6-Apr-26-2022-08-39-51-31-PM.png 995w, https://www.cybereason.com/hs-fs/hubfs/image6-Apr-26-2022-08-39-51-31-PM.png?width=1326&amp;name=image6-Apr-26-2022-08-39-51-31-PM.png 1326w, https://www.cybereason.com/hs-fs/hubfs/image6-Apr-26-2022-08-39-51-31-PM.png?width=1658&amp;name=image6-Apr-26-2022-08-39-51-31-PM.png 1658w, https://www.cybereason.com/hs-fs/hubfs/image6-Apr-26-2022-08-39-51-31-PM.png?width=1989&amp;name=image6-Apr-26-2022-08-39-51-31-PM.png 1989w" sizes="(max-width: 663px) 100vw, 663px"><span style="font-size: 16px;"><em>Stopped IKEEXT service</em></span></p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image28-Apr-26-2022-08-40-38-18-PM.png?width=784&amp;name=image28-Apr-26-2022-08-40-38-18-PM.png" alt="image28-Apr-26-2022-08-40-38-18-PM" width="784" loading="lazy" style="width: 784px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image28-Apr-26-2022-08-40-38-18-PM.png?width=392&amp;name=image28-Apr-26-2022-08-40-38-18-PM.png 392w, https://www.cybereason.com/hs-fs/hubfs/image28-Apr-26-2022-08-40-38-18-PM.png?width=784&amp;name=image28-Apr-26-2022-08-40-38-18-PM.png 784w, https://www.cybereason.com/hs-fs/hubfs/image28-Apr-26-2022-08-40-38-18-PM.png?width=1176&amp;name=image28-Apr-26-2022-08-40-38-18-PM.png 1176w, https://www.cybereason.com/hs-fs/hubfs/image28-Apr-26-2022-08-40-38-18-PM.png?width=1568&amp;name=image28-Apr-26-2022-08-40-38-18-PM.png 1568w, https://www.cybereason.com/hs-fs/hubfs/image28-Apr-26-2022-08-40-38-18-PM.png?width=1960&amp;name=image28-Apr-26-2022-08-40-38-18-PM.png 1960w, https://www.cybereason.com/hs-fs/hubfs/image28-Apr-26-2022-08-40-38-18-PM.png?width=2352&amp;name=image28-Apr-26-2022-08-40-38-18-PM.png 2352w" sizes="(max-width: 784px) 100vw, 784px"><span style="font-size: 16px;"><em>Change IKEEXT service configuration based on argument count</em></span></p>
<p>After a successful service start, the service executes and triggers the DLL side-loading vulnerability using SYSTEM privileges. It is interesting to note that in this case, if a command line argument is provided, the DLL will be deleted after the execution starts. This might be due to the fact that <a href="http://elastic.co/guide/en/security/current/suspicious-dll-loaded-for-persistence-or-privilege-escalation.html" rel="noopener" target="_blank">abusing <em>wlbsctrl.dll</em> is pretty common</a>, and might trigger EDR vendors later on.</p>
<p>From Windows Server 2012 to Windows 10, SPARKLOG acts in a similar fashion, but with a different name and location:</p>
<ul>
<li aria-level="1">It drops PRIVATELOG with the name <em>prntvpt.dll</em> to the <em>%SYSTEM32%\spool\drivers\x64\3</em> directory&nbsp;</li>
<li aria-level="1">It then stops, changes configuration and starts the PrintNotify service to side-load the DLL (PrintNotify is a legitimate Windows service like IKEEXT, also running as SYSTEM):</li>
</ul>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image18-Apr-26-2022-08-41-21-24-PM.png?width=808&amp;name=image18-Apr-26-2022-08-41-21-24-PM.png" alt="image18-Apr-26-2022-08-41-21-24-PM" width="808" loading="lazy" style="width: 808px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image18-Apr-26-2022-08-41-21-24-PM.png?width=404&amp;name=image18-Apr-26-2022-08-41-21-24-PM.png 404w, https://www.cybereason.com/hs-fs/hubfs/image18-Apr-26-2022-08-41-21-24-PM.png?width=808&amp;name=image18-Apr-26-2022-08-41-21-24-PM.png 808w, https://www.cybereason.com/hs-fs/hubfs/image18-Apr-26-2022-08-41-21-24-PM.png?width=1212&amp;name=image18-Apr-26-2022-08-41-21-24-PM.png 1212w, https://www.cybereason.com/hs-fs/hubfs/image18-Apr-26-2022-08-41-21-24-PM.png?width=1616&amp;name=image18-Apr-26-2022-08-41-21-24-PM.png 1616w, https://www.cybereason.com/hs-fs/hubfs/image18-Apr-26-2022-08-41-21-24-PM.png?width=2020&amp;name=image18-Apr-26-2022-08-41-21-24-PM.png 2020w, https://www.cybereason.com/hs-fs/hubfs/image18-Apr-26-2022-08-41-21-24-PM.png?width=2424&amp;name=image18-Apr-26-2022-08-41-21-24-PM.png 2424w" sizes="(max-width: 808px) 100vw, 808px"><span style="font-size: 16px;"><em>Opening and querying the PrintNotify service</em></span></p>
<p>In both cases, the attackers gain stealth by deploying PRIVATELOG while masquerading legitimate file names in privileged locations, as well as gaining persistence and privilege escalation to execute their next step as SYSTEM, the most privileged user in a local machine:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image8-Apr-26-2022-08-42-20-49-PM.png?width=950&amp;name=image8-Apr-26-2022-08-42-20-49-PM.png" alt="image8-Apr-26-2022-08-42-20-49-PM" width="950" loading="lazy" style="width: 950px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image8-Apr-26-2022-08-42-20-49-PM.png?width=475&amp;name=image8-Apr-26-2022-08-42-20-49-PM.png 475w, https://www.cybereason.com/hs-fs/hubfs/image8-Apr-26-2022-08-42-20-49-PM.png?width=950&amp;name=image8-Apr-26-2022-08-42-20-49-PM.png 950w, https://www.cybereason.com/hs-fs/hubfs/image8-Apr-26-2022-08-42-20-49-PM.png?width=1425&amp;name=image8-Apr-26-2022-08-42-20-49-PM.png 1425w, https://www.cybereason.com/hs-fs/hubfs/image8-Apr-26-2022-08-42-20-49-PM.png?width=1900&amp;name=image8-Apr-26-2022-08-42-20-49-PM.png 1900w, https://www.cybereason.com/hs-fs/hubfs/image8-Apr-26-2022-08-42-20-49-PM.png?width=2375&amp;name=image8-Apr-26-2022-08-42-20-49-PM.png 2375w, https://www.cybereason.com/hs-fs/hubfs/image8-Apr-26-2022-08-42-20-49-PM.png?width=2850&amp;name=image8-Apr-26-2022-08-42-20-49-PM.png 2850w" sizes="(max-width: 950px) 100vw, 950px"><span style="font-size: 16px;"><em>Spark.exe execution as seen in Cybereason’s XDR Platform</em></span></p>
<h3 style="font-size: 24px; font-weight: normal;"><span style="color: #434343;">PRIVATELOG: Extracting and Deploying DEPLOYLOG</span></h3>
<p><img src="https://www.cybereason.com/hs-fs/hubfs/image32-Apr-26-2022-08-43-13-74-PM.png?width=1366&amp;name=image32-Apr-26-2022-08-43-13-74-PM.png" alt="image32-Apr-26-2022-08-43-13-74-PM" width="1366" loading="lazy" style="width: 1366px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image32-Apr-26-2022-08-43-13-74-PM.png?width=683&amp;name=image32-Apr-26-2022-08-43-13-74-PM.png 683w, https://www.cybereason.com/hs-fs/hubfs/image32-Apr-26-2022-08-43-13-74-PM.png?width=1366&amp;name=image32-Apr-26-2022-08-43-13-74-PM.png 1366w, https://www.cybereason.com/hs-fs/hubfs/image32-Apr-26-2022-08-43-13-74-PM.png?width=2049&amp;name=image32-Apr-26-2022-08-43-13-74-PM.png 2049w, https://www.cybereason.com/hs-fs/hubfs/image32-Apr-26-2022-08-43-13-74-PM.png?width=2732&amp;name=image32-Apr-26-2022-08-43-13-74-PM.png 2732w, https://www.cybereason.com/hs-fs/hubfs/image32-Apr-26-2022-08-43-13-74-PM.png?width=3415&amp;name=image32-Apr-26-2022-08-43-13-74-PM.png 3415w, https://www.cybereason.com/hs-fs/hubfs/image32-Apr-26-2022-08-43-13-74-PM.png?width=4098&amp;name=image32-Apr-26-2022-08-43-13-74-PM.png 4098w" sizes="(max-width: 1366px) 100vw, 1366px"></p>
<p><a href="https://www.mandiant.com/resources/unknown-actor-using-clfs-log-files-for-stealth" rel="noopener" target="_blank"><span>PRIVATELOG</span></a> is a module that exists in 2 forms:&nbsp;</p>
<ul>
<li aria-level="1"><em>Wlbsctrl.dll: </em>A DLL to be side-loaded by the IKEEXT service, aiming to execute on Windows Vista to Windows 7 operating systems.</li>
<li aria-level="1"><em>Prntvpt.dll</em>: A DLL to be side loaded by the PrintNotify service, aiming to execute on Windows Server 2012 to Windows 10 operating systems.</li>
</ul>
<p>As both of the DLLs are being loaded by native Windows services, they both live in the context of the <a href="https://en.wikipedia.org/wiki/Svchost.exe"><span>svchost</span></a> process, but differ in their execution flow.</p>
<h4 style="font-weight: normal; font-size: 20px;"><span style="color: #666666;">The IKEEXT Hijacker</span></h4>
<p>At the beginning of its execution, <em>wlbsctrl.dll </em>is loaded by the IKEEXT service and verifies similarly to <em>prntvpt.dll</em> that it’s being executed from <em>svchost </em>using the right command line (<em>netsvcs</em>). After this check, <em>wlbsctrl.dll</em> goes straight to dropping DEPLOYLOG.</p>
<h4 style="font-weight: normal; font-size: 20px;"><span style="color: #666666;">The PrintNotify Hijacker</span></h4>
<p>At the beginning of its execution, <em>prntvpt.dll</em> verifies it is being loaded by the correct process with the right command line (<em>svchost -k print</em>), similar to <em>wlbsctrl.dll</em>. This command line is the one being executed upon starting the PrintNotify service.</p>
<p>When the PrintNotify service starts, it also loads <em>PrintConfig.dll</em>, which is being executed from its <em>ServiceMain </em>function. To hijack the execution flow, <em>prntvpt.dll</em> loads <em>PrintConfig.dll</em> and acquires the address of its <em>ServiceMain </em>function. Then, it patches this function, and adds a jump instruction to itself, to continue its execution.</p>
<p>The <em>prntvpt.dll</em> component is different, as it is also the persistence tool for the infection, as opposed to the previous samples we discussed which execute only once to infect the machine, this tool runs every time the PrintNotify service is executed. From this point on, the different DLL files act almost the same.</p>
<h4 style="font-weight: normal; font-size: 20px;"><span style="color: #666666;">Dropping DEPLOYLOG</span></h4>
<p>PRIVATELOG decrypts DEPLOYLOG in memory from the CLFS log file, then it copies <em>dbghelp.dll </em>from its original place in <em>C:\Windows\System32\dbghelp.dll</em> to <em>C:\Windows\System32\WindowsPowerShell\v1.0\dbghelp.dll</em>. Next, the attackers use a rather unique technique to overwrite the copied <em>dbghelp.dll</em> with the aforementioned decrypted buffer using <a href="https://docs.microsoft.com/en-us/windows/win32/fileio/transactional-ntfs-portal" rel="noopener" target="_blank"><span>Windows Transactional NTFS (TxF)</span></a>.</p>
<p>Transactional NTFS is a component introduced in Windows Vista that allows developers to create, edit and delete files and directories while giving them the option to roll back in case of errors. This mechanism is used in major operating system components like Windows Update, Task Scheduler and System Restore.</p>
<p>Using Transactional NTFS, the attackers can perform file operations using unconventional methods that can be hard to detect for some security products. They leverage it to create a new malicious <em>dbghelp.dll</em> using the following steps:</p>
<ol>
<li style="list-style-type: none;">
<ol style="font-size: 18px;">
<li aria-level="1">A transaction handle is created for dbghelp.dll:
<ul>
<li aria-level="2"><em>CreateTransaction</em>: Creates a new transaction object</li>
<li aria-level="2"><em>CreateFileTransactedA</em>: with GENERIC_READ_WRITE access.&nbsp;</li>
</ul>
</li>
<li aria-level="1">The file is overwritten with the decrypted payload:
<ul>
<li aria-level="2"><em>WriteFile</em>: On the transacted file handle.</li>
</ul>
</li>
<li aria-level="1">Load the file to a memory section (more about this method is covered <a href="https://www.ired.team/offensive-security/code-injection-process-injection/ntcreatesection-+-ntmapviewofsection-code-injection" rel="noopener" target="_blank">here</a>):&nbsp;
<ul>
<li aria-level="2"><em>NtCreateSection</em>: with the SEC_IMAGE section attribute.</li>
<li aria-level="2"><em>NtMapViewOfSection</em>: Mapping the file view in the created section which validates the PE header and splits the section, but doesn’t build the import address table and set section permissions.</li>
</ul>
</li>
<li aria-level="1">Set the right section permissions and resolve the imports of the DLL:
<ul>
<li aria-level="2">Fixing section permissions using <em>VirtualProtect </em>calls.</li>
<li aria-level="2">Building the DLL’s import address table with <em>LoadLibrary </em>and <em>GetProcAddress </em>calls.</li>
</ul>
</li>
<li aria-level="1">Execute the DEPLOYLOG payload entry point followed by the SvcMain.</li>
</ol>
</li>
</ol>
<br>
<h3 style="font-weight: normal; font-size: 24px;"><span style="color: #434343;">DEPLOYLOG: The Winnti Rootkit Deployment and A Usermode Agent</span></h3>
<p><img src="https://www.cybereason.com/hs-fs/hubfs/image13-May-02-2022-07-32-25-54-PM.png?width=1412&amp;name=image13-May-02-2022-07-32-25-54-PM.png" alt="image13-May-02-2022-07-32-25-54-PM" width="1412" loading="lazy" style="width: 1412px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image13-May-02-2022-07-32-25-54-PM.png?width=706&amp;name=image13-May-02-2022-07-32-25-54-PM.png 706w, https://www.cybereason.com/hs-fs/hubfs/image13-May-02-2022-07-32-25-54-PM.png?width=1412&amp;name=image13-May-02-2022-07-32-25-54-PM.png 1412w, https://www.cybereason.com/hs-fs/hubfs/image13-May-02-2022-07-32-25-54-PM.png?width=2118&amp;name=image13-May-02-2022-07-32-25-54-PM.png 2118w, https://www.cybereason.com/hs-fs/hubfs/image13-May-02-2022-07-32-25-54-PM.png?width=2824&amp;name=image13-May-02-2022-07-32-25-54-PM.png 2824w, https://www.cybereason.com/hs-fs/hubfs/image13-May-02-2022-07-32-25-54-PM.png?width=3530&amp;name=image13-May-02-2022-07-32-25-54-PM.png 3530w, https://www.cybereason.com/hs-fs/hubfs/image13-May-02-2022-07-32-25-54-PM.png?width=4236&amp;name=image13-May-02-2022-07-32-25-54-PM.png 4236w" sizes="(max-width: 1412px) 100vw, 1412px"></p>
<p>DEPLOYLOG (dbghelp.dll) is a 64 bit DLL, with two purposes:</p>
<ul>
<li aria-level="1">The first one is responsible for extracting and executing the attackers’ rootkit, dubbed WINNKIT, from the CLFS log file.&nbsp;</li>
<li aria-level="1">After a successful deployment of the WINNKIT rootkit, DEPLOYLOG switches to its second task, which is communicating both with the remote C2 and the kernel-level rootkit.&nbsp;</li>
</ul>
<p>It’s noteworthy to mention that to evade detection, the attackers deployed DEPLOYLOG as <em>dbghelp.dll</em>, a generic, widely used name leveraged to masquerade as a legitimate file at the same location as <em>PRIVATELOG</em> (<em>C:\Windows\System32\WindowsPowerShell\v1.0)</em>.<span style="font-size: 11px;">&nbsp;</span></p>
<h4 style="font-weight: normal; font-size: 20px;"><span style="color: #666666;">DEPLOYLOG Initialization</span></h4>
<p>Once <em>DEPLOYLOG</em> is executed, it starts with a sleep of 7777 milliseconds:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image15-Apr-26-2022-08-44-59-40-PM.png?width=545&amp;name=image15-Apr-26-2022-08-44-59-40-PM.png" alt="image15-Apr-26-2022-08-44-59-40-PM" width="545" loading="lazy" style="width: 545px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image15-Apr-26-2022-08-44-59-40-PM.png?width=273&amp;name=image15-Apr-26-2022-08-44-59-40-PM.png 273w, https://www.cybereason.com/hs-fs/hubfs/image15-Apr-26-2022-08-44-59-40-PM.png?width=545&amp;name=image15-Apr-26-2022-08-44-59-40-PM.png 545w, https://www.cybereason.com/hs-fs/hubfs/image15-Apr-26-2022-08-44-59-40-PM.png?width=818&amp;name=image15-Apr-26-2022-08-44-59-40-PM.png 818w, https://www.cybereason.com/hs-fs/hubfs/image15-Apr-26-2022-08-44-59-40-PM.png?width=1090&amp;name=image15-Apr-26-2022-08-44-59-40-PM.png 1090w, https://www.cybereason.com/hs-fs/hubfs/image15-Apr-26-2022-08-44-59-40-PM.png?width=1363&amp;name=image15-Apr-26-2022-08-44-59-40-PM.png 1363w, https://www.cybereason.com/hs-fs/hubfs/image15-Apr-26-2022-08-44-59-40-PM.png?width=1635&amp;name=image15-Apr-26-2022-08-44-59-40-PM.png 1635w" sizes="(max-width: 545px) 100vw, 545px"><span style="font-size: 16px;"><em>Figure #: Sleep before the main method</em></span></p>
<p>Afterward, it tries to acquire a handle to the earlier <em>HVID_&lt;OS Volume GUID&gt; </em>event, and If it doesn’t exist it creates it. Then, it initializes the communication channel with the future deployed rootkit:</p>
<ul>
<li aria-level="1">First, it tries to acquire a handle to the Beep device object: <em>\\?\GLOBALROOT\Device\Beep</em>.&nbsp;</li>
<li aria-level="1">If it fails, it tries to do the same for <em>\\?\GLOBALROOT\Device\Nul</em><em>l</em>. To test if the rootkit was deployed in the past and is running, DEPLOYLOG tries to send the <a href="https://en.wikipedia.org/wiki/Ioctl"><span>IOCTL</span></a><em> 15E030 </em>to the acquired device handle:</li>
</ul>
<br><br>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image45-2.png?width=664&amp;name=image45-2.png" alt="image45-2" width="664" loading="lazy" style="width: 664px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image45-2.png?width=332&amp;name=image45-2.png 332w, https://www.cybereason.com/hs-fs/hubfs/image45-2.png?width=664&amp;name=image45-2.png 664w, https://www.cybereason.com/hs-fs/hubfs/image45-2.png?width=996&amp;name=image45-2.png 996w, https://www.cybereason.com/hs-fs/hubfs/image45-2.png?width=1328&amp;name=image45-2.png 1328w, https://www.cybereason.com/hs-fs/hubfs/image45-2.png?width=1660&amp;name=image45-2.png 1660w, https://www.cybereason.com/hs-fs/hubfs/image45-2.png?width=1992&amp;name=image45-2.png 1992w" sizes="(max-width: 664px) 100vw, 664px"><span style="font-size: 16px;"><em>DEPLOYLOG gets handles to device objects and sends an IOCTL</em></span></p>
<h4 style="font-weight: normal; font-size: 20px;"><span style="color: #666666;">WINNKIT Deployment</span></h4>
<p>Upon succeeding the earlier steps, DEPLOYLOG extracts the rootkit from the CLFS log file, decrypts its content, then <a href="http://revertservice.com/7/amdk8/" rel="noopener" target="_blank">stops the <em>amdk8</em> service</a>. This service is the AMD K8 processor kernel driver service. Aiming for this specific service can tell something about the Winnti modus operandi, indicating they aim only for AMD-related machines to be infected, which could also indicate having a prior knowledge of the victim's infrastructure.</p>
<p>Then, DEPLOYLOG decrypts the string <em>SystemRoot\System32\drivers\bqDsp.sys</em> and changes the <em>amdk8</em> service configuration to point to this path:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image46-2.png?width=837&amp;name=image46-2.png" alt="image46-2" width="837" loading="lazy" style="width: 837px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image46-2.png?width=419&amp;name=image46-2.png 419w, https://www.cybereason.com/hs-fs/hubfs/image46-2.png?width=837&amp;name=image46-2.png 837w, https://www.cybereason.com/hs-fs/hubfs/image46-2.png?width=1256&amp;name=image46-2.png 1256w, https://www.cybereason.com/hs-fs/hubfs/image46-2.png?width=1674&amp;name=image46-2.png 1674w, https://www.cybereason.com/hs-fs/hubfs/image46-2.png?width=2093&amp;name=image46-2.png 2093w, https://www.cybereason.com/hs-fs/hubfs/image46-2.png?width=2511&amp;name=image46-2.png 2511w" sizes="(max-width: 837px) 100vw, 837px"><span style="font-size: 16px;"><em>Changing </em><em>amdk8 service configuration to execute WINNKIT</em></span></p>
<p>Next, DEPLOYLOG writes the <em>bqDsp.sys</em> rootkit driver from the CLFS log file to the <em>C:\WINDOWS\system32\drivers</em> directory and starts the service again, this time to execute its malicious payload. By doing so, DEPLOYLOG finishes deploying the rootkit. To cover its tracks, DEPLOYLOG will then stop the service, restore its previous configuration to point to the <em>amdk8.sys</em> driver, and finally delete WINNKIT:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image36-Apr-26-2022-08-47-35-18-PM.png?width=767&amp;name=image36-Apr-26-2022-08-47-35-18-PM.png" alt="image36-Apr-26-2022-08-47-35-18-PM" width="767" loading="lazy" style="width: 767px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image36-Apr-26-2022-08-47-35-18-PM.png?width=384&amp;name=image36-Apr-26-2022-08-47-35-18-PM.png 384w, https://www.cybereason.com/hs-fs/hubfs/image36-Apr-26-2022-08-47-35-18-PM.png?width=767&amp;name=image36-Apr-26-2022-08-47-35-18-PM.png 767w, https://www.cybereason.com/hs-fs/hubfs/image36-Apr-26-2022-08-47-35-18-PM.png?width=1151&amp;name=image36-Apr-26-2022-08-47-35-18-PM.png 1151w, https://www.cybereason.com/hs-fs/hubfs/image36-Apr-26-2022-08-47-35-18-PM.png?width=1534&amp;name=image36-Apr-26-2022-08-47-35-18-PM.png 1534w, https://www.cybereason.com/hs-fs/hubfs/image36-Apr-26-2022-08-47-35-18-PM.png?width=1918&amp;name=image36-Apr-26-2022-08-47-35-18-PM.png 1918w, https://www.cybereason.com/hs-fs/hubfs/image36-Apr-26-2022-08-47-35-18-PM.png?width=2301&amp;name=image36-Apr-26-2022-08-47-35-18-PM.png 2301w" sizes="(max-width: 767px) 100vw, 767px"><span style="font-size: 16px;"><em>Sending WINNKIT the IOCTL 0x8000C004 using Pipe2PortCtrl</em></span></p>
<h4 style="font-weight: normal; font-size: 20px;"><span style="color: #666666;">DEPLOYLOG as a User-Mode Agent&nbsp;</span></h4>
<p>Once deployed, DEPLOYLOG turns to its second mission, effectively acting as a user-mode agent whose purpose is to bridge the newly deployed rootkit and the remote C2. The DLL will start communicating with the C2 servers which will send data that will be intercepted by the driver, as will be explained in the next section discussing WINNKIT. Using this agent, the attackers will load new modules, pop a CMD shell, drop MFSDLL.exe for credential grabbing and more:</p>
<p style="text-align: center;"><span style="font-size: 16px;"><em><img src="https://www.cybereason.com/hs-fs/hubfs/image19-Apr-26-2022-09-01-53-69-PM.png?width=1174&amp;name=image19-Apr-26-2022-09-01-53-69-PM.png" alt="image19-Apr-26-2022-09-01-53-69-PM" width="1174" loading="lazy" style="width: 1174px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image19-Apr-26-2022-09-01-53-69-PM.png?width=587&amp;name=image19-Apr-26-2022-09-01-53-69-PM.png 587w, https://www.cybereason.com/hs-fs/hubfs/image19-Apr-26-2022-09-01-53-69-PM.png?width=1174&amp;name=image19-Apr-26-2022-09-01-53-69-PM.png 1174w, https://www.cybereason.com/hs-fs/hubfs/image19-Apr-26-2022-09-01-53-69-PM.png?width=1761&amp;name=image19-Apr-26-2022-09-01-53-69-PM.png 1761w, https://www.cybereason.com/hs-fs/hubfs/image19-Apr-26-2022-09-01-53-69-PM.png?width=2348&amp;name=image19-Apr-26-2022-09-01-53-69-PM.png 2348w, https://www.cybereason.com/hs-fs/hubfs/image19-Apr-26-2022-09-01-53-69-PM.png?width=2935&amp;name=image19-Apr-26-2022-09-01-53-69-PM.png 2935w, https://www.cybereason.com/hs-fs/hubfs/image19-Apr-26-2022-09-01-53-69-PM.png?width=3522&amp;name=image19-Apr-26-2022-09-01-53-69-PM.png 3522w" sizes="(max-width: 1174px) 100vw, 1174px"></em></span><span style="font-size: 16px;"><em>DEPLOYLOG loaded by svchost.exe as seen in the Cybereason XDR Platform</em></span></p>
<h3 style="font-weight: normal; font-size: 24px;"><span style="color: #434343;">Behold WINNKIT, The Evasive Winnti Rootkit</span></h3>
<p><img src="https://www.cybereason.com/hs-fs/hubfs/image27-Apr-26-2022-08-52-01-04-PM.png?width=1403&amp;name=image27-Apr-26-2022-08-52-01-04-PM.png" alt="image27-Apr-26-2022-08-52-01-04-PM" width="1403" loading="lazy" style="width: 1403px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image27-Apr-26-2022-08-52-01-04-PM.png?width=702&amp;name=image27-Apr-26-2022-08-52-01-04-PM.png 702w, https://www.cybereason.com/hs-fs/hubfs/image27-Apr-26-2022-08-52-01-04-PM.png?width=1403&amp;name=image27-Apr-26-2022-08-52-01-04-PM.png 1403w, https://www.cybereason.com/hs-fs/hubfs/image27-Apr-26-2022-08-52-01-04-PM.png?width=2105&amp;name=image27-Apr-26-2022-08-52-01-04-PM.png 2105w, https://www.cybereason.com/hs-fs/hubfs/image27-Apr-26-2022-08-52-01-04-PM.png?width=2806&amp;name=image27-Apr-26-2022-08-52-01-04-PM.png 2806w, https://www.cybereason.com/hs-fs/hubfs/image27-Apr-26-2022-08-52-01-04-PM.png?width=3508&amp;name=image27-Apr-26-2022-08-52-01-04-PM.png 3508w, https://www.cybereason.com/hs-fs/hubfs/image27-Apr-26-2022-08-52-01-04-PM.png?width=4209&amp;name=image27-Apr-26-2022-08-52-01-04-PM.png 4209w" sizes="(max-width: 1403px) 100vw, 1403px"></p>
<p>The final payload deployed by Winnti is also the most evasive and sophisticated: a driver acting as a rootkit, dubbed WINNKIT.&nbsp;WINNKIT’s previous version was <a href="https://exatrack.com/public/winnti_EN.pdf" rel="noopener" target="_blank"><span>researched</span></a> in the past, and its purpose is to act as a kernel-mode agent, interacting with the user-mode agent and intercepting TCP/IP requests, by talking directly to the network card. The almost zero detection rate in VirusTotal, together with the compilation timestamp from 2019, illustrates just how evasive this rootkit really is, staying in the shadows for 3 years:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image31-Apr-26-2022-08-52-27-83-PM.png?width=802&amp;name=image31-Apr-26-2022-08-52-27-83-PM.png" alt="image31-Apr-26-2022-08-52-27-83-PM" width="802" loading="lazy" style="width: 802px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image31-Apr-26-2022-08-52-27-83-PM.png?width=401&amp;name=image31-Apr-26-2022-08-52-27-83-PM.png 401w, https://www.cybereason.com/hs-fs/hubfs/image31-Apr-26-2022-08-52-27-83-PM.png?width=802&amp;name=image31-Apr-26-2022-08-52-27-83-PM.png 802w, https://www.cybereason.com/hs-fs/hubfs/image31-Apr-26-2022-08-52-27-83-PM.png?width=1203&amp;name=image31-Apr-26-2022-08-52-27-83-PM.png 1203w, https://www.cybereason.com/hs-fs/hubfs/image31-Apr-26-2022-08-52-27-83-PM.png?width=1604&amp;name=image31-Apr-26-2022-08-52-27-83-PM.png 1604w, https://www.cybereason.com/hs-fs/hubfs/image31-Apr-26-2022-08-52-27-83-PM.png?width=2005&amp;name=image31-Apr-26-2022-08-52-27-83-PM.png 2005w, https://www.cybereason.com/hs-fs/hubfs/image31-Apr-26-2022-08-52-27-83-PM.png?width=2406&amp;name=image31-Apr-26-2022-08-52-27-83-PM.png 2406w" sizes="(max-width: 802px) 100vw, 802px"><span style="font-size: 16px;"><em>Low detection rate in VirusTotal</em></span></p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image21-Apr-26-2022-08-53-06-27-PM.png?width=608&amp;name=image21-Apr-26-2022-08-53-06-27-PM.png" alt="image21-Apr-26-2022-08-53-06-27-PM" width="608" loading="lazy" style="width: 608px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image21-Apr-26-2022-08-53-06-27-PM.png?width=304&amp;name=image21-Apr-26-2022-08-53-06-27-PM.png 304w, https://www.cybereason.com/hs-fs/hubfs/image21-Apr-26-2022-08-53-06-27-PM.png?width=608&amp;name=image21-Apr-26-2022-08-53-06-27-PM.png 608w, https://www.cybereason.com/hs-fs/hubfs/image21-Apr-26-2022-08-53-06-27-PM.png?width=912&amp;name=image21-Apr-26-2022-08-53-06-27-PM.png 912w, https://www.cybereason.com/hs-fs/hubfs/image21-Apr-26-2022-08-53-06-27-PM.png?width=1216&amp;name=image21-Apr-26-2022-08-53-06-27-PM.png 1216w, https://www.cybereason.com/hs-fs/hubfs/image21-Apr-26-2022-08-53-06-27-PM.png?width=1520&amp;name=image21-Apr-26-2022-08-53-06-27-PM.png 1520w, https://www.cybereason.com/hs-fs/hubfs/image21-Apr-26-2022-08-53-06-27-PM.png?width=1824&amp;name=image21-Apr-26-2022-08-53-06-27-PM.png 1824w" sizes="(max-width: 608px) 100vw, 608px"><span style="font-size: 16px;"><em>The rootkit’s compilation timestamp</em></span></p>
<p>WINNKIT contains an expired BenQ digital signature, which is leveraged to <a href="https://j00ru.vexillium.org/2012/11/defeating-windows-driver-signature-enforcement-part-1-default-drivers/https://j00ru.vexillium.org/2012/11/defeating-windows-driver-signature-enforcement-part-1-default-drivers/" rel="noopener" target="_blank"><span>bypass the Driver Signature Enforcement (DSE)</span></a> mechanism that requires drivers to be properly signed with digital signatures in order to be loaded successfully. This mechanism was first introduced in Windows Vista 64-bit, and is affected for all versions of Windows since then:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image11-Apr-26-2022-08-53-36-34-PM.png?width=359&amp;name=image11-Apr-26-2022-08-53-36-34-PM.png" alt="image11-Apr-26-2022-08-53-36-34-PM" width="359" loading="lazy" style="width: 359px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image11-Apr-26-2022-08-53-36-34-PM.png?width=180&amp;name=image11-Apr-26-2022-08-53-36-34-PM.png 180w, https://www.cybereason.com/hs-fs/hubfs/image11-Apr-26-2022-08-53-36-34-PM.png?width=359&amp;name=image11-Apr-26-2022-08-53-36-34-PM.png 359w, https://www.cybereason.com/hs-fs/hubfs/image11-Apr-26-2022-08-53-36-34-PM.png?width=539&amp;name=image11-Apr-26-2022-08-53-36-34-PM.png 539w, https://www.cybereason.com/hs-fs/hubfs/image11-Apr-26-2022-08-53-36-34-PM.png?width=718&amp;name=image11-Apr-26-2022-08-53-36-34-PM.png 718w, https://www.cybereason.com/hs-fs/hubfs/image11-Apr-26-2022-08-53-36-34-PM.png?width=898&amp;name=image11-Apr-26-2022-08-53-36-34-PM.png 898w, https://www.cybereason.com/hs-fs/hubfs/image11-Apr-26-2022-08-53-36-34-PM.png?width=1077&amp;name=image11-Apr-26-2022-08-53-36-34-PM.png 1077w" sizes="(max-width: 359px) 100vw, 359px"><span style="font-size: 16px;"><em>&nbsp;Revoked rootkit certificate and file version information as seen in VirusTotal</em></span></p>
<p>After successfully loading, WINNKIT hooks network communication, and operates based on custom commands that are being sent from the aforementioned user-mode agent, DEPLOYLOG.</p>
<p>At the beginning of its execution, the driver validates the <a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/network/ndis-drivers" rel="noopener" target="_blank"><span>NDIS</span></a> version, making sure the system is Windows Vista or above. By using the NDIS API, it communicates directly with the network card, skipping higher level communication protocols:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image43-3.png?width=649&amp;name=image43-3.png" alt="image43-3" width="649" loading="lazy" style="width: 649px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image43-3.png?width=325&amp;name=image43-3.png 325w, https://www.cybereason.com/hs-fs/hubfs/image43-3.png?width=649&amp;name=image43-3.png 649w, https://www.cybereason.com/hs-fs/hubfs/image43-3.png?width=974&amp;name=image43-3.png 974w, https://www.cybereason.com/hs-fs/hubfs/image43-3.png?width=1298&amp;name=image43-3.png 1298w, https://www.cybereason.com/hs-fs/hubfs/image43-3.png?width=1623&amp;name=image43-3.png 1623w, https://www.cybereason.com/hs-fs/hubfs/image43-3.png?width=1947&amp;name=image43-3.png 1947w" sizes="(max-width: 649px) 100vw, 649px"><span style="font-size: 16px;"><em>WINNKIT’s communication with the network card</em></span></p>
<p style="text-align: left;">After establishing a connection with the network card, the rootkit tries to open the event <em>\\BaseNamedObjects\\{75F09225-CD50-460B-BF90-5743B8404D73}</em>. In case it fails, it creates this event, and then hooks the <em>\\Device\\Null</em> device. Hooking this device is somehow risky, as this device is often being targeted by modern rootkit, thus making it relatively exposed to detection. Nevertheless, it enabled the authors to stay undetected for years.</p>
<p>Using the above mentioned mechanisms enables WINNKIT a mean of communication with the user mode agent:</p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image23-Apr-26-2022-08-55-51-86-PM.png?width=723&amp;name=image23-Apr-26-2022-08-55-51-86-PM.png" alt="image23-Apr-26-2022-08-55-51-86-PM" width="723" loading="lazy" style="width: 723px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image23-Apr-26-2022-08-55-51-86-PM.png?width=362&amp;name=image23-Apr-26-2022-08-55-51-86-PM.png 362w, https://www.cybereason.com/hs-fs/hubfs/image23-Apr-26-2022-08-55-51-86-PM.png?width=723&amp;name=image23-Apr-26-2022-08-55-51-86-PM.png 723w, https://www.cybereason.com/hs-fs/hubfs/image23-Apr-26-2022-08-55-51-86-PM.png?width=1085&amp;name=image23-Apr-26-2022-08-55-51-86-PM.png 1085w, https://www.cybereason.com/hs-fs/hubfs/image23-Apr-26-2022-08-55-51-86-PM.png?width=1446&amp;name=image23-Apr-26-2022-08-55-51-86-PM.png 1446w, https://www.cybereason.com/hs-fs/hubfs/image23-Apr-26-2022-08-55-51-86-PM.png?width=1808&amp;name=image23-Apr-26-2022-08-55-51-86-PM.png 1808w, https://www.cybereason.com/hs-fs/hubfs/image23-Apr-26-2022-08-55-51-86-PM.png?width=2169&amp;name=image23-Apr-26-2022-08-55-51-86-PM.png 2169w" sizes="(max-width: 723px) 100vw, 723px"><span style="font-size: 16px;"><em>WINNKIT event creation</em></span></p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image26-Apr-26-2022-08-56-35-33-PM.png?width=654&amp;name=image26-Apr-26-2022-08-56-35-33-PM.png" alt="image26-Apr-26-2022-08-56-35-33-PM" width="654" loading="lazy" style="width: 654px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image26-Apr-26-2022-08-56-35-33-PM.png?width=327&amp;name=image26-Apr-26-2022-08-56-35-33-PM.png 327w, https://www.cybereason.com/hs-fs/hubfs/image26-Apr-26-2022-08-56-35-33-PM.png?width=654&amp;name=image26-Apr-26-2022-08-56-35-33-PM.png 654w, https://www.cybereason.com/hs-fs/hubfs/image26-Apr-26-2022-08-56-35-33-PM.png?width=981&amp;name=image26-Apr-26-2022-08-56-35-33-PM.png 981w, https://www.cybereason.com/hs-fs/hubfs/image26-Apr-26-2022-08-56-35-33-PM.png?width=1308&amp;name=image26-Apr-26-2022-08-56-35-33-PM.png 1308w, https://www.cybereason.com/hs-fs/hubfs/image26-Apr-26-2022-08-56-35-33-PM.png?width=1635&amp;name=image26-Apr-26-2022-08-56-35-33-PM.png 1635w, https://www.cybereason.com/hs-fs/hubfs/image26-Apr-26-2022-08-56-35-33-PM.png?width=1962&amp;name=image26-Apr-26-2022-08-56-35-33-PM.png 1962w" sizes="(max-width: 654px) 100vw, 654px"><span style="font-size: 16px;"><em>WINNKIT hooks the \\Device\\Null device object&nbsp;</em></span></p>
<p style="text-align: center;"><img src="https://www.cybereason.com/hs-fs/hubfs/image3-Apr-26-2022-08-57-34-53-PM.png?width=656&amp;name=image3-Apr-26-2022-08-57-34-53-PM.png" alt="image3-Apr-26-2022-08-57-34-53-PM" width="656" loading="lazy" style="width: 656px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image3-Apr-26-2022-08-57-34-53-PM.png?width=328&amp;name=image3-Apr-26-2022-08-57-34-53-PM.png 328w, https://www.cybereason.com/hs-fs/hubfs/image3-Apr-26-2022-08-57-34-53-PM.png?width=656&amp;name=image3-Apr-26-2022-08-57-34-53-PM.png 656w, https://www.cybereason.com/hs-fs/hubfs/image3-Apr-26-2022-08-57-34-53-PM.png?width=984&amp;name=image3-Apr-26-2022-08-57-34-53-PM.png 984w, https://www.cybereason.com/hs-fs/hubfs/image3-Apr-26-2022-08-57-34-53-PM.png?width=1312&amp;name=image3-Apr-26-2022-08-57-34-53-PM.png 1312w, https://www.cybereason.com/hs-fs/hubfs/image3-Apr-26-2022-08-57-34-53-PM.png?width=1640&amp;name=image3-Apr-26-2022-08-57-34-53-PM.png 1640w, https://www.cybereason.com/hs-fs/hubfs/image3-Apr-26-2022-08-57-34-53-PM.png?width=1968&amp;name=image3-Apr-26-2022-08-57-34-53-PM.png 1968w" sizes="(max-width: 656px) 100vw, 656px"><span style="font-size: 16px;"><em>The switch case that handling different commands</em></span></p>
<p>A summary of the communication flow of DEPLOYLOG and WINNKIT, can be seen in the following diagram:</p>
<p style="text-align: center;"><span style="font-size: 16px;"><em><img src="https://www.cybereason.com/hs-fs/hubfs/image%20(67).png?width=645&amp;name=image%20(67).png" alt="image (67)" width="645" loading="lazy" style="width: 645px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image%20(67).png?width=323&amp;name=image%20(67).png 323w, https://www.cybereason.com/hs-fs/hubfs/image%20(67).png?width=645&amp;name=image%20(67).png 645w, https://www.cybereason.com/hs-fs/hubfs/image%20(67).png?width=968&amp;name=image%20(67).png 968w, https://www.cybereason.com/hs-fs/hubfs/image%20(67).png?width=1290&amp;name=image%20(67).png 1290w, https://www.cybereason.com/hs-fs/hubfs/image%20(67).png?width=1613&amp;name=image%20(67).png 1613w, https://www.cybereason.com/hs-fs/hubfs/image%20(67).png?width=1935&amp;name=image%20(67).png 1935w" sizes="(max-width: 645px) 100vw, 645px"></em></span><span style="font-size: 16px;"><em>Rootkit high level operation diagram</em></span></p>
<p>Below are the functionality we believe that each code represents, according to our findings and previous conducted research:</p>
<table style="border-collapse: collapse; table-layout: fixed; margin-left: auto; margin-right: auto; border: 1px solid #99acc2;">
<tbody>
<tr>
<td style="border: 1pt solid #000000;">
<p><strong>Command</strong></p>
</td>
<td style="border: 1pt solid #000000;">
<p><strong>Operation</strong></p>
</td>
</tr>
<tr>
<td style="border: 1pt solid #000000;">
<p>0x100</p>
</td>
<td style="border: 1pt solid #000000;">
<p>Hide driver</p>
</td>
</tr>
<tr>
<td style="border: 1pt solid #000000;">
<p>0x200</p>
</td>
<td style="border: 1pt solid #000000;">
<p>Determine version</p>
</td>
</tr>
<tr>
<td style="border: 1pt solid #000000;">
<p>0x300</p>
</td>
<td style="border: 1pt solid #000000;">
<p>Access IRQL shared data</p>
</td>
</tr>
<tr>
<td style="border: 1pt solid #000000;">
<p>0x400</p>
</td>
<td style="border: 1pt solid #000000;">
<p>Map and allocate buffer</p>
</td>
</tr>
<tr>
<td style="border: 1pt solid #000000;">
<p>0x500</p>
</td>
<td style="border: 1pt solid #000000;">
<p>Map a buffer</p>
</td>
</tr>
<tr>
<td style="border: 1pt solid #000000;">
<p>0x800</p>
</td>
<td style="border: 1pt solid #000000;">
<p>Clean up</p>
</td>
</tr>
</tbody>
</table>
<h3 style="font-weight: normal; font-size: 24px;">&nbsp;</h3>
<h3 style="font-weight: normal; font-size: 24px;"><span style="color: #434343;">Winnti Auxiliary Plugins</span></h3>
<p>Winnti used reflective loading injection in order to evade detection. The malicious modules are reflectively injected into the legitimate svchost processes. The following modules were detected by Cybereason and seem consistent with <a href="https://securelist.com/winnti-1-0-technical-analysis/37002/" rel="noopener" target="_blank"><span>previously reported Winnti plugins</span></a>:</p>
<ul>
<li style="color: #575955;" aria-level="1"><strong>Cmp2.o: </strong>The plugin's purpose is to provide access to the system command line and appears to be a variant of the Winnti "CmdPlus" plugin.&nbsp;</li>
<li style="color: #575955;" aria-level="1"><strong>Fmg2.o:</strong> This plugin is responsible for listing and modifying files on the targeted machine and appears to be the Winnti "ListFileManager" module.</li>
<li style="color: #575955;" aria-level="1"><strong>Srv2.o:</strong> The purpose of the plugin is to display information about system services and is assessed to be the Winnti “ListService” plugin.</li>
<li style="color: #575955;" aria-level="1"><strong>Sck2.o:</strong> The purpose of the plugin is to transfer data over the network using a SOCKS5 proxy server and is assessed to be the “Socks5Client” plugin.&nbsp;</li>
<li style="color: #575955;" aria-level="1"><strong>Prc2.o:</strong> This plugin can list or kill running processes on the targeted machine.&nbsp;</li>
<li style="color: #575955;" aria-level="1"><strong>Trs2.o:</strong> This plugin was also used for data transfer via Socks5 proxy.</li>
<li style="color: #575955;" aria-level="1"><strong>Cme2.o:</strong> The purpose of this plugin is to enable Remote Desktop access to Winnti:</li>
</ul>
<p style="text-align: center;"><span style="font-size: 16px;"><em><img src="https://www.cybereason.com/hs-fs/hubfs/image17-Apr-26-2022-08-48-09-10-PM.png?width=1192&amp;name=image17-Apr-26-2022-08-48-09-10-PM.png" alt="image17-Apr-26-2022-08-48-09-10-PM" width="1192" loading="lazy" style="width: 1192px; margin-left: auto; margin-right: auto; display: block;" srcset="https://www.cybereason.com/hs-fs/hubfs/image17-Apr-26-2022-08-48-09-10-PM.png?width=596&amp;name=image17-Apr-26-2022-08-48-09-10-PM.png 596w, https://www.cybereason.com/hs-fs/hubfs/image17-Apr-26-2022-08-48-09-10-PM.png?width=1192&amp;name=image17-Apr-26-2022-08-48-09-10-PM.png 1192w, https://www.cybereason.com/hs-fs/hubfs/image17-Apr-26-2022-08-48-09-10-PM.png?width=1788&amp;name=image17-Apr-26-2022-08-48-09-10-PM.png 1788w, https://www.cybereason.com/hs-fs/hubfs/image17-Apr-26-2022-08-48-09-10-PM.png?width=2384&amp;name=image17-Apr-26-2022-08-48-09-10-PM.png 2384w, https://www.cybereason.com/hs-fs/hubfs/image17-Apr-26-2022-08-48-09-10-PM.png?width=2980&amp;name=image17-Apr-26-2022-08-48-09-10-PM.png 2980w, https://www.cybereason.com/hs-fs/hubfs/image17-Apr-26-2022-08-48-09-10-PM.png?width=3576&amp;name=image17-Apr-26-2022-08-48-09-10-PM.png 3576w" sizes="(max-width: 1192px) 100vw, 1192px"></em></span><span style="font-size: 16px;"><em>Example: svchost process that loaded sck2.o and trs2.o modules reflectively, as seen in the Cybereason XDR Platform</em></span></p>
<h2 style="font-size: 30px;">Conclusions</h2>
<p>In part two of the research, we provided a deep dive into the Winnti malware arsenal that was observed by the Cybereason IR and Nocturnus teams. Our analysis provides a unique and holistic view of Winnti operational aspects, capabilities and modus operandi. While some of the tools mentioned in the research were previously reported on, some tools such as DEPLOYLOG were previously undocumented and first analyzed in this report. In addition, our analysis provides further insights regarding some of the known Winnti tools.&nbsp;</p>
<p>Perhaps one of the most interesting things to notice is the elaborate and multi-phased infection chain Winnti employed. The malware authors chose to break the infection chain into multiple interdependent phases, where each phase relies on the previous one in order to execute correctly. This demonstrates the thought and effort that was put into both the malware and operational security considerations, making it almost impossible to analyze unless all pieces of the puzzle are assembled in the correct order.&nbsp;</p>
<p>Furthermore, the rare abuse of the Windows’ own CLFS logging system and NTFS manipulations provided the attackers with extra stealth and the ability to remain undetected for years.&nbsp;</p>
<p>We hope that this report helps to shed light on Winnti operations, tools and techniques, and that it will assist to expose further intrusions.&nbsp;</p>
<h2 style="font-size: 30px;">Acknowledgments&nbsp;</h2>
<p>This research has not been possible without the tireless effort, analysis, attention to details and contribution of the Cybereason Incident Response team. Special thanks and appreciation goes to Matt Hart, Yusuke Shimizu, Niamh O’Connor, Jim Hung, and Omer Yampel.&nbsp;</p>
<h2 style="font-size: 30px;">Indicators of Compromise</h2>
<p><em>LOOKING FOR THE IOCs? CLICK ON THE CHATBOT DISPLAYED IN LOWER-RIGHT OF YOUR SCREEN FOR ACCESS. Due to the sensitive nature of the attack, not all IOCs observed by Cybereason can be shared in our public report. </em><a href="/company/contact-us" rel="noopener" target="_blank"><em><span>Please contact us for more information</span></em></a><em>.</em></p>
<h2 style="font-size: 30px;">MITRE ATT&amp;CK BREAKDOWN</h2>
<table style="border-collapse: collapse; table-layout: fixed; margin-left: auto; margin-right: auto; border: 1px solid #99acc2; height: 1327.83px; width: 844px;">
<tbody>
<tr style="height: 105px;">
<td style="border: 1pt solid #000000; height: 105px; width: 161.836px; background-color: #cccccc; vertical-align: middle;">
<p><span style="font-size: 16px;"><strong><span style="color: #000000;">Reconnaissance</span></strong></span></p>
</td>
<td style="border: 1pt solid #000000; height: 105px; width: 138.68px; background-color: #cccccc; vertical-align: middle;">
<p><span style="font-size: 16px;"><strong><span style="color: #000000;">Initial Access</span></strong></span></p>
</td>
<td style="border: 1pt solid #000000; height: 105px; width: 154.805px; background-color: #cccccc; vertical-align: middle;">
<p><span style="font-size: 16px;"><strong><span style="color: #000000;">Execution</span></strong></span></p>
</td>
<td style="border: 1pt solid #000000; height: 105px; width: 124.641px; background-color: #cccccc; vertical-align: middle;">
<p><span style="font-size: 16px;"><strong><span style="color: #000000;">Persistence</span></strong></span></p>
</td>
<td style="border: 1pt solid #000000; height: 105px; width: 135.68px; background-color: #cccccc; vertical-align: middle;">
<p><span style="font-size: 16px;"><strong><span style="color: #000000;">Privilege Escalation</span></strong></span></p>
</td>
<td style="border: 1pt solid #000000; height: 105px; width: 126.844px; background-color: #cccccc; vertical-align: middle;">
<p><span style="font-size: 16px;"><strong><span style="color: #000000;">Defense Evasion</span></strong></span></p>
</td>
</tr>
<tr style="height: 168.984px;">
<td style="border: 1pt solid #000000; height: 169px; width: 161.836px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1589/001/">Gather Victim Identity Information: Credentials</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 169px; width: 138.68px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1190/">Exploit Public-Facing Application</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 169px; width: 154.805px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1053/">Scheduled Task/Job</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 169px; width: 124.641px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1505/003/">Server Software Component: Web Shell</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 169px; width: 135.68px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1543/003/">Create or Modify System Process: Windows Service</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 169px; width: 126.844px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1574/002/">Hijack Execution Flow: DLL Side-Loading</a></span></p>
</td>
</tr>
<tr style="height: 141px;">
<td style="border: 1pt solid #000000; height: 141px; width: 161.836px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1590/">Gather Victim Network Information</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 141px; width: 138.68px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1195/">Supply Chain Compromise</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 141px; width: 154.805px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1559/">Inter-process communication</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 141px; width: 124.641px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 141px; width: 135.68px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1574/002/">Hijack Execution Flow: DLL Side-Loading</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 141px; width: 126.844px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1014/">Rootkit</a></span></p>
</td>
</tr>
<tr style="height: 168.984px;">
<td style="border: 1pt solid #000000; height: 169px; width: 161.836px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 169px; width: 138.68px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 169px; width: 154.805px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1203/">Exploitation for Client Execution</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 169px; width: 124.641px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 169px; width: 135.68px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1055/001/">Process Injection: Dynamic-link Library Injection</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 169px; width: 126.844px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1036/005/">Masquerading: Match Legitimate Name or Location</a></span></p>
</td>
</tr>
<tr style="height: 168.984px;">
<td style="border: 1pt solid #000000; height: 169px; width: 161.836px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 169px; width: 138.68px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 169px; width: 154.805px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1059/003/">Command and Scripting Interpreter: Windows Command Shell</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 169px; width: 124.641px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1053/005/">Scheduled Task/Job: Scheduled Task</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 169px; width: 135.68px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1053/005/">Scheduled Task/Job: Scheduled Task</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 169px; width: 126.844px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1055/001/">Process Injection: Dynamic-link Library Injection</a></span></p>
</td>
</tr>
<tr style="height: 145.992px;">
<td style="border: 1pt solid #000000; height: 146px; width: 161.836px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 146px; width: 138.68px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 146px; width: 154.805px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1059/005/">Command and Scripting Interpreter: Visual Basic</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 146px; width: 124.641px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1078/002/">Valid Accounts: Domain Accounts</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 146px; width: 135.68px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1078/002/">Valid Accounts: Domain Accounts</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 146px; width: 126.844px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1620/">Reflective Code Loading</a></span></p>
</td>
</tr>
<tr style="height: 147.984px;">
<td style="border: 1pt solid #000000; height: 148px; width: 161.836px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 148px; width: 138.68px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 148px; width: 154.805px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1106/">Native API</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 148px; width: 124.641px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1078/003/">Valid Accounts: Local Accounts</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 148px; width: 135.68px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1078/003/">Valid Accounts: Local Accounts</a></span></p>
</td>
<td style="border: 1pt solid #000000; height: 148px; width: 126.844px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1218/011/">Signed Binary Proxy Execution: Rundll32</a></span></p>
</td>
</tr>
<tr style="height: 139.992px;">
<td style="border: 1pt solid #000000; height: 140px; width: 161.836px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 140px; width: 138.68px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 140px; width: 154.805px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 140px; width: 124.641px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 140px; width: 135.68px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 140px; width: 126.844px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1078/002/">Valid Accounts: Domain Accounts</a></span></p>
</td>
</tr>
<tr style="height: 139.406px;">
<td style="border: 1pt solid #000000; height: 139px; width: 161.836px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 139px; width: 138.68px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 139px; width: 154.805px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 139px; width: 124.641px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 139px; width: 135.68px;">&nbsp;</td>
<td style="border: 1pt solid #000000; height: 139px; width: 126.844px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1078/003/">Valid Accounts: Local Accounts</a></span></p>
</td>
</tr>
</tbody>
</table>
<table style="border-collapse: collapse; table-layout: fixed; margin-left: auto; margin-right: auto; border: 1px solid #99acc2; width: 841px; height: 1170.14px;">
<tbody>
<tr style="height: 78px;">
<td style="border: 1pt solid #000000; width: 125.508px; height: 78px; background-color: #cccccc; vertical-align: middle;">
<p><span style="background-color: #cccccc; font-size: 16px;"><strong><span style="color: #000000;">Credential Access</span></strong></span></p>
</td>
<td style="border: 1pt solid #000000; width: 161.672px; height: 78px; background-color: #cccccc; vertical-align: middle;">
<p><span style="background-color: #cccccc; font-size: 16px;"><strong><span style="color: #000000;">Discovery</span></strong></span></p>
</td>
<td style="border: 1pt solid #000000; width: 140.555px; height: 78px; background-color: #cccccc; vertical-align: middle;">
<p><span style="background-color: #cccccc; font-size: 16px;"><strong><span style="color: #000000;">Lateral movement</span></strong></span></p>
</td>
<td style="border: 1pt solid #000000; width: 127.5px; height: 78px; background-color: #cccccc; vertical-align: middle;">
<p><span style="background-color: #cccccc; font-size: 16px;"><strong><span style="color: #000000;">Collection</span></strong></span></p>
</td>
<td style="border: 1pt solid #000000; width: 125.508px; height: 78px; background-color: #cccccc; vertical-align: middle;">
<p><span style="background-color: #cccccc; font-size: 16px;"><strong><span style="color: #000000;">Exfiltration</span></strong></span></p>
</td>
<td style="border: 1pt solid #000000; width: 158.742px; height: 78px; background-color: #cccccc; vertical-align: middle;">
<p><span style="background-color: #cccccc; font-size: 16px;"><strong><span style="color: #000000;">Command and Control</span></strong></span></p>
</td>
</tr>
<tr style="height: 139.406px;">
<td style="border: 1pt solid #000000; width: 125.508px; height: 139px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1003/">OS Credential Dumping</a></span></p>
</td>
<td style="border: 1pt solid #000000; width: 161.672px; height: 139px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1016/">System Network Configuration Discovery</a></span></p>
</td>
<td style="border: 1pt solid #000000; width: 140.555px; height: 139px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1210/">Exploitation of Remote Services</a></span></p>
</td>
<td style="border: 1pt solid #000000; width: 127.5px; height: 139px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1560/001/">Archive Collected Data: Archive via Utility</a></span></p>
</td>
<td style="border: 1pt solid #000000; width: 125.508px; height: 139px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1020/">Automated Exfiltration</a></span></p>
</td>
<td style="border: 1pt solid #000000; width: 158.742px; height: 139px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1071/001/">Application Layer Protocol: Web Protocols</a></span></p>
</td>
</tr>
<tr style="height: 139.992px;">
<td style="border: 1pt solid #000000; width: 125.508px; height: 140px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 161.672px; height: 140px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1018/">Remote System Discovery</a></span></p>
</td>
<td style="border: 1pt solid #000000; width: 140.555px; height: 140px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1021/001/">Remote Services: Remote Desktop Protocol</a></span></p>
</td>
<td style="border: 1pt solid #000000; width: 127.5px; height: 140px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1119/">Automated Collection</a></span></p>
</td>
<td style="border: 1pt solid #000000; width: 125.508px; height: 140px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 158.742px; height: 140px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1090/">Proxy</a></span></p>
</td>
</tr>
<tr style="height: 78.9844px;">
<td style="border: 1pt solid #000000; width: 125.508px; height: 79px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 161.672px; height: 79px;">
<p style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1201/"><span>Password Policy Discovery</span></a></p>
</td>
<td style="border: 1pt solid #000000; width: 140.555px; height: 79px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 127.5px; height: 79px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 125.508px; height: 79px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 158.742px; height: 79px;">&nbsp;</td>
</tr>
<tr style="height: 81px;">
<td style="border: 1pt solid #000000; width: 125.508px; height: 81px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 161.672px; height: 81px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1069/">Permission Groups Discovery</a></span></p>
</td>
<td style="border: 1pt solid #000000; width: 140.555px; height: 81px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 127.5px; height: 81px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 125.508px; height: 81px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 158.742px; height: 81px;">&nbsp;</td>
</tr>
<tr style="height: 80.4375px;">
<td style="border: 1pt solid #000000; width: 125.508px; height: 80px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 161.672px; height: 80px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1135/">Network Share Discovery</a></span></p>
</td>
<td style="border: 1pt solid #000000; width: 140.555px; height: 80px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 127.5px; height: 80px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 125.508px; height: 80px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 158.742px; height: 80px;">&nbsp;</td>
</tr>
<tr style="height: 81.9844px;">
<td style="border: 1pt solid #000000; width: 125.508px; height: 82px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 161.672px; height: 82px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1007/">System Service Discovery</a></span></p>
</td>
<td style="border: 1pt solid #000000; width: 140.555px; height: 82px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 127.5px; height: 82px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 125.508px; height: 82px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 158.742px; height: 82px;">&nbsp;</td>
</tr>
<tr style="height: 80.4375px;">
<td style="border: 1pt solid #000000; width: 125.508px; height: 80px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 161.672px; height: 80px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1124/">System Time Discovery</a></span></p>
</td>
<td style="border: 1pt solid #000000; width: 140.555px; height: 80px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 127.5px; height: 80px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 125.508px; height: 80px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 158.742px; height: 80px;">&nbsp;</td>
</tr>
<tr style="height: 112.992px;">
<td style="border: 1pt solid #000000; width: 125.508px; height: 113px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 161.672px; height: 113px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1049/">System Network Connections Discovery</a></span></p>
</td>
<td style="border: 1pt solid #000000; width: 140.555px; height: 113px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 127.5px; height: 113px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 125.508px; height: 113px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 158.742px; height: 113px;">&nbsp;</td>
</tr>
<tr style="height: 52.9922px;">
<td style="border: 1pt solid #000000; width: 125.508px; height: 53px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 161.672px; height: 53px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1087/">Account Discovery</a></span></p>
</td>
<td style="border: 1pt solid #000000; width: 140.555px; height: 53px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 127.5px; height: 53px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 125.508px; height: 53px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 158.742px; height: 53px;">&nbsp;</td>
</tr>
<tr style="height: 109.992px;">
<td style="border: 1pt solid #000000; width: 125.508px; height: 110px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 161.672px; height: 110px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1033/">System Owner/User Discovery</a></span></p>
</td>
<td style="border: 1pt solid #000000; width: 140.555px; height: 110px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 127.5px; height: 110px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 125.508px; height: 110px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 158.742px; height: 110px;">&nbsp;</td>
</tr>
<tr style="height: 80.4375px;">
<td style="border: 1pt solid #000000; width: 125.508px; height: 80px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 161.672px; height: 80px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1082/">System Information Discovery</a></span></p>
</td>
<td style="border: 1pt solid #000000; width: 140.555px; height: 80px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 127.5px; height: 80px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 125.508px; height: 80px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 158.742px; height: 80px;">&nbsp;</td>
</tr>
<tr style="height: 51.9844px;">
<td style="border: 1pt solid #000000; width: 125.508px; height: 52px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 161.672px; height: 52px;">
<p><span style="font-size: 14px;"><a href="https://attack.mitre.org/techniques/T1057/">Process Discovery</a></span></p>
</td>
<td style="border: 1pt solid #000000; width: 140.555px; height: 52px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 127.5px; height: 52px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 125.508px; height: 52px;">&nbsp;</td>
<td style="border: 1pt solid #000000; width: 158.742px; height: 52px;">&nbsp;</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<h2 style="font-size: 30px;">About the Researchers:</h2>
<p><strong><img src="https://www.cybereason.com/hs-fs/hubfs/Chen%20Erlich.png?width=196&amp;name=Chen%20Erlich.png" alt="Chen Erlich" width="196" loading="lazy" style="width: 196px; float: left; margin: 0px 7px 0px 0px;" srcset="https://www.cybereason.com/hs-fs/hubfs/Chen%20Erlich.png?width=98&amp;name=Chen%20Erlich.png 98w, https://www.cybereason.com/hs-fs/hubfs/Chen%20Erlich.png?width=196&amp;name=Chen%20Erlich.png 196w, https://www.cybereason.com/hs-fs/hubfs/Chen%20Erlich.png?width=294&amp;name=Chen%20Erlich.png 294w, https://www.cybereason.com/hs-fs/hubfs/Chen%20Erlich.png?width=392&amp;name=Chen%20Erlich.png 392w, https://www.cybereason.com/hs-fs/hubfs/Chen%20Erlich.png?width=490&amp;name=Chen%20Erlich.png 490w, https://www.cybereason.com/hs-fs/hubfs/Chen%20Erlich.png?width=588&amp;name=Chen%20Erlich.png 588w" sizes="(max-width: 196px) 100vw, 196px">Chen Erlich</strong></p>
<p>Chen has almost a decade of experience in Threat Intelligence &amp; Research, Incident Response and Threat Hunting. Before joining Cybereason, Chen spent three years dissecting APTs, investigating underground cybercriminal groups and discovering security vulnerabilities in known vendors. Previously, he served as a Security Researcher in the military forces.</p>
<p>&nbsp;</p>
<p style="font-weight: bold;"><img src="https://www.cybereason.com/hs-fs/hubfs/profile-pics.png?width=194&amp;name=profile-pics.png" alt="profile-pics" width="194" loading="lazy" style="width: 194px; float: left; margin: 0px 7px 0px 0px;" srcset="https://www.cybereason.com/hs-fs/hubfs/profile-pics.png?width=97&amp;name=profile-pics.png 97w, https://www.cybereason.com/hs-fs/hubfs/profile-pics.png?width=194&amp;name=profile-pics.png 194w, https://www.cybereason.com/hs-fs/hubfs/profile-pics.png?width=291&amp;name=profile-pics.png 291w, https://www.cybereason.com/hs-fs/hubfs/profile-pics.png?width=388&amp;name=profile-pics.png 388w, https://www.cybereason.com/hs-fs/hubfs/profile-pics.png?width=485&amp;name=profile-pics.png 485w, https://www.cybereason.com/hs-fs/hubfs/profile-pics.png?width=582&amp;name=profile-pics.png 582w" sizes="(max-width: 194px) 100vw, 194px">Fusao Tanida</p>
<p><span>Fusao spent over 10 years in the security industry. Before joining, he worked as a mobile malware researcher and a developer at the security vendor and then worked at the global mobile phone manufacturer for the development of AntiVirus, VPN client on their Android mobile phone.</span><br><span>Fusao joined Cybereason in 2019 and was previously the Senior Security Analyst at the Advanced Services Team in Cybereason Japan where delivered various security professional services, Incident Response, consultation and triage malware activity alerts in SOC.</span></p>
<p style="font-weight: bold;"><img src="https://www.cybereason.com/hs-fs/hubfs/Ofir%20Ozer.png?width=194&amp;name=Ofir%20Ozer.png" alt="Ofir Ozer" width="194" loading="lazy" style="width: 194px; float: left; margin: 0px 7px 0px 0px;" srcset="https://www.cybereason.com/hs-fs/hubfs/Ofir%20Ozer.png?width=97&amp;name=Ofir%20Ozer.png 97w, https://www.cybereason.com/hs-fs/hubfs/Ofir%20Ozer.png?width=194&amp;name=Ofir%20Ozer.png 194w, https://www.cybereason.com/hs-fs/hubfs/Ofir%20Ozer.png?width=291&amp;name=Ofir%20Ozer.png 291w, https://www.cybereason.com/hs-fs/hubfs/Ofir%20Ozer.png?width=388&amp;name=Ofir%20Ozer.png 388w, https://www.cybereason.com/hs-fs/hubfs/Ofir%20Ozer.png?width=485&amp;name=Ofir%20Ozer.png 485w, https://www.cybereason.com/hs-fs/hubfs/Ofir%20Ozer.png?width=582&amp;name=Ofir%20Ozer.png 582w" sizes="(max-width: 194px) 100vw, 194px">Ofir Ozer</p>
<p><span>Ofir is a Incident Response Engineer at Cybereason who has a keen interest in Windows Internals, reverse engineering, memory analysis and network anomalies. He has years of experience in Cyber Security, focusing on Malware Research, Incident Response and Threat Hunting. Ofir started his career as a Security Researcher in the military forces&nbsp;and then became a malware researcher focusing on Banking Trojans.</span></p>
<p style="font-weight: bold;"><img src="https://www.cybereason.com/hs-fs/hubfs/Akihiro.png?width=191&amp;name=Akihiro.png" alt="Akihiro" width="191" loading="lazy" style="width: 191px; float: left; margin: 0px 7px 0px 0px;" srcset="https://www.cybereason.com/hs-fs/hubfs/Akihiro.png?width=96&amp;name=Akihiro.png 96w, https://www.cybereason.com/hs-fs/hubfs/Akihiro.png?width=191&amp;name=Akihiro.png 191w, https://www.cybereason.com/hs-fs/hubfs/Akihiro.png?width=287&amp;name=Akihiro.png 287w, https://www.cybereason.com/hs-fs/hubfs/Akihiro.png?width=382&amp;name=Akihiro.png 382w, https://www.cybereason.com/hs-fs/hubfs/Akihiro.png?width=478&amp;name=Akihiro.png 478w, https://www.cybereason.com/hs-fs/hubfs/Akihiro.png?width=573&amp;name=Akihiro.png 573w" sizes="(max-width: 191px) 100vw, 191px">Akihiro Tomita</p>
<p>Akihiro is the Senior Manager of Global Security Practice, leading Incident Response team in the APAC region and Japan. Akihiro has led a substantial number of large-scale Incident Response, Digital Forensics and Compromise Assessment engagements during recent years. Akihiro was also a former Team lead of Advanced Security Services team responsible for managing, developing, delivering a variety of professional services including Proactive threat hunting, Security Posture Assessment, Advanced security training and consulting services at Cybereason.</p>
<p style="font-weight: bold;"><img src="https://www.cybereason.com/hs-fs/hubfs/Niv%20Yona.png?width=195&amp;name=Niv%20Yona.png" alt="Niv Yona" width="195" loading="lazy" style="width: 195px; float: left; margin: 0px 7px 0px 0px;" srcset="https://www.cybereason.com/hs-fs/hubfs/Niv%20Yona.png?width=98&amp;name=Niv%20Yona.png 98w, https://www.cybereason.com/hs-fs/hubfs/Niv%20Yona.png?width=195&amp;name=Niv%20Yona.png 195w, https://www.cybereason.com/hs-fs/hubfs/Niv%20Yona.png?width=293&amp;name=Niv%20Yona.png 293w, https://www.cybereason.com/hs-fs/hubfs/Niv%20Yona.png?width=390&amp;name=Niv%20Yona.png 390w, https://www.cybereason.com/hs-fs/hubfs/Niv%20Yona.png?width=488&amp;name=Niv%20Yona.png 488w, https://www.cybereason.com/hs-fs/hubfs/Niv%20Yona.png?width=585&amp;name=Niv%20Yona.png 585w" sizes="(max-width: 195px) 100vw, 195px">Niv Yona</p>
<p>Niv, IR Practice Director, leads Cybereason's incident response practice in the EMEA region. Niv began his career a decade ago in the Israeli Air Force as a team leader in the security operations center, where he specialized in incident response, forensics, and malware analysis. In former roles at Cybereason, he focused on threat research that directly enhances product detections and the Cybereason threat hunting playbook, as well as the development of new strategic services and offerings.</p>
<p style="font-weight: bold;"><img src="https://www.cybereason.com/hs-fs/hubfs/DANIEL%20FRANK.png?width=192&amp;name=DANIEL%20FRANK.png" alt="DANIEL FRANK" width="192" loading="lazy" style="width: 192px; float: left; margin: 0px 7px 0px 0px;" srcset="https://www.cybereason.com/hs-fs/hubfs/DANIEL%20FRANK.png?width=96&amp;name=DANIEL%20FRANK.png 96w, https://www.cybereason.com/hs-fs/hubfs/DANIEL%20FRANK.png?width=192&amp;name=DANIEL%20FRANK.png 192w, https://www.cybereason.com/hs-fs/hubfs/DANIEL%20FRANK.png?width=288&amp;name=DANIEL%20FRANK.png 288w, https://www.cybereason.com/hs-fs/hubfs/DANIEL%20FRANK.png?width=384&amp;name=DANIEL%20FRANK.png 384w, https://www.cybereason.com/hs-fs/hubfs/DANIEL%20FRANK.png?width=480&amp;name=DANIEL%20FRANK.png 480w, https://www.cybereason.com/hs-fs/hubfs/DANIEL%20FRANK.png?width=576&amp;name=DANIEL%20FRANK.png 576w" sizes="(max-width: 192px) 100vw, 192px">Daniel Frank</p>
<p><span>With a decade in malware research, Daniel uses his expertise with malware analysis and reverse engineering to understand APT activity and commodity cybercrime attackers. Daniel has previously shared research at RSA Conference, the Microsoft Digital Crimes Consortium, and Rootcon.</span></p>
<p>&nbsp;</p>
<p style="font-weight: bold;"><img src="https://www.cybereason.com/hs-fs/hubfs/assaf%20dahan.png?width=193&amp;name=assaf%20dahan.png" alt="assaf dahan" width="193" loading="lazy" style="width: 193px; float: left; margin: 0px 7px 0px 0px;" srcset="https://www.cybereason.com/hs-fs/hubfs/assaf%20dahan.png?width=97&amp;name=assaf%20dahan.png 97w, https://www.cybereason.com/hs-fs/hubfs/assaf%20dahan.png?width=193&amp;name=assaf%20dahan.png 193w, https://www.cybereason.com/hs-fs/hubfs/assaf%20dahan.png?width=290&amp;name=assaf%20dahan.png 290w, https://www.cybereason.com/hs-fs/hubfs/assaf%20dahan.png?width=386&amp;name=assaf%20dahan.png 386w, https://www.cybereason.com/hs-fs/hubfs/assaf%20dahan.png?width=483&amp;name=assaf%20dahan.png 483w, https://www.cybereason.com/hs-fs/hubfs/assaf%20dahan.png?width=579&amp;name=assaf%20dahan.png 579w" sizes="(max-width: 193px) 100vw, 193px">ASSAF DAHAN, HEAD OF THREAT RESEARCH<br><br><span style="font-weight: normal;">Assaf has over 15 years in the InfoSec industry. He started his career in the military forces&nbsp;Cybersecurity unit where he developed extensive experience in offensive security. Later in his career he led Red Teams, developed penetration testing methodologies, and specialized in malware analysis and reverse engineering.</span></p></span>
          
          <!-- IOC PopUp Modal -->
          
          
            <div id="hs_cos_wrapper_module_162281712252340" class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module" style="" data-hs-cos-general-type="widget" data-hs-cos-type="module"><!-- Button -->



<div class="cr-modal" id="iocs">
  <div class="cr-modal-overlay cr-modal-toggle"></div>
  <div class="cr-modal-wrapper cr-modal-transition">
    <div class="cr-modal-header">
      <button class="cr-modal-close cr-modal-toggle" id="ioc-close">X</button>
    </div>

    <div class="cr-modal-body">
      <div class="cr-modal-content">
        <h3 style="line-height: 1.5; font-size: 20px;"><strong data-stringify-type="bold">Operation CuckooBees </strong><strong data-stringify-type="bold">Indicators of Compromise (IOCs)</strong></h3>
<p style="font-size: 16px; line-height: 1.5;"><strong data-stringify-type="bold">Hashes</strong></p>
<ul style="font-size: 12px; line-height: 1.5;">
<li aria-level="1">BB93AE0FEE817FE56C31BDC997F3F7D57A48C187 - STASHLOG</li>
<li aria-level="1">4D1B8791D0715FE316B43FC95BDC335CB31A82CA - STASHLOG</li>
<li aria-level="1">2D336978AF261E07B1ECFAF65DC903B239E287A4 - STASHLOG</li>
<li aria-level="1">F2D04FE529E2D8DAB96242305255CFB84CE81E9C - STASHLOG</li>
<li aria-level="1">F8D46895E738254238473D650D99BDC92C34EE44 - SPARKLOG</li>
<li aria-level="1">9267FE0BB6D367FC9186E89EA65B13BAA7418D87 - PRIVATELOG</li>
<li aria-level="1">A009A0F5A385683AEA74299CBE6D5429C609F2D2 - PRIVATELOG</li>
<li aria-level="1">1316F715D228AE6CC1FBA913C6CC309861F82E14 - PRIVATELOG</li>
<li aria-level="1">1275894D8231FE25DB56598DDCF869F88DF5AD8D - WINNKIT</li>
<li aria-level="1">9139C89B2B625E2CEEE2CBF72AEF6C5104707A26 - WINNKIT</li>
<li aria-level="1">082DBCA2C3CA5C5410DE9951A5C681F0C42235C8 - WINNKIT</li>
</ul>
<p style="font-size: 16px; line-height: 1.5;"><strong>File Names &amp; Paths</strong></p>
<ul style="font-size: 12px; line-height: 1.5;">
<li aria-level="1">C:\Windows\temp\bc.bat</li>
<li aria-level="1">C:\Windows\AppPatch\Custom\Custom64\cc.bat</li>
<li aria-level="1">C:\Windows\temp\cc.log</li>
<li aria-level="1">C:\Windows\AppPatch\Custom\Custom64\log.dat</li>
<li aria-level="1">C:\Windows\Branding\Basebrd\x64.tlb</li>
<li aria-level="1">C:\Windows\Branding\Basebrd\language.dll</li>
<li aria-level="1">C:\Windows\System32\mscuplt.dll</li>
<li aria-level="1">C:\Windows\System32\rpcutl.dll</li>
<li aria-level="1">C:\Windows\System32\dot3utl.dll</li>
<li aria-level="1">C:\Windows\System32\iumatl.dll</li>
<li aria-level="1">C:\Windows\System32\Nlsutl.dll</li>
<li aria-level="1">C:\Windows\System32\WindowsPowerShell\v1.0\dbghelp.dll</li>
<li aria-level="1">C:\Windows\System32\drivers\bqDsp.sys</li>
<li aria-level="1">C:\Windows\apppatch\en-us\MFSDLL.exe</li>
<li aria-level="1">C:\Windows\System32\spool\drivers\x64\3\prntvpt.dll</li>
<li aria-level="1">C:\Windows\System32\WindowsPowerShell\v1.0\wlbsctrl.dll</li>
<li aria-level="1">C:\Windows\assembly\gac_msil\dfsvc\foserv.exe</li>
<li aria-level="1">C:\Windows\assembly\temp\foserv.exe</li>
<li aria-level="1">C:\Windows\apppatch\custom\custom64\shiver.exe</li>
<li aria-level="1">C:\Windows\apppatch\custom\custom64\spark.exe</li>
<li aria-level="1">mktzx64.dll</li>
</ul>
<p style="font-size: 16px; line-height: 1.5;"><strong>Winnti Malware Modules Names</strong></p>
<ul style="font-size: 12px; line-height: 1.5;">
<li aria-level="1">Cmp2.o</li>
<li aria-level="1">Fmg2.o</li>
<li aria-level="1">Srv2.o</li>
<li aria-level="1">Sck2.o</li>
<li aria-level="1">Prc2.o</li>
<li aria-level="1">Trs2.o</li>
<li aria-level="1">Cme2.o</li>
</ul>
<p style="font-size: 16px; line-height: 1.5;"><strong>Events</strong></p>
<ul style="font-size: 12px; line-height: 1.5;">
<li aria-level="1">\BaseNamedObjects\{75F09225-CD50-460B-BF90-5743B8404D73}</li>
<li aria-level="1">\BaseNamedObjects\{7D0DF5FC-3991-4047-921F-32308B1A0459}</li>
<li aria-level="1">\BaseNamedObjects\{B73AB0F4-A1D0-4406-9066-41E00BA78E9F}</li>
<li aria-level="1">Global\APCI#&lt;GUID&gt;</li>
<li aria-level="1">Global\HVID_&lt;GUID&gt;</li>
</ul>
<p style="font-size: 16px; line-height: 1.5;"><strong>Named Pipes</strong></p>
<ul style="font-size: 12px; line-height: 1.5;">
<li aria-level="1">Pipe2PortCtrl</li>
</ul>
<p style="font-size: 16px; line-height: 1.5;"><strong>Scheduled Task Name</strong></p>
<ul style="font-size: 12px;">
<li style="line-height: 1.5;" aria-level="1">test</li>
</ul>
      </div>
    </div>
  </div>
</div></div>
          
          
          <!-- -->
          
          <!-- Social Share -->
          <div class="cr-blog-post__social-sharing">
            <span>Share</span>
            <div id="hs_cos_wrapper_module_161724375084957" class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module widget-type-social_sharing" style="" data-hs-cos-general-type="widget" data-hs-cos-type="module">






<div class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_social_sharing" data-hs-cos-general-type="widget" data-hs-cos-type="social_sharing">
  
	
  
    
    
    
			
		

    <a href="https://twitter.com/intent/tweet?original_referer=https://www.cybereason.com/blog/operation-cuckoobees-a-winnti-malware-arsenal-deep-dive&amp;utm_medium=social&amp;utm_source=twitter&amp;url=https://www.cybereason.com/blog/operation-cuckoobees-a-winnti-malware-arsenal-deep-dive&amp;utm_medium=social&amp;utm_source=twitter&amp;source=tweetbutton&amp;text=" target="_blank" rel="noopener" style="width:16px;">
      <img src="https://www.cybereason.com/hubfs/dam/images/images-web/blog-images/template-images/twitter-gray.svg" class="hs-image-widget hs-image-social-sharing-24" style="height:16px;width:16px;" width="16" hspace="0" alt="Share on twitter">
    </a>
	

  
	
  
    
    
    
			
		

    <a href="http://www.facebook.com/share.php?u=https://www.cybereason.com/blog/operation-cuckoobees-a-winnti-malware-arsenal-deep-dive&amp;utm_medium=social&amp;utm_source=facebook" target="_blank" rel="noopener" style="width:16px;">
      <img src="https://www.cybereason.com/hubfs/dam/images/images-web/blog-images/template-images/facebook-gray.svg" class="hs-image-widget hs-image-social-sharing-24" style="height:16px;width:16px;" width="16" hspace="0" alt="Share on facebook">
    </a>
	

  
	
  
    
    
    
			
		

    <a href="http://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.cybereason.com/blog/operation-cuckoobees-a-winnti-malware-arsenal-deep-dive&amp;utm_medium=social&amp;utm_source=linkedin" target="_blank" rel="noopener" style="width:16px;">
      <img src="https://www.cybereason.com/hubfs/dam/images/images-web/blog-images/template-images/linkedin-gray.svg" class="hs-image-widget hs-image-social-sharing-24" style="height:16px;width:16px;" width="16" hspace="0" alt="Share on linkedin">
    </a>
	

</div></div>
          </div> 
          
          
          <!-- CONDITIONAL Author Box Display -->
            <div class="container columns cr-mln__author-listing-single">
              
                <div class="column headshot is-3-full-hd is-3-desktop is-3-tablet is-12-mobile">
                  <img class="cr-speaker-headshot" src="https://www.cybereason.com/hubfs/CR_Owl_Web_Mono@3x%202.png" alt="Cybereason Nocturnus">
                </div>
              
              <div class="column is-9-full-hd is-9-desktop is-12-mobile">
                <span class="descriptor">About the Author</span>
                <h4>Cybereason Nocturnus</h4>
                
                  <a class="social" href="https://www.linkedin.com/company/cybereason" target="_blank">
                    <img src="https://www.cybereason.com/hubfs/dam/images/images-web/blog-images/template-images/icon-social-gray-linkedin.png">
                  </a>
                
                
                  <a class="social" href="https://twitter.com/cr_nocturnus" target="_blank">
                    <img src="https://www.cybereason.com/hubfs/dam/images/images-web/blog-images/template-images/icon-social-gray-twitter.svg">
                  </a>
                
                
                  <p>The Cybereason Nocturnus Team has brought the world’s brightest minds from the military, government intelligence, and enterprise security to uncover emerging threats across the globe. They specialize in analyzing new attack methodologies, reverse-engineering malware, and exposing unknown system vulnerabilities. The Cybereason Nocturnus Team was the first to release a vaccination for the 2017 NotPetya and Bad Rabbit cyberattacks.</p>
                
                
                  <a class="cr-button cr-button__min" href="https://www.cybereason.com/blog/authors/cybereason-nocturnus">All Posts by Cybereason Nocturnus</a>
                
              </div>            
            </div>
          
        <!-- CONDITIONAL Post Type Choices -->
        
        <!-- Malicious Life Post -->
        
        
        <!-- CISO Stories -->
        
        <!-- Webinar -->
        
          
        <!-- CONDITIONAL Transcript -->
          
        
         <!-- Related Posts -->
        <div id="hs_cos_wrapper_module_1649342860525315" class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module" style="" data-hs-cos-general-type="widget" data-hs-cos-type="module">
<section class="cr-section related-posts__wrapper">
  <div class="container container-is-blog page-center">
     <h3>Related Posts</h3>
     <div class="columns is-multiline">
       
  
 <div class="column is-6-fullhd is-6-desktop is-full-mobile blog-listing__single-post">
  <div class="text-content-bundle">
    <a href="https://www.cybereason.com/blog/operation-cuckoobees-deep-dive-into-stealthy-winnti-techniques"><img src="https://www.cybereason.com/hubfs/blog-post-text%20%2887%29.png" alt="Operation CuckooBees: Deep-Dive into Stealthy Winnti Techniques"></a>
    <h4><a href="https://www.cybereason.com/blog/operation-cuckoobees-deep-dive-into-stealthy-winnti-techniques"><span class="underline">Operation CuckooBees: Deep-Dive into Stealthy Winnti Techniques</span></a></h4>
     <p>Cybereason investigated multiple intrusions targeting technology and manufacturing companies located in Asia, Europe and North America. Based on the findings of our investigation, it appears that the goal behind these intrusions was to steal sensitive intellectual property for cyber espionage purposes...</p>
   </div>
 </div>


  
 <div class="column is-6-fullhd is-6-desktop is-full-mobile blog-listing__single-post">
  <div class="text-content-bundle">
    <a href="https://www.cybereason.com/blog/research/operation-ghostshell-novel-rat-targets-global-aerospace-and-telecoms-firms"><img src="https://www.cybereason.com/hubfs/BLOG%20%20SOCIAL%20SET%20-%20News%20%281%29-1.png" alt="Operation GhostShell: Novel RAT Targets Global Aerospace and Telecoms Firms"></a>
    <h4><a href="https://www.cybereason.com/blog/research/operation-ghostshell-novel-rat-targets-global-aerospace-and-telecoms-firms"><span class="underline">Operation GhostShell: Novel RAT Targets Global Aerospace and Telecoms Firms</span></a></h4>
     <p>The highly-targeted attacks against aerospace and telecoms firms by new Iranian threat actor MalKamak includes newly discovered malware that evaded security tools since 2018 and abuses Dropbox services for command and control...</p>
   </div>
 </div>



    </div>
  </div>
</section></div>
          
          
      </div>
        
        <!-- Sidebar -->

      <div class="column is-3-fullhd is-3-desktop is-12-mobile cr-malicious-life-network__sidebar">
        <div class="cr-ml-sidebar--group">
        <div class="top-stripe"></div>
        <div class="sidebar-block search-section">
          <form action="/hs-search-results">
            <input type="search" class="hs-search-field__input" name="term" autocomplete="on" placeholder="Search">
            <input type="hidden" name="type" value="BLOG_POST">
            <input type="hidden" name="type" value="LISTING_PAGE">
            <button type="submit" class="arrow"></button>
          </form>
        </div>
        <div class="sidebar-block subscribe">
          <a href="#blog-subscribe">
            <h4>Subscribe</h4>
            <span>Never miss a blog.</span>
          </a>
        </div>

        <div class="sidebar-block recent-posts">
          <h4>Recent Posts</h4>
          
            
                <div class="recent-posts__single-post">
                    <div class="text-content-bundle">
                        <a href="https://www.cybereason.com/blog/rce-vulnerability-erlang-otp" class="post-name"><span class="underline">CVE-2025-32433: Unauthenticated RCE Vulnerability in Erlang/OTP’s SSH Implementation</span></a>
                       
                    </div>
                </div>
            
                <div class="recent-posts__single-post">
                    <div class="text-content-bundle">
                        <a href="https://www.cybereason.com/blog/threat-analysis-lummastealer-2.0" class="post-name"><span class="underline">From Shadow to Spotlight: The Evolution of LummaStealer and Its Hidden Secrets</span></a>
                       
                    </div>
                </div>
            
                <div class="recent-posts__single-post">
                    <div class="text-content-bundle">
                        <a href="https://www.cybereason.com/blog/expert-support-class-action" class="post-name"><span class="underline">A Class Above: Expert Support for Data Breach Class Action Defense</span></a>
                       
                    </div>
                </div>
            
        </div>

        <div class="sidebar-block category-listing">
          <h4>Categories</h4>
          <ul>
            <li><a href="https://www.cybereason.com/blog/category/research">Research</a></li>
            <li><a href="https://www.cybereason.com/blog/category/podcasts">Podcasts</a></li>
            <li><a href="https://www.cybereason.com/blog/category/webinars">Webinars</a></li>
            <li><a href="https://www.cybereason.com/blog/category/resources">Resources</a></li>
            <li><a href="https://www.cybereason.com/blog/category/videos">Videos</a></li>
            <li><a href="https://www.cybereason.com/blog/category/news">News</a></li>
          </ul>

          <a class="rec-category__single--view-all" href="/blog/category/research">All Posts</a>
        </div>

        
      </div><!-- END .rec-categories__all -->
      
      
      
    </div>
       
    </div>
  </div>
</div></div>

</div><!--end row-->
</div><!--end row-wrapper -->

<div class="row-fluid-wrapper row-depth-1 row-number-2 ">
<div class="row-fluid ">
<div class="span12 widget-span widget-type-custom_widget " style="display: none;" data-widget-type="custom_widget" data-x="0" data-w="12">
<div id="hs_cos_wrapper_module_1616011887658867" class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module" style="" data-hs-cos-general-type="widget" data-hs-cos-type="module">
<section class="cr-section related-posts__wrapper">
  <div class="container container-is-blog page-center">
     <h3>Related Posts</h3>
     <div class="columns is-multiline">
       
  
 <div class="column is-6-fullhd is-6-desktop is-full-mobile blog-listing__single-post">
  <div class="text-content-bundle">
    <a href="https://www.cybereason.com/blog/operation-cuckoobees-deep-dive-into-stealthy-winnti-techniques"><img src="https://www.cybereason.com/hubfs/blog-post-text%20%2887%29.png" alt="Operation CuckooBees: Deep-Dive into Stealthy Winnti Techniques"></a>
    <h4><a href="https://www.cybereason.com/blog/operation-cuckoobees-deep-dive-into-stealthy-winnti-techniques"><span class="underline">Operation CuckooBees: Deep-Dive into Stealthy Winnti Techniques</span></a></h4>
     <p>Cybereason investigated multiple intrusions targeting technology and manufacturing companies located in Asia, Europe and North America. Based on the findings of our investigation, it appears that the goal behind these intrusions was to steal sensitive intellectual property for cyber espionage purposes...</p>
   </div>
 </div>


  
 <div class="column is-6-fullhd is-6-desktop is-full-mobile blog-listing__single-post">
  <div class="text-content-bundle">
    <a href="https://www.cybereason.com/blog/research/operation-ghostshell-novel-rat-targets-global-aerospace-and-telecoms-firms"><img src="https://www.cybereason.com/hubfs/BLOG%20%20SOCIAL%20SET%20-%20News%20%281%29-1.png" alt="Operation GhostShell: Novel RAT Targets Global Aerospace and Telecoms Firms"></a>
    <h4><a href="https://www.cybereason.com/blog/research/operation-ghostshell-novel-rat-targets-global-aerospace-and-telecoms-firms"><span class="underline">Operation GhostShell: Novel RAT Targets Global Aerospace and Telecoms Firms</span></a></h4>
     <p>The highly-targeted attacks against aerospace and telecoms firms by new Iranian threat actor MalKamak includes newly discovered malware that evaded security tools since 2018 and abuses Dropbox services for command and control...</p>
   </div>
 </div>



    </div>
  </div>
</section></div>

</div><!--end widget-span -->
</div><!--end row-->
</div><!--end row-wrapper -->

<div class="row-fluid-wrapper row-depth-1 row-number-3 ">
<div class="row-fluid ">
<div class="span12 widget-span widget-type-custom_widget " style="" data-widget-type="custom_widget" data-x="0" data-w="12">
<div id="hs_cos_wrapper_module_161767462015235" class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module widget-type-blog_subscribe" style="" data-hs-cos-general-type="widget" data-hs-cos-type="module"><div class="cr-mln__blog-listing-page__subscribe-footer">
  <div class="container container-is-blog columns page-center">
    <div class="column is-8-fullhd is-8-desktop is-10-tablet is-12-mobile">
      <span class="tag">NEWSLETTER</span>
      <h3>Never miss a blog</h3>
      <p>Get the latest research, expert insights, and security industry news.</p>
      <a class="cr-button cr-mln__subscribe" href="#blog-subscribe">Subscribe</a>
    </div>
    <!--<div class="column is-5-fullhd is-5-desktop is-half-tablet is-12-mobile is-offset-1-fullhd is-offset-1-desktop">
      <div class="inputs-wrapper">
        
        
      </div>
    </div>-->
  </div>
</div></div>

</div><!--end widget-span -->
</div><!--end row-->
</div><!--end row-wrapper -->

<div class="row-fluid-wrapper row-depth-1 row-number-4 ">
<div class="row-fluid ">
<div class="span12 widget-span widget-type-custom_widget " style="" data-widget-type="custom_widget" data-x="0" data-w="12">
<div id="hs_cos_wrapper_module_166508001252918" class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module" style="" data-hs-cos-general-type="widget" data-hs-cos-type="module"><div class="cr-sticky-cta-bar bg-black" id="sticky-bar">
  <div class="content">
    <span>Want to see the Cybereason Defense Platform in action?</span>
    <a class="cr-button cr-button__fill-yellow" href="https://www.cybereason.com/request-a-demo" target="_blank">Schedule a Demo</a>
  </div>
  <div class="close">X</div>
</div></div>

</div><!--end widget-span -->
</div><!--end row-->
</div><!--end row-wrapper -->

    </div><!--end body -->
</div><!--end body wrapper -->

<div class="footer-container-wrapper">
    <div class="footer-container container-fluid">

<div class="row-fluid-wrapper row-depth-1 row-number-1 ">
<div class="row-fluid ">
<div class="span12 widget-span widget-type-custom_widget " style="" data-widget-type="custom_widget" data-x="0" data-w="12">
<div id="hs_cos_wrapper_module_16036762394194314" class="hs_cos_wrapper hs_cos_wrapper_widget hs_cos_wrapper_type_module" style="" data-hs-cos-general-type="widget" data-hs-cos-type="module"><!-- FOOTER -->

<footer class="cr-section cr-footer cr-footer__full">
    <div class="container page-center">
      <div class="columns">
          <div class="column is-6-fullhd is-5-desktop cr-footer__col cr-footer__left">
            <div class="cr-footer__Left-logo">
              
                <a href="https://www.cybereason.com">
                  
                <img src="https://www.cybereason.com/hubfs/dam/images/images-web/logos/cr-brand/cr-logo-inline--primary-white.png">
              </a>
            </div>
          </div>
          <div class="columns column is-6-fullhd is-6-desktop cr-footer__col cr-footer__right">
            <div class="cr-footer__links-list column">
              <h4>About</h4>
              <ul>
                <li><a href="https://www.cybereason.com/company/who-we-are">Who We Are</a>
                </li><li><a href="https://www.cybereason.com/company/careers">Careers</a>
          <!-- </li><li><a href="https://www.cybereason.com/company/leadership">Leadership</a> --->
                </li><li><a href="https://www.cybereason.com/company/contact-us">Contact</a>
              </li></ul>
            </div>
            <div class="cr-footer__links-list column">
              <h4>Resources</h4>
              <ul>
                <li><a href="https://www.cybereason.com/blog">Blog</a></li>
                <li><a href="https://www.cybereason.com/resources/tag/case-study">Case Studies</a></li>
                <li><a href="https://www.cybereason.com/resources/tag/webinars">Webinars</a></li>
                <li><a href="https://www.cybereason.com/resources/tag/white-papers">White Papers</a></li>
             </ul>
            </div>
            <div class="cr-footer__links-list column">
              <h4>Platform</h4>
              <ul>
                
                <li><a href="https://www.cybereason.com/platform">Overview</a></li>
                <li><a href="https://www.cybereason.com/platform/endpoint-prevention">Endpoint Protection</a></li>
                <li><a href="https://www.cybereason.com/platform/endpoint-detection-response-edr">EDR</a></li>
                <li><a href="https://www.cybereason.com/platform/managed-detection-response-mdr">MDR</a></li>
              </ul>
            </div>
          </div>
      </div>
    </div>
  
    <div class="container page-center">
      <div class="columns cr-footer__bottom-bar">
        <div class="column">
          <p>©Cybereason 2025. All Rights Reserved.</p>
        </div>
        <div class="column bottom-bar__links">
          <ul>
            <li><a href="https://www.cybereason.com/terms-of-use">Terms of Use</a></li>
            <li><a href="https://www.cybereason.com/privacy-notice">Privacy Notice</a></li>
            <li><a href="https://www.cybereason.com/ccpa-privacy-request">Do Not Sell</a></li>
            <li><a href="https://www.cybereason.com/security">Security</a></li>
            <!--<li><a href="#">Cookie Policy</a></li>-->
          </ul>
        </div>

        <div class="column bottom-bar__social">
          <ul>
            <li><a class="facebook" href="https://www.facebook.com/Cybereason/"></a></li>
            <li><a class="twitter" href="https://twitter.com/cybereason"></a></li>
            <li><a class="youtube" href="https://www.youtube.com/channel/UCOm7AaB0HiNH4Phe66sK0Ew"></a></li>
            <li><a class="linkedin" href="https://www.linkedin.com/company/cybereason"></a></li>
            <li><a class="instagram" href="https://www.instagram.com/cybereason"></a></li>
          </ul>
        </div>
    </div>
  </div>

</footer></div>

</div><!--end widget-span -->
</div><!--end row-->
</div><!--end row-wrapper -->

    </div><!--end footer -->
</div><!--end footer wrapper -->

    
<!-- HubSpot performance collection script -->
<script defer src="/hs/hsstatic/content-cwv-embed/static-1.1293/embed.js"></script>
<script src="https://www.cybereason.com/hs-fs/hubfs/hub_generated/template_assets/1/42507089303/1741528346196/template_animatedModal.min.js"></script>
<script>
var hsVars = hsVars || {}; hsVars['language'] = 'en';
</script>

<script src="/hs/hsstatic/cos-i18n/static-1.53/bundles/project.js"></script>
<script src="https://www.cybereason.com/hs-fs/hubfs/hub_generated/module_assets/1/41681847227/1741488491170/module_CR_-_Malicious_Life_Network_--_Tier_One_Header.min.js"></script>
<script src="https://www.cybereason.com/hs-fs/hubfs/hub_generated/module_assets/1/41682410610/1741488492472/module_CR_-_Malicious_Life_Network_--_Main_Hero.min.js"></script>
<script src="https://www.cybereason.com/hs-fs/hubfs/hub_generated/module_assets/1/48386556055/1741488537305/module_CR_-_HTML_PopUp_Window_--_IOCs.min.js"></script>
<script src="https://www.cybereason.com/hs-fs/hubfs/hub_generated/module_assets/1/43300360745/1741488505140/module_CR_-_Malicious_Life_Network_--_Related_Posts.min.js"></script>
<script src="https://www.cybereason.com/hs-fs/hubfs/hub_generated/module_assets/1/86933076631/1741488758324/module_CR_-_Sticky_CTA_Bar.min.js"></script>

<!-- Start of HubSpot Analytics Code -->
<script type="text/javascript">
var _hsq = _hsq || [];
_hsq.push(["setContentType", "blog-post"]);
_hsq.push(["setCanonicalUrl", "https:\/\/www.cybereason.com\/blog\/operation-cuckoobees-a-winnti-malware-arsenal-deep-dive"]);
_hsq.push(["setPageId", "71992970063"]);
_hsq.push(["setContentMetadata", {
    "contentPageId": 71992970063,
    "legacyPageId": "71992970063",
    "contentFolderId": null,
    "contentGroupId": 5272851739,
    "abTestId": null,
    "languageVariantId": 71992970063,
    "languageCode": "en",
    
    
}]);
</script>

<script type="text/javascript" id="hs-script-loader" async defer src="/hs/scriptloader/3354902.js"></script>
<!-- End of HubSpot Analytics Code -->


<script type="text/javascript">
var hsVars = {
    render_id: "1f83de32-05f7-4fc2-8a3c-0d30cabbbd67",
    ticks: 1747375896421,
    page_id: 71992970063,
    
    content_group_id: 5272851739,
    portal_id: 3354902,
    app_hs_base_url: "https://app.hubspot.com",
    cp_hs_base_url: "https://cp.hubspot.com",
    language: "en",
    analytics_page_type: "blog-post",
    scp_content_type: "",
    
    analytics_page_id: "71992970063",
    category_id: 3,
    folder_id: 0,
    is_hubspot_user: false
}
</script>


<script defer src="/hs/hsstatic/HubspotToolsMenu/static-1.432/js/index.js"></script>

<script>if ($('[id^="hs_form"]').length > 0) {
  var myInterval = setInterval(
  function() {
    var myFields = document.getElementsByClassName('hs-input');
    if (myFields.length > 0) {
      clearInterval(myInterval);
      for (var i = 0; i < myFields.length; i++) {
        var myField = myFields[i];
		var myTagName = myField.tagName.toLowerCase();
        if (myTagName == 'input' || myTagName == 'textarea') {
          if (myField.placeholder != null) {
            myField.placeholder = myField.placeholder.replace('*', '');
          }
        } else if (myTagName == 'select') {
          myField.options[0].innerHTML = myField.options[0].innerHTML.replace('*', '');
        }
      }
    }
  }, 100);
}
</script>

<div id="fb-root"></div>
  <script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_GB/sdk.js#xfbml=1&version=v3.0";
  fjs.parentNode.insertBefore(js, fjs);
 }(document, 'script', 'facebook-jssdk'));</script> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
 


    <script>
function sticky_relocate() {
  var window_top = $(window).scrollTop();
  var div_top = $('#sticky-anchor').offset().top;
  if (window_top > div_top) {
    $('#sticky').addClass('stick');
  } else {
    $('#sticky').removeClass('stick');
  }
}

$(function() {
  $(window).scroll(sticky_relocate);
  sticky_relocate();
});
</script>
    <!-- Generated by the HubSpot Template Builder - template version 1.03 -->

<script type="text/javascript" src="/_Incapsula_Resource?SWJIYLWA=719d34d31c8e3a6e6fffd425f7e032f3&ns=2&cb=1489574539" async></script></body></html>