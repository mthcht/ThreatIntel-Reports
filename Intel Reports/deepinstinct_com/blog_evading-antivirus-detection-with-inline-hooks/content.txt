<!DOCTYPE html><html class="scroll-smooth" lang="en"><head><meta charSet="utf-8"/><title>Evading EDR Detection with Reentrancy Abuse | Deep Instinct</title><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/><meta name="description" content="In this blog, we’ll explore a new way to exploit reentrancy that can be used to evade the behavioral analysis of EDR and legacy antivirus products."/><link type="text/css" rel="stylesheet" data-href="https://use.typekit.net/zka3qml.css" data-optimized-fonts="true"/><link href="https://www.deepinstinct.com/blog/evading-antivirus-detection-with-inline-hooks" rel="canonical"/><link href="https://www.deepinstinct.com/blog/evading-antivirus-detection-with-inline-hooks" hrefLang="x-default" rel="alternate"/><link href="https://www.deepinstinct.com/blog/evading-antivirus-detection-with-inline-hooks" hrefLang="en" rel="alternate"/><link href="https://www.deepinstinct.com/ja/blog/evading-antivirus-detection-with-inline-hooks" hrefLang="ja" rel="alternate"/><meta property="og:title" content="Evading EDR Detection with Reentrancy Abuse | Deep Instinct"/><meta property="og:description" content="In this blog, we’ll explore a new way to exploit reentrancy that can be used to evade the behavioral analysis of EDR and legacy antivirus products."/><meta property="og:url" content="https://www.deepinstinct.com/blog/evading-antivirus-detection-with-inline-hooks"/><meta property="og:image" content="https://www.deepinstinct.com/image/bltaa029c1153159140/61767a12b05858694858cd3d/API-blog.png"/><meta property="og:site_name" content="Deep Instinct"/><meta property="article:published_time" content="2021-10-27T15:00:00.000Z"/><meta property="article:modified_time" content="2022-06-02T15:43:08.477Z"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:site" content="@DeepInstinctSec"/><meta name="twitter:title" content="Evading EDR Detection with Reentrancy Abuse | Deep Instinct"/><meta name="twitter:description" content="In this blog, we’ll explore a new way to exploit reentrancy that can be used to evade the behavioral analysis of EDR and legacy antivirus products."/><meta name="twitter:image" content="https://www.deepinstinct.com/image/bltaa029c1153159140/61767a12b05858694858cd3d/API-blog.png"/><meta class="swiftype" name="title" data-type="string" content="Evading EDR Detection with Reentrancy Abuse | Deep Instinct"/><meta class="swiftype" name="description" data-type="string" content="In this blog, we’ll explore a new way to exploit reentrancy that can be used to evade the behavioral analysis of EDR and legacy antivirus products."/><meta class="swiftype" name="language" data-type="string" content="en"/><meta class="swiftype" name="last_modified" data-type="date" content="2022-06-02T15:43:08.477Z"/><script type="application/ld+json">
{
  "@context":"https://schema.org",
  "@graph":[
    {
      "@type":"WebSite",
      "@id":"https://www.deepinstinct.com/#website",
      "url":"https://www.deepinstinct.com/",
      "name":"Deep Instinct",
      "description":"The Deep Learning AI Cybersecurity Platform, Offering Cyber Threat Prevention Solutions.",
      "inLanguage":"en"
    },
    {
      "@type":"WebPage",
      "@id":"https://www.deepinstinct.com/blog/evading-antivirus-detection-with-inline-hooks#webpage",
      "url":"https://www.deepinstinct.com/blog/evading-antivirus-detection-with-inline-hooks",
      "name":"Evading EDR Detection with Reentrancy Abuse | Deep Instinct",
      "isPartOf":{"@id":"https://www.deepinstinct.com/#website"},
      "datePublished":"2021-10-27T15:00:00.000Z",
      "dateModified":"2022-06-02T15:43:08.477Z",
      "description":"In this blog, we’ll explore a new way to exploit reentrancy that can be used to evade the behavioral analysis of EDR and legacy antivirus products.",
      "inLanguage":"en"
    }
  ]
}
  </script><script src="https://www.googleoptimize.com/optimize.js?id=OPT-P298HTJ"></script><link rel="apple-touch-icon" sizes="180x180" href="/favicon/apple-touch-icon.png"/><link rel="icon" type="image/png" sizes="32x32" href="/favicon/favicon-32x32.png"/><link rel="icon" type="image/png" sizes="16x16" href="/favicon/favicon-16x16.png"/><link rel="mask-icon" href="/favicon/safari-pinned-tab.svg" color="#5bbad5"/><meta name="msapplication-TileColor" content="#da532c"/><meta name="theme-color" content="#ffffff"/><meta name="next-head-count" content="33"/><script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
  new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
  j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
  'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
  })(window,document,'script','dataLayer','GTM-52PC3MW');
  function getUTMParams() {
      let params = new URLSearchParams(window.location.search);
      let utmGA = params.get('_ga');
      let utmCampaign = params.get('utm_campaign');
    
      if(utmGA || utmCampaign) {
        localStorage.setItem('utm_ga', utmGA);
        localStorage.setItem('utm_campaign', utmCampaign);
        return true;
      }
      return false;
  }
  function sendUTMEvent() {
    if (getUTMParams()) {

      var utmGA = localStorage.getItem('utm_ga') || 'unknown';
      var utmCampaign = localStorage.getItem('utm_campaign') || 'unknown';
      
      // Send an event to Google Analytics
      ga('send', 'event', 'UTM Tracking', 'view', {
        eventCategory: 'UTM Tracking',
        eventAction: 'View',
        eventLabel: 'Landing Page',
        dimension1: utmGA,
        dimension3: utmCampaign
      });
    }
  }
  sendUTMEvent() 
</script><link rel="preload" href="/_next/static/media/47cbc4e2adbc5db9-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/_next/static/css/0eaf1c84d529a295.css" as="style"/><link rel="stylesheet" href="/_next/static/css/0eaf1c84d529a295.css" data-n-g=""/><link rel="preload" href="/_next/static/css/f22a9d581aff65f4.css" as="style"/><link rel="stylesheet" href="/_next/static/css/f22a9d581aff65f4.css" data-n-p=""/><link rel="preload" href="/_next/static/css/310587aa4304c3a4.css" as="style"/><link rel="stylesheet" href="/_next/static/css/310587aa4304c3a4.css"/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/_next/static/chunks/polyfills-42372ed130431b0a.js"></script><script id="Cookiebot" src="https://consent.cookiebot.com/uc.js" data-cbid="000353a0-bc31-4071-a34b-8905de7b1675" data-blockingmode="auto" defer="" data-nscript="beforeInteractive"></script><script defer="" src="/_next/static/chunks/5935-ad8b855a195d7b49.js"></script><script defer="" src="/_next/static/chunks/2340.2afed23a8b10b687.js"></script><script src="/_next/static/chunks/webpack-39f01f08943a0d91.js" defer=""></script><script src="/_next/static/chunks/framework-945b357d4a851f4b.js" defer=""></script><script src="/_next/static/chunks/main-bf258674729b9df5.js" defer=""></script><script src="/_next/static/chunks/pages/_app-d06d629a270ddaad.js" defer=""></script><script src="/_next/static/chunks/6893-4081578af77abe03.js" defer=""></script><script src="/_next/static/chunks/1419-288535b9b75afe5b.js" defer=""></script><script src="/_next/static/chunks/5107-87a891dcf6f2c070.js" defer=""></script><script src="/_next/static/chunks/5730-ab6d30300a7cfe3d.js" defer=""></script><script src="/_next/static/chunks/2282-b24e688cf725f356.js" defer=""></script><script src="/_next/static/chunks/pages/blog/%5Bpid%5D-7a96a2308e4b4992.js" defer=""></script><script src="/_next/static/sIJhGDAZlXX61-Tl8bFHt/_buildManifest.js" defer=""></script><script src="/_next/static/sIJhGDAZlXX61-Tl8bFHt/_ssgManifest.js" defer=""></script><link rel="stylesheet" href="https://use.typekit.net/zka3qml.css"/></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-52PC3MW" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><style>
        :root {
          --font-roboto: '__Roboto_4db51b', '__Roboto_Fallback_4db51b';
          --font-notosansjp: '__Noto_Sans_JP_0f79d0', '__Noto_Sans_JP_Fallback_0f79d0';
        }</style><div class="page"><div class="site-wide-alert bg-blue"><div class="container--full"><div class="container"><div class="site-wide-alert__content text-center py-2"><h2 class="site-wide-alert__title text-m my-1 mr-3 inline-block text-white">Announcing DSX for Cloud - Amazon S3, natively integrated zero-day data security for AWS S3.</h2><a class="inline-block font-bold uppercase text-cta tracking-widder undefined button_btn--link__RQBF4 undefined button_btn--arrow-yellow__LVTTd text-yellow" href="/news/deep-instinct-extends-zero-day-data-security-capabilities-to-amazon-s3">Learn More<i class="button_btn__icon__m_ZnD"><svg width="16" height="10" viewBox="0 0 16 10" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><g stroke="currentColor"><path d="M10 2l4 3-4 3M13 5H0"></path></g><defs><clipPath id="clip0"><path fill="currentColor" d="M0 0h15v9H0z" transform="rotate(-180 8 5)"></path></clipPath></defs></svg></i></a></div></div></div></div><header class="header top-0 z-50 relative header_header__ts5le header_white__g4PkN sticky"><div id="header-inner" class="header-inner pt-4 pb-3 lg:pt-6 lg:pb-5 w-full header_header-inner___UpZ4"><div data-focus-guard="true" tabindex="-1" style="width:1px;height:0px;padding:0;overflow:hidden;position:fixed;top:1px;left:1px"></div><div data-focus-lock-disabled="disabled"><div class="lg:flex lg:justify-between container relative header_header-wrap__n6kfO"><div class="flex justify-between lg:items-center"><a aria-label="to home page" class="logo_logo-wrap__H2Rxo" href="/"><svg width="135" height="67" viewBox="0 0 994 471.4" class="icon inline-block align-middle relative z-50 logo_logo__PUfyf" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M964.49 294.51h1.38v-16.97h6.88v-1.38h-15.14v1.38h6.88v16.97zM31.01 309.46h42.48v161.19H31.01z" fill="currentColor"></path><path d="M226.82 324.53c-10.25-8.72-27.69-13.27-53.1-13.27h-82.3v161.19h42.85V345.77h36c13.65 0 21.24 1.14 25 4.93 4.55 4.55 6.83 12.52 6.83 24.65v97.1h40.58V370c.07-21.2-5.24-36-15.86-45.47Z" fill="currentColor" transform="translate(-3 -1.8)"></path><path d="M521.06 309.46h42.85v161.19h-42.85z" fill="currentColor"></path><path d="M714.6 324.53c-10.25-9.1-26.94-13.27-52-13.27h-81.13v161.19h39.45V345.77h38.3c12.9 0 20.1 1.14 23.89 4.93 4.18 4.18 6.07 11.38 6.07 24.65v97.1h40.21V370c0-22-4.55-36.75-14.79-45.47ZM939.74 277.51h-40.59v33.37h-73.57c-15.17 0-26.55.77-36 3.8a62.75 62.75 0 0 0-25 15.17 74.23 74.23 0 0 0-17.83 27.69 99.23 99.23 0 0 0-6.45 35.64 92.67 92.67 0 0 0 6.45 34.14 75.85 75.85 0 0 0 17.83 27.31c6.45 6.07 14 10.24 24.65 14 9.48 3 21.62 3.8 36.79 3.8h57.65v-34.49h-44.44c-12.13 0-19.34-.38-23.89-1.14s-10.62-2.28-14-4.18c-6.82-4.17-10.24-6.07-13.27-12.89-3.41-6.82-4.93-15.55-4.93-26.17 0-18.58 4.17-31.49 12.13-39.07 8.34-7.58 23.51-8.34 44-8.34h60.31v78.12c0 16.31 3.8 27.69 12.13 36.79 8 8.35 19 12.14 36 12.14H986v-28.07h-15.92c-11 0-19-2.64-23.51-7.58-4.55-5.31-6.83-14.41-6.83-26.92v-64.1h49.69V312h-49.69ZM464.36 272.9l-40.58 24.29v12.92H309.63c-20.48 0-34.51 4.17-43.62 12.13-9.11 8.34-13.66 20.85-13.66 38.31s3.8 29.58 11.38 36c7.59 6.83 22.76 10.24 44.76 10.24h37.93c9.1 0 15.17 1.15 19 3.8 4.17 3 6.45 7.59 6.45 13.65s-2.28 10.24-6.45 13.27c-4.55 3-11.75 3.8-19 3.8h-90.65v30.72h111.51c13.66 0 23.52-4.17 31.49-12.89 8.34-9.49 12.51-21.24 12.51-36 0-15.56-4.55-26.56-14-34.9-8.72-8-22-11.38-40.58-11.38h-39.85c-8.73 0-14-2.65-16.69-4.55-3.79-2.65-5.69-7.58-5.69-13.27 0-6.45 2.28-10.62 6.45-13.27 3.8-2.28 12.52-3.41 25.41-3.41h97.09v81.16c0 16.31 3.79 28.07 12.14 36.79 8 8.34 18.95 12.14 35.64 12.14l38.68-.07v-28.77h-16.31c-11 0-18.59-2.66-23.13-8-4.55-4.93-6.45-14-6.45-26.93v-67.09h45.89v-31.48h-45.52ZM995 277.5c-.92 0-1.46.51-1.91 1.89 0 0-5 14.92-6 14.92s-6-14.92-6-14.92c-.47-1.37-1-1.89-1.92-1.89-2.29 0-2 1.84-2 1.84v17h1.38v-17c0-.46.77-.9 1.29.15s5.17 16.81 7.26 16.81 6.74-15.75 7.27-16.81 1.29-.62 1.29-.15v17H997v-17s.26-1.84-2-1.84Z" fill="currentColor" transform="translate(-3 -1.8)"></path><path d="M503.43 77.18h-80.3v204.67L464 257.23v-21.32h37.12c15.91 0 28.79-1.9 38.26-5.68a58.4 58.4 0 0 0 24.63-18.56 73 73 0 0 0 12.87-23.86 99.81 99.81 0 0 0 4.21-28.81c-.39-25.77-7.21-45.85-20.84-60.25s-32.59-21.57-56.82-21.57ZM526.91 192c-7.2 7.19-19.7 11-36.75 11h-26.52v-92.86h29.93c16.29 0 28 3.41 34.47 10.23 6.82 6.82 9.85 18.56 9.85 34.85.01 17.43-3.78 29.55-10.98 36.78ZM228.4 110.14a46 46 0 0 1 46.21 44.32l.38 4.17a87.25 87.25 0 0 0 6.06 29.17 88 88 0 0 0 17.05 25.38 83.12 83.12 0 0 0 25.38 17 81.12 81.12 0 0 0 31.07 6.06h55.3v-33h-55.3A46 46 0 0 1 308.33 159l-.37-4.17a87.26 87.26 0 0 0-6.07-29.17 87.74 87.74 0 0 0-17-25.38 82.84 82.84 0 0 0-25.39-17 78.54 78.54 0 0 0-31.06-6.44H172v33.33h56.4Z" fill="currentColor" transform="translate(-3 -1.8)"></path><path d="m318.18 156 .38 4.16a27.28 27.28 0 0 0 2.27 11h89v-31.48h-93.17a118.19 118.19 0 0 1 1.52 16.32ZM264.77 161.28l-.38-4.17c-.37-6.06-1.89-12.12-5.3-17H172v31.44h93.19c-.05-3.83-.42-7.24-.42-10.27ZM315.54 132.49a46.41 46.41 0 0 1 39.4-22h54.91V77.18h-54.92a79.91 79.91 0 0 0-31.06 6.44 74.14 74.14 0 0 0-25 16.67 93.47 93.47 0 0 1 12.88 21.22 95 95 0 0 1 3.79 10.98ZM268.18 181a46.42 46.42 0 0 1-39.4 22h-56.71v32.56h56.7c11.37 0 21.59-1.89 31.06-6.06a74.14 74.14 0 0 0 25-16.67A93.47 93.47 0 0 1 272 191.57a43.64 43.64 0 0 1-3.82-10.57ZM159.48 235.52V1.8h-39.42v75.39H82.93c-15.91 0-28.79 1.89-38.26 5.68a58.32 58.32 0 0 0-24.62 18.56 73.06 73.06 0 0 0-12.88 23.86A99.76 99.76 0 0 0 3 154.08c0 25.38 6.82 45.84 20.45 59.85q20.46 21.6 56.82 21.59h79.21Zm-39.81-32.19H90.12c-16.28 0-27.65-3.4-34.47-10.23s-10.23-18.56-10.23-34.85c0-16.67 3.79-29.17 11-36.37s19.71-11 37.13-11h26.14Z" fill="currentColor" transform="translate(-3 -1.8)"></path></svg></a><button data-autofocus="false" aria-label="open menu" class="bg-yellow items-center flex justify-center rounded-full z-50 lg:hidden button-menu_header__button__ym788"><span class="sr-only block">Open menu</span><span class="sr-only hidden">Close menu</span><span class="icon flex flex-col justify-center button-menu_icon-wrap__y2ev2"><span class="block"></span><span class="block"></span><span class="block"></span></span></button></div><div class="hidden"><nav><ul class="main-menu lg:relative lg:flex justify-end items-baseline main_wrap__wT1ud"></ul></nav><div class="lg:flex justify-end mt-8 pt-4 lg:mt-0 lg:pt-0 border-t border-white lg:border-0 lg:mb-2"><nav class="header-secondary"><ul class="flex lg:block justify-around mb-5 lg:mb-0"><li class="lg:ml-9 inline-block hover:underline"><span><a class="link--secondary capitalize text-menu-sm font-semibold lg:mb-3" href="/partners">Partners</a></span></li><li class="lg:ml-9 inline-block hover:underline"><span><a class="link--secondary capitalize text-menu-sm font-semibold lg:mb-3" target="_blank" rel="noopener" href="https://portal.deepinstinct.com">Login</a></span></li></ul></nav><nav class="language-switcher lg:ml-9"><ul></ul></nav><div class="relative lg:ml-5 lg:w-5"><div class="hidden absolute w-full -top-1 lg:-right-0"><div class="relative"><form><input type="text" placeholder="Search..." class="st-default-search-input w-56 HeaderSearch_header-search-icon__3pO2z"/></form><div class="absolute w-full z-50 bg-white text-blue rounded py-2 px-5 HeaderSearch_header-search-results__LbnDx">Please enter keyword to search.</div></div></div><button class="mb-3 ml-3 absolute right-5 lg:right-3 top-1 lg:ml-0 lg:top-0 z-10"><svg width="16" height="16" viewBox="0 0 16 16" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M15.3169 13.9331L11.5862 10.2025C12.6029 8.95914 13.1027 7.37257 12.9824 5.77099C12.8621 4.16941 12.1307 2.67535 10.9397 1.59784C9.74871 0.520335 8.18911 -0.058176 6.58351 -0.0180311C4.97792 0.0221137 3.44918 0.677843 2.31349 1.81352C1.17781 2.94921 0.522083 4.47795 0.481938 6.08354C0.441793 7.68914 1.0203 9.24874 2.09781 10.4398C3.17532 11.6308 4.66938 12.3621 6.27096 12.4824C7.87254 12.6028 9.45911 12.1029 10.7025 11.0863L14.4331 14.8169C14.551 14.9307 14.7089 14.9937 14.8727 14.9923C15.0366 14.9909 15.1934 14.9252 15.3092 14.8093C15.4251 14.6934 15.4909 14.5366 15.4923 14.3728C15.4937 14.2089 15.4307 14.051 15.3169 13.9331ZM6.74999 11.25C5.76108 11.25 4.79438 10.9568 3.97213 10.4074C3.14989 9.85796 2.50903 9.07706 2.13059 8.16343C1.75215 7.2498 1.65313 6.24447 1.84606 5.27456C2.03899 4.30466 2.51519 3.41374 3.21445 2.71448C3.91371 2.01522 4.80463 1.53902 5.77453 1.34609C6.74444 1.15316 7.74977 1.25218 8.6634 1.63062C9.57703 2.00906 10.3579 2.64992 10.9073 3.47216C11.4567 4.29441 11.75 5.26111 11.75 6.25002C11.7485 7.57564 11.2212 8.84655 10.2839 9.78391C9.34652 10.7213 8.07561 11.2485 6.74999 11.25Z" fill="currentColor"></path></svg></button></div></div></div></div></div><div data-focus-guard="true" tabindex="-1" style="width:1px;height:0px;padding:0;overflow:hidden;position:fixed;top:1px;left:1px"></div></div></header><main role="main"><div class="blog-content BlogContent_blog-content__xmvuQ"><div class="blog-header"><div class="blog-header__image relative"><div class="absolute left-0 top-0 w-full h-4/5 bg-blue"></div><div class="container mx-auto"><div class="blog-header__image max-w-blog w-full mx-auto relative z-1 pt-9 mb-12"><a class="inline-block font-bold uppercase text-cta tracking-widder undefined button_btn--link__RQBF4 undefined button_btn--arrow-left__8dYK2 undefined button_btn--arrow-left-blue__c3n8m px-3.5 py-4 absolute left-0 z-1 uppercase !tracking-widest hover:underline bg-yellow text-blue BlogHeader_blog-header__back__Ju0lb" href="/blog">Back To Blog<i class="button_btn__icon__m_ZnD"><svg width="16" height="10" viewBox="0 0 16 10" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><g stroke="currentColor"><path d="M10 2l4 3-4 3M13 5H0"></path></g><defs><clipPath id="clip0"><path fill="currentColor" d="M0 0h15v9H0z" transform="rotate(-180 8 5)"></path></clipPath></defs></svg></i></a><img alt="Understanding and Preventing Re-Entry Abuse Blog" title="Understanding and Preventing Re-Entry Abuse Blog" aria-hidden="true" loading="lazy" width="930" height="400" decoding="async" data-nimg="1" style="color:transparent;width:100%;height:auto;object-fit:cover" sizes="100vw" srcSet="/_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fbltaa029c1153159140%2F61767a12b05858694858cd3d%2FAPI-blog.png&amp;w=640&amp;q=100 640w, /_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fbltaa029c1153159140%2F61767a12b05858694858cd3d%2FAPI-blog.png&amp;w=768&amp;q=100 768w, /_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fbltaa029c1153159140%2F61767a12b05858694858cd3d%2FAPI-blog.png&amp;w=1024&amp;q=100 1024w, /_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fbltaa029c1153159140%2F61767a12b05858694858cd3d%2FAPI-blog.png&amp;w=1200&amp;q=100 1200w, /_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fbltaa029c1153159140%2F61767a12b05858694858cd3d%2FAPI-blog.png&amp;w=1400&amp;q=100 1400w, /_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fbltaa029c1153159140%2F61767a12b05858694858cd3d%2FAPI-blog.png&amp;w=1680&amp;q=100 1680w, /_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fbltaa029c1153159140%2F61767a12b05858694858cd3d%2FAPI-blog.png&amp;w=1920&amp;q=100 1920w, /_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fbltaa029c1153159140%2F61767a12b05858694858cd3d%2FAPI-blog.png&amp;w=2048&amp;q=100 2048w, /_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fbltaa029c1153159140%2F61767a12b05858694858cd3d%2FAPI-blog.png&amp;w=3840&amp;q=100 3840w" src="/_next/image?url=https%3A%2F%2Fwww.deepinstinct.com%2Fimage%2Fbltaa029c1153159140%2F61767a12b05858694858cd3d%2FAPI-blog.png&amp;w=3840&amp;q=100"/></div></div></div><div class="blog-header__content container mx-auto mb-12"><div class="max-w-blog w-full mx-auto pb-9 border-b-2 border-grey"><div class="flex justify-between mb-12"><div class="font-sans font-bold text-sm tracking-widest pt-2"><svg width="108" height="74" viewBox="0 0 108 74" class="icon inline-block align-middle w-3 h-auto text-blue mr-2 pb-0.5" preserveAspectRatio="xMaxYMax meet" focusable="false"><path fill="currentColor" d="M44.4768 35.7511l.1732 1.9185c.1506 4.5919 1.1008 9.1233 2.8086 13.3936 1.9192 4.3149 4.5894 8.2604 7.8879 11.656 3.3942 3.3069 7.3765 5.9611 11.7452 7.828 4.5389 1.9426 9.4284 2.9494 14.3714 2.9593h26.1259V58.1943H81.4631c-5.5289.025-10.8511-2.0845-14.8415-5.8825-3.9904-3.798-6.3365-8.987-6.5423-14.4702l-.1733-1.9186c-.1506-4.5918-1.1008-9.1232-2.8086-13.3935-1.9249-4.3117-4.5944-8.2564-7.8879-11.656-3.3912-3.31055-7.3743-5.96513-11.7452-7.82796C32.9045 1.18953 28.0212.242402 23.0929.258217L-1363.38.258097V15.3982l1386.4729.0001c5.5289-.0249 10.8511 2.0846 14.8415 5.8826 3.9904 3.798 6.3366 8.987 6.5424 14.4702z"></path><path fill="currentColor" d="M39.9171 37.1447l-.1733-1.9095c.0089-1.7374-.3483-3.4574-1.0487-5.0497l-1402.0751-.0001v14.4795l1403.9991.0001c-.4051-2.4759-.6396-4.9765-.702-7.4841M64.4654 30.0136c0 1.7375.1733 3.3031.1733 4.6968l.1732 1.9095c.0892 2.7814.9371 5.4868 2.4531 7.828h40.324V30.0136H64.4654zM63.0609 25.6608c1.9239-3.0828 4.6085-5.6274 7.7999-7.3932 3.1914-1.7657 6.7841-2.6941 10.4379-2.6973h26.2993V.611107L81.2439.611105c-4.9345-.082349-9.8312.867315-14.3714 2.787275-4.3397 1.74338-8.2745 4.34875-11.5627 7.65612 2.4133 2.9712 4.4158 6.2491 5.9546 9.7466.7914 1.5385 1.3799 3.1719 1.7508 4.8597M22.8829 73.3344c4.9442-.0262 9.8334-1.0323 14.3805-2.9592 4.3379-1.7468 8.272-4.3517 11.5628-7.6561-2.4166-2.969-4.4193-6.2472-5.9546-9.7464-.6902-1.6429-1.278-3.3263-1.76-5.0407-1.9239 3.0827-4.6085 5.6274-7.8 7.3931-3.1914 1.7657-6.784 2.6941-10.4379 2.6973l-1386.2537-.0001v15.312l1386.2629.0001z"></path></svg>OCTOBER 27, 2021</div><div class="social-share SocialShare_social-share__4Q7V0"><button aria-label="linkedin" class="react-share__ShareButton social-share__btn linkedin hover:opacity-80" style="background-color:transparent;border:none;padding:0;font:inherit;color:inherit;cursor:pointer"><svg width="22" height="22" viewBox="0 0 22 22" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M4.58333 2.3913C4.58333 3.73043 3.575 4.78261 2.29167 4.78261C1.00833 4.78261 0 3.73043 0 2.3913C0 1.05217 1.00833 0 2.29167 0C3.575 0 4.58333 1.05217 4.58333 2.3913ZM4.58333 6.69565H0V22H4.58333V6.69565ZM11.9167 6.69565H7.33333V22H11.9167V13.9652C11.9167 9.46957 17.4167 9.08696 17.4167 13.9652V22H22V12.3391C22 4.78261 13.8417 5.06956 11.9167 8.8V6.69565Z" fill="currentColor"></path></svg></button><button aria-label="twitter" class="react-share__ShareButton social-share__btn twitter hover:opacity-80" style="background-color:transparent;border:none;padding:0;font:inherit;color:inherit;cursor:pointer"><svg width="23" height="19" viewBox="0 0 23 19" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M7.23329 19C15.9129 19 20.6595 11.6908 20.6595 5.35298C20.6595 5.14532 20.6553 4.93872 20.6459 4.73292C21.5673 4.05595 22.3683 3.21094 23 2.24946C22.1545 2.63129 21.2447 2.88841 20.2902 3.00434C21.2643 2.4106 22.0125 1.47093 22.3654 0.35098C21.4535 0.900584 20.4437 1.29996 19.3691 1.51533C18.5077 0.583106 17.2813 0 15.9244 0C13.3182 0 11.2048 2.14816 11.2048 4.79593C11.2048 5.17244 11.2464 5.53831 11.327 5.88956C7.40542 5.68934 3.92781 3.78048 1.60068 0.878514C1.19495 1.58712 0.961353 2.41086 0.961353 3.28911C0.961353 4.95308 1.79452 6.42214 3.06142 7.28178C2.28736 7.25758 1.56014 7.04114 0.924206 6.68165C0.92316 6.7016 0.92316 6.7218 0.92316 6.74281C0.92316 9.06593 2.55 11.0054 4.70893 11.4449C4.31261 11.5547 3.89564 11.6137 3.46505 11.6137C3.16108 11.6137 2.86548 11.5829 2.57799 11.5273C3.17861 13.4327 4.92082 14.8196 6.98635 14.8587C5.37102 16.1454 3.33635 16.9119 1.12563 16.9119C0.745015 16.9119 0.369369 16.8899 0 16.8455C2.08829 18.2058 4.56793 19 7.23329 19Z" fill="currentColor"></path></svg></button><button aria-label="facebook" class="react-share__ShareButton social-share__btn facebook hover:opacity-80" style="background-color:transparent;border:none;padding:0;font:inherit;color:inherit;cursor:pointer"><svg width="13" height="26" viewBox="0 0 13 26" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M3.25 8.66667H0V13H3.25V26H8.66667V13H12.5667L13 8.66667H8.66667V6.825C8.66667 5.85 8.88333 5.41667 9.85833 5.41667H13V0H8.88333C4.98333 0 3.25 1.73333 3.25 4.98333V8.66667Z" fill="currentColor"></path></svg></button></div></div><h1 class="text-h-md lg:text-h-lg mb-6">Evading EDR Detection with Reentrancy Abuse</h1><div class="blog-header__author mt-7 md:grid md:gap-4 md:grid-cols-3"><div class="mb-3 md:mb-0"><a class="author-teaser hover:underline AuthorTeaser_author-teaser__cItRk" href="/author/asaf-gilboa"><span class="author-teaser__image block"><img alt="Asaf Gilboa" loading="lazy" width="60" height="60" decoding="async" data-nimg="1" class="rounded-full overflow-hidden" style="color:transparent;max-width:100%;height:auto" srcSet="/_next/image?url=%2Fauthor-headshot-default.png&amp;w=64&amp;q=75 1x, /_next/image?url=%2Fauthor-headshot-default.png&amp;w=128&amp;q=75 2x" src="/_next/image?url=%2Fauthor-headshot-default.png&amp;w=128&amp;q=75"/></span><span class="author-teaser__content block text-m pt-2"><span class="font-semibold block">Asaf Gilboa</span><span class="block">Security Researcher</span></span></a></div></div></div></div></div><div class="text-block container--full"><div class="container mx-auto relative mb-6 lg:mb-10 overflow-hidden"><div class="max-w-blog w-full mx-auto TextBlock_text__JUObc"><div class="paragraph-item"><p>Cybercriminals have developed a diverse toolset to uncover vulnerabilities and repurpose existing software features to find entry points through cyber defenses. In this blog, we’ll explore a new way to exploit reentrancy that can be used to evade the behavioral analysis of EDR and legacy antivirus products.</p><p>While the technique we’ll examine focuses on a single-hooked API, this method of evasion can be used against almost any antivirus tool’s hooks by reverse-engineering the AV product to allow a bypass and custom-tailoring the bypass method.</p><p>Most antivirus and <a href="https://www.deepinstinct.com/endpoint-detection-response" target="_self">endpoint detection and response (EDR)</a> products focus on scanning and detection, with some leveraging additional capabilities on top of their file scanning mechanism to detect malicious activity.</p><p>One of these capabilities involves tracking processes in-memory through behavioral analysis or heuristics. In short, the antivirus solution will detect or prevent certain behaviors that are deemed to be malicious, such as dumping credentials from memory or injecting code into another process. Finding these malicious activities helps the antivirus software detect a threat that isn’t caught by the file-scanning capability. It is also useful when the file hash is not blacklisted, or the <a href="https://www.deepinstinct.com/prevent-fileless-malware" target="_self">attack is fileless</a>.</p><p>In order to find malicious behavior in process, an antivirus product will usually have its own DLL loaded into every process via its signed kernel driver on process startup. Once loaded, this DLL will then place hooks on the APIs that require tracking.</p><p>For code injection, kernel32.dll’s functions including “CreateRemoteThread,” “VirtualAllocEx,” and “WriteProcessMemory” will most frequently be used. Most of the time security vendors will prefer to hook the lowest-level API possible, such as hooking “NtWriteVirtualMemory” inside ntdll.dll instead of “WriteProcessMemory.” This is done for programs that do not call the higher-level APIs, which can limit the heuristics’ ability to catch malicious behavior.</p><h5>What is Inline Hooking?</h5><p>Userland hooks is a very popular way for antivirus tools to inspect the behavior of a process. Hooking is the process of intercepting a function call. As the guardian of the endpoint, intercepting calls to various APIs allows the antivirus product to not only detect, but also to prevent unwanted or suspicious activity. This is done most by inline hooking (sometimes known as detouring).</p><p><img data-image="qlu9mb7yhm24" src="https://www.deepinstinct.com/image/blt2713eaae59a43747/6178faf63ce65615842b4220/image.png" data-sys-asset-uid="blt2713eaae59a43747" alt="image.png"/></p><p></p><h5>Hooking and Reentrancy</h5><p>A very common problem that occurs when hooking Windows APIs is reentrancy. This occurs when a thread calls a hooked API, and the hook then calls another hooked API, or even that same hooked API (either directly or indirectly). This process can lead to unnecessary overhead—and can also lead to an infinite recursion.</p><p>Reentrancy issues are a significant challenge for antivirus tools because using hooks on every single process can cause severe stability issues, freezing, and other performance problems. A common approach to this is to be careful about what code to write in the hook itself and make sure to not call any other API (directly or indirectly); this method limits what behaviors can be monitored. However, a more elegant solution is simply to check for reentrancy. In this approach the hook’s trampoline will be called directly if reentrancy is detected, skipping whatever checks and logic the hook usually goes through in its process.</p><p>Below is a diagram to show the flow of a reentrancy-friendly hook:</p><p><img data-image="51fqvdrot7c9" src="https://www.deepinstinct.com/image/blt4afc4f4f72a4f7c3/6178fb1f5ae6d31579c1be3a/image.png" data-sys-asset-uid="blt4afc4f4f72a4f7c3" alt="image.png"/></p><h5>Technical Explanation</h5><h6>Locating Hooks</h6><p>For this next section we will play the part of the attacker and walk through the steps that one would take to evade antivirus with one line of code.</p><p>The first step to locate a hook is to determine what APIs are hooked. <a href="https://guidedhacking.com/resources/hookshark-hookshark64-download.30/" target="_blank" rel="noopener">HookShark</a> is a terrific tool to detect inline hooking. It provides a quick way to find what APIs a security vendor hooks.</p><p><img data-image="njhdtuf14rv8" src="https://www.deepinstinct.com/image/bltdfd1a29b7a2f5fbe/6178fb2fece6b40b35072700/image.png" data-sys-asset-uid="bltdfd1a29b7a2f5fbe" alt="image.png"/></p><p>For this example, when Notepad is launched, pressing “Scan this process” shows these results:</p><p><img data-image="iku7flg2ammy" src="https://www.deepinstinct.com/image/blt20ca12233b5bb43d/6178fb42c05249199df194b2/image.png" data-sys-asset-uid="blt20ca12233b5bb43d" alt="image.png"/></p><p>An API that caught our attention is NtWriteVirtualMemory, which is used for process injection techniques. As the attacker, we will determine if the antivirus would detect the attempt at process hollowing (using the project here:<a href="https://github.com/m0n0ph1/Process-Hollowing" target="_blank" rel="noopener"> https://github.com/m0n0ph1/Process-Hollowing</a>). As we can see, it was detected:</p><p><img data-image="m6avs4uscsv0" src="https://www.deepinstinct.com/image/blt85cd92a33044918f/6178fb542378d322b063398c/image.png" data-sys-asset-uid="blt85cd92a33044918f" alt="image.png"/></p><p>The second step is to determine where the hook sits. Luckily for us, the hook is inside the antivirus’ injected DLL – aswhook.dll.</p><p><img data-image="xwjvyni4jd2m" src="https://www.deepinstinct.com/image/blt530b79ae942221b3/6178fb60ece6b40b35072704/image.png" data-sys-asset-uid="blt530b79ae942221b3" alt="image.png"/></p><p><strong></strong></p><p><img data-image="3uch38rnstqh" src="https://www.deepinstinct.com/image/blt3920462f2ededd08/6178fb7e412fb409f16bf8b9/image.png" data-sys-asset-uid="blt3920462f2ededd08" alt="image.png"/></p><h6>Disassembling the Hook</h6><p>Now that we know what file to disassemble, it should be very easy to open IDA and locate the hook.</p><p>This is the function as seen in IDA:</p><p><img data-image="a8hpdtk536pb" src="https://www.deepinstinct.com/image/blt8d59730b365dd078/6178fb929778eb18575b37e8/image.png" data-sys-asset-uid="blt8d59730b365dd078" alt="image.png"/></p><p></p><p>Now, we know this a hook for the function “NtWriteVirtualMemory,” so this should be what the API looks like:</p><pre>NTSTATUSNtWriteVirtualMemory(<br/>          INHANDLEProcessHandle,<br/>          INPVOIDBaseAddress,<br/>          INPVOID Buffer,<br/>          INULONGNumberOfBytesToWrite,<br/>          INOUTPULONGNumberOfBytesWritten);</pre><p><br/>Now, we can simply change the function’s definition and name:<br/></p><p><img data-image="yz89k4qxtzeb" src="https://www.deepinstinct.com/image/blta35bc5a196d2f85f/6178fbaa16d29a13daa7b192/image.png" data-sys-asset-uid="blta35bc5a196d2f85f" alt="image.png"/></p><p>This will be easier to disassemble now that we know the type definitions of all the arguments.</p><p>The hook looks like this:</p><p></p><p><img src="https://www.deepinstinct.com/image/bltf4c058861f81b164/6179ae76c1c6cd50df579a20/blog-hook-start.jpg" height="auto" data-image="xit6w3385p4q"/></p><p></p><p>Here is the decompiled version:</p><p></p><p><img data-image="zetg0s7fuggd" src="https://www.deepinstinct.com/image/bltf80cea3fba15f9da/6178fc2c9778eb18575b37f2/image.png" data-sys-asset-uid="bltf80cea3fba15f9da" alt="image.png"/></p><p>As we can see, there are four conditional jumps being made before the hook logic starts. At least one of them should be the reentrancy check. If any of the conditions are met, the trampoline will be called directly, skipping the logic of the hook. As we see in the first screenshot, the first conditional jump checks whether ProcessHandle is a pseudo-handle (-1) to the current process. Since that isn’t very helpful, let’s see what the three other conditions are.</p><p><img data-image="7k0ht03xwr7u" src="https://www.deepinstinct.com/image/blt4b279d09d0983587/6178fc3ab3a30224326378ca/image.png" data-sys-asset-uid="blt4b279d09d0983587" alt="image.png"/></p><p>As we see in this screenshot, var_4 is a pointer to an integer. If sub_10006820 returns something other than 0x0, or if var_4 is NULL or the value inside var_4 is 0x1, a conditional jump will occur.</p><p>We can deduce that sub_10006820 sets the value of var_4, probably according to the value stored in dword_10008060. Let’s disassemble it:</p><p><img data-image="mopkmovtw3jb" src="https://www.deepinstinct.com/image/blt04762957afbb5612/6178fc447569022433507d17/image.png" data-sys-asset-uid="blt04762957afbb5612" alt="image.png"/></p><p>First, we know inside fs:18h is the TEB (Thread Environment Block), so after we added “_TEB” struct definition to IDA, we can now see something pretty interesting:</p><p><img data-image="xf0f4audn54a" src="https://www.deepinstinct.com/image/bltcc041fb9d5762845/6178fc5bc05249199df194b6/image.png" data-sys-asset-uid="bltcc041fb9d5762845" alt="image.png"/></p><p>In 0x10006837 we see that ecx is using an index in the TEB’s TlsSlots member. This refers to TLS – Thread Local Storage (see note #1).</p><p>The TEB.TlsSlots array size is 64. But what if a program wants to allocate a TLS slot in the 65th index? In 0x1000682F, we see ecx being compared to the value 64. So, this translates roughly to the following C code:</p><pre>if (*dword_10008060 &lt;= 64)<br/>      *arg_4 = TEB.TlsSlots[dword_10008060];</pre><p><br/>In 0x10006844 ecx is being compared to 1088. IDA doesn’t offer any known constants for this seemingly arbitrary value. If we continue with the disassembly, however, this makes more sense:</p><p><img data-image="w4ww493td64s" src="https://www.deepinstinct.com/image/blt0fcea1f8e2acbc93/6178fc7e2d2c9113dd588eeb/image.png" data-sys-asset-uid="blt0fcea1f8e2acbc93" alt="image.png"/></p><p></p><p>The instruction at 0x10006853 refers to edx again, which we know to be a pointer to TEB. This means that [edx+0F94h] translates to TEB.TlsExpansionSlots.</p><p>Going back to the previous question – if a program calls TlsAlloc() after all the slots of the TEB.TlsSlots array are already allocated, TlsAlloc() will internally allocate memory on the heap via RtlAllocateHeap() and set TEB.TlsExpansionsSlots member to that allocated memory’s address. This gives the thread an additional 1024 TLS slots it can use. If there’s an attempt to write to a TLS slot whose index is above 64, it will write to the allocated memory on the heap instead of the TEB.TlsSlots array.</p><p>So, now the number 1088 makes sense – it’s just the result of 1024 (number of available slots in the TlsExpansionSlots that are stored on the heap) + 64 (number of available slots in the TlsSlots that are stored directly inside the TEB). So, if the value stored in dword_10008060 is above 1088, it’s considered an illegitimate index.</p><p>While we may be tempted to propose a solution where our malicious program allocates all the 1088 TLS slots in order for this subroutine to return STATUS_INVALID_PARAMETER, this solution isn’t possible because the vendor’s DLL allocates an index once it loads into the process, which is too early for us to intercept.</p><p>Back to the code – if the conditional jump at 0x1000685B happens, the value inside arg_4 will be set to 0x0. This roughly translates to the following C code:</p><pre>if (TEB.TlsExpansionSlots == NULL)<br/>      *arg_4 = 0x0;</pre><p><br/>So now that we know how the value arg_4 is set, we can go back here:</p><p><img data-image="0rsb3lqfu4py" src="https://www.deepinstinct.com/image/bltd3902f1a8e117fe7/6178fd199778eb18575b37f6/image.png" data-sys-asset-uid="bltd3902f1a8e117fe7" alt="image.png"/></p><p>We now know that var_4 is the value stored in the TLS slot, so we’ll rename it TlsValue. We also know dword_10008060 is a pointer to a TLS index, so we’ll rename it g_TlsIndex.</p><p>This roughly translates to the following C code:</p><pre>PDWORD TlsValue;<br/>if (sub_10006820(g_TlsIndex, TlsValue) == 0 || TlsValue == NULL || *TlsValue == TRUE)<br/>      // Skip the hook’s logic</pre><p><br/>The instruction at 0x10002A81 sets the value stored at *TlsValue to 0x1. Later, we can see this value is set back to 0x0 (at 0x10002ABF):<br/></p><p><img data-image="yxo9igmaljsn" src="https://www.deepinstinct.com/image/bltf88cbaed666d5114/6178fd2f5ae6d31579c1be54/image.png" data-sys-asset-uid="bltf88cbaed666d5114" alt="image.png"/></p><p>To recap, the security vendor accesses a TLS slot via a global variable to store an address which points to a Boolean value, which, if set to FALSE will cause the code to perform the hook’s logic, and if it is TRUE, it will skip it and go straight to the trampoline. Once it finishes doing the hook’s logic it will reset the Boolean value back to FALSE.</p><h6>Exploiting the Reentrancy Mechanism</h6><p>If the g_TlsIndex is above 64, TlsExpansionSlots must be set to NULL so that TlsValue will also be set to NULL. If g_TlsIndex is 64 or below. TlsValue should be NULL or the Boolean value in the address stored inside of it must be set to TRUE.</p><p>Without knowing the value of g_TlsIndex we have no way of knowing which TLS slot to manipulate, so what should we do?</p><p>Our solution is to set all of the TLS slots and TlsExpansionSlots to NULL temporarily before a call to NtWriteVirtualMemory, and once we return from that call, we can restore all the TLS slots to their previous state. This is an easy solution that can be integrated with any malicious code; we simply have to slightly modify the source code of whatever offensive tools we want to use.</p><p>A more elegant solution would be to use a C++ object that will be allocated on the stack. What it will do in its constructor is back up the values of all the TLS slots and the pointer of TlsExpansionSlots and then set them all to NULL, and once its destructor is called then it will restore the original values of all of the TLS slots and the pointer of TlsExpansionSlots.</p><p>This action looks like this:</p><p><img data-image="4qll4tu9b605" src="https://www.deepinstinct.com/image/bltb65f93615bb6886a/6178fd3fb3a30224326378ce/image.png" data-sys-asset-uid="bltb65f93615bb6886a" alt="image.png"/></p><p>Whenever we want to call an API that we know is hooked, we will simply create a block of code around the call to that API. Creating a block of code guarantees that TlsKiller’s destructor will be called as soon as the hooked API is over. In our case we know that WriteProcessMemory ends up calling NtWriteVirtualMemory so we must put TlsKiller in the same block as WriteProcessMemory. For the sake of brevity one example is given:</p><p><img data-image="86n8g5ein5ab" src="https://www.deepinstinct.com/image/blte93574cc799398ba/6178fd4f3ce65615842b422c/image.png" data-sys-asset-uid="blte93574cc799398ba" alt="image.png"/></p><p>After re-compiling and running the executable, we get this:</p><p><img data-image="ln129groaw99" src="https://www.deepinstinct.com/image/blta1951d18dc9ccd06/6178fd58fdb9af22b36e3b86/image.png" data-sys-asset-uid="blta1951d18dc9ccd06" alt="image.png"/></p><p>No complaints from the Antivirus!</p><h6>One Line of Code to Evade Antivirus</h6><p>It seems that by simply adding one line of code before a call to a hooked API we were able to completely evade the antivirus tool’s behavioral analysis.</p><p>Depending on which attacks the antivirus aims to prevent with its memory heuristics it is possible to bypass whatever defense they will put up, as long as they use the same method of checking for reentrancy in their hooks.</p><p>Some antivirus products may devise their own methods to avoid reentrancy, and others might use TLS indexes too, which means they will also be susceptible to this attack. While they might do it differently (for example, not use the heap at all and just set the TLS slots as Boolean value or as an integer value), it will take very little effort to see if their hooks can be bypassed.</p><p>Other antivirus solutions might devise an entire mechanism altogether. It should also be noted that not all of the hooks placed by an antivirus have a mechanism to avoid reentrancy (for example NtProtectVirtualMemory is hooked but no check is done for reentrancy), so it is important to know which functions are affected by this.</p><h5>Conclusion:</h5><p>While Antivirus products have a high detection rate when it comes to known malware, they often prioritize stability first, requiring them to be compatible with edge-cases and overall performance. This lessens their security posture and opens up myriad possibilities for attackers. Therefore, a feature which was intended for stability can be re-purposed as a bypass method and open a path for intrusion and compromise. Further research will shed more light on which features of an antivirus can be abused.</p><p>If you’d like to learn more about Deep Instinct’s industry-leading approach to stopping malware, backed by a $3M guarantee, please download our new eBook, <a href="https://info.deepinstinct.com/tof/ransomware-prevention?_ga=2.190475299.904700770.1623078264-1598413446.1621950290" target="_blank" rel="noopener">Ransomware: Why Prevention is better than the Cure</a>.</p><h5>Note #1: TLS Slots</h5><p>TLS stands for “Thread Local Storage,” which some researchers might recognize by name as a known mechanism to run code before the PE’s entrypoint (TLS callbacks). This is, however, something else and unrelated.</p><p>Thread Local Storage is exactly what it sounds like – a place for threads to store their own local information in the TEB.TlsSlots array, which is an array of void pointers called TLS slots. Basically, that means that every thread has its own array which it can fill with values as it sees fit.</p><p>Since the mechanism is a bit more complicated than just accessing an array, there are 4 APIs that can be used for TLS:</p><p>TlsAlloc() – Allocates an index for the TLS. This index will be considered reserved and can be used by any thread to get and set their local values in their TEB.TlsSlots.</p><p>TlsFree(DWORD dwTlsIndex) – Releases the index allocated by TlsAlloc().</p><p>TlsGetValue(DWORD dwTlsIndex) – Returns the value stored in the thread’s TEB.TlsSlots[dwTlsIndex].</p><p>TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue) – Sets lpTlsValue as the value in TEB.TlsSlots[dwTlsIndex].</p><h5>References:</h5><ul><li><a href="https://docs.microsoft.com/en-us/windows/win32/procthread/thread-local-storage" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows/win32/procthread/thread-local-storage</a></li><li><a href="http://www.nynaeve.net/?p=181" target="_blank" rel="noopener">http://www.nynaeve.net/?p=181</a></li><li><a href="https://github.com/microsoft/detours/wiki/OverviewInterception" target="_blank" rel="noopener">https://github.com/microsoft/detours/wiki/OverviewInterception</a></li></ul><h2>Further Reading:</h2><ul><li><a href="https://www.deepinstinct.com/blog/new-fileless-attacks-found-in-event-logs" target="_self">https://www.deepinstinct.com/blog/new-fileless-attacks-found-in-event-logs</a></li></ul></div></div></div></div><div class="back-page container mx-auto"><div class="max-w-blog w-full mx-auto pt-9 border-t-2 border-blue"><div class="flex justify-between mb-12 md:mb-16"><a class="inline-block font-bold uppercase text-cta tracking-widder undefined button_btn--link__RQBF4 undefined button_btn--arrow-left__8dYK2 undefined button_btn--arrow-left-blue__c3n8m hover:underline mt-2" href="/blog">Back To Blog<i class="button_btn__icon__m_ZnD"><svg width="16" height="10" viewBox="0 0 16 10" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><g stroke="currentColor"><path d="M10 2l4 3-4 3M13 5H0"></path></g><defs><clipPath id="clip0"><path fill="currentColor" d="M0 0h15v9H0z" transform="rotate(-180 8 5)"></path></clipPath></defs></svg></i></a><div class="social-share SocialShare_social-share__4Q7V0"><button aria-label="linkedin" class="react-share__ShareButton social-share__btn linkedin hover:opacity-80" style="background-color:transparent;border:none;padding:0;font:inherit;color:inherit;cursor:pointer"><svg width="22" height="22" viewBox="0 0 22 22" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M4.58333 2.3913C4.58333 3.73043 3.575 4.78261 2.29167 4.78261C1.00833 4.78261 0 3.73043 0 2.3913C0 1.05217 1.00833 0 2.29167 0C3.575 0 4.58333 1.05217 4.58333 2.3913ZM4.58333 6.69565H0V22H4.58333V6.69565ZM11.9167 6.69565H7.33333V22H11.9167V13.9652C11.9167 9.46957 17.4167 9.08696 17.4167 13.9652V22H22V12.3391C22 4.78261 13.8417 5.06956 11.9167 8.8V6.69565Z" fill="currentColor"></path></svg></button><button aria-label="twitter" class="react-share__ShareButton social-share__btn twitter hover:opacity-80" style="background-color:transparent;border:none;padding:0;font:inherit;color:inherit;cursor:pointer"><svg width="23" height="19" viewBox="0 0 23 19" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M7.23329 19C15.9129 19 20.6595 11.6908 20.6595 5.35298C20.6595 5.14532 20.6553 4.93872 20.6459 4.73292C21.5673 4.05595 22.3683 3.21094 23 2.24946C22.1545 2.63129 21.2447 2.88841 20.2902 3.00434C21.2643 2.4106 22.0125 1.47093 22.3654 0.35098C21.4535 0.900584 20.4437 1.29996 19.3691 1.51533C18.5077 0.583106 17.2813 0 15.9244 0C13.3182 0 11.2048 2.14816 11.2048 4.79593C11.2048 5.17244 11.2464 5.53831 11.327 5.88956C7.40542 5.68934 3.92781 3.78048 1.60068 0.878514C1.19495 1.58712 0.961353 2.41086 0.961353 3.28911C0.961353 4.95308 1.79452 6.42214 3.06142 7.28178C2.28736 7.25758 1.56014 7.04114 0.924206 6.68165C0.92316 6.7016 0.92316 6.7218 0.92316 6.74281C0.92316 9.06593 2.55 11.0054 4.70893 11.4449C4.31261 11.5547 3.89564 11.6137 3.46505 11.6137C3.16108 11.6137 2.86548 11.5829 2.57799 11.5273C3.17861 13.4327 4.92082 14.8196 6.98635 14.8587C5.37102 16.1454 3.33635 16.9119 1.12563 16.9119C0.745015 16.9119 0.369369 16.8899 0 16.8455C2.08829 18.2058 4.56793 19 7.23329 19Z" fill="currentColor"></path></svg></button><button aria-label="facebook" class="react-share__ShareButton social-share__btn facebook hover:opacity-80" style="background-color:transparent;border:none;padding:0;font:inherit;color:inherit;cursor:pointer"><svg width="13" height="26" viewBox="0 0 13 26" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M3.25 8.66667H0V13H3.25V26H8.66667V13H12.5667L13 8.66667H8.66667V6.825C8.66667 5.85 8.88333 5.41667 9.85833 5.41667H13V0H8.88333C4.98333 0 3.25 1.73333 3.25 4.98333V8.66667Z" fill="currentColor"></path></svg></button></div></div></div></div></div></main><footer class="Footer_footer__OQpsI bg-blue-dark text-white py-10 relative z-1"><div class="container--full"><div class="container mx-auto"><div class="footer__top"><div class="footer__menus grid grid-cols-1 gap-0 lg:grid-cols-4 lg:gap-4 2xl:grid-cols-5 mb-4"><div class="footer__logo mb-10"><a class="text-white" href="/"><svg width="135" height="67" viewBox="0 0 994 471.4" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M964.49 294.51h1.38v-16.97h6.88v-1.38h-15.14v1.38h6.88v16.97zM31.01 309.46h42.48v161.19H31.01z" fill="currentColor"></path><path d="M226.82 324.53c-10.25-8.72-27.69-13.27-53.1-13.27h-82.3v161.19h42.85V345.77h36c13.65 0 21.24 1.14 25 4.93 4.55 4.55 6.83 12.52 6.83 24.65v97.1h40.58V370c.07-21.2-5.24-36-15.86-45.47Z" fill="currentColor" transform="translate(-3 -1.8)"></path><path d="M521.06 309.46h42.85v161.19h-42.85z" fill="currentColor"></path><path d="M714.6 324.53c-10.25-9.1-26.94-13.27-52-13.27h-81.13v161.19h39.45V345.77h38.3c12.9 0 20.1 1.14 23.89 4.93 4.18 4.18 6.07 11.38 6.07 24.65v97.1h40.21V370c0-22-4.55-36.75-14.79-45.47ZM939.74 277.51h-40.59v33.37h-73.57c-15.17 0-26.55.77-36 3.8a62.75 62.75 0 0 0-25 15.17 74.23 74.23 0 0 0-17.83 27.69 99.23 99.23 0 0 0-6.45 35.64 92.67 92.67 0 0 0 6.45 34.14 75.85 75.85 0 0 0 17.83 27.31c6.45 6.07 14 10.24 24.65 14 9.48 3 21.62 3.8 36.79 3.8h57.65v-34.49h-44.44c-12.13 0-19.34-.38-23.89-1.14s-10.62-2.28-14-4.18c-6.82-4.17-10.24-6.07-13.27-12.89-3.41-6.82-4.93-15.55-4.93-26.17 0-18.58 4.17-31.49 12.13-39.07 8.34-7.58 23.51-8.34 44-8.34h60.31v78.12c0 16.31 3.8 27.69 12.13 36.79 8 8.35 19 12.14 36 12.14H986v-28.07h-15.92c-11 0-19-2.64-23.51-7.58-4.55-5.31-6.83-14.41-6.83-26.92v-64.1h49.69V312h-49.69ZM464.36 272.9l-40.58 24.29v12.92H309.63c-20.48 0-34.51 4.17-43.62 12.13-9.11 8.34-13.66 20.85-13.66 38.31s3.8 29.58 11.38 36c7.59 6.83 22.76 10.24 44.76 10.24h37.93c9.1 0 15.17 1.15 19 3.8 4.17 3 6.45 7.59 6.45 13.65s-2.28 10.24-6.45 13.27c-4.55 3-11.75 3.8-19 3.8h-90.65v30.72h111.51c13.66 0 23.52-4.17 31.49-12.89 8.34-9.49 12.51-21.24 12.51-36 0-15.56-4.55-26.56-14-34.9-8.72-8-22-11.38-40.58-11.38h-39.85c-8.73 0-14-2.65-16.69-4.55-3.79-2.65-5.69-7.58-5.69-13.27 0-6.45 2.28-10.62 6.45-13.27 3.8-2.28 12.52-3.41 25.41-3.41h97.09v81.16c0 16.31 3.79 28.07 12.14 36.79 8 8.34 18.95 12.14 35.64 12.14l38.68-.07v-28.77h-16.31c-11 0-18.59-2.66-23.13-8-4.55-4.93-6.45-14-6.45-26.93v-67.09h45.89v-31.48h-45.52ZM995 277.5c-.92 0-1.46.51-1.91 1.89 0 0-5 14.92-6 14.92s-6-14.92-6-14.92c-.47-1.37-1-1.89-1.92-1.89-2.29 0-2 1.84-2 1.84v17h1.38v-17c0-.46.77-.9 1.29.15s5.17 16.81 7.26 16.81 6.74-15.75 7.27-16.81 1.29-.62 1.29-.15v17H997v-17s.26-1.84-2-1.84Z" fill="currentColor" transform="translate(-3 -1.8)"></path><path d="M503.43 77.18h-80.3v204.67L464 257.23v-21.32h37.12c15.91 0 28.79-1.9 38.26-5.68a58.4 58.4 0 0 0 24.63-18.56 73 73 0 0 0 12.87-23.86 99.81 99.81 0 0 0 4.21-28.81c-.39-25.77-7.21-45.85-20.84-60.25s-32.59-21.57-56.82-21.57ZM526.91 192c-7.2 7.19-19.7 11-36.75 11h-26.52v-92.86h29.93c16.29 0 28 3.41 34.47 10.23 6.82 6.82 9.85 18.56 9.85 34.85.01 17.43-3.78 29.55-10.98 36.78ZM228.4 110.14a46 46 0 0 1 46.21 44.32l.38 4.17a87.25 87.25 0 0 0 6.06 29.17 88 88 0 0 0 17.05 25.38 83.12 83.12 0 0 0 25.38 17 81.12 81.12 0 0 0 31.07 6.06h55.3v-33h-55.3A46 46 0 0 1 308.33 159l-.37-4.17a87.26 87.26 0 0 0-6.07-29.17 87.74 87.74 0 0 0-17-25.38 82.84 82.84 0 0 0-25.39-17 78.54 78.54 0 0 0-31.06-6.44H172v33.33h56.4Z" fill="currentColor" transform="translate(-3 -1.8)"></path><path d="m318.18 156 .38 4.16a27.28 27.28 0 0 0 2.27 11h89v-31.48h-93.17a118.19 118.19 0 0 1 1.52 16.32ZM264.77 161.28l-.38-4.17c-.37-6.06-1.89-12.12-5.3-17H172v31.44h93.19c-.05-3.83-.42-7.24-.42-10.27ZM315.54 132.49a46.41 46.41 0 0 1 39.4-22h54.91V77.18h-54.92a79.91 79.91 0 0 0-31.06 6.44 74.14 74.14 0 0 0-25 16.67 93.47 93.47 0 0 1 12.88 21.22 95 95 0 0 1 3.79 10.98ZM268.18 181a46.42 46.42 0 0 1-39.4 22h-56.71v32.56h56.7c11.37 0 21.59-1.89 31.06-6.06a74.14 74.14 0 0 0 25-16.67A93.47 93.47 0 0 1 272 191.57a43.64 43.64 0 0 1-3.82-10.57ZM159.48 235.52V1.8h-39.42v75.39H82.93c-15.91 0-28.79 1.89-38.26 5.68a58.32 58.32 0 0 0-24.62 18.56 73.06 73.06 0 0 0-12.88 23.86A99.76 99.76 0 0 0 3 154.08c0 25.38 6.82 45.84 20.45 59.85q20.46 21.6 56.82 21.59h79.21Zm-39.81-32.19H90.12c-16.28 0-27.65-3.4-34.47-10.23s-10.23-18.56-10.23-34.85c0-16.67 3.79-29.17 11-36.37s19.71-11 37.13-11h26.14Z" fill="currentColor" transform="translate(-3 -1.8)"></path></svg></a></div><div class="grid grid-cols-2 md:grid-cols-3 gap-4 lg:col-span-3 2xl:col-span-4 xl:grid-cols-5"><div class="footer__menu"><div class="mb-5"><h3 class="text-sm uppercase font-sans tracking-widest font-bold mb-4"><span class="Footer_footer__border-bottom__2dwEv">Deep Instinct DSX</span></h3><ul><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Explore Deep Instinct DSX" href="/dsx">Explore Deep Instinct DSX</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Prevent Zero-Day Attacks" href="/dsx/prevent-zero-day-attacks">Prevent Zero-Day Attacks</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Real-Time Malicious Verdicts" href="/dsx/real-time-malicious-verdicts">Real-Time Malicious Verdicts</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Real-Time Explainability" href="/dsx/real-time-insights-explainability">Real-Time Explainability</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Lower TCO" href="/dsx/lower-cyber-total-cost-of-ownership">Lower TCO</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Ensure Privacy &amp; Compliance" href="/dsx/ensure-privacy-compliance">Ensure Privacy &amp; Compliance</a></li></ul></div></div><div class="footer__menu"><div class="mb-5"><h3 class="text-sm uppercase font-sans tracking-widest font-bold mb-4"><span class="Footer_footer__border-bottom__2dwEv">Use Cases</span></h3><ul><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Cloud" href="/dsx/dsx-cloud-storage">Cloud</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="NAS" href="/dsx/dsx-network-attached-storage">NAS</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Applications" href="/dsx/dsx-applications">Applications</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Endpoints" href="/dsx/dsx-endpoints">Endpoints</a></li></ul></div></div><div class="footer__menu"><div class="mb-5"><h3 class="text-sm uppercase font-sans tracking-widest font-bold mb-4"><span class="Footer_footer__border-bottom__2dwEv">Resources</span></h3><ul><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Asset Library" href="/resources">Asset Library</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Blog" href="/blog">Blog</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Videos" href="/videos">Videos</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Events &amp; Webinars" href="/events-webinars">Events &amp; Webinars</a></li></ul></div></div><div class="footer__menu"><div class="mb-5"><h3 class="text-sm uppercase font-sans tracking-widest font-bold mb-4"><span class="Footer_footer__border-bottom__2dwEv">Company</span></h3><ul><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="About Deep Instinct" href="/about-us">About Deep Instinct</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Our Customers" href="/customers">Our Customers</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Newsroom" href="/newsroom">Newsroom</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Careers" href="/careers">Careers</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Contact Us" href="/contact-us">Contact Us</a></li></ul></div></div><div class="footer__menu"><div class="mb-5"><h3 class="text-sm uppercase font-sans tracking-widest font-bold mb-4"><span class="Footer_footer__border-bottom__2dwEv">Quick Links</span></h3><ul><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Free Scan" target="_blank" rel="noopener" href="https://info.deepinstinct.com/request-a-demo">Free Scan</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Customer Portal" target="_blank" rel="noopener" href="https://portal.deepinstinct.com/">Customer Portal</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Integrations and Compliance" href="/compliance-certification-evaluation">Integrations and Compliance</a></li><li><a class="text-sm tracking-wide Footer_footer__border-bottom__2dwEv" aria-label="Training" href="/deep-instinct-training">Training</a></li></ul></div></div></div></div></div><div class="footer__bottom border-t border-grey py-2 pt-9 grid grid-cols-1 md:grid-cols-5 xl:grid-cols-4"><div class="footer__copyright order-3 md:col-span-2 md:order-2 xl:col-span-1 xl:order-1 flex items-center"><p class="font-medium text-h-xs tracking-wide-sm">© <!-- -->2025<!-- --> Deep Instinct. All rights reserved.</p></div><div class="footer__more text-left col-span-1 order-2 py-4 md:py-0 md:col-span-3 md:text-right md:order-3 xl:order-2 xl:text-center xl:col-span-2"><ul><li class="block px-0 md:inline-block md:px-5 "><a class="text-sm tracking-wide-sm font-medium Footer_footer__border-bottom__2dwEv" aria-label="Privacy Policy" href="/privacy-policy">Privacy Policy</a></li><li class="block px-0 md:inline-block md:px-5 "><a class="text-sm tracking-wide-sm font-medium Footer_footer__border-bottom__2dwEv" aria-label="Candidate Privacy Policy" href="/candidate-privacy-policy">Candidate Privacy Policy</a></li><li class="block px-0 md:inline-block md:px-5 "><a class="text-sm tracking-wide-sm font-medium Footer_footer__border-bottom__2dwEv" aria-label="Cookie Policy" href="/cookies-policy">Cookie Policy</a></li><li class="block px-0 md:inline-block md:px-5 md:pr-0 xl:pr-5"><a class="text-sm tracking-wide-sm font-medium Footer_footer__border-bottom__2dwEv" aria-label="Terms of use" href="/terms-of-use">Terms of use</a></li></ul></div><div class="footer__social text-center order-1 md:col-span-5 md:order-1 md:mb-4 xl:mb-0 xl:order-3 xl:text-right xl:col-span-1"><ul class="flex justify-center xl:justify-end"><li class="flex items-center h-6"><a href="https://www.youtube.com/channel/UCYerfisJf3hc9QOWmic1G9Q" aria-label="Find us on youtube" class="inline-block px-3 hover:opacity-80 " target="_blank" rel="noopener"><svg width="36" height="36" viewBox="0 0 36 36" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path fill-rule="evenodd" clip-rule="evenodd" d="M25.1528 2.27992L25.1528 2.27995L25.1654 2.28091C26.2554 2.36361 26.9066 2.5722 27.3166 2.81315C27.6834 3.02865 27.9742 3.33705 28.2219 3.89044C28.4913 4.49225 28.7004 5.36816 28.8303 6.66641C28.9592 7.95408 29 9.536 29 11.4973C29 13.4583 28.9592 15.049 28.8302 16.3475C28.7 17.6573 28.4903 18.5468 28.2192 19.158C27.9692 19.7216 27.6795 20.0247 27.3266 20.2293C26.9315 20.4585 26.295 20.6559 25.2156 20.7105L25.2072 20.711C20.6373 20.9614 10.4021 20.9617 5.8144 20.7121C4.73649 20.6284 4.09086 20.4209 3.68337 20.1814C3.31663 19.9659 3.02578 19.6575 2.77809 19.1042C2.50873 18.5023 2.29962 17.6264 2.16968 16.3282C2.0408 15.0405 2 13.4586 2 11.4973C2 9.536 2.0408 7.95408 2.16968 6.66641C2.29962 5.36816 2.50873 4.49225 2.77809 3.89044C3.02578 3.33705 3.31663 3.02865 3.68337 2.81315C4.09341 2.5722 4.74456 2.36361 5.83463 2.28091L5.83464 2.28094L5.84716 2.27992C10.3881 1.9067 20.6119 1.9067 25.1528 2.27992ZM0 11.4973C0 19.3957 0.645833 22.3258 5.68333 22.708C10.3333 22.9627 20.6667 22.9627 25.3167 22.708C30.3542 22.4532 31 19.3957 31 11.4973C31 3.59888 30.3542 0.668818 25.3167 0.286636C20.6667 -0.0955454 10.3333 -0.0955454 5.68333 0.286636C0.645833 0.668818 0 3.59888 0 11.4973ZM12.4123 16.2863C11.7503 16.5859 11 16.1018 11 15.3753V8.52019C11 7.79363 11.7503 7.30959 12.4123 7.60913L19.9867 11.0367C20.7703 11.3913 20.7703 12.5042 19.9867 12.8588L12.4123 16.2863Z" fill="currentColor"></path></svg></a></li><li class="flex items-center h-6"><a href="https://www.linkedin.com/company/deep-instinct" aria-label="Find us on linkedin" class="inline-block px-3 hover:opacity-80 " target="_blank" rel="noopener"><svg width="36" height="36" viewBox="0 0 36 36" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M4.58333 2.3913C4.58333 3.73043 3.575 4.78261 2.29167 4.78261C1.00833 4.78261 0 3.73043 0 2.3913C0 1.05217 1.00833 0 2.29167 0C3.575 0 4.58333 1.05217 4.58333 2.3913ZM4.58333 6.69565H0V22H4.58333V6.69565ZM11.9167 6.69565H7.33333V22H11.9167V13.9652C11.9167 9.46957 17.4167 9.08696 17.4167 13.9652V22H22V12.3391C22 4.78261 13.8417 5.06956 11.9167 8.8V6.69565Z" fill="currentColor"></path></svg></a></li><li class="flex items-center h-6"><a href="https://twitter.com/DeepInstinctSec" aria-label="Find us on twitter" class="inline-block px-3 hover:opacity-80 " target="_blank" rel="noopener"><svg width="36" height="36" viewBox="0 0 36 36" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M7.23329 19C15.9129 19 20.6595 11.6908 20.6595 5.35298C20.6595 5.14532 20.6553 4.93872 20.6459 4.73292C21.5673 4.05595 22.3683 3.21094 23 2.24946C22.1545 2.63129 21.2447 2.88841 20.2902 3.00434C21.2643 2.4106 22.0125 1.47093 22.3654 0.35098C21.4535 0.900584 20.4437 1.29996 19.3691 1.51533C18.5077 0.583106 17.2813 0 15.9244 0C13.3182 0 11.2048 2.14816 11.2048 4.79593C11.2048 5.17244 11.2464 5.53831 11.327 5.88956C7.40542 5.68934 3.92781 3.78048 1.60068 0.878514C1.19495 1.58712 0.961353 2.41086 0.961353 3.28911C0.961353 4.95308 1.79452 6.42214 3.06142 7.28178C2.28736 7.25758 1.56014 7.04114 0.924206 6.68165C0.92316 6.7016 0.92316 6.7218 0.92316 6.74281C0.92316 9.06593 2.55 11.0054 4.70893 11.4449C4.31261 11.5547 3.89564 11.6137 3.46505 11.6137C3.16108 11.6137 2.86548 11.5829 2.57799 11.5273C3.17861 13.4327 4.92082 14.8196 6.98635 14.8587C5.37102 16.1454 3.33635 16.9119 1.12563 16.9119C0.745015 16.9119 0.369369 16.8899 0 16.8455C2.08829 18.2058 4.56793 19 7.23329 19Z" fill="currentColor"></path></svg></a></li><li class="flex items-center h-6"><a href="https://www.facebook.com/DeepInstinctInc" aria-label="Find us on facebook" class="inline-block px-3 hover:opacity-80 xl:pr-0" target="_blank" rel="noopener"><svg width="36" height="36" viewBox="0 0 36 36" class="icon inline-block align-middle" preserveAspectRatio="xMaxYMax meet" focusable="false"><path d="M3.25 8.66667H0V13H3.25V26H8.66667V13H12.5667L13 8.66667H8.66667V6.825C8.66667 5.85 8.88333 5.41667 9.85833 5.41667H13V0H8.88333C4.98333 0 3.25 1.73333 3.25 4.98333V8.66667Z" fill="currentColor"></path></svg></a></li></ul></div></div></div></div></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"blockPost":{"_version":25,"locale":"en-us","uid":"blt44734cbafef9ede6","ACL":{},"_in_progress":false,"author":[{"_content_type_uid":"di_author","_version":3,"locale":"en-us","uid":"bltda0f6d1c7fb0e316","ACL":{},"_in_progress":false,"author_title":"Security Researcher","bio":"","created_at":"2021-09-14T09:13:38.845Z","created_by":"blt1d5768f5c3f56b45","image":null,"tags":[],"title":"Asaf Gilboa","updated_at":"2022-03-21T04:19:38.071Z","updated_by":"bltc9f76683df0aaacc","url":"/asaf-gilboa","publish_details":{"environment":"blt1b1ee2a5b0429c28","locale":"en-us","time":"2022-03-21T14:50:00.148Z","user":"bltc9f76683df0aaacc"}}],"created_at":"2021-10-25T09:36:34.940Z","created_by":"blt998ddb75ec254a20","description":"","di_tags":[],"image":{"src":"https://www.deepinstinct.com/image/bltaa029c1153159140/61767a12b05858694858cd3d/API-blog.png","alt":"Understanding and Preventing Re-Entry Abuse Blog","title":"Understanding and Preventing Re-Entry Abuse Blog","meta":{"type":"image","uid":"bltaa029c1153159140","locale":"en-us"},"width":1000,"height":667},"modular_blocks":[{"richtext_block":{"rich_text_editor":"\u003cp\u003eCybercriminals have developed a diverse toolset to uncover vulnerabilities and repurpose existing software features to find entry points through cyber defenses. In this blog, we’ll explore a new way to exploit reentrancy that can be used to evade the behavioral analysis of EDR and legacy antivirus products.\u003c/p\u003e\u003cp\u003eWhile the technique we’ll examine focuses on a single-hooked API, this method of evasion can be used against almost any antivirus tool’s hooks by reverse-engineering the AV product to allow a bypass and custom-tailoring the bypass method.\u003c/p\u003e\u003cp\u003eMost antivirus and \u003ca href=\"https://www.deepinstinct.com/endpoint-detection-response\" target=\"_self\"\u003eendpoint detection and response (EDR)\u003c/a\u003e products focus on scanning and detection, with some leveraging additional capabilities on top of their file scanning mechanism to detect malicious activity.\u003c/p\u003e\u003cp\u003eOne of these capabilities involves tracking processes in-memory through behavioral analysis or heuristics. In short, the antivirus solution will detect or prevent certain behaviors that are deemed to be malicious, such as dumping credentials from memory or injecting code into another process. Finding these malicious activities helps the antivirus software detect a threat that isn’t caught by the file-scanning capability. It is also useful when the file hash is not blacklisted, or the \u003ca href=\"https://www.deepinstinct.com/prevent-fileless-malware\" target=\"_self\"\u003eattack is fileless\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIn order to find malicious behavior in process, an antivirus product will usually have its own DLL loaded into every process via its signed kernel driver on process startup. Once loaded, this DLL will then place hooks on the APIs that require tracking.\u003c/p\u003e\u003cp\u003eFor code injection, kernel32.dll’s functions including “CreateRemoteThread,” “VirtualAllocEx,” and “WriteProcessMemory” will most frequently be used. Most of the time security vendors will prefer to hook the lowest-level API possible, such as hooking “NtWriteVirtualMemory” inside ntdll.dll instead of “WriteProcessMemory.” This is done for programs that do not call the higher-level APIs, which can limit the heuristics’ ability to catch malicious behavior.\u003c/p\u003e\u003ch5\u003eWhat is Inline Hooking?\u003c/h5\u003e\u003cp\u003eUserland hooks is a very popular way for antivirus tools to inspect the behavior of a process. Hooking is the process of intercepting a function call. As the guardian of the endpoint, intercepting calls to various APIs allows the antivirus product to not only detect, but also to prevent unwanted or suspicious activity. This is done most by inline hooking (sometimes known as detouring).\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"qlu9mb7yhm24\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt2713eaae59a43747/6178faf63ce65615842b4220/image.png\" data-sys-asset-uid=\"blt2713eaae59a43747\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003ch5\u003eHooking and Reentrancy\u003c/h5\u003e\u003cp\u003eA very common problem that occurs when hooking Windows APIs is reentrancy. This occurs when a thread calls a hooked API, and the hook then calls another hooked API, or even that same hooked API (either directly or indirectly). This process can lead to unnecessary overhead—and can also lead to an infinite recursion.\u003c/p\u003e\u003cp\u003eReentrancy issues are a significant challenge for antivirus tools because using hooks on every single process can cause severe stability issues, freezing, and other performance problems. A common approach to this is to be careful about what code to write in the hook itself and make sure to not call any other API (directly or indirectly); this method limits what behaviors can be monitored. However, a more elegant solution is simply to check for reentrancy. In this approach the hook’s trampoline will be called directly if reentrancy is detected, skipping whatever checks and logic the hook usually goes through in its process.\u003c/p\u003e\u003cp\u003eBelow is a diagram to show the flow of a reentrancy-friendly hook:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"51fqvdrot7c9\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt4afc4f4f72a4f7c3/6178fb1f5ae6d31579c1be3a/image.png\" data-sys-asset-uid=\"blt4afc4f4f72a4f7c3\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003ch5\u003eTechnical Explanation\u003c/h5\u003e\u003ch6\u003eLocating Hooks\u003c/h6\u003e\u003cp\u003eFor this next section we will play the part of the attacker and walk through the steps that one would take to evade antivirus with one line of code.\u003c/p\u003e\u003cp\u003eThe first step to locate a hook is to determine what APIs are hooked. \u003ca href=\"https://guidedhacking.com/resources/hookshark-hookshark64-download.30/\" target=\"_self\"\u003eHookShark\u003c/a\u003e is a terrific tool to detect inline hooking. It provides a quick way to find what APIs a security vendor hooks.\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"njhdtuf14rv8\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltdfd1a29b7a2f5fbe/6178fb2fece6b40b35072700/image.png\" data-sys-asset-uid=\"bltdfd1a29b7a2f5fbe\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eFor this example, when Notepad is launched, pressing “Scan this process” shows these results:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"iku7flg2ammy\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt20ca12233b5bb43d/6178fb42c05249199df194b2/image.png\" data-sys-asset-uid=\"blt20ca12233b5bb43d\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eAn API that caught our attention is NtWriteVirtualMemory, which is used for process injection techniques. As the attacker, we will determine if the antivirus would detect the attempt at process hollowing (using the project here:\u003ca href=\"https://github.com/m0n0ph1/Process-Hollowing\" target=\"_blank\"\u003e https://github.com/m0n0ph1/Process-Hollowing\u003c/a\u003e). As we can see, it was detected:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"m6avs4uscsv0\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt85cd92a33044918f/6178fb542378d322b063398c/image.png\" data-sys-asset-uid=\"blt85cd92a33044918f\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eThe second step is to determine where the hook sits. Luckily for us, the hook is inside the antivirus’ injected DLL – aswhook.dll.\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"xwjvyni4jd2m\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt530b79ae942221b3/6178fb60ece6b40b35072704/image.png\" data-sys-asset-uid=\"blt530b79ae942221b3\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"3uch38rnstqh\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt3920462f2ededd08/6178fb7e412fb409f16bf8b9/image.png\" data-sys-asset-uid=\"blt3920462f2ededd08\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003ch6\u003eDisassembling the Hook\u003c/h6\u003e\u003cp\u003eNow that we know what file to disassemble, it should be very easy to open IDA and locate the hook.\u003c/p\u003e\u003cp\u003eThis is the function as seen in IDA:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"a8hpdtk536pb\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt8d59730b365dd078/6178fb929778eb18575b37e8/image.png\" data-sys-asset-uid=\"blt8d59730b365dd078\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eNow, we know this a hook for the function “NtWriteVirtualMemory,” so this should be what the API looks like:\u003c/p\u003e\u003cpre\u003eNTSTATUSNtWriteVirtualMemory(\u003cbr/\u003e          INHANDLEProcessHandle,\u003cbr/\u003e          INPVOIDBaseAddress,\u003cbr/\u003e          INPVOID Buffer,\u003cbr/\u003e          INULONGNumberOfBytesToWrite,\u003cbr/\u003e          INOUTPULONGNumberOfBytesWritten);\u003c/pre\u003e\u003cp\u003e\u003cbr/\u003eNow, we can simply change the function’s definition and name:\u003cbr/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"yz89k4qxtzeb\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blta35bc5a196d2f85f/6178fbaa16d29a13daa7b192/image.png\" data-sys-asset-uid=\"blta35bc5a196d2f85f\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eThis will be easier to disassemble now that we know the type definitions of all the arguments.\u003c/p\u003e\u003cp\u003eThe hook looks like this:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltf4c058861f81b164/6179ae76c1c6cd50df579a20/blog-hook-start.jpg\" height=\"auto\" data-image=\"xit6w3385p4q\"/\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eHere is the decompiled version:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"zetg0s7fuggd\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltf80cea3fba15f9da/6178fc2c9778eb18575b37f2/image.png\" data-sys-asset-uid=\"bltf80cea3fba15f9da\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eAs we can see, there are four conditional jumps being made before the hook logic starts. At least one of them should be the reentrancy check. If any of the conditions are met, the trampoline will be called directly, skipping the logic of the hook. As we see in the first screenshot, the first conditional jump checks whether ProcessHandle is a pseudo-handle (-1) to the current process. Since that isn’t very helpful, let’s see what the three other conditions are.\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"7k0ht03xwr7u\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt4b279d09d0983587/6178fc3ab3a30224326378ca/image.png\" data-sys-asset-uid=\"blt4b279d09d0983587\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eAs we see in this screenshot, var_4 is a pointer to an integer. If sub_10006820 returns something other than 0x0, or if var_4 is NULL or the value inside var_4 is 0x1, a conditional jump will occur.\u003c/p\u003e\u003cp\u003eWe can deduce that sub_10006820 sets the value of var_4, probably according to the value stored in dword_10008060. Let’s disassemble it:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"mopkmovtw3jb\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt04762957afbb5612/6178fc447569022433507d17/image.png\" data-sys-asset-uid=\"blt04762957afbb5612\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eFirst, we know inside fs:18h is the TEB (Thread Environment Block), so after we added “_TEB” struct definition to IDA, we can now see something pretty interesting:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"xf0f4audn54a\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltcc041fb9d5762845/6178fc5bc05249199df194b6/image.png\" data-sys-asset-uid=\"bltcc041fb9d5762845\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eIn 0x10006837 we see that ecx is using an index in the TEB’s TlsSlots member. This refers to TLS – Thread Local Storage (see note #1).\u003c/p\u003e\u003cp\u003eThe TEB.TlsSlots array size is 64. But what if a program wants to allocate a TLS slot in the 65th index? In 0x1000682F, we see ecx being compared to the value 64. So, this translates roughly to the following C code:\u003c/p\u003e\u003cpre\u003eif (*dword_10008060 \u0026lt;= 64)\u003cbr/\u003e      *arg_4 = TEB.TlsSlots[dword_10008060];\u003c/pre\u003e\u003cp\u003e\u003cbr/\u003eIn 0x10006844 ecx is being compared to 1088. IDA doesn’t offer any known constants for this seemingly arbitrary value. If we continue with the disassembly, however, this makes more sense:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"w4ww493td64s\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt0fcea1f8e2acbc93/6178fc7e2d2c9113dd588eeb/image.png\" data-sys-asset-uid=\"blt0fcea1f8e2acbc93\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe instruction at 0x10006853 refers to edx again, which we know to be a pointer to TEB. This means that [edx+0F94h] translates to TEB.TlsExpansionSlots.\u003c/p\u003e\u003cp\u003eGoing back to the previous question – if a program calls TlsAlloc() after all the slots of the TEB.TlsSlots array are already allocated, TlsAlloc() will internally allocate memory on the heap via RtlAllocateHeap() and set TEB.TlsExpansionsSlots member to that allocated memory’s address. This gives the thread an additional 1024 TLS slots it can use. If there’s an attempt to write to a TLS slot whose index is above 64, it will write to the allocated memory on the heap instead of the TEB.TlsSlots array.\u003c/p\u003e\u003cp\u003eSo, now the number 1088 makes sense – it’s just the result of 1024 (number of available slots in the TlsExpansionSlots that are stored on the heap) + 64 (number of available slots in the TlsSlots that are stored directly inside the TEB). So, if the value stored in dword_10008060 is above 1088, it’s considered an illegitimate index.\u003c/p\u003e\u003cp\u003eWhile we may be tempted to propose a solution where our malicious program allocates all the 1088 TLS slots in order for this subroutine to return STATUS_INVALID_PARAMETER, this solution isn’t possible because the vendor’s DLL allocates an index once it loads into the process, which is too early for us to intercept.\u003c/p\u003e\u003cp\u003eBack to the code – if the conditional jump at 0x1000685B happens, the value inside arg_4 will be set to 0x0. This roughly translates to the following C code:\u003c/p\u003e\u003cpre\u003eif (TEB.TlsExpansionSlots == NULL)\u003cbr/\u003e      *arg_4 = 0x0;\u003c/pre\u003e\u003cp\u003e\u003cbr/\u003eSo now that we know how the value arg_4 is set, we can go back here:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"0rsb3lqfu4py\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltd3902f1a8e117fe7/6178fd199778eb18575b37f6/image.png\" data-sys-asset-uid=\"bltd3902f1a8e117fe7\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eWe now know that var_4 is the value stored in the TLS slot, so we’ll rename it TlsValue. We also know dword_10008060 is a pointer to a TLS index, so we’ll rename it g_TlsIndex.\u003c/p\u003e\u003cp\u003eThis roughly translates to the following C code:\u003c/p\u003e\u003cpre\u003ePDWORD TlsValue;\u003cbr/\u003eif (sub_10006820(g_TlsIndex, TlsValue) == 0 || TlsValue == NULL || *TlsValue == TRUE)\u003cbr/\u003e      // Skip the hook’s logic\u003c/pre\u003e\u003cp\u003e\u003cbr/\u003eThe instruction at 0x10002A81 sets the value stored at *TlsValue to 0x1. Later, we can see this value is set back to 0x0 (at 0x10002ABF):\u003cbr/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"yxo9igmaljsn\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltf88cbaed666d5114/6178fd2f5ae6d31579c1be54/image.png\" data-sys-asset-uid=\"bltf88cbaed666d5114\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eTo recap, the security vendor accesses a TLS slot via a global variable to store an address which points to a Boolean value, which, if set to FALSE will cause the code to perform the hook’s logic, and if it is TRUE, it will skip it and go straight to the trampoline. Once it finishes doing the hook’s logic it will reset the Boolean value back to FALSE.\u003c/p\u003e\u003ch6\u003eExploiting the Reentrancy Mechanism\u003c/h6\u003e\u003cp\u003eIf the g_TlsIndex is above 64, TlsExpansionSlots must be set to NULL so that TlsValue will also be set to NULL. If g_TlsIndex is 64 or below. TlsValue should be NULL or the Boolean value in the address stored inside of it must be set to TRUE.\u003c/p\u003e\u003cp\u003eWithout knowing the value of g_TlsIndex we have no way of knowing which TLS slot to manipulate, so what should we do?\u003c/p\u003e\u003cp\u003eOur solution is to set all of the TLS slots and TlsExpansionSlots to NULL temporarily before a call to NtWriteVirtualMemory, and once we return from that call, we can restore all the TLS slots to their previous state. This is an easy solution that can be integrated with any malicious code; we simply have to slightly modify the source code of whatever offensive tools we want to use.\u003c/p\u003e\u003cp\u003eA more elegant solution would be to use a C++ object that will be allocated on the stack. What it will do in its constructor is back up the values of all the TLS slots and the pointer of TlsExpansionSlots and then set them all to NULL, and once its destructor is called then it will restore the original values of all of the TLS slots and the pointer of TlsExpansionSlots.\u003c/p\u003e\u003cp\u003eThis action looks like this:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"4qll4tu9b605\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltb65f93615bb6886a/6178fd3fb3a30224326378ce/image.png\" data-sys-asset-uid=\"bltb65f93615bb6886a\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eWhenever we want to call an API that we know is hooked, we will simply create a block of code around the call to that API. Creating a block of code guarantees that TlsKiller’s destructor will be called as soon as the hooked API is over. In our case we know that WriteProcessMemory ends up calling NtWriteVirtualMemory so we must put TlsKiller in the same block as WriteProcessMemory. For the sake of brevity one example is given:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"86n8g5ein5ab\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blte93574cc799398ba/6178fd4f3ce65615842b422c/image.png\" data-sys-asset-uid=\"blte93574cc799398ba\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eAfter re-compiling and running the executable, we get this:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"ln129groaw99\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blta1951d18dc9ccd06/6178fd58fdb9af22b36e3b86/image.png\" data-sys-asset-uid=\"blta1951d18dc9ccd06\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eNo complaints from the Antivirus!\u003c/p\u003e\u003ch6\u003eOne Line of Code to Evade Antivirus\u003c/h6\u003e\u003cp\u003eIt seems that by simply adding one line of code before a call to a hooked API we were able to completely evade the antivirus tool’s behavioral analysis.\u003c/p\u003e\u003cp\u003eDepending on which attacks the antivirus aims to prevent with its memory heuristics it is possible to bypass whatever defense they will put up, as long as they use the same method of checking for reentrancy in their hooks.\u003c/p\u003e\u003cp\u003eSome antivirus products may devise their own methods to avoid reentrancy, and others might use TLS indexes too, which means they will also be susceptible to this attack. While they might do it differently (for example, not use the heap at all and just set the TLS slots as Boolean value or as an integer value), it will take very little effort to see if their hooks can be bypassed.\u003c/p\u003e\u003cp\u003eOther antivirus solutions might devise an entire mechanism altogether. It should also be noted that not all of the hooks placed by an antivirus have a mechanism to avoid reentrancy (for example NtProtectVirtualMemory is hooked but no check is done for reentrancy), so it is important to know which functions are affected by this.\u003c/p\u003e\u003ch5\u003eConclusion:\u003c/h5\u003e\u003cp\u003eWhile Antivirus products have a high detection rate when it comes to known malware, they often prioritize stability first, requiring them to be compatible with edge-cases and overall performance. This lessens their security posture and opens up myriad possibilities for attackers. Therefore, a feature which was intended for stability can be re-purposed as a bypass method and open a path for intrusion and compromise. Further research will shed more light on which features of an antivirus can be abused.\u003c/p\u003e\u003cp\u003eIf you’d like to learn more about Deep Instinct’s industry-leading approach to stopping malware, backed by a $3M guarantee, please download our new eBook, \u003ca href=\"https://info.deepinstinct.com/tof/ransomware-prevention?_ga=2.190475299.904700770.1623078264-1598413446.1621950290\" target=\"_self\"\u003eRansomware: Why Prevention is better than the Cure\u003c/a\u003e.\u003c/p\u003e\u003ch5\u003eNote #1: TLS Slots\u003c/h5\u003e\u003cp\u003eTLS stands for “Thread Local Storage,” which some researchers might recognize by name as a known mechanism to run code before the PE’s entrypoint (TLS callbacks). This is, however, something else and unrelated.\u003c/p\u003e\u003cp\u003eThread Local Storage is exactly what it sounds like – a place for threads to store their own local information in the TEB.TlsSlots array, which is an array of void pointers called TLS slots. Basically, that means that every thread has its own array which it can fill with values as it sees fit.\u003c/p\u003e\u003cp\u003eSince the mechanism is a bit more complicated than just accessing an array, there are 4 APIs that can be used for TLS:\u003c/p\u003e\u003cp\u003eTlsAlloc() – Allocates an index for the TLS. This index will be considered reserved and can be used by any thread to get and set their local values in their TEB.TlsSlots.\u003c/p\u003e\u003cp\u003eTlsFree(DWORD dwTlsIndex) – Releases the index allocated by TlsAlloc().\u003c/p\u003e\u003cp\u003eTlsGetValue(DWORD dwTlsIndex) – Returns the value stored in the thread’s TEB.TlsSlots[dwTlsIndex].\u003c/p\u003e\u003cp\u003eTlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue) – Sets lpTlsValue as the value in TEB.TlsSlots[dwTlsIndex].\u003c/p\u003e\u003ch5\u003eReferences:\u003c/h5\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://docs.microsoft.com/en-us/windows/win32/procthread/thread-local-storage\" target=\"_self\"\u003ehttps://docs.microsoft.com/en-us/windows/win32/procthread/thread-local-storage\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"http://www.nynaeve.net/?p=181\" target=\"_self\"\u003ehttp://www.nynaeve.net/?p=181\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://github.com/microsoft/detours/wiki/OverviewInterception\" target=\"_self\"\u003ehttps://github.com/microsoft/detours/wiki/OverviewInterception\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2\u003eFurther Reading:\u003c/h2\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://www.deepinstinct.com/blog/new-fileless-attacks-found-in-event-logs\" target=\"_self\"\u003ehttps://www.deepinstinct.com/blog/new-fileless-attacks-found-in-event-logs\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e","_metadata":{"uid":"csfd04187f8fdd032a"}}}],"publication_date":"2021-10-27T15:00:00.000Z","seo":{"seo_title":"Evading EDR Detection with Reentrancy Abuse | Deep Instinct","seo_metakeywords":"","seo_metadescription":"In this blog, we’ll explore a new way to exploit reentrancy that can be used to evade the behavioral analysis of EDR and legacy antivirus products.","image":null,"hide":false},"tags":[],"title":"Evading EDR Detection with Reentrancy Abuse","updated_at":"2022-06-02T15:43:08.477Z","updated_by":"blt0d598b36a82e8d10","url":"/blog/evading-antivirus-detection-with-inline-hooks","publish_details":{"environment":"blt1b1ee2a5b0429c28","locale":"en-us","time":"2022-06-02T15:43:12.836Z","user":"blt0d598b36a82e8d10"},"processed_blocks":[{"name":"richtext_block","content":{"id":"csfd04187f8fdd032a","body":"\u003cp\u003eCybercriminals have developed a diverse toolset to uncover vulnerabilities and repurpose existing software features to find entry points through cyber defenses. In this blog, we’ll explore a new way to exploit reentrancy that can be used to evade the behavioral analysis of EDR and legacy antivirus products.\u003c/p\u003e\u003cp\u003eWhile the technique we’ll examine focuses on a single-hooked API, this method of evasion can be used against almost any antivirus tool’s hooks by reverse-engineering the AV product to allow a bypass and custom-tailoring the bypass method.\u003c/p\u003e\u003cp\u003eMost antivirus and \u003ca href=\"https://www.deepinstinct.com/endpoint-detection-response\" target=\"_self\"\u003eendpoint detection and response (EDR)\u003c/a\u003e products focus on scanning and detection, with some leveraging additional capabilities on top of their file scanning mechanism to detect malicious activity.\u003c/p\u003e\u003cp\u003eOne of these capabilities involves tracking processes in-memory through behavioral analysis or heuristics. In short, the antivirus solution will detect or prevent certain behaviors that are deemed to be malicious, such as dumping credentials from memory or injecting code into another process. Finding these malicious activities helps the antivirus software detect a threat that isn’t caught by the file-scanning capability. It is also useful when the file hash is not blacklisted, or the \u003ca href=\"https://www.deepinstinct.com/prevent-fileless-malware\" target=\"_self\"\u003eattack is fileless\u003c/a\u003e.\u003c/p\u003e\u003cp\u003eIn order to find malicious behavior in process, an antivirus product will usually have its own DLL loaded into every process via its signed kernel driver on process startup. Once loaded, this DLL will then place hooks on the APIs that require tracking.\u003c/p\u003e\u003cp\u003eFor code injection, kernel32.dll’s functions including “CreateRemoteThread,” “VirtualAllocEx,” and “WriteProcessMemory” will most frequently be used. Most of the time security vendors will prefer to hook the lowest-level API possible, such as hooking “NtWriteVirtualMemory” inside ntdll.dll instead of “WriteProcessMemory.” This is done for programs that do not call the higher-level APIs, which can limit the heuristics’ ability to catch malicious behavior.\u003c/p\u003e\u003ch5\u003eWhat is Inline Hooking?\u003c/h5\u003e\u003cp\u003eUserland hooks is a very popular way for antivirus tools to inspect the behavior of a process. Hooking is the process of intercepting a function call. As the guardian of the endpoint, intercepting calls to various APIs allows the antivirus product to not only detect, but also to prevent unwanted or suspicious activity. This is done most by inline hooking (sometimes known as detouring).\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"qlu9mb7yhm24\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt2713eaae59a43747/6178faf63ce65615842b4220/image.png\" data-sys-asset-uid=\"blt2713eaae59a43747\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003ch5\u003eHooking and Reentrancy\u003c/h5\u003e\u003cp\u003eA very common problem that occurs when hooking Windows APIs is reentrancy. This occurs when a thread calls a hooked API, and the hook then calls another hooked API, or even that same hooked API (either directly or indirectly). This process can lead to unnecessary overhead—and can also lead to an infinite recursion.\u003c/p\u003e\u003cp\u003eReentrancy issues are a significant challenge for antivirus tools because using hooks on every single process can cause severe stability issues, freezing, and other performance problems. A common approach to this is to be careful about what code to write in the hook itself and make sure to not call any other API (directly or indirectly); this method limits what behaviors can be monitored. However, a more elegant solution is simply to check for reentrancy. In this approach the hook’s trampoline will be called directly if reentrancy is detected, skipping whatever checks and logic the hook usually goes through in its process.\u003c/p\u003e\u003cp\u003eBelow is a diagram to show the flow of a reentrancy-friendly hook:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"51fqvdrot7c9\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt4afc4f4f72a4f7c3/6178fb1f5ae6d31579c1be3a/image.png\" data-sys-asset-uid=\"blt4afc4f4f72a4f7c3\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003ch5\u003eTechnical Explanation\u003c/h5\u003e\u003ch6\u003eLocating Hooks\u003c/h6\u003e\u003cp\u003eFor this next section we will play the part of the attacker and walk through the steps that one would take to evade antivirus with one line of code.\u003c/p\u003e\u003cp\u003eThe first step to locate a hook is to determine what APIs are hooked. \u003ca href=\"https://guidedhacking.com/resources/hookshark-hookshark64-download.30/\" target=\"_self\"\u003eHookShark\u003c/a\u003e is a terrific tool to detect inline hooking. It provides a quick way to find what APIs a security vendor hooks.\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"njhdtuf14rv8\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltdfd1a29b7a2f5fbe/6178fb2fece6b40b35072700/image.png\" data-sys-asset-uid=\"bltdfd1a29b7a2f5fbe\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eFor this example, when Notepad is launched, pressing “Scan this process” shows these results:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"iku7flg2ammy\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt20ca12233b5bb43d/6178fb42c05249199df194b2/image.png\" data-sys-asset-uid=\"blt20ca12233b5bb43d\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eAn API that caught our attention is NtWriteVirtualMemory, which is used for process injection techniques. As the attacker, we will determine if the antivirus would detect the attempt at process hollowing (using the project here:\u003ca href=\"https://github.com/m0n0ph1/Process-Hollowing\" target=\"_blank\"\u003e https://github.com/m0n0ph1/Process-Hollowing\u003c/a\u003e). As we can see, it was detected:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"m6avs4uscsv0\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt85cd92a33044918f/6178fb542378d322b063398c/image.png\" data-sys-asset-uid=\"blt85cd92a33044918f\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eThe second step is to determine where the hook sits. Luckily for us, the hook is inside the antivirus’ injected DLL – aswhook.dll.\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"xwjvyni4jd2m\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt530b79ae942221b3/6178fb60ece6b40b35072704/image.png\" data-sys-asset-uid=\"blt530b79ae942221b3\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"3uch38rnstqh\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt3920462f2ededd08/6178fb7e412fb409f16bf8b9/image.png\" data-sys-asset-uid=\"blt3920462f2ededd08\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003ch6\u003eDisassembling the Hook\u003c/h6\u003e\u003cp\u003eNow that we know what file to disassemble, it should be very easy to open IDA and locate the hook.\u003c/p\u003e\u003cp\u003eThis is the function as seen in IDA:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"a8hpdtk536pb\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt8d59730b365dd078/6178fb929778eb18575b37e8/image.png\" data-sys-asset-uid=\"blt8d59730b365dd078\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eNow, we know this a hook for the function “NtWriteVirtualMemory,” so this should be what the API looks like:\u003c/p\u003e\u003cpre\u003eNTSTATUSNtWriteVirtualMemory(\u003cbr/\u003e          INHANDLEProcessHandle,\u003cbr/\u003e          INPVOIDBaseAddress,\u003cbr/\u003e          INPVOID Buffer,\u003cbr/\u003e          INULONGNumberOfBytesToWrite,\u003cbr/\u003e          INOUTPULONGNumberOfBytesWritten);\u003c/pre\u003e\u003cp\u003e\u003cbr/\u003eNow, we can simply change the function’s definition and name:\u003cbr/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"yz89k4qxtzeb\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blta35bc5a196d2f85f/6178fbaa16d29a13daa7b192/image.png\" data-sys-asset-uid=\"blta35bc5a196d2f85f\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eThis will be easier to disassemble now that we know the type definitions of all the arguments.\u003c/p\u003e\u003cp\u003eThe hook looks like this:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003cimg src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltf4c058861f81b164/6179ae76c1c6cd50df579a20/blog-hook-start.jpg\" height=\"auto\" data-image=\"xit6w3385p4q\"/\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eHere is the decompiled version:\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"zetg0s7fuggd\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltf80cea3fba15f9da/6178fc2c9778eb18575b37f2/image.png\" data-sys-asset-uid=\"bltf80cea3fba15f9da\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eAs we can see, there are four conditional jumps being made before the hook logic starts. At least one of them should be the reentrancy check. If any of the conditions are met, the trampoline will be called directly, skipping the logic of the hook. As we see in the first screenshot, the first conditional jump checks whether ProcessHandle is a pseudo-handle (-1) to the current process. Since that isn’t very helpful, let’s see what the three other conditions are.\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"7k0ht03xwr7u\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt4b279d09d0983587/6178fc3ab3a30224326378ca/image.png\" data-sys-asset-uid=\"blt4b279d09d0983587\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eAs we see in this screenshot, var_4 is a pointer to an integer. If sub_10006820 returns something other than 0x0, or if var_4 is NULL or the value inside var_4 is 0x1, a conditional jump will occur.\u003c/p\u003e\u003cp\u003eWe can deduce that sub_10006820 sets the value of var_4, probably according to the value stored in dword_10008060. Let’s disassemble it:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"mopkmovtw3jb\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt04762957afbb5612/6178fc447569022433507d17/image.png\" data-sys-asset-uid=\"blt04762957afbb5612\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eFirst, we know inside fs:18h is the TEB (Thread Environment Block), so after we added “_TEB” struct definition to IDA, we can now see something pretty interesting:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"xf0f4audn54a\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltcc041fb9d5762845/6178fc5bc05249199df194b6/image.png\" data-sys-asset-uid=\"bltcc041fb9d5762845\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eIn 0x10006837 we see that ecx is using an index in the TEB’s TlsSlots member. This refers to TLS – Thread Local Storage (see note #1).\u003c/p\u003e\u003cp\u003eThe TEB.TlsSlots array size is 64. But what if a program wants to allocate a TLS slot in the 65th index? In 0x1000682F, we see ecx being compared to the value 64. So, this translates roughly to the following C code:\u003c/p\u003e\u003cpre\u003eif (*dword_10008060 \u0026lt;= 64)\u003cbr/\u003e      *arg_4 = TEB.TlsSlots[dword_10008060];\u003c/pre\u003e\u003cp\u003e\u003cbr/\u003eIn 0x10006844 ecx is being compared to 1088. IDA doesn’t offer any known constants for this seemingly arbitrary value. If we continue with the disassembly, however, this makes more sense:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"w4ww493td64s\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt0fcea1f8e2acbc93/6178fc7e2d2c9113dd588eeb/image.png\" data-sys-asset-uid=\"blt0fcea1f8e2acbc93\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003e\u003c/p\u003e\u003cp\u003eThe instruction at 0x10006853 refers to edx again, which we know to be a pointer to TEB. This means that [edx+0F94h] translates to TEB.TlsExpansionSlots.\u003c/p\u003e\u003cp\u003eGoing back to the previous question – if a program calls TlsAlloc() after all the slots of the TEB.TlsSlots array are already allocated, TlsAlloc() will internally allocate memory on the heap via RtlAllocateHeap() and set TEB.TlsExpansionsSlots member to that allocated memory’s address. This gives the thread an additional 1024 TLS slots it can use. If there’s an attempt to write to a TLS slot whose index is above 64, it will write to the allocated memory on the heap instead of the TEB.TlsSlots array.\u003c/p\u003e\u003cp\u003eSo, now the number 1088 makes sense – it’s just the result of 1024 (number of available slots in the TlsExpansionSlots that are stored on the heap) + 64 (number of available slots in the TlsSlots that are stored directly inside the TEB). So, if the value stored in dword_10008060 is above 1088, it’s considered an illegitimate index.\u003c/p\u003e\u003cp\u003eWhile we may be tempted to propose a solution where our malicious program allocates all the 1088 TLS slots in order for this subroutine to return STATUS_INVALID_PARAMETER, this solution isn’t possible because the vendor’s DLL allocates an index once it loads into the process, which is too early for us to intercept.\u003c/p\u003e\u003cp\u003eBack to the code – if the conditional jump at 0x1000685B happens, the value inside arg_4 will be set to 0x0. This roughly translates to the following C code:\u003c/p\u003e\u003cpre\u003eif (TEB.TlsExpansionSlots == NULL)\u003cbr/\u003e      *arg_4 = 0x0;\u003c/pre\u003e\u003cp\u003e\u003cbr/\u003eSo now that we know how the value arg_4 is set, we can go back here:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"0rsb3lqfu4py\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltd3902f1a8e117fe7/6178fd199778eb18575b37f6/image.png\" data-sys-asset-uid=\"bltd3902f1a8e117fe7\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eWe now know that var_4 is the value stored in the TLS slot, so we’ll rename it TlsValue. We also know dword_10008060 is a pointer to a TLS index, so we’ll rename it g_TlsIndex.\u003c/p\u003e\u003cp\u003eThis roughly translates to the following C code:\u003c/p\u003e\u003cpre\u003ePDWORD TlsValue;\u003cbr/\u003eif (sub_10006820(g_TlsIndex, TlsValue) == 0 || TlsValue == NULL || *TlsValue == TRUE)\u003cbr/\u003e      // Skip the hook’s logic\u003c/pre\u003e\u003cp\u003e\u003cbr/\u003eThe instruction at 0x10002A81 sets the value stored at *TlsValue to 0x1. Later, we can see this value is set back to 0x0 (at 0x10002ABF):\u003cbr/\u003e\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"yxo9igmaljsn\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltf88cbaed666d5114/6178fd2f5ae6d31579c1be54/image.png\" data-sys-asset-uid=\"bltf88cbaed666d5114\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eTo recap, the security vendor accesses a TLS slot via a global variable to store an address which points to a Boolean value, which, if set to FALSE will cause the code to perform the hook’s logic, and if it is TRUE, it will skip it and go straight to the trampoline. Once it finishes doing the hook’s logic it will reset the Boolean value back to FALSE.\u003c/p\u003e\u003ch6\u003eExploiting the Reentrancy Mechanism\u003c/h6\u003e\u003cp\u003eIf the g_TlsIndex is above 64, TlsExpansionSlots must be set to NULL so that TlsValue will also be set to NULL. If g_TlsIndex is 64 or below. TlsValue should be NULL or the Boolean value in the address stored inside of it must be set to TRUE.\u003c/p\u003e\u003cp\u003eWithout knowing the value of g_TlsIndex we have no way of knowing which TLS slot to manipulate, so what should we do?\u003c/p\u003e\u003cp\u003eOur solution is to set all of the TLS slots and TlsExpansionSlots to NULL temporarily before a call to NtWriteVirtualMemory, and once we return from that call, we can restore all the TLS slots to their previous state. This is an easy solution that can be integrated with any malicious code; we simply have to slightly modify the source code of whatever offensive tools we want to use.\u003c/p\u003e\u003cp\u003eA more elegant solution would be to use a C++ object that will be allocated on the stack. What it will do in its constructor is back up the values of all the TLS slots and the pointer of TlsExpansionSlots and then set them all to NULL, and once its destructor is called then it will restore the original values of all of the TLS slots and the pointer of TlsExpansionSlots.\u003c/p\u003e\u003cp\u003eThis action looks like this:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"4qll4tu9b605\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltb65f93615bb6886a/6178fd3fb3a30224326378ce/image.png\" data-sys-asset-uid=\"bltb65f93615bb6886a\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eWhenever we want to call an API that we know is hooked, we will simply create a block of code around the call to that API. Creating a block of code guarantees that TlsKiller’s destructor will be called as soon as the hooked API is over. In our case we know that WriteProcessMemory ends up calling NtWriteVirtualMemory so we must put TlsKiller in the same block as WriteProcessMemory. For the sake of brevity one example is given:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"86n8g5ein5ab\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blte93574cc799398ba/6178fd4f3ce65615842b422c/image.png\" data-sys-asset-uid=\"blte93574cc799398ba\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eAfter re-compiling and running the executable, we get this:\u003c/p\u003e\u003cp\u003e\u003cimg data-image=\"ln129groaw99\" src=\"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blta1951d18dc9ccd06/6178fd58fdb9af22b36e3b86/image.png\" data-sys-asset-uid=\"blta1951d18dc9ccd06\" alt=\"image.png\"/\u003e\u003c/p\u003e\u003cp\u003eNo complaints from the Antivirus!\u003c/p\u003e\u003ch6\u003eOne Line of Code to Evade Antivirus\u003c/h6\u003e\u003cp\u003eIt seems that by simply adding one line of code before a call to a hooked API we were able to completely evade the antivirus tool’s behavioral analysis.\u003c/p\u003e\u003cp\u003eDepending on which attacks the antivirus aims to prevent with its memory heuristics it is possible to bypass whatever defense they will put up, as long as they use the same method of checking for reentrancy in their hooks.\u003c/p\u003e\u003cp\u003eSome antivirus products may devise their own methods to avoid reentrancy, and others might use TLS indexes too, which means they will also be susceptible to this attack. While they might do it differently (for example, not use the heap at all and just set the TLS slots as Boolean value or as an integer value), it will take very little effort to see if their hooks can be bypassed.\u003c/p\u003e\u003cp\u003eOther antivirus solutions might devise an entire mechanism altogether. It should also be noted that not all of the hooks placed by an antivirus have a mechanism to avoid reentrancy (for example NtProtectVirtualMemory is hooked but no check is done for reentrancy), so it is important to know which functions are affected by this.\u003c/p\u003e\u003ch5\u003eConclusion:\u003c/h5\u003e\u003cp\u003eWhile Antivirus products have a high detection rate when it comes to known malware, they often prioritize stability first, requiring them to be compatible with edge-cases and overall performance. This lessens their security posture and opens up myriad possibilities for attackers. Therefore, a feature which was intended for stability can be re-purposed as a bypass method and open a path for intrusion and compromise. Further research will shed more light on which features of an antivirus can be abused.\u003c/p\u003e\u003cp\u003eIf you’d like to learn more about Deep Instinct’s industry-leading approach to stopping malware, backed by a $3M guarantee, please download our new eBook, \u003ca href=\"https://info.deepinstinct.com/tof/ransomware-prevention?_ga=2.190475299.904700770.1623078264-1598413446.1621950290\" target=\"_self\"\u003eRansomware: Why Prevention is better than the Cure\u003c/a\u003e.\u003c/p\u003e\u003ch5\u003eNote #1: TLS Slots\u003c/h5\u003e\u003cp\u003eTLS stands for “Thread Local Storage,” which some researchers might recognize by name as a known mechanism to run code before the PE’s entrypoint (TLS callbacks). This is, however, something else and unrelated.\u003c/p\u003e\u003cp\u003eThread Local Storage is exactly what it sounds like – a place for threads to store their own local information in the TEB.TlsSlots array, which is an array of void pointers called TLS slots. Basically, that means that every thread has its own array which it can fill with values as it sees fit.\u003c/p\u003e\u003cp\u003eSince the mechanism is a bit more complicated than just accessing an array, there are 4 APIs that can be used for TLS:\u003c/p\u003e\u003cp\u003eTlsAlloc() – Allocates an index for the TLS. This index will be considered reserved and can be used by any thread to get and set their local values in their TEB.TlsSlots.\u003c/p\u003e\u003cp\u003eTlsFree(DWORD dwTlsIndex) – Releases the index allocated by TlsAlloc().\u003c/p\u003e\u003cp\u003eTlsGetValue(DWORD dwTlsIndex) – Returns the value stored in the thread’s TEB.TlsSlots[dwTlsIndex].\u003c/p\u003e\u003cp\u003eTlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue) – Sets lpTlsValue as the value in TEB.TlsSlots[dwTlsIndex].\u003c/p\u003e\u003ch5\u003eReferences:\u003c/h5\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://docs.microsoft.com/en-us/windows/win32/procthread/thread-local-storage\" target=\"_self\"\u003ehttps://docs.microsoft.com/en-us/windows/win32/procthread/thread-local-storage\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"http://www.nynaeve.net/?p=181\" target=\"_self\"\u003ehttp://www.nynaeve.net/?p=181\u003c/a\u003e\u003c/li\u003e\u003cli\u003e\u003ca href=\"https://github.com/microsoft/detours/wiki/OverviewInterception\" target=\"_self\"\u003ehttps://github.com/microsoft/detours/wiki/OverviewInterception\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2\u003eFurther Reading:\u003c/h2\u003e\u003cul\u003e\u003cli\u003e\u003ca href=\"https://www.deepinstinct.com/blog/new-fileless-attacks-found-in-event-logs\" target=\"_self\"\u003ehttps://www.deepinstinct.com/blog/new-fileless-attacks-found-in-event-logs\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e"}}]},"preview":false,"headerTheme":{"theme":"white"},"headerMenu":{"main":[{"id":"cs9ee70620ee8aee88","text":"deep instinct dsx","column_layout":"50_50","subMenu":[{"menuColumn":{"link":{"title":"","url":""},"image":{"src":"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/bltbd9ee1ab4201e5df/671b6d5eb3bdd3f0d8c5fd58/Rectangle_243.jpg","alt":"","width":343,"height":196},"menuItems":[{"title":"explore deep instinct dsx","url":"/dsx","id":"cs164818e5b16b8458","indent":false,"description":"Discover how our revolutionary deep learning-powered solution prevents and explains unknown, never-before-seen threats.","image":null}]}},{"menuColumn":{"link":{"title":"why dsx","url":""},"image":null,"menuItems":[{"title":"Prevent zero-day attacks","url":"/dsx/prevent-zero-day-attacks","id":"csfebaa2fdad5d91c2","indent":false,"description":"Stop zero-day threats. Period.","image":null},{"title":"real-time malicious verdicts","url":"/dsx/real-time-malicious-verdicts","id":"cs198fae1039de080b","indent":false,"description":"Detect and prevent threats in \u003c20ms, faster than the blink of an eye.","image":null},{"title":"Real-Time Insights \u0026 Explainability","url":"/dsx/real-time-insights-explainability","id":"csa19a5d74fa3c4674","indent":false,"description":"Gain actionable, AI-driven intelligence on zero-day threats in seconds.","image":null},{"title":"Lower TCO","url":"/dsx/lower-cyber-total-cost-of-ownership","id":"cs1dddaff7d1e1841e","indent":false,"description":"Reduce cybersecurity costs with efficient, high-performance threat prevention.","image":null},{"title":"Ensure Privacy \u0026 Compliance","url":"/dsx/ensure-privacy-compliance","id":"cs7dfa3dfaf0f86a1c","indent":false,"description":"Enhance data protection while meeting stringent privacy and regulatory requirements.","image":null}]}}]},{"id":"cs9d6eb1ca84ab5529","text":"Use Cases","column_layout":"single","subMenu":[{"menuColumn":{"link":{"title":"DEPLOYMENT","url":""},"image":null,"menuItems":[{"title":"CLOUD","url":"/dsx/dsx-cloud-storage","id":"cs9fa3612e2431ca92","indent":false,"description":"Secure your multi-cloud or hybrid infrastructure against zero-day threats.","image":{"src":"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt53dca2ff300d5bf3/671f701738ade95045d195bd/cloud-icon-rounded-40x40.svg","alt":"","width":40,"height":40}},{"title":"NAS","url":"/dsx/dsx-network-attached-storage","id":"cs131597e8802151fa","indent":false,"description":"Safeguard critical data on Network-Attached Storage systems from advanced cyber threats.","image":{"src":"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt4b6584faccf25434/671ff88d10ff8584be25c591/NAS-icon-rounded-40x40.svg","alt":"","width":40,"height":40}},{"title":"APPLICATIONS","url":"/dsx/dsx-applications","id":"csdde7d7af5d13f027","indent":false,"description":"Defend SaaS and custom applications from zero-day vulnerabilities and threats.","image":{"src":"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt24155698a70ad864/671ff8c29b78e754a2535f9b/Applications-icon-rounded-40x40.svg","alt":"","width":40,"height":40}},{"title":"ENDPOINTS","url":"/dsx/dsx-endpoints","id":"cs410b32f532434327","indent":false,"description":"Protect devices and endpoints with AI-driven threat prevention.","image":{"src":"https://images.contentstack.io/v3/assets/blt1ec077b6b53d6b3e/blt36351a265d04e932/671ff8f36fdaa616c3704983/Endpoints-icon-rounded-40x40.svg","alt":"","width":40,"height":40}}]}}]},{"id":"cs9a1685332616ab04","text":"Resources","column_layout":"50_50","subMenu":[{"menuColumn":{"link":{"title":"EXPLORE ","url":""},"image":null,"menuItems":[{"title":"Asset Library","url":"/resources","id":"cs7a31018d4de08f4e","indent":false,"description":"","image":null},{"title":"Threat Research","url":"/cyber-threat-reports","id":"cs12f5fd632003499f","indent":false,"description":"","image":null},{"title":"Voice Of SecOps","url":"/voice-of-secops-reports","id":"cs936ea2e4f0c84408","indent":false,"description":"","image":null},{"title":"Blog","url":"/blog","id":"cs1c561d1aa853b2a3","indent":false,"description":"","image":null},{"title":"Videos","url":"/videos","id":"cs59d61494e24b98d1","indent":false,"description":"","image":null},{"title":"Events \u0026 Webinars","url":"/events-webinars","id":"cs252bd6790d094b06","indent":false,"description":"","image":null},{"title":"Training","url":"/deep-instinct-training","id":"csf91b0953931eb246","indent":false,"description":"","image":null}]}},{"menuColumn":{"link":{"title":"COMPARE","url":""},"image":null,"menuItems":[{"title":"+ Microsoft Defender","url":"/vs-microsoft-defender","id":"cs82219e10285242ae","indent":false,"description":"Deep Instinct complements Microsoft Defender with advanced threat prevention to stop threats before they enter your environment.","image":null},{"title":"+ Tanium","url":"/deep-instinct-tanium","id":"csd0f64eacd17237e2","indent":false,"description":"Deep Instinct and Tanium deliver prevention-first endpoint security to reduce risk and boost productivity.","image":null},{"title":"EXTEND/ENHANCE EDR","url":"/endpoint-detection-response","id":"cs123003a38df30754","indent":false,"description":"EDR is not enough — enhance existing cybersecurity tools with advanced, real-time threat prevention using deep learning to produce defense in depth.","image":null},{"title":"REPLACE LEGACY AV","url":"/deep-instinct-vs-competitors","id":"cs66f9ad29e0e52650","indent":false,"description":"Replace outdated, legacy AV solutions with prevention-first, deep-learning-based protection purpose-built for cybersecurity.","image":null},{"title":"REPLACE TRELLIX","url":"/deep-instinct-versus-trellix","id":"cs4111f5308ccdb290","indent":false,"description":"Faster and more accurate – Deep Instinct safeguards your data and protects your NAS storage better than Trellix.","image":null}]}}]},{"id":"csc64757ccf4d2c9c8","text":"Company","column_layout":"single","subMenu":[{"menuColumn":{"link":{"title":"","url":""},"image":null,"menuItems":[{"title":"About Deep Instinct","url":"/about-us","id":"cs015ea2b646946fb3","indent":false,"description":"","image":null},{"title":"Our Customers","url":"/customers","id":"cs856925787b9bb093","indent":false,"description":"","image":null},{"title":"Leadership Team","url":"/company/leadership-team","id":"cs19c86badbe85fe86","indent":false,"description":"","image":null},{"title":"Board of Directors","url":"/company/board-of-directors","id":"cs42440c18ad998967","indent":false,"description":"","image":null},{"title":"Newsroom","url":"/newsroom","id":"cs26c3af4216f35f16","indent":false,"description":"","image":null},{"title":"Careers","url":"/careers","id":"cs423626cb5ec6ce5f","indent":false,"description":"","image":null},{"title":"Contact Us","url":"/contact-us","id":"cs764c5e9dc04978ad","indent":false,"description":"","image":null}]}}]},{"id":"csd58f79895273e8bc","text":"Free Scan","column_layout":"single","url":"https:/info.deepinstinct.com/request-a-demo"}],"secondary":[{"title":"Partners","url":"/partners","id":"sub-0"},{"title":"Login","url":"https://portal.deepinstinct.com","id":"sub-1"}]},"footerMenu":{"sections":[{"title":"Deep Instinct DSX","links":[{"title":"Explore Deep Instinct DSX","url":"/dsx","id":"cs778c0921797e2796","indent":false,"description":"","image":null},{"title":"Prevent Zero-Day Attacks","url":"/dsx/prevent-zero-day-attacks","id":"cs51bfef75d2368389","indent":false,"description":"","image":null},{"title":"Real-Time Malicious Verdicts","url":"/dsx/real-time-malicious-verdicts","id":"csdba3cab8bdda7742","indent":false,"description":"","image":null},{"title":"Real-Time Explainability","url":"/dsx/real-time-insights-explainability","id":"csa70948fea32fbbf2","indent":false,"description":"","image":null},{"title":"Lower TCO","url":"/dsx/lower-cyber-total-cost-of-ownership","id":"cs816fed13b30b938d","indent":false,"description":"","image":null},{"title":"Ensure Privacy \u0026 Compliance","url":"/dsx/ensure-privacy-compliance","id":"cs91605ed0a1ddd694","indent":false,"description":"","image":null}]},{"title":"Use Cases","links":[{"title":"Cloud","url":"/dsx/dsx-cloud-storage","id":"cs63692d7a9c0a28a4","indent":false,"description":"","image":null},{"title":"NAS","url":"/dsx/dsx-network-attached-storage","id":"csccdc950f667cfd87","indent":false,"description":"","image":null},{"title":"Applications","url":"/dsx/dsx-applications","id":"cs742e867275ddb106","indent":false,"description":"","image":null},{"title":"Endpoints","url":"/dsx/dsx-endpoints","id":"cs39e7d9a12a5f75e0","indent":false,"description":"","image":null}]},{"title":"Resources","links":[{"title":"Asset Library","url":"/resources","id":"cs153459fa2c69b5fa","indent":false,"description":"","image":null},{"title":"Blog","url":"/blog","id":"csd71fc821e3188000","indent":false,"description":"","image":null},{"title":"Videos","url":"/videos","id":"csb2971784354462d7","indent":false,"description":"","image":null},{"title":"Events \u0026 Webinars","url":"/events-webinars","id":"cs2352c64271ced2e4","indent":false,"description":"","image":null}]},{"title":"Company","links":[{"title":"About Deep Instinct","url":"/about-us","id":"csc6b43b0e74f8d5b9","indent":false,"description":"","image":null},{"title":"Our Customers","url":"/customers","id":"csb2959da90522d746","indent":false,"description":"","image":null},{"title":"Newsroom","url":"/newsroom","id":"cs4c0d16a30b844a3a","indent":false,"description":"","image":null},{"title":"Careers","url":"/careers","id":"cs0067fb583a95b6f5","indent":false,"description":"","image":null},{"title":"Contact Us","url":"/contact-us","id":"cs77bdd8a50eaccb34","indent":false,"description":"","image":null}]},{"title":"Quick Links","links":[{"title":"Free Scan","url":"https://info.deepinstinct.com/request-a-demo","id":"csaa8b34ab12cb5cd8","indent":false,"description":"","image":null},{"title":"Customer Portal","url":"https://portal.deepinstinct.com/","id":"cs0de0b3028d0c8198","indent":false,"description":"","image":null},{"title":"Integrations and Compliance","url":"/compliance-certification-evaluation","id":"cs09d07c722f7a43eb","indent":false,"description":"","image":null},{"title":"Training","url":"/deep-instinct-training","id":"cs45fce55cdb2a1fed","indent":false,"description":"","image":null}]}],"socialLinks":[{"text":"youtube","url":"https://www.youtube.com/channel/UCYerfisJf3hc9QOWmic1G9Q"},{"text":"linkedin","url":"https://www.linkedin.com/company/deep-instinct"},{"text":"twitter","url":"https://twitter.com/DeepInstinctSec"},{"text":"facebook","url":"https://www.facebook.com/DeepInstinctInc"}],"secondaryLinks":[{"text":"Privacy Policy","url":"/privacy-policy"},{"text":"Candidate Privacy Policy","url":"/candidate-privacy-policy"},{"text":"Cookie Policy","url":"/cookies-policy"},{"text":"Terms of use","url":"/terms-of-use"}],"hideFooterMenu":false},"hideHeaderMenu":false,"hideFooterMenu":false,"hideSitewideAlert":false,"disableStickyHeader":false,"pageBackground":false,"siteWideAlert":{"title":"Announcing DSX for Cloud - Amazon S3, natively integrated zero-day data security for AWS S3.","cta":{"text":"Learn More","url":"/news/deep-instinct-extends-zero-day-data-security-capabilities-to-amazon-s3"}},"meta":{"title":"Evading EDR Detection with Reentrancy Abuse | Deep Instinct","keywords":"","description":"In this blog, we’ll explore a new way to exploit reentrancy that can be used to evade the behavioral analysis of EDR and legacy antivirus products.","image":"https://www.deepinstinct.com/image/bltaa029c1153159140/61767a12b05858694858cd3d/API-blog.png","created":"2021-10-27T15:00:00.000Z","updated":"2022-06-02T15:43:08.477Z","hide":false,"canonical":""},"url":"blog/evading-antivirus-detection-with-inline-hooks","translations":["ja"],"lang":"en"},"__N_SSG":true},"page":"/blog/[pid]","query":{"pid":"evading-antivirus-detection-with-inline-hooks"},"buildId":"sIJhGDAZlXX61-Tl8bFHt","runtimeConfig":{"baseUrl":"https://www.deepinstinct.com","locales":{"en":"en-us","ja":"ja","fr":"fr"},"defaultLocale":"en","contentTypes":{"modularPage":{"name":"di_modular_page","revalidate":600,"sitemap":{"changefreq":"daily","priority":0.5},"prefix":"modular","options":{"include":["modular_blocks.others.components.list_featured_resources.resources","modular_blocks.others.components.list_featured_resources.featured_resources"]}},"dsxModularPage":{"name":"dsx_modular_page","revalidate":600,"sitemap":{"changefreq":"daily","priority":0.5},"prefix":"modular","options":{"include":["modular_blocks.others.components.list_featured_resources.resources","modular_blocks.others.components.list_featured_resources.featured_resources","floating_icons"]}},"author":{"name":"di_author"},"blogPost":{"name":"di_blog_post","revalidate":600,"prefix":"blog","modularUrl":"blog/all","sortings":{"desc":"publication_date"},"author":true,"rss":{"title":"Deep Instinct Blog: Breaking News and Updates","description":"Deep Instinct prevents more advanced threats than any EPP or EDR in the world."},"listingLimit":10,"sitemap":{"changefreq":"monthly","priority":0.5}},"pressRelease":{"name":"di_press_release","prefix":"news","revalidate":60,"author":false,"sortings":{"desc":"publication_date"},"rss":{"title":"Deep Instinct News","description":"Deep Instinct prevents more advanced threats than any EPP or EDR in the world."},"sitemap":{"changefreq":"monthly","priority":0.5},"listingLimit":10},"newsCoverage":{"name":"di_news_coverage","prefix":"news-coverage","modularUrl":"news-coverage","revalidate":900,"sortings":{"desc":"date"},"listingLimit":12},"biosListing":{"name":"di_bios_listing","prefix":"company","revalidate":900},"pdfPage":{"name":"di_pdf_resources","prefix":"pdf","revalidate":600,"sitemap":{"changefreq":"monthly","priority":0.5}},"embedPage":{"name":"di_embed","prefix":"embed","revalidate":600},"videoPage":{"name":"di_video_page","prefix":"video","revalidate":900,"sitemap":{"changefreq":"monthly","priority":0.5}},"jobListing":{"name":"di_job_listing"},"glossaryTerm":{"name":"di_glossary_term","revalidate":1800,"prefix":"glossary","themeColors":"blue","sortings":{"desc":"publication_date"},"sitemap":{"changefreq":"monthly","priority":0.5}},"resource":{"name":"di_resource","sortings":{"desc":"created_at"}}},"revalidationByUrl":{"/blog":60,"/news":60},"menus":{"name":"di_menus","reference":["header_menu.menu_section.menu_columns.menu_column.menu_items.link_reference.reference","footer_menu.menu_section.menu_items.link_reference.reference"],"referenceFields":"url"},"meta":{"title":"The Deep Learning AI Cybersecurity Platform, Offering Cyber Threat Prevention Solutions.","siteName":"Deep Instinct","description":"","twitterSite":"@DeepInstinctSec"},"homePageUrl":"/index","themeColors":{"dark":"dark","blue":"blue","light":"light","white":"white"},"rss":{"limit":10,"authorFallback":"Deep Instinct"}},"isFallback":false,"isExperimentalCompile":false,"dynamicIds":[92340],"gsp":true,"locale":"en","locales":["en","ja","fr"],"defaultLocale":"en","scriptLoader":[]}</script></body></html>