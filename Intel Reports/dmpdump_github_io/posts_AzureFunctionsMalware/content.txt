<!doctype html><html lang="en" data-mode="dark"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="theme-color" media="(prefers-color-scheme: light)" content="#f7f7f7"><meta name="theme-color" media="(prefers-color-scheme: dark)" content="#1b1b1e"><meta name="apple-mobile-web-app-capable" content="yes"><meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"><meta name="viewport" content="width=device-width, user-scalable=no initial-scale=1, shrink-to-fit=no, viewport-fit=cover" ><meta name="generator" content="Jekyll v4.4.1" /><meta property="og:title" content="Unknown Malware Using Azure Functions as C2" /><meta property="og:locale" content="en" /><meta name="description" content="On August 28, 2025, an ISO named Servicenow-BNM-Verify.iso was uploaded to VirusTotal from Malaysia with very low detections:" /><meta property="og:description" content="On August 28, 2025, an ISO named Servicenow-BNM-Verify.iso was uploaded to VirusTotal from Malaysia with very low detections:" /><link rel="canonical" href="https://dmpdump.github.io/posts/AzureFunctionsMalware/" /><meta property="og:url" content="https://dmpdump.github.io/posts/AzureFunctionsMalware/" /><meta property="og:site_name" content="dmpdump" /><meta property="og:type" content="article" /><meta property="article:published_time" content="2025-09-07T00:00:00+00:00" /><meta name="twitter:card" content="summary" /><meta property="twitter:title" content="Unknown Malware Using Azure Functions as C2" /><meta name="twitter:site" content="@G60930953" /> <script type="application/ld+json"> {"@context":"https://schema.org","@type":"BlogPosting","dateModified":"2025-09-10T02:56:16+00:00","datePublished":"2025-09-07T00:00:00+00:00","description":"On August 28, 2025, an ISO named Servicenow-BNM-Verify.iso was uploaded to VirusTotal from Malaysia with very low detections:","headline":"Unknown Malware Using Azure Functions as C2","mainEntityOfPage":{"@type":"WebPage","@id":"https://dmpdump.github.io/posts/AzureFunctionsMalware/"},"url":"https://dmpdump.github.io/posts/AzureFunctionsMalware/"}</script><title>Unknown Malware Using Azure Functions as C2 | dmpdump</title><link rel="apple-touch-icon" sizes="180x180" href="/assets/img/favicons/apple-touch-icon.png"><link rel="icon" type="image/png" sizes="32x32" href="/assets/img/favicons/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="/assets/img/favicons/favicon-16x16.png"><link rel="manifest" href="/assets/img/favicons/site.webmanifest"><link rel="shortcut icon" href="/assets/img/favicons/favicon.ico"><meta name="apple-mobile-web-app-title" content="dmpdump"><meta name="application-name" content="dmpdump"><meta name="msapplication-TileColor" content="#da532c"><meta name="msapplication-config" content="/assets/img/favicons/browserconfig.xml"><meta name="theme-color" content="#ffffff"><link rel="preconnect" href="https://fonts.googleapis.com" ><link rel="dns-prefetch" href="https://fonts.googleapis.com" ><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link rel="dns-prefetch" href="https://fonts.gstatic.com" ><link rel="preconnect" href="https://cdn.jsdelivr.net" ><link rel="dns-prefetch" href="https://cdn.jsdelivr.net" ><link rel="stylesheet" href="/assets/css/jekyll-theme-chirpy.css"><link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Lato:wght@300;400&family=Source+Sans+Pro:wght@400;600;700;900&display=swap"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.6.0/css/all.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tocbot@4.29.0/dist/tocbot.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/loading-attribute-polyfill@2.1.1/dist/loading-attribute-polyfill.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/glightbox@3.3.0/dist/css/glightbox.min.css"><body><aside aria-label="Sidebar" id="sidebar" class="d-flex flex-column align-items-end"><header class="profile-wrapper"> <a href="/" id="avatar" class="rounded-circle"><img src="/assets/images/avatar.png" width="112" height="112" alt="avatar" onerror="this.style.display='none'"></a><h1 class="site-title"> <a href="/">dmpdump</a></h1><p class="site-subtitle fst-italic mb-0">CTI, RE, Programming</p></header><nav class="flex-column flex-grow-1 w-100 ps-0"><ul class="nav"><li class="nav-item"> <a href="/" class="nav-link"> <i class="fa-fw fas fa-home"></i> <span>HOME</span> </a><li class="nav-item"> <a href="/categories/" class="nav-link"> <i class="fa-fw fas fa-stream"></i> <span>CATEGORIES</span> </a><li class="nav-item"> <a href="/tags/" class="nav-link"> <i class="fa-fw fas fa-tags"></i> <span>TAGS</span> </a><li class="nav-item"> <a href="/archives/" class="nav-link"> <i class="fa-fw fas fa-archive"></i> <span>ARCHIVES</span> </a><li class="nav-item"> <a href="/about/" class="nav-link"> <i class="fa-fw fas fa-info-circle"></i> <span>ABOUT</span> </a></ul></nav><div class="sidebar-bottom d-flex flex-wrap align-items-center w-100"> <a href="https://github.com/dmpdump" aria-label="github" target="_blank" rel="noopener noreferrer" > <i class="fab fa-github"></i> </a> <a href="https://twitter.com/G60930953" aria-label="twitter" target="_blank" rel="noopener noreferrer" > <i class="fa-brands fa-x-twitter"></i> </a> <a href="javascript:location.href = 'mailto:' + ['dmpdump','tuta.io'].join('@')" aria-label="email" > <i class="fas fa-envelope"></i> </a> <a href="/feed.xml" aria-label="rss" > <i class="fas fa-rss"></i> </a></div></aside><div id="main-wrapper" class="d-flex justify-content-center"><div class="container d-flex flex-column px-xxl-5"><header id="topbar-wrapper" aria-label="Top Bar"><div id="topbar" class="d-flex align-items-center justify-content-between px-lg-3 h-100" ><nav id="breadcrumb" aria-label="Breadcrumb"> <span> <a href="/">Home</a> </span> <span>Unknown Malware Using Azure Functions as C2</span></nav><button type="button" id="sidebar-trigger" class="btn btn-link"> <i class="fas fa-bars fa-fw"></i> </button><div id="topbar-title"> Post</div><button type="button" id="search-trigger" class="btn btn-link"> <i class="fas fa-search fa-fw"></i> </button> <search id="search" class="align-items-center ms-3 ms-lg-0"> <i class="fas fa-search fa-fw"></i> <input class="form-control" id="search-input" type="search" aria-label="search" autocomplete="off" placeholder="Search..." > </search> <button type="button" class="btn btn-link text-decoration-none" id="search-cancel">Cancel</button></div></header><div class="row flex-grow-1"><main aria-label="Main Content" class="col-12 col-lg-11 col-xl-9 px-md-4"><article class="px-1"><header><h1 data-toc-skip>Unknown Malware Using Azure Functions as C2</h1><div class="post-meta text-muted"> <span> Posted <time data-ts="1757203200" data-df="ll" data-bs-toggle="tooltip" data-bs-placement="bottom" > Sep 7, 2025 </time> </span> <span> Updated <time data-ts="1757472976" data-df="ll" data-bs-toggle="tooltip" data-bs-placement="bottom" > Sep 9, 2025 </time> </span><div class="d-flex justify-content-between"> <span> By <em> <a href="https://github.com/dmpdump">dmpdump</a> </em> </span><div> <span class="readtime" data-bs-toggle="tooltip" data-bs-placement="bottom" title="1089 words" > <em>6 min</em> read</span></div></div></div></header><div class="content"><p>On August 28, 2025, an ISO named <code class="language-plaintext highlighter-rouge">Servicenow-BNM-Verify.iso</code> was uploaded to VirusTotal from Malaysia with very low detections:</p><p><a href="/assets/images/azfunctionsmw/vt1.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/vt1.png" alt="sshot" loading="lazy"></a></p><p><a href="/assets/images/azfunctionsmw/vt2.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/vt2.png" alt="sshot" loading="lazy"></a></p><p>The ISO image contains 4 files, two of them hidden.</p><ul><li><code class="language-plaintext highlighter-rouge">servicenow-bnm-verify.lnk</code>, a shortcut file that simply executes PanGpHip.exe<li><code class="language-plaintext highlighter-rouge">PanGpHip.exe</code>, a legitimate Palo Alto Networks executable<li><code class="language-plaintext highlighter-rouge">libeay32.dll</code>, a legitimate OpenSSL library (hidden)<li><code class="language-plaintext highlighter-rouge">libwaapi.dll</code>, a malicious library (hidden)</ul><p><code class="language-plaintext highlighter-rouge">servicenow-bnm-verify.lnk</code> only executes the legitimate Palo Alto executable. The metadata of the LNK file reveals the machine used to create the link (<code class="language-plaintext highlighter-rouge">desktop-rbg1pik</code>), the user (<code class="language-plaintext highlighter-rouge">john.GIB</code>), and the creation date (<code class="language-plaintext highlighter-rouge">08/25/2025 (04:39:00.540) [UTC]</code>), 3 days before the LNK ISO was uploaded to VirusTotal. The target path of the LNK points to the executable in the <code class="language-plaintext highlighter-rouge">excluded</code> folder. This is likely a location in the threat actor’s development environment. Even though that path does not exist on the victim’s device, the LNK falls back to its same directory, where <code class="language-plaintext highlighter-rouge">PanGpHip.exe</code> also resides.</p><p>LNK metadata:</p><div class="language-plaintext highlighter-rouge"><div class="code-header"> <span data-label-text="Plaintext"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre><td class="rouge-code"><pre>[Link Info]
Location flags:                         0x00000001      (VolumeIDAndLocalBasePath)
Drive type:                             3               (DRIVE_FIXED)
Drive serial number:                    fa5a-f20e
Volume label (ASCII):
Local path (ASCII):                     C:\Users\john.GIB\Desktop\excluded\paloalto\PanGpHip.exe

[Distributed Link Tracker Properties]
Version:                                0
NetBIOS name:                           desktop-rbg1pik
Droid volume identifier:                711034a2-0123-44ae-ae6c-462a77afcd54
Droid file identifier:                  6b9dc172-816d-11f0-a497-7c214a295e9f
Birth droid volume identifier:          711034a2-0123-44ae-ae6c-462a77afcd54
Birth droid file identifier:            6b9dc172-816d-11f0-a497-7c214a295e9f
MAC address:                            7c:21:4a:29:5e:9f
UUID timestamp:                         08/25/2025 (04:39:00.540) [UTC]
UUID sequence number:                   9367

</pre></table></code></div></div><h1 id="payload-injection">Payload Injection</h1><p>The presence of hidden DLLs and a legitimate executable is typically indicative of DLL side-loading. The <code class="language-plaintext highlighter-rouge">libwaapi.dll</code> library contains malicious logic that is executed when it is dynamically loaded by the legitimate <code class="language-plaintext highlighter-rouge">PanGpHip.exe</code> executable using <code class="language-plaintext highlighter-rouge">LoadLibraryW</code>.</p><p><a href="/assets/images/azfunctionsmw/libwaapload.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/libwaapload.png" alt="sshot" loading="lazy"></a></p><p>This DLL, although malicious, has almost no detection in VirusTotal:</p><p><a href="/assets/images/azfunctionsmw/libwaapi_nodetect.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/libwaapi_nodetect.png" alt="sshot" loading="lazy"></a></p><p>The only exported function in <code class="language-plaintext highlighter-rouge">libwaapi.dll</code> that implements code is <code class="language-plaintext highlighter-rouge">wa_api_setup</code>. The rest of the exports do not have any code.</p><p><a href="/assets/images/azfunctionsmw/exports.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/exports.png" alt="sshot" loading="lazy"></a></p><p>The <code class="language-plaintext highlighter-rouge">wa_api_setup</code> export:</p><ul><li>Uses an array of function pointers to call <code class="language-plaintext highlighter-rouge">GetConsoleWindow</code>, <code class="language-plaintext highlighter-rouge">SetForegroundWindow</code>, <code class="language-plaintext highlighter-rouge">GetForegroundWindow</code>, and <code class="language-plaintext highlighter-rouge">ShowWindow</code> with its second argument set to 0, which is <code class="language-plaintext highlighter-rouge">SW_HIDE</code> according to the <a href="https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow">API documentation</a>. This is a common technique to hide the console from the victim<li>It then creates/checks mutex <code class="language-plaintext highlighter-rouge">47c32025</code> via the <code class="language-plaintext highlighter-rouge">CreateMutexExW</code> API<li>If the mutex does not exist, it executes a payload injection function that I renamed to <code class="language-plaintext highlighter-rouge">fn_payload_injection</code></ul><p><a href="/assets/images/azfunctionsmw/libwaapi1.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/libwaapi1.png" alt="sshot" loading="lazy"></a></p><p>The <code class="language-plaintext highlighter-rouge">fn_payload_injection</code> function implements logic to inject payload in memory. This function starts by computing the SHA-256 hash of string <code class="language-plaintext highlighter-rouge">rdfY*&amp;689uuaijs</code>. This hash (<code class="language-plaintext highlighter-rouge">B639D4DC948B66A2AAB5B59D0B4114B4B11229E9DED0F415B594B8ADE11F8180</code>) is subsequently used as the RC4 key for payload decryption.</p><p><a href="/assets/images/azfunctionsmw/sha2.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/sha2.png" alt="sshot" loading="lazy"></a></p><p>If the SHA2 computation is successful, it proceeds to deobfuscate the string <code class="language-plaintext highlighter-rouge">chakra.dll</code> with a simple algorithm that resembles a Caesar cipher.</p><p><a href="/assets/images/azfunctionsmw/caesar.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/caesar.png" alt="sshot" loading="lazy"></a></p><p>The legitimate <code class="language-plaintext highlighter-rouge">chakra.dll</code> is loaded from the <code class="language-plaintext highlighter-rouge">C:\Windows\System32\</code> folder and a loop is implemented to find the first readable + executable section in the DLL.</p><p><a href="/assets/images/azfunctionsmw/rxsection.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/rxsection.png" alt="sshot" loading="lazy"></a></p><p>When that section is found, its memory permissions are set to writable (<code class="language-plaintext highlighter-rouge">PAGE_READWRITE</code>) via the <code class="language-plaintext highlighter-rouge">ZwProtectVirtualMemory</code> API and the content is zeroed out. The injector then proceeds to base64-decode a payload stored in the <code class="language-plaintext highlighter-rouge">.data</code> section of the DLL to the target section in the loaded <code class="language-plaintext highlighter-rouge">chakra.dll</code>. After decoding the payload, it is RC4 decrypted with the previously computed key (<code class="language-plaintext highlighter-rouge">B639D4DC948B66A2AAB5B59D0B4114B4B11229E9DED0F415B594B8ADE11F8180</code>).</p><p><a href="/assets/images/azfunctionsmw/deobdecrypt.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/deobdecrypt.png" alt="sshot" loading="lazy"></a></p><p>Once the deobfuscated/decrypted payload is written to the DLL, an integrity check is implemented by comparing the SHA2 hash of the injected payload to a hard-coded SHA2 value (<code class="language-plaintext highlighter-rouge">550c27fd8dc810df2056f1ec4a749a94ab4befc8843ba913c5f1197ef381a0a5</code>). If the integrity check passes, memory permission is restored to <code class="language-plaintext highlighter-rouge">PAGE_EXECUTE_READ</code> and it proceeds to execute the injected payload.</p><p><a href="/assets/images/azfunctionsmw/pload_exec.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/pload_exec.png" alt="sshot" loading="lazy"></a></p><h1 id="injected-payload">Injected Payload</h1><p>The injected payload is an obfuscated shellcode that loads an embedded DLL. We can quickly find the embedded payload by loading the shellcode in a hex editor. However, we can see that the embedded payload needs to be processed before execution. It is not a clean PE.</p><p><a href="/assets/images/azfunctionsmw/sc1.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/sc1.png" alt="sshot" loading="lazy"></a></p><p>Reviewing the shellcode, we can see that the buffer with the embedded portable executable is processed by the <code class="language-plaintext highlighter-rouge">RtlDecompressBuffer</code> API using <code class="language-plaintext highlighter-rouge">0x102</code> as the first argument.</p><p><a href="/assets/images/azfunctionsmw/decompress.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/decompress.png" alt="sshot" loading="lazy"></a></p><p>Looking at the prototype of <code class="language-plaintext highlighter-rouge">RtlDecompressBuffer</code>, we can see that the first argument is the compression format:</p><div class="language-plaintext highlighter-rouge"><div class="code-header"> <span data-label-text="Plaintext"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre><td class="rouge-code"><pre>NT_RTL_COMPRESS_API NTSTATUS RtlDecompressBuffer(
  [in]  USHORT CompressionFormat,
  [out] PUCHAR UncompressedBuffer,
  [in]  ULONG  UncompressedBufferSize,
  [in]  PUCHAR CompressedBuffer,
  [in]  ULONG  CompressedBufferSize,
  [out] PULONG FinalUncompressedSize
);
</pre></table></code></div></div><p>In order to understand what the <code class="language-plaintext highlighter-rouge">0x102</code> means, we can check the ReactOS documentation. <a href="https://doxygen.reactos.org/d1/d4f/ntifs_8template_8h.html#ab965965a83e40e5272e13c7810480129">Here</a> we can see that macro definitions indicate that <code class="language-plaintext highlighter-rouge">0x0100</code> is <code class="language-plaintext highlighter-rouge">COMPRESSION_ENGINE_MAXIMUM</code> and <code class="language-plaintext highlighter-rouge">0x0002</code> is <code class="language-plaintext highlighter-rouge">COMPRESSION_FORMAT_LZNT1</code>. So, essentially, the embedded payload has maximum compression for <code class="language-plaintext highlighter-rouge">LZNT1</code>.</p><p><a href="/assets/images/azfunctionsmw/compression.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/compression.png" alt="sshot" loading="lazy"></a></p><p>We can then decompress the final payload embedded within the shellcode. The decompressed payload is an obfuscated DLL (SHA2: c0fc5ec77d0aa03516048349dddb3aa74f92cfe20d4bca46205f40ab0e728645) which I could not correlate to any payload I’ve seen before - possibly due to the obfuscation. I am still working on deobfuscating this payload, but here are some initial observations. The DLL timestamp is May 5, 1984, which was likely modified. The malicious functionality is implemented in the <code class="language-plaintext highlighter-rouge">DllUnload</code> exported function.</p><p><a href="/assets/images/azfunctionsmw/meta.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/meta.png" alt="sshot" loading="lazy"></a></p><p>A quick string review via emulation suggests that the DLL implements module unhooking to avoid detection.</p><p><a href="/assets/images/azfunctionsmw/unhook.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/unhook.png" alt="sshot" loading="lazy"></a></p><p>This final payload implements a loop to the C2, sending a POST request with victim profile data to <code class="language-plaintext highlighter-rouge">logsapi.azurewebsites[.]net/api/logs</code>. The data is sent encoded/encrypted in a POST request.</p><p><a href="/assets/images/azfunctionsmw/loopc2.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/loopc2.png" alt="sshot" loading="lazy"></a></p><p><a href="/assets/images/azfunctionsmw/post.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/post.png" alt="sshot" loading="lazy"></a></p><p>The Azure websites C2 hosts Azure Functions. Azure Functions is a serverless solution that operates with event-driven <a href="https://learn.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings?tabs=isolated-process%2Cnode-v4%2Cpython-v2&amp;pivots=programming-language-csharp">triggers and bindings</a>.</p><p><a href="/assets/images/azfunctionsmw/azfunctions.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/azfunctions.png" alt="sshot" loading="lazy"></a></p><p>The encrypted data sent to the C2 can be captured before it is encrypted. We can see that it is an XML containing the computer name, user name, the OS uptime, protocol, process running the malware, parent process, and other values that I am still reviewing.</p><div class="language-xml highlighter-rouge"><div class="code-header"> <span data-label-text="XML"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre><td class="rouge-code"><pre><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;root&gt;</span>
  <span class="nt">&lt;c331219780</span> <span class="na">type=</span><span class="s">"int"</span><span class="nt">&gt;</span>64<span class="nt">&lt;/c331219780&gt;</span> // likely architecture
  <span class="nt">&lt;c693503181</span> <span class="na">type=</span><span class="s">"int"</span><span class="nt">&gt;</span>3<span class="nt">&lt;/c693503181&gt;</span>
  <span class="nt">&lt;c278266627</span> <span class="na">type=</span><span class="s">"int"</span><span class="nt">&gt;</span>3916<span class="nt">&lt;/c278266627&gt;</span>
  <span class="nt">&lt;c335283027</span> <span class="na">type=</span><span class="s">"int"</span><span class="nt">&gt;</span>3380<span class="nt">&lt;/c335283027&gt;</span>
  <span class="nt">&lt;c375980915</span> <span class="na">type=</span><span class="s">"int"</span><span class="nt">&gt;</span>60<span class="nt">&lt;/c375980915&gt;</span>
  <span class="nt">&lt;c446104534</span> <span class="na">type=</span><span class="s">"int"</span><span class="nt">&gt;</span>30<span class="nt">&lt;/c446104534&gt;</span>
  <span class="nt">&lt;c581502030</span> <span class="na">type=</span><span class="s">"int"</span><span class="nt">&gt;</span>1759243228<span class="nt">&lt;/c581502030&gt;</span>
  <span class="nt">&lt;c660735130</span> <span class="na">type=</span><span class="s">"int"</span><span class="nt">&gt;</span>805074430<span class="nt">&lt;/c660735130&gt;</span>
  <span class="nt">&lt;c1666058129</span> <span class="na">type=</span><span class="s">"bool"</span><span class="nt">&gt;</span>false<span class="nt">&lt;/c1666058129&gt;</span>
  <span class="nt">&lt;c269419238</span> <span class="na">type=</span><span class="s">"str"</span><span class="nt">&gt;</span>%random string%<span class="nt">&lt;/c269419238&gt;</span>
  <span class="nt">&lt;c327025478</span> <span class="na">type=</span><span class="s">"str"</span><span class="nt">&gt;</span>v2.17.3<span class="nt">&lt;/c327025478&gt;</span> //unknown version
  <span class="nt">&lt;c589169778</span> <span class="na">type=</span><span class="s">"str"</span><span class="nt">&gt;</span>HTTP_HTTPS<span class="nt">&lt;/c589169778&gt;</span>
  <span class="nt">&lt;c441910204</span> <span class="na">type=</span><span class="s">"str"</span><span class="nt">&gt;</span>SUE48<span class="nt">&lt;/c441910204&gt;</span>
  <span class="nt">&lt;c671024323</span> <span class="na">type=</span><span class="s">"str"</span><span class="nt">&gt;&lt;/c671024323&gt;</span>
  <span class="nt">&lt;c228262600</span> <span class="na">type=</span><span class="s">"str"</span><span class="nt">&gt;</span>Windows 10.0 (OS Build 1337)<span class="nt">&lt;/c228262600&gt;</span> // OS build (1337 is an interesting value...)
  <span class="nt">&lt;c610731141</span> <span class="na">type=</span><span class="s">"str"</span><span class="nt">&gt;</span>%COMPUTERNAME%<span class="nt">&lt;/c610731141&gt;</span>
  <span class="nt">&lt;c467272698</span> <span class="na">type=</span><span class="s">"str"</span><span class="nt">&gt;</span>0d 6h 43m<span class="nt">&lt;/c467272698&gt;</span> //uptime
  <span class="nt">&lt;c613221510</span> <span class="na">type=</span><span class="s">"str"</span><span class="nt">&gt;</span>%COMPUTERNAME%\%USER%<span class="nt">&lt;/c613221510&gt;</span> // computer name and user name
  <span class="nt">&lt;c869336422</span> <span class="na">type=</span><span class="s">"str"</span><span class="nt">&gt;</span>%PROCESS%<span class="nt">&lt;/c869336422&gt;</span> //process the malware is executing from
  <span class="nt">&lt;c968295862</span> <span class="na">type=</span><span class="s">"str"</span><span class="nt">&gt;</span>%PARENTPROCESS%<span class="nt">&lt;/c968295862&gt;</span> //parent process
<span class="nt">&lt;/root&gt;</span> 
</pre></table></code></div></div><p>I am still deobfuscating this final payload to understand all the details, and I may post a follow up blog post once I am done. This sample seems to be quite unique, but <a href="https://x.com/L3hu3s0">@L3hu3s0</a> found another DLL (SHA2: <code class="language-plaintext highlighter-rouge">28e85fd3546c8ad6fb2aef37b4372cc4775ea8435687b4e6879e96da5009d60a</code>) with the same imphash (<code class="language-plaintext highlighter-rouge">B74596632C4C9B3A853E51964E96FC32</code>) uploaded from Singapore on September 5, 2025. I reviewed that DLL and it is pretty much the same thing, with some minor differences.</p><p><a href="/assets/images/azfunctionsmw/huesofind.png" class="popup img-link shimmer"><img src="/assets/images/azfunctionsmw/huesofind.png" alt="sshot" loading="lazy"></a></p><h1 id="iocs">IOCs</h1><ul><li>Servicenow-BNM-Verify.iso: 0ba328aeb0867def650694c5a43fdd47d719c6b3c55a845903646ccdbf3ec239<li>servicenow-bnm-verify.lnk: 9e312214b44230c1cb5b6ec591245fd433c7030cb269a9b31f0ff4de621ff517<li>libeay32.dll: 1fa3e14681bf7f695a424c64927acfc26053ebaa54c4a2a6e30fe1e24b4c20a8<li>libwaapi.dll: b03a2c0d282cbbddfcf6e7dda0b4b55494f4a5c0b17c30cd586f5480efca2c17<li>PanGpHip.exe: b778d76671b95df29e15a0af4d604917bfba085f7b04e0ce5d6d0615017e79db<li>Decrypted shellcode: 550c27fd8dc810df2056f1ec4a749a94ab4befc8843ba913c5f1197ef381a0a5<li>Decompressed DLL: c0fc5ec77d0aa03516048349dddb3aa74f92cfe20d4bca46205f40ab0e728645<li>Related DLL: 28e85fd3546c8ad6fb2aef37b4372cc4775ea8435687b4e6879e96da5009d60a<li>C2: logsapi.azurewebsites[.]net</ul></div><div class="post-tail-wrapper text-muted"><div class="post-tags"> <i class="fa fa-tags fa-fw me-1"></i> <a href="/tags/malware/" class="post-tag no-text-decoration" >malware</a> <a href="/tags/azure/" class="post-tag no-text-decoration" >azure</a></div><div class=" post-tail-bottom d-flex justify-content-between align-items-center mt-5 pb-2 " ><div class="license-wrapper"> This post is licensed under <a href="https://creativecommons.org/licenses/by/4.0/"> CC BY 4.0 </a> by the author.</div><div class="share-wrapper d-flex align-items-center"> <span class="share-label text-muted">Share</span> <span class="share-icons"> <a href="https://twitter.com/intent/tweet?text=Unknown%20Malware%20Using%20Azure%20Functions%20as%20C2%20-%20dmpdump&url=https%3A%2F%2Fdmpdump.github.io%2Fposts%2FAzureFunctionsMalware%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Twitter" aria-label="Twitter"> <i class="fa-fw fa-brands fa-square-x-twitter"></i> </a> <a href="https://www.facebook.com/sharer/sharer.php?title=Unknown%20Malware%20Using%20Azure%20Functions%20as%20C2%20-%20dmpdump&u=https%3A%2F%2Fdmpdump.github.io%2Fposts%2FAzureFunctionsMalware%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Facebook" aria-label="Facebook"> <i class="fa-fw fab fa-facebook-square"></i> </a> <a href="https://t.me/share/url?url=https%3A%2F%2Fdmpdump.github.io%2Fposts%2FAzureFunctionsMalware%2F&text=Unknown%20Malware%20Using%20Azure%20Functions%20as%20C2%20-%20dmpdump" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Telegram" aria-label="Telegram"> <i class="fa-fw fab fa-telegram"></i> </a> <button id="copy-link" aria-label="Copy link" class="btn small" data-bs-toggle="tooltip" data-bs-placement="top" title="Copy link" data-title-succeed="Link copied successfully!" > <i class="fa-fw fas fa-link pe-none fs-6"></i> </button> </span></div></div></div></article></main><aside aria-label="Panel" id="panel-wrapper" class="col-xl-3 ps-2 mb-5 text-muted"><div class="access"><section id="access-lastmod"><h2 class="panel-heading">Recently Updated</h2><ul class="content list-unstyled ps-0 pb-1 ms-1 mt-2"><li class="text-truncate lh-lg"> <a href="/posts/AzureFunctionsMalware/">Unknown Malware Using Azure Functions as C2</a><li class="text-truncate lh-lg"> <a href="/posts/CobaltStrike_HK/">SLOW#TEMPEST Cobalt Strike Loader</a><li class="text-truncate lh-lg"> <a href="/posts/Belarus-nexus_Threat_Actor_Target_Poland/">Likely Belarus-Nexus Threat Actor Delivers Downloader to Poland</a><li class="text-truncate lh-lg"> <a href="/posts/Havoc-Demon-Targeting-Pakistan-International-Airlines/">Havoc Demon Targeting Pakistan International Airlines</a><li class="text-truncate lh-lg"> <a href="/posts/Modified_Xworm_Distribution/">Modified XWORM Distribution by Chinese-Speaking Threat Actor</a></ul></section><section><h2 class="panel-heading">Trending Tags</h2><div class="d-flex flex-wrap mt-3 mb-1 me-3"> <a class="post-tag btn btn-outline-primary" href="/tags/malware/">malware</a> <a class="post-tag btn btn-outline-primary" href="/tags/cti/">cti</a> <a class="post-tag btn btn-outline-primary" href="/tags/apt/">apt</a> <a class="post-tag btn btn-outline-primary" href="/tags/chrome/">chrome</a> <a class="post-tag btn btn-outline-primary" href="/tags/havoc/">havoc</a> <a class="post-tag btn btn-outline-primary" href="/tags/re/">RE</a> <a class="post-tag btn btn-outline-primary" href="/tags/azure/">azure</a> <a class="post-tag btn btn-outline-primary" href="/tags/belarus/">belarus</a> <a class="post-tag btn btn-outline-primary" href="/tags/china/">china</a> <a class="post-tag btn btn-outline-primary" href="/tags/chm/">chm</a></div></section></div></aside></div><div class="row"><div id="tail-wrapper" class="col-12 col-lg-11 col-xl-9 px-md-4"><aside id="related-posts" aria-labelledby="related-label"><h3 class="mb-4" id="related-label">Further Reading</h3><nav class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4 mb-4"><article class="col"> <a href="/posts/Low_Detection_backdoor_NHAS_RSSH/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1746057600" data-df="ll" > May 1, 2025 </time><h4 class="pt-0 my-2">Likely Chinese Threat Actor Uses Low Detection Linux Backdoor and NHAS Reverse SSH</h4><div class="text-muted"><p>On April 22, 2025, MalwareHunterTeam shared a hash for a low detection Linux ELF with 2 hard-coded IP addresses: 43.159.18[.]135 and 119.42.148[.]187. Upon review of the executable (ea41b2bf1064efc...</p></div></div></a></article><article class="col"> <a href="/posts/Python_Backdoor_TW/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1744934400" data-df="ll" > Apr 18, 2025 </time><h4 class="pt-0 my-2">Python Backdoor Uploaded from Taiwan</h4><div class="text-muted"><p>On April 18, 2025, I came across an interesting LNK file uploaded from Taiwan (f4bb263eb03240c1d779a00e1e39d3374c93d909d358691ca5386387d06be472), which I subsequently found had been initially disco...</p></div></div></a></article><article class="col"> <a href="/posts/Unattributed_Downloader_Cambodia/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1742688000" data-df="ll" > Mar 23, 2025 </time><h4 class="pt-0 my-2">Unattributed Shellcode Loader Likely Targeting Cambodia</h4><div class="text-muted"><p>On March 20, 2025, MalwareHunterTeam shared a sample of a ZIP file containing an LNK, uploaded from Cambodia: The ZIP file is named CNP_MFA_Meeting_Documents.zip. It contains an LNK file named M...</p></div></div></a></article></nav></aside><nav class="post-navigation d-flex justify-content-between" aria-label="Post Navigation"> <a href="/posts/CobaltStrike_HK/" class="btn btn-outline-primary" aria-label="Older" ><p>SLOW#TEMPEST Cobalt Strike Loader</p></a><div class="btn btn-outline-primary disabled" aria-label="Newer"><p>-</p></div></nav><footer aria-label="Site Info" class=" d-flex flex-column justify-content-center text-muted flex-lg-row justify-content-lg-between align-items-lg-center pb-lg-3 " ><p>© <time>2025</time> <a href="https://github.com/dmpdump">dmpdump</a>. <span data-bs-toggle="tooltip" data-bs-placement="top" title="Except where otherwise noted, the blog posts on this site are licensed under the Creative Commons Attribution 4.0 International (CC BY 4.0) License by the author." >Some rights reserved.</span></p><p>Using the <a data-bs-toggle="tooltip" data-bs-placement="top" title="v7.1.0" href="https://github.com/cotes2020/jekyll-theme-chirpy" target="_blank" rel="noopener" >Chirpy</a> theme for <a href="https://jekyllrb.com" target="_blank" rel="noopener">Jekyll</a>.</p></footer></div></div><div id="search-result-wrapper" class="d-flex justify-content-center d-none"><div class="col-11 content"><div id="search-hints"><section><h2 class="panel-heading">Trending Tags</h2><div class="d-flex flex-wrap mt-3 mb-1 me-3"> <a class="post-tag btn btn-outline-primary" href="/tags/malware/">malware</a> <a class="post-tag btn btn-outline-primary" href="/tags/cti/">cti</a> <a class="post-tag btn btn-outline-primary" href="/tags/apt/">apt</a> <a class="post-tag btn btn-outline-primary" href="/tags/chrome/">chrome</a> <a class="post-tag btn btn-outline-primary" href="/tags/havoc/">havoc</a> <a class="post-tag btn btn-outline-primary" href="/tags/re/">RE</a> <a class="post-tag btn btn-outline-primary" href="/tags/azure/">azure</a> <a class="post-tag btn btn-outline-primary" href="/tags/belarus/">belarus</a> <a class="post-tag btn btn-outline-primary" href="/tags/china/">china</a> <a class="post-tag btn btn-outline-primary" href="/tags/chm/">chm</a></div></section></div><div id="search-results" class="d-flex flex-wrap justify-content-center text-muted mt-3"></div></div></div></div><aside aria-label="Scroll to Top"> <button id="back-to-top" type="button" class="btn btn-lg btn-box-shadow"> <i class="fas fa-angle-up"></i> </button></aside></div><div id="mask"></div><aside id="notification" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-animation="true" data-bs-autohide="false" ><div class="toast-header"> <button type="button" class="btn-close ms-auto" data-bs-dismiss="toast" aria-label="Close" ></button></div><div class="toast-body text-center pt-0"><p class="px-2 mb-3">A new version of content is available.</p><button type="button" class="btn btn-primary" aria-label="Update"> Update </button></div></aside><script src="https://cdn.jsdelivr.net/combine/npm/simple-jekyll-search@1.10.0/dest/simple-jekyll-search.min.js,npm/loading-attribute-polyfill@2.1.1/dist/loading-attribute-polyfill.umd.min.js,npm/glightbox@3.3.0/dist/js/glightbox.min.js,npm/clipboard@2.0.11/dist/clipboard.min.js,npm/dayjs@1.11.13/dayjs.min.js,npm/dayjs@1.11.13/locale/en.js,npm/dayjs@1.11.13/plugin/relativeTime.js,npm/dayjs@1.11.13/plugin/localizedFormat.js"></script> <script src="/assets/js/dist/post.min.js"></script> <script defer src="/app.min.js"></script> <script>SimpleJekyllSearch({ searchInput: document.getElementById('search-input'), resultsContainer: document.getElementById('search-results'), json: '/assets/js/data/search.json', searchResultTemplate: '<article class="px-1 px-sm-2 px-lg-4 px-xl-0"><header><h2><a href="{url}">{title}</a></h2><div class="post-meta d-flex flex-column flex-sm-row text-muted mt-1 mb-1"> {categories} {tags}</div></header><p>{snippet}</p></article>', noResultsText: '<p class="mt-5">Oops! No results found.</p>', templateMiddleware: function(prop, value, template) { if (prop === 'categories') { if (value === '') { return `${value}`; } else { return `<div class="me-sm-4"><i class="far fa-folder fa-fw"></i>${value}</div>`; } } if (prop === 'tags') { if (value === '') { return `${value}`; } else { return `<div><i class="fa fa-tag fa-fw"></i>${value}</div>`; } } } }); </script>
