<!doctype html><html lang="en" data-mode="dark"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="theme-color" media="(prefers-color-scheme: light)" content="#f7f7f7"><meta name="theme-color" media="(prefers-color-scheme: dark)" content="#1b1b1e"><meta name="apple-mobile-web-app-capable" content="yes"><meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"><meta name="viewport" content="width=device-width, user-scalable=no initial-scale=1, shrink-to-fit=no, viewport-fit=cover" ><meta name="generator" content="Jekyll v4.4.1" /><meta property="og:title" content="Possible APT32/Ocean Lotus Installer abusing MST Transforms" /><meta property="og:locale" content="en" /><meta name="description" content="While monitoring new threats, I came across an interesting ISO image (ced7fe9c5ec508216e6dd9a59d2d5193a58bdbac5f41a38ea97dd5c7fceef7a5) uploaded to VirusTotal from Taiwan on May 20, 2025. The ISO contained 3 files: 脱密 中央国安办.pdf.lnk (Declassified Central National Security Office.pdf.lnk) WindowsPCHealthCheckSetup.msi (hidden) 5ACXP.mst (hidden)" /><meta property="og:description" content="While monitoring new threats, I came across an interesting ISO image (ced7fe9c5ec508216e6dd9a59d2d5193a58bdbac5f41a38ea97dd5c7fceef7a5) uploaded to VirusTotal from Taiwan on May 20, 2025. The ISO contained 3 files: 脱密 中央国安办.pdf.lnk (Declassified Central National Security Office.pdf.lnk) WindowsPCHealthCheckSetup.msi (hidden) 5ACXP.mst (hidden)" /><link rel="canonical" href="https://dmpdump.github.io/posts/Possible-Ocean-LotusInstaller-Abusing-MST-Transforms/" /><meta property="og:url" content="https://dmpdump.github.io/posts/Possible-Ocean-LotusInstaller-Abusing-MST-Transforms/" /><meta property="og:site_name" content="dmpdump" /><meta property="og:type" content="article" /><meta property="article:published_time" content="2025-05-29T00:00:00+00:00" /><meta name="twitter:card" content="summary" /><meta property="twitter:title" content="Possible APT32/Ocean Lotus Installer abusing MST Transforms" /><meta name="twitter:site" content="@G60930953" /> <script type="application/ld+json"> {"@context":"https://schema.org","@type":"BlogPosting","dateModified":"2025-05-30T11:09:24+00:00","datePublished":"2025-05-29T00:00:00+00:00","description":"While monitoring new threats, I came across an interesting ISO image (ced7fe9c5ec508216e6dd9a59d2d5193a58bdbac5f41a38ea97dd5c7fceef7a5) uploaded to VirusTotal from Taiwan on May 20, 2025. The ISO contained 3 files: 脱密 中央国安办.pdf.lnk (Declassified Central National Security Office.pdf.lnk) WindowsPCHealthCheckSetup.msi (hidden) 5ACXP.mst (hidden)","headline":"Possible APT32/Ocean Lotus Installer abusing MST Transforms","mainEntityOfPage":{"@type":"WebPage","@id":"https://dmpdump.github.io/posts/Possible-Ocean-LotusInstaller-Abusing-MST-Transforms/"},"url":"https://dmpdump.github.io/posts/Possible-Ocean-LotusInstaller-Abusing-MST-Transforms/"}</script><title>Possible APT32/Ocean Lotus Installer abusing MST Transforms | dmpdump</title><link rel="apple-touch-icon" sizes="180x180" href="/assets/img/favicons/apple-touch-icon.png"><link rel="icon" type="image/png" sizes="32x32" href="/assets/img/favicons/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="/assets/img/favicons/favicon-16x16.png"><link rel="manifest" href="/assets/img/favicons/site.webmanifest"><link rel="shortcut icon" href="/assets/img/favicons/favicon.ico"><meta name="apple-mobile-web-app-title" content="dmpdump"><meta name="application-name" content="dmpdump"><meta name="msapplication-TileColor" content="#da532c"><meta name="msapplication-config" content="/assets/img/favicons/browserconfig.xml"><meta name="theme-color" content="#ffffff"><link rel="preconnect" href="https://fonts.googleapis.com" ><link rel="dns-prefetch" href="https://fonts.googleapis.com" ><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link rel="dns-prefetch" href="https://fonts.gstatic.com" ><link rel="preconnect" href="https://cdn.jsdelivr.net" ><link rel="dns-prefetch" href="https://cdn.jsdelivr.net" ><link rel="stylesheet" href="/assets/css/jekyll-theme-chirpy.css"><link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Lato:wght@300;400&family=Source+Sans+Pro:wght@400;600;700;900&display=swap"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.6.0/css/all.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tocbot@4.29.0/dist/tocbot.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/loading-attribute-polyfill@2.1.1/dist/loading-attribute-polyfill.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/glightbox@3.3.0/dist/css/glightbox.min.css"><body><aside aria-label="Sidebar" id="sidebar" class="d-flex flex-column align-items-end"><header class="profile-wrapper"> <a href="/" id="avatar" class="rounded-circle"><img src="/assets/images/avatar.png" width="112" height="112" alt="avatar" onerror="this.style.display='none'"></a><h1 class="site-title"> <a href="/">dmpdump</a></h1><p class="site-subtitle fst-italic mb-0">CTI, RE, Programming</p></header><nav class="flex-column flex-grow-1 w-100 ps-0"><ul class="nav"><li class="nav-item"> <a href="/" class="nav-link"> <i class="fa-fw fas fa-home"></i> <span>HOME</span> </a><li class="nav-item"> <a href="/categories/" class="nav-link"> <i class="fa-fw fas fa-stream"></i> <span>CATEGORIES</span> </a><li class="nav-item"> <a href="/tags/" class="nav-link"> <i class="fa-fw fas fa-tags"></i> <span>TAGS</span> </a><li class="nav-item"> <a href="/archives/" class="nav-link"> <i class="fa-fw fas fa-archive"></i> <span>ARCHIVES</span> </a><li class="nav-item"> <a href="/about/" class="nav-link"> <i class="fa-fw fas fa-info-circle"></i> <span>ABOUT</span> </a></ul></nav><div class="sidebar-bottom d-flex flex-wrap align-items-center w-100"> <a href="https://github.com/dmpdump" aria-label="github" target="_blank" rel="noopener noreferrer" > <i class="fab fa-github"></i> </a> <a href="https://twitter.com/G60930953" aria-label="twitter" target="_blank" rel="noopener noreferrer" > <i class="fa-brands fa-x-twitter"></i> </a> <a href="javascript:location.href = 'mailto:' + ['dmpdump','tuta.io'].join('@')" aria-label="email" > <i class="fas fa-envelope"></i> </a> <a href="/feed.xml" aria-label="rss" > <i class="fas fa-rss"></i> </a></div></aside><div id="main-wrapper" class="d-flex justify-content-center"><div class="container d-flex flex-column px-xxl-5"><header id="topbar-wrapper" aria-label="Top Bar"><div id="topbar" class="d-flex align-items-center justify-content-between px-lg-3 h-100" ><nav id="breadcrumb" aria-label="Breadcrumb"> <span> <a href="/">Home</a> </span> <span>Possible APT32/Ocean Lotus Installer abusing MST Transforms</span></nav><button type="button" id="sidebar-trigger" class="btn btn-link"> <i class="fas fa-bars fa-fw"></i> </button><div id="topbar-title"> Post</div><button type="button" id="search-trigger" class="btn btn-link"> <i class="fas fa-search fa-fw"></i> </button> <search id="search" class="align-items-center ms-3 ms-lg-0"> <i class="fas fa-search fa-fw"></i> <input class="form-control" id="search-input" type="search" aria-label="search" autocomplete="off" placeholder="Search..." > </search> <button type="button" class="btn btn-link text-decoration-none" id="search-cancel">Cancel</button></div></header><div class="row flex-grow-1"><main aria-label="Main Content" class="col-12 col-lg-11 col-xl-9 px-md-4"><article class="px-1"><header><h1 data-toc-skip>Possible APT32/Ocean Lotus Installer abusing MST Transforms</h1><div class="post-meta text-muted"> <span> Posted <time data-ts="1748476800" data-df="ll" data-bs-toggle="tooltip" data-bs-placement="bottom" > May 29, 2025 </time> </span> <span> Updated <time data-ts="1748603364" data-df="ll" data-bs-toggle="tooltip" data-bs-placement="bottom" > May 30, 2025 </time> </span><div class="d-flex justify-content-between"> <span> By <em> <a href="https://github.com/dmpdump">dmpdump</a> </em> </span><div> <span class="readtime" data-bs-toggle="tooltip" data-bs-placement="bottom" title="1294 words" > <em>7 min</em> read</span></div></div></div></header><div class="content"><p>While monitoring new threats, I came across an interesting ISO image (ced7fe9c5ec508216e6dd9a59d2d5193a58bdbac5f41a38ea97dd5c7fceef7a5) uploaded to VirusTotal from Taiwan on May 20, 2025. The ISO contained 3 files:</p><ul><li>脱密 中央国安办.pdf.lnk (Declassified Central National Security Office.pdf.lnk)<li>WindowsPCHealthCheckSetup.msi (hidden)<li>5ACXP.mst (hidden)</ul><p>Upon review of the files, I found strong similarities with a <a href="https://ti.qianxin.com/blog/articles/new%20-trend-in-msi-file-abuse-new-oceanlotus-group-first-to-use-mst-files-to-deliver-special-trojan-en/">sample</a> initially reported by QiAnxin Threat Intelligence Center on November 24, 2024. QiAnxin’s 2024 report appears to be the first report of an abused MST transform, but there may be previous cases that I am not aware of.</p><p><code class="language-plaintext highlighter-rouge">Note: The attribution to Ocean Lotus / APT32 is solely based on QiAnXin's previous attribution</code></p><h1 id="infection-chain-analysis">Infection Chain Analysis</h1><p>The victim is expected to run the only visible file in the ISO, 脱密 中央国安办.pdf.lnk, a shortcut file disguised as a PDF via double extension.</p><p><a href="/assets/images/apt32_mst/iso.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/iso.png" alt="sshot" loading="lazy"></a></p><p>The shortcut file reveals the execution of the hidden files: an MSI installer with an MST transform.</p><p><a href="/assets/images/apt32_mst/lnk.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/lnk.png" alt="sshot" loading="lazy"></a></p><p>MST transforms are a collection of changes applied to an installation package, applied during the installation process. There are 3 types of transforms:</p><ul><li><code class="language-plaintext highlighter-rouge">Embedded Transforms</code>, embedded within the MSI installer<li><code class="language-plaintext highlighter-rouge">Secured Transforms</code>, stored locally in a directory where only administrators have write access<li><code class="language-plaintext highlighter-rouge">Unsecured Transforms</code>, not secured with the control used in Secured Transforms, and can be passed as an argument in the command line of the MSI file execution using the <code class="language-plaintext highlighter-rouge">TRANSFORMS=</code> property</ul><p><a href="https://learn.microsoft.com/en-us/windows/win32/msi/about-transforms">Here</a> is Microsoft’s documentation on MSI Transforms.</p><p>As seen in the LNK file used by this threat actor, a suspicious Unsecured Transform is passed as an argument during the execution of the MSI installer. We can apply the transform manually and compare the MSI tables before and after the transform to see how the installation process is modified.</p><p><a href="/assets/images/apt32_mst/msi_pre.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/msi_pre.png" alt="sshot" loading="lazy"></a></p><p><a href="/assets/images/apt32_mst/msi_post.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/msi_post.png" alt="sshot" loading="lazy"></a></p><p>A custom action is added, using a new DLL named <code class="language-plaintext highlighter-rouge">Transforms.dll</code>. Two exported functions within the DLL are called, <code class="language-plaintext highlighter-rouge">LogSetupBeforeInstall</code> and <code class="language-plaintext highlighter-rouge">LogSetupAfterInstall</code>. In order to review if any malicious activity is implemented via the MST, we need to review the <code class="language-plaintext highlighter-rouge">Transforms.dll</code>.</p><p>The DLL exists within the MST file:</p><p><a href="/assets/images/apt32_mst/mst_transforms.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/mst_transforms.png" alt="sshot" loading="lazy"></a></p><p>It contains the 2 expected exported functions:</p><p><a href="/assets/images/apt32_mst/transforms_fun.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/transforms_fun.png" alt="sshot" loading="lazy"></a></p><p>Reviewing the DLL, we can confirm the following capabilities:</p><ul><li>Drops and opens a decoy PDF<br /> The LogSetupBeforeInstall exported function extracts an embedded PDF of 33460 bytes and saves it to <code class="language-plaintext highlighter-rouge">%USERPROFILE%\Documents\</code>. The PDF is named <code class="language-plaintext highlighter-rouge">脱密 中央国安办.pdf (Declassified Central National Security Office.pdf)</code>. The PDF is opened with the <code class="language-plaintext highlighter-rouge">ShellExecuteExW</code> WinAPI.</ul><p><a href="/assets/images/apt32_mst/open_pdf.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/open_pdf.png" alt="sshot" loading="lazy"></a></p><p><a href="/assets/images/apt32_mst/embedded_pdf.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/embedded_pdf.png" alt="sshot" loading="lazy"></a></p><p>The PDF content is consistent with the theme used in the file names. Machine translation suggests that the content is related to a National Security Office reorganization. The PDF looks truncated, possibly a deliberate action by the threat actor.</p><p><a href="/assets/images/apt32_mst/pdf_content.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/pdf_content.png" alt="sshot" loading="lazy"></a></p><ul><li>Contains an embedded DLL, which is subsequently dropped to disk<br /> The DLL contains an embedded DLL in the <code class="language-plaintext highlighter-rouge">.rdata</code> section named <code class="language-plaintext highlighter-rouge">tbs.dll</code>. The DLL is dropped to disk during the installation of the MSI package. As we will see later, the execution of the final payload relies on this DLL.</ul><p><a href="/assets/images/apt32_mst/embedded_dll.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/embedded_dll.png" alt="sshot" loading="lazy"></a></p><ul><li>Establishes persistence via a registry run key<br /> The DLL establishes persistence via a registry run key. Persistence is established for the following executable: <code class="language-plaintext highlighter-rouge">%LocalAppData%\PCHealthCheck\PCHealthCheck.exe</code>.</ul><p><a href="/assets/images/apt32_mst/persist_1.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/persist_1.png" alt="sshot" loading="lazy"></a></p><p><a href="/assets/images/apt32_mst/persist_2.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/persist_2.png" alt="sshot" loading="lazy"></a></p><p>Upon the execution of the MST-transformed <code class="language-plaintext highlighter-rouge">WindowsPCHealthCheckSetup.msi</code> via the <code class="language-plaintext highlighter-rouge">脱密 中央国安办.pdf.lnk</code> shortcut, we end up with the legitimate PcHealthCheck executable along with the malicious <code class="language-plaintext highlighter-rouge">tbs.dll</code> dropped by the MST transform under <code class="language-plaintext highlighter-rouge">%LocalAppData%\PCHealthCheck\</code>. As expected, <code class="language-plaintext highlighter-rouge">tbs.dll</code> is side-loaded by <code class="language-plaintext highlighter-rouge">PcHealthCheck.exe</code>.</p><p><a href="/assets/images/apt32_mst/sideload.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/sideload.png" alt="sshot" loading="lazy"></a></p><h1 id="function-hooking">Function Hooking</h1><p>The malicious execution of <code class="language-plaintext highlighter-rouge">tbs.dll</code> via DLL side-loading triggers an interesting sequence of events which involves function hooking and patching of a DLL in memory, as well as a multi-stage sequence of shellcodes that leads to the execution of the final payload in memory. The first step in the infection process is the implementation of a hook in the <code class="language-plaintext highlighter-rouge">RtlUserThreadStart</code> function. First, the malware resolves the <code class="language-plaintext highlighter-rouge">ntdll.dll</code> and <code class="language-plaintext highlighter-rouge">kernel32.dll</code> modules using the <code class="language-plaintext highlighter-rouge">djb2</code> algorithm for the module name resolution. Then, it resolves the <code class="language-plaintext highlighter-rouge">RtlUserThreadStart</code> function (hooking target) and the <code class="language-plaintext highlighter-rouge">GetModuleHandle</code> function, used to implement the hook. The core of the function hook resides in:</p><ul><li>Resolving the base address of the current executable<li>Using that base address to locate the entry point<li>Getting the stack base for the current thread<li>Scanning the <a href="https://www.vergiliusproject.com/kernels/x64/windows-10/22h2/_CONTEXT">CONTEXT</a> structure to validate when the <code class="language-plaintext highlighter-rouge">rip</code> instruction pointer (offset 0xF8 in the structure) is in <code class="language-plaintext highlighter-rouge">RtlUserThreadStart</code><li>Updating <code class="language-plaintext highlighter-rouge">rip</code> to point to the malicious function, which I renamed to <code class="language-plaintext highlighter-rouge">fn_pload_load</code></ul><p>Essentially, the hook is implemented via <code class="language-plaintext highlighter-rouge">thread context manipulation</code>, redirecting execution to malicious code.</p><p><a href="/assets/images/apt32_mst/hook.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/hook.png" alt="sshot" loading="lazy"></a></p><p>Inspecting <code class="language-plaintext highlighter-rouge">fn_pload_load</code>, we can see that this is a trampoline hook. After executing the malicious logic in the function I named <code class="language-plaintext highlighter-rouge">fn_pload_decrypt_dll_patch</code>, it calls the legitimate <code class="language-plaintext highlighter-rouge">RtlUserThreadStart</code>.</p><p><a href="/assets/images/apt32_mst/trampoline.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/trampoline.png" alt="sshot" loading="lazy"></a></p><h1 id="shellcode-decryption-and-dll-patching">Shellcode Decryption and DLL Patching</h1><p>The function I named <code class="language-plaintext highlighter-rouge">fn_pload_decrypt_dll_patch</code> implements a custom decryption algorithm for the next stage shellcode. First, it copies 803489 bytes from an encrypted blob to a newly allocated buffer and sets up a 32-byte key <code class="language-plaintext highlighter-rouge">0x5f7b41cb6c68699def80c3a916b760e27396f55765c9c38db174999e2efa165c</code>.</p><p><a href="/assets/images/apt32_mst/enc_blob.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/enc_blob.png" alt="sshot" loading="lazy"></a></p><p>The blob is subsequently decrypted using a combination of AES-256 in ECB mode with XOR, in 16-byte blocks. The decryption algorithm does the following:</p><ul><li>It AES decrypts the first 16 bytes of the encrypted blob but does not apply XOR decryption. This will be the header of the decrypted buffer<li>The second 16-byte block is AES-decrypted, using that decrypted block as the XOR key for the first 16-byte block of the encrypted blob<li>The third 16-byte block is AES-decrypted, using those bytes as the XOR key for the second 16-byte block of the encrypted blob<li>It continues incrementing the blocks applying AES-decryption and using the decrypted bytes as the XOR key for the previous 16-byte block <a href="/assets/images/apt32_mst/decrypt.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/decrypt.png" alt="sshot" loading="lazy"></a></ul><p>The result is a decrypted buffer with the following header: <code class="language-plaintext highlighter-rouge">5D 00 00 80 00 60 32 0C 00 00 00 00 00 00</code>. This header is indicative of the <code class="language-plaintext highlighter-rouge">Lempel-Ziv-Markov (LZMA)</code> algorithm. LZMA decompression is subsequently applied to the buffer, decompressing a shellcode.</p><p><a href="/assets/images/apt32_mst/decrypted_blob.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/decrypted_blob.png" alt="sshot" loading="lazy"></a></p><p>Once the shellcode is decrypted and decompressed, a new function is called passing a pointer to the string <code class="language-plaintext highlighter-rouge">xpsservices.dll</code> and a pointer to the decrypted shellcode. This function resolves the <code class="language-plaintext highlighter-rouge">LoadLibraryExA</code> and <code class="language-plaintext highlighter-rouge">ZwProtectVirtualMemory</code> APIs via API hashing.</p><p><a href="/assets/images/apt32_mst/loadlib.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/loadlib.png" alt="sshot" loading="lazy"></a> <a href="/assets/images/apt32_mst/zwprotect.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/zwprotect.png" alt="sshot" loading="lazy"></a></p><p>The legitimate <code class="language-plaintext highlighter-rouge">xpsservices.dll</code> is then loaded with <code class="language-plaintext highlighter-rouge">LoadLibraryExA</code> and the DLL is patched in memory, copying the shellcode to the <code class="language-plaintext highlighter-rouge">.text</code> section. For that, the function searches for the <code class="language-plaintext highlighter-rouge">.text</code> section, converting the string <code class="language-plaintext highlighter-rouge">.tex_</code> into <code class="language-plaintext highlighter-rouge">.text</code> at runtime, replacing the last character in an attempt to avoid static detection of the string.</p><p><a href="/assets/images/apt32_mst/text_replace.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/text_replace.png" alt="sshot" loading="lazy"></a></p><p>Once the <code class="language-plaintext highlighter-rouge">.text</code> section is found, memory protection is changed to <code class="language-plaintext highlighter-rouge">PAGE_READWRITE</code> using <code class="language-plaintext highlighter-rouge">ZwProtectVirtualMemory</code>. The shellcode is copied to that section, and memory protection is changed to <code class="language-plaintext highlighter-rouge">PAGE_EXECUTE_READWRITE</code>.</p><p><a href="/assets/images/apt32_mst/patch.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/patch.png" alt="sshot" loading="lazy"></a></p><p>Finally, when this function returns, the shellcode is executed from the patched DLL.</p><p><a href="/assets/images/apt32_mst/shellcode_exec.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/shellcode_exec.png" alt="sshot" loading="lazy"></a></p><p>The next-stage shellcode contains a self-unpacking stub that decompresses and executes a blob of LZMA-compressed data. The LZMA compression is again recognized thanks to its distinctive <code class="language-plaintext highlighter-rouge">5D 00 00 80 00 60 32 0C 00 00 00 00 00 00</code> header. The decompressed payload is executed as shellcode with a call to <code class="language-plaintext highlighter-rouge">rbx</code>.</p><p><a href="/assets/images/apt32_mst/shellcode_decompression.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/shellcode_decompression.png" alt="sshot" loading="lazy"></a></p><p><a href="/assets/images/apt32_mst/shellcode_execution.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/shellcode_execution.png" alt="sshot" loading="lazy"></a></p><p>The last stage is another shellcode. This final implant is written in Rust, it has a statically linked <code class="language-plaintext highlighter-rouge">libcurl</code> library, and connects to the following command and control: <code class="language-plaintext highlighter-rouge">http://194.87.108[.]94:80/users/b97fc88c-cff5-4433-a784-df2a5e094452/profile/information</code> and uses a forged User-Agent string to impersonate a Huawei Android device: <code class="language-plaintext highlighter-rouge">Mozilla/5.0 (Linux; Android 12; JAD-AL00 Build/HUAWEIJAD-AL00; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/114.0.5735.196 Mobile Safari/537.36</code>.</p><p><a href="/assets/images/apt32_mst/final0.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/final0.png" alt="sshot" loading="lazy"></a></p><p>At a high level, we can summarize the complete infection chain with the following diagram:</p><p><a href="/assets/images/apt32_mst/Diagram.png" class="popup img-link shimmer"><img src="/assets/images/apt32_mst/Diagram.png" alt="sshot" loading="lazy"></a></p><h1 id="related-samples">Related Samples</h1><p>A few likely related samples were shared in social media by MalwareHunterTeam <a href="https://x.com/malwrhunterteam/status/1918410442860576875">here</a> and <a href="https://x.com/malwrhunterteam/status/1920384329814863992">here</a>.</p><p>The abuse and trojanization of MST transforms is a rare technique. The samples that appeared in the wild in May 2025 seem to be a continuation to the activity originally reported by QiAnXin in November 2024.</p><h1 id="iocs">IOCs</h1><ul><li>ISO: ced7fe9c5ec508216e6dd9a59d2d5193a58bdbac5f41a38ea97dd5c7fceef7a5<li>脱密 中央国安办.pdf.lnk: c430f5388a36be5a3b18a382c4a5e1f25f28a2db1ebd22009885ec1ec92bd061<li>WindowsPCHealthCheckSetup.msi: f87bf57756049015686b7769b5a8db32026d310bf853e7d132424f7513fe316c<li>5ACXP.mst: 2f32ca6358a57531c04c640625f2b30a3c1bdbcbfd896107597fcdcbab3153e0<li>Transforms.dll: 20c8b797b614f574070d591248edcaa764ecfb95eba3f58a98bf2e40b4d91ffe<li>tbs.dll: 20c8b797b614f574070d591248edcaa764ecfb95eba3f58a98bf2e40b4d91ffe<li>C2: http://194.87.108[.]94:80/users/b97fc88c-cff5-4433-a784-df2a5e094452/profile/information</ul></div><div class="post-tail-wrapper text-muted"><div class="post-tags"> <i class="fa fa-tags fa-fw me-1"></i> <a href="/tags/cti/" class="post-tag no-text-decoration" >cti</a> <a href="/tags/malware/" class="post-tag no-text-decoration" >malware</a> <a href="/tags/mst/" class="post-tag no-text-decoration" >mst</a> <a href="/tags/oceanlotus/" class="post-tag no-text-decoration" >oceanlotus</a> <a href="/tags/vietnam/" class="post-tag no-text-decoration" >vietnam</a></div><div class=" post-tail-bottom d-flex justify-content-between align-items-center mt-5 pb-2 " ><div class="license-wrapper"> This post is licensed under <a href="https://creativecommons.org/licenses/by/4.0/"> CC BY 4.0 </a> by the author.</div><div class="share-wrapper d-flex align-items-center"> <span class="share-label text-muted">Share</span> <span class="share-icons"> <a href="https://twitter.com/intent/tweet?text=Possible%20APT32/Ocean%20Lotus%20Installer%20abusing%20MST%20Transforms%20-%20dmpdump&url=https%3A%2F%2Fdmpdump.github.io%2Fposts%2FPossible-Ocean-LotusInstaller-Abusing-MST-Transforms%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Twitter" aria-label="Twitter"> <i class="fa-fw fa-brands fa-square-x-twitter"></i> </a> <a href="https://www.facebook.com/sharer/sharer.php?title=Possible%20APT32/Ocean%20Lotus%20Installer%20abusing%20MST%20Transforms%20-%20dmpdump&u=https%3A%2F%2Fdmpdump.github.io%2Fposts%2FPossible-Ocean-LotusInstaller-Abusing-MST-Transforms%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Facebook" aria-label="Facebook"> <i class="fa-fw fab fa-facebook-square"></i> </a> <a href="https://t.me/share/url?url=https%3A%2F%2Fdmpdump.github.io%2Fposts%2FPossible-Ocean-LotusInstaller-Abusing-MST-Transforms%2F&text=Possible%20APT32/Ocean%20Lotus%20Installer%20abusing%20MST%20Transforms%20-%20dmpdump" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Telegram" aria-label="Telegram"> <i class="fa-fw fab fa-telegram"></i> </a> <button id="copy-link" aria-label="Copy link" class="btn small" data-bs-toggle="tooltip" data-bs-placement="top" title="Copy link" data-title-succeed="Link copied successfully!" > <i class="fa-fw fas fa-link pe-none fs-6"></i> </button> </span></div></div></div></article></main><aside aria-label="Panel" id="panel-wrapper" class="col-xl-3 ps-2 mb-5 text-muted"><div class="access"><section id="access-lastmod"><h2 class="panel-heading">Recently Updated</h2><ul class="content list-unstyled ps-0 pb-1 ms-1 mt-2"><li class="text-truncate lh-lg"> <a href="/posts/Possible-Ocean-LotusInstaller-Abusing-MST-Transforms/">Possible APT32/Ocean Lotus Installer abusing MST Transforms</a><li class="text-truncate lh-lg"> <a href="/posts/Python_Backdoor_TW/">Python Backdoor Uploaded from Taiwan</a><li class="text-truncate lh-lg"> <a href="/posts/Low_Detection_backdoor_NHAS_RSSH/">Likely Chinese Threat Actor Uses Low Detection Linux Backdoor and NHAS Reverse SSH</a><li class="text-truncate lh-lg"> <a href="/posts/Unattributed_Downloader_Cambodia/">Unattributed Shellcode Loader Likely Targeting Cambodia</a><li class="text-truncate lh-lg"> <a href="/posts/Kivars/">China-nexus Kivars Backdoor Uploaded from Taiwan</a></ul></section><section><h2 class="panel-heading">Trending Tags</h2><div class="d-flex flex-wrap mt-3 mb-1 me-3"> <a class="post-tag btn btn-outline-primary" href="/tags/malware/">malware</a> <a class="post-tag btn btn-outline-primary" href="/tags/cti/">cti</a> <a class="post-tag btn btn-outline-primary" href="/tags/apt/">apt</a> <a class="post-tag btn btn-outline-primary" href="/tags/chrome/">chrome</a> <a class="post-tag btn btn-outline-primary" href="/tags/re/">RE</a> <a class="post-tag btn btn-outline-primary" href="/tags/china/">china</a> <a class="post-tag btn btn-outline-primary" href="/tags/cn/">cn</a> <a class="post-tag btn btn-outline-primary" href="/tags/cti/">CTI</a> <a class="post-tag btn btn-outline-primary" href="/tags/dprk/">dprk</a> <a class="post-tag btn btn-outline-primary" href="/tags/elf/">elf</a></div></section></div></aside></div><div class="row"><div id="tail-wrapper" class="col-12 col-lg-11 col-xl-9 px-md-4"><aside id="related-posts" aria-labelledby="related-label"><h3 class="mb-4" id="related-label">Further Reading</h3><nav class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4 mb-4"><article class="col"> <a href="/posts/Lazarus-Backdoor-ITLure/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1739059200" data-df="ll" > Feb 9, 2025 </time><h4 class="pt-0 my-2">Lazarus Backdoor with IT Lure</h4><div class="text-muted"><p>On January 27, 2025, @smica83 shared a sample on X indicating that it looked like Lazarus malware. I reviewed the sample and concluded that, indeed, it is a North Korean backdoor, likely the latest...</p></div></div></a></article><article class="col"> <a href="/posts/Low_Detection_backdoor_NHAS_RSSH/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1746057600" data-df="ll" > May 1, 2025 </time><h4 class="pt-0 my-2">Likely Chinese Threat Actor Uses Low Detection Linux Backdoor and NHAS Reverse SSH</h4><div class="text-muted"><p>On April 22, 2025, MalwareHunterTeam shared a hash for a low detection Linux ELF with 2 hard-coded IP addresses: 43.159.18[.]135 and 119.42.148[.]187. Upon review of the executable (ea41b2bf1064efc...</p></div></div></a></article><article class="col"> <a href="/posts/Python_Backdoor_TW/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1744934400" data-df="ll" > Apr 18, 2025 </time><h4 class="pt-0 my-2">Python Backdoor Uploaded from Taiwan</h4><div class="text-muted"><p>On April 18, 2025, I came across an interesting LNK file uploaded from Taiwan (f4bb263eb03240c1d779a00e1e39d3374c93d909d358691ca5386387d06be472), which I subsequently found had been initially disco...</p></div></div></a></article></nav></aside><nav class="post-navigation d-flex justify-content-between" aria-label="Post Navigation"> <a href="/posts/Low_Detection_backdoor_NHAS_RSSH/" class="btn btn-outline-primary" aria-label="Older" ><p>Likely Chinese Threat Actor Uses Low Detection Linux Backdoor and NHAS Reverse SSH</p></a><div class="btn btn-outline-primary disabled" aria-label="Newer"><p>-</p></div></nav><footer aria-label="Site Info" class=" d-flex flex-column justify-content-center text-muted flex-lg-row justify-content-lg-between align-items-lg-center pb-lg-3 " ><p>© <time>2025</time> <a href="https://github.com/dmpdump">dmpdump</a>. <span data-bs-toggle="tooltip" data-bs-placement="top" title="Except where otherwise noted, the blog posts on this site are licensed under the Creative Commons Attribution 4.0 International (CC BY 4.0) License by the author." >Some rights reserved.</span></p><p>Using the <a data-bs-toggle="tooltip" data-bs-placement="top" title="v7.1.0" href="https://github.com/cotes2020/jekyll-theme-chirpy" target="_blank" rel="noopener" >Chirpy</a> theme for <a href="https://jekyllrb.com" target="_blank" rel="noopener">Jekyll</a>.</p></footer></div></div><div id="search-result-wrapper" class="d-flex justify-content-center d-none"><div class="col-11 content"><div id="search-hints"><section><h2 class="panel-heading">Trending Tags</h2><div class="d-flex flex-wrap mt-3 mb-1 me-3"> <a class="post-tag btn btn-outline-primary" href="/tags/malware/">malware</a> <a class="post-tag btn btn-outline-primary" href="/tags/cti/">cti</a> <a class="post-tag btn btn-outline-primary" href="/tags/apt/">apt</a> <a class="post-tag btn btn-outline-primary" href="/tags/chrome/">chrome</a> <a class="post-tag btn btn-outline-primary" href="/tags/re/">RE</a> <a class="post-tag btn btn-outline-primary" href="/tags/china/">china</a> <a class="post-tag btn btn-outline-primary" href="/tags/cn/">cn</a> <a class="post-tag btn btn-outline-primary" href="/tags/cti/">CTI</a> <a class="post-tag btn btn-outline-primary" href="/tags/dprk/">dprk</a> <a class="post-tag btn btn-outline-primary" href="/tags/elf/">elf</a></div></section></div><div id="search-results" class="d-flex flex-wrap justify-content-center text-muted mt-3"></div></div></div></div><aside aria-label="Scroll to Top"> <button id="back-to-top" type="button" class="btn btn-lg btn-box-shadow"> <i class="fas fa-angle-up"></i> </button></aside></div><div id="mask"></div><aside id="notification" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-animation="true" data-bs-autohide="false" ><div class="toast-header"> <button type="button" class="btn-close ms-auto" data-bs-dismiss="toast" aria-label="Close" ></button></div><div class="toast-body text-center pt-0"><p class="px-2 mb-3">A new version of content is available.</p><button type="button" class="btn btn-primary" aria-label="Update"> Update </button></div></aside><script src="https://cdn.jsdelivr.net/combine/npm/simple-jekyll-search@1.10.0/dest/simple-jekyll-search.min.js,npm/loading-attribute-polyfill@2.1.1/dist/loading-attribute-polyfill.umd.min.js,npm/glightbox@3.3.0/dist/js/glightbox.min.js,npm/clipboard@2.0.11/dist/clipboard.min.js,npm/dayjs@1.11.13/dayjs.min.js,npm/dayjs@1.11.13/locale/en.js,npm/dayjs@1.11.13/plugin/relativeTime.js,npm/dayjs@1.11.13/plugin/localizedFormat.js"></script> <script src="/assets/js/dist/post.min.js"></script> <script defer src="/app.min.js"></script> <script>SimpleJekyllSearch({ searchInput: document.getElementById('search-input'), resultsContainer: document.getElementById('search-results'), json: '/assets/js/data/search.json', searchResultTemplate: '<article class="px-1 px-sm-2 px-lg-4 px-xl-0"><header><h2><a href="{url}">{title}</a></h2><div class="post-meta d-flex flex-column flex-sm-row text-muted mt-1 mb-1"> {categories} {tags}</div></header><p>{snippet}</p></article>', noResultsText: '<p class="mt-5">Oops! No results found.</p>', templateMiddleware: function(prop, value, template) { if (prop === 'categories') { if (value === '') { return `${value}`; } else { return `<div class="me-sm-4"><i class="far fa-folder fa-fw"></i>${value}</div>`; } } if (prop === 'tags') { if (value === '') { return `${value}`; } else { return `<div><i class="fa fa-tag fa-fw"></i>${value}</div>`; } } } }); </script>
