<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>EMOTET Dynamic Configuration Extraction — Elastic Security Labs</title><meta name="description" content="Elastic Security Labs discusses the EMOTET trojan and is releasing a tool to dynamically extract configuration files using code emulators."/><meta property="og:title" content="EMOTET Dynamic Configuration Extraction — Elastic Security Labs"/><meta property="og:description" content="Elastic Security Labs discusses the EMOTET trojan and is releasing a tool to dynamically extract configuration files using code emulators."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/emotet-dynamic-configuration-extraction/lock-code-combination-configuration.jpg?f533be804c392ecc30337df467d06636"/><meta property="og:image:alt" content="Elastic Security Labs discusses the EMOTET trojan and is releasing a tool to dynamically extract configuration files using code emulators."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/emotet-dynamic-configuration-extraction"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="EMOTET Dynamic Configuration Extraction — Elastic Security Labs"/><meta name="twitter:description" content="Elastic Security Labs discusses the EMOTET trojan and is releasing a tool to dynamically extract configuration files using code emulators."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/emotet-dynamic-configuration-extraction/lock-code-combination-configuration.jpg?f533be804c392ecc30337df467d06636"/><meta name="twitter:image:alt" content="Elastic Security Labs discusses the EMOTET trojan and is releasing a tool to dynamically extract configuration files using code emulators."/><link rel="canonical" href="https://www.elastic.co/security-labs/emotet-dynamic-configuration-extraction"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Femotet-dynamic-configuration-extraction%2Flock-code-combination-configuration.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Femotet-dynamic-configuration-extraction%2Flock-code-combination-configuration.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Femotet-dynamic-configuration-extraction%2Flock-code-combination-configuration.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Femotet-dynamic-configuration-extraction%2Flock-code-combination-configuration.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Femotet-dynamic-configuration-extraction%2Flock-code-combination-configuration.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Femotet-dynamic-configuration-extraction%2Flock-code-combination-configuration.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Femotet-dynamic-configuration-extraction%2Flock-code-combination-configuration.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Femotet-dynamic-configuration-extraction%2Flock-code-combination-configuration.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-4378a3e3b84d79cd.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-b0c191de1a3710e4.js" defer=""></script><script src="/security-labs/_next/static/wTIynxBm98ujmQxLsgK6X/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/wTIynxBm98ujmQxLsgK6X/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/emotet-dynamic-configuration-extraction"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/emotet-dynamic-configuration-extraction"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2022-12-01T00:00:00.000Z">1 December 2022</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/remco-sprooten">Remco Sprooten</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>EMOTET Dynamic Configuration&nbsp;Extraction</span></h1><p class="text-zinc-200 text-base md:text-xl">A tool for the dynamic extraction of EMOTET configurations based on emulation.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>16 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/security-research">Security research</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="EMOTET Dynamic Configuration Extraction" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Femotet-dynamic-configuration-extraction%2Flock-code-combination-configuration.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Femotet-dynamic-configuration-extraction%2Flock-code-combination-configuration.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Femotet-dynamic-configuration-extraction%2Flock-code-combination-configuration.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Femotet-dynamic-configuration-extraction%2Flock-code-combination-configuration.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Femotet-dynamic-configuration-extraction%2Flock-code-combination-configuration.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Femotet-dynamic-configuration-extraction%2Flock-code-combination-configuration.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Femotet-dynamic-configuration-extraction%2Flock-code-combination-configuration.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Femotet-dynamic-configuration-extraction%2Flock-code-combination-configuration.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Femotet-dynamic-configuration-extraction%2Flock-code-combination-configuration.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="key-takeaways" class="absolute -top-32"></span>Key takeaways</h2>
<ul>
<li>The EMOTET developers have changed the way they encode their configuration in the 64bit version of the malware.</li>
<li>Using code emulation we can bypass multiple code obfuscation techniques.</li>
<li>The use of code emulators in config extractors will become more prevalent in the future.</li>
</ul>
<blockquote>
<p>To download the EMOTET configuration extractor, check out our post on the tool:</p>
<ul>
<li><a href="https://www.elastic.co/security-labs/emotet-configuration-extractor">EMOTET configuration extractor</a></li>
</ul>
</blockquote>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="preamble" class="absolute -top-32"></span>Preamble</h2>
<p>The <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.emotet">EMOTET</a> family broke onto the malware scene as a <a href="https://web.archive.org/web/20140701001622/https:/blog.trendmicro.com/trendlabs-security-intelligence/new-banking-malware-uses-network-sniffing-for-data-theft/">modular banking trojan in 2014</a>, focused on harvesting and exfiltrating bank account information by inspecting traffic. EMOTET has been adapted as an early-stage implant used to load other malware families, such as <a href="https://www.elastic.co/security-labs/exploring-the-qbot-attack-pattern">QAKBOT</a>, <a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Trickbot.yar">TRICKBOT</a>, and <a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Ransomware_Ryuk.yar">RYUK</a>. While multiple EMOTET campaigns have been dismantled by international law enforcement entities, it has continued to operate as one of the most prolific cybercrime operations.</p>
<p>For the last several months, Elastic Security has observed the EMOTET developers <a href="https://twitter.com/Cryptolaemus1/status/1516261512372965383?ref_src=twsrc%5Etfw">transition</a> to a 64-bit version of their malware. While this change does not seem to impact the core functionality of the samples we have witnessed, we did notice a change in how the configuration and strings are obfuscated. In earlier versions of EMOTET, the configuration was stored in an encrypted form in the <strong>.data</strong> section of the binary. In the newer versions the configuration is calculated at runtime. The information we need to extract the configuration from the binary is thus hidden within the actual code.</p>
<p>In the next sections, we’ll discuss the following as it relates to 64-bit EMOTET samples:</p>
<ul>
<li>EMOTET encryption mechanisms</li>
<li>Reviewing the EMOTET C2 list</li>
<li>Interesting EMOTET strings</li>
<li>The EMOTET configuration extractor utility</li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="encryption-keys" class="absolute -top-32"></span>Encryption keys</h2>
<p>EMOTET uses embedded <a href="https://blog.cloudflare.com/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/">Elliptic Curve Cryptography</a> (ECC) public keys to encrypt their network communication. While in previous versions, the keys would be stored in an XOR-encrypted blob, now the content is calculated at runtime.</p>
<p></p>
<p>In comparison the previous versions of EMOTET would store an encrypted version of the key data in the . <strong>text</strong> section of the binary.</p>
<p></p>
<p>In order to make it harder for security researchers to find the given code the malware uses <a href="https://www.usenix.org/conference/usenixsecurity21/presentation/liu-binbin">Mixed Boolean-Arithmetic</a> (MBA) as one of its obfuscation techniques. It transforms constants and simple expressions into expressions that contain a mix of Boolean and arithmetic operations.</p>
<p></p>
<p>In this example, an array of constants is instantiated, but looking at the assembly we see that every constant is calculated at runtime. This method makes it challenging to develop a signature to target this function.</p>
<p>We noticed that both the <a href="https://cryptobook.nakov.com/asymmetric-key-ciphers/ecdh-key-exchange">Elliptic Curve Diffie-Hellman</a> (ECDH) and <a href="https://cryptobook.nakov.com/digital-signatures/ecdsa-sign-verify-messages">Elliptic Curve Digital Signature Algorithm</a> (ECDSA) keys use the same function to decode the contents.</p>
<p>The ECDH key (which you can recognize by its magic ECK1 bytes) is used for encryption purposes while the ECDSA key (ECC1) is used for verifying the C2 server&#x27;s responses.</p>
<p></p>
<p></p>
<p>By leveraging a YARA signature to find the location of this decode function within the EMOTET binary we can observe the following process:</p>
<ol>
<li>Find the decoding algorithm within the binary.</li>
<li>Locate any Cross References (<a href="https://hex-rays.com/blog/igor-tip-of-the-week-16-cross-references/">Xrefs</a>) to the decoding function.</li>
<li>Emulate the function that calls the decoding function.</li>
<li>Read the resulting data from memory.</li>
</ol>
<p>As we mentioned, we first find the function in the binary by using YARA. The signature is provided at the <a href="https://www.elastic.co/security-labs/emotet-dynamic-configuration-extraction#yara">end of this article</a>. It is worth pointing out that these yara signatures are used to identify locations in the binary but are, in their current form, not usable to identify EMOTET samples.</p>
<p>In order to automatically retrieve the data from multiple samples, we created a configuration extractor. In the snippets below, we will demonstrate, in a high level fashion, how we collect the configuration information from the malware samples.</p>
<p></p>
<p>In the above code snippet:</p>
<ol>
<li>First load the YARA signature.</li>
<li>Try to find a match, and if a signature is found in the file.</li>
<li>Calculate the function offset based on the offset in the file.</li>
</ol>
<p>In order to locate the Xrefs to this function, we use the excellent <a href="https://github.com/danielplohmann/smda">SMDA decompiler</a>. After locating the Xrefs, we can start the emulation process using the CPU emulator, <a href="https://www.unicorn-engine.org/">Unicorn</a>.</p>
<p></p>
<ol>
<li>Initialize the Unicorn emulator.</li>
<li>Load the executable code from the PE file into memory.</li>
<li>Disassemble the function to find the return and the end of the execution.</li>
<li>The binary will try to use the windows <a href="https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapalloc">HeapAlloc API</a> to allocate space for the decoded data. Since we don&#x27;t want to emulate any windows API&#x27;s, as this would add unnecessary complexity, we hook to code so that we can allocate space ourselves.</li>
<li>After the emulation has run the 64-bit “long size” register (<a href="https://www.cs.uaf.edu/2017/fall/cs301/lecture/09_11_registers.html#:~:text=rax%20is%20the%2064%2Dbit,processors%20with%20the%2080386%20CPU.">RAX</a>), it will contain a pointer to the key data in memory.</li>
<li>To present the key in a more readable way, we convert it to the standard PEM format.</li>
</ol>
<p>By emulating the parts of the binary that we are interested in, we no longer have to statically defeat the obfuscation in order to retrieve the hidden contents. This approach adds a level of complexity to the creation of config extractors. However, since malware authors are adding ever more obfuscation, there is a need for a generic approach to defeating these techniques.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="c2-server-list" class="absolute -top-32"></span>C2 server list</h2>
<p>An important part of tracking malware families is to get new insights by identifying and discovering which C2 servers they use to operate their network.</p>
<p>In the 64-bit versions of EMOTET, we see that the IP and port information of the C2 servers are also dynamically calculated at runtime. Every C2 server is represented by a function that calculates and returns a value for the IP address and the port number.</p>
<p></p>
<p>These functions don’t have a direct cross reference available for searching. However, a procedure references all the C2 functions and creates the <strong>p_c2_list</strong> array of pointers.</p>
<p></p>
<p>After that, we can emulate every C2-server function individually to retrieve the IP and port combination as seen below.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="strings" class="absolute -top-32"></span>Strings</h2>
<p>The same method is applied to the use of strings in memory. Every string has its own function. In the following example, the function would return a pointer to the string <strong>%s\regsvr32.exe &quot;%s&quot;</strong>.</p>
<p></p>
<p>All of the EMOTET strings share a common function to decode or resolve the string at runtime. In the sample that we are analyzing here, the string resolver function is referenced 29 times.</p>
<p></p>
<p>This allows us to follow the same approach as noted earlier in order to decode all of the EMOTET strings. We pinpoint the string decoding function using YARA, find the cross-references, and emulate the resulting functions.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="configuration-extractor" class="absolute -top-32"></span>Configuration extractor</h2>
<p>Automating the payload extraction from EMOTET is a crucial aspect of threat hunting as it gives visibility of the campaign and the malware deployed by the threat actors, enabling practitioners to discover new unknown samples in a timely manner.</p>
<pre><code>% emotet-config-extractor --help
usage: Emotet Configuration Extractor [-h] (-f FILE | -d DIRECTORY) [-k] [-c] [-s] [-a]

options:
  -h, --help            show this help message and exit
  -f FILE, --file FILE  Emotet sample path
  -d DIRECTORY, --directory DIRECTORY
                        Emotet samples folder
  -k                    Extract Encryption keys
  -c                    Extract C2 information
  -s                    Extract strings
  -a                    Extract strings (ascii)</code></pre>
<p>Our extractor takes either a directory of samples with <strong>-d</strong> option or <strong>-f</strong> for a single sample and then can output parts of the configuration of note, specifically:</p>
<ul>
<li><strong>-k</strong> : extract the encryption keys</li>
<li><strong>-c</strong> : extract the C2 information</li>
<li><strong>-s</strong> : extract the wide-character strings</li>
<li><strong>-a</strong> : extract the ASCII character stings</li>
</ul>
<p>EMOTET uses a different routine for decoding wide and ASCII strings. That is why the extractor provides flags to extract them separately.</p>
<p>The C2 information displays a list of IP addresses found in the sample. It is worth noting that EMOTET downloads submodules to perform specific tasks. These submodules can contain their own list of C2 servers. The extractor is also able to process these submodules.</p>
<p>The submodules that we observed do not contain encryption keys. While processing submodules you can omit the <strong>-k</strong> flag.</p>
<pre><code>[...]
[+] Key type: ECK1
[+] Key length: 32
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE2DWT12OLUMXfzeFp+bE2AJubVDsW
NqJdRC6yODDYRzYuuNL0i2rI2Ex6RUQaBvqPOL7a+wCWnIQszh42gCRQlg==
-----END PUBLIC KEY-----
[...]
[+] Key type: ECS1
[+] Key length: 32
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE9C8agzYaJ1GMJPLKqOyFrlJZUXVI
lAZwAnOq6JrEKHtWCQ+8CHuAIXqmKH6WRbnDw1wmdM/YvqKFH36nqC2VNA==
-----END PUBLIC KEY-----
[...]
[+] Found 64 c2 subs
174.138.33.49:7080
188.165.79.151:443
196.44.98.190:8080
[...]
[+] Starting emulation
[+] String BLOB address: 0x4000000
KeyDataBlob
[...]
[+] String BLOB address: 0x4000000
bcrypt.dll
[...]
[+] String BLOB address: 0x4000000
RNG</code></pre>
<p>To enable the community to further defend themselves against existing and new variants of EMOTET, we are making the payload extractor open source under the Apache 2 License. Access the <a href="https://www.elastic.co/security-labs/emotet-configuration-extractor">payload extractor documentation and binary download</a>.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="the-future-of-emotet" class="absolute -top-32"></span>The future of EMOTET</h2>
<p>The EMOTET developers are implementing new techniques to hide their configurations from security researchers. These techniques will slow down initial analysis, however, EMOTET will eventually have to execute to achieve its purpose, and that means that we can collect information that we can use to uncover more about the campaign and infrastructure. Using code emulators, we can still find and extract the information from the binary without having to deal with any obfuscation techniques. EMOTET is a great example where multiple obfuscation techniques make static analysis harder. But of course, we expect more malware authors to follow the same example. That is why we expect to see more emulation-based configuration extract in the future.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="detection" class="absolute -top-32"></span>Detection</h2>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="yara" class="absolute -top-32"></span>YARA</h3>
<p>Elastic Security has created YARA rules to identify this activity. The YARA rules shown here are not meant to be used to solely detect EMOTET binaries, they are created to support the configuration extractor. The YARA rules for detecting EMOTET can be found in the <a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Emotet.yar">protections-artifacts repository</a>.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="emotet-key-decryption-function" class="absolute -top-32"></span>EMOTET key decryption function</h4>
<pre><code>rule resolve_keys
{
meta:
     author = &quot;Elastic Security&quot;
     description = &quot;EMOTET - find the key decoding algorithm in the PE&quot;
     creation_date = &quot;2022-08-02&quot;
     last_modified = &quot;2022-08-11&quot;
     os = &quot;Windows&quot;
     family = &quot;EMOTET&quot;
     threat_name = &quot;Windows.Trojan.EMOTET&quot;
     reference_sample = &quot;debad0131060d5dd9c4642bd6aed186c4a57b46b0f4c69f1af16b1ff9c0a77b1&quot;
   strings:
       $chunk_1 = {
        45 33 C9
        4C 8B D0
        48 85 C0
        74 ??
        48 8D ?? ??
        4C 8B ??
        48 8B ??
        48 2B ??
        48 83 ?? ??
        48 C1 ?? ??
        48 3B ??
        49 0F 47 ??
        48 85 ??
        74 ??
        48 2B D8
        42 8B 04 03
     }
   condition:
       any of them
}</code></pre>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="emotet-c2-aggregation" class="absolute -top-32"></span>EMOTET C2 aggregation</h4>
<pre><code>rule c2_list
{
     author = &quot;Elastic Security&quot;
     description = &quot;EMOTET - find the C2 collection in the PE&quot;
     creation_date = &quot;2022-08-02&quot;
     last_modified = &quot;2022-08-11&quot;
     os = &quot;Windows&quot;
     family = &quot;EMOTET&quot;
     threat_name = &quot;Windows.Trojan.EMOTET&quot;
     reference_sample = &quot;debad0131060d5dd9c4642bd6aed186c4a57b46b0f4c69f1af16b1ff9c0a77b1&quot;
  strings:
     $chunk_1 = {
        48 8D 05 ?? ?? ?? ??
        48 89 81 ?? ?? ?? ??
        48 8D 05 ?? ?? ?? ??
        48 89 81 ?? ?? ?? ??
        48 8D 05 ?? ?? ?? ??
        48 89 81 ?? ?? ?? ??
        48 8D 05 ?? ?? ?? ??
        48 89 81 ?? ?? ?? ??
        48 8D 05 ?? ?? ?? ??
        48 89 81 ?? ?? ?? ??
        48 8D 05 ?? ?? ?? ??
        48 89 81 ?? ?? ?? ??
        48 8D 05 ?? ?? ?? ??
        48 89 81 ?? ?? ?? ??
     }
  condition:
     any of them
}</code></pre>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="emotet-string-decoder" class="absolute -top-32"></span>EMOTET string decoder</h4>
<pre><code>rule string_decode
{
   meta:
     author = &quot;Elastic Security&quot;
     description = &quot;EMOTET - find the string decoding algorithm in the PE&quot;
     creation_date = &quot;2022-08-02&quot;
     last_modified = &quot;2022-08-11&quot;
     os = &quot;Windows&quot;
     family = &quot;EMOTET&quot;
     threat_name = &quot;Windows.Trojan.EMOTET&quot;
     reference_sample = &quot;debad0131060d5dd9c4642bd6aed186c4a57b46b0f4c69f1af16b1ff9c0a77b1&quot;
  strings:
     $chunk_1 = {
        8B 0B
        49 FF C3
        48 8D 5B ??
        33 CD
        0F B6 C1
        66 41 89 00
        0F B7 C1
        C1 E9 10
        66 C1 E8 08
        4D 8D 40 ??
        66 41 89 40 ??
        0F B6 C1
        66 C1 E9 08
        66 41 89 40 ??
        66 41 89 48 ??
        4D 3B D9
        72 ??
     }
     $chunk_2 = {
        8B 0B
        49 FF C3
        48 8D 5B ??
        33 CD
        0F B6 C1
        66 41 89 00
        0F B7 C1
        C1 E9 ??
        66 C1 E8 ??
        4D 8D 40 ??
        66 41 89 40 ??
        0F B6 C1
        66 C1 E9 ??
        66 41 89 40 ??
        66 41 89 48 ??
        4D 3B D9
        72 ??
     }
  condition:
     any of them
}</code></pre></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/emotet-dynamic-configuration-extraction#key-takeaways"><span>Key&nbsp;takeaways</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/emotet-dynamic-configuration-extraction#preamble"><span>Preamble</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/emotet-dynamic-configuration-extraction#encryption-keys"><span>Encryption&nbsp;keys</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/emotet-dynamic-configuration-extraction#c2-server-list"><span>C2 server&nbsp;list</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/emotet-dynamic-configuration-extraction#strings"><span>Strings</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/emotet-dynamic-configuration-extraction#configuration-extractor"><span>Configuration&nbsp;extractor</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/emotet-dynamic-configuration-extraction#the-future-of-emotet"><span>The future of&nbsp;EMOTET</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/emotet-dynamic-configuration-extraction#detection"><span>Detection</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/emotet-dynamic-configuration-extraction#yara"><span>YARA</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/emotet-dynamic-configuration-extraction#emotet-key-decryption-function"><span>EMOTET key decryption&nbsp;function</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/elastic-security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=EMOTET Dynamic Configuration Extraction&amp;url=https://www.elastic.co/security-labs/emotet-dynamic-configuration-extraction" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/emotet-dynamic-configuration-extraction" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/emotet-dynamic-configuration-extraction&amp;title=EMOTET Dynamic Configuration Extraction" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/emotet-dynamic-configuration-extraction&amp;title=EMOTET Dynamic Configuration Extraction" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2025<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"EMOTET Dynamic Configuration Extraction","slug":"emotet-dynamic-configuration-extraction","date":"2022-12-01","description":"Elastic Security Labs discusses the EMOTET trojan and is releasing a tool to dynamically extract configuration files using code emulators.","image":"lock-code-combination-configuration.jpg","subtitle":"A tool for the dynamic extraction of EMOTET configurations based on emulation.","tags":["emotet"],"body":{"raw":"\n## Key takeaways\n\n- The EMOTET developers have changed the way they encode their configuration in the 64bit version of the malware.\n- Using code emulation we can bypass multiple code obfuscation techniques.\n- The use of code emulators in config extractors will become more prevalent in the future.\n\n\u003e To download the EMOTET configuration extractor, check out our post on the tool:\n\u003e\n\u003e - [EMOTET configuration extractor](https://www.elastic.co/security-labs/emotet-configuration-extractor)\n\n## Preamble\n\nThe [EMOTET](https://malpedia.caad.fkie.fraunhofer.de/details/win.emotet) family broke onto the malware scene as a [modular banking trojan in 2014](https://web.archive.org/web/20140701001622/https://blog.trendmicro.com/trendlabs-security-intelligence/new-banking-malware-uses-network-sniffing-for-data-theft/), focused on harvesting and exfiltrating bank account information by inspecting traffic. EMOTET has been adapted as an early-stage implant used to load other malware families, such as [QAKBOT](https://www.elastic.co/security-labs/exploring-the-qbot-attack-pattern), [TRICKBOT](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Trickbot.yar), and [RYUK](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Ransomware_Ryuk.yar). While multiple EMOTET campaigns have been dismantled by international law enforcement entities, it has continued to operate as one of the most prolific cybercrime operations.\n\nFor the last several months, Elastic Security has observed the EMOTET developers [transition](https://twitter.com/Cryptolaemus1/status/1516261512372965383?ref_src=twsrc%5Etfw) to a 64-bit version of their malware. While this change does not seem to impact the core functionality of the samples we have witnessed, we did notice a change in how the configuration and strings are obfuscated. In earlier versions of EMOTET, the configuration was stored in an encrypted form in the **.data** section of the binary. In the newer versions the configuration is calculated at runtime. The information we need to extract the configuration from the binary is thus hidden within the actual code.\n\nIn the next sections, we’ll discuss the following as it relates to 64-bit EMOTET samples:\n\n- EMOTET encryption mechanisms\n- Reviewing the EMOTET C2 list\n- Interesting EMOTET strings\n- The EMOTET configuration extractor utility\n\n## Encryption keys\n\nEMOTET uses embedded [Elliptic Curve Cryptography](https://blog.cloudflare.com/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/) (ECC) public keys to encrypt their network communication. While in previous versions, the keys would be stored in an XOR-encrypted blob, now the content is calculated at runtime.\n\n![Encoded Encryption Key blob in 64-bit version](/assets/images/emotet-dynamic-configuration-extraction/image14.jpg)\n\nIn comparison the previous versions of EMOTET would store an encrypted version of the key data in the . **text** section of the binary.\n\n![Embedded key data in previous version of the malware](/assets/images/emotet-dynamic-configuration-extraction/image10.jpg)\n\nIn order to make it harder for security researchers to find the given code the malware uses [Mixed Boolean-Arithmetic](https://www.usenix.org/conference/usenixsecurity21/presentation/liu-binbin) (MBA) as one of its obfuscation techniques. It transforms constants and simple expressions into expressions that contain a mix of Boolean and arithmetic operations.\n\n![Example of Mixed Boolean-Arithmetic](/assets/images/emotet-dynamic-configuration-extraction/image6.jpg)\n\nIn this example, an array of constants is instantiated, but looking at the assembly we see that every constant is calculated at runtime. This method makes it challenging to develop a signature to target this function.\n\nWe noticed that both the [Elliptic Curve Diffie-Hellman](https://cryptobook.nakov.com/asymmetric-key-ciphers/ecdh-key-exchange) (ECDH) and [Elliptic Curve Digital Signature Algorithm](https://cryptobook.nakov.com/digital-signatures/ecdsa-sign-verify-messages) (ECDSA) keys use the same function to decode the contents.\n\nThe ECDH key (which you can recognize by its magic ECK1 bytes) is used for encryption purposes while the ECDSA key (ECC1) is used for verifying the C2 server's responses.\n\n![ECK1 magic bytes at the start of the key data](/assets/images/emotet-dynamic-configuration-extraction/image4.jpg)\n\n![Decoding algorithm for the key material](/assets/images/emotet-dynamic-configuration-extraction/image11.jpg)\n\nBy leveraging a YARA signature to find the location of this decode function within the EMOTET binary we can observe the following process:\n\n1. Find the decoding algorithm within the binary.\n2. Locate any Cross References ([Xrefs](https://hex-rays.com/blog/igor-tip-of-the-week-16-cross-references/)) to the decoding function.\n3. Emulate the function that calls the decoding function.\n4. Read the resulting data from memory.\n\nAs we mentioned, we first find the function in the binary by using YARA. The signature is provided at the [end of this article](https://www.elastic.co/security-labs/emotet-dynamic-configuration-extraction#yara). It is worth pointing out that these yara signatures are used to identify locations in the binary but are, in their current form, not usable to identify EMOTET samples.\n\nIn order to automatically retrieve the data from multiple samples, we created a configuration extractor. In the snippets below, we will demonstrate, in a high level fashion, how we collect the configuration information from the malware samples.\n\n![Python code to find the start of a function](/assets/images/emotet-dynamic-configuration-extraction/image7.jpg)\n\nIn the above code snippet:\n\n1. First load the YARA signature.\n2. Try to find a match, and if a signature is found in the file.\n3. Calculate the function offset based on the offset in the file.\n\nIn order to locate the Xrefs to this function, we use the excellent [SMDA decompiler](https://github.com/danielplohmann/smda). After locating the Xrefs, we can start the emulation process using the CPU emulator, [Unicorn](https://www.unicorn-engine.org/).\n\n![Python code used to emulate decoding functions](/assets/images/emotet-dynamic-configuration-extraction/image8.jpg)\n\n1. Initialize the Unicorn emulator.\n2. Load the executable code from the PE file into memory.\n3. Disassemble the function to find the return and the end of the execution.\n4. The binary will try to use the windows [HeapAlloc API](https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapalloc) to allocate space for the decoded data. Since we don't want to emulate any windows API's, as this would add unnecessary complexity, we hook to code so that we can allocate space ourselves.\n5. After the emulation has run the 64-bit “long size” register ([RAX](https://www.cs.uaf.edu/2017/fall/cs301/lecture/09_11_registers.html#:~:text=rax%20is%20the%2064%2Dbit,processors%20with%20the%2080386%20CPU.)), it will contain a pointer to the key data in memory.\n6. To present the key in a more readable way, we convert it to the standard PEM format.\n\nBy emulating the parts of the binary that we are interested in, we no longer have to statically defeat the obfuscation in order to retrieve the hidden contents. This approach adds a level of complexity to the creation of config extractors. However, since malware authors are adding ever more obfuscation, there is a need for a generic approach to defeating these techniques.\n\n![Example of the extractor used to find key material](/assets/images/emotet-dynamic-configuration-extraction/image3.jpg)\n\n## C2 server list\n\nAn important part of tracking malware families is to get new insights by identifying and discovering which C2 servers they use to operate their network.\n\nIn the 64-bit versions of EMOTET, we see that the IP and port information of the C2 servers are also dynamically calculated at runtime. Every C2 server is represented by a function that calculates and returns a value for the IP address and the port number.\n\n![Examples of encoded IP/port combination](/assets/images/emotet-dynamic-configuration-extraction/image13.jpg)\n\nThese functions don’t have a direct cross reference available for searching. However, a procedure references all the C2 functions and creates the **p_c2_list** array of pointers.\n\n![C2 server list](/assets/images/emotet-dynamic-configuration-extraction/image1.jpg)\n\nAfter that, we can emulate every C2-server function individually to retrieve the IP and port combination as seen below.\n\n![Example of the extractor used to find C2 server list](/assets/images/emotet-dynamic-configuration-extraction/image9.jpg)\n\n## Strings\n\nThe same method is applied to the use of strings in memory. Every string has its own function. In the following example, the function would return a pointer to the string **%s\\regsvr32.exe \"%s\"**.\n\n![Encoded string](/assets/images/emotet-dynamic-configuration-extraction/image15.jpg)\n\nAll of the EMOTET strings share a common function to decode or resolve the string at runtime. In the sample that we are analyzing here, the string resolver function is referenced 29 times.\n\n![String decoding algorithm](/assets/images/emotet-dynamic-configuration-extraction/image2.jpg)\n\nThis allows us to follow the same approach as noted earlier in order to decode all of the EMOTET strings. We pinpoint the string decoding function using YARA, find the cross-references, and emulate the resulting functions.\n\n![Example of the extractor used to find strings](/assets/images/emotet-dynamic-configuration-extraction/image12.jpg)\n\n## Configuration extractor\n\nAutomating the payload extraction from EMOTET is a crucial aspect of threat hunting as it gives visibility of the campaign and the malware deployed by the threat actors, enabling practitioners to discover new unknown samples in a timely manner.\n\n```\n% emotet-config-extractor --help\nusage: Emotet Configuration Extractor [-h] (-f FILE | -d DIRECTORY) [-k] [-c] [-s] [-a]\n\noptions:\n  -h, --help            show this help message and exit\n  -f FILE, --file FILE  Emotet sample path\n  -d DIRECTORY, --directory DIRECTORY\n                        Emotet samples folder\n  -k                    Extract Encryption keys\n  -c                    Extract C2 information\n  -s                    Extract strings\n  -a                    Extract strings (ascii)\n```\n\nOur extractor takes either a directory of samples with **-d** option or **-f** for a single sample and then can output parts of the configuration of note, specifically:\n\n- **-k** : extract the encryption keys\n- **-c** : extract the C2 information\n- **-s** : extract the wide-character strings\n- **-a** : extract the ASCII character stings\n\nEMOTET uses a different routine for decoding wide and ASCII strings. That is why the extractor provides flags to extract them separately.\n\nThe C2 information displays a list of IP addresses found in the sample. It is worth noting that EMOTET downloads submodules to perform specific tasks. These submodules can contain their own list of C2 servers. The extractor is also able to process these submodules.\n\nThe submodules that we observed do not contain encryption keys. While processing submodules you can omit the **-k** flag.\n\n```\n[...]\n[+] Key type: ECK1\n[+] Key length: 32\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE2DWT12OLUMXfzeFp+bE2AJubVDsW\nNqJdRC6yODDYRzYuuNL0i2rI2Ex6RUQaBvqPOL7a+wCWnIQszh42gCRQlg==\n-----END PUBLIC KEY-----\n[...]\n[+] Key type: ECS1\n[+] Key length: 32\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE9C8agzYaJ1GMJPLKqOyFrlJZUXVI\nlAZwAnOq6JrEKHtWCQ+8CHuAIXqmKH6WRbnDw1wmdM/YvqKFH36nqC2VNA==\n-----END PUBLIC KEY-----\n[...]\n[+] Found 64 c2 subs\n174.138.33.49:7080\n188.165.79.151:443\n196.44.98.190:8080\n[...]\n[+] Starting emulation\n[+] String BLOB address: 0x4000000\nKeyDataBlob\n[...]\n[+] String BLOB address: 0x4000000\nbcrypt.dll\n[...]\n[+] String BLOB address: 0x4000000\nRNG\n```\n\nTo enable the community to further defend themselves against existing and new variants of EMOTET, we are making the payload extractor open source under the Apache 2 License. Access the [payload extractor documentation and binary download](https://www.elastic.co/security-labs/emotet-configuration-extractor).\n\n## The future of EMOTET\n\nThe EMOTET developers are implementing new techniques to hide their configurations from security researchers. These techniques will slow down initial analysis, however, EMOTET will eventually have to execute to achieve its purpose, and that means that we can collect information that we can use to uncover more about the campaign and infrastructure. Using code emulators, we can still find and extract the information from the binary without having to deal with any obfuscation techniques. EMOTET is a great example where multiple obfuscation techniques make static analysis harder. But of course, we expect more malware authors to follow the same example. That is why we expect to see more emulation-based configuration extract in the future.\n\n![EMOTET running and gathering system information](/assets/images/emotet-dynamic-configuration-extraction/image5.png)\n\n## Detection\n\n### YARA\n\nElastic Security has created YARA rules to identify this activity. The YARA rules shown here are not meant to be used to solely detect EMOTET binaries, they are created to support the configuration extractor. The YARA rules for detecting EMOTET can be found in the [protections-artifacts repository](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Emotet.yar).\n\n#### EMOTET key decryption function\n\n```\nrule resolve_keys\n{\nmeta:\n     author = \"Elastic Security\"\n     description = \"EMOTET - find the key decoding algorithm in the PE\"\n     creation_date = \"2022-08-02\"\n     last_modified = \"2022-08-11\"\n     os = \"Windows\"\n     family = \"EMOTET\"\n     threat_name = \"Windows.Trojan.EMOTET\"\n     reference_sample = \"debad0131060d5dd9c4642bd6aed186c4a57b46b0f4c69f1af16b1ff9c0a77b1\"\n   strings:\n       $chunk_1 = {\n        45 33 C9\n        4C 8B D0\n        48 85 C0\n        74 ??\n        48 8D ?? ??\n        4C 8B ??\n        48 8B ??\n        48 2B ??\n        48 83 ?? ??\n        48 C1 ?? ??\n        48 3B ??\n        49 0F 47 ??\n        48 85 ??\n        74 ??\n        48 2B D8\n        42 8B 04 03\n     }\n   condition:\n       any of them\n}\n```\n\n#### EMOTET C2 aggregation\n\n```\nrule c2_list\n{\n     author = \"Elastic Security\"\n     description = \"EMOTET - find the C2 collection in the PE\"\n     creation_date = \"2022-08-02\"\n     last_modified = \"2022-08-11\"\n     os = \"Windows\"\n     family = \"EMOTET\"\n     threat_name = \"Windows.Trojan.EMOTET\"\n     reference_sample = \"debad0131060d5dd9c4642bd6aed186c4a57b46b0f4c69f1af16b1ff9c0a77b1\"\n  strings:\n     $chunk_1 = {\n        48 8D 05 ?? ?? ?? ??\n        48 89 81 ?? ?? ?? ??\n        48 8D 05 ?? ?? ?? ??\n        48 89 81 ?? ?? ?? ??\n        48 8D 05 ?? ?? ?? ??\n        48 89 81 ?? ?? ?? ??\n        48 8D 05 ?? ?? ?? ??\n        48 89 81 ?? ?? ?? ??\n        48 8D 05 ?? ?? ?? ??\n        48 89 81 ?? ?? ?? ??\n        48 8D 05 ?? ?? ?? ??\n        48 89 81 ?? ?? ?? ??\n        48 8D 05 ?? ?? ?? ??\n        48 89 81 ?? ?? ?? ??\n     }\n  condition:\n     any of them\n}\n```\n\n#### EMOTET string decoder\n\n```\nrule string_decode\n{\n   meta:\n     author = \"Elastic Security\"\n     description = \"EMOTET - find the string decoding algorithm in the PE\"\n     creation_date = \"2022-08-02\"\n     last_modified = \"2022-08-11\"\n     os = \"Windows\"\n     family = \"EMOTET\"\n     threat_name = \"Windows.Trojan.EMOTET\"\n     reference_sample = \"debad0131060d5dd9c4642bd6aed186c4a57b46b0f4c69f1af16b1ff9c0a77b1\"\n  strings:\n     $chunk_1 = {\n        8B 0B\n        49 FF C3\n        48 8D 5B ??\n        33 CD\n        0F B6 C1\n        66 41 89 00\n        0F B7 C1\n        C1 E9 10\n        66 C1 E8 08\n        4D 8D 40 ??\n        66 41 89 40 ??\n        0F B6 C1\n        66 C1 E9 08\n        66 41 89 40 ??\n        66 41 89 48 ??\n        4D 3B D9\n        72 ??\n     }\n     $chunk_2 = {\n        8B 0B\n        49 FF C3\n        48 8D 5B ??\n        33 CD\n        0F B6 C1\n        66 41 89 00\n        0F B7 C1\n        C1 E9 ??\n        66 C1 E8 ??\n        4D 8D 40 ??\n        66 41 89 40 ??\n        0F B6 C1\n        66 C1 E9 ??\n        66 41 89 40 ??\n        66 41 89 48 ??\n        4D 3B D9\n        72 ??\n     }\n  condition:\n     any of them\n}\n```\n","code":"var Component=(()=\u003e{var d=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var p=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=\u003e{for(var i in e)r(t,i,{get:e[i],enumerable:!0})},s=(t,e,i,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of f(e))!g.call(t,o)\u0026\u0026o!==i\u0026\u0026r(t,o,{get:()=\u003ee[o],enumerable:!(a=m(e,o))||a.enumerable});return t};var w=(t,e,i)=\u003e(i=t!=null?d(u(t)):{},s(e||!t||!t.__esModule?r(i,\"default\",{value:t,enumerable:!0}):i,t)),E=t=\u003es(r({},\"__esModule\",{value:!0}),t);var l=p((k,c)=\u003e{c.exports=_jsx_runtime});var v={};y(v,{default:()=\u003ex,frontmatter:()=\u003eb});var n=w(l()),b={title:\"EMOTET Dynamic Configuration Extraction\",slug:\"emotet-dynamic-configuration-extraction\",date:\"2022-12-01\",subtitle:\"A tool for the dynamic extraction of EMOTET configurations based on emulation.\",description:\"Elastic Security Labs discusses the EMOTET trojan and is releasing a tool to dynamically extract configuration files using code emulators.\",author:[{slug:\"remco-sprooten\"}],image:\"lock-code-combination-configuration.jpg\",category:[{slug:\"security-research\"}],tags:[\"emotet\"]};function h(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",blockquote:\"blockquote\",p:\"p\",a:\"a\",strong:\"strong\",img:\"img\",ol:\"ol\",pre:\"pre\",code:\"code\",h3:\"h3\",h4:\"h4\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{id:\"key-takeaways\",children:\"Key takeaways\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The EMOTET developers have changed the way they encode their configuration in the 64bit version of the malware.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Using code emulation we can bypass multiple code obfuscation techniques.\"}),`\n`,(0,n.jsx)(e.li,{children:\"The use of code emulators in config extractors will become more prevalent in the future.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"To download the EMOTET configuration extractor, check out our post on the tool:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/emotet-configuration-extractor\",rel:\"nofollow\",children:\"EMOTET configuration extractor\"})}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"preamble\",children:\"Preamble\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.a,{href:\"https://malpedia.caad.fkie.fraunhofer.de/details/win.emotet\",rel:\"nofollow\",children:\"EMOTET\"}),\" family broke onto the malware scene as a \",(0,n.jsx)(e.a,{href:\"https://web.archive.org/web/20140701001622/https://blog.trendmicro.com/trendlabs-security-intelligence/new-banking-malware-uses-network-sniffing-for-data-theft/\",rel:\"nofollow\",children:\"modular banking trojan in 2014\"}),\", focused on harvesting and exfiltrating bank account information by inspecting traffic. EMOTET has been adapted as an early-stage implant used to load other malware families, such as \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/exploring-the-qbot-attack-pattern\",rel:\"nofollow\",children:\"QAKBOT\"}),\", \",(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Trickbot.yar\",rel:\"nofollow\",children:\"TRICKBOT\"}),\", and \",(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Ransomware_Ryuk.yar\",rel:\"nofollow\",children:\"RYUK\"}),\". While multiple EMOTET campaigns have been dismantled by international law enforcement entities, it has continued to operate as one of the most prolific cybercrime operations.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For the last several months, Elastic Security has observed the EMOTET developers \",(0,n.jsx)(e.a,{href:\"https://twitter.com/Cryptolaemus1/status/1516261512372965383?ref_src=twsrc%5Etfw\",rel:\"nofollow\",children:\"transition\"}),\" to a 64-bit version of their malware. While this change does not seem to impact the core functionality of the samples we have witnessed, we did notice a change in how the configuration and strings are obfuscated. In earlier versions of EMOTET, the configuration was stored in an encrypted form in the \",(0,n.jsx)(e.strong,{children:\".data\"}),\" section of the binary. In the newer versions the configuration is calculated at runtime. The information we need to extract the configuration from the binary is thus hidden within the actual code.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"In the next sections, we\\u2019ll discuss the following as it relates to 64-bit EMOTET samples:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"EMOTET encryption mechanisms\"}),`\n`,(0,n.jsx)(e.li,{children:\"Reviewing the EMOTET C2 list\"}),`\n`,(0,n.jsx)(e.li,{children:\"Interesting EMOTET strings\"}),`\n`,(0,n.jsx)(e.li,{children:\"The EMOTET configuration extractor utility\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"encryption-keys\",children:\"Encryption keys\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"EMOTET uses embedded \",(0,n.jsx)(e.a,{href:\"https://blog.cloudflare.com/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/\",rel:\"nofollow\",children:\"Elliptic Curve Cryptography\"}),\" (ECC) public keys to encrypt their network communication. While in previous versions, the keys would be stored in an XOR-encrypted blob, now the content is calculated at runtime.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/emotet-dynamic-configuration-extraction/image14.jpg\",alt:\"Encoded Encryption Key blob in 64-bit version\",width:\"655\",height:\"398\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In comparison the previous versions of EMOTET would store an encrypted version of the key data in the . \",(0,n.jsx)(e.strong,{children:\"text\"}),\" section of the binary.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/emotet-dynamic-configuration-extraction/image10.jpg\",alt:\"Embedded key data in previous version of the malware\",width:\"1440\",height:\"277\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In order to make it harder for security researchers to find the given code the malware uses \",(0,n.jsx)(e.a,{href:\"https://www.usenix.org/conference/usenixsecurity21/presentation/liu-binbin\",rel:\"nofollow\",children:\"Mixed Boolean-Arithmetic\"}),\" (MBA) as one of its obfuscation techniques. It transforms constants and simple expressions into expressions that contain a mix of Boolean and arithmetic operations.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/emotet-dynamic-configuration-extraction/image6.jpg\",alt:\"Example of Mixed Boolean-Arithmetic\",width:\"748\",height:\"376\"})}),`\n`,(0,n.jsx)(e.p,{children:\"In this example, an array of constants is instantiated, but looking at the assembly we see that every constant is calculated at runtime. This method makes it challenging to develop a signature to target this function.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We noticed that both the \",(0,n.jsx)(e.a,{href:\"https://cryptobook.nakov.com/asymmetric-key-ciphers/ecdh-key-exchange\",rel:\"nofollow\",children:\"Elliptic Curve Diffie-Hellman\"}),\" (ECDH) and \",(0,n.jsx)(e.a,{href:\"https://cryptobook.nakov.com/digital-signatures/ecdsa-sign-verify-messages\",rel:\"nofollow\",children:\"Elliptic Curve Digital Signature Algorithm\"}),\" (ECDSA) keys use the same function to decode the contents.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The ECDH key (which you can recognize by its magic ECK1 bytes) is used for encryption purposes while the ECDSA key (ECC1) is used for verifying the C2 server's responses.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/emotet-dynamic-configuration-extraction/image4.jpg\",alt:\"ECK1 magic bytes at the start of the key data\",width:\"786\",height:\"152\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/emotet-dynamic-configuration-extraction/image11.jpg\",alt:\"Decoding algorithm for the key material\",width:\"658\",height:\"444\"})}),`\n`,(0,n.jsx)(e.p,{children:\"By leveraging a YARA signature to find the location of this decode function within the EMOTET binary we can observe the following process:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Find the decoding algorithm within the binary.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Locate any Cross References (\",(0,n.jsx)(e.a,{href:\"https://hex-rays.com/blog/igor-tip-of-the-week-16-cross-references/\",rel:\"nofollow\",children:\"Xrefs\"}),\") to the decoding function.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Emulate the function that calls the decoding function.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Read the resulting data from memory.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"As we mentioned, we first find the function in the binary by using YARA. The signature is provided at the \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/emotet-dynamic-configuration-extraction#yara\",rel:\"nofollow\",children:\"end of this article\"}),\". It is worth pointing out that these yara signatures are used to identify locations in the binary but are, in their current form, not usable to identify EMOTET samples.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"In order to automatically retrieve the data from multiple samples, we created a configuration extractor. In the snippets below, we will demonstrate, in a high level fashion, how we collect the configuration information from the malware samples.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/emotet-dynamic-configuration-extraction/image7.jpg\",alt:\"Python code to find the start of a function\",width:\"766\",height:\"284\"})}),`\n`,(0,n.jsx)(e.p,{children:\"In the above code snippet:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"First load the YARA signature.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Try to find a match, and if a signature is found in the file.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Calculate the function offset based on the offset in the file.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In order to locate the Xrefs to this function, we use the excellent \",(0,n.jsx)(e.a,{href:\"https://github.com/danielplohmann/smda\",rel:\"nofollow\",children:\"SMDA decompiler\"}),\". After locating the Xrefs, we can start the emulation process using the CPU emulator, \",(0,n.jsx)(e.a,{href:\"https://www.unicorn-engine.org/\",rel:\"nofollow\",children:\"Unicorn\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/emotet-dynamic-configuration-extraction/image8.jpg\",alt:\"Python code used to emulate decoding functions\",width:\"885\",height:\"956\"})}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Initialize the Unicorn emulator.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Load the executable code from the PE file into memory.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Disassemble the function to find the return and the end of the execution.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"The binary will try to use the windows \",(0,n.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapalloc\",rel:\"nofollow\",children:\"HeapAlloc API\"}),\" to allocate space for the decoded data. Since we don't want to emulate any windows API's, as this would add unnecessary complexity, we hook to code so that we can allocate space ourselves.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"After the emulation has run the 64-bit \\u201Clong size\\u201D register (\",(0,n.jsx)(e.a,{href:\"https://www.cs.uaf.edu/2017/fall/cs301/lecture/09_11_registers.html#:~:text=rax%20is%20the%2064%2Dbit,processors%20with%20the%2080386%20CPU.\",rel:\"nofollow\",children:\"RAX\"}),\"), it will contain a pointer to the key data in memory.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"To present the key in a more readable way, we convert it to the standard PEM format.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"By emulating the parts of the binary that we are interested in, we no longer have to statically defeat the obfuscation in order to retrieve the hidden contents. This approach adds a level of complexity to the creation of config extractors. However, since malware authors are adding ever more obfuscation, there is a need for a generic approach to defeating these techniques.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/emotet-dynamic-configuration-extraction/image3.jpg\",alt:\"Example of the extractor used to find key material\",width:\"658\",height:\"506\"})}),`\n`,(0,n.jsx)(e.h2,{id:\"c2-server-list\",children:\"C2 server list\"}),`\n`,(0,n.jsx)(e.p,{children:\"An important part of tracking malware families is to get new insights by identifying and discovering which C2 servers they use to operate their network.\"}),`\n`,(0,n.jsx)(e.p,{children:\"In the 64-bit versions of EMOTET, we see that the IP and port information of the C2 servers are also dynamically calculated at runtime. Every C2 server is represented by a function that calculates and returns a value for the IP address and the port number.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/emotet-dynamic-configuration-extraction/image13.jpg\",alt:\"Examples of encoded IP/port combination\",width:\"658\",height:\"106\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"These functions don\\u2019t have a direct cross reference available for searching. However, a procedure references all the C2 functions and creates the \",(0,n.jsx)(e.strong,{children:\"p_c2_list\"}),\" array of pointers.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/emotet-dynamic-configuration-extraction/image1.jpg\",alt:\"C2 server list\",width:\"658\",height:\"620\"})}),`\n`,(0,n.jsx)(e.p,{children:\"After that, we can emulate every C2-server function individually to retrieve the IP and port combination as seen below.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/emotet-dynamic-configuration-extraction/image9.jpg\",alt:\"Example of the extractor used to find C2 server list\",width:\"843\",height:\"422\"})}),`\n`,(0,n.jsx)(e.h2,{id:\"strings\",children:\"Strings\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The same method is applied to the use of strings in memory. Every string has its own function. In the following example, the function would return a pointer to the string \",(0,n.jsx)(e.strong,{children:'%s\\\\regsvr32.exe \"%s\"'}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/emotet-dynamic-configuration-extraction/image15.jpg\",alt:\"Encoded string\",width:\"654\",height:\"192\"})}),`\n`,(0,n.jsx)(e.p,{children:\"All of the EMOTET strings share a common function to decode or resolve the string at runtime. In the sample that we are analyzing here, the string resolver function is referenced 29 times.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/emotet-dynamic-configuration-extraction/image2.jpg\",alt:\"String decoding algorithm\",width:\"904\",height:\"693\"})}),`\n`,(0,n.jsx)(e.p,{children:\"This allows us to follow the same approach as noted earlier in order to decode all of the EMOTET strings. We pinpoint the string decoding function using YARA, find the cross-references, and emulate the resulting functions.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/emotet-dynamic-configuration-extraction/image12.jpg\",alt:\"Example of the extractor used to find strings\",width:\"904\",height:\"638\"})}),`\n`,(0,n.jsx)(e.h2,{id:\"configuration-extractor\",children:\"Configuration extractor\"}),`\n`,(0,n.jsx)(e.p,{children:\"Automating the payload extraction from EMOTET is a crucial aspect of threat hunting as it gives visibility of the campaign and the malware deployed by the threat actors, enabling practitioners to discover new unknown samples in a timely manner.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`% emotet-config-extractor --help\nusage: Emotet Configuration Extractor [-h] (-f FILE | -d DIRECTORY) [-k] [-c] [-s] [-a]\n\noptions:\n  -h, --help            show this help message and exit\n  -f FILE, --file FILE  Emotet sample path\n  -d DIRECTORY, --directory DIRECTORY\n                        Emotet samples folder\n  -k                    Extract Encryption keys\n  -c                    Extract C2 information\n  -s                    Extract strings\n  -a                    Extract strings (ascii)\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Our extractor takes either a directory of samples with \",(0,n.jsx)(e.strong,{children:\"-d\"}),\" option or \",(0,n.jsx)(e.strong,{children:\"-f\"}),\" for a single sample and then can output parts of the configuration of note, specifically:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"-k\"}),\" : extract the encryption keys\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"-c\"}),\" : extract the C2 information\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"-s\"}),\" : extract the wide-character strings\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"-a\"}),\" : extract the ASCII character stings\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"EMOTET uses a different routine for decoding wide and ASCII strings. That is why the extractor provides flags to extract them separately.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The C2 information displays a list of IP addresses found in the sample. It is worth noting that EMOTET downloads submodules to perform specific tasks. These submodules can contain their own list of C2 servers. The extractor is also able to process these submodules.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The submodules that we observed do not contain encryption keys. While processing submodules you can omit the \",(0,n.jsx)(e.strong,{children:\"-k\"}),\" flag.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`[...]\n[+] Key type: ECK1\n[+] Key length: 32\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE2DWT12OLUMXfzeFp+bE2AJubVDsW\nNqJdRC6yODDYRzYuuNL0i2rI2Ex6RUQaBvqPOL7a+wCWnIQszh42gCRQlg==\n-----END PUBLIC KEY-----\n[...]\n[+] Key type: ECS1\n[+] Key length: 32\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE9C8agzYaJ1GMJPLKqOyFrlJZUXVI\nlAZwAnOq6JrEKHtWCQ+8CHuAIXqmKH6WRbnDw1wmdM/YvqKFH36nqC2VNA==\n-----END PUBLIC KEY-----\n[...]\n[+] Found 64 c2 subs\n174.138.33.49:7080\n188.165.79.151:443\n196.44.98.190:8080\n[...]\n[+] Starting emulation\n[+] String BLOB address: 0x4000000\nKeyDataBlob\n[...]\n[+] String BLOB address: 0x4000000\nbcrypt.dll\n[...]\n[+] String BLOB address: 0x4000000\nRNG\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"To enable the community to further defend themselves against existing and new variants of EMOTET, we are making the payload extractor open source under the Apache 2 License. Access the \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/emotet-configuration-extractor\",rel:\"nofollow\",children:\"payload extractor documentation and binary download\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"the-future-of-emotet\",children:\"The future of EMOTET\"}),`\n`,(0,n.jsx)(e.p,{children:\"The EMOTET developers are implementing new techniques to hide their configurations from security researchers. These techniques will slow down initial analysis, however, EMOTET will eventually have to execute to achieve its purpose, and that means that we can collect information that we can use to uncover more about the campaign and infrastructure. Using code emulators, we can still find and extract the information from the binary without having to deal with any obfuscation techniques. EMOTET is a great example where multiple obfuscation techniques make static analysis harder. But of course, we expect more malware authors to follow the same example. That is why we expect to see more emulation-based configuration extract in the future.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/emotet-dynamic-configuration-extraction/image5.png\",alt:\"EMOTET running and gathering system information\",width:\"1440\",height:\"774\"})}),`\n`,(0,n.jsx)(e.h2,{id:\"detection\",children:\"Detection\"}),`\n`,(0,n.jsx)(e.h3,{id:\"yara\",children:\"YARA\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Elastic Security has created YARA rules to identify this activity. The YARA rules shown here are not meant to be used to solely detect EMOTET binaries, they are created to support the configuration extractor. The YARA rules for detecting EMOTET can be found in the \",(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Emotet.yar\",rel:\"nofollow\",children:\"protections-artifacts repository\"}),\".\"]}),`\n`,(0,n.jsx)(e.h4,{id:\"emotet-key-decryption-function\",children:\"EMOTET key decryption function\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`rule resolve_keys\n{\nmeta:\n     author = \"Elastic Security\"\n     description = \"EMOTET - find the key decoding algorithm in the PE\"\n     creation_date = \"2022-08-02\"\n     last_modified = \"2022-08-11\"\n     os = \"Windows\"\n     family = \"EMOTET\"\n     threat_name = \"Windows.Trojan.EMOTET\"\n     reference_sample = \"debad0131060d5dd9c4642bd6aed186c4a57b46b0f4c69f1af16b1ff9c0a77b1\"\n   strings:\n       $chunk_1 = {\n        45 33 C9\n        4C 8B D0\n        48 85 C0\n        74 ??\n        48 8D ?? ??\n        4C 8B ??\n        48 8B ??\n        48 2B ??\n        48 83 ?? ??\n        48 C1 ?? ??\n        48 3B ??\n        49 0F 47 ??\n        48 85 ??\n        74 ??\n        48 2B D8\n        42 8B 04 03\n     }\n   condition:\n       any of them\n}\n`})}),`\n`,(0,n.jsx)(e.h4,{id:\"emotet-c2-aggregation\",children:\"EMOTET C2 aggregation\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`rule c2_list\n{\n     author = \"Elastic Security\"\n     description = \"EMOTET - find the C2 collection in the PE\"\n     creation_date = \"2022-08-02\"\n     last_modified = \"2022-08-11\"\n     os = \"Windows\"\n     family = \"EMOTET\"\n     threat_name = \"Windows.Trojan.EMOTET\"\n     reference_sample = \"debad0131060d5dd9c4642bd6aed186c4a57b46b0f4c69f1af16b1ff9c0a77b1\"\n  strings:\n     $chunk_1 = {\n        48 8D 05 ?? ?? ?? ??\n        48 89 81 ?? ?? ?? ??\n        48 8D 05 ?? ?? ?? ??\n        48 89 81 ?? ?? ?? ??\n        48 8D 05 ?? ?? ?? ??\n        48 89 81 ?? ?? ?? ??\n        48 8D 05 ?? ?? ?? ??\n        48 89 81 ?? ?? ?? ??\n        48 8D 05 ?? ?? ?? ??\n        48 89 81 ?? ?? ?? ??\n        48 8D 05 ?? ?? ?? ??\n        48 89 81 ?? ?? ?? ??\n        48 8D 05 ?? ?? ?? ??\n        48 89 81 ?? ?? ?? ??\n     }\n  condition:\n     any of them\n}\n`})}),`\n`,(0,n.jsx)(e.h4,{id:\"emotet-string-decoder\",children:\"EMOTET string decoder\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`rule string_decode\n{\n   meta:\n     author = \"Elastic Security\"\n     description = \"EMOTET - find the string decoding algorithm in the PE\"\n     creation_date = \"2022-08-02\"\n     last_modified = \"2022-08-11\"\n     os = \"Windows\"\n     family = \"EMOTET\"\n     threat_name = \"Windows.Trojan.EMOTET\"\n     reference_sample = \"debad0131060d5dd9c4642bd6aed186c4a57b46b0f4c69f1af16b1ff9c0a77b1\"\n  strings:\n     $chunk_1 = {\n        8B 0B\n        49 FF C3\n        48 8D 5B ??\n        33 CD\n        0F B6 C1\n        66 41 89 00\n        0F B7 C1\n        C1 E9 10\n        66 C1 E8 08\n        4D 8D 40 ??\n        66 41 89 40 ??\n        0F B6 C1\n        66 C1 E9 08\n        66 41 89 40 ??\n        66 41 89 48 ??\n        4D 3B D9\n        72 ??\n     }\n     $chunk_2 = {\n        8B 0B\n        49 FF C3\n        48 8D 5B ??\n        33 CD\n        0F B6 C1\n        66 41 89 00\n        0F B7 C1\n        C1 E9 ??\n        66 C1 E8 ??\n        4D 8D 40 ??\n        66 41 89 40 ??\n        0F B6 C1\n        66 C1 E9 ??\n        66 41 89 40 ??\n        66 41 89 48 ??\n        4D 3B D9\n        72 ??\n     }\n  condition:\n     any of them\n}\n`})})]})}function T(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var x=T;return E(v);})();\n;return Component;"},"_id":"articles/emotet-dynamic-configuration-extraction.mdx","_raw":{"sourceFilePath":"articles/emotet-dynamic-configuration-extraction.mdx","sourceFileName":"emotet-dynamic-configuration-extraction.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/emotet-dynamic-configuration-extraction"},"type":"Article","imageUrl":"/assets/images/emotet-dynamic-configuration-extraction/lock-code-combination-configuration.jpg","readingTime":"16 min read","series":"","url":"/emotet-dynamic-configuration-extraction","headings":[{"level":2,"title":"Key takeaways","href":"#key-takeaways"},{"level":2,"title":"Preamble","href":"#preamble"},{"level":2,"title":"Encryption keys","href":"#encryption-keys"},{"level":2,"title":"C2 server list","href":"#c2-server-list"},{"level":2,"title":"Strings","href":"#strings"},{"level":2,"title":"Configuration extractor","href":"#configuration-extractor"},{"level":2,"title":"The future of EMOTET","href":"#the-future-of-emotet"},{"level":2,"title":"Detection","href":"#detection"},{"level":3,"title":"YARA","href":"#yara"},{"level":4,"title":"EMOTET key decryption function","href":"#emotet-key-decryption-function"},{"level":4,"title":"EMOTET C2 aggregation","href":"#emotet-c2-aggregation"},{"level":4,"title":"EMOTET string decoder","href":"#emotet-string-decoder"}],"author":[{"title":"Remco Sprooten","slug":"remco-sprooten","description":"Elastic Security Labs Team Principal Research Engineer","body":{"raw":"","code":"var Component=(()=\u003e{var p=Object.create;var a=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var _=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),d=(t,e)=\u003e{for(var n in e)a(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,c)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of l(e))!g.call(t,o)\u0026\u0026o!==n\u0026\u0026a(t,o,{get:()=\u003ee[o],enumerable:!(c=x(e,o))||c.enumerable});return t};var j=(t,e,n)=\u003e(n=t!=null?p(f(t)):{},s(e||!t||!t.__esModule?a(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003es(a({},\"__esModule\",{value:!0}),t);var m=_((E,i)=\u003e{i.exports=_jsx_runtime});var C={};d(C,{default:()=\u003ey,frontmatter:()=\u003eb});var r=j(m()),b={title:\"Remco Sprooten\",description:\"Elastic Security Labs Team Principal Research Engineer\",slug:\"remco-sprooten\"};function u(t){return(0,r.jsx)(r.Fragment,{})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(u,t)})):u(t)}var y=h;return M(C);})();\n;return Component;"},"_id":"authors/remco-sprooten.mdx","_raw":{"sourceFilePath":"authors/remco-sprooten.mdx","sourceFileName":"remco-sprooten.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/remco-sprooten"},"type":"Author","imageUrl":"","url":"/authors/remco-sprooten"}],"category":[{"title":"Security research","slug":"security-research","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var l=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),d=(t,e)=\u003e{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},c=(t,e,r,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of _(e))!j.call(t,o)\u0026\u0026o!==r\u0026\u0026s(t,o,{get:()=\u003ee[o],enumerable:!(a=f(e,o))||a.enumerable});return t};var h=(t,e,r)=\u003e(r=t!=null?x(g(t)):{},c(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),p=t=\u003ec(s({},\"__esModule\",{value:!0}),t);var i=l((X,u)=\u003e{u.exports=_jsx_runtime});var D={};d(D,{default:()=\u003eC,frontmatter:()=\u003ey});var n=h(i()),y={title:\"Security research\",slug:\"security-research\"};function m(t){return(0,n.jsx)(n.Fragment,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var C=M;return p(D);})();\n;return Component;"},"_id":"categories/security-research.mdx","_raw":{"sourceFilePath":"categories/security-research.mdx","sourceFileName":"security-research.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/security-research"},"type":"Category","url":"/categories/security-research"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"emotet-dynamic-configuration-extraction"},"buildId":"wTIynxBm98ujmQxLsgK6X","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>