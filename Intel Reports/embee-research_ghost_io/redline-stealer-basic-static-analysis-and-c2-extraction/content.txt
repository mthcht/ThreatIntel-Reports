<!DOCTYPE html>
<html lang="en" data-smooth-scroll="Subtle" data-use-custom-scrollbar="true" data-cursor="Normal">
    <head>
        <title>Amadey Bot Malware Analysis - Static Analysis and C2 Extraction With Ghidra and x64Dbg</title>
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="HandheldFriendly" content="True" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />

        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

        <link rel="stylesheet" type="text/css" href="https://www.embeeresearch.io/assets/css/global.css?v=b6734bcc9c" />
        <link rel="stylesheet" type="text/css" href="https://www.embeeresearch.io/assets/css/notifications.css?v=b6734bcc9c" />

        <script src="https://cdn.jsdelivr.net/gh/studio-freight/lenis@1.0.23/bundled/lenis.min.js"></script>

        <script src="https://www.embeeresearch.io/assets/js/global.js?v=b6734bcc9c"></script>
        <script src="https://www.embeeresearch.io/assets/js/custom-elements.js?v=b6734bcc9c"></script>
        <script>
            loadFonts("Roboto", "Roboto Mono");
        </script>

        <style>
            :root {
                --background-color: #000000;
                --text-color: #FFFFFF;
                --font1: 'Roboto', sans-serif;
                --font2: 'Roboto Mono', sans-serif;
                --logo-scale: 0;
                --heading-one-scale: 0.5;
            }
        </style>

        <meta name="description" content="Using manual analysis to extract Amadey C2 information with Ghidra and x32dbg">
    <link rel="icon" href="https://www.embeeresearch.io/content/images/size/w256h256/2024/05/transparent-png-large-4-1.png" type="image/png">
    <link rel="canonical" href="https://www.embeeresearch.io/redline-stealer-basic-static-analysis-and-c2-extraction/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    
    <meta property="og:site_name" content="Embee Research">
    <meta property="og:type" content="article">
    <meta property="og:title" content="Amadey Bot Malware Analysis - Static Analysis and C2 Extraction With Ghidra and x64Dbg">
    <meta property="og:description" content="Using manual analysis to extract Amadey C2 information with Ghidra and x32dbg">
    <meta property="og:url" content="https://www.embeeresearch.io/redline-stealer-basic-static-analysis-and-c2-extraction/">
    <meta property="og:image" content="https://www.embeeresearch.io/content/images/2024/05/17.jpg">
    <meta property="article:published_time" content="2023-04-10T16:08:20.000Z">
    <meta property="article:modified_time" content="2024-05-15T06:14:45.000Z">
    <meta property="article:tag" content="Malware Analysis Guides">
    <meta property="article:tag" content="How To Use Debuggers">
    <meta property="article:tag" content="How To Use Ghidra">
    
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Amadey Bot Malware Analysis - Static Analysis and C2 Extraction With Ghidra and x64Dbg">
    <meta name="twitter:description" content="Using manual analysis to extract Amadey C2 information with Ghidra and x32dbg">
    <meta name="twitter:url" content="https://www.embeeresearch.io/redline-stealer-basic-static-analysis-and-c2-extraction/">
    <meta name="twitter:image" content="https://www.embeeresearch.io/content/images/2024/05/17.jpg">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="Matthew">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="Malware Analysis Guides, How To Use Debuggers, How To Use Ghidra">
    <meta name="twitter:site" content="@embee_research">
    <meta name="twitter:creator" content="@embee_research">
    <meta property="og:image:width" content="1024">
    <meta property="og:image:height" content="768">
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "Embee Research",
        "url": "https://www.embeeresearch.io/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://www.embeeresearch.io/content/images/2024/06/EMBEE-RESEARCH--720-x-720-px-.png",
            "width": 60,
            "height": 60
        }
    },
    "author": {
        "@type": "Person",
        "name": "Matthew",
        "image": {
            "@type": "ImageObject",
            "url": "https://www.embeeresearch.io/content/images/2024/05/embee-research-logo-png.png",
            "width": 500,
            "height": 500
        },
        "url": "https://www.embeeresearch.io/author/matthew-2/",
        "sameAs": [
            "https://twitter.com/embee_research"
        ]
    },
    "headline": "Amadey Bot Malware Analysis - Static Analysis and C2 Extraction With Ghidra and x64Dbg",
    "url": "https://www.embeeresearch.io/redline-stealer-basic-static-analysis-and-c2-extraction/",
    "datePublished": "2023-04-10T16:08:20.000Z",
    "dateModified": "2024-05-15T06:14:45.000Z",
    "image": {
        "@type": "ImageObject",
        "url": "https://www.embeeresearch.io/content/images/2024/05/17.jpg",
        "width": 1024,
        "height": 768
    },
    "keywords": "Malware Analysis Guides, How To Use Debuggers, How To Use Ghidra",
    "description": "Using manual analysis to extract Amadey C2 information with Ghidra and x32dbg",
    "mainEntityOfPage": "https://www.embeeresearch.io/redline-stealer-basic-static-analysis-and-c2-extraction/"
}
    </script>

    <meta name="generator" content="Ghost 5.115">
    <link rel="alternate" type="application/rss+xml" title="Embee Research" href="https://www.embeeresearch.io/rss/">
    <script defer src="https://cdn.jsdelivr.net/ghost/portal@~2.50/umd/portal.min.js" data-i18n="true" data-ghost="https://www.embeeresearch.io/" data-key="5b00360b75171de09d2f740e1c" data-api="https://embee-research.ghost.io/ghost/api/content/" data-locale="en" crossorigin="anonymous"></script><style id="gh-members-styles">.gh-post-upgrade-cta-content,
.gh-post-upgrade-cta {
    display: flex;
    flex-direction: column;
    align-items: center;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    text-align: center;
    width: 100%;
    color: #ffffff;
    font-size: 16px;
}

.gh-post-upgrade-cta-content {
    border-radius: 8px;
    padding: 40px 4vw;
}

.gh-post-upgrade-cta h2 {
    color: #ffffff;
    font-size: 28px;
    letter-spacing: -0.2px;
    margin: 0;
    padding: 0;
}

.gh-post-upgrade-cta p {
    margin: 20px 0 0;
    padding: 0;
}

.gh-post-upgrade-cta small {
    font-size: 16px;
    letter-spacing: -0.2px;
}

.gh-post-upgrade-cta a {
    color: #ffffff;
    cursor: pointer;
    font-weight: 500;
    box-shadow: none;
    text-decoration: underline;
}

.gh-post-upgrade-cta a:hover {
    color: #ffffff;
    opacity: 0.8;
    box-shadow: none;
    text-decoration: underline;
}

.gh-post-upgrade-cta a.gh-btn {
    display: block;
    background: #ffffff;
    text-decoration: none;
    margin: 28px 0 0;
    padding: 8px 18px;
    border-radius: 4px;
    font-size: 16px;
    font-weight: 600;
}

.gh-post-upgrade-cta a.gh-btn:hover {
    opacity: 0.92;
}</style>
    <script defer src="https://cdn.jsdelivr.net/ghost/sodo-search@~1.5/umd/sodo-search.min.js" data-key="5b00360b75171de09d2f740e1c" data-styles="https://cdn.jsdelivr.net/ghost/sodo-search@~1.5/umd/main.css" data-sodo-search="https://embee-research.ghost.io/" data-locale="en" crossorigin="anonymous"></script>
    <script defer src="https://cdn.jsdelivr.net/ghost/announcement-bar@~1.1/umd/announcement-bar.min.js" data-announcement-bar="https://www.embeeresearch.io/" data-api-url="https://www.embeeresearch.io/members/api/announcement/" crossorigin="anonymous"></script>
    <link href="https://www.embeeresearch.io/webmentions/receive/" rel="webmention">
    <script defer src="/public/cards.min.js?v=b6734bcc9c"></script>
    <link rel="stylesheet" type="text/css" href="/public/cards.min.css?v=b6734bcc9c">
    <script defer src="/public/member-attribution.min.js?v=b6734bcc9c"></script><style>:root {--ghost-accent-color: #71718a;}</style>
    
<script defer data-domain="embeeresearch.io" src="https://plausible.io/js/script.js"></script>
    </head>
    <body>
        <custom-cursor class="custom-cursor hidden"></custom-cursor>

        <div class="lighthouse-content-paint-fix ">Content Paint</div>

        <script>
            hexToRgba('#FFFFFF')
            
                setCustomScrollbar();

                setSmoothScroll();

            document.addEventListener('DOMContentLoaded', function () {
                    pageLoadLetterAnimation();
                    pageLoadAnimations();

                setToggle();
            })
        </script>

        <div class="viewport">
            <div class="site-content">
                <div class="site-main">
                    <link rel="stylesheet" type="text/css" href="https://www.embeeresearch.io/assets/css/navbar.css?v=b6734bcc9c" />

<custom-header class="header" data-navigation-bar-type="Sticky">
    <div class="wide-container navbar-inner vertical-animation" data-delay="200">

        <div class="mobile-navbar-icons">
            <button class="search-button unstyled-button" aria-label="Search button" data-ghost-search>
                <div class="search-icon">
                    <svg width="100%" height="100%" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M8.33464 14.9998C9.81378 14.9995 11.2503 14.5044 12.4155 13.5932L16.0788 17.2565L17.2571 16.0782L13.5938 12.4148C14.5055 11.2496 15.0009 9.8127 15.0013 8.33317C15.0013 4.65734 12.0105 1.6665 8.33464 1.6665C4.6588 1.6665 1.66797 4.65734 1.66797 8.33317C1.66797 12.009 4.6588 14.9998 8.33464 14.9998ZM8.33464 3.33317C11.0921 3.33317 13.3346 5.57567 13.3346 8.33317C13.3346 11.0907 11.0921 13.3332 8.33464 13.3332C5.57714 13.3332 3.33464 11.0907 3.33464 8.33317C3.33464 5.57567 5.57714 3.33317 8.33464 3.33317Z" fill="var(--text-color)"/>
</svg>
                </div>
            </button>
            <button class="menu-button unstyled-button" aria-label="Menu button">
                <div class="menu-line first-line"></div>
                <div class="menu-line mobile-line"></div>
                <div class="menu-line second-line"></div>
            </button>
        </div>
        
        <div class="navbar-links-outer">
            <div class="navbar-links-inner">
                    <ul class="nav">
            <li class="nav-home" data-label="Home">  
                <a class="nav-link hover-underline" href="https://www.embeeresearch.io/">Home</a>
            </li>
            <li class="nav-threat-intelligence" data-label="Threat Intelligence">  
                <a class="nav-link hover-underline" href="https://www.embeeresearch.io/tag/intel/">Threat Intelligence</a>
            </li>
            <li class="nav-malware-analysis" data-label="Malware Analysis">  
                <a class="nav-link hover-underline" href="https://www.embeeresearch.io/tag/reversing/">Malware Analysis</a>
            </li>
            <li class="nav-external-content" data-label="External Content">  
                <a class="nav-link hover-underline" href="https://www.embeeresearch.io/external-content/">External Content</a>
            </li>
    </ul>

            </div>
            
        </div>
    </div>
</custom-header>                    <link rel="stylesheet" type="text/css" href="https://www.embeeresearch.io/assets/css/post.css?v=b6734bcc9c" />
<link rel="stylesheet" type="text/css" href="https://www.embeeresearch.io/assets/css/toggle-card.css?v=b6734bcc9c" />
<link rel="stylesheet" type="text/css" href="https://www.embeeresearch.io/assets/css/post-content.css?v=b6734bcc9c" />
<link rel="stylesheet" type="text/css" href="https://www.embeeresearch.io/assets/css/section-header.css?v=b6734bcc9c" />
<link rel="stylesheet" type="text/css" href="https://www.embeeresearch.io/assets/css/related-posts.css?v=b6734bcc9c" />


    <main>
        
<article data-post-header-type="Narrow" data-has-feature-image="true" data-use-reading-progress-bar="false">
    <br><br><br>
        <header class="hero wide-container narrow-container">
            <div class="hero-content">
                <div class="post-hero-text-content section-padding-top">
                    <div class="post-hero-top-border horizontal-line-animation"></div>
                            <a class="post-tag vertical-animation" href="/tag/reversing/" data-delay="100">Malware Analysis Guides</a>

                    <h2 class="post-heading vertical-animation" data-delay="200">Amadey Bot Malware Analysis - Static Analysis and C2 Extraction With Ghidra and x64Dbg</h2>

                    <div class="excerpt-and-authors-wrapper vertical-animation" data-delay="300">
                            <div class="post-excerpt-wrapper">
                                <p>
                                    <i> Using manual analysis to extract Amadey C2 information with Ghidra and x32dbg </i>
                                </p>
                            </div>

                            <link rel="stylesheet" type="text/css" href="https://www.embeeresearch.io/assets/css/post-authors.css?v=b6734bcc9c" />

<div class="post-authors">
    <div class="post-author-images">
            <a href="/author/matthew-2/" class="post-author-image link-hover-animation-half">
                    <img class="image"
                        src="/content/images/size/w100/2024/05/embee-research-logo-png.png" 
                        alt="Matthew" 
                        loading="lazy">
            </a>
    </div>
    
    <div class="post-authors-text">
        <div class="post-authors-inner" id="authors">
            <small class="post-author-name">
                <a href="/author/matthew-2/">Matthew</a>
            </small>
        </div>
        <small class="date-small-text italic">
            <span>
                <time>
                    Apr 11, 2023
                </time>
            </span>
            &nbsp;-&nbsp;
            <span>22 min read</span>
        </small>
    </div>     
</div>                    </div>
                </div>

                 <div class="post-hero-bottom-border horizontal-line-animation"></div>             
            </div>
        </header>

    <div class="post-content narrow-container section-padding-bottom hidden-post-content">
        <p>Deep-dive analysis of a packed Redline Stealer sample. Utilising manual analysis and semi-automated string decryption to extract C2 information and ultimately identify the malware. </p><p>In this write-up, we intentionally try to touch on as many concepts as possible in order to demonstrate practical applications and hopefully provide a better learning experience for the reader. </p><p>Note that we have now added a <a href="https://www.embeeresearch.io/amadey-bot-infrastructure/">second post</a> covering analysis of the C2 server from this sample. </p><h3 id="quick-caveat"><strong>Quick Caveat</strong></h3><blockquote><em>We realized after the initial post that this sample is actually </em><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.amadey?ref=embeeresearch.io"><em>Amadey Bot</em></a><em>. The analysis and RE techniques remain equally relevant, but the sample is not actually Redline as the title suggests :) </em><br>(There is a second file in the .cab which contains <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.redline_stealer?ref=embeeresearch.io">Redline Stealer</a>, which may explain why the initial file was semi-incorrectly marked as Redline)<br><br>We were able to determine this by researching the decrypted strings that are detailed at the end of the post. <br><br>If you're interested in how to use decrypted strings to identify or confirm a malware family. Jump to the bonus section "<em>Utilising Decrypted Strings To Identify the Malware Family</em>" of this blog. </blockquote><h3 id="obtaining-the-malware-sample">Obtaining The Malware Sample</h3><p>The initial file can be downloaded from <a href="https://bazaar.abuse.ch/sample/449d9e29d49dea9697c9a84bb7cc68b50343014d9e14667875a83cade9adbc60/?ref=embeeresearch.io">Malware Bazaar</a> with SHA256: . <br><strong><code>449d9e29d49dea9697c9a84bb7cc68b50343014d9e14667875a83cade9adbc60</code></strong></p><h3 id="analysis-summary">Analysis Summary</h3><p>Feel free to jump to certain sections if you are already comfortable with some of these concepts. </p><ul><li>Saving the file and extracting the initial .exe</li><li>Using Entropy to identify that the initial .exe is packed</li><li>Using a debugger to manually unpack the first payload</li><li>Initial analysis of the unpacked payload</li><li>Identifying interesting strings and imports</li><li>Static Analysis to establish the context of interesting strings and imports</li><li>Utilising a debugger to analyse the String Decryption function</li><li>Automating the String Decryption using X32dbg</li><li>Utilising Decrypted strings to identify the malware family.</li></ul><h3 id="actual-analysis">Actual Analysis </h3><p>The analysis can kick off by downloading the above file and transferring it into a safe analysis machine. (We strongly recommend and personally use <a href="https://www.mandiant.com/resources/blog/flare-vm-the-windows-malware?ref=embeeresearch.io">FLARE-VM</a> for analysis)</p><p>The file can be extracted with the password <code>infected</code>. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-70.png" class="kg-image" alt="" loading="lazy" width="2000" height="194" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-70.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-70.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-70.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-70.png 2007w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Unzipping the file with the password "infected"</span></figcaption></figure><p>After successful extraction - <a href="https://www.youtube.com/watch?v=FB_e1mIhykk&ref=embeeresearch.io">detect-it-easy </a>can be used to perform an initial analysis of the file. </p><p>This reveals that the file is a 32-bit executable. Which, in this case, is actually a Microsoft Cabinet file.<a href="https://learn.microsoft.com/en-us/windows/win32/msi/cabinet-files?ref=embeeresearch.io">Microsoft Cabinet file</a> This is essentially a <code>.zip</code>  that can be executed as a <code>.exe</code> file. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-71.png" class="kg-image" alt="" loading="lazy" width="1441" height="923" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-71.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-71.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-71.png 1441w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Initial Malware Analysis using Detect-it-easy</span></figcaption></figure><p>The file is similar enough to  <code>.zip</code> that <code>7-zip</code> is able to extract the contents of the file just like a regular zip file. </p><p>We were able to use 7zip to extract the contents, creating two new exes in the process. These are <code>si684017.exe</code> and <code>un007241.exe</code> in the screenshot below. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-72.png" class="kg-image" alt="" loading="lazy" width="1941" height="341" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-72.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-72.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-72.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-72.png 1941w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Additional files after extracting initial .cab.&nbsp;</span></figcaption></figure><p>For now, I'll focus on the <code>si684017.exe</code> file. </p><h3 id="initial-executable-file">Initial Executable File</h3><p>The initial is file recognized as a 32-bit exe file by <code>detect-it-easy</code>. </p><p>Interestingly - it was not a .NET as most <a href="https://www.malwarebytes.com/blog/threats/info-stealers?ref=embeeresearch.io">Infostealers</a> generally are. This means that the usual DnSpy won't be applicable here. </p><p>(<a href="https://www.embeeresearch.io/dcrat-manual-de-obfuscation/">Check out my analysis of dcrat for tips on using Dnspy</a>) </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-73.png" class="kg-image" alt="" loading="lazy" width="1445" height="925" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-73.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-73.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-73.png 1445w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Initial file analysis using Detect-it-easy</span></figcaption></figure><p>During initial analysis, we always want to determine if the file is potentially a <a href="https://www.oreilly.com/library/view/practical-malware-analysis/9781593272906/ch02s04.html?ref=embeeresearch.io">packed loader</a> rather than a final payload. If we have reason to suspect a packed payload, we typically focus on unpacking rather than strings or other static analysis. </p><p>A packed sample will typically contain areas of significantly high entropy. </p><p>To determine areas of entropy - we utilized the <code>Entropy Graph</code> feature within Detect-it-easy. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-74.png" class="kg-image" alt="" loading="lazy" width="1523" height="1249" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-74.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-74.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-74.png 1523w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Malware Entropy Analysis Using Detect-it-easy</span></figcaption></figure><p>This revealed a <em>very</em> area of high entropy within the file. This is a strong indication that the file is a packed loader and not the final payload. </p><p>In situations like this - we proceed to focus on unpacking the file. </p><p>Since this is a "regular" exe file and not a .NET-based file - we proceeded to unpack the file using X32dbg. </p><h3 id="unpacking-using-x32dbg">Unpacking Using X32dbg</h3><p>When a standard loader unpacks a file, it typically uses a combination of <code>VirtualAlloc</code> , <code>VirtualProtect</code> and <code>CreateThread</code>. These functions allow the malware to allocate new sections of memory that can be used to store and execute the unpacked payload. </p><blockquote>Advanced malware will heavily obfuscate these functions and/or avoid using them completely. But in 90% of cases - the previously mentioned functions are relevant. <br>(Check out my <a href="https://www.huntress.com/blog/hackers-no-hashing-randomizing-api-hashes-to-evade-cobalt-strike-shellcode-detection?ref=embeeresearch.io">blog on API hashing</a> for how this obfuscation can be done)</blockquote><p>In most malware - We can set breakpoints on the <code>VirtualAlloc</code> and <code>VirtualProtect</code> function calls and monitor the results using <a href="https://stackoverflow.com/questions/8878716/what-is-the-difference-between-hardware-and-software-breakpoints?ref=embeeresearch.io">Hardware Breakpoints</a> . This will alert when the newly allocated buffer is accessed, from there it is generally simple to obtain the decoded payload.</p><p>To summarise this:</p><ul><li>Identify a Function of Interest (In this case <code>VirtualAlloc</code>)</li><li>Create a breakpoint to monitor <code>VirtualAlloc</code></li><li>Obtain the Memory Buffer created by <code>VirtualAlloc</code></li><li>Use a <code>Hardware Breakpoint</code> - to alert when the new memory buffer is accessed</li><li>Allow the malware to execute until the buffer is filled</li><li>Save the buffer to a file</li></ul><p>I've previously written a thread on how to use Hardware Breakpoints to unpack Cobalt Strike Loaders. You can check it out <a href="https://twitter.com/embee_research/status/1568910991244820481?lang=en&ref=embeeresearch.io">here</a>. </p><h3 id="loading-the-file-into-x32dbg">Loading the File into X32dbg</h3><p>To initiate this process - we dragged the file into a debugger (<a href="https://x64dbg.com/?ref=embeeresearch.io">x32dbg</a>) and allowed the file to execute until the <a href="https://stackoverflow.com/questions/3745672/about-the-entry-point-of-pe-in-windows?ref=embeeresearch.io">Entry Point.</a>  This can be done by loading the file and <em>once</em> clicking the <code>F9</code> button. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-75.png" class="kg-image" alt="" loading="lazy" width="2000" height="869" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-75.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-75.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-75.png 1600w, https://www.embeeresearch.io/content/images/size/w2400/2023/04/image-75.png 2400w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Viewing the Entrypoint using a Debugger (x32dbg)</span></figcaption></figure><h3 id="creating-the-breakpoints">Creating The Breakpoints</h3><p>Breakpoints were then required in order to inspect the appropriate <code>VirtualAlloc</code> function. </p><blockquote>Note that in this case - the primary interest is in the output (or return value) of <code>VirtualAlloc</code>. The relevance of this is that we care about the data at the "end" of the breakpoint, and not at the moment where the breakpoint is hit. </blockquote><p>If that's confusing then let's just see it in action (it's always confusing the first dozen times)  </p><p>Set two breakpoints using the following commands</p><p><code>bp VirtualAlloc</code> , <code>bp VirtualProtect</code></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-76.png" class="kg-image" alt="" loading="lazy" width="991" height="185" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-76.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-76.png 991w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Setting a breakpoint on VirtualAlloc using x32dbg</span></figcaption></figure><p>Hit <code>F9</code> (Continue) again, allowing the malware to execute until a breakpoint is hit. </p><p>A breakpoint is immediately hit on the <code>VirtualAlloc</code> function</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-77.png" class="kg-image" alt="" loading="lazy" width="2000" height="901" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-77.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-77.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-77.png 1600w, https://www.embeeresearch.io/content/images/size/w2400/2023/04/image-77.png 2400w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Triggering a breakpoint on VirtualAlloc</span></figcaption></figure><p>The primary purpose of <code>VirtualAlloc</code> is to allocate memory and return an address to the newly allocated buffer. This newly allocated memory is contained in the <code>EAX</code> register when the function is <em>completed</em>. </p><p>TLDR: Since we're only interested in that buffer - we utilized the <code>Execute Until Return</code> or <code>CTRL+F9</code> to jump straight to the end of the function and obtain the result. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-78.png" class="kg-image" alt="" loading="lazy" width="405" height="619"><figcaption><span style="white-space: pre-wrap;">How to "Execute Until Return" using x32dbg</span></figcaption></figure><p>Allowing the malware to Execute Until Return - provides an <code>EAX</code> register containing the address of the memory buffer to be used by the malware. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-80.png" class="kg-image" alt="" loading="lazy" width="1117" height="555" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-80.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-80.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-80.png 1117w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Viewing the memory buffer returned by VirtualAlloc</span></figcaption></figure><blockquote>There is nothing particularly special about EAX, it is just the standard register used for returning the results of a function. <br>To learn more about <code>EAX</code> and calling conventions - there's a great video on that from <a href="https://www.youtube.com/watch?v=9lzW0I9_cpY&ref=embeeresearch.io">OALABS</a>. </blockquote><p>To monitor the buffer returned by <code>VirtualAlloc</code>, Right-click on the returned address <code>02250000</code> address and select <code>Follow in Dump</code>. </p><p>This will cause the bottom-left window to display the newly allocated memory. </p><p>The buffer of memory currently contains all <code>00</code>'s, as nothing has been used or written to the buffer yet. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-81.png" class="kg-image" alt="" loading="lazy" width="2000" height="839" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-81.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-81.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-81.png 1600w, https://www.embeeresearch.io/content/images/size/w2400/2023/04/image-81.png 2400w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Using x32dbg (Follow In Dump) to view the contents of a memory buffer</span></figcaption></figure><p>It is important to be notified when that buffer of <code>00</code>'s is no longer a buffer of <code>00</code>'s. </p><p>To achieve this - A hardware breakpoint can be applied on the first byte of the newly allocated buffer. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-82.png" class="kg-image" alt="" loading="lazy" width="1183" height="1055" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-82.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-82.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-82.png 1183w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Setting a Hardware Breakpoint Using x32dbg</span></figcaption></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-83.png" class="kg-image" alt="" loading="lazy" width="563" height="113"><figcaption><span style="white-space: pre-wrap;">Successful creation of a Hardware Breakpoint</span></figcaption></figure><p>Once the hardware breakpoint is  set - the malware can continue to execute using the <code>F9</code> button. </p><p>The Hardware Breakpoint will immediately be triggered. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-84.png" class="kg-image" alt="" loading="lazy" width="1071" height="483" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-84.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-84.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-84.png 1071w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Triggering a Hardware Breakpoint using X32dbg</span></figcaption></figure><p>Once this happens, use <code>CTRL+F9</code> (Execute Until Return, aka "just finish what you're doing now, but don't do anything else") to allow the malware to continue writing to the buffer without actually executing it. </p><p>(Utilising <code>CTRL+F9</code> will cause the malware to stop at the end of the current function - preventing the execution of the rest of the malware)</p><p>Once the current function is finished - the buffer will look something like this. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-85.png" class="kg-image" alt="" loading="lazy" width="1223" height="643" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-85.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-85.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-85.png 1223w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Identifying a Memory Buffer containing Shellcode</span></figcaption></figure><p>Unfortunately - the first buffer does not contain an unpacked PE file. It does contain a large buffer of shellcode which is used to unpack the next section using another <code>VirtualAlloc</code>. </p><p>If the file was successfully unpacked - it would typically look something more akin to this </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-86.png" class="kg-image" alt="" loading="lazy" width="991" height="179" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-86.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-86.png 991w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Identifying an unpacked PE file in a memory buffer</span></figcaption></figure><p>In this case, there is only shellcode in the buffer. You can typically determine that the buffer is shellcode by the presence of the <code>EB</code> (jmp) byte. You can also confirm the suspected shellcode by inspecting the instructions using <code>Right-Click -&gt; Follow in Disassembler</code>. <br><br>If the code disassembles without errors (No glaring red sections) - it is highly likely to be shellcode. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-87.png" class="kg-image" alt="" loading="lazy" width="1757" height="823" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-87.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-87.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-87.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-87.png 1757w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Using x32dbg to validate shellcode contained in a memory buffer</span></figcaption></figure><p>At this stage - the shellcode <em>could </em>be dumped into a file for further analysis. </p><p>However, it is often better to allow the shellcode to execute. The malicious actions taken by the shellcode will often trigger the same breakpoints intended for the "original" malware.  </p><h3 id="obtaining-the-unpacked-payload">Obtaining The Unpacked Payload</h3><p>Hitting <code>F9</code> (Continue) to allow the malware to execute - another breakpoint is hit on <code>VirtualAlloc</code></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-88.png" class="kg-image" alt="" loading="lazy" width="1771" height="821" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-88.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-88.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-88.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-88.png 1771w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Viewing VirtualAlloc function in a debugger (x32dbg)</span></figcaption></figure><p>Using the same trick of <code>Execute Until Return</code> ,  <code>Select EAX</code> and <code>Right-Click -&gt; Follow in Dump</code>, the second allocated buffer can be obtained. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-89.png" class="kg-image" alt="" loading="lazy" width="2000" height="873" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-89.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-89.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-89.png 1600w, https://www.embeeresearch.io/content/images/size/w2400/2023/04/image-89.png 2400w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Using x32dbg to locate another memory buffer returned by VirtualAlloc</span></figcaption></figure><p>Another <code>Hardware Breakpoint</code> will need to be set at the start of the buffer. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-90.png" class="kg-image" alt="" loading="lazy" width="1097" height="751" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-90.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-90.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-90.png 1097w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Creating another Hardware Breakpoint on the memory address</span></figcaption></figure><p>Allowing the malware to continue to execute - the hardware breakpoint is hit. This time containing a promising <code>M</code>. (First half on an <a href="https://subscription.packtpub.com/book/security/9781789610789/4/ch04lvl1sec57/mz-header?ref=embeeresearch.io">MZ header</a>)</p><p>(Side note that my debugger suddenly crashed here and had to be restarted - hence the slight change of address in future screenshots)</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-91.png" class="kg-image" alt="" loading="lazy" width="949" height="653" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-91.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-91.png 949w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Memory buffer - potentially containing an unpacked pe-file payload</span></figcaption></figure><p>Allowing the malware to continue to execute - A complete MZ/PE file can be found. At this point, the unpacked file has been successfully loaded into memory. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-92.png" class="kg-image" alt="" loading="lazy" width="1707" height="561" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-92.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-92.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-92.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-92.png 1707w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">A complete Pe-file written to the memory buffer</span></figcaption></figure><h3 id="saving-the-unpacked-file">Saving the Unpacked File</h3><p>To save the unpacked file - <code>Right-Click</code> on the start address and select <code>Follow in Memory Map</code></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-94.png" class="kg-image" alt="" loading="lazy" width="613" height="1021" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-94.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-94.png 613w"><figcaption><span style="white-space: pre-wrap;">How to save a memory buffer using x32dbg</span></figcaption></figure><p>This will reveal the location where the buffer was allocated. The entire memory buffer can then be saved by using <code>Right-Click</code> and <code>Dump Memory to File</code></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-95.png" class="kg-image" alt="" loading="lazy" width="795" height="153" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-95.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-95.png 795w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Using Memory Map to save a specific memory section in x32dbg</span></figcaption></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-96.png" class="kg-image" alt="" loading="lazy" width="575" height="259"><figcaption><span style="white-space: pre-wrap;">The final button used to dump the memory to a file using x32dbg</span></figcaption></figure><p>The file can now be saved as <code>unpacked.bin</code> (or any other file name of choosing)</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-97.png" class="kg-image" alt="" loading="lazy" width="885" height="261" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-97.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-97.png 885w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Specifying a name for the unpacked file</span></figcaption></figure><h3 id="initial-analysisunpacked-payload">Initial Analysis - Unpacked Payload</h3><p>The file is a 32-bit executable with no (recognized) packers or obfuscation. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-98.png" class="kg-image" alt="" loading="lazy" width="1439" height="921" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-98.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-98.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-98.png 1439w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Initial analysis of suspected unpacked payload using detect-it-easy</span></figcaption></figure><p><br>The entropy graph does not contain any areas of significantly high or flat entropy - suggesting that the file is not packed and does not contain any additional payloads. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-99.png" class="kg-image" alt="" loading="lazy" width="1525" height="1253" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-99.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-99.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-99.png 1525w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Additional Entropy Analysis - Suggesting no hidden payloads - No significant areas of entropy</span></figcaption></figure><p>Since this was potentially a final payload - we checked the strings for any unobfuscated information. </p><p>This revealed some base64 encoded data - but we weren't able to successfully decode it. <br><br>The base64 encoding has likely been combined with additional obfuscation.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-100.png" class="kg-image" alt="" loading="lazy" width="1529" height="1253" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-100.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-100.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-100.png 1529w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Base64 Encoded Strings contained within the malware file</span></figcaption></figure><p>Failing to decode the "base64" </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-101.png" class="kg-image" alt="" loading="lazy" width="1739" height="693" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-101.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-101.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-101.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-101.png 1739w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Cyberchef - Failure to decode the base64 strings - signs of additional obfuscation</span></figcaption></figure><h3 id="import-analysis"><strong>Import Analysis</strong></h3><p>Imported functions are an additional valuable source of information. Especially for suspected unpacked files. </p><p>The imported functions referenced capability that suggested the file can download data and make internet connections. </p><p>Since these functions need C2 information in order to work, this is a good sign that the C2 config may be contained within this file. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-103.png" class="kg-image" alt="" loading="lazy" width="1793" height="1075" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-103.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-103.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-103.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-103.png 1793w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Malware Import Analysis Using Detect-it-easy</span></figcaption></figure><h3 id="ghidra-analysis">Ghidra Analysis</h3><p>At this point, we decided to analyze the file further using <code>Ghidra</code>. My plan was to utilise <code>Ghidra</code> to gather more information on the suspicious imports related to c2 connections <code>InternetReadFile</code>, <code>InternetConnectA</code>, <code>HttpSendRequestA</code> etc. </p><p>In addition to this - we wanted to investigate the suspicious "base64" strings identified with detect-it-easy.  </p><p>To investigate both - we intended to utilise cross references or <code>X-refs</code> to observe where the strings and imports were used throughout the code. From here we hoped to find arguments passed to the internet functions (hopefully containing a C2), or to find the logic behind the function that accesses the base64 encoded strings. </p><p>To Summarise - My plan was to Utilise Ghidra to...</p><ul><li>Investigate the suspicious strings - which function are they passed to? what does that function do with them? Can we trace the input and output of that function?</li><li>Investigate Suspicious Imports - Check where the imports were used, and what arguments were being passed. Can we set a breakpoint and view the decrypted C2s? </li></ul><h3 id="string-searching-with-ghidra">String Searching with Ghidra</h3><p>We took the first approach, using Ghidra to search for strings within the file. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-107.png" class="kg-image" alt="" loading="lazy" width="863" height="583" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-107.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-107.png 863w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Searching for Strings Using Ghidra</span></figcaption></figure><p>By filtering on <code>==</code>, we were quickly able to narrow the results down to the previously identified base64 strings. This was not all relevant strings, but it was a solid starting point. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-108.png" class="kg-image" alt="" loading="lazy" width="2000" height="812" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-108.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-108.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-108.png 1600w, https://www.embeeresearch.io/content/images/size/w2400/2023/04/image-108.png 2400w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Locating base64 strings using Ghidra</span></figcaption></figure><p>We double-clicked on one of the larger strings, taking me to its reference within the file. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-109.png" class="kg-image" alt="" loading="lazy" width="2000" height="68" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-109.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-109.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-109.png 1600w, https://www.embeeresearch.io/content/images/size/w2400/2023/04/image-109.png 2400w" sizes="(min-width: 720px) 720px"></figure><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-110.png" class="kg-image" alt="" loading="lazy" width="1661" height="229" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-110.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-110.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-110.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-110.png 1661w" sizes="(min-width: 720px) 720px"></figure><p>From here we could hit <code>CTRL+SHIFT+F</code> to find references to this string. Alternatively, you could <code>Right Click -&gt; References -&gt; Show References to Address</code></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-111.png" class="kg-image" alt="" loading="lazy" width="2000" height="467" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-111.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-111.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-111.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-111.png 2383w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Using Ghidra to locate Cross-references from strings</span></figcaption></figure><p>Clicking on the one available reference - reveals an undefined function acting upon the string. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-112.png" class="kg-image" alt="" loading="lazy" width="1749" height="547" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-112.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-112.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-112.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-112.png 1749w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Encountering an Undefined Function in Ghidra</span></figcaption></figure><p>By clicking on the first address of the function and hitting <code>F</code>, we can define a function at the current address. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-113.png" class="kg-image" alt="" loading="lazy" width="2000" height="603" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-113.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-113.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-113.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-113.png 2357w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Defining a Function in Ghidra</span></figcaption></figure><p>After defining a function - the decompiler output now looks much cleaner. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-114.png" class="kg-image" alt="" loading="lazy" width="1747" height="431" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-114.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-114.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-114.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-114.png 1747w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Viewing a new function in Ghidra - an obfuscated string can be seen</span></figcaption></figure><p>We can enter the function at <code>FUN_00414550</code> and investigate. </p><p>The function contains a bunch of C++-looking junk, which was difficult to analyse - so we decided to take a slightly different approach. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-116.png" class="kg-image" alt="" loading="lazy" width="1731" height="1117" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-116.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-116.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-116.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-116.png 1731w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Viewing a suspicious function using Ghidra</span></figcaption></figure><p>We checked the number of cross-references on the <code>FUN_00414550</code> function. A high number of cross-references would indicate that the function is responsible for decoding more than just this encoded string. </p><p>If the same function is used for all string-related decryption, then perhaps a debugger and a breakpoint are the better approach. </p><p>At minimum - a debugger will at least confirm the theory that this function is related to string decryption.</p><h3 id="string-decryption-via-x32dbg">String Decryption Via X32dbg</h3><p>We decided to investigate the string decryption using X32dbg. </p><p>To do this - we would need to set a breakpoint on the function that we suspected was responsible for string decryption. </p><p>Attempting to copy and paste the address directly from Ghidra will likely result in an error as the addresses may not align. </p><h3 id="syncing-addresses-with-ghidra-and-x32dbg">Syncing Addresses with Ghidra and X32dbg</h3><p>To Sync the Addresses between Ghidra and X32dbg. We need to find the base of our current file. This can be found in the memory map and in this case is <code>003e0000</code>. Although it may be different for you. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-117.png" class="kg-image" alt="" loading="lazy" width="1785" height="271" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-117.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-117.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-117.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-117.png 1785w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">How to identify a base address in a debugger (x32dbg)</span></figcaption></figure><p>From here we can select the memory map within Ghidra. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-118.png" class="kg-image" alt="" loading="lazy" width="1309" height="393" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-118.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-118.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-118.png 1309w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">How to use Ghidra to Sync a Memory Address</span></figcaption></figure><p>Then select the <code>Home</code> button</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-119.png" class="kg-image" alt="" loading="lazy" width="1835" height="733" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-119.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-119.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-119.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-119.png 1835w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Using Ghidra to Sync memory address with x32dbg</span></figcaption></figure><p>and set the base address according to what was obtained with x32dbg. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-120.png" class="kg-image" alt="" loading="lazy" width="1837" height="725" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-120.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-120.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-120.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-120.png 1837w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Using Ghidra to sync a memory address with x32dbg</span></figcaption></figure><p>From here, the address of the suspected string decryption function will be updated accordingly and be in sync with x32dbg. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-121.png" class="kg-image" alt="" loading="lazy" width="1519" height="503" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-121.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-121.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-121.png 1519w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">String Decryption Function in Ghidra with Updated Memory Address</span></figcaption></figure><p>The new function address is <code>003f4550</code> . This value can be used to create a breakpoint inside of x32dbg. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-122.png" class="kg-image" alt="" loading="lazy" width="2000" height="417" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-122.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-122.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-122.png 1600w, https://www.embeeresearch.io/content/images/size/w2400/2023/04/image-122.png 2400w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Updated Memory Address in Ghidra</span></figcaption></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-123.png" class="kg-image" alt="" loading="lazy" width="517" height="125"><figcaption><span style="white-space: pre-wrap;">Command for creating a breakpoint on a known suspicious function</span></figcaption></figure><p>The breakpoint is then hit with an argument of <code>j hl#A</code></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-124.png" class="kg-image" alt="" loading="lazy" width="2000" height="811" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-124.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-124.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-124.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-124.png 2197w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Beginning of a suspicious function in x32dbg</span></figcaption></figure><p>Allowing the malware to <code>Execute Until Return</code> will retrieve the result of the function. In this case, it was a large hex string that was pretty uninteresting. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-127.png" class="kg-image" alt="" loading="lazy" width="2000" height="753" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-127.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-127.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-127.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-127.png 2073w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">End of a suspicious function - viewing the returned value - possible decoded string</span></figcaption></figure><p>However, Clicking <code>F9</code> or <code>Continue</code> will cause the Decryption code to be hit again.</p><p>Sadly, this again revealed some largely uninteresting strings</p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-128.png" class="kg-image" alt="" loading="lazy" width="839" height="121" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-128.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-128.png 839w" sizes="(min-width: 720px) 720px"></figure><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-129.png" class="kg-image" alt="" loading="lazy" width="499" height="109"></figure><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-130.png" class="kg-image" alt="" loading="lazy" width="811" height="127" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-130.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-130.png 811w" sizes="(min-width: 720px) 720px"></figure><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-131.png" class="kg-image" alt="" loading="lazy" width="669" height="139" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-131.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-131.png 669w"></figure><p>We eventually realised that this function was not used to decode the final strings. But was rather to obtain copies of the same base64 obfuscated strings that were previously found. </p><p>At this point, we experimented with the Suspicious imports but could not reliably trace them back to a function that would obtain the decrypted C2 . </p><p>However - we did get lucky and was able to locate an interesting function towards the main malware function of the code. </p><p>This function was located at <code>003d29b0</code>. </p><h3 id="locating-main">Locating Main</h3><p>We were able to locate main by browsing to the EntryPoint. <br></p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-139.png" class="kg-image" alt="" loading="lazy" width="745" height="365" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-139.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-139.png 745w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Attempting to locate the main function in Ghidra - Starting from Entry Point</span></figcaption></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-141.png" class="kg-image" alt="" loading="lazy" width="1169" height="437" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-141.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-141.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-141.png 1169w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Attempting to locate the main function using Ghidra</span></figcaption></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-144.png" class="kg-image" alt="" loading="lazy" width="639" height="613" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-144.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-144.png 639w"><figcaption><span style="white-space: pre-wrap;">Successfully finding the main function within Ghidra</span></figcaption></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-143.png" class="kg-image" alt="" loading="lazy" width="1379" height="275" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-143.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-143.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-143.png 1379w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Identifying a possible string decryption function in Ghidra</span></figcaption></figure><p>When this function is executed - a base64 encoded value is passed as an argument. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-132.png" class="kg-image" alt="" loading="lazy" width="2000" height="549" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-132.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-132.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-132.png 1600w, https://www.embeeresearch.io/content/images/size/w2400/2023/04/image-132.png 2400w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Base64 Function Arguments viewed in a debugger.&nbsp;</span></figcaption></figure><p>Executing until the end of the function - A value is obtained, which the malware used to create a folder in the user's temp directory. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-133.png" class="kg-image" alt="" loading="lazy" width="2000" height="663" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-133.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-133.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-133.png 1600w, https://www.embeeresearch.io/content/images/size/w2400/2023/04/image-133.png 2400w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Obtaining a decoded value using x32dbg</span></figcaption></figure><p>The next call to this function - took a base64 encoded argument and returned a file name that the malware was copied into. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-134.png" class="kg-image" alt="" loading="lazy" width="975" height="243" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-134.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-134.png 975w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">A second encoded value in eax- viewed in x32dbg</span></figcaption></figure><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-135.png" class="kg-image" alt="" loading="lazy" width="1411" height="457" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-135.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-135.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-135.png 1411w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">A decoded filename - located using return addresses in x32dbg</span></figcaption></figure><p>At a location of <code>003e9870</code> - was a function responsible for checking the location of the current running file. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-146.png" class="kg-image" alt="" loading="lazy" width="583" height="191"></figure><p>If the location did not match <code>C:\\users\\&lt;user&gt;\\appdata\\local\\temp\\595f021478\\oneetx.exe</code> - then the malware would terminate. </p><p>Here we can see the return value from the function. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-147.png" class="kg-image" alt="" loading="lazy" width="1411" height="457" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-147.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-147.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-147.png 1411w" sizes="(min-width: 720px) 720px"></figure><p>As well as the outgoing function calls in the Ghidra Function Tree. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-136.png" class="kg-image" alt="" loading="lazy" width="781" height="865" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-136.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-136.png 781w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Viewing the Function Tree Using Ghidra</span></figcaption></figure><p>After the directory check is performed - the malware enters <code>FUN_003e7b70</code> attempts to create a mutex with a value of <code>006700e5a2ab05704bbb0c589b88924d</code></p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-148.png" class="kg-image" alt="" loading="lazy" width="535" height="497"></figure><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-137.png" class="kg-image" alt="" loading="lazy" width="1437" height="1003" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-137.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-137.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-137.png 1437w" sizes="(min-width: 720px) 720px"></figure><p>By breaking on CreateMutexA - The value of <code>006700e5a2ab05704bbb0c589b88924d</code> can be seen as an argument. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-149.png" class="kg-image" alt="" loading="lazy" width="2000" height="172" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-149.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-149.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-149.png 1600w, https://www.embeeresearch.io/content/images/size/w2400/2023/04/image-149.png 2400w" sizes="(min-width: 720px) 720px"></figure><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-138.png" class="kg-image" alt="" loading="lazy" width="1259" height="243" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-138.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-138.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-138.png 1259w" sizes="(min-width: 720px) 720px"></figure><p>If the mutex creation returned a value of <code>0xb7</code> (Already Exists) - then the malware would terminate itself. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-150.png" class="kg-image" alt="" loading="lazy" width="659" height="167" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-150.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-150.png 659w"></figure><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-151.png" class="kg-image" alt="" loading="lazy" width="1329" height="459" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-151.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-151.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-151.png 1329w" sizes="(min-width: 720px) 720px"></figure><h3 id="bypassing-anti-something-checks">Bypassing Anti-Something Checks</h3><p>These two checks on the file path and Mutex can function as pseudo-anti-debug checks. To continue analysis, they needed to either be patched or bypassed. </p><p>To bypass the file path check - we allowed the malware to execute inside the analysis VM and copy itself to the correct folder. we then opened the new file inside the debugger. </p><blockquote>Alternatively - we could have patched or nop'd the function. but we found that just moving it to the expected folder worked fine. </blockquote><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-152.png" class="kg-image" alt="" loading="lazy" width="1317" height="249" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-152.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-152.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-152.png 1317w" sizes="(min-width: 720px) 720px"></figure><p>Once the new file was loaded - we updated the base address in Ghidra to match the new address in x32dbg. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-153.png" class="kg-image" alt="" loading="lazy" width="1247" height="179" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-153.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-153.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-153.png 1247w" sizes="(min-width: 720px) 720px"></figure><p>Once we updated the base address - we set a breakpoint on <code>CreateMutexA</code> and the suspected decryption function <code>FUN_XXXX29b0</code></p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-154.png" class="kg-image" alt="" loading="lazy" width="1283" height="145" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-154.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-154.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-154.png 1283w" sizes="(min-width: 720px) 720px"></figure><p>Once we hit the breakpoint on <code>CreateMutexA</code> - we stepped out of the function using <code>Execute Until Return</code> and then <code>Step Over</code> twice. </p><p>This allowed me to see the return value of <code>b7</code> from the <code>GetLastError</code> function. When we allowed the malware to continue to run - it quickly terminated itself without hitting the decryption breakpoint. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-156.png" class="kg-image" alt="" loading="lazy" width="2000" height="268" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-156.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-156.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-156.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-156.png 2175w" sizes="(min-width: 720px) 720px"></figure><p>To fix this - we used <code>Edit</code> to patch the return value to be <code>B6</code> instead. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-157.png" class="kg-image" alt="" loading="lazy" width="901" height="367" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-157.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-157.png 901w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Patching a return value using X32dbg</span></figcaption></figure><p>Upon running the malware - The decryption function was hit again. </p><p>Following the return of the decryption function using <code>Exeute Until Return</code>  revealed a pretty boring <code>\\</code> character. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-158.png" class="kg-image" alt="" loading="lazy" width="599" height="133"></figure><p>But allowing it to hit a few more times - it eventually returned a value of <code>Startup</code> which was pretty interesting. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-159.png" class="kg-image" alt="" loading="lazy" width="563" height="133"></figure><p>Hitting again revealed a registry path of </p><p><code>SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code></p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-160.png" class="kg-image" alt="" loading="lazy" width="1395" height="133" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-160.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-160.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-160.png 1395w" sizes="(min-width: 720px) 720px"></figure><p>Eventually some more interesting values were returned. Including a partial command likely used to create persistence. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-161.png" class="kg-image" alt="" loading="lazy" width="813" height="97" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-161.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-161.png 813w" sizes="(min-width: 720px) 720px"></figure><p>As well as some possible signs of enumeration </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-162.png" class="kg-image" alt="" loading="lazy" width="1063" height="105" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-162.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-162.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-162.png 1063w" sizes="(min-width: 720px) 720px"></figure><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-163.png" class="kg-image" alt="" loading="lazy" width="651" height="81" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-163.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-163.png 651w"></figure><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-164.png" class="kg-image" alt="" loading="lazy" width="1217" height="91" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-164.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-164.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-164.png 1217w" sizes="(min-width: 720px) 720px"></figure><p>Eventually - The names of some security products was also observed. Likely the malware was scanning for the presence of these tools. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-166.png" class="kg-image" alt="" loading="lazy" width="577" height="91"></figure><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-167.png" class="kg-image" alt="" loading="lazy" width="549" height="83"></figure><h3 id="eventually-the-constant-breakpoint-execute-until-the-return-combination-got-tiring">Eventually, the constant breakpoint + execute until the return combination got tiring.</h3><p>Allowing the decryption function to continue to execute and hit our breakpoint. We can eventually observe C2 information. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-169.png" class="kg-image" alt="" loading="lazy" width="789" height="125" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-169.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-169.png 789w" sizes="(min-width: 720px) 720px"></figure><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-170.png" class="kg-image" alt="" loading="lazy" width="671" height="153" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-170.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-170.png 671w"></figure><p><strong>Automating the Decryption - Kinda</strong></p><p>Eventually, the constant breakpoint + execute until the return combination got tiring. So we decided to try and automate it using a Conditional Breakpoint and Log. </p><p>To do this - we allowed the malware to execute until the end of a decryption function. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-172.png" class="kg-image" alt="" loading="lazy" width="2000" height="190" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-172.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-172.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-172.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-172.png 2077w" sizes="(min-width: 720px) 720px"></figure><p>And then created a Conditional Breakpoint that would log any string contained at eax, then continue execution. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-173.png" class="kg-image" alt="" loading="lazy" width="1429" height="717" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-173.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-173.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-173.png 1429w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Settiing a Conditional Breakpoint (and logging a value) using X32dbg</span></figcaption></figure><p>Allowing the malware to continue to execute. We could observe the decoded values printed to the log menu of x32dbg. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://www.embeeresearch.io/content/images/2023/04/image-174.png" class="kg-image" alt="" loading="lazy" width="1637" height="1245" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-174.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-174.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-174.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-174.png 1637w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">Successfully using conditional breakpoints to decode a malware sample.&nbsp;</span></figcaption></figure><p>This revealed some c2 information - referencing an IP with 1/87 detections as of <code>2023/04/10</code></p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-175.png" class="kg-image" alt="" loading="lazy" width="1529" height="599" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-175.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-175.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-175.png 1529w" sizes="(min-width: 720px) 720px"></figure><p>The full list of decoded strings can be found here. </p><pre><code> &amp;"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders"
 &amp;"SYSTEM\\CurrentControlSet\\Control\\ComputerName\\ComputerName"
 &amp;"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
 &amp;"abcdefghijklmnopqrstuvwxyz0123456789-_"
 &amp;"/Create /SC MINUTE /MO 1 /TN "
 &amp;"/plays/chapter/index.php"
 &amp;"GetNativeSystemInfo"
 &amp;"cred.dll|clip.dll|"
 "77[.]91[.]124[.]207"
 "Panda Security"
 "AVAST Software"
 "Kaspersky Lab"
 "ProgramData\\"
 "ComputerName"
 "CurrentBuild"
 "kernel32.dll"
 "Bitdefender"
 "Doctor Web"
 "https://"
 "Plugins/"
 "SCHTASKS"
 "http://"
 " /TR \""
 "Startup"
 "Comodo"
 "Sophos"
 "Norton"
 "Avira"
 "\" /F"
 L"\\¬="
 "POST"
 "&amp;vs="
 "3.70"
 "&amp;sd="
 "&amp;os="
 "&amp;bi="
 "&amp;ar="
 "&amp;pc="
 "&amp;un="
 "&amp;dm="
 "&amp;av="
 "&amp;lv="
 "&amp;og="
 "ESET"
 "dll"
 "&lt;c&gt;"
 "id="
 "AVG"
 ???</code></pre><p>The first link contains IOCs from an Amadey Bot sample, which aligns closely with the sample analysed in this blog.</p><blockquote>This section was not in the original blog, but was later added when we were informed by another researcher that the malware might not be Redline. <br><br>We then revisited my analysis and determined that the sample was Amadey Bot. <br><br>We were able to determine this mostly by researching (googling) the decrypted strings. <br><br>We thought it would be useful for others to see what this process looked like :) </blockquote><p>Decrypted strings are not just useful for C2 information. They are equally as useful for identifying the malware that you are analyzing.</p><p>Unless you are analyzing the latest and greatest APT malware, your sample has likely been analyzed and publically documented before. You'd be surprised how much you can determine using Google and the "<a href="https://www.googleguide.com/advanced_operators_reference.html?ref=embeeresearch.io">intext</a>" operator. (Essentially it forces all search results to contain your query string, significantly reducing unrelated content)</p><p>From decrypted strings, try to pick something specific. </p><p>For example, the following decrypted string <code>&amp;"cred.dll|clip.dll|"</code> can be used to craft a Google query of <code>intext:clip.dll intext:cred.dll malware</code>. </p><p>This returns 7 results that reference a combination of Redline Stealer and Amadey Bot. </p><p>The first link contains IOCs from an Amadey Bot sample, which aligns closely with the sample analysed in this blog.  <br></p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-177.png" class="kg-image" alt="" loading="lazy" width="2000" height="1157" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-177.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-177.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-177.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-177.png 2115w" sizes="(min-width: 720px) 720px"></figure><p>In the second link - An additional Amadey sample is analysed with the exact same filename as this one. Albeit with a different C2 server. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-178.png" class="kg-image" alt="" loading="lazy" width="972" height="779" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-178.png 600w, https://www.embeeresearch.io/content/images/2023/04/image-178.png 972w" sizes="(min-width: 720px) 720px"></figure><p>At this point - we would have moderate confidence that the sample is Amadey Bot. </p><p>For additional confirmation, we would typically Google this family and see if any TTPs are the same or at least similar. </p><p>We googled <code>Amadey Bot Analysis</code> and discovered this <a href="https://asec.ahnlab.com/en/36634/?ref=embeeresearch.io">blog from AhnLab.com</a>. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-185.png" class="kg-image" alt="" loading="lazy" width="1572" height="1224" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-185.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-185.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-185.png 1572w" sizes="(min-width: 720px) 720px"></figure><p>The Ahnsec blog details an extremely similar installation path and strings. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-179.png" class="kg-image" alt="" loading="lazy" width="1643" height="413" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-179.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-179.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-179.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-179.png 1643w" sizes="(min-width: 720px) 720px"></figure><p>The <a href="https://asec.ahnlab.com/en/36634/?ref=embeeresearch.io">Ahnsec Blog</a> also references a list of AV products that are enumerated by Amadey Bot. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-180.png" class="kg-image" alt="" loading="lazy" width="1624" height="1246" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-180.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-180.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-180.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-180.png 1624w" sizes="(min-width: 720px) 720px"></figure><p>Coincidentally, almost all of those strings were contained in our sample </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-181.png" class="kg-image" alt="" loading="lazy" width="1450" height="979" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-181.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-181.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-181.png 1450w" sizes="(min-width: 720px) 720px"></figure><p>The <a href="https://asec.ahnlab.com/en/36634/?ref=embeeresearch.io">Ahnsec blog</a> also references specific parameters that are sent in POST requests made by Amadey Bot.</p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-182.png" class="kg-image" alt="" loading="lazy" width="1692" height="1340" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-182.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-182.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-182.png 1600w, https://www.embeeresearch.io/content/images/2023/04/image-182.png 1692w" sizes="(min-width: 720px) 720px"></figure><p>Coincidentally, almost all of those same fields (first column) are referenced in our decrypted strings. </p><p>Since POST request parameters are pretty specific - we were confident my sample was actually Amadey bot. </p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-183.png" class="kg-image" alt="" loading="lazy" width="1483" height="1027" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-183.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-183.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-183.png 1483w" sizes="(min-width: 720px) 720px"></figure><p>We also reviewed a <a href="https://blogs.blackberry.com/en/2020/01/threat-spotlight-amadey-bot?ref=embeeresearch.io">second blog from Blackberry</a>. Which confirmed much of the <a href="https://asec.ahnlab.com/en/36634/?ref=embeeresearch.io">same analysis as AhnSec</a>. </p><p>We were now comfortable re-classifying the malware as Amadey bot. </p><p>(We also learned not to blindly follow tags from Malware Repositories)</p><h3 id="conclusion-and-recommendations">Conclusion and Recommendations</h3><p>At this point, we're going to conclude the analysis, as we have successfully located the C2 information and identified the malware family. In a real-life situation, this analysis could serve multiple purposes. </p><ul><li>Decrypted strings can be googled to aid in malware identification. </li><li>Decrypted strings contain commands and process names that can be used for process-based hunting</li><li>Decrypted Strings contain a URL structure that can used to hunt or develop detection rules for proxy logs. </li><li>Decrypted Strings contain an IP that could be used to identify infected machines. </li><li>Decrypted Strings can be used to enhance a Ghidra or IDA database - enhancing the decompiler output and leading to better RE analysis.</li><li>Better automation could be used to make a config extractor - useful for a threat intel/analysis pipeline. (Replacing x32dbg with Dumpulator would be a great way to do this)</li><li>+ lots of fun :D </li></ul><h2 id="virustotal">Virustotal</h2><p>At the time of this analysis (2023/04/10) - There is only <code>1/87</code> detections for the C2 on Virustotal</p><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-105.png" class="kg-image" alt="" loading="lazy" width="1529" height="599" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-105.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-105.png 1000w, https://www.embeeresearch.io/content/images/2023/04/image-105.png 1529w" sizes="(min-width: 720px) 720px"></figure><figure class="kg-card kg-image-card"><img src="https://www.embeeresearch.io/content/images/2023/04/image-106.png" class="kg-image" alt="" loading="lazy" width="2000" height="941" srcset="https://www.embeeresearch.io/content/images/size/w600/2023/04/image-106.png 600w, https://www.embeeresearch.io/content/images/size/w1000/2023/04/image-106.png 1000w, https://www.embeeresearch.io/content/images/size/w1600/2023/04/image-106.png 1600w, https://www.embeeresearch.io/content/images/size/w2400/2023/04/image-106.png 2400w" sizes="(min-width: 720px) 720px"></figure><h2 id="decoded-strings">Decoded Strings</h2><p>A full list of strings obtained using the log function of x32dbg. <br>(Noting that these are in order of length and not location of occurrence.)</p><pre><code> &amp;"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders"
 &amp;"SYSTEM\\CurrentControlSet\\Control\\ComputerName\\ComputerName"
 &amp;"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
 &amp;"abcdefghijklmnopqrstuvwxyz0123456789-_"
 &amp;"/Create /SC MINUTE /MO 1 /TN "
 &amp;"/plays/chapter/index.php"
 &amp;"GetNativeSystemInfo"
 &amp;"cred.dll|clip.dll|"
 "77[.]91[.]124[.]207"
 "Panda Security"
 "AVAST Software"
 "Kaspersky Lab"
 "ProgramData\\"
 "ComputerName"
 "CurrentBuild"
 "kernel32.dll"
 "Bitdefender"
 "Doctor Web"
 "https://"
 "Plugins/"
 "SCHTASKS"
 "http://"
 " /TR \""
 "Startup"
 "Comodo"
 "Sophos"
 "Norton"
 "Avira"
 "\" /F"
 L"\\¬="
 "POST"
 "&amp;vs="
 "3.70"
 "&amp;sd="
 "&amp;os="
 "&amp;bi="
 "&amp;ar="
 "&amp;pc="
 "&amp;un="
 "&amp;dm="
 "&amp;av="
 "&amp;lv="
 "&amp;og="
 "ESET"
 "dll"
 "&lt;c&gt;"
 "id="
 "AVG"
 ???</code></pre><h2 id="useful-links">Useful Links</h2><ul><li>AhnSec Labs -<a href="https://asec.ahnlab.com/en/36634/?ref=embeeresearch.io"> Blog on Amadey Stealer</a></li><li>Blackberry Blog - <a href="https://blogs.blackberry.com/en/2020/01/threat-spotlight-amadey-bot?ref=embeeresearch.io">Amadey Bot Analysis</a></li><li>Mandiant - <a href="https://github.com/mandiant/flare-vm?ref=embeeresearch.io">Repo for Flare VM Install</a></li><li>X32dbg Documentation - <a href="https://help.x64dbg.com/en/latest/introduction/ConditionalBreakpoint.html?ref=embeeresearch.io">Conditional Breakpoints in X32dbg</a></li></ul>

                <div class="post-share-icons">
                    <a href="https://twitter.com/intent/tweet?url=https://www.embeeresearch.io/redline-stealer-basic-static-analysis-and-c2-extraction/&amp;text=Amadey%20Bot%20Malware%20Analysis%20-%20Static%20Analysis%20and%20C2%20Extraction%20With%20Ghidra%20and%20x64Dbg" target="_blank" rel="noopener" class="footer-button share-button" aria-label="Share on Twitter">
                        <div class="social-inner">
                            <svg width="100%" height="100%" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M17.6831 3H20.7366L14.0655 10.6246L21.9135 21H15.7677L10.9548 14.7074L5.44769 21H2.39231L9.52769 12.8446L2 3H8.3L12.6505 8.75169L17.6812 3H17.6831ZM16.6114 19.1723H18.3034L7.38154 4.73169H5.56585L16.6114 19.1723Z" fill="var(--background-color)"/>
</svg>
                        </div>
                    </a>

                    <a href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.embeeresearch.io/redline-stealer-basic-static-analysis-and-c2-extraction/&amp;title=Amadey%20Bot%20Malware%20Analysis%20-%20Static%20Analysis%20and%20C2%20Extraction%20With%20Ghidra%20and%20x64Dbg" target="_blank" rel="noopener" class="footer-button share-button" aria-label="Share on Linkedin">
                        <div class="social-inner">
                            <svg width="100%" height="100%" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M19 3C19.5304 3 20.0391 3.21071 20.4142 3.58579C20.7893 3.96086 21 4.46957 21 5V19C21 19.5304 20.7893 20.0391 20.4142 20.4142C20.0391 20.7893 19.5304 21 19 21H5C4.46957 21 3.96086 20.7893 3.58579 20.4142C3.21071 20.0391 3 19.5304 3 19V5C3 4.46957 3.21071 3.96086 3.58579 3.58579C3.96086 3.21071 4.46957 3 5 3H19ZM18.5 18.5V13.2C18.5 12.3354 18.1565 11.5062 17.5452 10.8948C16.9338 10.2835 16.1046 9.94 15.24 9.94C14.39 9.94 13.4 10.46 12.92 11.24V10.13H10.13V18.5H12.92V13.57C12.92 12.8 13.54 12.17 14.31 12.17C14.6813 12.17 15.0374 12.3175 15.2999 12.5801C15.5625 12.8426 15.71 13.1987 15.71 13.57V18.5H18.5ZM6.88 8.56C7.32556 8.56 7.75288 8.383 8.06794 8.06794C8.383 7.75288 8.56 7.32556 8.56 6.88C8.56 5.95 7.81 5.19 6.88 5.19C6.43178 5.19 6.00193 5.36805 5.68499 5.68499C5.36805 6.00193 5.19 6.43178 5.19 6.88C5.19 7.81 5.95 8.56 6.88 8.56ZM8.27 18.5V10.13H5.5V18.5H8.27Z" fill="var(--background-color)"/>
</svg>
                        </div>
                    </a>
                </div>
    </div>

        <footer>      

            <div class="related-posts wide-container">
                <div class="related-post-wrapper">
                        <a href="/dcrat-manual-de-obfuscation/" class="related-post older-post">
                            <div class="related-post-inner">
                                <div class="related-post-arrow older-post-arrow">
                                    <svg width="100%" height="100%" viewBox="0 0 57 22" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_86_705)">
        <path d="M109.727 11L0.00156617 11" stroke="var(--text-color)" stroke-width="1.5"/>
        <path d="M12.8266 1.375C12.8266 1.375 13.2541 10.725 0.0015558 11" stroke="var(--text-color)" stroke-width="1.5"/>
        <path d="M12.8266 20.625C12.8266 20.625 13.2541 11.275 0.00155664 11" stroke="var(--text-color)" stroke-width="1.5"/>
    </g>
    <defs>
        <clipPath id="clip0_86_705">
            <rect width="57" height="22" fill="var(--text-color)"/>
        </clipPath>
    </defs>
</svg>
                                </div>
                                <div class="related-post-text">
                                    Older Post
                                </div>
                            </div>
                        </a>
                </div>
            
                <div class="related-post-line"></div>

                <div class="related-post-wrapper">
                        <a href="/agenttesla-full-analysis-api-hashing/" class="related-post newer-post">
                            <div class="related-post-inner related-post-inner-margin">
                                <div class="related-post-text">
                                    Newer Post
                                </div>
                                <div class="related-post-arrow newer-post-arrow">
                                    <svg width="100%" height="100%" viewBox="0 0 57 22" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_86_705)">
        <path d="M109.727 11L0.00156617 11" stroke="var(--text-color)" stroke-width="1.5"/>
        <path d="M12.8266 1.375C12.8266 1.375 13.2541 10.725 0.0015558 11" stroke="var(--text-color)" stroke-width="1.5"/>
        <path d="M12.8266 20.625C12.8266 20.625 13.2541 11.275 0.00155664 11" stroke="var(--text-color)" stroke-width="1.5"/>
    </g>
    <defs>
        <clipPath id="clip0_86_705">
            <rect width="57" height="22" fill="var(--text-color)"/>
        </clipPath>
    </defs>
</svg>
                                </div>                           
                            </div>
                        </a>
                </div>               
            </div>
        </footer>
</article>

<script src="https://cdn.jsdelivr.net/npm/lightense-images@1.0.17/dist/lightense.min.js"></script>
<script>
    setLightense();
</script>

<script src="https://www.embeeresearch.io/assets/js/post-content.js?v=b6734bcc9c"></script>

    <reading-progress id="progress-bar" class="reading-progress-bar"></reading-progress>

        <script>
            /*  copyUrlToClipboard("post-share-icons"); */

            window.addEventListener("load", () => {
                const iframe = document.querySelector('#ghost-comments-root iframe');
                if(!iframe) return;
                
                var iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
                var targetHead = iframe.contentDocument.head;
    
                var newLink = document.createElement("link");
                newLink.setAttribute("rel", "stylesheet");
                newLink.setAttribute("type", "text/css");
                newLink.setAttribute("href", "https://www.embeeresearch.io/assets/css/comments.css?v=b6734bcc9c");

                let section = iframeDoc.querySelector('section');
                section.id = "comments-section"

                const rootStyles = getComputedStyle(document.documentElement);

                //initial variables
                iframeDoc.documentElement.style.setProperty('--text-color', rootStyles.getPropertyValue('--text-color'))
                iframeDoc.documentElement.style.setProperty('--text-color-40', rootStyles.getPropertyValue('--text-color-40'))
                iframeDoc.documentElement.style.setProperty('--text-color-80', rootStyles.getPropertyValue('--text-color-80'))
                iframeDoc.documentElement.style.setProperty('--background-color', rootStyles.getPropertyValue('--background-color'))
                iframeDoc.documentElement.style.setProperty('--ease-transition', rootStyles.getPropertyValue('--ease-transition'))
                iframeDoc.documentElement.style.setProperty('--font1', rootStyles.getPropertyValue('--font1'))
                iframeDoc.documentElement.style.setProperty('--font2', rootStyles.getPropertyValue('--font2'))

                targetHead.appendChild(newLink);
                loadFonts("Roboto", "Roboto Mono", iframeDoc);
            });
        </script>
    </main>

                    <link rel="stylesheet" type="text/css" href="https://www.embeeresearch.io/assets/css/footer.css?v=b6734bcc9c" />

<footer class="footer">
    <custom-footer>
        <div class="wide-container section-padding footer-outer">
            <div class="footer-inner">
                <div class="footer-description">
                    <a class="footer-logo" href="https://www.embeeresearch.io">
                            <img class="footer-logo-image" src="https://www.embeeresearch.io/content/images/2024/06/EMBEE-RESEARCH--720-x-720-px-.png" alt="Embee Research">
                    </a>

                    <div class="footer-paragraph-wrapper">
                        <p>Malware Analysis and Threat Intelligence Research</p>
                    </div>

                                <form data-members-form="subscribe" class="subscribe-form">
                                    <div class="subscribe-with-alerts">
                                        <div class="subscribe-wrapper">
                                            <input data-members-email type="email" required="true" placeholder="analyst@yourmail.com" class="subscribe-input"/>
                                            <button class="footer-button footer-submit-button" type="submit" aria-label="Submit">
                                                <div class="footer-arrow-icon">
                                                    <svg width="100%" height="100%" viewBox="0 0 29 12" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_219_3)">
        <path d="M-29.4453 6H29.1931" stroke="var(--text-color)"/>
        <path d="M22.3368 11.25C22.3368 11.25 22.1083 6.15 29.1906 6" stroke="var(--text-color)"/>
        <path d="M22.3368 0.75C22.3368 0.75 22.1083 5.85 29.1906 6" stroke="var(--text-color)"/>
    </g>
    <defs>
        <clipPath id="clip0_219_3">
            <rect width="29" height="12" fill="var(--text-color)"/>
        </clipPath>
    </defs>
</svg>
                                                </div>
                                            </button>
                                        </div>
                                        <div class="form-alerts">
                                            <small class="form-alert loading-alert">Processing your request...</small>
                                            <small class="form-alert success-alert">Please check your inbox and click the link to confirm your subscription.</small>
                                            <small class="form-alert error-alert" data-members-error></small>
                                        </div> 
                                    </div>            
                                </form>
                </div>

                <nav class="footer-navigation">
                    <ul class="footer-normal-links-group footer-links-group">
                        <li class="footer-nav-navigation">
                            <div class="footer-links-label">
                                Navigation
                            </div>
                            <ul class="footer-secondary-links footer-normal-links">

                            </ul>
                        </li>
                    </ul>
                        <ul class="footer-nav">
            <li class="footer-nav-index" data-label="Index">  
                <a class="footer-nav-link hover-underline" href="https://www.embeeresearch.io/index/">Index</a>
            </li>
    </ul>

                </nav>
            </div>
        </div>
    </custom-footer>
</footer>                </div>
            </div>
        </div>  

        <custom-notifications class="global-notifications">
    <div class="notification subscribe-false">
        <svg class="notification-icon" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M9.9987 0.833496C4.9387 0.833496 0.832031 4.94016 0.832031 10.0002C0.832031 15.0602 4.9387 19.1668 9.9987 19.1668C15.0587 19.1668 19.1654 15.0602 19.1654 10.0002C19.1654 4.94016 15.0587 0.833496 9.9987 0.833496ZM10.9154 14.5835H9.08203V12.7502H10.9154V14.5835ZM10.9154 10.9168H9.08203V5.41683H10.9154V10.9168Z" fill="var(--error-color)"/>
</svg>        <small>Your link has expired. Please request a new one.</small>
    </div>
    <div class="notification signup-false">
        <svg class="notification-icon" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M9.9987 0.833496C4.9387 0.833496 0.832031 4.94016 0.832031 10.0002C0.832031 15.0602 4.9387 19.1668 9.9987 19.1668C15.0587 19.1668 19.1654 15.0602 19.1654 10.0002C19.1654 4.94016 15.0587 0.833496 9.9987 0.833496ZM10.9154 14.5835H9.08203V12.7502H10.9154V14.5835ZM10.9154 10.9168H9.08203V5.41683H10.9154V10.9168Z" fill="var(--error-color)"/>
</svg>        <small>Your link has expired. Please request a new one.</small>
    </div>
    <div class="notification signin-false">
        <svg class="notification-icon" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M9.9987 0.833496C4.9387 0.833496 0.832031 4.94016 0.832031 10.0002C0.832031 15.0602 4.9387 19.1668 9.9987 19.1668C15.0587 19.1668 19.1654 15.0602 19.1654 10.0002C19.1654 4.94016 15.0587 0.833496 9.9987 0.833496ZM10.9154 14.5835H9.08203V12.7502H10.9154V14.5835ZM10.9154 10.9168H9.08203V5.41683H10.9154V10.9168Z" fill="var(--error-color)"/>
</svg>        <small>Your link has expired. Please request a new one.</small>
    </div>
    <div class="notification subscribe-true">
        <svg class="notification-icon" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M10 0.375C12.5527 0.375 15.0009 1.38906 16.8059 3.1941C18.6109 4.99913 19.625 7.44729 19.625 10C19.625 12.5527 18.6109 15.0009 16.8059 16.8059C15.0009 18.6109 12.5527 19.625 10 19.625C7.44729 19.625 4.99913 18.6109 3.1941 16.8059C1.38906 15.0009 0.375 12.5527 0.375 10C0.375 7.44729 1.38906 4.99913 3.1941 3.1941C4.99913 1.38906 7.44729 0.375 10 0.375ZM8.801 11.8989L6.66288 9.75937C6.58622 9.68272 6.49523 9.62192 6.39508 9.58044C6.29493 9.53895 6.18759 9.5176 6.07919 9.5176C5.97079 9.5176 5.86345 9.53895 5.7633 9.58044C5.66315 9.62192 5.57215 9.68272 5.4955 9.75937C5.3407 9.91418 5.25373 10.1241 5.25373 10.3431C5.25373 10.562 5.3407 10.7719 5.4955 10.9268L8.218 13.6493C8.29444 13.7263 8.38536 13.7874 8.48554 13.8292C8.58572 13.8709 8.69317 13.8924 8.80169 13.8924C8.91021 13.8924 9.01765 13.8709 9.11783 13.8292C9.21801 13.7874 9.30894 13.7263 9.38538 13.6493L15.0229 8.01038C15.1005 7.93404 15.1623 7.84309 15.2047 7.74275C15.247 7.64242 15.2691 7.53469 15.2696 7.42579C15.2701 7.31689 15.2491 7.20896 15.2076 7.10824C15.1662 7.00751 15.1053 6.91599 15.0283 6.83893C14.9514 6.76188 14.8599 6.70083 14.7592 6.6593C14.6586 6.61777 14.5507 6.59658 14.4418 6.59696C14.3328 6.59734 14.2251 6.61927 14.1247 6.6615C14.0243 6.70373 13.9333 6.76542 13.8569 6.843L8.801 11.8989Z" fill="var(--success-color)"/>
</svg>        <small>Great! You&#x27;ve successfully signed up.</small>
    </div>
    <div class="notification signup-true">
        <svg class="notification-icon" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M10 0.375C12.5527 0.375 15.0009 1.38906 16.8059 3.1941C18.6109 4.99913 19.625 7.44729 19.625 10C19.625 12.5527 18.6109 15.0009 16.8059 16.8059C15.0009 18.6109 12.5527 19.625 10 19.625C7.44729 19.625 4.99913 18.6109 3.1941 16.8059C1.38906 15.0009 0.375 12.5527 0.375 10C0.375 7.44729 1.38906 4.99913 3.1941 3.1941C4.99913 1.38906 7.44729 0.375 10 0.375ZM8.801 11.8989L6.66288 9.75937C6.58622 9.68272 6.49523 9.62192 6.39508 9.58044C6.29493 9.53895 6.18759 9.5176 6.07919 9.5176C5.97079 9.5176 5.86345 9.53895 5.7633 9.58044C5.66315 9.62192 5.57215 9.68272 5.4955 9.75937C5.3407 9.91418 5.25373 10.1241 5.25373 10.3431C5.25373 10.562 5.3407 10.7719 5.4955 10.9268L8.218 13.6493C8.29444 13.7263 8.38536 13.7874 8.48554 13.8292C8.58572 13.8709 8.69317 13.8924 8.80169 13.8924C8.91021 13.8924 9.01765 13.8709 9.11783 13.8292C9.21801 13.7874 9.30894 13.7263 9.38538 13.6493L15.0229 8.01038C15.1005 7.93404 15.1623 7.84309 15.2047 7.74275C15.247 7.64242 15.2691 7.53469 15.2696 7.42579C15.2701 7.31689 15.2491 7.20896 15.2076 7.10824C15.1662 7.00751 15.1053 6.91599 15.0283 6.83893C14.9514 6.76188 14.8599 6.70083 14.7592 6.6593C14.6586 6.61777 14.5507 6.59658 14.4418 6.59696C14.3328 6.59734 14.2251 6.61927 14.1247 6.6615C14.0243 6.70373 13.9333 6.76542 13.8569 6.843L8.801 11.8989Z" fill="var(--success-color)"/>
</svg>        <small>Great! You&#x27;ve successfully signed up.</small>
    </div>
    <div class="notification signin-true">
        <svg class="notification-icon" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M10 0.375C12.5527 0.375 15.0009 1.38906 16.8059 3.1941C18.6109 4.99913 19.625 7.44729 19.625 10C19.625 12.5527 18.6109 15.0009 16.8059 16.8059C15.0009 18.6109 12.5527 19.625 10 19.625C7.44729 19.625 4.99913 18.6109 3.1941 16.8059C1.38906 15.0009 0.375 12.5527 0.375 10C0.375 7.44729 1.38906 4.99913 3.1941 3.1941C4.99913 1.38906 7.44729 0.375 10 0.375ZM8.801 11.8989L6.66288 9.75937C6.58622 9.68272 6.49523 9.62192 6.39508 9.58044C6.29493 9.53895 6.18759 9.5176 6.07919 9.5176C5.97079 9.5176 5.86345 9.53895 5.7633 9.58044C5.66315 9.62192 5.57215 9.68272 5.4955 9.75937C5.3407 9.91418 5.25373 10.1241 5.25373 10.3431C5.25373 10.562 5.3407 10.7719 5.4955 10.9268L8.218 13.6493C8.29444 13.7263 8.38536 13.7874 8.48554 13.8292C8.58572 13.8709 8.69317 13.8924 8.80169 13.8924C8.91021 13.8924 9.01765 13.8709 9.11783 13.8292C9.21801 13.7874 9.30894 13.7263 9.38538 13.6493L15.0229 8.01038C15.1005 7.93404 15.1623 7.84309 15.2047 7.74275C15.247 7.64242 15.2691 7.53469 15.2696 7.42579C15.2701 7.31689 15.2491 7.20896 15.2076 7.10824C15.1662 7.00751 15.1053 6.91599 15.0283 6.83893C14.9514 6.76188 14.8599 6.70083 14.7592 6.6593C14.6586 6.61777 14.5507 6.59658 14.4418 6.59696C14.3328 6.59734 14.2251 6.61927 14.1247 6.6615C14.0243 6.70373 13.9333 6.76542 13.8569 6.843L8.801 11.8989Z" fill="var(--success-color)"/>
</svg>        <small>Welcome back! You&#x27;ve successfully signed in.</small>
    </div>
    <div class="notification stripe-success">
        <svg class="notification-icon" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M10 0.375C12.5527 0.375 15.0009 1.38906 16.8059 3.1941C18.6109 4.99913 19.625 7.44729 19.625 10C19.625 12.5527 18.6109 15.0009 16.8059 16.8059C15.0009 18.6109 12.5527 19.625 10 19.625C7.44729 19.625 4.99913 18.6109 3.1941 16.8059C1.38906 15.0009 0.375 12.5527 0.375 10C0.375 7.44729 1.38906 4.99913 3.1941 3.1941C4.99913 1.38906 7.44729 0.375 10 0.375ZM8.801 11.8989L6.66288 9.75937C6.58622 9.68272 6.49523 9.62192 6.39508 9.58044C6.29493 9.53895 6.18759 9.5176 6.07919 9.5176C5.97079 9.5176 5.86345 9.53895 5.7633 9.58044C5.66315 9.62192 5.57215 9.68272 5.4955 9.75937C5.3407 9.91418 5.25373 10.1241 5.25373 10.3431C5.25373 10.562 5.3407 10.7719 5.4955 10.9268L8.218 13.6493C8.29444 13.7263 8.38536 13.7874 8.48554 13.8292C8.58572 13.8709 8.69317 13.8924 8.80169 13.8924C8.91021 13.8924 9.01765 13.8709 9.11783 13.8292C9.21801 13.7874 9.30894 13.7263 9.38538 13.6493L15.0229 8.01038C15.1005 7.93404 15.1623 7.84309 15.2047 7.74275C15.247 7.64242 15.2691 7.53469 15.2696 7.42579C15.2701 7.31689 15.2491 7.20896 15.2076 7.10824C15.1662 7.00751 15.1053 6.91599 15.0283 6.83893C14.9514 6.76188 14.8599 6.70083 14.7592 6.6593C14.6586 6.61777 14.5507 6.59658 14.4418 6.59696C14.3328 6.59734 14.2251 6.61927 14.1247 6.6615C14.0243 6.70373 13.9333 6.76542 13.8569 6.843L8.801 11.8989Z" fill="var(--success-color)"/>
</svg>        <small>Success! You now have access to additional content.</small>
    </div>
</custom-notifications>


        
    </body>
</html>

