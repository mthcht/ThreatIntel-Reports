<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="robots" content="index, follow">
    <meta name="description" content="Automated malware analysis with Hatching Triage, the high-volume sandbox solution for SOCs, CERTs, SOARs, and MSSPs.">
    <meta name="keywords" content="Hatching, Hatching Triage, Sandbox, Malware Analysis, Automated Malware Analysis">
    <meta name="viewport" content="width=device-width, minimum-scale=1.0, maximum-scale=1.0">
    <meta name="revisit-after" content="3 days">
    <meta name="twitter:card" content="summary">
    <meta name="twitter:site" content="@hatching_io">
    <meta name="twitter:title" content="Hatching - Automated malware analysis solutions">
    <meta property="og:title" content="Hatching - Automated malware analysis solutions">
    <meta property="og:description" content="Automated malware analysis with Hatching Triage, the high-volume sandbox solution for SOCs, CERTs, SOARs, and MSSPs.">
    <meta property="og:url" content="https://www.hatching.io">
    <link rel="manifest" href="/static/manifest.json">
    
      <meta property="og:image" content="https://www.hatching.io/static/images/backgrounds/resized-14.jpg">
      <meta name="twitter:image" content="https://www.hatching.io/static/images/backgrounds/resized-14.jpg">
    

    <link rel="stylesheet" href="https://hatching.io/static/css/index.css?1752751341">
    <link rel="icon" type="image/png" sizes="32x32" href="https://hatching.io/static/images/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="https://hatching.io/static/images/favicon-16x16.png">
    <title>Detecting Sodin</title>
  </head>
  <body>
<nav class="site-menu">
  <ul>
    <li><a href="/">Home</a></li>
    <li><a href="/about/">About</a></li>
    <li><a href="/triage/">Triage</a></li>
    <li><a class="active" href="/blog/">Blog</a></li>
    <li><a  href="/jobs/">Jobs</a></li>
    <li><a href="https://go.recordedfuture.com/enterprise-sandbox-contact-us" target="_blank">Contact</a></li>
  </ul>
</nav>
<header class="site-nav headroom ">
  <div class="logo">
    <a href="/">
      <img width="210px" src="https://hatching.io/static/images/rf-hatching-black.svg" width="164">
    </a>
  </div>
  <div>
    <a href="#" class="toggle-menu">
      Menu
      <span></span>
      <span></span>
      <span></span>
    </a>
  </div>
</header>


<section class="scheme-1 view-context blog-fold blog-article-head" id="fold" data-keep="true">
  <div class="view-context__body">
    <div>
      <div>
        
          <h5>Understanding Ransomware</h5>
        
        <h2>Detecting Sodin</h2>
      </div>
      <ul>
        <li>Share this:</li>
        <li class="social">
          <a href="https://twitter.com/hatching_io" target="_blank">
            <i class="icon-twitter"></i>
          </a>
          <a href="https://www.linkedin.com/company/hatching" target="_blank">
            <i class="icon-linkedin"></i>
          </a>
          <a href="https://www.github.com/hatching" target="_blank">
            <i class="icon-github"></i>
          </a>
        </li>
      </ul>
    </div>
    <div>
      <h1>Blog.</h1>
    </div>
  </div>
  <div class="background-graphic">
    
      <div class="image" style="background-image: url('/static/images/backgrounds/resized-14.jpg');"></div>
    
  </div>
</section>

<article class="view-context blog-article">
  <header class="blog-article-meta">
    <div class="blog-article-general">
      <p><time datetime="2019-12-18T00:00:00Z">2019-12-18</time></p>
        
          <ul class="blog-article-tags">
            <li><p><a href="/blog/#category=triage">triage</a></p><li><p><a href="/blog/#category=ransomware">ransomware</a></p>
          </ul>
        
    </div>
    <div class="blog-article-author">
      <div class="avatar">
        <img src="/static/images/avatars/pete.svg" />
      </div>
      <div>
        <h5>Written by <br />Pete Cowman</h5>
      </div>
    </div>
  </header>
  <section class="blog-article-body">
    
      <p>Sodin - also known as Sodinokibi or REvil - is a successful ransomware family
which often employs advanced evasion techniques to avoid notice until the right
time. It is developed and operated as ransomware-as-a-service (RaaS), meaning
that threat actors can pay to make use of the software to run their campaigns.</p>
<p>Active from early 2019, Sodin has rapidly become a dominant force in ransomware
activity, quickly filling the gap left by the end of Gandcrab being available
as a service. There are many good writeups of the Sodin family available
online, and in this blog post, we are not doing a full analysis of the sample.
Instead, we will breakdown the main ways in which Sodin is detectable and
identifiable within a dynamic sandbox environment, aiming to give examples of
some of the techniques covered in <a href="https://hatching.io/blog/ransomware-part1/">part 1 of this miniseries</a>.</p>
<h3 id="analyzed-samples">Analyzed Samples</h3>
<table>
<thead>
<tr>
<th>SHA256</th>
<th>tria.ge Analysis</th>
</tr>
</thead>
<tbody>
<tr>
<td>e5d23a3bb61b99e227bb8cbfc0e7f1e40fe a34aac4dcb80acc925cfd7e3d18ec</td>
<td><a href="https://tria.ge/reports/191216-pg5st7zccj/">https://tria.ge/reports/191216-pg5st7zccj/</a></td>
</tr>
<tr>
<td>06b323e0b626dc4f051596a39f52c46b35f 88ea6f85a56de0fd76ec73c7f3851</td>
<td><a href="https://tria.ge/reports/191216-4zdx1n374x/">https://tria.ge/reports/191216-4zdx1n374x/</a></td>
</tr>
<tr>
<td>0fa207940ea53e2b54a2b769d8ab033a6b2 c5e08c78bf4d7dade79849960b54d</td>
<td><a href="https://tria.ge/reports/191216-8bfljdyw2s/">https://tria.ge/reports/191216-8bfljdyw2s/</a></td>
</tr>
<tr>
<td>139a7d6656feebe539b2cb94b0729602f62 18f54fb5b7531b58cfe040f180548</td>
<td><a href="https://tria.ge/reports/191216-4rcmytrrka/">https://tria.ge/reports/191216-4rcmytrrka/</a></td>
</tr>
</tbody>
</table>
<h2 id="ransomware-information">Ransomware Information</h2>
<p>Ransomware is unusual among malware as it has no interest in hiding its
infection from the user once it has carried out its task. Sodin is no exception
to this, dropping ransom notes to the directories in which it has encrypted
files and changing the wallpaper to point the victim towards these files.</p>
<h4 id="ransom-note">Ransom Note</h4>
<p>We took a look at ransom notes in <a href="https://hatching.io/blog/ransomware-part1/">the last blog post</a>
in this series so we won&rsquo;t go over the details again here, but in summary, they
contain instructions for the
victim on how to pay the ransom and decrypt their files.</p>
<figure><img src="../../static/images/blog/analyst-notes/ransom_note.png"/><figcaption>
            <h4>Example ransom note created by Sodin infection</h4>
        </figcaption>
</figure>

<p>In the case of the Sodin family, this note contains several URLs which the
victim is meant to visit to receive the instructions and see how much is being
demanded in ransom. No bitcoin address or information regarding the ransom is
available directly in this file, which is unfortunate (extracting these can be
useful for tracking campaigns/threat actors), but these URLs are still worth
extracting for further investigation.</p>
<p>The name of the ransom note is defined by the <code>nname</code> field within the
configuration discussed later in this blog post and will include the file
extension given to all encrypted files. For example, where <code>{&quot;EXT&quot;}</code> is
replaced by the extension <code>{&quot;EXT&quot;}.info.txt</code>.</p>
<h4 id="analyzing-ransom-notes-via-triage">Analyzing Ransom Notes via tria.ge</h4>
<p>The tria.ge sandbox includes detections for many aspects of ransomware but there will always be data we don&rsquo;t include in the final report for one reason or another. However, our kernel driver maintains a record of almost all activity on the VM which can be accessed directly via the Triage API, enabling users to run custom parsers/extractors over the data. In this section, we will do a quick example on fetching and processing this information to extract basic information from a Sodin ransom note - although many other uses are also possible.</p>
<p>Documentation for the API can be found at <a href="https://tria.ge/docs/">https://tria.ge/docs/</a>.</p>
<p>Onemon, the kernel driver used in Triage, records a log of system events for
each task within an analysis (a &rsquo;task&rsquo; is a specific VM instance run during
analysis - for example a sample run on Windows 7 and Windows 10 will have 2
tasks, 1 for each VM). This data can be downloaded in JSON format via the
following command</p>
<p>curl -H &lsquo;Authorization: Bearer &lt;YOUR_API_KEY&gt;&rsquo; <br>
&lsquo;<a href="https://api.tria.ge/v0/samples/%7BsampleID%7D/%7BtaskID%7D/logs/onemon.json'">https://api.tria.ge/v0/samples/{sampleID}/{taskID}/logs/onemon.json'</a></p>
<p>Note that you must pass your API key to access Triage endpoints. This can be
found on your [account page][acount].</p>
<p>The <code>taskID</code> field should simply be replaced by a string like <code>task1</code>
referencing the exact analysis you would like to access - for reference, the
taskID value can be seen in the final part of the URL when viewing a report
online.</p>
<p>As an example, requesting the <code>onemon.json</code> file for the first sample
linked in this blogpost looks as follows:</p>
<pre><code>curl -H 'Authorization: Bearer &lt;YOUR_API_KEY&gt;' \
  'https://api.tria.ge/v0/samples/191216-pg5st7zccj/task1/logs/onemon.json'
</code></pre>
<p>The file received from the API contains 1 JSON object per line, each representing an event within the system. The results below have been prettified for readability.</p>
<pre><code>{
    &quot;kind&quot;: &quot;onemon.File&quot;,
    &quot;event&quot;: {
        &quot;dstpath&quot;: &quot;&quot;,
        &quot;flags&quot;: &quot;NoFileFlags&quot;,
        &quot;id&quot;: 844424930209781,
        &quot;kind&quot;: &quot;CreateModify&quot;,
        &quot;pid&quot;: 1444,
        &quot;srcpath&quot;: &quot;C:\\Users\\Admin\\AppData\\Local\\Temp\\st748h0795z.bmp&quot;,
        &quot;status&quot;: 0,
        &quot;ts&quot;: 36769
    }
}
{
    &quot;kind&quot;: &quot;onemon.Registry&quot;,
    &quot;event&quot;: {
        &quot;kind&quot;: &quot;SetValueKeyStr&quot;,
        &quot;path&quot;: &quot;\\REGISTRY\\USER\\S-1-5-21-1774239815-1814403401-2200974991-1000\\Control Panel\\Desktop\\Wallpaper&quot;,
        &quot;pid&quot;: 1444,
        &quot;status&quot;: 0,
        &quot;ts&quot;: 36769,
        &quot;valued&quot;: null,
        &quot;valuei&quot;: 0,
        &quot;values&quot;: &quot;C:\\Users\\Admin\\AppData\\Local\\Temp\\st748h0795z.bmp&quot;
    }
}
{
    &quot;kind&quot;: &quot;onemon.NetworkFlow&quot;,
    &quot;event&quot;: {
        &quot;dstip&quot;: 134744072,
        &quot;dstport&quot;: 53,
        &quot;pid&quot;: 284,
        &quot;proto&quot;: 17,
        &quot;srcip&quot;: 285214474,
        &quot;srcport&quot;: 60531,
        &quot;ts&quot;: 36894
    }
}
</code></pre>
<p><em>Example events in onemon.json</em></p>
<p>Each line includes a &lsquo;kind&rsquo; tag which defines the structure contained within
the following &rsquo;event&rsquo; tag. There are many different &lsquo;kind&rsquo; definitions, but
likely the main ones which will be of interest are <code>onemon.Registry</code>,
<code>onemon.Process</code>, and <code>onemon.File</code>. We can combine the &lsquo;kind&rsquo; tag
and the &lsquo;status&rsquo; tag within the event structure to form filters using grep,
e.g., to show only events where a write operation took place in the registry,
we could use <code>grep onemon.Registry | grep SetValueKeyStr</code>.</p>
<p>In this example, we are interested in the ransom notes dropped by Sodin during
analysis. By default, Triage dumps the contents of all .txt files created by a
sample so that automated processing can be carried out on the files, e.g., to
extract URLs. These dumps are (currently) stored as FileContents blocks within
the onemon log:</p>
<pre><code>{
    &quot;kind&quot;: &quot;onemon.FileContents&quot;,
    &quot;event&quot;: {
        &quot;buf&quot;: &quot;SABlAGwAbABvACAAZABlAGEAcgAgAGYAcgBpAGUAbgBkACEADQAKAA0ACgBZAG8AdQByACAAZgBpAGwAZQBzACAAYQByAGUAIABlAG4AYwByAHkAcAB0AGUAZAAsACAAYQBuAGQALAAgAGEAcwAgAHIAZQBzAHUAbAB0ACAAeQBvAHUAIABjAGEAbgAnAHQAIAB1AHMAZQAgAGkAdAAuACAAWQBvAHUAIABtAHUAcwB0ACAAdgBpAHMAaQB0ACAAbwB1AHIAIABwAGEAZwBlACAAdABvACAAZwBlAHQAIABpAG4AcwB0AHIAdQBjAHQAaQBvAG4AcwAgAGEAYgBvAHUAdAAgAGQAZQBjAHIAeQBwAHQAaQBvAG4AIABwAHIAbwBjAGUAcwBzAC4ADQAKAEEAbABsACAAZQBuAGMAcgB5AHAAdABlAGQAIABmAGkAbABlAHMAIABoAGEAdgBlACAAZwBvAHQAIAA0ADMAcwA0ADAAaQA3ADEAbAAgAGUAeAB0AGUAbgBzAGkAbwBuAC4ADQAKAA0ACgBJAG4AcwB0AHIAdQBjAHQAaQBvAG4AcwAgAGkAbgB0AG8AIAB0AGgAZQAgAFQATwBSACAAbgBlAHQAdwBvAHIAawANAAoALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAA0ACgBJAG4AcwB0AGEAbABsACAAVABPAFIAIABiAHIAbwB3AHMAZQByACAAZgByAG8AbQAgAGgAdAB0AHAAcwA6AC8ALwB0AG8AcgBwAHIAbwBqAGUAYwB0AC4AbwByAGcALwANAAoAVgBpAHMAaQB0ACAAdABoAGUAIABmAG8AbABsAG8AdwBpAG4AZwAgAGwAaQBuAGsAOgAgAGgAdAB0AHAAOgAvAC8AYQBwAGwAZQBiAHoAdQA0ADcAdwBnAGEAegBhAHAAZABxAGsAcwA2AHYAcgBjAHYANgB6AGMAbgBqAHAAcABrAGIAeABiAHIANgB3AGsAZQB0AGYANQA2AG4AZgA2AGEAcQAyAG4AbQB5AG8AeQBkAC4AbwBuAGkAbwBuAC8AQgA0AEQAMQBDADcAQQAxAEIAMAAwAEQANgBEAEYARgANAAoADQAKAEkAbgBzAHQAcgB1AGMAdABpAG8AbgBzACAAaQBuAHQAbwAgAFcAVwBXACAAKABUAGgAZQAgAGYAbwBsAGwAbwB3AGkAbgBnACAAbABpAG4AawAgAGMAYQBuACAAbgBvAHQAIABiAGUAIABpAG4AIAB3AG8AcgBrACAAcwB0AGEAdABlACwAIABpAGYAIAB0AHIAdQBlACwAIAB1AHMAZQAgAFQATwBSACAAYQBiAG8AdgBlACkAOgANAAoALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAA0ACgBWAGkAcwBpAHQAIAB0AGgAZQAgAGYAbwBsAGwAbwB3AGkAbgBnACAAbABpAG4AawA6ACAAaAB0AHQAcAA6AC8ALwBkAGUAYwByAHkAcAB0AG8AcgAuAHQAbwBwAC8AQgA0AEQAMQBDADcAQQAxAEIAMAAwAEQANgBEAEYARgANAAoADQAKAFAAYQBnAGUAIAB3AGkAbABsACAAYQBzAGsAIAB5AG8AdQAgAGYAbwByACAAdABoAGUAIABrAGUAeQAsACAAaABlAHIAZQAgAGkAdAAgAGkAcwA6AA0ACgB3ADkAQQB1AHQAeQB1ADcAOQAxAGcARABjAGcAdgBKAGEAOAA4AGIAWgBFAE0AZwAwAHQAWQBRAFgANABzAEkAYgBVAGYAYwBIAGsARwBRAFUATQBlAFcARgBsAEsANgBOADkAVgBQAC8AUABnAG0ASQBwAEUAMwBZAHgAUgBNAA0ACgBvAGgAegBsAHUAbgBDADEAagBIAFAARgBCAE8AZABHADgAUgBRAEgANQBNAEYAZQBTAHAAYQBZAEoAYgBmAGYANwBkAG0AcgBwADAAUwBhAC8AQQBNAHgAcwAzAFoANQA4AEEAdABmAFQAeAB4AHQAcABlAEEAUwBFAFgASgBhAA0ACgBZAFMAdQB0AGUAQwBjADAAYwByAHIAWgBNAFYAUgByAGwAYQA5AHIASABkAHUAegBzAEEALwBIAHgAYgA5AFoARAAxADUAegBMAFMAawBHAFoAbwBEAEgAMQBUADkAYgBjAFkAaABsAEQATgA0AGMAWAA2AGIATABKAHMARgBsAA0ACgBFAHUAYQBwADYAWABXAFcASQBRAE0ATgBJAFgAeQBTAFkAbgBHAC8ATQBVAHkAbAB5AEYAUABrAHEALwBMAGEAMgBCAEEAdwBtAGQAcQBMAHMAbQBYAFYAbgB0AGcALwByAFIAdgBmAFcARQBXAGoAMgBXAGsAYgBGAEgASwBRAA0ACgBkAFgARwBpADMAZgBrAHAAcgBVAGEATQBoADYAQwA1AGsAaQB5AEwAUwA4AEwAcgA0AHUAWQAzAHAAeQBtAGMAUgBsAFAARAA0AEoAcwA0ADUAZgA4ADgAcQA0AFgAWABLAG8AWQBkAFgANABRAGkARgB2ADIARgB1ADQAcABGAA0ACgAwAEcAaQBRAEIAeQBzAGwAQwBBAHcAdwA1ADcAVwBZAEwAWABGADgAeABEAFQAcAArAGMARwBVAFUASQBNAGkASwBWAGMAVQBEAFgAagAzADUAQgBnAFoARQBXAG8AMgBWAHcAaQBpADkATABzAHQAVABiAEkAMABEAGEARABMAA0ACgA4AEgAcABBAFoANQByAGkAcgB0AFYAOABHAHkAUQBzAFMAdwBqAGcAMgBxAHQAWgArAEYAdQBFADgAQQBNADUAWQBRADYAbwB3AEMAMgB2AEMARwBLAHEASwBHAC8AQwA1ADgAMgBnAGwAMwBkAEIASAB0AGYAUAAvADYAZwB2AA0ACgBZAFkAYgA1AE4ASwBMAG4AagBZADIAaABpADYATgA4AEsAMwBIAEoAbgBXAEkAcQBqADcAYgA3AFQAOABkAFcARwBJAE8AbQBrADEAcQBuAG0ANwBCAGwATAB6AFIAdQBtAE0AawB6AFgAdgAzAFEAVABiAHQATgBIADEAQwAwAA0ACgA1ADgAZwA2AEoALwBiAHUANgBaAG4AbABFAG4AcgB1ADYAVgBDAEoARQAvAGQASQB6ADYAUwBCAHgAVQA5ADcAdQB6AHgAdgBsAFMALwBoAHUAaQBlADIAZABEAEsAMQBKAFAAcAB6AFMAaABCAFcAQQA3AHQAegAzAHEAQgB4AA0ACgA1AEEAVABGAFYAUgA1AHUAVwA4AE4AYQAyAGQASgA3AHoASgBlAEoASQB0AE8AUABEAGEAUwBIAHkANgAvAHQAcQB4AGkANQBBAHcARQAzADYAeABvAHMASQBJAE0AaAA0AEEAUgBKAGgAKwBnAGIASQA0AEwAVABjAGQASgA1AA0ACgArADIAQQBtAHQASQBVAGYANQBLADEAUwBXADYAdgBhAHQAcAAyAFMASgBTAEUAUQBxAFUATwBBAGoAaABhAGcAeQBWAGIAMgBNAHgAYQBVADAATQByAEgAcABUAGMAMABhADIAYwBtAEwASgBBAHYARgBlADUAcQBGAG4AWgB2AA0ACgB3AHAAMQBmAGIAdQBGAFQAQwBOAHYARABDAEwAWgBrAE4AWAB4ADcANQA2AGkAcwAvAHEAbgBLAHMAWAA3AFUAYgB6AEkARABGAFoALwB0AHoANgBpADUANABLAGYAcgA3AFIAZABMAGkAawBBAGYAMwBWAG8ASwBmAEUAMQBuAA0ACgA4AEMASAA0AFcATQAzAFIAVgB5ADYAdwAzAHIAVgA2AHgALwB6AFEAUgBmAEkAawAzAHIAVABwAHIAYwBHAGkAcABiAG4AQwBCAEwAeQBWADQAawBUAEEAMQBHADUAYwB0AGEARABwAFMAagA4ADIANQBGAFMAVABRAC8AZwB
        &quot;id&quot;: 844424930209780,
        &quot;pid&quot;: 1444,
        &quot;ts&quot;: 33462
    }
}
</code></pre>
<p><em>Sodin ransom note in onemon.json</em></p>
<p>The <code>onemon.FileContents</code> blocks are linked to standard <code>onemon.File</code>
events where the sample performed a CreateFile operation for a .txt file. These
blocks contain metadata useful for relating the file dumps to their original
file names and paths, the ID value shown above acts as the reference. Note the
<code>&quot;flags&quot;: &quot;DumpContents&quot;</code> field in this event type</p>
<pre><code>{
    &quot;kind&quot;: &quot;onemon.File&quot;,
    &quot;event&quot;: {
        &quot;dstpath&quot;: &quot;&quot;,
        &quot;flags&quot;: &quot;DumpContents&quot;,
        &quot;id&quot;: 844424930209780,
        &quot;kind&quot;: &quot;CreateModify&quot;,
        &quot;pid&quot;: 1444,
        &quot;srcpath&quot;: &quot;C:\\Users\\Public\\Videos\\Sample Videos\\43s40i71l.info.txt&quot;,
        &quot;status&quot;: 0,
        &quot;ts&quot;: 33462
    }
}
</code></pre>
<p>If we are looking for a specific file, we can grep through the json for the
file name and then pick out the specific FileContents block that we were
looking for based on the ID value.</p>
<p>The <code>&quot;buf&quot;</code> section of the FileContents block shown above is a base64-encoded
representation of the data written to the file, extracted by intercepting the
API call for the file write and dumping the buffer contents. In order to
retrieve the original contents, simply decode the value.</p>
<p>At this point the entire contents of the file are available in plaintext for
any further processing desired - extracting contact URLs/email addresses,
bitcoin wallets, personal identifier codes etc.</p>
<p>We have produced a simple Python script which, when passed a Triage analysis ID
and your API key, will perform the process outlined above and dump every .txt
file found in the onemon.json to the current directory. It will generate a
number of <code>.txt</code> files. You can find the script <a href="https://hatching.io/static/other/triage-ransomnote.py">here</a>.
To use it, you&rsquo;ll need the Triage ID,
the task ID of the analysis you want to examine, and your API key for tria.ge.
Usage may look as follows:</p>
<pre><code>python3 triage-ransomnote.py &lt;API-Key&gt; 191216-4rcmytrrka task1
</code></pre>
<h3 id="ransom-portal-overview">Ransom Portal Overview</h3>
<p>The URLs contained within the ransom note lead to a web portal customized to
the victim based on a generated ID value, which is the final part of the
address (see ransom note above). To make it harder for analysts to use
automated tools to gather information, victims must enter some basic
information when accessing their portal - a generated &lsquo;key&rsquo; visible in the
ransom note and the extension used when encrypting files (this can differ based
on the configuration settings).</p>
<figure><img src="../../static/images/blog/analyst-notes/sodin_ransom_portal.png"/><figcaption>
            <h4>Ransom portal landing page</h4>
        </figcaption>
</figure>

<p>After submitting this information, the victim can then access payment details
and other information, including guides on using Bitcoin; a trial decryptor
that can be used on a single file; and even a chat support feature to get
assistance from the malware operators.</p>
<figure><img src="../../static/images/blog/analyst-notes/sodin_ransom_portal_details.png"/><figcaption>
            <h4>Main elements of Sodin ransom portal</h4>
        </figcaption>
</figure>

<figure><img src="../../static/images/blog/analyst-notes/sodin_ransom_portal_trial_decrypt.png"/><figcaption>
            <h4>Main elements of Sodin ransom portal</h4>
        </figcaption>
</figure>

<p>The most useful information on this page is the ransom price and the Bitcoin
address which is to be used for payment - using a framework like Selenium it
would be possible to automate the gathering of these addresses for tracking.</p>
<h3 id="desktop-wallpaper-change">Desktop Wallpaper Change</h3>
<p>To make sure the victim is aware of the infection, Sodin also generates a new
desktop background image and makes it active via the registry.</p>
<p>The image is a bitmap created through the <a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-drawtextw">DrawTextW</a>
function in User32.dll. The text to be written is defined within the malware&rsquo;s
JSON config section (discussed later in this post).</p>
<figure><img src="../../static/images/blog/analyst-notes/wallpaper_drawtext.png"/><figcaption>
            <h4>Sample passes string into DrawTextW to create background image</h4>
        </figcaption>
</figure>

<p>The image is saved to the user&rsquo;s Local AppData directory with a random file
name, and the registry key <code>HKCU\\Control Panel\\Desktop\\Wallpaper</code> is set to
point to the new file.</p>
<figure><img src="../../static/images/blog/analyst-notes/wallpaper_save.png"/>
</figure>

<h3 id="preventing-system-recovery">Preventing System Recovery</h3>
<p>Like many other ransomware families, Sodin attempts to make recovery of the
infected machine more difficult by disabling or removing some Windows features.
It achieves this using common <code>vssadmin</code> and <code>bcdedit</code> commands.</p>
<figure><img src="../../static/images/blog/analyst-notes/system_recovery.png"/>
</figure>

<p>Brief descriptions of these commands are provided below for reference. In a
dynamic analysis environment, these are reasonably clear indicators of
maliciousness, as there are few legitimate reasons for an application to delete
backups or interfere with boot settings.</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>vssadmin Delete Shadows /All /Quiet</td>
<td>Delete system shadow copies</td>
</tr>
<tr>
<td>bcdedit /set {default} recoveryenabled No</td>
<td>Disables Windows Error Recovery on startup</td>
</tr>
<tr>
<td>bcdedit /set {default} bootstatuspolicy ignoreallfailures</td>
<td>Sets system to ignore errors and boot as normal (NB: this is also the default Windows setting)</td>
</tr>
</tbody>
</table>
<h3 id="configuration">Configuration</h3>
<p>To enable threat actors to customize their Sodin campaign, the family includes a configuration file embedded within the executable. This is packaged as a PE section with a distinct name - the 2 variants we have examined for this blogpost used <code>.grrr</code> and <code>.zeacl</code>.</p>
<figure><img src="../../static/images/blog/analyst-notes/objdump_zeacl.png"/>
</figure>

<figure><img src="../../static/images/blog/analyst-notes/objdump_grrr.png"/>
</figure>

<p><em>PE sections from unpacked Sodin samples</em></p>
<p>These sections are a JSON configuration file encrypted using RC4 which contain
a large amount of information about the particular campaign the sample belongs
to</p>
<pre><code>{
    &quot;pk&quot;: &quot;GadtWz2QBTacskL+55Wpo65IkwY28qJOxHoe4Xte81M=&quot;,
    &quot;pid&quot;: &quot;10&quot;,
    &quot;sub&quot;: &quot;7&quot;,
    &quot;dbg&quot;: false,
    &quot;fast&quot;: true,
    &quot;wipe&quot;: true,
    &quot;wht&quot;: {
        &quot;fld&quot;: [&quot;appdata&quot;, &quot;google&quot;, &quot;msocache&quot;, &quot;mozilla&quot;, &quot;program files&quot;, &quot;windows&quot;, &quot;perflogs&quot;, &quot;application data&quot;, &quot;windows.old&quot;, &quot;system volume information&quot;, &quot;program files (x86)&quot;, &quot;$windows.~ws&quot;, &quot;intel&quot;, &quot;$recycle.bin&quot;, &quot;$windows.~bt&quot;, &quot;programdata&quot;, &quot;boot&quot;, &quot;tor browser&quot;],
        &quot;fls&quot;: [&quot;ntuser.dat.log&quot;, &quot;bootsect.bak&quot;, &quot;ntuser.dat&quot;, &quot;iconcache.db&quot;, &quot;ntldr&quot;, &quot;autorun.inf&quot;, &quot;boot.ini&quot;, &quot;bootfont.bin&quot;, &quot;desktop.ini&quot;, &quot;thumbs.db&quot;, &quot;ntuser.ini&quot;],
        &quot;ext&quot;: [&quot;ldf&quot;, &quot;msi&quot;, &quot;nomedia&quot;, &quot;msu&quot;, &quot;wpx&quot;, &quot;ani&quot;, &quot;shs&quot;, &quot;theme&quot;, &quot;386&quot;, &quot;adv&quot;, &quot;icns&quot;, &quot;lnk&quot;, &quot;ico&quot;, &quot;ics&quot;, &quot;rom&quot;, &quot;sys&quot;, &quot;mod&quot;, &quot;cur&quot;, &quot;com&quot;, &quot;scr&quot;, &quot;cpl&quot;, &quot;diagcfg&quot;, &quot;lock&quot;, &quot;diagcab&quot;, &quot;msstyles&quot;, &quot;idx&quot;, &quot;msc&quot;, &quot;icl&quot;, &quot;rtp&quot;, &quot;exe&quot;, &quot;drv&quot;, &quot;hta&quot;, &quot;nls&quot;, &quot;deskthemepack&quot;, &quot;cmd&quot;, &quot;hlp&quot;, &quot;themepack&quot;, &quot;dll&quot;, &quot;mpa&quot;, &quot;msp&quot;, &quot;ps1&quot;, &quot;prf&quot;, &quot;ocx&quot;, &quot;bat&quot;, &quot;diagpkg&quot;, &quot;cab&quot;, &quot;bin&quot;, &quot;spl&quot;, &quot;key&quot;]
    },
    &quot;wfld&quot;: [&quot;backup&quot;],
    &quot;prc&quot;: [&quot;mysql.exe&quot;],
    &quot;dmn&quot;: &quot;lyricalduniya.com;theboardroomafrica.com;chris-anne.com;ownidentity.com;web865.com;[...]&quot;,
    &quot;net&quot;:true,
    &quot;nbody &quot;:&quot;SABlAGwAbABvACAAZABlAGEAcgAgAGYAcgBpAGUAbgBkACEADQAKAA0ACgBZAG8AdQByACAAZgBpAGwAZQBzACAAYQByAGUAIABlAG4AYwByAHkAcAB0AGUAZAAsACAAYQBuAGQALAAgAGEAcwAgAHIAZQBzAHUAbAB0ACAAeQBvAHUAIABjAGEAbgAnAHQAIAB1AHMAZQAgAGkAdAAuACAAWQBvAHUAIABtAHUAcwB0ACAAdgBpAHMAaQB0ACAAbwB1AHIAIABwAGEAZwBlACAAdABvACAAZwBlAHQAIABpAG4AcwB0AHIAdQBjAHQAaQBvAG4AcwAgAGEAYgBvAHUAdAAgAGQAZQBjAHIAeQBwAHQAaQBvAG4AIABwAHIAbwBjAGUAcwBzAC4ADQAKAEEAbABsACAAZQBuAGMAcgB5AHAAdABlAGQAIABmAGkAbABlAHMAIABoAGEAdgBlACAAZwBvAHQAIAB7AEUAWABUAH0AIABlAHgAdABlAG4AcwBpAG8AbgAuAA0ACgANAAoASQBuAHMAdAByAHUAYwB0AGkAbwBuAHMAIABpAG4AdABvACAAdABoAGUAIABUAE8AUgAgAG4AZQB0AHcAbwByAGsADQAKAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQANAAoASQBuAHMAdABhAGwAbAAgAFQATwBSACAAYgByAG8AdwBzAGUAcgAgAGYAcgBvAG0AIABoAHQAdABwAHMAOgAvAC8AdABvAHIAcAByAG8AagBlAGMAdAAuAG8AcgBnAC8ADQAKAFYAaQBzAGkAdAAgAHQAaABlACAAZgBvAGwAbABvAHcAaQBuAGcAIABsAGkAbgBrADoAIABoAHQAdABwADoALwAvAGEAcABsAGUAYgB6AHUANAA3AHcAZwBhAHoAYQBwAGQAcQBrAHMANgB2AHIAYwB2ADYAegBjAG4AagBwAHAAawBiAHgAYgByADYAdwBrAGUAdABmADUANgBuAGYANgBhAHEAMgBuAG0AeQBvAHkAZAAuAG8AbgBpAG8AbgAvAHsAVQBJAEQAfQANAAoADQAKAEkAbgBzAHQAcgB1AGMAdABpAG8AbgBzACAAaQBuAHQAbwAgAFcAVwBXACAAKABUAGgAZQAgAGYAbwBsAGwAbwB3AGkAbgBnACAAbABpAG4AawAgAGMAYQBuACAAbgBvAHQAIABiAGUAIABpAG4AIAB3AG8AcgBrACAAcwB0AGEAdABlACwAIABpAGYAIAB0AHIAdQBlACwAIAB1AHMAZQAgAFQATwBSACAAYQBiAG8AdgBlACkAOgANAAoALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAA0ACgBWAGkAcwBpAHQAIAB0AGgAZQAgAGYAbwBsAGwAbwB3AGkAbgBnACAAbABpAG4AawA6ACAAaAB0AHQAcAA6AC8ALwBkAGUAYwByAHkAcAB0AG8AcgAuAHQAbwBwAC8AewBVAEkARAB9AA0ACgANAAoAUABhAGcAZQAgAHcAaQBsAGwAIABhAHMAawAgAHkAbwB1ACAAZgBvAHIAIAB0AGgAZQAgAGsAZQB5ACwAIABoAGUAcgBlACAAaQB0ACAAaQBzADoADQAKAHsASwBFAFkAfQAAAA==&quot;,
    &quot;nname&quot;: {&quot;EXT&quot;}.info.txt,
    &quot;exp&quot;:false,
    &quot;img&quot;:&quot;WQBvAHUAcgAgAGYAaQBsAGUAcwAgAGEAcgBlACAAZQBuAGMAcgB5AHAAdABlAGQAIQAgAE8AcABlAG4AIAB7AEUAWABUAH0ALgBpAG4AZgBvAC4AdAB4AHQAIQAAAA==&quot;
}
</code></pre>
<p>There are quite a few useful fields in here - these are outlined in the table below.</p>
<table>
<thead>
<tr>
<th>Field Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>pk</td>
<td>Base64-encoded public key used for file encryption</td>
</tr>
<tr>
<td>pid</td>
<td>Only used if <code>net</code> field is also set, sent to C2 servers. Likely related to campaign identifier etc.</td>
</tr>
<tr>
<td>sub</td>
<td>See <code>pid</code></td>
</tr>
<tr>
<td>dbg</td>
<td>Enable/disable debug mode (for the malware author)</td>
</tr>
<tr>
<td>fast</td>
<td>Boolean value which changes how large files are encrypted</td>
</tr>
<tr>
<td>wipe</td>
<td>Boolean. If set, sample will try to erase contents of folders blacklisted in the <code>wfld</code> field</td>
</tr>
<tr>
<td>wht</td>
<td>Defines whitelists for encryption process. Contains 3 sections:</td>
</tr>
<tr>
<td></td>
<td>1. <code>fld</code>: folders to ignore</td>
</tr>
<tr>
<td></td>
<td>2. <code>fls</code>: specific files to ignore</td>
</tr>
<tr>
<td></td>
<td>3. <code>ext</code>: whitelisted file extensions</td>
</tr>
<tr>
<td>wfld</td>
<td>List of folder names. If the <code>wipe</code> field is set to true then the malware will attempt to erase the contents of all folders</td>
</tr>
<tr>
<td>prc</td>
<td>List of process names the malware will try to terminate before carrying out file encryption</td>
</tr>
<tr>
<td>dmn</td>
<td>List of domain names which the malware will attempt to contact to use as C2</td>
</tr>
<tr>
<td>net</td>
<td>Boolean value. Sets whether sample should send host information to C2 servers listed in <code>dmn</code> key</td>
</tr>
<tr>
<td>nbody</td>
<td>Base64-encoded version of the ransom note dropped to the file system after encryption</td>
</tr>
<tr>
<td>nname</td>
<td>Filename of the ransom note</td>
</tr>
<tr>
<td>exp</td>
<td>Boolean value. Defines whether or not the malware will use an exploit to try and escalate privileges on the system</td>
</tr>
<tr>
<td>img</td>
<td>Base64-encoded version of the text shown in the wallpaper background set by the malware.</td>
</tr>
</tbody>
</table>
<p><em>Configuration field details</em></p>
<p>When delivered to a new system Sodin samples are packed using a custom
algorithm, hiding the existence of the specially named resource sections. The
malware uses a PE overwrite approach to its unpacking mechanism - it allocates
heap space using LocalAlloc, writes the unpacker stub to it, and then passes
execution to that area after marking it RWX with VirtualProtect.</p>
<figure><img src="../../static/images/blog/analyst-notes/unpacker_create_stub.png"/>
</figure>

<p><em>Create and call unpacker stub</em></p>
<p>The unpacker stub then writes the new PE to the address space in which the
original file was mapped, clearing the content of the entire region before
writing the new executable and jumping back to the updated Entry Point. We can
now dump the executable and examine the sections, as shown previously.</p>
<p>The configuration itself is still encrypted at this stage, but in its unpacked
form it is possible to analyze the decryption process and recreate it. The
algorithm is RC4 - we can clearly see the SBox creation and swapping operations</p>
<ul>
<li>but some minor changes have been made to prevent easy decryption with
standard RC4 tools.</li>
</ul>
<p>Examining the executable we can see that the key for the decryption is the
first 32 bytes of the resource section.</p>
<figure><img src="../../static/images/blog/analyst-notes/config_decrypt_start.png"/><figcaption>
            <h4>Preparing keylength and ciphertext parameters and passing them to the configuration decryption function</h4>
        </figcaption>
</figure>

<p>With this information and analysis of the decryption function, it was possible
to build a configuration extractor to parse and report details from these
configurations during dynamic analysis of the samples. In Hatching Triage, we
have implemented a system that enables taking process memory dumps when
particular conditions are met during an analysis. Using this, we can obtain the
unpacked executable and run processing on it to include the information in the
analysis report and enable easy identification of particular campaigns or
actors.</p>
<p>The Sodin extractor is not available on Triage yet while testing and
improvements to the memory dumping methodology are implemented, but keep an eye
on our <a href="https://twitter.com/hatching_io">Twitter account</a> for updates when that is released.</p>
<h3 id="file-encryption">File Encryption</h3>
<p>Sodin can encrypt files on local storage or any mapped network shares,
overwriting the original files and renaming them with an extension generated on
a per-infection basis. This process is highly customizable through the embedded
configuration section, allowing for certain files/folders to be whitelisted and
protected from the encryption process. The Sodin executable also accepts a
command-line parameter - by passing the value <code>-nolan</code>, one can disable the
encryption of mapped network shares and limit the effects to only the infected
machine.</p>
<pre><code>&quot;wht&quot;: {
    &quot;fld&quot;: [&quot;appdata&quot;, &quot;google&quot;, &quot;msocache&quot;, &quot;mozilla&quot;, &quot;program files&quot;, &quot;windows&quot;, &quot;perflogs&quot;, &quot;application data&quot;, &quot;windows.old&quot;, &quot;system volume information&quot;, &quot;program files (x86)&quot;, &quot;$windows.~ws&quot;, &quot;intel&quot;, &quot;$recycle.bin&quot;, &quot;$windows.~bt&quot;, &quot;programdata&quot;, &quot;boot&quot;, &quot;tor browser&quot;],
    &quot;fls&quot;: [&quot;ntuser.dat.log&quot;, &quot;bootsect.bak&quot;, &quot;ntuser.dat&quot;, &quot;iconcache.db&quot;, &quot;ntldr&quot;, &quot;autorun.inf&quot;, &quot;boot.ini&quot;, &quot;bootfont.bin&quot;, &quot;desktop.ini&quot;, &quot;thumbs.db&quot;, &quot;ntuser.ini&quot;],
    &quot;ext&quot;: [&quot;ldf&quot;, &quot;msi&quot;, &quot;nomedia&quot;, &quot;msu&quot;, &quot;wpx&quot;, &quot;ani&quot;, &quot;shs&quot;, &quot;theme&quot;, &quot;386&quot;, &quot;adv&quot;, &quot;icns&quot;, &quot;lnk&quot;, &quot;ico&quot;, &quot;ics&quot;, &quot;rom&quot;, &quot;sys&quot;, &quot;mod&quot;, &quot;cur&quot;, &quot;com&quot;, &quot;scr&quot;, &quot;cpl&quot;, &quot;diagcfg&quot;, &quot;lock&quot;, &quot;diagcab&quot;, &quot;msstyles&quot;, &quot;idx&quot;, &quot;msc&quot;, &quot;icl&quot;, &quot;rtp&quot;, &quot;exe&quot;, &quot;drv&quot;, &quot;hta&quot;, &quot;nls&quot;, &quot;deskthemepack&quot;, &quot;cmd&quot;, &quot;hlp&quot;, &quot;themepack&quot;, &quot;dll&quot;, &quot;mpa&quot;, &quot;msp&quot;, &quot;ps1&quot;, &quot;prf&quot;, &quot;ocx&quot;, &quot;bat&quot;, &quot;diagpkg&quot;, &quot;cab&quot;, &quot;bin&quot;, &quot;spl&quot;, &quot;key&quot;]
}
</code></pre>
<p><em>Whitelist configuration section</em></p>
<p>The keys specify whitelists for:</p>
<ul>
<li><code>fld</code> - folder names</li>
<li><code>fls</code> - specific file names</li>
<li><code>ext</code> - file extensions</li>
</ul>
<p>The malware iterates through every directory and file on the system, checking
them against these configuration values and queuing them up for encryption if
they are not excluded. Once encrypted, the files are renamed with a new
extension.</p>
<h1 id="encrypted-file-extension">Encrypted File Extension</h1>
<p>Before starting the encryption process, Sodin generates the random file
extension which is applied to every encrypted file. The extension is a string
of letters and numbers from 5 to 10 characters long, which is generated and
saved to the registry along with other information gathered at various stages
(discussed below).</p>
<figure><img src="../../static/images/blog/analyst-notes/saves_file_extension.png"/><figcaption>
            <h4>File extension saved to SOFTWARE\\WOW6432Node\\recfg\\rnd_ext</h4>
        </figcaption>
</figure>

<p>The extension itself is tricky to accurately identify as Sodin-related due to the generic nature of it, but the registry path is relatively specific and is readily detectable in a sandbox.</p>
<h1 id="other-registry-changes">Other Registry Changes</h1>
<p>As well as the file extension, Sodin saves a few other bits of data to the <code>Software\\Wow6432Node\\recfg registry key</code>.</p>
<figure><img src="../../static/images/blog/analyst-notes/recfg_registry_changes.png"/><figcaption>
            <h4>Values within the recfg registry key</h4>
        </figcaption>
</figure>

<p>None of the values assigned to these keys are static, but all of the key names are common across Sodin samples. We won&rsquo;t go into the details of these here, but the image above gives a basic outline of the contents.</p>
<p>In a dynamic environment, this sort of registry structure is ideal for identifying a family.</p>
<figure><img src="../../static/images/blog/analyst-notes/registry_stat_key.png"/><figcaption>
            <h4>Tria.ge signature output for registry keys</h4>
        </figcaption>
</figure>

<h2 id="conclusion">Conclusion</h2>
<p>Sodin is a complex family with far more functionality than we have covered here, but this has outlined the main indicators which are useful for identifying samples within a dynamic environment like Triage. References to a number of samples used as source material for this post can be found in the header at the top of the page.</p>
<p>We&rsquo;ll be continuing to expand coverage over the coming weeks for ransomware families with ransom note and configuration extractors. In the next post in this mini-series we&rsquo;ll cover another family which poses some different challenges to analysis and present ways to solve them.</p>
<p>Until next time, Happy Holidays!</p>

    
  </section>
</article>


<section class="view-context blog-recommendations">
  <article class="view-context__body">
    <h2>You may also like:</h2>
    
    <ul>
      
        <li>
          <h3>Configuration Extractor Improvements</h3>
          <br>
          <a class="button button-variant-3" href="https://hatching.io/blog/tt-2020-11-12/">Read</a>
        </li>
      
        <li>
          <h3>Updates for ZLoader, Netwalker, QNodeService and WSHRAT</h3>
          <br>
          <a class="button button-variant-3" href="https://hatching.io/blog/tt-2020-10-15/">Read</a>
        </li>
      
        <li>
          <h3>Ep. 169: Triage Thursday</h3>
          <br>
          <a class="button button-variant-3" href="https://hatching.io/blog/tt-2025-03-13/">Read</a>
        </li>
      
        <li>
          <h3>Triage for Linux</h3>
          <br>
          <a class="button button-variant-3" href="https://hatching.io/blog/triage-for-linux/">Read</a>
        </li>
      
    </ul>
  </article>
</section>
    <footer class="scheme-4 view-context footer" id="contact">
      <article class="view-context__body">
        <h2>Want to know more?<br />Get in touch!</h2>
        <a class="button button-variant-1" href="https://go.recordedfuture.com/enterprise-sandbox-contact-us" i>Contact us</a>
        <ul>
          <li>
            <ul>
              <li class="logo"><img src="https://hatching.io/static/images/rf-hatching-white.svg" alt="hatching"/></li>
              <li class="social">
                <a href="https://twitter.com/hatching_io" target="_blank">
                  <i class="icon-twitter"></i>
                </a>
                <a href="https://www.linkedin.com/company/hatching" target="_blank">
                  <i class="icon-linkedin"></i>
                </a>
                <a href="https://www.github.com/hatching" target="_blank">
                  <i class="icon-github"></i>
                </a>
              </li>
            </ul>
          </li>
          <li>
            Hatching International B.V.<br />
            The Netherlands<br/>
            <br />
            Email us: <a href="/cdn-cgi/l/email-protection#234a4d454c634b4257404b4a4d440d4a4c"><span class="__cf_email__" data-cfemail="93fafdf5fcd3fbf2e7f0fbfafdf4bdfafc">[email&#160;protected]</span></a>
            <br />
            <br />
            <a href="https://www.recordedfuture.com/terms-of-use" target="_blank">Terms of Use</a>
            <br />
            <a target="_blank" href="http://www.recordedfuture.com/privacy-policy/">Privacy Policy</a>
          </li>
          <li>
            IBAN: NL52 INGB 0006 9672 73<br />
            BIC: INGBNL2A<br />
            ING Groep N.V.<br />
            Amsterdam-Zuidoost<br />
            <br />
            REG: 64146707<br />
            VAT: NL855541891B01
          </li>
        </ul>
      </article>
      <div class="form hidden">
        <div class="form-logo">
          <img src="https://hatching.io/static/images/rf-hatching-white.svg" alt="Hatching"/>
        </div>
        <a href="#" class="form-close" title="Close (or press esc)"></a>

        <div class="container">
          <h1>Contact us</h1>
          <h3>Feel free to inquire or request about our services.</h3>
          <form>
            <fieldset>
              <div class="field">
                <div class="input is-required">
                  <input id="form-name" name="name" placeholder="Name" />
                </div>
              </div>
              <div class="field">
                <div class="input is-required">
                  <input id="form-email" name="email" placeholder="Email" />
                </div>
              </div>
              <div class="field">
                <div class="input">
                  <input id="form-phone" name="phone" placeholder="Phone number" />
                </div>
              </div>
              <div class="field">
                <div class="input">
                  <input id="form-company" name="company" placeholder="Company" />
                </div>
              </div>
            </fieldset>
            <fieldset>
              <div class="input required">
                <textarea id="form-message" name="message" placeholder="Write a message"></textarea>
              </div>
              <div class="button-group">
                <button type="reset" class="button button-variant-2 button-transparent">Reset</button>
                <button type="submit" class="button button-variant-1">Send</button>
              </div>
            </fieldset>
          </form>
        </div>

      </div>
    </footer>
    <script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script src="https://hatching.io/static/js/hatching.js?1752751341"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
          if(window.main && window.main instanceof Function) {
            window.main();
          }
          initForm();

          
          
        });
    </script>
  </body>
</html>
