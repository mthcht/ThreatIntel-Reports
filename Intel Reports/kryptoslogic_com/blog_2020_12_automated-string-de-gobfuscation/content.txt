<!doctype html><html lang=en><head><meta charset=utf-8><meta http-equiv=x-ua-compatible content="ie=edge"><title>Automated string de-gobfuscation - Kryptos Logic</title><meta name=viewport content="width=device-width,initial-scale=1"><meta name=title content="Automated string de-gobfuscation"><meta name=description content="Last week the Network Security Research Lab at 360 released a blog post on an obfuscated backdoor written in Go named Blackrota. They claim that the Blackrota backdoor is available for both x86/x86-64 architectures which is no surprise given how capable Golang&rsquo;s cross compilation is.
For the last 4 years we have been using Golang for our internal services, and I can definitely see the allure that Golang has for malware authors:"><meta name=twitter:card content="summary_large_image"><meta name=twitter:site content="@kryptoslogic"><meta name=twitter:title content="Automated string de-gobfuscation"><meta name=twitter:description content="Last week the Network Security Research Lab at 360 released a blog post on an obfuscated backdoor written in Go named Blackrota. They claim that the Blackrota backdoor is available for both x86/x86-64 architectures which is no surprise given how capable Golang&rsquo;s cross compilation is.
For the last 4 years we have been using Golang for our internal services, and I can definitely see the allure that Golang has for malware authors:"><meta property="og:url" content="https://www.kryptoslogic.com/blog/2020/12/automated-string-de-gobfuscation/"><meta property="og:title" content="Automated string de-gobfuscation"><meta property="og:description" content="Last week the Network Security Research Lab at 360 released a blog post on an obfuscated backdoor written in Go named Blackrota. They claim that the Blackrota backdoor is available for both x86/x86-64 architectures which is no surprise given how capable Golang&rsquo;s cross compilation is.
For the last 4 years we have been using Golang for our internal services, and I can definitely see the allure that Golang has for malware authors:"><meta property="og:image" content="https://www.kryptoslogic.com/blog/2020/12/automated-string-de-gobfuscation/images/header_hu87bb6866fb32b963daa9b6458e88b7ba_704212_800x418_fit_box.gif"><meta name=twitter:image content="https://www.kryptoslogic.com/blog/2020/12/automated-string-de-gobfuscation/images/header_hu87bb6866fb32b963daa9b6458e88b7ba_704212_800x418_fit_box.gif"><link rel=icon href=https://www.kryptoslogic.com/favicon.png><link rel=stylesheet href=/css/style.min.80c1a32b0bec38fbdc5370e02ca3f5e64b5f44111ffd26fa3419f2f4f89fe914.css></head><body class=page><div class=wrapper><header class="kl-navbar kl-navbar--fixed kl-navbar-expand-lg"><div class=container><a class=kl-navbar-logo href=https://www.kryptoslogic.com/><img alt="Kryptos Logic" src=https://www.kryptoslogic.com/images/logo.svg></a>
<button class=kl-navbar-toggler type=button data-toggle=collapse data-target=#kl-navbar-dropdown aria-controls=kl-navbar-dropdown aria-expanded=false aria-label=Menu>
<span class=kl-navbar-toggler-icon></span><span class=kl-navbar-toggler-text>Menu</span></button><div class="collapse kl-navbar-collapse" id=kl-navbar-dropdown><ul class="kl-navbar-nav ml-auto"><li class="kl-nav-item kl-nav-item--products dropdown"><a class="kl-nav-link dropdown-toggle" href=# role=button data-toggle=dropdown>Products</a><div class=dropdown-menu><a class=dropdown-item href=/products/telltale/>Telltale</a></div></li><li class="kl-nav-item kl-nav-item--blog"><a class=kl-nav-link href=/blog/>Blog</a></li><li class="kl-nav-item kl-nav-item--jobs"><a class=kl-nav-link href=/jobs/>Jobs</a></li><li class="kl-nav-item kl-nav-item--contact us"><a class=kl-nav-link href=/contact/>Contact Us</a></li></ul></div></div></header><div class=main><div class="container pt-6"><div class="row justify-content-start"><div class=col-lg-9><div class=blog-post><header class=blog-post-header><h2 class=blog-post-title><a href=https://www.kryptoslogic.com/blog/2020/12/automated-string-de-gobfuscation/>Automated string de-gobfuscation</a></h2><span class=blog-post-author>Authored by:
<a target=_blank href=https://twitter.com/2sec4u>Jamie Hankins</a>
on</span>
<time class=blog-post-date datetime="2020-12-02 18:40:00 +0000 UTC">Wednesday, December 2, 2020</time></header><div class=blog-post-content><p><p>Last week the Network Security Research Lab at 360 released a blog post on an <a href=https://blog.netlab.360.com/blackrota-an-obfuscated-backdoor-written-in-go-en/>obfuscated backdoor written in Go</a> named Blackrota. They claim that the Blackrota backdoor is available for both x86/x86-64 architectures which is no surprise given how capable <a href="https://golang.org/doc/install/source#gopath:~:text=%24GOOS%20and%20%24GOARCH,64%2Dbit%2C%20big%2Dendian)%2C%20and%20wasm%20(WebAssembly%2032%2Dbit).">Golang&rsquo;s cross compilation</a> is.</p><p>For the last 4 years we have been using Golang for our internal services, and I can definitely see the allure that Golang has for malware authors:</p><ul><li>Statically compiled binaries by default</li><li>Cross compilation is often as simple as setting two environment variables</li><li>Strong package ecosystem allowing you to pull in code that you need from other sources</li><li>No runtime dependencies</li><li>Esoteric runtime with a non-standard calling convention breaks most decompilation tools forcing reverse engineers to read assembly</li></ul><p>Blackrota uses <a href=https://github.com/unixpickle/gobfuscate>gobfuscate</a> to obfuscate their source code before it gets compiled by the Go toolchain. Gobfuscate presents a number of challenges to reverse engineers but the one I&rsquo;ll be focusing on today is string obfuscation.</p><h2 id=string-obfuscation>String Obfuscation</h2><p>Malware has been using XOR encoded strings for years now, but Blackrota takes this a step further<sup id=fnref:1><a href=#fn:1 class=footnote-ref role=doc-noteref>1</a></sup>. It generates a random XOR key per string and wraps the string in a function that XORs the string at runtime to return the correct one.</p><p>gobfuscate runs before the compilation process to produce an obfuscated version of your code which is then compiled by the Go compiler:</p><p>Before:</p><div class=highlight><pre style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-golang data-lang=golang><span style=color:#f92672>package</span> <span style=color:#a6e22e>main</span>

<span style=color:#f92672>import</span> <span style=color:#e6db74>&#34;fmt&#34;</span>

<span style=color:#66d9ef>func</span> <span style=color:#a6e22e>main</span>() {
	<span style=color:#a6e22e>fmt</span>.<span style=color:#a6e22e>Println</span>(<span style=color:#e6db74>&#34;Hello world!&#34;</span>)
}
</code></pre></div><p>After:</p><div class=highlight><pre style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-golang data-lang=golang><span style=color:#f92672>package</span> <span style=color:#a6e22e>main</span>

<span style=color:#f92672>import</span> <span style=color:#e6db74>&#34;fmt&#34;</span>

<span style=color:#66d9ef>func</span> <span style=color:#a6e22e>main</span>() {
	<span style=color:#a6e22e>fmt</span>.<span style=color:#a6e22e>Println</span>((<span style=color:#66d9ef>func</span>() <span style=color:#66d9ef>string</span> {
		<span style=color:#a6e22e>mask</span> <span style=color:#f92672>:=</span> []byte(<span style=color:#e6db74>&#34;\x21\x0f\xc7\xbb\x81\x86\x39\xac\x48\xa4\xc6\xaf&#34;</span>)
		<span style=color:#a6e22e>maskedStr</span> <span style=color:#f92672>:=</span> []byte(<span style=color:#e6db74>&#34;\x69\x6a\xab\xd7\xee\xa6\x4e\xc3\x3a\xc8\xa2\x8e&#34;</span>)
		<span style=color:#a6e22e>res</span> <span style=color:#f92672>:=</span> make([]<span style=color:#66d9ef>byte</span>, <span style=color:#ae81ff>12</span>)
		<span style=color:#66d9ef>for</span> <span style=color:#a6e22e>i</span>, <span style=color:#a6e22e>m</span> <span style=color:#f92672>:=</span> <span style=color:#66d9ef>range</span> <span style=color:#a6e22e>mask</span> {
			<span style=color:#a6e22e>res</span>[<span style=color:#a6e22e>i</span>] = <span style=color:#a6e22e>m</span> ^ <span style=color:#a6e22e>maskedStr</span>[<span style=color:#a6e22e>i</span>]
		}
		<span style=color:#66d9ef>return</span> string(<span style=color:#a6e22e>res</span>)
	}()))
}
</code></pre></div><p>You can use a tool like <a href="https://gchq.github.io/CyberChef/#recipe=From_Hex('Auto')XOR(%7B'option':'Hex','string':'%5C%5Cx69%5C%5Cx6a%5C%5Cxab%5C%5Cxd7%5C%5Cxee%5C%5Cxa6%5C%5Cx4e%5C%5Cxc3%5C%5Cx3a%5C%5Cxc8%5C%5Cxa2%5C%5Cx8e'%7D,'Standard',false)&input=XHgyMVx4MGZceGM3XHhiYlx4ODFceDg2XHgzOVx4YWNceDQ4XHhhNFx4YzZceGFm">GCHQ&rsquo;s CyberChef</a> to verify that the result of those 2 byte arrays XORed together is: <code>Hello world!</code>.</p><p>While you <em>could</em> go through the effort of manually XORing each string in a binary you&rsquo;re reversing, it&rsquo;ll get tedious very quickly.</p><h2 id=how-do-i-solve-it-at-scale>How do I solve it <em>at scale</em>?</h2><p>So I know that Golang has a very capable cross compiler and that I want to deal with these XORed strings across different architectures, but how?</p><p>Binary Ninja (aka Binja) has a <a href=https://blog.trailofbits.com/2017/01/31/breaking-down-binary-ninjas-low-level-il/>very powerful intermediate language (IL)</a>, which allows us to operate on a representation of a function regardless of the system architecture (assuming there is an architecture loader for it)<sup id=fnref:2><a href=#fn:2 class=footnote-ref role=doc-noteref>2</a></sup>.</p><p>When deciding on an approach here I specifically wanted to use Binary Ninja&rsquo;s IL as a learning exercise. The solution could certainly be implemented using any number of alternative tools (e.g. <a href=https://www.unicorn-engine.org/>Unicorn</a>), however Binja has the benefit of being very easy to use on any of its supported platforms. Another benefit, of course, is that the IL eliminates the need to understand the target architecture at all, which (depending on implementation) may not be the case using something like Unicorn.</p><p>So the solution will need a way of identifying what functions we want to extract the strings from (Candidate Identification) and a way to extract the correct string from Binary Ninja&rsquo;s low level IL.</p><h3 id=candidate-identification>Candidate Identification</h3><p>Luckily for us, the Go compiler doesn&rsquo;t inline this function call so it&rsquo;s seen as an entirely new function:</p><iframe class=BinjaCloudEmbed src=https://cloud.binary.ninja/embed/e8529a82-960f-4b8b-a78c-00322c63b5b1></iframe><p>Assuming the approach I take can avoid the Go runtime functions: <code>_runtime.morestack_noctxt</code> and <code>_runtime.slicebytetostring</code> it should be pretty easy to emulate.</p><p>The solution will need to find functions in the binary which call <code>_runtime.slicebytetostring</code> and make use of an <code>xor</code> instruction.</p><p>In my first attempt you&rsquo;ll see that I&rsquo;m not using the IL for this, but that&rsquo;s trivially solved in the final solution.</p><h2 id=string-extraction---attempt-one>String Extraction - Attempt One</h2><p>My first attempt at writing this didn&rsquo;t go very well&mldr; Binary Ninja implements multiple different ILs at varying levels of readability based on how much lifting, transformation and control flow recovery takes place. You can see examples of <a href=https://cloud.binary.ninja/embed/62f741b1-8ccd-4961-ab40-c72617229f31>LLIL (low level intermediate language)</a>, <a href=https://cloud.binary.ninja/embed/b10dc64a-6970-499e-9984-424bfaf339db>MLIL (medium level intermediate language)</a> and <a href=https://cloud.binary.ninja/embed/d42e940d-6ead-43d7-afd3-5c164bc996b9>HLIL (high level intermediate language)</a> ILs in the corresponding links.</p><p>So I made the assumption that HLIL would be the best choice because there was less text. I also didn&rsquo;t really understand that an IL operation could consist of multiple different IL operations:</p><figure><a href=images/xorhlil.png data-toggle=lightbox data-title="Example of a XOR/assign operation in HLIL"><img src=images/xorhlil.png loading=lazy></a><figcaption><h4>Example of a XOR/assign operation in HLIL</h4></figcaption></figure><p>You can see my <a href=https://gist.github.com/jamie-34254/45cb4687d679c29bf8ce512ae7780cc8>first attempt here</a>. I wish I had read <a href=https://blog.trailofbits.com/2017/01/31/breaking-down-binary-ninjas-low-level-il/>Josh Watson&rsquo;s blog post</a> on Binja&rsquo;s IL before I started working on it as it details some of the non obvious details ð</p><p>I managed to get some results from this approach but it was not consistent and broke very easily.</p><h2 id=string-extraction---attempt-two>String Extraction - Attempt Two</h2><p>I started chatting to <a href=https://twitter.com/psifertex>Jordan Wiens</a> one of the founders of <a href=https://vector35.com/>Vector35</a>, the company who makes Binary Ninja &ndash; and he suggested that I should rewrite it using LLIL and a full blown emulator rather than a state machine.</p><p>At first this was daunting, but I started to play around with it and thanks to some incredibly helpful plugins which I&rsquo;ll detail later, as well as a <a href=https://github.com/joshwatson/emilator>project from Josh Watson</a> which had the foundations of an LLIL emulator, I was able to start making headway.</p><p>Using a <a href=https://gist.github.com/psifertex/6fbc7532f536775194edd26290892ef7#file-count_il-py>helpful snippet from Jordan</a> I was able to work out what LLIL operations I needed to implement and in total there were around 28 of them:</p><table><thead><tr><th>IL operation</th><th>Description</th></tr></thead><tbody><tr><td><code>LLIL_TAILCALL</code></td><td>Call another function without writing a return address to the stack</td></tr><tr><td><code>LLIL_CALL</code></td><td>Call another function and push a return address to the stack</td></tr><tr><td><code>LLIL_RET</code></td><td>Pop a return address from the stack and jump to it</td></tr><tr><td><code>LLIL_PUSH</code></td><td>Push a value onto the stack</td></tr><tr><td><code>LLIL_POP</code></td><td>Pop a value from the stack</td></tr><tr><td><code>LLIL_XOR</code></td><td>XOR 2 values</td></tr><tr><td><code>LLIL_ZX</code></td><td>Zero Extends</td></tr><tr><td><code>LLIL_GOTO</code></td><td>Set the instruction pointer</td></tr><tr><td><code>LLIL_STORE</code></td><td>Write some data to memory</td></tr><tr><td><code>LLIL_READ</code></td><td>Read some data from memory</td></tr><tr><td><code>LLIL_SET_FLAG</code></td><td>Sets a flag</td></tr><tr><td><code>LLIL_FLAG</code></td><td>Reads a flag</td></tr><tr><td><code>LLIL_CMP_NE</code></td><td>Is not equal</td></tr><tr><td><code>LLIL_CMP_E</code></td><td>Is equal</td></tr><tr><td><code>LLIL_CMP_SLE</code></td><td>Signed less than or equal</td></tr><tr><td><code>LLIL_CMP_SGT</code></td><td>Signed greater than</td></tr><tr><td><code>LLIL_CMP_SGE</code></td><td>Signed greater than or equal</td></tr><tr><td><code>LLIL_CMP_UGE</code></td><td>Unsigned greater than or equal</td></tr><tr><td><code>LLIL_CMP_UGT</code></td><td>Unsigned greater than</td></tr><tr><td><code>LLIL_CMP_ULT</code></td><td>Unsigned less than</td></tr><tr><td><code>LLIL_CMP_SLT</code></td><td>Signed less than comparison</td></tr><tr><td><code>LLIL_CMP_ULE</code></td><td>Unsigned less than or equal</td></tr><tr><td><code>LLIL_IF</code></td><td>Check a conditional and set the instruction pointer based on the outcome</td></tr><tr><td><code>LLIL_SET_REG</code></td><td>Set a register value</td></tr><tr><td><code>LLIL_CONST</code></td><td>Get a constant value</td></tr><tr><td><code>LLIL_CONST_PTR</code></td><td>Get a constant value that happens to be a pointer</td></tr><tr><td><code>LLIL_REG</code></td><td>Read a register value</td></tr><tr><td><code>LLIL_SUB</code></td><td>Subtract two values</td></tr><tr><td><code>LLIL_ADD</code></td><td>Add two values</td></tr></tbody></table><p>Alone none of these seem too complex right? But together they allow us to fully implement what is required to decode the XOR obfuscation in less than 500 lines of code. There&rsquo;s a huge amount of heavy lifting that Binary Ninja does under the hood that helps us keep the code as simple as possible, and I&rsquo;m sure I&rsquo;m missing some tricks.</p><p>Once I had something that <em>kinda</em> worked Jordan jumped in and converted it into a functional Binary Ninja plugin and cleaned up some of the code smell that occurs when you&rsquo;re hacking away on a problem.</p><p>While developing the plugin I came across some incredibly useful Binary Ninja plugins which I feel need a mention:</p><h3 id=seninja>SENinja</h3><p><a href=https://github.com/borzacchiello/seninja>SENinja</a> is a symbolic execution engine for Binja, built using the <a href=https://github.com/Z3Prover/z3/wiki>Z3 SMT solver</a>. It implements a LLIL emulator that builds and manipulates Z3 formulae. Although the intentions of SENinja are much more complex then what I was using it for, it was really useful to have something I could compare with (I didn&rsquo;t want to turn on a Linux VM and use a debugger and deal with possible anti debugging tricks).</p><figure><a href=images/seninja.png data-toggle=lightbox data-title="What SENinja looks like while emulating a function"><img src=images/seninja.png loading=lazy></a><figcaption><h4>What SENinja looks like while emulating a function</h4></figcaption></figure><h3 id=bnil-instruction-graph>BNIL Instruction Graph</h3><p><a href=https://github.com/withzombies/bnil-graph>BNIL Instruction Graph</a> allows you to click on a line of IL and generate a graph of the IL operations that make up that line.</p><p><figure><a href=images/llil.png data-toggle=lightbox data-title=LLIL><img src=images/llil.png loading=lazy></a><figcaption><h4>LLIL</h4></figcaption></figure><figure><a href=images/hlil.png data-toggle=lightbox data-title=HLIL><img src=images/hlil.png loading=lazy></a><figcaption><h4>HLIL</h4></figcaption></figure></p><p>The difference in complexity between a line of LLIL and HLIL is surprising. However it makes sense once you understand that HLIL exists to allow higher level control flows to be recovered with the intention of producing a source code representation, typically in an emulator though you don&rsquo;t need this kind of high level control flow data.</p><p>Another powerful feature of BNIL Instruction Graph is the ability to generate specific IL matching templates that are convenient starting points for building IL code:</p><div class=highlight><pre style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-python data-lang=python><span style=color:#66d9ef>def</span> <span style=color:#a6e22e>match_LowLevelIL_10a6df6_0</span>(insn):
    <span style=color:#75715e># ecx = ecx ^ edx</span>
    <span style=color:#66d9ef>if</span> insn<span style=color:#f92672>.</span>operation <span style=color:#f92672>!=</span> LowLevelILOperation<span style=color:#f92672>.</span>LLIL_SET_REG:
        <span style=color:#66d9ef>return</span> <span style=color:#66d9ef>False</span>

    <span style=color:#66d9ef>if</span> insn<span style=color:#f92672>.</span>dest<span style=color:#f92672>.</span>name <span style=color:#f92672>!=</span> <span style=color:#e6db74>&#39;ecx&#39;</span>:
        <span style=color:#66d9ef>return</span> <span style=color:#66d9ef>False</span>

    <span style=color:#75715e># ecx ^ edx</span>
    <span style=color:#66d9ef>if</span> insn<span style=color:#f92672>.</span>src<span style=color:#f92672>.</span>operation <span style=color:#f92672>!=</span> LowLevelILOperation<span style=color:#f92672>.</span>LLIL_XOR:
        <span style=color:#66d9ef>return</span> <span style=color:#66d9ef>False</span>

    <span style=color:#75715e># ecx</span>
    <span style=color:#66d9ef>if</span> insn<span style=color:#f92672>.</span>src<span style=color:#f92672>.</span>left<span style=color:#f92672>.</span>operation <span style=color:#f92672>!=</span> LowLevelILOperation<span style=color:#f92672>.</span>LLIL_REG:
        <span style=color:#66d9ef>return</span> <span style=color:#66d9ef>False</span>

    <span style=color:#66d9ef>if</span> insn<span style=color:#f92672>.</span>src<span style=color:#f92672>.</span>left<span style=color:#f92672>.</span>src<span style=color:#f92672>.</span>name <span style=color:#f92672>!=</span> <span style=color:#e6db74>&#39;ecx&#39;</span>:
        <span style=color:#66d9ef>return</span> <span style=color:#66d9ef>False</span>

    <span style=color:#75715e># edx</span>
    <span style=color:#66d9ef>if</span> insn<span style=color:#f92672>.</span>src<span style=color:#f92672>.</span>right<span style=color:#f92672>.</span>operation <span style=color:#f92672>!=</span> LowLevelILOperation<span style=color:#f92672>.</span>LLIL_REG:
        <span style=color:#66d9ef>return</span> <span style=color:#66d9ef>False</span>

    <span style=color:#66d9ef>if</span> insn<span style=color:#f92672>.</span>src<span style=color:#f92672>.</span>right<span style=color:#f92672>.</span>src<span style=color:#f92672>.</span>name <span style=color:#f92672>!=</span> <span style=color:#e6db74>&#39;edx&#39;</span>:
        <span style=color:#66d9ef>return</span> <span style=color:#66d9ef>False</span>

    <span style=color:#66d9ef>return</span> <span style=color:#66d9ef>True</span>
</code></pre></div><h1 id=can-haz-please>Can haz please?</h1><p>As the usage of Golang by malware authors increases, so will their understanding and capabilities within the Go ecosystem. Right now gobfuscate is the main obfuscator used by actors using Golang, but this won&rsquo;t always be true. As a <a href="https://news.ycombinator.com/item?id=25231309">Hacker News comment puts it</a>: this is fairly weak. Gobfuscator doesn&rsquo;t implement control flow obfuscation, the runtime functions aren&rsquo;t obfuscated and at most gobfuscate serves mostly as an annoyance and a thinly veiled layer of obscurity.</p><figure><a href=images/header.gif data-toggle=lightbox data-title="Solver at work!"><img src=images/header.gif loading=lazy></a><figcaption><h4>Solver at work!</h4></figcaption></figure><p>You can download the Binary Ninja plugin on the <a href=https://docs.binary.ninja/guide/plugins.html#plugin-manager>plugin manager</a> or download the code from the <a href=https://github.com/kryptoslogic/binja_degobfuscate>GitHub repository linked here</a>. Additionally you can find the Blackrota <a href="https://cloud.binary.ninja/bn/78f2d6d5-3942-4342-ae53-b501f69877c7?view=Disassembly&function=135317728&address=135317750">32-bit</a> and <a href="https://cloud.binary.ninja/bn/99702ecb-6656-42e7-aa0e-31035a6d18dc?view=Disassembly&function=4837184&address=4837184">64-bit</a> Binary Ninja databases to look at on Binary Ninja cloud.</p><h3 id=thanks>Thanks:</h3><ul><li>A massive thanks to the people in the Binary Ninja Slack who answered some of my questions while I was getting started.</li><li>Josh Watson, for his <a href=https://github.com/joshwatson/emilator>permissibly licensed emulator</a> that I was able to use to get an idea of what was required to achieve my goal.</li><li>Jordan Wiens, for providing assistance during development, cleaning up messy code, filing a couple of Binja bug reports for me and generally answering questions about Binary Ninja.</li></ul><section class=footnotes role=doc-endnotes><hr><ol><li id=fn:1 role=doc-endnote><p>I&rsquo;m not implying that gobfuscate&rsquo;s string encoding method is particularly impressive; going back to at least 2013 malware such as Zeus has used a unique key per string.&#160;<a href=#fnref:1 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:2 role=doc-endnote><p>Binja <a href=https://faq.binary.ninja/en/what-cpu-architectures-are-supported-g8KfmMrgnM8LxGrCc>supports a bunch</a> of different architectures.&#160;<a href=#fnref:2 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li></ol></section></p></div></div></div><div class=col-lg-3><div class=blog-post-widget><h2>Connect with Kryptos</h2><ul class=blog-social-list><li class=social--email><a href="/cdn-cgi/l/email-protection#0675737676697472466d747f767269756a69616f652865696b" title="Kryptos Logic Support Email" target=_blank><i class="fas fa-envelope"></i></a></li><li class=social--twitter><a href=https://twitter.com/kryptoslogic title="Kryptos Logic on Twitter" target=_blank><i class="fab fa-twitter"></i></a></li><li class=social--linkedin><a href=https://www.linkedin.com/company/kryptos-logic title="Kryptos Logic on Linkedin" target=_blank><i class="fab fa-linkedin"></i></a></li><li class=social--github><a href=https://github.com/kryptoslogic title="Kryptos Logic on GitHub" target=_blank><i class="fab fa-github"></i></a></li><li class=social--github><a href=https://www.kryptoslogic.com/blog/index.xml title="Blog Posts RSS"><i class="fas fa-rss"></i></a></li></ul></div><div class=blog-post-widget><h2>Recent Posts</h2><ul><li><a href=/blog/2022/01/deep-dive-into-trickbots-web-injection/>Deep Dive into Trickbot's Web Injection</a>, 24 Jan, 2022</li><li><a href=/blog/2021/07/adjusting-the-anchor/>Adjusting the Anchor</a>, 15 Jul, 2021</li><li><a href=/blog/2021/07/trickbot-and-zeus/>TrickBot and Zeus</a>, 01 Jul, 2021</li><li><a href=/blog/2021/02/trickbot-masrv-module/>TrickBot masrv Module</a>, 01 Feb, 2021</li><li><a href=/blog/2021/01/faster-poly1305-key-multicollisions/>Faster Poly1305 key multicollisions</a>, 13 Jan, 2021</li></ul></div><div class=blog-post-widget><h2>Categories</h2><ul><li><a href=https://www.kryptoslogic.com/blog/category/malware>malware</a> (14)</li><li><a href=https://www.kryptoslogic.com/blog/category/crypto>crypto</a> (3)</li><li><a href=https://www.kryptoslogic.com/blog/category/linux>linux</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/category/program-analysis>program-analysis</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/category/reverse-engineering>reverse-engineering</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/category/vulnerability>vulnerability</a> (1)</li></ul></div><div class=blog-post-widget><h2>Tags</h2><ul><li><a href=https://www.kryptoslogic.com/blog/tag/emotet>emotet</a> (4)</li><li><a href=https://www.kryptoslogic.com/blog/tag/trickbot>trickbot</a> (3)</li><li><a href=https://www.kryptoslogic.com/blog/tag/wannacry>wannacry</a> (3)</li><li><a href=https://www.kryptoslogic.com/blog/tag/exploit>exploit</a> (2)</li><li><a href=https://www.kryptoslogic.com/blog/tag/anchor>anchor</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/tag/bluekeep>bluekeep</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/tag/coinmining>coinmining</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/tag/cve-2020-0609>cve-2020-0609</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/tag/cve-2020-0610>cve-2020-0610</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/tag/petya>petya</a> (1)</li></ul></div></div></div></div></div></div><div class=footer><div class=container><div class=row><div class=col-12><div class=footer-inner><h3 class=footer-title>Kryptos Logic</h3></div></div></div></div><div class=sub-footer><div class=container><ul class=footer-social-list><li class=social--email><a href="/cdn-cgi/l/email-protection#9cefe9ececf3eee8dcf7eee5ece8f3eff0f3fbf5ffb2fff3f1" title="Kryptos Logic Support Email" target=_blank><i class="fas fa-envelope"></i></a></li><li class=social--twitter><a href=https://twitter.com/kryptoslogic title="Kryptos Logic on Twitter" target=_blank><i class="fab fa-twitter"></i></a></li><li class=social--linkedin><a href=https://www.linkedin.com/company/kryptos-logic title="Kryptos Logic on Linkedin" target=_blank><i class="fab fa-linkedin"></i></a></li><li class=social--github><a href=https://github.com/kryptoslogic title="Kryptos Logic on GitHub" target=_blank><i class="fab fa-github"></i></a></li></ul><ul><li>Â© 2025 Kryptos Logic</li><li><a href=https://www.kryptoslogic.com/blog>Blog</a></li><li><a href=https://www.kryptoslogic.com/contact>Support</a></li><li><a href=https://www.kryptoslogic.com/terms>Terms</a></li><li><a href=https://www.kryptoslogic.com/privacy>Privacy</a></li><li><a href=https://www.kryptoslogic.com/jobs>Jobs</a></li></ul></div></div></div><script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script src=https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin=anonymous></script><script src=https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js integrity="sha256-pTxD+DSzIwmwhOqTFN+DB+nHjO4iAsbgfyFq5K5bcE0=" crossorigin=anonymous></script><script src=https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.bundle.min.js integrity="sha256-fzFFyH01cBVPYzl16KT40wqjhgPtq6FFUB6ckN2+GGw=" crossorigin=anonymous></script><script type=text/javascript src=/js/bundle.min.c8d5dd0eddb1cc4e0507a2b1c83f71c19a0fc6d71d14d7ad9dc9a9c89b5f7ab6.js></script></body></html>