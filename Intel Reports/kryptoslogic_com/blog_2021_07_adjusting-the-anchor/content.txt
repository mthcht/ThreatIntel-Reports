<!doctype html><html lang=en><head><meta charset=utf-8><meta http-equiv=x-ua-compatible content="ie=edge"><title>Adjusting the Anchor - Kryptos Logic</title><meta name=viewport content="width=device-width,initial-scale=1"><meta name=title content="Adjusting the Anchor"><meta name=description content="Overview AnchorDNS is a backdoor used by the TrickBot actors to target selected high value victims. It has been seen delivered by both TrickBot and Bazar1 malware campaigns2. AnchorDNS is particularly difficult to track given that it is deployed only post-infection and that too only after a period of reconnaissance, once the malware operators have established that the target is of special interest.
Following analysis of AnchorDNS samples published in recent reporting23, we have observed that the C2 communications protocol of AnchorDNS has changed."><meta name=twitter:card content="summary_large_image"><meta name=twitter:site content="@kryptoslogic"><meta name=twitter:title content="Adjusting the Anchor"><meta name=twitter:description content="Overview AnchorDNS is a backdoor used by the TrickBot actors to target selected high value victims. It has been seen delivered by both TrickBot and Bazar1 malware campaigns2. AnchorDNS is particularly difficult to track given that it is deployed only post-infection and that too only after a period of reconnaissance, once the malware operators have established that the target is of special interest.
Following analysis of AnchorDNS samples published in recent reporting23, we have observed that the C2 communications protocol of AnchorDNS has changed."><meta property="og:url" content="https://www.kryptoslogic.com/blog/2021/07/adjusting-the-anchor/"><meta property="og:title" content="Adjusting the Anchor"><meta property="og:description" content="Overview AnchorDNS is a backdoor used by the TrickBot actors to target selected high value victims. It has been seen delivered by both TrickBot and Bazar1 malware campaigns2. AnchorDNS is particularly difficult to track given that it is deployed only post-infection and that too only after a period of reconnaissance, once the malware operators have established that the target is of special interest.
Following analysis of AnchorDNS samples published in recent reporting23, we have observed that the C2 communications protocol of AnchorDNS has changed."><meta property="og:image" content="https://www.kryptoslogic.com/blog/2021/07/adjusting-the-anchor/images/header_hua994fdd7b2a840e227979937a05bef9e_131499_800x418_fit_box_2.png"><meta name=twitter:image content="https://www.kryptoslogic.com/blog/2021/07/adjusting-the-anchor/images/header_hua994fdd7b2a840e227979937a05bef9e_131499_800x418_fit_box_2.png"><link rel=icon href=https://www.kryptoslogic.com/favicon.png><link rel=stylesheet href=/css/style.min.80c1a32b0bec38fbdc5370e02ca3f5e64b5f44111ffd26fa3419f2f4f89fe914.css></head><body class=page><div class=wrapper><header class="kl-navbar kl-navbar--fixed kl-navbar-expand-lg"><div class=container><a class=kl-navbar-logo href=https://www.kryptoslogic.com/><img alt="Kryptos Logic" src=https://www.kryptoslogic.com/images/logo.svg></a>
<button class=kl-navbar-toggler type=button data-toggle=collapse data-target=#kl-navbar-dropdown aria-controls=kl-navbar-dropdown aria-expanded=false aria-label=Menu>
<span class=kl-navbar-toggler-icon></span><span class=kl-navbar-toggler-text>Menu</span></button><div class="collapse kl-navbar-collapse" id=kl-navbar-dropdown><ul class="kl-navbar-nav ml-auto"><li class="kl-nav-item kl-nav-item--products dropdown"><a class="kl-nav-link dropdown-toggle" href=# role=button data-toggle=dropdown>Products</a><div class=dropdown-menu><a class=dropdown-item href=/products/telltale/>Telltale</a></div></li><li class="kl-nav-item kl-nav-item--blog"><a class=kl-nav-link href=/blog/>Blog</a></li><li class="kl-nav-item kl-nav-item--jobs"><a class=kl-nav-link href=/jobs/>Jobs</a></li><li class="kl-nav-item kl-nav-item--contact us"><a class=kl-nav-link href=/contact/>Contact Us</a></li></ul></div></div></header><div class=main><div class="container pt-6"><div class="row justify-content-start"><div class=col-lg-9><div class=blog-post><header class=blog-post-header><h2 class=blog-post-title><a href=https://www.kryptoslogic.com/blog/2021/07/adjusting-the-anchor/>Adjusting the Anchor</a></h2><span class=blog-post-author>Authored by:
<a target=_blank href=https://twitter.com/kryptoslogic>Kryptos Logic Vantage Team</a>
on</span>
<time class=blog-post-date datetime="2021-07-15 16:10:00 +0000 UTC">Thursday, July 15, 2021<br>Tags:
<a href=https://www.kryptoslogic.com/blog/tag/anchor>anchor</a></time></header><div class=blog-post-content><p><h1 id=overview>Overview</h1><p>AnchorDNS is a backdoor used by the TrickBot actors to target selected high value victims. It has been seen delivered by both TrickBot and Bazar<sup id=fnref:1><a href=#fn:1 class=footnote-ref role=doc-noteref>1</a></sup> malware campaigns<sup id=fnref:2><a href=#fn:2 class=footnote-ref role=doc-noteref>2</a></sup>. AnchorDNS is particularly difficult to track given that it is deployed only post-infection and that too only after a period of reconnaissance, once the malware operators have established that the target is of special interest.</p><p>Following analysis of AnchorDNS samples published in recent reporting<sup id=fnref:2><a href=#fn:2 class=footnote-ref role=doc-noteref>2</a></sup><sup id=fnref:3><a href=#fn:3 class=footnote-ref role=doc-noteref>3</a></sup>, we have observed that the C2 communications protocol of AnchorDNS has changed. We also see the use of another Anchor component called AnchorAdjuster. The newer variants contain a modification to the structure of the messages sent to the C2, and have added additional encryption routines when creating the DNS queries. Data received from the C2 is now encoded, thereby making the traffic less obvious.</p><p>In this post we analyze the role that AnchorAdjuster plays and outline the changes made to the communication protocol by the recent AnchorDNS samples.</p><h1 id=anchoradjuster>AnchorAdjuster</h1><p>AnchorAdjuster is a tool that is used to modify an AnchorDNS sample with an updated config and the victim&rsquo;s UUID. The tool is executed by an external command and has been seen being run by CobaltStrike<sup id=fnref:2><a href=#fn:2 class=footnote-ref role=doc-noteref>2</a></sup>.</p><p>A valid series of arguments need to be passed to the AnchorAdjuster for it to execute succesfully. If arguments are not passed, the tool outputs a message onto the console detailing the arguments required:</p><pre><code>using:
anchorAdjuster* --source=&lt;source file&gt; --target=&lt;target file&gt; --domain=&lt;domain name&gt; 
    --period=&lt;recurrence interval, minutes, default value 15&gt;-guid
</code></pre><p>Below is a description of the arguments:</p><table class="table table-bordered"><thead><tr><th style=text-align:left>Argument</th><th style=text-align:left>Description</th><th style=text-align:left>Requirements</th></tr></thead><tbody><tr><td style=text-align:left><code>--source</code></td><td style=text-align:left>AnchorDNS sample with a blank config</td><td style=text-align:left>Required</td></tr><tr><td style=text-align:left><code>--target</code></td><td style=text-align:left>Name to save the modified AnchorDNS sample</td><td style=text-align:left>Required</td></tr><tr><td style=text-align:left><code>--domain</code></td><td style=text-align:left>Domain C2s to save as config</td><td style=text-align:left>Required</td></tr><tr><td style=text-align:left><code>--period</code></td><td style=text-align:left>Interval between each cycle of DNS queries; default is 15 minutes</td><td style=text-align:left>Optional</td></tr><tr><td style=text-align:left><code>--lasthope</code></td><td style=text-align:left>Number of communication attempts; default is 100</td><td style=text-align:left>Optional</td></tr><tr><td style=text-align:left><code>-guid</code></td><td style=text-align:left>Flag for initializing the Victim&rsquo;s <code>UUID</code> in the sample</td><td style=text-align:left>Required</td></tr></tbody></table><p>The AnchorAdjuster tool works as follows:</p><p>Firstly, if it finds a 16 byte string of <code>AAAAAAAAAAAAAAAA</code> in the AnchorDNS bot, it rewrites it with a <code>UUID</code> that it generates by calling <code>CoCreateGuid</code>. This creates a <code>UUID</code> unique to the victim machine. The string <code>AAAAAAAAAAAAAAAA</code> acts as a placeholder for the <code>UUID</code> and is typically stored in the <code>.rand</code> section.</p><p>Secondly, if it finds a 66 byte string of all <code>B</code>s, it overwrites this string with XOR encoded C2s. The C2s are the values that were passed to the AnchorAdjuster&rsquo;s <code>--domain</code> argument. The XOR key used is a hardcoded hex value <code>0x23</code>.</p><p>Finally, using the name passed to the <code>--target</code> argument, the tool creates a new AnchorDNS bot with these modifications.</p><p>Below is an example standard output log from the tool after successful execution:</p><pre><code>source file size 347648
guid: 743E900F5861EF468E120559E9D23EF8, shift 0x00053C00(343040)
domain: shift 0x00053A04(342532)
OK
</code></pre><p>This technique reuses an AnchorDNS sample to be able to communicate to new C2s that it provides, without having to re-compile an entirely new AnchorDNS binary. This also helps the threat actors to hide any new C2s created, especially if the AnchorDNS sample were to be discovered by a threat researcher.</p><h1 id=anchordns>AnchorDNS</h1><p>AnchorDNS communicates to its C2 servers using DNS Tunnelling. Using the DNS protocol for command & control benefits AnchorDNS because such requests are often allowed to pass through firewalls. Using this method, AnchorDNS is able to exfiltrate data to its C2s in the form of DNS queries. The data is encoded and made to appear as subdomains. In addition, the C2 can communicate back to the bot by sending information in the form of DNS A records whereby the data is reconstructed by the bot based on AnchorDNS&rsquo;s specific format.</p><h2 id=review-on-how-anchordns-works>Review on how AnchorDNS works</h2><p>To get a better grasp on what new changes have been implemented to this DNS communication, this section will do a quick high-level review on how AnchorDNS works.</p><ol><li>Upon initial execution, AnchorDNS gains persistence on the machine by creating a scheduled task that is set to run every 15 minutes.<ul><li>The frequency of the scheduled task can be modified again by the bot if the C2 sends a command with instructions to do so.</li></ul></li><li>Each run cycle involves a series of commands transmitted as DNS queries between the bot and the C2.<ul><li>Initial beacon message.</li><li>Request from the bot for command to be executed.</li><li>Request from the bot for a payload (if the command requires one).</li><li>Send report on the command&rsquo;s execution.</li></ul></li></ol><h2 id=preparing-the-messages-for-the-c2>Preparing the messages for the C2</h2><p>The name of the bot at the start of the message has changed from <code>anchor_dns</code> to <code>stickseed</code>. This new name is very different from that of the name used in the past variants<sup id=fnref:4><a href=#fn:4 class=footnote-ref role=doc-noteref>4</a></sup>. One possible explanation is that <code>tick</code> in <code>stickseed</code> represents the Windows API <code>GetTickCount</code> and <code>seed</code> for a pseudorandom number generator, the two functions that we see being frequently used in the new variant.</p><p>The <code>GUID</code> created by the Bot is recorded by the C2 to keep track of the different infected machines. The format of the <code>GUID</code> is as follows:<br><code>&lt;Computer_Name>_W&lt;major version>&lt;minor version>&lt;version build number>.&lt;16 bytes UUID></code></p><p>The 16 byte <code>UUID</code> is hardcoded in the <code>.rand</code> section of the AnchorDNS PE file. If there are no 16 bytes in the <code>.rand</code> section or if there is a string <code>AAAAAAAAAAAAAAAA</code> in that section, the bot skips making any DNS queries.</p><p>Example <code>GUID</code>:<br><code>ADMINWIN10_W629200.1BDD88D8278746A68CE4BCF8DCF27B7E</code></p><p>Below is a summary of the messages and the command sent to the C2:</p><table class="table table-bordered"><thead><tr><th style=text-align:center>C2 Command</th><th style=text-align:left>Description</th><th style=text-align:left>Info sent by New Variant</th><th style=text-align:left>Info sent by Previous Variant</th></tr></thead><tbody><tr><td style=text-align:center>0</td><td style=text-align:left>Register Bot</td><td style=text-align:left><code>/stickseed/&lt;GUID>/0/&lt;Windows OS Type>/1001/&lt;Bot IP>/&lt;32 random hex bytes>/&lt;32 random alphanumeric characters>/</code></td><td style=text-align:left><code>/anchor_dns/&lt;GUID>/0/&lt;Windows OS Type>/1001/&lt;Bot IP>/&lt;32 random hex bytes>/&lt;32 random alphanumeric characters>/</code></td></tr><tr><td style=text-align:center>1</td><td style=text-align:left>Request Bot command</td><td style=text-align:left><code>/stickseed/&lt;GUID>/1/&lt;32 random alphanumeric characters>/</code></td><td style=text-align:left><code>/anchor_dns/&lt;GUID>/1/&lt;32 random alphanumeric characters>/</code></td></tr><tr><td style=text-align:center>5</td><td style=text-align:left>Request File</td><td style=text-align:left><code>/stickseed/&lt;GUID>/5/&lt;filename></code></td><td style=text-align:left><code>/anchor_dns/&lt;GUID>/5/&lt;filename></code></td></tr><tr><td style=text-align:center>10</td><td style=text-align:left>Send result of Bot command execution</td><td style=text-align:left><code>/stickseed/&lt;GUID>/10/&lt;Bot Command>/&lt;Bot Command ID>/&lt;Result of Command execution>/</code></td><td style=text-align:left><code>/anchor_dns/&lt;GUID>/10/&lt;Bot Command>/&lt;Bot Command ID>/&lt;Result of Command execution>/</code></td></tr></tbody></table><h2 id=the-dns-queries>The DNS Queries</h2><p>Each message above, made by the AnchorDNS bot, to send to the C2 involves a sequence of 3 types of DNS queries<sup id=fnref:5><a href=#fn:5 class=footnote-ref role=doc-noteref>5</a></sup>. This order is still maintained in the new variants. The table below shows a summary of the sequence of DNS queries made:</p><table class="table table-bordered"><thead><tr><th style=text-align:center>Query Order</th><th style=text-align:left>Info Sent</th><th style=text-align:left>Info Received</th></tr></thead><tbody><tr><td style=text-align:center>0</td><td style=text-align:left>Send info including command</td><td style=text-align:left>Receive IP record from C2</td></tr><tr><td style=text-align:center>1</td><td style=text-align:left>Convert IP to identifier and send to C2</td><td style=text-align:left>Receive IP record from C2</td></tr><tr><td style=text-align:center>2</td><td style=text-align:left>Convert IP to size; send identifier and size to C2</td><td style=text-align:left>Receive data in the form of multiple IP records</td></tr></tbody></table><h3 id=crafting-the-queries>Crafting the Queries</h3><p>The new variants make changes to the way in which the queries are crafted.</p><p><u><strong>Old Variant</strong></u>:</p><p>To better understand the changes made, this section will briefly review how the queries were crafted in the previous variants. Each query would contain information about the query type and a 16 byte UUID. The query type would inform the C2 on what type of message it is receiving and the UUID helps it keep track of the queries. If the crafted query is type 0, the message gets divided into parts. This is to ensure that the length of the query remains under 255 characters. Finally, the queries are XOR&rsquo;ed with the key <code>0xb9</code>. This is the only encoding we see in the previous variants.</p><p>The table below summarizes the queries crafted in the old variants<sup id=fnref:6><a href=#fn:6 class=footnote-ref role=doc-noteref>6</a></sup>:</p><table class="table table-bordered"><thead><tr><th style=text-align:center>Query Order</th><th style=text-align:center>Query Type</th><th style=text-align:left>Old Variant Format</th><th style=text-align:left>Encoding</th></tr></thead><tbody><tr><td style=text-align:center>0</td><td style=text-align:center>0</td><td style=text-align:left><code>0&lt;UUID>&lt;(BYTE)Current Part>&lt;(BYTE)Total Parts>&lt;Divided Message></code></td><td style=text-align:left>xor with <code>0xb9</code></td></tr><tr><td style=text-align:center>1</td><td style=text-align:center>1</td><td style=text-align:left><code>1&lt;UUID>&lt;(DWORD)Identifier></code></td><td style=text-align:left>xor with <code>0xb9</code></td></tr><tr><td style=text-align:center>2</td><td style=text-align:center>2</td><td style=text-align:left><code>2&lt;UUID>&lt;(DWORD)Identifier>&lt;(DWORD)Size></code></td><td style=text-align:left>xor with <code>0xb9</code></td></tr></tbody></table><p><u><strong>New Variant</strong></u>:</p><p>In the new variant, before a query is crafted, the message in each DNS query type is XOR&rsquo;ed with the key <code>United States of America (USA)</code>. After encoding the message, a 16 byte UUID is generated for each query type (like the previous variant, the UUID is for the C2 to keep track of the query) and is further encoded with a custom Base32 algorithm using the custom dictionary <code>dghbcijklmnfqrwxyz23stuopaev4569</code>.</p><p>The bot then calculates if the message needs to be divided into parts for all 3 DNS query types (in the previous variant we see this for only the query type 0).</p><p>Below is a python function that calculate the number of parts a message would get divided into and the size of each part:</p><div class=highlight><pre style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-python data-lang=python><span style=color:#f92672>import</span> random

<span style=color:#66d9ef>def</span> <span style=color:#a6e22e>get_parts</span>(msg_len: int, c2_len: int) <span style=color:#f92672>-&gt;</span> list():
    blocks <span style=color:#f92672>=</span> list()
    foo <span style=color:#f92672>=</span> <span style=color:#ae81ff>5</span> <span style=color:#f92672>*</span> (<span style=color:#ae81ff>0xba</span> <span style=color:#f92672>-</span> <span style=color:#ae81ff>0x1a</span> <span style=color:#f92672>-</span> c2_len <span style=color:#f92672>-</span> <span style=color:#ae81ff>8</span>)
    fee <span style=color:#f92672>=</span> ((foo <span style=color:#f92672>&amp;</span> <span style=color:#ae81ff>7</span>) <span style=color:#f92672>+</span> foo) <span style=color:#f92672>&gt;&gt;</span> <span style=color:#ae81ff>3</span>
    faa <span style=color:#f92672>=</span> fee <span style=color:#f92672>*</span> <span style=color:#ae81ff>0.85</span>
    <span style=color:#66d9ef>if</span> faa <span style=color:#f92672>&gt;</span> (fee <span style=color:#f92672>-</span> <span style=color:#ae81ff>5</span>):
        faa <span style=color:#f92672>=</span> (fee <span style=color:#f92672>-</span> <span style=color:#ae81ff>5</span>) <span style=color:#f92672>*</span> <span style=color:#ae81ff>0.85</span>
    i, count <span style=color:#f92672>=</span> <span style=color:#ae81ff>0</span>, <span style=color:#ae81ff>0</span>
    <span style=color:#66d9ef>while</span> i <span style=color:#f92672>&lt;</span> msg_len:
        block_sz <span style=color:#f92672>=</span> msg_len <span style=color:#f92672>-</span> i
        <span style=color:#66d9ef>if</span> (msg_len <span style=color:#f92672>-</span> i) <span style=color:#f92672>&gt;</span> fee:
            rand <span style=color:#f92672>=</span> random<span style=color:#f92672>.</span>randint(<span style=color:#ae81ff>0</span>,<span style=color:#ae81ff>0x7fff</span>)
            fii <span style=color:#f92672>=</span> fee <span style=color:#f92672>-</span> <span style=color:#ae81ff>5</span>
            <span style=color:#66d9ef>if</span> count:
                fii <span style=color:#f92672>=</span> fee
            block_sz <span style=color:#f92672>=</span> int(((rand <span style=color:#f92672>*</span> (fii <span style=color:#f92672>-</span> faa)) <span style=color:#f92672>/</span> <span style=color:#ae81ff>32767.0</span>) <span style=color:#f92672>+</span> faa)
        i <span style=color:#f92672>+=</span> block_sz
        count <span style=color:#f92672>+=</span> <span style=color:#ae81ff>1</span>
        blocks<span style=color:#f92672>.</span>append(block_sz)
    <span style=color:#66d9ef>return</span> blocks
</code></pre></div><p>In the new variant, the DNS query types are labeled differently (but still follow the same order as the previous):</p><table class="table table-bordered"><thead><tr><th style=text-align:center>Query Order</th><th style=text-align:center>Query Type</th><th style=text-align:left>Message</th></tr></thead><tbody><tr><td style=text-align:center>0</td><td style=text-align:center><code>0x0001</code></td><td style=text-align:left><code>/stickseed/&lt;GUID>/&lt;C2 Command>/&lt;Info if any>/</code></td></tr><tr><td style=text-align:center>1</td><td style=text-align:center><code>0xfffe</code></td><td style=text-align:left><code>&lt;Identifier DWORD></code></td></tr><tr><td style=text-align:center>2</td><td style=text-align:center><code>0xffff</code></td><td style=text-align:left><code>&lt;Identifier DWORD>&lt;Size in DWORD of data received></code></td></tr></tbody></table><p>For each divided message part, additional information is appended. The image below gives an example of a message for DNS query type 0x0001 and how each divided part is crafted:</p><figure><a href=images/queries.jpg data-toggle=lightbox data-title="Message being built for the queries"><img src=images/queries.jpg loading=lazy></a><figcaption><h4>Message being built for the queries</h4></figcaption></figure><p>The resulting data is encoded with a custom Base32 algorithm and the encoded Base32 UUID is appended at the end. So for example, the message parts above would result in the following types of DNS queries being made:</p><pre><code>efkezwpdxpsq3lsdv2mp3u5kl.mppdslkiaohiqmhplaekp.rrzynhijic42cljjandescbf4nim
    .anoopcsmswhzpqeyphgvzre3oqsz.ygndzp3glhsnojidcddddjddddddabb.ygacsziqpmpqcvdkb2zhu2gjzg
        .domain.com

pnuctkdw5ntjcbrnxhcqy2txz3gjzo.cftgod2flrzglesnzlcbfqildx9ntdbqgns
    .nisgziha3eljwgntmtnhnqrdnuwb2cjgfoch.ldddlddddqddddhdpby.ygacsziqpmpqcvdkb2zhu2gjzg
        .domain.com

s2sw3tcn3nc6guihblvwuudfc22wytzdhz.cjyipjnvlqihggnyhn26chizt4jdcksya
    .dzbyb6gxnyvgdgdddygdddydjlqd.ygacsziqpmpqcvdkb2zhu2gjzg.domain.com
</code></pre><h3 id=query-responses>Query Responses</h3><p>The query responses for each DNS query type have been slightly modified. Before the start of making the 3 types of DNS queries, the bot tries to resolve the C2 domain to an IP address. This IP address is used as a check by the bot to confirm if the C2 has received the message. Below is a table on what each response means.</p><table class="table table-bordered"><thead><tr><th style=text-align:center>C2 IP Record Response</th><th style=text-align:left>Description</th></tr></thead><tbody><tr><td style=text-align:center><code>255.255.255.255</code></td><td style=text-align:left>Retry, cannot reach</td></tr><tr><td style=text-align:center>&lt;C2_IP></td><td style=text-align:left>Message received by C2, send next message part of the query type</td></tr><tr><td style=text-align:center><code>239.255.255.255</code></td><td style=text-align:left>Sleep and retry</td></tr><tr><td style=text-align:center>Single IP</td><td style=text-align:left>For query type <code>0xfffe</code>, the IP is the identifier</td></tr><tr><td style=text-align:center>Multiple IPs</td><td style=text-align:left>For query type <code>0xffff</code>, the IPs form as a structure for the Bot to parse to data</td></tr></tbody></table><p>As with the previous version, the DNS query type <code>0xffff</code> responds with multiple IP records. These records form a particular structure (that has been reverse engineered before<sup id=fnref:5><a href=#fn:5 class=footnote-ref role=doc-noteref>5</a></sup><sup id=fnref:6><a href=#fn:6 class=footnote-ref role=doc-noteref>6</a></sup>), whereby the final message is constructed. The change seen is that the resulting data built from the IP records is <code>xor</code> encoded. The key to decode the message is <code>Miguel de Cervantes Saavedra</code>.</p><hr><h1 id=conclusion>Conclusion</h1><p>Despite their simplicity, the changes seen in AnchorDNS are still effective in evading detection. The use of AnchorAdjuster allows the threat actors to modify the AnchorDNS backdoor in-place, providing a stealthy way to add fresh C2s that have been created for new targets. The actors behind AnchorDNS continue to actively develop their toolset, increasing flexibility and raising the barrier for detection.</p><hr><h1 id=iocs>IOCs</h1><div class=overflow-auto-md><table class="table table-bordered"><thead><tr><th style=text-align:center>SHA256</th><th style=text-align:left>Description</th></tr></thead><tbody><tr><td style=text-align:center>cbff159d0b178734248209ae70565d09dddf397ea4e897bf99206ddd74673e6f</td><td style=text-align:left>AnchorDNS 64-bit DLL</td></tr><tr><td style=text-align:center>a8a8c66b155fcf9bfdf34ba0aca98991440c3d34b8a597c3fdebc8da251c9634</td><td style=text-align:left>AnchorDNS 64-bit DLL</td></tr><tr><td style=text-align:center>9fdbd76141ec43b6867f091a2dca503edb2a85e4b98a4500611f5fe484109513</td><td style=text-align:left>AnchorDNS 64-bit DLL</td></tr><tr><td style=text-align:center>ba801f1c2e2c5f5cd961e887cb0776f2d5cee8d17164f29b138a8952dd162165</td><td style=text-align:left>AnchorDNS 64-bit DLL</td></tr><tr><td style=text-align:center>0d6a10df6eeb1dbb88b4d625873ed13daa367e165374a72daa16170af3ee31a0</td><td style=text-align:left>AnchorDNS 64-bit DLL</td></tr><tr><td style=text-align:center>f93b838dc89e7d3d47b1225c5d4a7b706062fd8a0f380b173c099d0570814348</td><td style=text-align:left>AnchorAdjuster 64-bit EXE</td></tr><tr><td style=text-align:center>3ab8a1ee10bd1b720e1c8a8795e78cdc09fec73a6bb91526c0ccd2dc2cfbc28d</td><td style=text-align:left>AnchorAdjuster 64-bit EXE</td></tr><tr><td style=text-align:center>c1ae70683da042792a504847b426a55cdcbca80dca12517f581a4e089a1f8932</td><td style=text-align:left>AnchorAdjuster 64-bit EXE</td></tr></tbody></table></div><p>C2s</p><pre><code>farfaris[.]com
kalarada[.]com
xyskencevli[.]com
sluaknhbsoe[.]com
jetbiokleas[.]com
nyhgloksa[.]com
</code></pre><hr><h1 id=references>References</h1><section class=footnotes role=doc-endnotes><hr><ol><li id=fn:1 role=doc-endnote><p><a href=https://malpedia.caad.fkie.fraunhofer.de/details/win.bazarbackdoor>https://malpedia.caad.fkie.fraunhofer.de/details/win.bazarbackdoor</a>&#160;<a href=#fnref:1 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:2 role=doc-endnote><p><a href=https://thedfirreport.com/2021/03/08/bazar-drops-the-anchor/>https://thedfirreport.com/2021/03/08/bazar-drops-the-anchor/</a>&#160;<a href=#fnref:2 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:3 role=doc-endnote><p><a href=https://twitter.com/bryceabdo/status/1364213428152328192>https://twitter.com/bryceabdo/status/1364213428152328192</a>&#160;<a href=#fnref:3 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:4 role=doc-endnote><p><a href="https://vblocalhost.com/uploads/VB2020-63.pdf#page=26">https://vblocalhost.com/uploads/VB2020-63.pdf#page=26</a>&#160;<a href=#fnref:4 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:5 role=doc-endnote><p><a href=https://hello.global.ntt/en-us/insights/blog/trickbot-variant-communicating-over-dns>https://hello.global.ntt/en-us/insights/blog/trickbot-variant-communicating-over-dns</a>&#160;<a href=#fnref:5 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:6 role=doc-endnote><p><a href=https://www.netscout.com/blog/asert/dropping-anchor>https://www.netscout.com/blog/asert/dropping-anchor</a>&#160;<a href=#fnref:6 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li></ol></section></p></div></div></div><div class=col-lg-3><div class=blog-post-widget><h2>Connect with Kryptos</h2><ul class=blog-social-list><li class=social--email><a href="/cdn-cgi/l/email-protection#4a393f3a3a25383e0a2138333a3e253926252d232964292527" title="Kryptos Logic Support Email" target=_blank><i class="fas fa-envelope"></i></a></li><li class=social--twitter><a href=https://twitter.com/kryptoslogic title="Kryptos Logic on Twitter" target=_blank><i class="fab fa-twitter"></i></a></li><li class=social--linkedin><a href=https://www.linkedin.com/company/kryptos-logic title="Kryptos Logic on Linkedin" target=_blank><i class="fab fa-linkedin"></i></a></li><li class=social--github><a href=https://github.com/kryptoslogic title="Kryptos Logic on GitHub" target=_blank><i class="fab fa-github"></i></a></li><li class=social--github><a href=https://www.kryptoslogic.com/blog/index.xml title="Blog Posts RSS"><i class="fas fa-rss"></i></a></li></ul></div><div class=blog-post-widget><h2>Recent Posts</h2><ul><li><a href=/blog/2022/01/deep-dive-into-trickbots-web-injection/>Deep Dive into Trickbot's Web Injection</a>, 24 Jan, 2022</li><li><a href=/blog/2021/07/adjusting-the-anchor/>Adjusting the Anchor</a>, 15 Jul, 2021</li><li><a href=/blog/2021/07/trickbot-and-zeus/>TrickBot and Zeus</a>, 01 Jul, 2021</li><li><a href=/blog/2021/02/trickbot-masrv-module/>TrickBot masrv Module</a>, 01 Feb, 2021</li><li><a href=/blog/2021/01/faster-poly1305-key-multicollisions/>Faster Poly1305 key multicollisions</a>, 13 Jan, 2021</li></ul></div><div class=blog-post-widget><h2>Categories</h2><ul><li><a href=https://www.kryptoslogic.com/blog/category/malware>malware</a> (14)</li><li><a href=https://www.kryptoslogic.com/blog/category/crypto>crypto</a> (3)</li><li><a href=https://www.kryptoslogic.com/blog/category/linux>linux</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/category/program-analysis>program-analysis</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/category/reverse-engineering>reverse-engineering</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/category/vulnerability>vulnerability</a> (1)</li></ul></div><div class=blog-post-widget><h2>Tags</h2><ul><li><a href=https://www.kryptoslogic.com/blog/tag/emotet>emotet</a> (4)</li><li><a href=https://www.kryptoslogic.com/blog/tag/trickbot>trickbot</a> (3)</li><li><a href=https://www.kryptoslogic.com/blog/tag/wannacry>wannacry</a> (3)</li><li><a href=https://www.kryptoslogic.com/blog/tag/exploit>exploit</a> (2)</li><li><a href=https://www.kryptoslogic.com/blog/tag/anchor>anchor</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/tag/bluekeep>bluekeep</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/tag/coinmining>coinmining</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/tag/cve-2020-0609>cve-2020-0609</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/tag/cve-2020-0610>cve-2020-0610</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/tag/petya>petya</a> (1)</li></ul></div></div></div></div></div></div><div class=footer><div class=container><div class=row><div class=col-12><div class=footer-inner><h3 class=footer-title>Kryptos Logic</h3></div></div></div></div><div class=sub-footer><div class=container><ul class=footer-social-list><li class=social--email><a href="/cdn-cgi/l/email-protection#90e3e5e0e0ffe2e4d0fbe2e9e0e4ffe3fcfff7f9f3bef3fffd" title="Kryptos Logic Support Email" target=_blank><i class="fas fa-envelope"></i></a></li><li class=social--twitter><a href=https://twitter.com/kryptoslogic title="Kryptos Logic on Twitter" target=_blank><i class="fab fa-twitter"></i></a></li><li class=social--linkedin><a href=https://www.linkedin.com/company/kryptos-logic title="Kryptos Logic on Linkedin" target=_blank><i class="fab fa-linkedin"></i></a></li><li class=social--github><a href=https://github.com/kryptoslogic title="Kryptos Logic on GitHub" target=_blank><i class="fab fa-github"></i></a></li></ul><ul><li>Â© 2025 Kryptos Logic</li><li><a href=https://www.kryptoslogic.com/blog>Blog</a></li><li><a href=https://www.kryptoslogic.com/contact>Support</a></li><li><a href=https://www.kryptoslogic.com/terms>Terms</a></li><li><a href=https://www.kryptoslogic.com/privacy>Privacy</a></li><li><a href=https://www.kryptoslogic.com/jobs>Jobs</a></li></ul></div></div></div><script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script src=https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin=anonymous></script><script src=https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js integrity="sha256-pTxD+DSzIwmwhOqTFN+DB+nHjO4iAsbgfyFq5K5bcE0=" crossorigin=anonymous></script><script src=https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.bundle.min.js integrity="sha256-fzFFyH01cBVPYzl16KT40wqjhgPtq6FFUB6ckN2+GGw=" crossorigin=anonymous></script><script type=text/javascript src=/js/bundle.min.c8d5dd0eddb1cc4e0507a2b1c83f71c19a0fc6d71d14d7ad9dc9a9c89b5f7ab6.js></script></body></html>