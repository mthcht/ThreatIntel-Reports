<!DOCTYPE html>
<html lang="en">
<head>

    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />

    <title>Nanocore &amp; CypherIT</title>
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link rel="stylesheet" type="text/css" href="/assets/built/staypuft.css?v=88c8ed21c2" />
    
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
    
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.10/css/all.css" integrity="sha384-+d0P83n9kaQMCwj8F4RJB66tzIwOKmrdb46+porD/OvrJ+37WqIM7UoBtwHO6Nlg" crossorigin="anonymous">

    <link rel="stylesheet" type="text/css" href="/assets/css/prism.css?v=88c8ed21c2" />

    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
    <link rel="canonical" href="https://malwareindepth.com/defeating-nanocore-and-cypherit/" />
    <meta name="referrer" content="no-referrer-when-downgrade" />
    <link rel="amphtml" href="https://malwareindepth.com/defeating-nanocore-and-cypherit/amp/" />
    
    <meta property="og:site_name" content="MalwareInDepth" />
    <meta property="og:type" content="article" />
    <meta property="og:title" content="Nanocore &amp; CypherIT" />
    <meta property="og:description" content="Tools and analysis of the Nanocore malware family as well as the CypherIT crypter. " />
    <meta property="og:url" content="https://malwareindepth.com/defeating-nanocore-and-cypherit/" />
    <meta property="og:image" content="https://malwareindepth.com/content/images/2020/02/Nanocore3Dplot.png" />
    <meta property="article:published_time" content="2020-04-04T00:03:57.000Z" />
    <meta property="article:modified_time" content="2020-04-04T00:05:09.000Z" />
    <meta property="article:tag" content="Nanocore" />
    <meta property="article:tag" content="CypherIT" />
    <meta property="article:tag" content="malware" />
    <meta property="article:tag" content="Golang" />
    <meta property="article:tag" content="python" />
    
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Nanocore &amp; CypherIT" />
    <meta name="twitter:description" content="Tools and analysis of the Nanocore malware family as well as the CypherIT crypter. " />
    <meta name="twitter:url" content="https://malwareindepth.com/defeating-nanocore-and-cypherit/" />
    <meta name="twitter:image" content="https://malwareindepth.com/content/images/2020/02/Nanocore3Dplot.png" />
    <meta name="twitter:label1" content="Written by" />
    <meta name="twitter:data1" content="Myrtus 0x0" />
    <meta name="twitter:label2" content="Filed under" />
    <meta name="twitter:data2" content="Nanocore, CypherIT, malware, Golang, python" />
    <meta name="twitter:site" content="@myrtus0x0" />
    <meta property="og:image:width" content="622" />
    <meta property="og:image:height" content="527" />
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "MalwareInDepth",
        "logo": {
            "@type": "ImageObject",
            "url": "https://malwareindepth.com/favicon.ico",
            "width": 60,
            "height": 60
        }
    },
    "author": {
        "@type": "Person",
        "name": "Myrtus 0x0",
        "image": {
            "@type": "ImageObject",
            "url": "https://malwareindepth.com/content/images/2019/05/Lectotipo-de-Myrtus-communis-var-tarentina-L-Herb-Clifford-184-Myrtus-1-g_Q320.jpg",
            "width": 320,
            "height": 320
        },
        "url": "https://malwareindepth.com/author/myrtus/",
        "sameAs": []
    },
    "headline": "Nanocore &amp; CypherIT",
    "url": "https://malwareindepth.com/defeating-nanocore-and-cypherit/",
    "datePublished": "2020-04-04T00:03:57.000Z",
    "dateModified": "2020-04-04T00:05:09.000Z",
    "image": {
        "@type": "ImageObject",
        "url": "https://malwareindepth.com/content/images/2020/02/Nanocore3Dplot.png",
        "width": 622,
        "height": 527
    },
    "keywords": "Nanocore, CypherIT, malware, Golang, python",
    "description": "Tools and analysis of the Nanocore malware family as well as the CypherIT crypter. ",
    "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://malwareindepth.com/"
    }
}
    </script>

    <meta name="generator" content="Ghost 2.22" />
    <link rel="alternate" type="application/rss+xml" title="MalwareInDepth" href="https://malwareindepth.com/rss/" />
    <!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-140135275-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-140135275-1');
</script>

</head>
<body class="post-template tag-nanocore tag-cypherit tag-malware tag-golang tag-python">

    <div class="site-wrapper">

        <div id="sidebar" style="background-image: url(/content/images/2019/05/9IWgVMb.jpg)">
            <div>
                <header class="site-header">
    <div class="site-header-content">
        <div class="site-header-picture">
        </div>
        <div class="site-header-text">
            <a href="https://malwareindepth.com"><h1 class="site-title">MalwareInDepth</h1></a>
            <h2 class="site-description">In Depth Analyses on Malware Families</h2>
        </div>
    </div>
</header>            </div>
            <div class="search-form">
                <div class="search-form-content">
                    <form id="search-form">
    <i class="fas fa-search"></i>
    <input id="search-field" type="search" placeholder="Search"/>
</form>                </div>
            </div>
            <nav class="main-nav">
                <ul class="nav" role="menu">
    <li class="nav-home" role="menuitem"><a href="https://malwareindepth.com/">Home</a></li>
    <li class="nav-author" role="menuitem"><a href="https://malwareindepth.com/author/">Author</a></li>
</ul>

            </nav>
            <div class="landscape">
                <footer class="site-footer">
    <div class="site-footer-content">
        <nav class="site-footer-subscribe">
            <a href="https://malwareindepth.com/rss/" target="_blank"><i class="fas fa-rss"></i>Subscribe via RSS</a>
            
        </nav>
        <nav class="site-footer-external">
            
            <a href="https://twitter.com/myrtus0x0" target="_blank" rel="noopener"><i class="fab fa-twitter"></i></a>
            <a href="https://github.com/myrtus0x0/" target="_blank" rel="noopener"><i class="fab fa-github"></i></a>
        </nav>
        <nav class="site-footer-text">
            <section class="copyright">&copy; <a href="https://malwareindepth.com">MalwareInDepth</a> 2025</section>
        </nav>
        <nav class="site-footer-text">
            <a href="https://ghost.org" target="_blank" rel="noopener">Ghost</a> &amp;
            <a href="https://github.com/dlecina/StayPuft" target="_blank" rel="noopener">StayPuft</a>
        </nav>
    </div>
</footer>            </div>
        </div>

        <main id="site-main" class="site-main outer">
            <div class="inner">
                <div class="search-results">
                    <div class="read-next-card">
    <div class="read-next-card-content">
        <ul id="search-results"></ul>
    </div>
</div>                </div>
                <div class="main-body">
                    

<article class="post-full post tag-nanocore tag-cypherit tag-malware tag-golang tag-python ">

    <header class="post-full-header">
        <h1 class="post-full-title">Nanocore &amp; CypherIT</h1>
        <section class="post-full-meta">
            <span class="post-time">
                <i class='fa fa-calendar'></i>
                <time datetime="2020-04-04" class="timeago">5 years ago</time>
                <time datetime="2020-04-04" class="fulldate">April 4th, 2020</time>
            </span>
                <div class='post-tags'><i class='fa fa-tag'></i> <a href="/tag/nanocore/">Nanocore</a></div>
        </section>
    </header>

    <figure class="post-full-image">
        <img
            srcset="/content/images/size/w300/2020/02/Nanocore3Dplot.png 300w,
                    /content/images/size/w600/2020/02/Nanocore3Dplot.png 600w,
                    /content/images/size/w1000/2020/02/Nanocore3Dplot.png 1000w,
                    /content/images/size/w2000/2020/02/Nanocore3Dplot.png 2000w"
            sizes="(max-width: 800px) 400px,
                    (max-width: 1170px) 700px,
                    1400px"
            src="/content/images/size/w2000/2020/02/Nanocore3Dplot.png"
            alt="Nanocore &amp; CypherIT"
        />
    </figure>

    <section class="post-full-content">
        <div class="post-content">
            <p>Hello everyone! Its been a while since I've posted. There's been some changes in my life that have distracted me from my malware temporarily. One of those updates is a career change. I will officially be working as a security researcher and in preparation of that I felt that I needed to keep my reverse engineering skills sharp. So I went to any.runs malware trends <a href="https://any.run/malware-trends/">page</a>, and randomly picked a sample. I ended up picking a Nanocore sample to analyze. Nanocore has been around for many years and is one of the simpler and cheaper malware familieis out there but I never had the availability during work to look at it. Since I generally focus on targeted malware, I knew this was going to be a good change of pace. The sample can be found <a href="https://app.any.run/tasks/ba38899e-779b-4f6e-b38b-53f6bfec801b/">here </a>if you wish to follow along. </p><h2 id="technical-analysis">Technical Analysis </h2><p>First step as usual, is opening the sample in PE studio for a quick triage. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-width-wide"><img src="https://malwareindepth.com/content/images/2020/02/image.png" class="kg-image"></figure><!--kg-card-end: image--><p>From the output here you can see its a Cpp application with a rather high entropy of 7.5. So there is definitely some encrypted or compressed content here. You can also see that there is an embedded resource within the application. Immediately the AutoIT caught my eye as that's not something I have dealt with before. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-width-wide"><img src="https://malwareindepth.com/content/images/2020/02/image-1.png" class="kg-image"></figure><!--kg-card-end: image--><p>Even more suspicious is that its almost 53% of the file, and a maximum entropy value of 8. Seeing the large resource immediately leads me to look for resource related calls such as LockResource, SizeOfResource, LoadResource etc. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/02/image-2.png" class="kg-image"></figure><!--kg-card-end: image--><p>FindResource is only called within this function so if we assume that the AutoIT script is part of the malware, this function becomes increasingly important. This function will load the resource make some calls and load the resource data within [ebp+var_4].</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/02/image-3.png" class="kg-image"></figure><!--kg-card-end: image--><p>Looking at the call graph shows this is a leaf node for the call graph, which can potentially mean that execution will continue outside of the scope of this application or all the information for this chain of calls was acquired. Looking at the parent function it opens a file passed as an argument.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/04/image-1.png" class="kg-image"></figure><!--kg-card-end: image--><p>Looking at calls to this function, there are references to various AutoIT strings. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/04/image-2.png" class="kg-image"></figure><!--kg-card-end: image--><p>Jumping to the Main function it calls sub_403B3A which has a anti-debugger check. It calls IsDebuggerPresent and if it is, opens a message box and the process terminates </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/04/image-3.png" class="kg-image"></figure><!--kg-card-end: image--><p>Following sub_408667, eventually the resource will be loaded from memory, and compared against a the compiled AutoIT header </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/04/image-4.png" class="kg-image"></figure><!--kg-card-end: image--><p>Execution only continues if the header is correct, so we can assume it's going to load an AutoIT script. This coupled with the fact that it quits if you try to debug the executable, I'm comfortable in assuming this executable is going to load and run the compiled AutoIT script from its resource section. </p><h2 id="autoit-script">AutoIT Script </h2><p>Now that we know the binary file we have been looking at is just a runtime environment for the AutoIT script resource we can take a look at the script itself. Extracting the resource with Resource Hacker and throwing it in a hex editor shows that it's a compiled script. Now there are a couple tools out there used to decompile AutoIT scripts. There is <a href="http://domoticx.com/autoit3-decompiler-exe2aut/">Exe2Aut</a> which is what I went with to handle this compiled script. Although running this script through the application gave the following error... </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2020/03/image.png" class="kg-image"><figcaption>Aut2Exe Error</figcaption></figure><!--kg-card-end: image--><p>Googling around for this I found Hexacorn's <a href="http://www.hexacorn.com/blog/2015/01/08/decompiling-compiled-autoit-scripts-64-bit-take-two/">post </a>about this exact issue! Following his post we append our compiled script to the 32 bit stub and we get a valid decompilation of the script! </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/03/image-1.png" class="kg-image"></figure><!--kg-card-end: image--><p>Copying the contents to a new file in VSCode and giving it a look over immediately shows something interesting. This script is 10901 lines long. The majority of the file looks like the following. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/03/image-2.png" class="kg-image"></figure><!--kg-card-end: image--><p>At the end of the file there is a large data blob that spans 3500 lines just on its own. Generally this means it's some sort of payload. Loading this data blob into CyberChef shows that it is most likely either compressed or encrypted. This rules simpler techniques such as XOR encryption. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-width-full"><img src="https://malwareindepth.com/content/images/2020/03/image-3.png" class="kg-image"></figure><!--kg-card-end: image--><p>With this information I knew I'd have to give the script a good hard look. After some googling about AutoIT crypters I came across <a href="https://cypherit.org/">CypherIT</a>. CypherIT is a AutoIT crypter that is sold at 5 separate tiers. the first tier is 33$ for 1 month, 57$ for 2 months and 74$ for 3 months, 175$ for FUD for 2 weeks and finally a 340$ lifetime model. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-width-wide"><img src="https://malwareindepth.com/content/images/2020/03/image-4.png" class="kg-image"></figure><!--kg-card-end: image--><p> Interestingly enough they even have a discord server that users can join for troubleshooting and getting updates on new versions. </p><p>Going back to the script.... After the large data blob is finished being initialized, it is passed to a function called skpekamgyg. This function takes the large data blob, a random string and a number as a string. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-width-full"><img src="https://malwareindepth.com/content/images/2020/03/image-5.png" class="kg-image"></figure><!--kg-card-end: image--><p>There is way too much to go into here for the crypter but these are the basic characteristics of it:</p><ol><li>unused variables </li><li>unused functions </li><li>string decryption</li></ol><p>I ended up writing a golang based script that can handle those 3 above cases! For this sample it turned the the 10901 line script into a 6600 line one. There is some more analysis that can happen to remove function calls that aren't actually called by the main payload decryption routine, but that would require actual function call analysis and that is out of scope for this article. The script can be found <a href="https://github.com/myrtus0x0/DecypherIT-Nanocore/blob/master/deCypherIT.go">here</a></p><h3 id="string-decryption">String Decryption </h3><p>For decrypting the strings there are a couple pieces to it.</p><!--kg-card-begin: code--><pre><code class="language-Go">func decryptStrings(lines []string) ([]string) {
	var re = regexp.MustCompile(`(?m)"\b[0-9A-F]{2,}\b"`)
	modLines := []string{}

	for i, line := range lines {
		matched := false
		tempLine := ""
		tempLine += line
		for _, match := range re.FindAllString(line, -1) {
			matched = true
			cleaned := strings.Replace(match, "\"", "", -1)
			dec, err := hex.DecodeString(cleaned)
			if err != nil {
				modLines = append(modLines, tempLine)
				break
			}

			decodedStr, err := xorBrute(dec)
			if err != nil {
				modLines = append(modLines, tempLine)
				break
			}

			if len(decodedStr) &lt; 2 {
				modLines = append(modLines, tempLine)
				break
			}

			if decodedStr[0:2] == "0x" {
				temp, err := hex.DecodeString(strings.Replace(decodedStr, "0x", "", -1))
				if err != nil {
					modLines = append(modLines, tempLine)
					break
				}
				decodedStr = string(temp)
			}
			if isASCII(decodedStr) {
				tempLine += " ;" + decodedStr
				fmt.Printf("[+] decoded string at line %d: %s\n", i, decodedStr)
			} else {
				tempLine += " ;" + "BINARYCONTENT"			
			}

			modLines = append(modLines, tempLine)
			break
		}
		
		if !matched {
			modLines = append(modLines, tempLine)
		}
	}

	return modLines
}</code></pre><!--kg-card-end: code--><p> I look for hex encoded strings with a regex. Then I clean the string removing extraneous characters. Once we have a valid hex string like 307832343639373037393643363836353...33303330333033303232 we pass it to a the function xorBrute. </p><!--kg-card-begin: code--><pre><code class="language-Go">func xor(enc []byte, key byte) (string, error) {
	ret := []byte{}

	for i := 0; i &lt; len(enc); i++ {
		temp := enc[i] ^ key
		ret = append(ret, temp)
	}

	return string(ret), nil
}

func xorBrute(encodedStr []byte) (string, error) {
	switch string(encodedStr[0]) {
	case "0":
		// lazy
		return xor(encodedStr, 0)
	case "1":
		return xor(encodedStr, 1)
	case "2":
		return xor(encodedStr, 2)
	case "3":
		return xor(encodedStr, 3)
	case "4":
		return xor(encodedStr, 4)
	}

	return "", errors.New("not a valid nanocore encoding")
}</code></pre><!--kg-card-end: code--><p>A neat little property I found about this is that the first character must decode to 0 since the actual string must start with 0x for it to be processed properly. Now in the AutoIT script the function that decodes these hex strings takes 2 arguments, a large hex string and a single character that is some number between 0 and 4 which is the XOR key. Since the value we are looking for here with the first character is 0, we can use the fact that anything XOR'd with itself is 0. So while the second argument is being passed we can figure out the 1 byte key with the switch statement. </p><p>Once we have the decoded string as a large hex value we do a check on the size to make sure we aren't dealing with a single byte value that the regex might've picked up. Followed by a check to make sure it starts with 0x, if all those conditions are met we decode the hex value into ASCII and add it as a comment to the script. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/03/Screen-Shot-2020-03-10-at-8.04.49-PM.png" class="kg-image"></figure><!--kg-card-end: image--><h3 id="variable-cleaning">Variable Cleaning</h3><p>Considering that these CypherIT scripts generally have thousands of lines, it's pretty clear they have unused variables. My technique for removing variables is simplistic but effective. I have a loop that can extract all of the variable names via a regex </p><!--kg-card-begin: code--><pre><code class="language-Go">getVarName := regexp.MustCompile(`(?m)(Dim|Local|Global Const|Global)\s\$(?P&lt;Name&gt;\w+)\s`)</code></pre><!--kg-card-end: code--><p>If I get a variable if the "Name" regex group I scan every line for that name. In the script itself Ive done this step after decoding the strings so that all variable names are in the clear. </p><!--kg-card-begin: code--><pre><code class="language-Go">// count the number of occurences
occurences := 0
for _, secondLine := range lines {
	if strings.Contains(secondLine, result["Name"]) {
		occurences++
	}
}

// if the variable is used multiple times keep it
if occurences &gt; 1 {
	modLines = append(modLines, line)
}</code></pre><!--kg-card-end: code--><h3 id="function-cleaning">Function Cleaning</h3><p>Removing functions were a bit more in depth than variables as you need to be able to find the start and end of a function. Functions also have the added complexity that if you are removing a function that isn't being called anywhere else, you might've isolated another function that isn't going to reached either. So this is function that works the best when you call it multiple times. To get started, we define our regex.</p><!--kg-card-begin: code--><pre><code class="language-Go">var getFuncName = regexp.MustCompile(`(?m)Func\s(?P&lt;Name&gt;\w+)`)</code></pre><!--kg-card-end: code--><p>Then for every function name we extract, we check if it's being called anywhere else in the script. If it's not being called anywhere else we add it to a list that contains all functions we are going to remove. </p><!--kg-card-begin: code--><pre><code class="language-Go">for i, line := range lines {
	// If it is a func declaration get the func name
	match := getFuncName.FindStringSubmatch(line)
	if len(match) == 0 {
		continue
	}

	result := make(map[string]string)

	// turn the regex groups into a map
	for k, name := range getFuncName.SubexpNames() {
		if i != 0 &amp;&amp; name != "" {
			result[name] = match[k]
		}
	}
	
	// count the number of occurences in the new file
	occurences := 0
	for _, secondLine := range lines {
		if strings.Contains(secondLine, result["Name"]) {
			occurences++
		}
	}

	// if the function is just used once, find it and dont write it to the file 
	if occurences == 1 {
		unusedFuncs = append(unusedFuncs, result["Name"])
	}
}</code></pre><!--kg-card-end: code--><p>Once we have this list we iterate over it and find the function start with 2 string.Contains and we iterate over the lines from that point until we find the EndFunc keyword. </p><!--kg-card-begin: code--><pre><code class="language-Go">// now that we have all of the unused functions, we need to remove them
for i := 0; i &lt; len(lines); i++ {
	for _, unusedFunc := range unusedFuncs {
		if strings.Contains(lines[i], unusedFunc) &amp;&amp; strings.Contains(lines[i], "Func") {
			for j, secondLine := range lines[i:] {
				if strings.Contains(secondLine, "EndFunc") {
					i = i + j + 1
					break
				}
			}
		}
	}
	modLines = append(modLines, lines[i])
}</code></pre><!--kg-card-end: code--><p>After running the script against the crypter we have reduced it from 10901 lines to 6195 lines. This function needs to ran a couple of times to catch code branches that do have child function calls but aren't reachable from the main function. Results will vary from script to script, but I now have a script that only contains used functions, used variables and decrypted strings. </p><h3 id="the-final-cypherit-script">The Final CypherIT Script</h3><p>These were the high level concepts I used to simplify my CypherIT crypters, the actual script itself will be listed <a href="https://github.com/myrtus0x0/DecypherIT-Nanocore">here</a>.</p><h3 id="the-bad-news">The Bad News</h3><p>Sadly, even with all of this analysis and development work that made this crypter a lot easier to look at, reconstructing the shellcode itself that will AES decrypt the actual Nanocore sample is out of scope for this project... Luckily the wonderful people over at <a href="https://www.unpac.me/">Unpac.me</a> maintain a incredible service that was actually able to get the payload for me! If you haven't checked out their service I'd definitely give it a try with some difficult crypters. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/03/Screen-Shot-2020-03-10-at-9.28.52-PM.png" class="kg-image"></figure><!--kg-card-end: image--><p>As you can see there is the unpacked Nanocore sample! Onto the actual analysis of the sample.  </p><h3 id="nanocore-payload-analysis">Nanocore Payload Analysis</h3><p>So going ahead with the analysis of 80bbde2b38dc19d13d45831e293e009ae71301b67e08b26f9445ad27df2b8ffd, Nanocore is written in .NET so <a href="https://github.com/0xd4d/dnSpy">dnSpy </a>will be our tool of choice. Loading it up in dnSpy shows that the internal classes are obfuscated. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/03/image-9.png" class="kg-image"></figure><!--kg-card-end: image--><p>One of the first steps I take when I see any sort of obfuscation in .NET malware is run it through <a href="https://github.com/0xd4d/de4dot">de4dot</a>. De4dot is a .NET deobfuscator for many well known .NET obfuscators. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/03/image-8.png" class="kg-image"></figure><!--kg-card-end: image--><p>Output shows that de4dot was able to identify the obfuscator used, Eazfuscator. This obfuscator can be found free to use here. Now that we have a cleaned version of the Nanocore sample we are ready to actually analyze it. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/03/image-10.png" class="kg-image"></figure><!--kg-card-end: image--><h3 id="static-config-decryption">Static Config Decryption </h3><p>Looking at PE Studio results though there is yet another encrypted resource that we need to deal with. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/03/image-11.png" class="kg-image"></figure><!--kg-card-end: image--><p>Searching for function calls within our .NET application that handle resources leads us to the following</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/03/image-12.png" class="kg-image"></figure><!--kg-card-end: image--><p>Pretty standard loading of a resource and checking the xrefs to this function we find </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/03/image-13.png" class="kg-image"></figure><!--kg-card-end: image--><p>Now we are at the the point where we can recreate this code assuming that its going to decrypt the encrypted resource. As you can already see I've annotated a lot of the code already to make this blog post a tad shorter. </p><!--kg-card-begin: code--><pre><code class="language-C#">byte[] byte_ = binaryReader.ReadBytes(binaryReader.ReadInt32());</code></pre><!--kg-card-end: code--><p>This is the first line that we have to pay attention to. This line will read a 32bit integer from the encrypted resource. Then get the GUID of the .NET application and pass it to a function that is going to return a Decryptor object for us</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/03/image-14.png" class="kg-image"></figure><!--kg-card-end: image--><p>This function starts off initializing a Rfc2898DeriveBytes object with the GUID as the password and the salt. That will return a Key and IV that is then used in Rijndael in CBC mode to create the next piece in this chain. This function will decrypt the first 8 bytes on the resource and pass that back. Immediately after the 8 bytes is returned, its passed to this function below where a DES decryptor is created. These 8 bytes and then used as the Key and IV for the DES decryptor that will decrypt the rest of the contents of the resource. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/03/image-15.png" class="kg-image"></figure><!--kg-card-end: image--><p>After this function is called, all we have is a initialized decryptor, and our content is still encrypted. Although a couple lines after our init function this function below is called. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/03/image-16.png" class="kg-image"></figure><!--kg-card-end: image--><!--kg-card-begin: code--><pre><code class="language-C#">byte_0 = AESCrypto.icryptoTransform_1.TransformFinalBlock(byte_0, 0, byte_0.Length);</code></pre><!--kg-card-end: code--><p>This line will decrypt all the contents. Now as soon as that's finished a boolean is read from the start of the decrypted contents. If the boolean is true, the rest of the contents has to be zlib decompressed. In total this breaks down to the following python code to re-implement. Now the GUID has to be changed and since I was working with a single sample  I didn't write any code to handle the boolean being read to decompress or not, so that will have to be modified as well. </p><!--kg-card-begin: code--><pre><code class="language-Python">def decrypt_config(coded_config, key):
	data = coded_config[24:]
	decrypt_key = key[:8]
	cipher = DES.new(decrypt_key, DES.MODE_CBC, decrypt_key)
	raw_config = cipher.decrypt(data)
	new_data = raw_config[5:]
	decompressed_config =  zlib.decompress(new_data, -15)
	return decompressed_config
	

def derive_pbkdf2(key, salt, iv_length, key_length, iterations):
	generator = PBKDF2(key, salt, iterations)
	derived_iv = generator.read(iv_length)
	derived_key = generator.read(key_length)
	return derived_iv, derived_key
    
# get guid of binary	
guid_str = 'a60da4cd-c8b2-44b8-8f62-b12ca6e1251a'
guid = uuid.UUID(guid_str).bytes_le

# AES encrypted key
encrypted_key = raw_config_data[4:20]

# rfc2898 derive IV and key
div, dkey = derive_pbkdf2(guid, guid, 16, 16, 8)

# init new rijndael cipher
rjn = new(dkey, MODE_CBC, div, blocksize=len(encrypted_key))

# decrypt the config encryption key
final_key = rjn.decrypt(encrypted_key)

# decrypt the config
decrypted_conf = decrypt_config(raw_config_data, final_key)</code></pre><!--kg-card-end: code--><p>Loading the decrypted contents in a hex editor does show in fact that we have a valid decrypted blob. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/03/image-17.png" class="kg-image"></figure><!--kg-card-end: image--><p>This blob contains various PE files being the plugins loaded as well as standard config information below</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/03/image-18.png" class="kg-image"></figure><!--kg-card-end: image--><h3 id="config-parsing">Config Parsing</h3><p>Now that our config blob is properly decrypted, we need to parse it. Running binwalk on our output contents shows some interesting results.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/03/image-19.png" class="kg-image"></figure><!--kg-card-end: image--><p>In between the zlib compressed contents and the PNGs there are valid PE files. Now Nanocore is a modular RAT as  I had mentioned earlier. These PE files are the plugins that are loaded immediately after config decryption. With the following snippet I was able to dump each individual PE file that Nanocore is going to load.</p><!--kg-card-begin: code--><pre><code class="language-Python">plugins = decrypted_conf.split("\x00\x00\x4D\x5A")
# remove first snippet as its junk code
plugins = plugins[1:]

# Add the MZ header back cuz python is hard
# remove the config struct at the end of the file
while i &lt; len(plugins):
	plugins[i] = '\x4D\x5A' + plugins[i]
	if "\x07\x3E\x00\x00\x00" in plugins[i] and i == len(plugins)-1:
		plugins[i] = plugins[i].split("\x07\x3E\x00\x00\x00")[0]
	i += 1</code></pre><!--kg-card-end: code--><p>Here we iterate over the config blob that's split by 2 null bytes and the MZ header. With Nanocore's config being at the end of the file that means the last element in our list from the split is going to contain the config data when it shouldn't. The config data itself starts with 0x07 0x3E followed by 3 null bytes. Splitting on that when we're at the last plugin and selecting the first element keeps the last plugin intact. Once they are split and dumped to a directory we get 8 plugins to analyze.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/03/image-20.png" class="kg-image"></figure><!--kg-card-end: image--><p>For the config values of the sample, each field starts with a 0x0c, a null byte, the field name, another null byte then the value of the field name. In the script I search for the hardcoded field names in this specific format. </p><!--kg-card-begin: code--><pre><code class="language-Python">logging_rule = re.search("\x0c.KeyboardLogging(?P&lt;logging&gt;.*?)\x0c", decrypted_conf)
	logging = logging_rule.group('logging')
	if ord(logging[1]):
		config_dict['KeyboardLogging'] = True
	else:
		config_dict['KeyboardLogging'] = False</code></pre><!--kg-card-end: code--><p>After doing this for each configuration field of the sample we can get a clear picture of this sample. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2020/04/Screen-Shot-2020-04-02-at-10.48.12-PM.png" class="kg-image"></figure><!--kg-card-end: image--><p>Some of the fields aren't parsed properly but that is mainly due to lack of time. The values are all correct they just need to be interpreted correctly. </p><p>Nanocore as malware is pretty straightforward to analyze and hasn't changed much so I'll be skipping the analysis of the plugins. If there is demand I can write a follow up on the plugins as well as flaws within Nanocore's network comms. </p><p>In an effort to keep this post short, I'm going to end the analysis here but there is more work to be done on Nanocore and the CypherIT crypter. If anyone would like to collaborate and make a true unpacker for CypherIT, please reach out. </p>
        </div>
    </section>

    <footer class="post-full-footer">


            
<section class="author-card">
        <img class="author-profile-image" src="/content/images/size/w100/2019/05/Lectotipo-de-Myrtus-communis-var-tarentina-L-Herb-Clifford-184-Myrtus-1-g_Q320.jpg" alt="Myrtus 0x0" />
    <section class="author-card-content">
        <h4 class="author-card-name"><a href="/author/myrtus/">Myrtus 0x0</a></h4>
            <p>Read <a href="/author/myrtus/">more posts</a> by this author.</p>
    </section>
</section>
<div class="post-full-footer-right">
    <a class="author-card-button" href="/author/myrtus/">Read More</a>
</div>


    </footer>

    <section class="post-full-comments">
        <div id="disqus_thread"></div>
<script>
    var disqus_shortname = 'malwareindepth';
    var disqus_config = function () {
        this.page.identifier = "ghost-5e560ecec39b24680de67a50";
    };

    (function () {
        var d = document, s = d.createElement('script');
        s.src = 'https://' + disqus_shortname + '.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
</script>
<noscript>Please enable JavaScript to view the
    <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a>
</noscript>    </section>

</article>

<aside class="read-next outer">
    <div class="inner">

        <div class="read-next-feed">

                <article class="post-card post tag-cypherit tag-crypter ">

    <a class="post-card-image-link" href="/cypherit-continued/">
        <img class="post-card-image"
            srcset="/content/images/size/w300/2020/05/Annotation-2020-05-16-123443.png 300w,
                    /content/images/size/w600/2020/05/Annotation-2020-05-16-123443.png 600w,
                    /content/images/size/w1000/2020/05/Annotation-2020-05-16-123443.png 1000w,
                    /content/images/size/w2000/2020/05/Annotation-2020-05-16-123443.png 2000w"
            sizes="(max-width: 1000px) 400px, 700px"
            src="/content/images/size/w600/2020/05/Annotation-2020-05-16-123443.png"
            alt="CypherIT Static Decryption"
        />
    </a>

    <div class="post-card-content">

        <a class="post-card-content-link" href="/cypherit-continued/">

            <header class="post-card-header">
                    <span class="post-card-tags"><i class='fa fa-tag'></i> CypherIT</span>
                <h2 class="post-card-title">CypherIT Static Decryption</h2>
            </header>

            <section class="post-card-excerpt">
                <p>How to statically decrypt the CypherIT commercial packer.Last article I wrote I tackled the CypherIT crypter as well as Nanocore internals. At that point I wasn't able to statically decrypt CypherIT. This</p>
            </section>

        </a>

        <footer class="post-card-meta">

            <span class="post-time">
                <i class='fa fa-calendar'></i>
                <time datetime="2020-05-16" class="timeago">5 years ago</time>
                <time datetime="2020-05-16" class="fulldate">May 16th, 2020</time>
            </span>

            <span class="reading-time">4 min read</span>

        </footer>

    </div>

</article>

                <article class="post-card post tag-shamoon tag-2012 tag-malware ">

    <a class="post-card-image-link" href="/shamoon-2012/">
        <img class="post-card-image"
            srcset="/content/images/size/w300/2019/12/Screen-Shot-2019-12-21-at-1.27.04-PM.png 300w,
                    /content/images/size/w600/2019/12/Screen-Shot-2019-12-21-at-1.27.04-PM.png 600w,
                    /content/images/size/w1000/2019/12/Screen-Shot-2019-12-21-at-1.27.04-PM.png 1000w,
                    /content/images/size/w2000/2019/12/Screen-Shot-2019-12-21-at-1.27.04-PM.png 2000w"
            sizes="(max-width: 1000px) 400px, 700px"
            src="/content/images/size/w600/2019/12/Screen-Shot-2019-12-21-at-1.27.04-PM.png"
            alt="Shamoon 2012 Complete Analysis"
        />
    </a>

    <div class="post-card-content">

        <a class="post-card-content-link" href="/shamoon-2012/">

            <header class="post-card-header">
                    <span class="post-card-tags"><i class='fa fa-tag'></i> shamoon</span>
                <h2 class="post-card-title">Shamoon 2012 Complete Analysis</h2>
            </header>

            <section class="post-card-excerpt">
                <p>In depth analysis of the Shamoon 2012 campaign that targeted Saudi Aramco</p>
            </section>

        </a>

        <footer class="post-card-meta">

            <span class="post-time">
                <i class='fa fa-calendar'></i>
                <time datetime="2019-12-21" class="timeago">6 years ago</time>
                <time datetime="2019-12-21" class="fulldate">December 21st, 2019</time>
            </span>

            <span class="reading-time">40 min read</span>

        </footer>

    </div>

</article>

        </div>
    </div>
</aside>

<div class="floating-header">
    <div class="floating-header-info">
        <div class="floating-header-logo">
            <a href="https://malwareindepth.com">
                <span>MalwareInDepth</span>
            </a>
        </div>
        <span class="floating-header-divider">&mdash;</span>
        <div class="floating-header-title">Nanocore &amp; CypherIT</div>
    </div>
    <div class="floating-header-share">
        <div class="floating-header-share-label">Share this <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path d="M7.5 15.5V4a1.5 1.5 0 1 1 3 0v4.5h2a1 1 0 0 1 1 1h2a1 1 0 0 1 1 1H18a1.5 1.5 0 0 1 1.5 1.5v3.099c0 .929-.13 1.854-.385 2.748L17.5 23.5h-9c-1.5-2-5.417-8.673-5.417-8.673a1.2 1.2 0 0 1 1.76-1.605L7.5 15.5zm6-6v2m-3-3.5v3.5m6-1v2"/>
</svg>
</div>
        <a class="floating-header-share-tw" href="https://twitter.com/share?text=Nanocore%20%26%20CypherIT&amp;url=https://malwareindepth.com/defeating-nanocore-and-cypherit/"
            onclick="window.open(this.href, 'share-twitter', 'width=550,height=235');return false;">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path d="M30.063 7.313c-.813 1.125-1.75 2.125-2.875 2.938v.75c0 1.563-.188 3.125-.688 4.625a15.088 15.088 0 0 1-2.063 4.438c-.875 1.438-2 2.688-3.25 3.813a15.015 15.015 0 0 1-4.625 2.563c-1.813.688-3.75 1-5.75 1-3.25 0-6.188-.875-8.875-2.625.438.063.875.125 1.375.125 2.688 0 5.063-.875 7.188-2.5-1.25 0-2.375-.375-3.375-1.125s-1.688-1.688-2.063-2.875c.438.063.813.125 1.125.125.5 0 1-.063 1.5-.25-1.313-.25-2.438-.938-3.313-1.938a5.673 5.673 0 0 1-1.313-3.688v-.063c.813.438 1.688.688 2.625.688a5.228 5.228 0 0 1-1.875-2c-.5-.875-.688-1.813-.688-2.75 0-1.063.25-2.063.75-2.938 1.438 1.75 3.188 3.188 5.25 4.25s4.313 1.688 6.688 1.813a5.579 5.579 0 0 1 1.5-5.438c1.125-1.125 2.5-1.688 4.125-1.688s3.063.625 4.188 1.813a11.48 11.48 0 0 0 3.688-1.375c-.438 1.375-1.313 2.438-2.563 3.188 1.125-.125 2.188-.438 3.313-.875z"/></svg>
        </a>
        <a class="floating-header-share-fb" href="https://www.facebook.com/sharer/sharer.php?u=https://malwareindepth.com/defeating-nanocore-and-cypherit/"
            onclick="window.open(this.href, 'share-facebook','width=580,height=296');return false;">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path d="M19 6h5V0h-5c-3.86 0-7 3.14-7 7v3H8v6h4v16h6V16h5l1-6h-6V7c0-.542.458-1 1-1z"/></svg>
        </a>
    </div>
    <progress id="reading-progress" class="progress" value="0">
        <div class="progress-container">
            <span class="progress-bar"></span>
        </div>
    </progress>
</div>



                </div>
            </div>
        </main>

        <div class="portrait">
            <footer class="site-footer">
    <div class="site-footer-content">
        <nav class="site-footer-subscribe">
            <a href="https://malwareindepth.com/rss/" target="_blank"><i class="fas fa-rss"></i>Subscribe via RSS</a>
            
        </nav>
        <nav class="site-footer-external">
            
            <a href="https://twitter.com/myrtus0x0" target="_blank" rel="noopener"><i class="fab fa-twitter"></i></a>
            <a href="https://github.com/myrtus0x0/" target="_blank" rel="noopener"><i class="fab fa-github"></i></a>
        </nav>
        <nav class="site-footer-text">
            <section class="copyright">&copy; <a href="https://malwareindepth.com">MalwareInDepth</a> 2025</section>
        </nav>
        <nav class="site-footer-text">
            <a href="https://ghost.org" target="_blank" rel="noopener">Ghost</a> &amp;
            <a href="https://github.com/dlecina/StayPuft" target="_blank" rel="noopener">StayPuft</a>
        </nav>
    </div>
</footer>        </div>

    </div>

    
    <script>
        var images = document.querySelectorAll('.kg-gallery-image img');
        images.forEach(function (image) {
            var container = image.closest('.kg-gallery-image');
            var width = image.attributes.width.value;
            var height = image.attributes.height.value;
            var ratio = width / height;
            container.style.flex = ratio + ' 1 0%';
        })
    </script>


    <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
    <script type="text/javascript" src="/assets/built/jquery.fitvids.js?v=88c8ed21c2"></script>

    <script type="text/javascript" src="/assets/js/jquery.ghosthunter.min.js?v=88c8ed21c2"></script>
    <script type="text/javascript" src="/assets/js/jquery.ghosthunter-staypuft.js?v=88c8ed21c2"></script>

    <script type="text/javascript" src="/assets/js/prism/prism-preprocessor.js?v=88c8ed21c2"></script>
    <script type="text/javascript" src="/assets/js/prism/prism.js?v=88c8ed21c2"></script>
    <script type="text/javascript">Prism.plugins.autoloader.languages_path = "https://malwareindepth.com/assets/js/prism/components/";</script>


    <script>

// NOTE: Scroll performance is poor in Safari
// - this appears to be due to the events firing much more slowly in Safari.
//   Dropping the scroll event and using only a raf loop results in smoother
//   scrolling but continuous processing even when not scrolling
$(document).ready(function () {
    // Start fitVids
    var $postContent = $(".post-full-content");
    $postContent.fitVids();
    // End fitVids

    var progressBar = document.querySelector('#reading-progress');
    var header = document.querySelector('.floating-header');
    var title = document.querySelector('.post-full-title');

    var lastScrollY = window.scrollY;
    var lastWindowHeight = window.innerHeight;
    var lastDocumentHeight = $(document).height();
    var ticking = false;

    function onScroll() {
        lastScrollY = window.scrollY;
        requestTick();
    }

    function onResize() {
        lastWindowHeight = window.innerHeight;
        lastDocumentHeight = $(document).height();
        requestTick();
    }

    function requestTick() {
        if (!ticking) {
            requestAnimationFrame(update);
        }
        ticking = true;
    }

    function update() {
        var trigger = title.getBoundingClientRect().top + window.scrollY;
        var triggerOffset = title.offsetHeight + 35;
        var progressMax = lastDocumentHeight - lastWindowHeight;

        // show/hide floating header
        if (lastScrollY >= trigger + triggerOffset) {
            header.classList.add('floating-active');
        } else {
            header.classList.remove('floating-active');
        }

        progressBar.setAttribute('max', progressMax);
        progressBar.setAttribute('value', lastScrollY);

        ticking = false;
    }

    window.addEventListener('scroll', onScroll, {passive: true});
    window.addEventListener('resize', onResize, false);

    update();

});
</script>


    

</body>
</html>
