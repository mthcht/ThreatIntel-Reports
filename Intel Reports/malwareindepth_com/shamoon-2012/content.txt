<!DOCTYPE html>
<html lang="en">
<head>

    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />

    <title>Shamoon 2012 Full Analysis</title>
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link rel="stylesheet" type="text/css" href="/assets/built/staypuft.css?v=88c8ed21c2" />
    
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
    
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.10/css/all.css" integrity="sha384-+d0P83n9kaQMCwj8F4RJB66tzIwOKmrdb46+porD/OvrJ+37WqIM7UoBtwHO6Nlg" crossorigin="anonymous">

    <link rel="stylesheet" type="text/css" href="/assets/css/prism.css?v=88c8ed21c2" />

    <meta name="description" content="Complete overview and toolset for the Shamoon malware campaign from 2012" />
    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
    <link rel="canonical" href="https://malwareindepth.com/shamoon-2012/" />
    <meta name="referrer" content="no-referrer-when-downgrade" />
    <link rel="amphtml" href="https://malwareindepth.com/shamoon-2012/amp/" />
    
    <meta property="og:site_name" content="MalwareInDepth" />
    <meta property="og:type" content="article" />
    <meta property="og:title" content="Shamoon 2012 Full Analysis" />
    <meta property="og:description" content="In depth analysis of the Shamoon 2012 campaign that targeted Saudi Aramco" />
    <meta property="og:url" content="https://malwareindepth.com/shamoon-2012/" />
    <meta property="og:image" content="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-21-at-1.27.04-PM.png" />
    <meta property="article:published_time" content="2019-12-21T21:29:43.000Z" />
    <meta property="article:modified_time" content="2019-12-21T21:29:43.000Z" />
    <meta property="article:tag" content="shamoon" />
    <meta property="article:tag" content="2012" />
    <meta property="article:tag" content="malware" />
    
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Shamoon 2012 Full Analysis" />
    <meta name="twitter:description" content="In depth analysis of the Shamoon 2012 campaign that targeted Saudi Aramco" />
    <meta name="twitter:url" content="https://malwareindepth.com/shamoon-2012/" />
    <meta name="twitter:image" content="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-21-at-1.27.04-PM.png" />
    <meta name="twitter:label1" content="Written by" />
    <meta name="twitter:data1" content="Myrtus 0x0" />
    <meta name="twitter:label2" content="Filed under" />
    <meta name="twitter:data2" content="shamoon, 2012, malware" />
    <meta name="twitter:site" content="@myrtus0x0" />
    <meta property="og:image:width" content="1938" />
    <meta property="og:image:height" content="1114" />
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "MalwareInDepth",
        "logo": {
            "@type": "ImageObject",
            "url": "https://malwareindepth.com/favicon.ico",
            "width": 60,
            "height": 60
        }
    },
    "author": {
        "@type": "Person",
        "name": "Myrtus 0x0",
        "image": {
            "@type": "ImageObject",
            "url": "https://malwareindepth.com/content/images/2019/05/Lectotipo-de-Myrtus-communis-var-tarentina-L-Herb-Clifford-184-Myrtus-1-g_Q320.jpg",
            "width": 320,
            "height": 320
        },
        "url": "https://malwareindepth.com/author/myrtus/",
        "sameAs": []
    },
    "headline": "Shamoon 2012 Full Analysis",
    "url": "https://malwareindepth.com/shamoon-2012/",
    "datePublished": "2019-12-21T21:29:43.000Z",
    "dateModified": "2019-12-21T21:29:43.000Z",
    "image": {
        "@type": "ImageObject",
        "url": "https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-21-at-1.27.04-PM.png",
        "width": 1938,
        "height": 1114
    },
    "keywords": "shamoon, 2012, malware",
    "description": "In depth analysis of the Shamoon 2012 campaign that targeted Saudi Aramco",
    "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://malwareindepth.com/"
    }
}
    </script>

    <meta name="generator" content="Ghost 2.22" />
    <link rel="alternate" type="application/rss+xml" title="MalwareInDepth" href="https://malwareindepth.com/rss/" />
    <!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-140135275-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-140135275-1');
</script>

</head>
<body class="post-template tag-shamoon tag-2012 tag-malware">

    <div class="site-wrapper">

        <div id="sidebar" style="background-image: url(/content/images/2019/05/9IWgVMb.jpg)">
            <div>
                <header class="site-header">
    <div class="site-header-content">
        <div class="site-header-picture">
        </div>
        <div class="site-header-text">
            <a href="https://malwareindepth.com"><h1 class="site-title">MalwareInDepth</h1></a>
            <h2 class="site-description">In Depth Analyses on Malware Families</h2>
        </div>
    </div>
</header>            </div>
            <div class="search-form">
                <div class="search-form-content">
                    <form id="search-form">
    <i class="fas fa-search"></i>
    <input id="search-field" type="search" placeholder="Search"/>
</form>                </div>
            </div>
            <nav class="main-nav">
                <ul class="nav" role="menu">
    <li class="nav-home" role="menuitem"><a href="https://malwareindepth.com/">Home</a></li>
    <li class="nav-author" role="menuitem"><a href="https://malwareindepth.com/author/">Author</a></li>
</ul>

            </nav>
            <div class="landscape">
                <footer class="site-footer">
    <div class="site-footer-content">
        <nav class="site-footer-subscribe">
            <a href="https://malwareindepth.com/rss/" target="_blank"><i class="fas fa-rss"></i>Subscribe via RSS</a>
            
        </nav>
        <nav class="site-footer-external">
            
            <a href="https://twitter.com/myrtus0x0" target="_blank" rel="noopener"><i class="fab fa-twitter"></i></a>
            <a href="https://github.com/myrtus0x0/" target="_blank" rel="noopener"><i class="fab fa-github"></i></a>
        </nav>
        <nav class="site-footer-text">
            <section class="copyright">&copy; <a href="https://malwareindepth.com">MalwareInDepth</a> 2025</section>
        </nav>
        <nav class="site-footer-text">
            <a href="https://ghost.org" target="_blank" rel="noopener">Ghost</a> &amp;
            <a href="https://github.com/dlecina/StayPuft" target="_blank" rel="noopener">StayPuft</a>
        </nav>
    </div>
</footer>            </div>
        </div>

        <main id="site-main" class="site-main outer">
            <div class="inner">
                <div class="search-results">
                    <div class="read-next-card">
    <div class="read-next-card-content">
        <ul id="search-results"></ul>
    </div>
</div>                </div>
                <div class="main-body">
                    

<article class="post-full post tag-shamoon tag-2012 tag-malware ">

    <header class="post-full-header">
        <h1 class="post-full-title">Shamoon 2012 Complete Analysis</h1>
        <section class="post-full-meta">
            <span class="post-time">
                <i class='fa fa-calendar'></i>
                <time datetime="2019-12-21" class="timeago">5 years ago</time>
                <time datetime="2019-12-21" class="fulldate">December 21st, 2019</time>
            </span>
                <div class='post-tags'><i class='fa fa-tag'></i> <a href="/tag/shamoon/">shamoon</a></div>
        </section>
    </header>

    <figure class="post-full-image">
        <img
            srcset="/content/images/size/w300/2019/12/Screen-Shot-2019-12-21-at-1.27.04-PM.png 300w,
                    /content/images/size/w600/2019/12/Screen-Shot-2019-12-21-at-1.27.04-PM.png 600w,
                    /content/images/size/w1000/2019/12/Screen-Shot-2019-12-21-at-1.27.04-PM.png 1000w,
                    /content/images/size/w2000/2019/12/Screen-Shot-2019-12-21-at-1.27.04-PM.png 2000w"
            sizes="(max-width: 800px) 400px,
                    (max-width: 1170px) 700px,
                    1400px"
            src="/content/images/size/w2000/2019/12/Screen-Shot-2019-12-21-at-1.27.04-PM.png"
            alt="Shamoon 2012 Complete Analysis"
        />
    </figure>

    <section class="post-full-content">
        <div class="post-content">
            <p>The whole inspiration of this blog began when I saw the above picture. </p><p>For those that don't know, this was ASCII art embedded within a .NET dropper that supposedly dropped a version of Shamoon back in December of 2018. This immediately peaked my interest and I began my reversing of the sample. Initially I was looking for resources around this specific sample but quickly found that Shamoon has a rich history and has been utilized in some very interesting campaigns. So I decided I would start at its beginning and work my way through its history. At this point I have almost 40 samples for the various campaigns and have reverse engineered all of them to various degrees. These samples were relatively unorganized and I needed a way to fix that. I wrote a tool that could categorize the samples based on various traits. The samples broke down into a couple of groups and after looking into a sample from each group, I identified the following campaigns:  </p><ul><li>Shamoon 2012</li><li>Shamoon 2016</li><li>Shamoon 2017</li><li>Shamoon 2018 v1</li><li>Shamoon 2018 v2</li><li>Shamoon 2018 v3</li></ul><p>I will try to make a post describing the capabilities of a sample in each campaign if time permits. So without further ado, lets get into Shamoon 2012. </p><h2 id="research-process">Research Process</h2><p>For this series, I decided to focus on the following goals: </p><ol><li>Educate users on the timeline and history of Shamoon</li><li>Share IOCs and detection mechanisms</li><li>Release tools that can be used to help researchers analyze samples in the future</li></ol><p>With these goals I decided the best plan of attack was to gather as many Shamoon samples that I could find, read all the blog posts/reports that I could find and listen to podcasts about the campaigns. I got my samples from various sources such as <a href="https://www.hybrid-analysis.com/">Hybrid Analysis</a>, <a href="https://www.virustotal.com/gui/home">VirusTotal</a>, <a href="https://malware.one/index.php">Malware.one</a>, <a href="https://virusshare.com/">VirusShare</a>, <a href="https://github.com/ytisf/theZoo">TheZoo</a>, and other malware researchers in the field. </p><p>With a decent set I was keen on figuring out a way to programmatically sort the samples into their campaigns. After analyzing the samples I realized each sample over the years had resources that could be used to determine the campaign it originated from. This led to the creation of a script that would group the samples based on the resources that were contained in each sample. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/07/Annotation-2019-07-09-232728.jpg" class="kg-image"><figcaption>All samples organized based on the unique resource names / IDs</figcaption></figure><!--kg-card-end: image--><h2 id="shamoon-2012-overview">Shamoon 2012 Overview</h2><p>The first known target for the Shamoon malware was the oil company Saudi Aramco. For those that don't know Saudi Aramco is the largest petroleum and natural gas company in the world and a lot of Saudi Arabia's economy is centered around this single company. While they are a privately held company, it is estimated that the company is worth between 1-3 trillion dollars. </p><p>Considering their worth and their ties with the Saudi government, they are a prime target for cyber attacks. Especially those that might not have the best relations with Saudi Arabia. </p><p>Ideas of how Shamoon ended up on the Saudi Aramco's systems is unclear currently. Some reports say it was via the <a href="https://www.acunetix.com/vulnerability-scanner/">Acunetix vulnerability scanner</a>, a phishing email or simply even a malicious USB that an employee had inserted into their machine. Speculation is that the threat actor got into the network sometime around April or May of 2012 and spent the next couple of months moving laterally and trying to gain access to a Domain Controller. </p><p>All this effort led up to the events of August 15th 11:08 AM when over 80% of Saudi Aramco's workstations and servers had their drives wiped due to a hard coded detonation date in the Shamoon malware.  Its important to note that this date is not random, some might know that for 2012 the night before was a holiday known as the Night of Power or <a href="https://en.wikipedia.org/wiki/Laylat_al-Qadr">Lailat al-Qadr</a>. It is regarded as one of Islam's holiest nights of the year. Much of the Islam community shuts down to celebrate the revelation of the Quran. As tradition for Saudi Aramco and most of the country, 50,000 employees stayed home on the 15th to celebrate the holiday and spend time with their families. This of course left the company itself and the workstations in Saudi Arabia at its most vulnerable. </p><p>In addition to having the users drives wiped, the workstations were left with an the first 1024 bytes of an image of a burning American flag. Although most users weren't even able to view this picture as their master boot records had been corrupted in the process. This could be taken as a political statement or a misdirection. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/07/shamoon.jpg" class="kg-image"><figcaption>Complete image of snippet left on the workstations</figcaption></figure><!--kg-card-end: image--><p>Nearly 11 hours after the detonation timestamp of Shamoon, a <a href="https://www.pastebin.com/hqAgaQRj">post </a>was shared on popular paste site pastebin.com, which stated the following.</p><blockquote>We, behalf of an anti-oppression hacker group that have been fed up of crimes and atrocities taking place in various countries around the world, especially in the neighboring countries such as Syria, Bahrain, Yemen, Lebanon, Egypt and ..., and also of dual approach of the world community to these nations, want to hit the main supporters of these disasters by this action.</blockquote><blockquote>One of the main supporters of this disasters is Al-Saud corrupt regime that<br>sponsors such oppressive measures by using Muslims oil resources. Al-Saud is a partner in committing these crimes. It's hands are infected with the blood of innocent children and people.</blockquote><blockquote>In the first step, an action was performed against Aramco company, as the largest financial source for Al-Saud regime. In this step, we penetrated a system of Aramco company by using the hacked systems in several countries and then sended a malicious virus to destroy thirty thousand computers networked in this company. The destruction operations began on Wednesday, Aug 15, 2012 at 11:08 AM (Local time in Saudi Arabia) and will be completed within a few hours.</blockquote><blockquote>This is a warning to the tyrants of this country and other countries that support such criminal disasters with injustice and oppression. We invite all anti-tyranny hacker groups all over the world to join this movement. We want them to support this movement by designing and performing such operations, if they are against tyranny and oppression.</blockquote><blockquote>Cutting Sword of Justice</blockquote><p>This post needs to be taken with a grain of salt, as there is no definitive way to tell if this is from the actor. Now they did have the exact detonation date which to me, is a clear sign that this is from the actual actor/s behind this attack. Now if we are to assume that this post is legit there are a couple things we can infer: This TA needs public visibility, they have ties to countries surrounding Saudi Arabia or are at least empathetic towards them, their major target is Al Saud which is the royal family in Saudi Arabia. Notably, this is also the first mention of the Cutting Sword of Justice. </p><p>Normally when we see attacks that are targeted like this, the goal tends to be data exfiltration and maintaining a low profile to reduce the risk of detection but this attack was the complete opposite. Clearly the intent was not to steal information, as even stranger is the impact that something like ransomware or intellectual property theft could've been, due to the amount of raw resources the company has. This all points to the idea that this attack was meant to damage perceptions in the public's eye as well as weaken the resulting country. </p><p>Of course all of this would cause Saudi Arabia to make determinations as to who was behind such an attack, which they promptly implicated Iran. The Saudi government issued an official statement blaming Iran for this attack. That decision could've solely been made due to their relations with Iran or for the fact that the PDB string of Shamoon contains the following <code>ArabianGulf</code> which is highly contested zone which Iran has always claimed that is it part of their country and should be properly named the Persian Gulf. Although this could also be a attempt at misdirection shifting blame towards Iran as APT groups tend to do. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/07/1645-004-A10ECCC8.jpg" class="kg-image"><figcaption>Arabian (Persian) Gulf</figcaption></figure><!--kg-card-end: image--><p>In addition to making this accusation Saudi Aramco made two major actions directly after attack: </p><ol><li>Fly employees to computer hardware factories and purchase as many hard drives as possible (50,000 at one time) </li><li>Lie about the attack, saying that operations had returned to normal when in fact they hadn't</li></ol><p>Saudi Aramco made the decision to call for external help as they didn't have the capability to handle an attack of this grandeur. Now Saudi Arabia didn't really have to many options for who they could call as they refuse to use any devices or personnel that originate from Israel, so they decided to call on Chris Kubecka and contract her to create a team to analyze the samples as well as setup a legitimate security program. </p><p>It turns out there wasn't much identifying information in the sample and due to Pastebin's operations, there was no way to track the paste back to a user let alone a country. So quickly things became pretty quiet as Saudi Aramco wasn't exactly making public statements nor was there new evidence about the group. This didn't sit well with The Cutting Sword of Justice and they followed up with a<a href="https://pastebin.com/AtN7dLeW"> second post </a>on Pastebin on August 29th 2012 at at 1:37 CDT.</p><blockquote>mon 29th aug, good day, SHN/AMOO/lib/pr/~/reversed</blockquote><blockquote>We think it's funny and weird that there are no news coming out from Saudi Aramco regarding Saturday's night. well, we expect that but just to make it more clear and prove that we're done with we promised, just read the following facts -valuable ones- about the company's systems:</blockquote><blockquote>internet service routers are three and their info as follows:<br>Core router:   SA-AR-CO-1#  password (telnet): c1sc0p@ss-ar-cr-tl  / (enable): c1sc0p@ss-ar-cr-bl<br>Backup router: SA-AR-CO-3#  password (telnet): c1sc0p@ss-ar-bk-tl  / (enable): c1sc0p@ss-ar-bk-bl<br>Middle router: SA-AR-CO-2#  password (telnet): c1sc0p@ss-ar-st-tl  / (enable): c1sc0p@ss-ar-st-bl</blockquote><blockquote>Khalid A. Al-Falih, CEO, email info as follows:<br><a><span class="__cf_email__" data-cfemail="72391a131e1b165c14131e1b1a321300131f111d5c111d1f">[email&#160;protected]</span></a>      password:kal@ram@sa1960</blockquote><blockquote>security appliances used:<br>Cisco ASA    #    McAfee #   FireEye : default passwords for all!!!!!!!!!!</blockquote><blockquote>We think and truly believe that our mission is done and we need no more time to waste. I guess it's time for SA to yell and release something to the public. however, silence is no solution.</blockquote><blockquote>I hope you enjoyed that. and wait our final paste regarding SHN/AMOO/lib/pr/~</blockquote><blockquote>angry internet lovers</blockquote><blockquote>#SH</blockquote><p>They decided to dump router credentials, internal security knowledge and username and password for the CEO Khalid Al-Falih (now Minister of Energy of Saudi Arabia and Chairman for Saudi Aramco).</p><h1 id="technical-analysis">Technical Analysis</h1><p>During my research process I discovered 4 unique samples relating to this campaign. The samples and all my public work is shared in a GitHub repo <a href="https://github.com/myrtus0x0/ShamoonPublicWork/tree/master/Shamoon2012">here</a></p><ul><li><em>B14299FD4D1CBFB4CC7486D978398214</em></li><li><em>B128376F2D45CFDF21035D3029EF0D6C</em></li><li><em>ECC2CB6ADC0F0390ADFA9936D149657B</em></li><li><em>D214C717A357FE3A455610B197C390AA</em></li></ul><p>For this post I will solely be talking about B128376F2D45CFDF21035D3029EF0D6C. I always start my analysis process with static properties as those can give some a high level overview of what the sample might be able to do. For this, I generally use <a href="https://winitor.com/">PE Studio</a>. Looking in PE Studio we see the following information </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/07/image.png" class="kg-image"><figcaption>PE Studio Output</figcaption></figure><!--kg-card-end: image--><p>Immediately the entropy of the file stands out indicating some sort of encryption or packed data. Under the resources tab we see the 3 resources along with some version information </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/07/image-1.png" class="kg-image"><figcaption>Shamoon Resources</figcaption></figure><!--kg-card-end: image--><p>We can see 3 resources named PKCS12 PKCS7 and X509. The high entropy and percentage of file immediately stand out as a potential payload or some form of encrypted data. This is unusual for standard files executables as resources are generally used for icons or small images rather than data blobs with high entropy. When I see resources I will generally save them off for later analysis with<a href="http://www.angusj.com/resourcehacker/"> Resource Hacker</a>. Although these resources do contain relatively high entropy values, they aren't 7.99 or above the 7.9 threshold, which means if they are encrypted its through some rudimentary techniques rather than a well established technique like AES of RC4.</p><p>The next thing I look at is the strings. Strings can give information about actions the malware might take or if you're lucky, even a C2 string or raw IOCs. Immediately we see a string that we can use as an IOC due to it's hardcoded name and the fact that the file name will most likely be unique across hosts. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/07/image-2.png" class="kg-image"><figcaption>File Location String</figcaption></figure><!--kg-card-end: image--><p>Scrolling down we see a couple more strings that can prove valuable in understanding the behavior of this malware. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/07/image-3.png" class="kg-image"><figcaption>Interesting strings within the sample</figcaption></figure><!--kg-card-end: image--><p>We can see strings pointing to hardcoded file location, potential commandline execution, hardcoded domains etc. Considering the magnitude and impact that this attack had, I was somewhat surprised to see such low effort taken obfuscate their work.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/07/image-4.png" class="kg-image"><figcaption>Copyright string</figcaption></figure><!--kg-card-end: image--><p>Next I found a copyright string for the company Dinkumware. This is a hardcoded string found in a replacement for the C++ standard library which offers some extra features. Malware authors  use libraries from Dinkumware to simplify the difficulty of the code they have to write. The libraries they provide offer APIs to work with vectors, lists, sets, maps, bitsets and generic algorithms.</p><p>At the end of the list of strings found were the names of the resources mentioned earlier, X509, PKCS7 and PKCS12. This supports the hypothesis that Shamoon will interact with those resources during runtime. A large string pictured below stood out to me as there shouldn't be any reason for malware to require strings of this length. This string turned out to be a description of a service Shamoon will create.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/07/image-5.png" class="kg-image"><figcaption>Unicode strings at the end of the file.&nbsp;</figcaption></figure><!--kg-card-end: image--><blockquote>Enables the Distributed Link Tracking Client service within the same domain to provide more reliable and efficient maintenance of links within the domain. If this service is disabled, any services that explicitly depend on it will fail to start.</blockquote><p>So this alone gives us an IOC. One could query all of their services and check if they have a description that matches the one above. Now that we have finished all the triage for the sample, we can get into the assembly. Following is a list of IOCs we can utilize for future samples</p><!--kg-card-begin: code--><pre><code>- \inf\netft429.pnf
- myimage12767
- c:\windows\temp\out17626867.txt
- \\System32\\cmd.exe /c \"ping -n 30 127.0.0.1 &gt;nul &amp;&amp; sc config TrkSvr binpath= system32\\trksrv.exe &amp;&amp; ping -n 10 127.0.0.1 &gt;nul &amp;&amp; sc start TrkSvr \"
</code></pre><!--kg-card-end: code--><p>Considering the high entropy of the resources and the size of them I started looking for references to those resource names as they're most likely going to be used in windows API calls to interact with them further. </p><p>For my analysis of assembly I use IDA Pro but any disassembler will do. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/08/image.png" class="kg-image"><figcaption>x509 reference</figcaption></figure><!--kg-card-end: image--><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/08/image-1.png" class="kg-image"><figcaption>PKCS7 reference</figcaption></figure><!--kg-card-end: image--><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/08/image-2.png" class="kg-image"><figcaption>PKCS12 reference</figcaption></figure><!--kg-card-end: image--><p>Each resource name string turns out to only have a single reference which is always an argument to this function <strong>sub_401977.</strong> Viewing the function shows the following: </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/08/image-3.png" class="kg-image"><figcaption>Resource decryption routine</figcaption></figure><!--kg-card-end: image--><p>At a high level, we can assume the following actions based on the windows API calls:</p><ol><li>Find a resource </li><li>Load the resource</li><li>Lock the resource </li><li>Create a file </li><li>Write to the file</li></ol><p>After this we can see that its going to allocate a buffer of size <strong>var_8</strong>, which gets set when the value of EAX is moved after the <strong>SizeOfResource </strong>call.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/08/image-4.png" class="kg-image"><figcaption>Write resource</figcaption></figure><!--kg-card-end: image--><p>If the buffer is successfully allocated it enters the loop <strong>loc_401A6F</strong> which implements the following pseudo code:</p><!--kg-card-begin: code--><pre><code>while i = 0; i &lt; sizeOfResource; i++ {
	buf[i] = resource[i] ^ key[i % len(key)];
}	</code></pre><!--kg-card-end: code--><p>This is a very common form of encryption for malware as it's simple, and highly optimized at the hardware level. XOR is built in instruction for the x86 assembly set, so it's something that can be calculated on the CPU itself. Single and double byte XOR keys generally aren't going to thwart AV engines but later versions of Shamoon use extremely large XOR keys for resource decryption. </p><p>Since we have now recognized this as an XOR decryption loop we need to find the key. Generally keys are passed as arguments if they are created during runtime or they are referenced by static constants. There are no references to static constants in this function so taking a look at the arguments we see the following buffer being passed.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/08/image-7.png" class="kg-image"><figcaption>Resource Decryption Call for PKCS12</figcaption></figure><!--kg-card-end: image--><p>Looking at the function call, we can see 6 arguments being passed:</p><ol><li>an integer</li><li>a constant </li><li>a resource name</li><li>a ordinal value for the resource</li><li>a buffer</li><li>a filename that is generated in this current function</li></ol><p>Looking at the constant that is being passed we see the following, as I was analyzing this stood out to me immediately and I tested it as a decryption key. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/08/image-8.png" class="kg-image"><figcaption>PKCS12 XOR key</figcaption></figure><!--kg-card-end: image--><p>This turned out to be correct so I knew the signature for the <strong>ResourceDecryption</strong> function was the following. </p><!--kg-card-begin: code--><pre><code>ResourceDecryption(sizeOfKey int, resourceOrdinal int, resourceName string, fileBuf byte[], outputFilename string)</code></pre><!--kg-card-end: code--><p>Some malware analysts will take this knowledge and create a script to dump the resources so the payload can be analyzed. While this is a valid decision, there is still information that we can pull out from the sample. </p><p>At this point it's important to figure out how the function gets called and what path needs to be taken from the entry point to get this file dumped. Opening the function at <strong>sub_401977 </strong>and hitting the button "xrefs to current identifier" shows a view of function calls that are taken to reach the <strong>DecryptResource</strong> function. This aligns with the 3 calls to <strong>DecryptResource</strong> as there are 3 resources contained within Shamoon. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/08/image-9.png" class="kg-image"><figcaption>Control flow of program</figcaption></figure><!--kg-card-end: image--><p>This graph shows the functions that must be called to reach this point in the program. So this graph would lead up to main and would show us all of the potential checks the malware might do to determine it is running on the correct system. </p><p>Considering that the path to the resource decryption function is relatively short, we can assume that there won't be too many system checks or any at all. </p><p>Starting from the top with <strong>_wmain</strong>, we can see its relatively small function.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-21-at-12.42.23-PM.png" class="kg-image"><figcaption>_wmain graph</figcaption></figure><!--kg-card-end: image--><p>The first function called here I have renamed <strong>CheckWindowsDirectoryAndGetCLIArgs</strong>. This function is relatively simple in what it does. it will load a hardcoded kernel32.dll path, prepend the windows directory variable value to it, and check the creation time of that file. It then parses the commandline arguments passed with <strong>GetCommandLineW</strong>. Considering that eacho of the paths in the callgraph below, I will explain all of the funtionality there in each of the followin resource section.</p><h2 id="pkcs7-drop-and-execution">PKCS7 Drop and Execution</h2><p>Looking at the call graph above the closest call is <strong>sub_40335c</strong> which we can see from the picture below will interact with the PKCS7 resource.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/08/image-10.png" class="kg-image"><figcaption>Assembly following PKCS12 decryption</figcaption></figure><!--kg-card-end: image--><p>Following the call to <strong>ResourceDecryption</strong> we see a couple calls to <strong>sub_4010AF</strong> and <strong>sub_401050</strong> which seem to do some string manipulation. At the end of the <strong>sub_40335c</strong>, there is a call to  <strong>sub_40286c</strong>. Now its important note that all of the calls happening in this picture are after we have decrypted our PKCS7 resource. So with that information we can assume that its going to interact with the decrypted resource.</p><p>Digging into <strong>sub_40286c</strong>, we can see a virtualAlloc and if it successfully allocates memory it will continue executing. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/09/Screen-Shot-2019-09-28-at-11.58.55-AM.png" class="kg-image"><figcaption>virtualAlloc within sub_40286c</figcaption></figure><!--kg-card-end: image--><p>Now in the branch to the left we can see its going to copy some memory and pass some arguments to a function <strong>sub_4026EE</strong>. This function is going to get the process address of a function in netapi32.dll and execute it as we can see below. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/09/Screen-Shot-2019-09-28-at-12.10.40-PM.png" class="kg-image"><figcaption>Call function within netapi32.dll</figcaption></figure><!--kg-card-end: image--><p>This is a common technique for malware authors as it allows them to load functions from libraries within references having to exist statically within the binary. So tools like PE studio wouldn't be able to pick up on this function call. </p><p>The function that is being loaded here is <a href="https://docs.microsoft.com/en-us/windows/win32/api/lmat/nf-lmat-netschedulejobadd">NetScheduleJobAdd</a> which as per MS docs:</p><blockquote>The <strong>NetScheduleJobAdd</strong> function submits a job to run at a specified  future time and date. This function requires that the schedule service  be started on  the computer to which the job is submitted.</blockquote><p>So rather than directly importing netapi32.dll the actor decided to load this library during runtime. When an actor takes the time to do this there is generally a purpose behind it. </p><p>Now looking back at <strong>sub_40286c</strong> we know that its going to copy memory into the newly allocated buffer and start a thread to schedule a task via the netap32.dll. Looking at the next piece of the control flow graph</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/09/Screen-Shot-2019-09-28-at-12.13.46-PM.png" class="kg-image"><figcaption>CreateProcess for PKCS12 payload</figcaption></figure><!--kg-card-end: image--><p>Now if this operation were successful and the thread was created Shamoon will sleep for 0x17318 milliseconds or 95000. This converts to a minute and 35 seconds. So once the application is finished sleeping it will create a process with the API call CreateProcessW. Now taking a step back again this function <strong>sub_40286c</strong> previously has decrypted a resource, written it to disk and done some string manipulation. So from that we can determine that this CreateProcessW will start whatever PKCS7 decrypts to. </p><p>So now that we have an understanding about how PKCS7 is dropped and executed we can quickly go over x509 and PKCS12.</p><h2 id="x509-drop-and-execution">x509 Drop and Execution</h2><p>Looking back on that call graph, <strong>sub_403491</strong> is the function that interacts and executes the x509 module. Now this is handled a little differently than the PKCS7 resource. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/09/Screen-Shot-2019-09-28-at-12.36.03-PM.png" class="kg-image"><figcaption>x509 resource interaction</figcaption></figure><!--kg-card-end: image--><p><strong>sub_403491</strong> starts by making a call to <strong>sub_4017bb</strong> which when looking into it checks that the system has the process architecture AMD64 (checks via the registry). If this check fails Shamoon will not execute/drop the x509 resource. This is indicative that this resource might be performing some activity that is reliant on this specific architecture type or targeting something specific, so definitely worth looking into. Following the check, this function will call <strong>OpenSCManager</strong> which establishes a connection to the service manager.</p><p>For those that aren't aware, the service manager is an integral part of windows that will execute tasks at a given interval. It is also a technique that malware authors use to gain persistence in systems. </p><p>It then moves the resulting handle into EAX and checks to see if it can open a service with that handle name "TrkSvr". <strong>OpenService</strong> will return null if it was unable to get a handle so the "jz loc_40361A" instruction will only be taken if the TrkSrv service exists. </p><p>If the service exists it will then make a call to <strong>QueryServiceConfig</strong> which returns a non-zero value if the call was successful. So if the function is able to get a config for the TrkSrv service it will continue executing. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/09/Screen-Shot-2019-09-28-at-12.47.53-PM.png" class="kg-image"><figcaption>Assembly following x509 decryption</figcaption></figure><!--kg-card-end: image--><p>The calls to <strong>sub_4010AF</strong> are just string manipulation, most likely converting from ASCII to wide due to the system being windows. Looking at the function <strong>sub_401D5D</strong>, we see some calls to more string manipulation functions then at the end of the function we see the following:</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/09/Screen-Shot-2019-09-29-at-12.33.30-PM.png" class="kg-image"><figcaption>CreateFile wrapped with Wow64FsRedirection</figcaption></figure><!--kg-card-end: image--><p>The end of this function will call a wrapper function for <strong>Wow64DisableWow64FsRedirection</strong>. That windows API call on 64 bit systems will change the way files are written to system32 directory. Per the MSDN <a href="https://docs.microsoft.com/en-us/windows/win32/api/wow64apiset/nf-wow64apiset-wow64disablewow64fsredirection">documentation</a>:</p><blockquote>This function is useful for 32-bit applications that want to gain access to the native system32 directory. By default, WOW64 file system redirection is enabled.</blockquote><p>So we know that this function will disable system32 redirection. Then it will create a file on disk with the name trksrv.exe (which is one of the strings that is manipulated in the earlier portions of the function. If the function was successful it will revert the system32 redirection and pop ESI to the stack which is the newly created file handle. </p><p>So now we know <strong>sub_401D5D</strong> is going to return a newly created file handle for trksrv.exe. Looking back at the caller <strong>sub_403491</strong> we are at the point right before the resource decryption function is called and we have a newly created file handle. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/09/Screen-Shot-2019-09-29-at-12.43.59-PM.png" class="kg-image"><figcaption>x509 write resource to disk</figcaption></figure><!--kg-card-end: image--><p>This process is exactly the same as the PKCS7 resource, it will decrypt based on the resource key and write the file to disk via the trksrv.exe file handle. </p><p>After the payload is written to disk, <strong>sub_4020FA</strong> is called which sole purpose is to change the file access, write and create time to the times of the initial Shamoon executable. Now that the file is written to disk and Shamoon has confirmed that there is a scheduled task for trksrv.exe it has no use for the service handle so it closes it. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/09/Screen-Shot-2019-09-29-at-12.52.13-PM.png" class="kg-image"><figcaption>System sleep and create process</figcaption></figure><!--kg-card-end: image--><p>If the handle was successfully closed, the above code block will be executed. As we can see it will do some string manipulation and create a process for the cmd command above:</p><!--kg-card-begin: code--><pre><code>\\System32\\cmd.exe /c "ping -n 30 127.0.0.1 &gt;nul &amp;&amp; sc config TrkSvr binpath= system32\\trksrv.exe &amp;&amp; ping -n 10 127.0.0.1 &gt;nul &amp;&amp; sc start TrkSvr"</code></pre><!--kg-card-end: code--><p>Breaking this command down we can see a ping to localhost, changing the config value for TrkSrv, pinging localhost again and starting the service. These pings are a common tactic by malware authors to have their applications wait a certain period of time. Rather than calling a sleep which might be a function that is alerted on, authors will execute a ping N number of times and wait for those pings to succeed, then execute their command. </p><p>If the process was successfully created, then the function will close the handles created by the various windows API calls here the malware has now successfully dropped a secondary payload via the service task TrkSvr.  </p><h2 id="pkcs12-drop-and-execution">PKCS12 Drop and Execution</h2><p>The last resource we figure out is the PKCS12 resource. Looking back at the call graph we can see that <strong>sub_4056B2</strong> a seemingly random hard coded string an a reference to a text file in <em>\windows\temp called out17626867.txt</em>. This file doesn't have any other references in the code nor any of the payloads. It also loads a image called "<em>myimage12767</em>", this file would either have to be in the directory where Shamoon is running or as a resource in the file itself. As neither is true it is difficult to say what the purpose of this image and the text file are. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2019/10/Screen-Shot-2019-10-28-at-9.26.30-PM.png" class="kg-image"></figure><!--kg-card-end: image--><p>Eventually this function will create a random file name based on the time at that call, check if a process is already running with that filename and if there isn't one, will write the PKCS12 resource to that path and execute it. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/10/Screen-Shot-2019-10-28-at-9.30.49-PM.png" class="kg-image"><figcaption>Write PKCS12 resource to disk</figcaption></figure><!--kg-card-end: image--><p>With that, we have covered all the payloads and its time to go into how the resources are decrypted and what their exact purposes are. </p><h2 id="call-graph-overview">Call Graph Overview</h2><p>With the understanding of how all the resources are dropped we have now reversed all of the functions that lead up to each of the resources being dropped. When renaming the functions to the appropriate actions that they perform, we get a call graph like the following. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-21-at-12.39.12-PM.png" class="kg-image"><figcaption>Named call graph</figcaption></figure><!--kg-card-end: image--><p>Now with all these functions being named, we have a clear picture of how these resources and executed. the x509 resource is used as a newly created service, PKCS12 is executed as a randomly named file, and PKCS7 is started with a <strong>CreateProcessW</strong> after it's written to disk. </p><h2 id="resource-decryption">Resource Decryption </h2><p>Now that we have covered how Shamoon executes its payloads and sets up persistence, we can take a look again at how the resources are actually decrypted. This means we will be looking at function <strong>sub_00401977</strong> or as I have it renamed <strong>WriteResourceToDisk</strong>. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/10/Screen-Shot-2019-10-19-at-12.02.12-PM.png" class="kg-image"><figcaption>DecryptResource initial steps</figcaption></figure><!--kg-card-end: image--><p>As stated above this function will find a resource based on an ordinal, load the resource into memory, create a file, decrypt the buffer and write it to disk. From the arguments to this function decryption becomes very trivial. I decided to hard code the keys in my script as they're consistent across all Shamoon 2012 samples.</p><!--kg-card-begin: code--><pre><code class="language-Python">"""
Works for 3/3 resources
"""
files = {
   # Comms module
    'PKCS7': ["61E8F2AF61_Resources\PKCS7113.bin",  
                    "61E8F2AF61_Resources\PKCS7113_decrypted.bin", 
                     [0x17, 0xD4, 0xBA, 0x00]
            ],
     # x64 variant of dropper
    'x509': ["61E8F2AF61_Resources\X509116.bin", 
                "61E8F2AF61_Resources\X509116_decrypted.bin",  
                [0x5C, 0xC2, 0x1A, 0xBB]
               ],
    # Wiper module
    'PKCS12': ["61E8F2AF61_Resources\PKCS12112.bin", 
                     "61E8F2AF61_Resources\PKCS12112_decrypted.bin",  
                     [0x25, 0x7F, 0x5D, 0xFB]
                ]    
            }

import os 

def decrypt(data, key):
    keyLength = len(key)
    decoded = ""
    for i in range(0, len(data)):
            decoded += chr(data[i] ^ key[i % keyLength])

    return decoded

def main():
     for rname, file in files.items():
        src_resource = file[0]
        dst_resource = file[1]
        xor_key = file[2]
        
        print("[+] Decrypting resource {}".format(rname))
        print("[+] Using Decryption key: {}\n".format(xor_key))
        
        key = bytearray(xor_key)
        data = bytearray(open(src_resource, 'rb').read())
    
        decryptedData = decrypt(data, key)
        if len(decryptedData) == 0:
            print("[!] not able to decrypt resource {}".format(src_resource))
        with open(dst_resource, "wb+") as dst:
            dst.write(decryptedData)

if __name__ =="__main__":
    main()</code></pre><!--kg-card-end: code--><p>I dumped the resources with resource hacker, then hardcoded the paths. With successful decryption we get the following results. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/10/Screen-Shot-2019-10-19-at-12.13.15-PM.png" class="kg-image"><figcaption>Successful decryption output</figcaption></figure><!--kg-card-end: image--><p>If you kept the paths the same, you should have a folder in the CWD that contains the encrypted and decrypted resources. </p><h2 id="shamoon-payload-pkcs7">Shamoon Payload PKCS7 </h2><p>The first payload we will look at is the decrypted PKCS7 resource. First thing is to look at static properties. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/10/Screen-Shot-2019-10-19-at-12.23.41-PM.png" class="kg-image"><figcaption>PE Studio overview</figcaption></figure><!--kg-card-end: image--><p>Unsurprisingly has a ton of hits on VirusTotal, has a file description of TCP/IP NetBios Information, 2 resources that don't mean much and the following interesting strings.</p><!--kg-card-begin: code--><figure class="kg-card kg-code-card"><pre><code>del /f /a %s%s*.%s
http://%s%s?%s=%s&amp;%s=%s&amp;state=%d
/ajax_modal/modal/data.asp
\inf\netft429.pnf
Copyright (c) 1992-2004 by P.J. Plauger, licensed by Dinkumware, Ltd. ALL RIGHTS RESERVED.
\inf\netfb318.pnf</code></pre><figcaption>Interesting strings pulled out from the payload</figcaption></figure><!--kg-card-end: code--><p>Just judging from the strings, it's probably going to connect to a host, interact with those hard coded filepaths, delete some files and we also see the Dinkumware copyright string we saw in the initial look at the Shamoon sample.</p><p>Looking at the sample, the function we care about is main which is <strong>sub_402B90</strong> or as I've renamed it <strong>MalwareMain</strong>.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/10/Screen-Shot-2019-10-19-at-5.23.41-PM.png" class="kg-image"><figcaption>Arg handling</figcaption></figure><!--kg-card-end: image--><p>The first thing this payload does is call <strong>sub_4020F0</strong> or as I've renamed it GetIPAddress. This function will set WideIPAddressString to 0 if the the result of GetIPAddress is 0. Otherwise it will set the value of the pointer to WideIPAddressString in the function. It then will get the windows directory in ASCII and in wide, then will check argv[1] to see what the value is. The two arguments that are processed for the payload are the ASCII "0" and "1", as seen below. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/10/Screen-Shot-2019-10-19-at-5.33.34-PM.png" class="kg-image"><figcaption>Argument control flow</figcaption></figure><!--kg-card-end: image--><p>If you pass a 0 as the first argument to the payload, it will do a subsequent check to see if there is a 2nd argument. if there is a second argument it will pass that to <strong>sub_402240</strong>, otherwise it will pass 0 to <strong>sub_402240</strong>. After <strong>sub_402240</strong> is called the program will exit. </p><p>So to summarize, what we've seen so far: </p><!--kg-card-begin: code--><pre><code>pkcs7.exe 0 1 will pass 1 to sub_402240 
pkcs7.exe 0 will pass 1 to sub_402240</code></pre><!--kg-card-end: code--><p>Now looking into <strong>sub_402240</strong>, the first thing it will do is create a internet handle that it will use for further WinINet functions. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/10/Screen-Shot-2019-10-19-at-5.58.15-PM.png" class="kg-image"><figcaption>Singular InternetOpen call</figcaption></figure><!--kg-card-end: image--><p>The first argument to <strong>InternetOpenW</strong> is the purpose of the handle or user-agent, and interestingly it sets this value to "you". As soon as the <strong>InternetOpenW</strong> call is made, there is a loop that begins. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2019/10/Screen-Shot-2019-10-20-at-12.51.33-PM.png" class="kg-image"></figure><!--kg-card-end: image--><p> (I understand the quality of the picture is bad but I had to zoom out in IDA to take it) but the basic idea of this loop is to iterate over the values stored at the HomePointer, which in our case is the following </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/10/Screen-Shot-2019-10-20-at-12.57.54-PM.png" class="kg-image"><figcaption>C2 array</figcaption></figure><!--kg-card-end: image--><p>So this loop will iterate twice, once with the string "home" and once with the hardcoded IP "10.1.252.19". So this loop will get the tick count, pass arguments to the format string http://%s%s?%s=%s&amp;%s=%s&amp;state=%d and make a call to <strong>InternetOpenW</strong> then delete the buffer containing the built out format string. So our possibilities for this loop are.</p><!--kg-card-begin: code--><pre><code>http://10.1.252.19/ajax_modal/modal/data.asp?mydata=&lt;argToFunction&gt;&amp;uid=&lt;IPAddressAcquiredInMalwareMain&gt;&amp;state=CurrentMilliseconds

http://home/ajax_modal/modal/data.asp?mydata=&lt;argToFunction&gt;&amp;uid=&lt;IPAddressAcquiredInMalwareMain&gt;&amp;state=CurrentMilliseconds</code></pre><!--kg-card-end: code--><p>Looking at the IP address, it falls within private IP space so its communicating with a server that is hosted within Saudi Aramco's environment. In the second iteration it tries to communicate with a host "home" so either this is a internal hostname set by Saudi Aramco or some host entry set per host where home=10.1.252.19. The use of a hardcoded private IP address is unique and means that the Cutting Sword of Justice had access to Saudi Aramco's environment before creating and deploying Shamoon. So that hardcoded "home" and 10.1.252.19 serve as a C2 between the PKCS7 resource and the actor. </p><p>Considering this sample is 7 years old now and uses a private IP for its C2 there is no chance we will be able to properly emulate the C2 but from the control flow we can infer what the malware will do based on the results. </p><p>Once it gets a handle to the C2, a call to <strong>InternetReadFile</strong> is made and the read buffer is stored and used to determine what actions should be taken next. There are 2 cases that can be taken </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/10/Screen-Shot-2019-10-28-at-8.42.39-PM.png" class="kg-image"><figcaption>Control flow based on response from C2</figcaption></figure><!--kg-card-end: image--><!--kg-card-begin: html--><style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}
.tg .tg-0lax{text-align:left;vertical-align:top}
</style>
<table class="tg">
  <tr>
    <th class="tg-0lax">Response from C2<br></th>
    <th class="tg-0lax">Action Taken</th>
  </tr>
  <tr>
    <td class="tg-0lax">T</td>
    <td class="tg-0lax">Create a file at \inf\netft429.pnf and write a new detonation time to be used by the other modules </td>
  </tr>
  <tr>
    <td class="tg-0lax">E</td>
    <td class="tg-0lax">Receive a base64 encoded buffer, attempt to drop it at the following location %WINDIR%\Temp\filer.exe and execute it </td>
  </tr>
</table><!--kg-card-end: html--><p>Going down the E path there a Sprintf call is used to generate a file path to drop the decoded base64 file. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/10/Screen-Shot-2019-10-28-at-9.00.39-PM.png" class="kg-image"><figcaption>%s%S concatenation and usage</figcaption></figure><!--kg-card-end: image--><p>If you look closely you will see that its using %S in the format string which in some reports has stated to be invalid and a bug on the actors part. This is actually incorrect, in the context of windows, this will write a wide character string rather than an ASCII string. So this call will success and write a file to \\Temp\\filer and execute it. </p><h2 id="shamoon-payload-pkcs7-conclusion">Shamoon Payload PKCS7 Conclusion</h2><p>This sample serves as the communications mechanism between the actor/s and the Shamoon malware. This communications module allows the actors to drop additional payloads, as well as report information back to the actos. The other purpose it serves is to take a new detonation from the C2 and write it into a hardcoded file path that is then used by the main Shamoon module to start wiping the disk. </p><h2 id="shamoon-payload-pkcs12">Shamoon Payload PKCS12 </h2><p>The next payload we are going to cover is the PKCS12 resource. </p><p>Loading the file up into PE Studio we can see it has 2 resources being the following </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-09-at-11.31.00-AM.png" class="kg-image"><figcaption>PKCS12 resources</figcaption></figure><!--kg-card-end: image--><p>READONE stands out as it has a relatively large size and a high entropy. Loading the file into a hex editor and judging from the XOR encoding scheme used in the past, its clear it's a encrypted PE file. Looking at the strings we can see strings that are most likely going to be passed to _system and a PDB path that shows the name Shamoon just as the initial dropper. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-09-at-11.32.47-AM.png" class="kg-image"><figcaption>Cmd strings found within PKCS12</figcaption></figure><!--kg-card-end: image--><p>We can see the actor searching for files and putting them in f1.inf and f2.inf. Most likely these files will be exfiltrated for further analysis. Then there are strings for "sc" which are used to create a windows service with a hardcoded path to a drdisk.sys in System32/Drivers. </p><p>Digging into the assembly starting at <strong>_wmain</strong>, the first function we care about it is <strong>sub_403720</strong>.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-09-at-11.52.14-AM.png" class="kg-image"><figcaption>Drop drdisk.sys into Drivers\</figcaption></figure><!--kg-card-end: image--><p>The beginning of the function will get the windows directory and use the format string in the screenshot to create `&lt;WINDOWS DIR&gt;\\System32\\Drivers\drdisk.sys`. In case there is already a service called drdisk, it'll attempt to stop and remove it. Once the service is stopped it'll attempt to delete the driver drdisk.sys at the path created from the format string. Then a call to FindResource is made for the ReadOne resource we saw earlier in PE Studio. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-09-at-11.58.53-AM.png" class="kg-image"><figcaption>Create new service for drdisk.sys</figcaption></figure><!--kg-card-end: image--><p>If the resource was found, it will be passed to the function I've labeled <strong>DecryptAndWriteEldosDriverToDisk</strong> or <strong>sub_004037E0</strong>. Based on the result of that function, it will create and start a service of exit. </p><p>With that information I dumped the resource with Resource Hacker to decrypt the resource when we get to that point. Now we will be looking at the decryption routine or <strong>sub_004037E0</strong>. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-09-at-12.05.46-PM.png" class="kg-image"><figcaption>PKCS12 internal resource decryption</figcaption></figure><!--kg-card-end: image--><p>The arguments to the function are a string which is the filename for to be created file and the resource handle from the FindResource call. With those parameters the function will load the resource and lock it so that no concurrent routines can modify it. Then get the address of the <strong>Wow64DisableWow64FsRedirection</strong> to ensure that the to be decrypted file is dropped at the same location every time. Scrolling down we see our first XOR loop. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-09-at-12.14.04-PM.png" class="kg-image"><figcaption>XOR loop for decryption</figcaption></figure><!--kg-card-end: image--><p>This loop will iterate over each byte of the file XORing it with the key[index &amp; 3] and write one byte at a time to the newly created decrypted file handle. As soon as the index is greater that 1024  it will continue to the next XOR loop.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-09-at-12.18.12-PM.png" class="kg-image"></figure><!--kg-card-end: image--><p>Once the initial KB has been written it then will allocate memory for the rest of the file, decrypt the rest of the file with the same scheme as the previous loop and then make a single call to <strong>WriteFile</strong> when it decrypts the entire buffer. The encryption key is a hardcoded value and for this sample is:</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-09-at-12.28.04-PM.png" class="kg-image"><figcaption>PKCS12 internal resource decryption key</figcaption></figure><!--kg-card-end: image--><p>Of course only the first 4 bytes are used as the and operation with the index will keep the ranges from 0-3. Below is the python script I used to re-implement the decryption.</p><!--kg-card-begin: code--><pre><code class="language-Python">files = {
   
    'PKCS12_Eldos': ["PKCS12112_Resources\wiper_encrypted.sys_",  
                    "PKCS12112_Resources\wiper_decrypted.sys_", 
                    [0x15, 0xAF, 0x52, 0xF0, 0xA0, 0xFF, 0xCA, 0x10]
            ],
        }

import os 

def decrypt(data, key):
    keyLength = len(key)
    decoded = ""
    for i in range(0, len(data)):
        decoded += chr(data[i] ^ key[i &amp; 3])

    return decoded

def main():
     for rname, file in files.items():
        src_resource = file[0]
        dst_resource = file[1]
        xor_key = file[2]
        
        print("[+] Decrypting resource {}".format(rname))
        print("[+] Using Decryption key: {}\n".format(xor_key))
        
        key = bytearray(xor_key)
        data = bytearray(open(src_resource, 'rb').read())
    
        decryptedData = decrypt(data, key)
        if len(decryptedData) == 0:
            print("[!] not able to decrypt resource {}".format(src_resource))
        with open(dst_resource, "wb+") as dst:
            dst.write(decryptedData)

if __name__ =="__main__":
    main()</code></pre><!--kg-card-end: code--><p>Now with the decryption function reversed, we can look back at <strong>sub_403720</strong>. If the decryption was successful it will create the new drdisk service and start it. </p><p>So we can now move back to <strong>_wmain</strong> and we continue looking down the path of the resource successfully being decrypted and created as a service. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-09-at-12.44.06-PM.png" class="kg-image"><figcaption>System calls to harvest host files</figcaption></figure><!--kg-card-end: image--><p>The call to <strong>CheckIfItsTimeToWipe</strong> is used to check if the file "\inf\netfb318.pnf" exists and if so, its used as a trigger to continue with wiping the system. Whether or not that call was successful or not, the following cmd statements will be executed.</p><ul><li>dir "C:\Documents and Settings\" /s /b /a:-D 2&gt;nul | findstr -i download 2&gt;nul &gt;f1.inf"</li><li>dir "C:\Documents and Settings\" /s /b /a:-D 2&gt;nul | findstr -i document 2&gt;nul &gt;&gt;f1.inf"</li><li>dir C:\Users\ /s /b /a:-D 2&gt;nul  | findstr -i download 2&gt;nul &gt;&gt;f1.inf"</li><li>dir C:\Users\ /s /b /a:-D 2&gt;nul  | findstr -i document 2&gt;nul &gt;&gt;f1.inf"</li><li>dir C:\Users\ /s /b /a:-D 2&gt;nul  | findstr -i picture 2&gt;nul &gt;&gt;f1.inf"</li><li>dir C:\Users\ /s /b /a:-D 2&gt;nul  | findstr -i video 2&gt;nul &gt;&gt;f1.inf"</li><li>dir C:\Users\ /s /b /a:-D 2&gt;nul  | findstr -i music 2&gt;nul &gt;&gt;f1.inf"</li><li>dir "C:\Documents and Settings\" /s /b /a:-D 2&gt;nul  | findstr -i desktop 2&gt;nul &gt;f2.inf"</li><li>dir C:\Users\ /s /b /a:-D 2&gt;nul  | findstr -i desktop 2&gt;nul &gt;&gt;f2.inf"</li><li>dir C:\Windows\System32\Drivers /s /b /a:-D 2&gt;nul &gt;&gt;f2.inf"</li><li>dir C:\Windows\System32\Config /s /b /a:-D 2&gt;nul | findstr -v -i systemprofile 2&gt;nul &gt;&gt;f2.inf"</li><li>dir f1.inf /s /b 2&gt;nul &gt;&gt;f1.inf"</li><li>dir f2.inf /s /b 2&gt;nul &gt;&gt;f1.inf"</li></ul><p>These commands will grab filenames in those directories with various recursion depths. </p><p>Once those commands have been executed, there are 2 major if statements that each call the same function with a argument of the f1.inf or f2.inf. This function is used to check if the file exists and check permissions as well. If the file exists and is able to be read, then each file path contained within f1.inf and f2.inf  will be copied to a buffer and corrupted by a following routine. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-09-at-2.13.54-PM.png" class="kg-image"><figcaption>f1.inf reference</figcaption></figure><!--kg-card-end: image--><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-09-at-2.14.48-PM.png" class="kg-image"><figcaption>f2.inf reference</figcaption></figure><!--kg-card-end: image--><p>Immediately after the payload has successfully read and processed f2.inf, it will load a hardcoded buffer into memory. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-16-at-1.50.48-PM.png" class="kg-image"><figcaption>Load picture buffer into memory</figcaption></figure><!--kg-card-end: image--><p>This will create a empty buffer of length 196608 bytes and copy the a hardcoded buffer I renamed DumpedPicture with a length of 1024 into the new buffer. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-16-at-1.52.55-PM.png" class="kg-image"><figcaption>JPG header</figcaption></figure><!--kg-card-end: image--><p>For those that don't know the file header for a JPEG JFIF format is FF D8 FF E0 00 10 4A 46 49 46 00 01. Opening the extracted 1024 bytes of the JPEG we can see the following. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-16-at-2.08.34-PM.png" class="kg-image"><figcaption>Screenshot of dumped picture buffer</figcaption></figure><!--kg-card-end: image--><p>Since its only a partial image we can find the original with a reverse image search. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/07/shamoon.jpg" class="kg-image"><figcaption>Reference image from Wikipedia</figcaption></figure><!--kg-card-end: image--><p>Although the entire image isn't held within the binary, it is interesting to see such a decision made by this group. </p><p>If you have taken a look yourself at <strong>_wmain</strong> you will see that its quite large and contains a lot of functionality that really should be separated out. For that reason I decided to create a diagram of the relevant actions that occur within this payload.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-16-at-1.27.41-PM.png" class="kg-image"><figcaption>_wmain function summary</figcaption></figure><!--kg-card-end: image--><p>The next piece we care about is the system information that needs to be acquired for the payload to successfully corrupt drives. This payload will query the registry with the following keys, getting the disk layout for the machine its on. The examples below are from my personal VM, but with a host that contains multiple drives these values would look different. </p><!--kg-card-begin: html--><style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}
.tg .tg-0lax{text-align:left;vertical-align:top}
</style>
<table class="tg">
  <tr>
    <th class="tg-0lax">Registry Key<br></th>
    <th class="tg-0lax">Size</th>
    <th class="tg-0lax">Value</th>
  </tr>
  <tr>
    <td class="tg-0lax">SYSTEM\\CurrentControlSet\\Control - FirmwareBootDevice</td>
    <td class="tg-0lax">REG_SZ</td>
    <td class="tg-0lax">multi(0)disk(0)rdisk(0)partition(2)</td>
  </tr>
  <tr>
    <td class="tg-0lax"> SYSTEM\\CurrentControlSet\\Control - SystemBootDevice</td>
    <td class="tg-0lax">REG_SZ</td>
    <td class="tg-0lax">multi(0)disk(0)rdisk(0)partition(4)</td>
  </tr>
</table><!--kg-card-end: html--><p>With this information the payload will iterate over the partitions and rdisk values and add them to an array so for my system that would result in the following array.</p><!--kg-card-begin: code--><pre><code>\\Device\\Harddisk0
\\Device\\Harddisk1
\\Device\\Harddisk2 </code></pre><!--kg-card-end: code--><p>Then once those devices are appended in an array we have a call to a function I have renamed <strong>SetSystemTimeChangeNameOfPartitionAndGetHandleToPartition</strong> or <strong>sub_4033F0</strong>. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-29-at-10.03.04-PM.png" class="kg-image"><figcaption>Partition iteration</figcaption></figure><!--kg-card-end: image--><p>The function is pretty short as its basically just a wrapper for the code that actually gets the wiper handle. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-29-at-10.05.27-PM.png" class="kg-image"><figcaption>Hardcoded license key and system time change</figcaption></figure><!--kg-card-end: image--><p>Interestingly, it will set the system time before it returns a handle to a device. It sets the year and month to august 2012. It will pick a random value for the day and do a modulus 20 on it and add 1. So the day will be some value between 1 and 20. This information doesn't seem to hold much value but there is a call to <strong>ChangeNameOfPartitionAndGetHandleToPartition</strong> or <strong>sub_409660</strong>. This function takes 3 arguments, a string, privilege levels that will be passed to CreateFile and another string. </p><!--kg-card-begin: code--><pre><code>HANDLE ChangeNameOfPartitionAndGetHandleToPartition(char *str1, DWORD dwDesiredAccess, char *str2)</code></pre><!--kg-card-end: code--><p>Without going into detail for this function as its relatively straight forward, the first string is a filepath that is appended to "\\?\ElRawDisk". The only way this function executes properly is if that value starts with the characters "\\". The second argument is an access level and for this call is a generic read &amp; write. The 3rd string passed is a license key that is required for the wiper to run. After the "\\"  is appended to the path, it will append a "#" to the filename and then the license key that is the third argument. As an example if you have the following input string </p><blockquote>\\device\\harddisk1\\partiton0</blockquote><p>we would get a file handle back from </p><blockquote>\\device\\harddisk\\partiton0#8F71FF7E2831A...</blockquote><p>The driver requires a license key to run if you look at the implementation of it, and it will read from this filepath to get a valid key. For one to acquire a license key, they must register an account with <a href="https://www.eldos.com/">Eldos</a>. Understandably so, the company does not seem to offer the product anymore nor the free trial that was used in this attack. If one were to have access to the registration information that was used, it could yield potentially interesting information about the actor. </p><p>Once this function returns the handle to the specific partition with the license key appended to it we are back to looking at <strong>_wmain</strong>. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/11/Screen-Shot-2019-11-29-at-10.23.36-PM.png" class="kg-image"><figcaption>Thread creation for corrupting partitions with JPG buffer</figcaption></figure><!--kg-card-end: image--><p>The block before this gets the handle to the partition, which is held in ESI. It will write the picture buffer to the file and create a thread with the function <strong>sub_402F40</strong>. This function is arguably the most delicate code of the sample as it deals with overwriting portions of the disk partitions that we had seen earlier. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-07-at-9.19.44-PM.png" class="kg-image"><figcaption>Thread function pseudo C++</figcaption></figure><!--kg-card-end: image--><p>Generally I am not a fan of relying on the decompiled code as a lot can be missed but considering all the nested loops and byte manipulation I felt that this was a better way to display the control flow. </p><p>As you can see this function is pretty complicated but I've done my best to rename the variables to informative names. The most important piece of this pseudo C is the section from line 76 to 86. These 7 lines are responsible for writing the picture buffer to the path passed within this function. First it makes 2 checks to compare the path passed into the function with the DeviceString and DeviceHardDiskString. Then it will get a file handle, where the filename for that handle has the serial key for the disk wiper appended to it after a #, and if that is successful, then the handle is passed to <strong>SetFilePointerAndWritePicture</strong> which will write the picture buffer over spans of memory for the handle being passed in. </p><p>So its clear that the purpose of this function is to take in a path, and start writing the image buffer to file at that path. With that I renamed <strong>Sub_402F40</strong> to <strong>WriteImageBufToPathThread</strong>. Now that we have looked at the thread function, we have analyzed all the pieces required for the loop we were just looking at in <strong>_wmain</strong></p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-07-at-9.48.24-PM.png" class="kg-image"><figcaption>Complete partition corruption loop</figcaption></figure><!--kg-card-end: image--><p>This loop iterates over all of the partitions gathered from the registry and will write the picture buffer to random sections in each of the partitions. So while the functions we looked at were complex, looking at the high level picture really sheds a light as to what the sample attempts to do. </p><p>Now at the final section of <strong>_wmain</strong> we can see a call to <strong>Sub_4034B0</strong> or as I have renamed it <strong>DropElDosDiskWiperAndRestartMachine</strong>.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-14-at-9.25.09-PM.png" class="kg-image"><figcaption>Corrupt partition0 and restart machine call</figcaption></figure><!--kg-card-end: image--><p>Once we enter this function ,we can see a call to CorruptPartition0AndRestartMachine with the argument \\Device\\Harddisk0\\Partition0. If you were to look at the threads that were just generated in a debugger you can see that it won't start a thread for corrupting Harddisk0\\Partition0, this is due to the fact that partition0 is a special case and points to the entire contents of Harddisk0. Where Harddisk0 is generally where the OS is installed and has to be corrupted last. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-14-at-9.26.17-PM.png" class="kg-image"></figure><!--kg-card-end: image--><p>Once the handle to Partition0 is acquired it writes the the picture buffer to the beginning of the partition and promptly closes the handle to it continuing onward. Soon after the function will acquire a file handle for the string global variable <strong>dword_428D2C</strong>. Generally the function used to get a file handle is <strong>OpenFile</strong> but CreateFile can also be used to get the handle to the file passed. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-08-at-2.27.44-PM.png" class="kg-image"></figure><!--kg-card-end: image--><p>If the initial CreateFile call fails, it will append a string to <strong>dword_428D2C</strong> and attempt to get the file handle again. If the handle is valid, we see a call again to <strong>SetFilePointerAndWritePicture</strong> with the newly acquired file handle.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-08-at-2.34.01-PM.png" class="kg-image"></figure><!--kg-card-end: image--><p>Once the picture buffer is written to the file handle the function checks the length of the DeviceHardDisk string. While string length is its own  function in C <strong>wcslen</strong>, generally that function is inlined to others as its relatively small and removes the need to setup the function call for wcslen. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-08-at-2.41.09-PM.png" class="kg-image"></figure><!--kg-card-end: image--><p>The snippet above calculates string length and checks whether the length of that DeviceHardDiskString is greater than 1. Assuming that the string is valid and contains the information expected, then a conditional is evaluated to check whether DeviceHardDiskString and DeviceStringCopy are the same value. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-08-at-2.47.22-PM.png" class="kg-image"></figure><!--kg-card-end: image--><p>Just as wcslen is inlined when the program is compiled so is <strong>wcscmp</strong>. This section loads the two strings and checks whether they are the same values. If they are the same values, then we get into the critical portion of this function. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-08-at-2.49.02-PM.png" class="kg-image"></figure><!--kg-card-end: image--><p>So at this point, if the length of DeviceHardDiskString is greater than 1, and it is the same as DeviceStringCopy, then we get into the assembly blocks in the screenshot above. The filepath being passed is the DeviceHardDiskString. The file at this path will have the EldoS key license appended to the filename after a "#" and the handle will be returned. The file handle that is returned is then passed to <strong>SetFilePointerAndWritePicture</strong> where the raw hard disk device will have the picture buffer written to it at the beginning of the raw device. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-08-at-3.10.58-PM.png" class="kg-image"><figcaption>Get handle to partition0&nbsp;</figcaption></figure><!--kg-card-end: image--><p> So the previous call we saw was writing the picture buffer to DeviceHardDiskString, whereas for this assembly snippet it works with DeviceString. Once it has a valid handle to the device, it will write the picture buffer to the device pointed at DeviceString. Its interesting to note that instead of writing over the entirety of the disk, the actors decided to just write over the first 1024 bytes. Its much quicker than writing over the device and is still nearly impossible to repair.</p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-08-at-4.21.00-PM.png" class="kg-image"><figcaption>Write picture buffer to partition0 and send control code to device</figcaption></figure><!--kg-card-end: image--><p>With the valid handle, the picture buffer is written to the device. If the handle is still valid, it will pass the handle to <strong>DeviceIoControl</strong>. <strong>DeviceIoControl</strong> as described by MS does the following </p><blockquote>Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation. </blockquote><p>With some quick googling, the control code that is sent is used to gather information about the <a href="https://docs.microsoft.com/en-us/windows/win32/api/winioctl/ni-winioctl-ioctl_disk_get_partition_info_ex">drive</a>. A check is then done to make sure that the result is valid and if it has a length of 144 or more. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-08-at-4.34.40-PM.png" class="kg-image"><figcaption>Reboot machine corrupting it entirely</figcaption></figure><!--kg-card-end: image--><p>If that check is successful, there is a final call to <strong>SetFilePointerAndWritePictureBuffer</strong>. This call takes in the handle of the same drive that was passed to DeviceIoControl. So in this case that would be the Harddisk0\\Partition0. This makes sense as it's the most critical portion of the system due to it containing the operating system and boot information. These effects won't have any effect as a lot of the required pieces for windows to run properly are held in memory while these overwrites are made to the hard disk. So this will require a full reboot for the corruption to take effect. As expected that call is made directly after the overwrite with a _system call to</p><blockquote>shutdown -r -f -t 2</blockquote><p>For a breakdown of the command, the -r signifies  the machine to restart, the -f forces applications to close without warning users, and the -t sets the time-out period to <em>2</em> seconds before the restart starts. </p><p>At this point Shamoon has gone through its entire infection chain and has successfully corrupted all the partitions and restarted the computer leaving the machine inoperable. </p><h2 id="shamoon-payload-pkcs12-conclusion">Shamoon Payload PKCS12 Conclusion</h2><p>This is the final payload in Shamoon's arsenal and once completed renders the machine inoperable. In conjunction with the communications module, Shamoon offers a powerful toolkit that proved by time allows the actors to reuse and adapt the codebase. </p><h2 id="shamoon-payload-x509-analysis">Shamoon Payload x509 Analysis</h2><p>Now if you've been paying attention you might have realized that I haven't touched on the x509 resource. This is due to the fact that the x509 resource is a product of the same exact code, just compiled for a 64 bit architecture. So the 64 bit version only has 2 resources. 1 being the communcations module and another being the actual wiper that contains the EldoS driver and corruption mechanism. Pictures of PE studio output can be found below but I feel that it is out of scope to dive deep into the 64 bit module as it shares almost exactly the same behavior as the 32 bit client. </p><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-14-at-3.15.19-PM.png" class="kg-image"></figure><!--kg-card-end: image--><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-14-at-3.15.32-PM.png" class="kg-image"></figure><!--kg-card-end: image--><h2 id="conclusion">Conclusion</h2><p>I hope this overview was able to help teach some about the history of the first Shamoon campaign the world has seen. This has been a work in progress for almost 6 months now and I've met a ton of great people. If there are any questions or mistakes feel free to reach out. I am a human as well and therefore make tons of mistakes just like the rest of the world. Any feedback about the content, length of post, or format of the post would also be greatly appreciated. I think going forward I will try to keep them a tad shorter and more frequent. If there is interest I will continue going over the next shamoon campaigns as there are signifcant changes to how strings are obfsucated, resources encrypted, and dropping techniques. Below are a couple of high level visuals and information that might prove useful to some. </p><h2 id="shamoon-2012-killchain">Shamoon 2012 Killchain</h2><!--kg-card-begin: image--><figure class="kg-card kg-image-card"><img src="https://malwareindepth.com/content/images/2019/12/Screen-Shot-2019-12-14-at-8.45.57-PM.png" class="kg-image"></figure><!--kg-card-end: image--><h2 id="iocs">IOCs</h2><!--kg-card-begin: html--><style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}
.tg .tg-fymr{font-weight:bold;border-color:inherit;text-align:left;vertical-align:top}
.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}
.tg .tg-0lax{text-align:left;vertical-align:top}
</style>
<table class="tg">
  <tr>
    <th class="tg-fymr">IOC Value<br></th>
    <th class="tg-fymr">Rationale<br></th>
  </tr>
  <tr>
    <td class="tg-0pky">4F02A9FCD2DEB3936EDE8FF009BD08662BDB1F365C0F4A78B3757A98C2F40400</td>
    <td class="tg-0pky">Known 2012 sample</td>
  </tr>
  <tr>
    <td class="tg-0pky">61E8F2AF61F15288F2364939A30231B8915CDC57717179441468690AC32CED54</td>
    <td class="tg-0pky">Known 2012 sample</td>
  </tr>
  <tr>
    <td class="tg-0pky">A37B8D77FDBD740D7D214F88521ADEC17C0D30171EC0DEE1372CB8908390C093</td>
    <td class="tg-0pky">Known 2012 sample</td>
  </tr>
  <tr>
    <td class="tg-0pky">F9D94C5DE86AA170384F1E2E71D95EC373536899CB7985633D3ECFDB67AF0F72</td>
    <td class="tg-0pky">Known 2012 sample</td>
  </tr>
  <tr>
    <td class="tg-0pky">http://10.1.252.19/ajax_modal/modal/data.asp?mydata=&amp;uid=&amp;state=CurrentMilliseconds</td>
    <td class="tg-0pky">URL scheme and hardcoded IP for internal C2 <br></td>
  </tr>
  <tr>
    <td class="tg-0pky">http://home/ajax_modal/modal/data.asp?mydata=&amp;uid=&amp;state=CurrentMilliseconds</td>
    <td class="tg-0pky">URL scheme and hardcoded IP for internal C2</td>
  </tr>
  <tr>
    <td class="tg-0pky">%windir%\inf\netft429.pnf</td>
    <td class="tg-0pky">Hardcoded file path for new detonation date</td>
  </tr>
  <tr>
    <td class="tg-0pky">%windir%\inf\netfb318.pnf</td>
    <td class="tg-0pky">Hardcoded file path for wiping completion status<br></td>
  </tr>
  <tr>
    <td class="tg-0pky">%system32%\drivers\drdisk.sys</td>
    <td class="tg-0pky">Hardcoded file path for the EldoS wiping driver to be written to</td>
  </tr>
  <tr>
    <td class="tg-0pky">c:\windows\temp\out17626867.txt</td>
    <td class="tg-0pky">Path contained within the Shamoon dropper</td>
  </tr>
  <tr>
    <td class="tg-0lax">\\System32\\cmd.exe /c \"ping -n 30 127.0.0.1 &gt;nul &amp;&amp; sc config TrkSvr binpath= system32\\trksrv.exe &amp;&amp; ping -n 10 127.0.0.1 &gt;nul &amp;&amp; sc start TrkSvr \"</td>
    <td class="tg-0lax">Hardcoded command used by Shamoon to start a service</td>
  </tr>
  <tr>
    <td class="tg-0lax">trksrv.exe</td>
    <td class="tg-0lax">x509 dropped filename</td>
  </tr>
  <tr>
    <td class="tg-0lax">%WINDIR%\Temp\filer.exe</td>
    <td class="tg-0lax">File received and executed from the internal C2<br></td>
  </tr>
  <tr>
    <td class="tg-0lax">f2.inf</td>
    <td class="tg-0lax">Data gathered from PKCS12 resource</td>
  </tr>
  <tr>
    <td class="tg-0lax">f1.inf</td>
    <td class="tg-0lax">Data gathered from PKCS12 resource</td>
  </tr>
</table><!--kg-card-end: html-->
        </div>
    </section>

    <footer class="post-full-footer">


            
<section class="author-card">
        <img class="author-profile-image" src="/content/images/size/w100/2019/05/Lectotipo-de-Myrtus-communis-var-tarentina-L-Herb-Clifford-184-Myrtus-1-g_Q320.jpg" alt="Myrtus 0x0" />
    <section class="author-card-content">
        <h4 class="author-card-name"><a href="/author/myrtus/">Myrtus 0x0</a></h4>
            <p>Read <a href="/author/myrtus/">more posts</a> by this author.</p>
    </section>
</section>
<div class="post-full-footer-right">
    <a class="author-card-button" href="/author/myrtus/">Read More</a>
</div>


    </footer>

    <section class="post-full-comments">
        <div id="disqus_thread"></div>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script>
    var disqus_shortname = 'malwareindepth';
    var disqus_config = function () {
        this.page.identifier = "ghost-5d25745f08b45a077bf3f660";
    };

    (function () {
        var d = document, s = d.createElement('script');
        s.src = 'https://' + disqus_shortname + '.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
</script>
<noscript>Please enable JavaScript to view the
    <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a>
</noscript>    </section>

</article>

<aside class="read-next outer">
    <div class="inner">

        <div class="read-next-feed">

                <article class="post-card post tag-nanocore tag-cypherit tag-malware tag-golang tag-python ">

    <a class="post-card-image-link" href="/defeating-nanocore-and-cypherit/">
        <img class="post-card-image"
            srcset="/content/images/size/w300/2020/02/Nanocore3Dplot.png 300w,
                    /content/images/size/w600/2020/02/Nanocore3Dplot.png 600w,
                    /content/images/size/w1000/2020/02/Nanocore3Dplot.png 1000w,
                    /content/images/size/w2000/2020/02/Nanocore3Dplot.png 2000w"
            sizes="(max-width: 1000px) 400px, 700px"
            src="/content/images/size/w600/2020/02/Nanocore3Dplot.png"
            alt="Nanocore &amp; CypherIT"
        />
    </a>

    <div class="post-card-content">

        <a class="post-card-content-link" href="/defeating-nanocore-and-cypherit/">

            <header class="post-card-header">
                    <span class="post-card-tags"><i class='fa fa-tag'></i> Nanocore</span>
                <h2 class="post-card-title">Nanocore &amp; CypherIT</h2>
            </header>

            <section class="post-card-excerpt">
                <p>Tools and analysis of the Nanocore malware family as well as the CypherIT crypter.</p>
            </section>

        </a>

        <footer class="post-card-meta">

            <span class="post-time">
                <i class='fa fa-calendar'></i>
                <time datetime="2020-04-04" class="timeago">5 years ago</time>
                <time datetime="2020-04-04" class="fulldate">April 4th, 2020</time>
            </span>

            <span class="reading-time">14 min read</span>

        </footer>

    </div>

</article>


        </div>
    </div>
</aside>

<div class="floating-header">
    <div class="floating-header-info">
        <div class="floating-header-logo">
            <a href="https://malwareindepth.com">
                <span>MalwareInDepth</span>
            </a>
        </div>
        <span class="floating-header-divider">&mdash;</span>
        <div class="floating-header-title">Shamoon 2012 Complete Analysis</div>
    </div>
    <div class="floating-header-share">
        <div class="floating-header-share-label">Share this <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
    <path d="M7.5 15.5V4a1.5 1.5 0 1 1 3 0v4.5h2a1 1 0 0 1 1 1h2a1 1 0 0 1 1 1H18a1.5 1.5 0 0 1 1.5 1.5v3.099c0 .929-.13 1.854-.385 2.748L17.5 23.5h-9c-1.5-2-5.417-8.673-5.417-8.673a1.2 1.2 0 0 1 1.76-1.605L7.5 15.5zm6-6v2m-3-3.5v3.5m6-1v2"/>
</svg>
</div>
        <a class="floating-header-share-tw" href="https://twitter.com/share?text=Shamoon%202012%20Complete%20Analysis&amp;url=https://malwareindepth.com/shamoon-2012/"
            onclick="window.open(this.href, 'share-twitter', 'width=550,height=235');return false;">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path d="M30.063 7.313c-.813 1.125-1.75 2.125-2.875 2.938v.75c0 1.563-.188 3.125-.688 4.625a15.088 15.088 0 0 1-2.063 4.438c-.875 1.438-2 2.688-3.25 3.813a15.015 15.015 0 0 1-4.625 2.563c-1.813.688-3.75 1-5.75 1-3.25 0-6.188-.875-8.875-2.625.438.063.875.125 1.375.125 2.688 0 5.063-.875 7.188-2.5-1.25 0-2.375-.375-3.375-1.125s-1.688-1.688-2.063-2.875c.438.063.813.125 1.125.125.5 0 1-.063 1.5-.25-1.313-.25-2.438-.938-3.313-1.938a5.673 5.673 0 0 1-1.313-3.688v-.063c.813.438 1.688.688 2.625.688a5.228 5.228 0 0 1-1.875-2c-.5-.875-.688-1.813-.688-2.75 0-1.063.25-2.063.75-2.938 1.438 1.75 3.188 3.188 5.25 4.25s4.313 1.688 6.688 1.813a5.579 5.579 0 0 1 1.5-5.438c1.125-1.125 2.5-1.688 4.125-1.688s3.063.625 4.188 1.813a11.48 11.48 0 0 0 3.688-1.375c-.438 1.375-1.313 2.438-2.563 3.188 1.125-.125 2.188-.438 3.313-.875z"/></svg>
        </a>
        <a class="floating-header-share-fb" href="https://www.facebook.com/sharer/sharer.php?u=https://malwareindepth.com/shamoon-2012/"
            onclick="window.open(this.href, 'share-facebook','width=580,height=296');return false;">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path d="M19 6h5V0h-5c-3.86 0-7 3.14-7 7v3H8v6h4v16h6V16h5l1-6h-6V7c0-.542.458-1 1-1z"/></svg>
        </a>
    </div>
    <progress id="reading-progress" class="progress" value="0">
        <div class="progress-container">
            <span class="progress-bar"></span>
        </div>
    </progress>
</div>



                </div>
            </div>
        </main>

        <div class="portrait">
            <footer class="site-footer">
    <div class="site-footer-content">
        <nav class="site-footer-subscribe">
            <a href="https://malwareindepth.com/rss/" target="_blank"><i class="fas fa-rss"></i>Subscribe via RSS</a>
            
        </nav>
        <nav class="site-footer-external">
            
            <a href="https://twitter.com/myrtus0x0" target="_blank" rel="noopener"><i class="fab fa-twitter"></i></a>
            <a href="https://github.com/myrtus0x0/" target="_blank" rel="noopener"><i class="fab fa-github"></i></a>
        </nav>
        <nav class="site-footer-text">
            <section class="copyright">&copy; <a href="https://malwareindepth.com">MalwareInDepth</a> 2025</section>
        </nav>
        <nav class="site-footer-text">
            <a href="https://ghost.org" target="_blank" rel="noopener">Ghost</a> &amp;
            <a href="https://github.com/dlecina/StayPuft" target="_blank" rel="noopener">StayPuft</a>
        </nav>
    </div>
</footer>        </div>

    </div>

    
    <script>
        var images = document.querySelectorAll('.kg-gallery-image img');
        images.forEach(function (image) {
            var container = image.closest('.kg-gallery-image');
            var width = image.attributes.width.value;
            var height = image.attributes.height.value;
            var ratio = width / height;
            container.style.flex = ratio + ' 1 0%';
        })
    </script>


    <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
    <script type="text/javascript" src="/assets/built/jquery.fitvids.js?v=88c8ed21c2"></script>

    <script type="text/javascript" src="/assets/js/jquery.ghosthunter.min.js?v=88c8ed21c2"></script>
    <script type="text/javascript" src="/assets/js/jquery.ghosthunter-staypuft.js?v=88c8ed21c2"></script>

    <script type="text/javascript" src="/assets/js/prism/prism-preprocessor.js?v=88c8ed21c2"></script>
    <script type="text/javascript" src="/assets/js/prism/prism.js?v=88c8ed21c2"></script>
    <script type="text/javascript">Prism.plugins.autoloader.languages_path = "https://malwareindepth.com/assets/js/prism/components/";</script>


    <script>

// NOTE: Scroll performance is poor in Safari
// - this appears to be due to the events firing much more slowly in Safari.
//   Dropping the scroll event and using only a raf loop results in smoother
//   scrolling but continuous processing even when not scrolling
$(document).ready(function () {
    // Start fitVids
    var $postContent = $(".post-full-content");
    $postContent.fitVids();
    // End fitVids

    var progressBar = document.querySelector('#reading-progress');
    var header = document.querySelector('.floating-header');
    var title = document.querySelector('.post-full-title');

    var lastScrollY = window.scrollY;
    var lastWindowHeight = window.innerHeight;
    var lastDocumentHeight = $(document).height();
    var ticking = false;

    function onScroll() {
        lastScrollY = window.scrollY;
        requestTick();
    }

    function onResize() {
        lastWindowHeight = window.innerHeight;
        lastDocumentHeight = $(document).height();
        requestTick();
    }

    function requestTick() {
        if (!ticking) {
            requestAnimationFrame(update);
        }
        ticking = true;
    }

    function update() {
        var trigger = title.getBoundingClientRect().top + window.scrollY;
        var triggerOffset = title.offsetHeight + 35;
        var progressMax = lastDocumentHeight - lastWindowHeight;

        // show/hide floating header
        if (lastScrollY >= trigger + triggerOffset) {
            header.classList.add('floating-active');
        } else {
            header.classList.remove('floating-active');
        }

        progressBar.setAttribute('max', progressMax);
        progressBar.setAttribute('value', lastScrollY);

        ticking = false;
    }

    window.addEventListener('scroll', onScroll, {passive: true});
    window.addEventListener('resize', onResize, false);

    update();

});
</script>


    

</body>
</html>
