
<!DOCTYPE html>
<!--[if lt IE 7 ]><html lang="en-GB" class="no-js ie ie6 lte7 lte8 lte9"><![endif]-->
<!--[if IE 7 ]><html lang="en-GB" class="no-js ie ie7 lte7 lte8 lte9"><![endif]-->
<!--[if IE 8 ]><html lang="en-GB" class="no-js ie ie8 lte8 lte9"><![endif]-->
<!--[if IE 9 ]><html lang="en-GB" class="no-js ie ie9 lte9"><![endif]-->
<!--[if (gt IE 9)|!(IE)]><!--><html lang="en-GB" class="no-js"><!--<![endif]-->
	
	<head>
		<!-- Global site tag (gtag.js) - Google Analytics -->
		<script async src="https://www.googletagmanager.com/gtag/js?id=UA-67981177-1" type="7e28dcd54f536f2053cb55c3-text/javascript"></script>
		<script type="7e28dcd54f536f2053cb55c3-text/javascript">
	  		window.dataLayer = window.dataLayer || [];
	  		function gtag(){dataLayer.push(arguments);}
	  		gtag('js', new Date());

	  		gtag('config', 'UA-67981177-1');
		</script>
		<meta charset="utf-8">
	    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
	    
	    <title>PART 3: How I Met Your Beacon - Brute Ratel - MDSec</title>
	           
		<!-- iPhone Scaling 1:1 (RESPONSIVE) -->
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
			    	   		
		<!-- Favicons Start -->
		<link rel="apple-touch-icon" sizes="57x57" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-57x57.png">
		<link rel="apple-touch-icon" sizes="60x60" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-60x60.png">
		<link rel="apple-touch-icon" sizes="72x72" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-72x72.png">
		<link rel="apple-touch-icon" sizes="76x76" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-76x76.png">
		<link rel="apple-touch-icon" sizes="114x114" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-114x114.png">
		<link rel="apple-touch-icon" sizes="120x120" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-120x120.png">
		<link rel="apple-touch-icon" sizes="144x144" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-144x144.png">
		<link rel="apple-touch-icon" sizes="152x152" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-152x152.png">
		<link rel="apple-touch-icon" sizes="180x180" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/apple-icon-180x180.png">
		<link rel="icon" type="image/png" sizes="192x192" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/android-icon-192x192.png">
		<link rel="icon" type="image/png" sizes="32x32" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/favicon-32x32.png">
		<link rel="icon" type="image/png" sizes="96x96" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/favicon-96x96.png">
		<link rel="icon" type="image/png" sizes="16x16" href="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/favicons/favicon-16x16.png">
		<link rel="manifest" href="/manifest.json">
		<meta name="msapplication-TileColor" content="#ffffff">
		<meta name="msapplication-TileImage" content="/ms-icon-144x144.png">
		<meta name="theme-color" content="#ffffff">
		<!-- Favicons End -->   
	        
		<!-- Typekit Fonts -->
		<!--<link rel="stylesheet" href="https://use.typekit.net/jsa1tji.css">-->
		<link rel="stylesheet" href="https://use.typekit.net/icv6vdt.css">
	    <meta name='robots' content='index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1' />
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	
	<!-- This site is optimized with the Yoast SEO plugin v26.0 - https://yoast.com/wordpress/plugins/seo/ -->
	<link rel="canonical" href="https://www.mdsec.co.uk/2022/08/part-3-how-i-met-your-beacon-brute-ratel/" />
	<meta property="og:locale" content="en_GB" />
	<meta property="og:type" content="article" />
	<meta property="og:title" content="PART 3: How I Met Your Beacon - Brute Ratel - MDSec" />
	<meta property="og:description" content="Introduction In part one, we introduced generic approaches to performing threat hunting of C2 frameworks and then followed it up with practical examples against Cobalt Strike in part two. In..." />
	<meta property="og:url" content="https://www.mdsec.co.uk/2022/08/part-3-how-i-met-your-beacon-brute-ratel/" />
	<meta property="og:site_name" content="MDSec" />
	<meta property="article:published_time" content="2022-08-03T08:38:02+00:00" />
	<meta property="article:modified_time" content="2022-08-03T13:49:26+00:00" />
	<meta property="og:image" content="https://www.mdsec.co.uk/wp-content/uploads/2019/11/tim-van-der-kuip-CPs2X8JYmS8-unsplash.jpg" />
	<meta property="og:image:width" content="1000" />
	<meta property="og:image:height" content="667" />
	<meta property="og:image:type" content="image/jpeg" />
	<meta name="author" content="Admin" />
	<meta name="twitter:card" content="summary_large_image" />
	<meta name="twitter:creator" content="@mdseclabs" />
	<meta name="twitter:site" content="@mdseclabs" />
	<meta name="twitter:label1" content="Written by" />
	<meta name="twitter:data1" content="Admin" />
	<meta name="twitter:label2" content="Estimated reading time" />
	<meta name="twitter:data2" content="32 minutes" />
	<script type="application/ld+json" class="yoast-schema-graph">{"@context":"https://schema.org","@graph":[{"@type":"Article","@id":"https://www.mdsec.co.uk/2022/08/part-3-how-i-met-your-beacon-brute-ratel/#article","isPartOf":{"@id":"https://www.mdsec.co.uk/2022/08/part-3-how-i-met-your-beacon-brute-ratel/"},"author":{"name":"Admin","@id":"https://www.mdsec.co.uk/#/schema/person/17b494d22ae189270c1e0e41b25fcae3"},"headline":"PART 3: How I Met Your Beacon &#8211; Brute Ratel","datePublished":"2022-08-03T08:38:02+00:00","dateModified":"2022-08-03T13:49:26+00:00","mainEntityOfPage":{"@id":"https://www.mdsec.co.uk/2022/08/part-3-how-i-met-your-beacon-brute-ratel/"},"wordCount":3168,"publisher":{"@id":"https://www.mdsec.co.uk/#organization"},"image":{"@id":"https://www.mdsec.co.uk/2022/08/part-3-how-i-met-your-beacon-brute-ratel/#primaryimage"},"thumbnailUrl":"https://www.mdsec.co.uk/wp-content/uploads/2019/11/tim-van-der-kuip-CPs2X8JYmS8-unsplash.jpg","articleSection":["ActiveBreach","Adversary Simulation","All","Nighthawk","Response"],"inLanguage":"en-GB"},{"@type":"WebPage","@id":"https://www.mdsec.co.uk/2022/08/part-3-how-i-met-your-beacon-brute-ratel/","url":"https://www.mdsec.co.uk/2022/08/part-3-how-i-met-your-beacon-brute-ratel/","name":"PART 3: How I Met Your Beacon - Brute Ratel - MDSec","isPartOf":{"@id":"https://www.mdsec.co.uk/#website"},"primaryImageOfPage":{"@id":"https://www.mdsec.co.uk/2022/08/part-3-how-i-met-your-beacon-brute-ratel/#primaryimage"},"image":{"@id":"https://www.mdsec.co.uk/2022/08/part-3-how-i-met-your-beacon-brute-ratel/#primaryimage"},"thumbnailUrl":"https://www.mdsec.co.uk/wp-content/uploads/2019/11/tim-van-der-kuip-CPs2X8JYmS8-unsplash.jpg","datePublished":"2022-08-03T08:38:02+00:00","dateModified":"2022-08-03T13:49:26+00:00","breadcrumb":{"@id":"https://www.mdsec.co.uk/2022/08/part-3-how-i-met-your-beacon-brute-ratel/#breadcrumb"},"inLanguage":"en-GB","potentialAction":[{"@type":"ReadAction","target":["https://www.mdsec.co.uk/2022/08/part-3-how-i-met-your-beacon-brute-ratel/"]}]},{"@type":"ImageObject","inLanguage":"en-GB","@id":"https://www.mdsec.co.uk/2022/08/part-3-how-i-met-your-beacon-brute-ratel/#primaryimage","url":"https://www.mdsec.co.uk/wp-content/uploads/2019/11/tim-van-der-kuip-CPs2X8JYmS8-unsplash.jpg","contentUrl":"https://www.mdsec.co.uk/wp-content/uploads/2019/11/tim-van-der-kuip-CPs2X8JYmS8-unsplash.jpg","width":1000,"height":667},{"@type":"BreadcrumbList","@id":"https://www.mdsec.co.uk/2022/08/part-3-how-i-met-your-beacon-brute-ratel/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://www.mdsec.co.uk/"},{"@type":"ListItem","position":2,"name":"PART 3: How I Met Your Beacon &#8211; Brute Ratel"}]},{"@type":"WebSite","@id":"https://www.mdsec.co.uk/#website","url":"https://www.mdsec.co.uk/","name":"MDSec","description":"Unrivalled Security Consulting &amp; Training","publisher":{"@id":"https://www.mdsec.co.uk/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https://www.mdsec.co.uk/?s={search_term_string}"},"query-input":{"@type":"PropertyValueSpecification","valueRequired":true,"valueName":"search_term_string"}}],"inLanguage":"en-GB"},{"@type":"Organization","@id":"https://www.mdsec.co.uk/#organization","name":"MDSec","url":"https://www.mdsec.co.uk/","logo":{"@type":"ImageObject","inLanguage":"en-GB","@id":"https://www.mdsec.co.uk/#/schema/logo/image/","url":"https://www.mdsec.co.uk/wp-content/uploads/2020/08/MDSec-Logo-Blue.png","contentUrl":"https://www.mdsec.co.uk/wp-content/uploads/2020/08/MDSec-Logo-Blue.png","width":1500,"height":1000,"caption":"MDSec"},"image":{"@id":"https://www.mdsec.co.uk/#/schema/logo/image/"},"sameAs":["https://x.com/mdseclabs"]},{"@type":"Person","@id":"https://www.mdsec.co.uk/#/schema/person/17b494d22ae189270c1e0e41b25fcae3","name":"Admin","image":{"@type":"ImageObject","inLanguage":"en-GB","@id":"https://www.mdsec.co.uk/#/schema/person/image/","url":"https://secure.gravatar.com/avatar/9cb7b62409a4b5ef00769dca4ba852fc49229c9729d600fc2637daf77068c31c?s=96&d=wp_user_avatar&r=g","contentUrl":"https://secure.gravatar.com/avatar/9cb7b62409a4b5ef00769dca4ba852fc49229c9729d600fc2637daf77068c31c?s=96&d=wp_user_avatar&r=g","caption":"Admin"},"sameAs":["https://x.com/mdseclabs"],"url":"https://www.mdsec.co.uk/author/dominic/"}]}</script>
	<!-- / Yoast SEO plugin. -->


<link rel='stylesheet' id='wp-block-library-css' href='https://www.mdsec.co.uk/wp-includes/css/dist/block-library/style.min.css?ver=ce7416ee64a484028bd7fd3bdcf6a360' type='text/css' media='all' />
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='taxonomy-image-plugin-public-css' href='https://www.mdsec.co.uk/wp-content/plugins/taxonomy-images/css/style.css?ver=0.9.6' type='text/css' media='screen' />
<link rel='stylesheet' id='style-css' href='https://www.mdsec.co.uk/wp-content/themes/mdsec/css/style.css?ver=1.1.5' type='text/css' media='all' />
<link rel='stylesheet' id='prism-css-css' href='https://www.mdsec.co.uk/wp-content/themes/mdsec/css/solarized_dark.css?ver=1' type='text/css' media='all' />
<link rel='stylesheet' id='flickity-css-css' href='https://www.mdsec.co.uk/wp-content/themes/mdsec/css/flickity.min.css?ver=1' type='text/css' media='all' />
<link rel='stylesheet' id='hamburger-css-css' href='https://www.mdsec.co.uk/wp-content/themes/mdsec/css/hamburgers.css?ver=1' type='text/css' media='all' />
<link rel='stylesheet' id='font-awesome-css' href='https://www.mdsec.co.uk/wp-content/themes/mdsec/css/font-awesome.min.css?ver=ce7416ee64a484028bd7fd3bdcf6a360' type='text/css' media='all' />
<!--[if lt IE 9]>
<script type="text/javascript" src="https://www.mdsec.co.uk/wp-content/themes/mdsec/js/html5shiv.js?ver=3.7.3" id="html5js-js"></script>
<![endif]-->
<!--[if lt IE 9]>
<script type="text/javascript" src="https://www.mdsec.co.uk/wp-content/themes/mdsec/js/respond.js?ver=1.3.1" id="respond-script-js"></script>
<![endif]-->
<!--[if lt IE 9]>
<script type="text/javascript" src="https://www.mdsec.co.uk/wp-content/themes/mdsec/js/selectivizr-min.js?ver=1.0.2" id="selectivizr-script-js"></script>
<![endif]-->
<link rel="https://api.w.org/" href="https://www.mdsec.co.uk/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://www.mdsec.co.uk/wp-json/wp/v2/posts/3031" /><link rel='shortlink' href='https://www.mdsec.co.uk/?p=3031' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://www.mdsec.co.uk/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.mdsec.co.uk%2F2022%2F08%2Fpart-3-how-i-met-your-beacon-brute-ratel%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://www.mdsec.co.uk/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.mdsec.co.uk%2F2022%2F08%2Fpart-3-how-i-met-your-beacon-brute-ratel%2F&#038;format=xml" />
		<style type="text/css" id="wp-custom-css">
			.insights-content p
{
	font-family: titling-gothic-fb,sans-serif;
	color: #777a85;
}

.insights-content ul li
{
	font-family: titling-gothic-fb,sans-serif;
color: #777a85;
}


.insights-content h2
{
	font-family: fabrikat_mono_regular;
	font-weight: bold;
}

.insights-content figure
{
	justify-content: center;
}

.insights-content .wp-block-code code {
    max-width: 1000px;
    display: block;
    overflow-x: auto;
    color: #839496;
    margin: 0 auto;
    -webkit-text-size-adjust: none;
    font-size: 1.3rem;
    line-height: 20px;
		padding: 2px 0px;
}		</style>
					    
	</head>
	    
	<body class="wp-singular post-template-default single single-post postid-3031 single-format-standard wp-theme-mdsec">
    <!--[if lt IE 7]>
        <div class="browse-happy">
        	 <a href="https://www.mdsec.co.uk">
				<div id="logo">Logo</div>
			</a>
        	<p>You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
        </div>    	
    <![endif]-->              
	
	<!-- Site Wrapper Start --> 
	<div class="site-wrapper">
		
	<!-- Header Start --> 
	<header class="clearfix">
		<div class="logo">
			<a href="https://www.mdsec.co.uk" title="MDSec">
				<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 188.3 50" style="enable-background:new 0 0 188.3 50;" xml:space="preserve">
				<g>
					<g>
						<path class="st0" d="M71.3,49.7V33.1l-7.7,16.5h-5.9l-7.5-16.5v16.5h-5.7V24.9h7.7l8.5,18.9l8.7-18.9H77v24.8H71.3z"/>
						<path class="st0" d="M95.8,49.7H80V24.9h15.6c5.7,0,9,1.6,10.6,4.4c1.2,1.8,1.6,4,1.6,7.6c0,3.9-0.4,6.1-1.5,8
							C104.7,47.9,101.4,49.7,95.8,49.7z M101.9,37c0-2.1-0.3-3.9-1-4.8c-1.1-1.7-2.9-2.5-6.2-2.5H86v15h8.6c3.4,0,5.3-0.8,6.4-2.4
							C101.7,41.3,101.9,39.3,101.9,37z"/>
						<path class="st0" d="M125.2,50c-8.7,0-13.1-2.8-13.4-7.9h2.8c0.2,3.7,4.1,5.4,10.6,5.4c6.9,0,9.3-1.8,9.3-4.5c0-2.9-2.1-4.1-9.9-5
							c-5.9-0.7-12.3-1.4-12.3-6.8c0-3.6,3.1-6.7,11.8-6.7c8.5,0,11.9,3.5,12.7,7.3h-2.9c-0.7-2.9-3.5-4.8-9.9-4.8
							c-6.3,0-8.9,1.7-8.9,4.1c0,3.4,4.9,3.9,10.1,4.4c7.5,0.8,12.1,2.1,12.1,7.2C137.3,47.2,133.8,50,125.2,50z"/>
						<path class="st0" d="M151.9,50c-7.3,0-11.6-2.8-11.6-9.2c0-5.8,4.3-8.9,11.5-8.9c8.1,0,11.7,4,11.4,10h-20.3c0.1,3.8,3.5,6,9.2,6
							c5.9,0,7.9-2.2,8.3-3.5h2.6C162.2,47.2,159.3,50,151.9,50z M151.7,34c-5.8,0-8.9,2.3-8.9,5.8h17.7C160.5,36.4,157.9,34,151.7,34z"
							/>
						<path class="st0" d="M185.7,38.5c-0.1-0.8-0.3-1.4-0.9-2c-1.2-1.4-3.7-2.4-7.4-2.4c-3.8,0-6.4,0.9-7.9,2.7c-0.9,1-1.2,2.4-1.2,4.2
							c0,1.9,0.4,3.3,1.3,4.3c1.4,1.7,4.1,2.5,7.9,2.5c3.7,0,5.9-0.7,7.2-1.9c0.6-0.6,1-1.5,1.1-2.2h2.6c-0.2,1.3-0.7,2.6-1.6,3.5
							C185,49,182,50,177.3,50c-4.8,0-8.1-1.1-9.9-3.3c-1.2-1.4-1.8-3.3-1.8-5.8c0-2.3,0.6-4.2,1.7-5.6c1.9-2.2,5.3-3.5,9.9-3.5
							c5.3,0,8.4,1.5,9.8,3.5c0.8,1,1,2.1,1.1,3.2H185.7z"/>
					</g>
					<path class="st0" d="M31,44.1H2c-1.1,0-2,0.9-2,2v3.5h32.9V46C32.9,45,32,44.1,31,44.1z"/>
					<path class="st0" d="M19.5,19.2l0.3,0c0.9-0.1,1.6-0.4,2.3-0.9l0,0l3,2.5c0.3,0.3,0.7,0.5,1.1,0.6c1.2,0.3,2.4-0.2,3-1.2l1.8-1.9
						c0.3-0.3,0.3-0.7,0.1-1l-5.4-7.5C25.2,9.3,25,8.6,24.8,8c-0.2-1.1-0.9-2-1.9-2.5l-3.7-1.9l2.5-2.5l0,0c0,0-0.1-0.1-0.1-0.1
						c-0.6-0.6-1.4-1-2.3-1c-0.6,0-1.1,0.1-1.6,0.4l0,0l-7.7,3.3l0,0c-4.7,2-8,6.7-8,12.1v2L5.9,14v2.7L2,20.5v2.7l3.8-3.8v2.7L2,25.9
						v2.7l3.8-3.8v2.7L2,31.4v1.7h3.9L2,37V42H31v-0.7c0-7.7-3.2-12.2-6.5-14.4c-2.4-1.6-8.1-3.3-8.1-8.4c0.8,0.5,1.8,0.8,2.8,0.8
						C19.3,19.2,19.4,19.2,19.5,19.2z"/>
				</g>
				</svg>
			</a>
		</div>
							
		<!-- Navigation Start -->   
		<nav role="navigation" class="main-navigation" id="main-navigation">        		
    		<ul id="menu-main-navigation" class="clearfix"><li id="menu-item-367" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-367"><a href="#">Our Services</a></li>
<li id="menu-item-368" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-368"><a href="#">Knowledge Centre</a></li>
<li id="menu-item-19" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-19"><a href="https://www.mdsec.co.uk/about/">About</a></li>
<li id="menu-item-20" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-20"><a href="https://www.mdsec.co.uk/contact/">Contact</a></li>
</ul>		</nav>
		<!-- Navigation End--> 	
		
		<!-- Navigation Start -->   
		<nav role="navigation" class="mobile-navigation" id="mobile-navigation">        		
    		<ul id="menu-mobile-navigation" class="clearfix"><li id="menu-item-373" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-373"><a href="#">Our Services</a>
<ul class="sub-menu">
	<li id="menu-item-374" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-374"><a href="https://www.mdsec.co.uk/our-services/adversary-simulation/">Adversary Simulation</a></li>
	<li id="menu-item-375" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-375"><a href="https://www.mdsec.co.uk/our-services/application-security/">Application Security</a></li>
	<li id="menu-item-376" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-376"><a href="https://www.mdsec.co.uk/our-services/penetration-testing/">Penetration Testing</a></li>
	<li id="menu-item-377" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-377"><a href="https://www.mdsec.co.uk/our-services/response/">Response</a></li>
</ul>
</li>
<li id="menu-item-378" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-378"><a href="#">Knowledge Centre</a>
<ul class="sub-menu">
	<li id="menu-item-379" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-379"><a href="https://www.mdsec.co.uk/knowledge-centre/insights/">Insights</a></li>
	<li id="menu-item-380" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-380"><a href="https://www.mdsec.co.uk/knowledge-centre/research/">Research</a></li>
	<li id="menu-item-381" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-381"><a href="https://www.mdsec.co.uk/knowledge-centre/training/">Training</a></li>
</ul>
</li>
<li id="menu-item-371" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-371"><a href="https://www.mdsec.co.uk/about/">About</a></li>
<li id="menu-item-372" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-372"><a href="https://www.mdsec.co.uk/contact/">Contact</a></li>
</ul>		</nav>
		<!-- Navigation End--> 		
		
		
		<div class="menu-toggle">
			<button class="hamburger hamburger--slider" type="button">
				<span class="hamburger-box">
					<span class="hamburger-inner"></span>
				</span>
			</button>		
		</div>		   	       		
	</header>
    <!-- Header End --> 
		
		
	<div class="subnav">
		<section class="content-wrapper">
			<ul class="service-list clearfix">
				<li class="item">
					<a href="https://www.mdsec.co.uk/our-services/adversary-simulation/">
						<div class="service-icon">
							<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/icons/icon-adversary.svg" alt="Adversary">
						</div>
						<hgroup>
							<h2>
								Adversary Simulation
							</h2>
						</hgroup>
						<p>Our best in class red team can deliver a holistic cyber attack simulation to provide a true evaluation of your organisation&#8217;s cyber resilience.</p>
						
					</a>
				</li>
				<li class="item">
					<a href="https://www.mdsec.co.uk/our-services/applicaton-security/">
						<div class="service-icon">
							<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/icons/icon-application-security.svg" alt="Application Security">
						</div>
						<hgroup>
							<h2>
								Application <br>Security
							</h2>
						</hgroup>
						<p>Leverage the team behind the industry-leading Web Application and Mobile Hacker’s Handbook series.</p>
					</a>
				</li>
				<li class="item">
					<a href="https://www.mdsec.co.uk/our-services/penetration-testing/">
						<div class="service-icon">
							<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/icons/icon-penetration-testing.svg" alt="Penetration Testing">
						</div>
						<hgroup>
							<h2>
								Penetration <br>Testing
							</h2>
						</hgroup>
						<p>MDSec’s penetration testing team is trusted by companies from the world’s leading technology firms to global financial institutions.</p>
					</a>
				</li>
				<li class="item">
					<a href="https://www.mdsec.co.uk/our-services/response/">
						<div class="service-icon">
							<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/icons/icon-response.svg" alt="Response">
						</div>
						<hgroup>
							<h2>
								Response
							</h2>
						</hgroup>
						<p>Our certified team work with customers at all stages of the Incident Response lifecycle through our range of proactive and reactive services.</p>
					</a>
				</li>
			</ul>
		</section>		
	</div>
	<div class="subnav-kc">
		<section class="content-wrapper">
			<ul class="service-list clearfix">
				<li>
					<a href="https://www.mdsec.co.uk/knowledge-centre/research/">
						<hgroup>
							<h2>
								Research
							</h2>
						</hgroup>
						<p>MDSec&#8217;s dedicated research team periodically releases white papers, blog posts, and tooling.</p>
					</a>
				</li>
				<li>
					<a href="https://www.mdsec.co.uk/knowledge-centre/training/">
						<hgroup>
							<h2>
								Training
							</h2>
						</hgroup>
						<p>MDSec&#8217;s training courses are informed by our security consultancy and research functions, ensuring you benefit from the latest and most applicable trends in the field.</p>
					</a>
				</li>
				<li>
					<a href="https://www.mdsec.co.uk/knowledge-centre/insights/">
						<hgroup>
							<h2>
								Insights
							</h2>
						</hgroup>
						<p>View insights from MDSec&#8217;s consultancy and research teams.</p>
					</a>
				</li>
			</ul>
		</section>		
	</div>		

	
	<section class="insights-single-header">
		<div class="content-wrapper">
			<div class="the-category">
			<span class="category">ActiveBreach</span>			</div>
			<h1>PART 3: How I Met Your Beacon &#8211; Brute Ratel</h1>
		</div>
	</section>

	<section class="full-width-wrapper white pad20-120">
		<div class="content-wrapper">
			<div class="breadcrumb-wrapper">
				<div id="breadcrumbs">
					<span>
						<span><a href="https://www.mdsec.co.uk/" >Home</a> &gt; 
							<span>
							<a href="https://www.mdsec.co.uk/knowledge-centre/" >Knowledge Centre</a> &gt; 
							<a href="https://www.mdsec.co.uk/knowledge-centre/insights" >Insights</a> &gt;
								<span class="breadcrumb_last" aria-current="page">PART 3: How I Met Your Beacon &#8211; Brute Ratel</span>
							</span>
						</span>
					</span>
				</div>
			</div>	

		</div>
		
		<div class="insights-content">
		
<h2 class="wp-block-heading">Introduction</h2>



<p>In <a href="https://www.mdsec.co.uk/2022/07/part-1-how-i-met-your-beacon-overview/" target="_blank" rel="noreferrer noopener">part one</a>, we introduced generic approaches to performing threat hunting of C2 frameworks and then followed it up with practical examples against Cobalt Strike in <a href="https://www.mdsec.co.uk/2022/07/part-2-how-i-met-your-beacon-cobalt-strike/" target="_blank" rel="noreferrer noopener">part two</a>.</p>



<p>In part three of this series, we will analyse Brute Ratel, a command and control framework developed by <a href="https://bruteratel.com" target="_blank" rel="noreferrer noopener">Dark Vortex</a>. As the C2 is lesser known, we can see it describes itself as follows:</p>



<figure class="wp-block-image size-large is-style-default"><img fetchpriority="high" decoding="async" width="960" height="114" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-960x114.png" alt="" class="wp-image-3032" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-960x114.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-768x91.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-1536x183.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-1920x228.png 1920w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-375x45.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image.png 2000w" sizes="(max-width: 960px) 100vw, 960px" /></figure>



<p>The framework has come under close scrutiny in the past few months, having been allegedly abused by <a href="https://unit42.paloaltonetworks.com/brute-ratel-c4-tool/" target="_blank" rel="noreferrer noopener">APT29</a> and the ransomware group <a href="https://www.sophos.com/en-us/press-office/press-releases/2022/07/blackcat-adds-brute-ratel-to-attack-tools" target="_blank" rel="noreferrer noopener">BlackCat</a> in recent times. Having an understanding of how we can generically detect this emerging C2 in our infrastructure is therefore useful intelligence for defenders.</p>



<p>Originally, all analysis was performed on Brute Ratel v1.0.7; the latest at the time of original review. However, a cursory update (contained at the end of this article) was performed discussing findings pertinent to v1.1 which was released shortly after our initial x33fcon presentation. One thing that should be noted with Brute Ratel is that the badger has only limited malleability and primarily from the perspective of the c2 channels; with the exception of v1.1 which added malleability for the sleep obfuscation techniques. As such it makes it possible to create very specific detections for the tool.</p>



<h2 class="wp-block-heading"><strong>Brute Ratel’s Loader</strong></h2>



<p>Brute Ratel’s badger comes in a number of forms, including exe, DLL and shellcode. When the badger is injected, its reflective loader will instantly load all dependencies required for the badger. As the badger bundles a large amount of post-exploitation features, this leads to a significant number of DLLs being loaded on initialisation:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-1-960x646.png" alt="" class="wp-image-3033" width="720" height="485" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-1-960x646.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-1-768x517.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-1-1536x1033.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-1-375x252.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-1.png 1638w" sizes="(max-width: 720px) 100vw, 720px" /></figure>



<p>As we can see, the DLLs highlighted are all the DLLs that are loaded when the badger is injected. This list includes the loading of winhttp.dll and wininet.dll, which are not necessarily nefarious but are traditional loads for an egress beacon. There are however a number of less common DLLs loaded, such as dbghelp.dll, credui.dll samcli.dll and logoncli.dll amongst others.</p>



<p>This behaviour allows us to create a signature for the image loads and leads to a high signal indicator that can be hunted for through image load telemetry.</p>



<p>For example, using Elastic Query Language, we can search for the sequence of credui.dll, dbghelp.dll and winhttp.dll load events occurring in a process within 60 seconds of each other:</p>



<pre class="wp-block-code"><code>sequence by Image with maxspan=1m
	&#91;any where ImageLoaded == 'C:\\Windows\\System32\\credui.dll']
	&#91;any where ImageLoaded == 'C:\\Windows\\System32\\dbghelp.dll']
	&#91;any where ImageLoaded == 'C:\\Windows\\System32\\winhttp.dll']</code></pre>



<p>Using the EQL tool, or Elastic’s cloud, we can search our event data, such as the following which was extracted from sysmon logs. Note, we’re explicitly excluding the badger executable itself so we can only identify the injected badgers:</p>



<pre class="wp-block-code"><code>eql query -f sysmon-data.json "sequence by Image with maxspan=2m &#91;any where ImageLoaded == 'C:\\Windows\\System32\\credui.dll' and Image != 'C:\\Users\\bob\\Desktop\\badger_x64_aws.exe'] &#91;any where ImageLoaded == 'C:\\Windows\\System32\\dbghelp.dll' and Image != 'C:\\Users\\bob\\Desktop\\badger_x64_aws.exe'] &#91;any where ImageLoaded == 'C:\\Windows\\System32\\winhttp.dll' and Image != 'C:\\Users\\bob\\Desktop\\badger_x64_aws.exe']"</code></pre>



<p>This leads to the following which shows the detection of the badger being injected in to notepad.exe:</p>



<figure class="wp-block-image size-large is-style-default"><img decoding="async" width="960" height="243" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-2-960x243.png" alt="" class="wp-image-3034" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-2-960x243.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-2-768x194.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-2-1536x389.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-2-1920x486.png 1920w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-2-375x95.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-2.png 2000w" sizes="(max-width: 960px) 100vw, 960px" /></figure>



<p>This query is particularly powerful as it allows us to retrospectively hunt for indicators of Brute Ratel badgers in the network, without directly running code on the endpoints.</p>



<h2 class="wp-block-heading"><strong>Brute Ratel In Memory</strong></h2>



<p>As most beacons remain memory resident, it is important to understand the footprint that is left behind in order to hunt for them. Reviewing the Brute Ratel documentation for the 1.0 release, it details its own implementation of obfuscate and sleep:</p>



<figure class="wp-block-image size-large is-style-default"><img loading="lazy" decoding="async" width="960" height="119" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-3-960x119.png" alt="" class="wp-image-3035" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-3-960x119.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-3-768x95.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-3-1536x190.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-3-1920x238.png 1920w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-3-375x47.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-3.png 2000w" sizes="auto, (max-width: 960px) 100vw, 960px" /></figure>



<p>According to the release post, BRc4 uses a mixture of “Asynchronous Procedure Calls, Windows Event Creation, Wait Objects and Timers”. However, analysis of the badger was only able to find evidence of APC based execution; more on this later.</p>



<p>In order to analyse the badger in memory, we first inject it to a process using the pcinject command, then put the badger to sleep using the sleep command:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-4-960x473.png" alt="" class="wp-image-3036" width="720" height="355" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-4-960x473.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-4-768x378.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-4-1536x756.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-4-1920x946.png 1920w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-4-375x185.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-4.png 2000w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<p>Once the badger is sleeping, we can recover the strings from the process using Process Hacker. Interestingly, while the badger is sleeping we can see strings such as the following:</p>



<figure class="wp-block-image size-full is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-5.png" alt="" class="wp-image-3038" width="603" height="217" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-5.png 804w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-5-768x276.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-5-375x135.png 375w" sizes="auto, (max-width: 603px) 100vw, 603px" /></figure>



<p>Initially this was quite surprising given the aforementioned purported sleep and obfuscate strategies described on the Brute Ratel blog.</p>



<p>Digging deeper, we can find that some interesting design decisions have been made where by many of the strings displayed in the operator’s UI, are populated from the badger itself. For example, we can see the following in the memory of the badger while it is sleeping:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-6-960x492.png" alt="" class="wp-image-3039" width="720" height="369" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-6-960x492.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-6-768x394.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-6-375x192.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-6.png 1020w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<p>And these strings are then returned to the UI as we can see below:</p>



<figure class="wp-block-image size-full is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-7.png" alt="" class="wp-image-3040" width="521" height="179" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-7.png 695w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-7-375x129.png 375w" sizes="auto, (max-width: 521px) 100vw, 521px" /></figure>



<p>Digging deeper in to the badger, it was quickly apparent that only the .text section was being obfuscated on sleep, leaving the badger susceptible to all manner of signatures against strings and data.</p>



<p>To illustrate this, reversing the badger we can see the entry point for the loader as “bruteloader”:</p>



<figure class="wp-block-image size-large is-style-default"><img loading="lazy" decoding="async" width="960" height="221" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-8-960x221.png" alt="" class="wp-image-3041" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-8-960x221.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-8-768x177.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-8-375x86.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-8.png 1336w" sizes="auto, (max-width: 960px) 100vw, 960px" /></figure>



<p>Searching for this string in memory while the badger is sleeping, we can quickly find it inside our notepad process:</p>



<figure class="wp-block-image size-large is-style-default"><img loading="lazy" decoding="async" width="960" height="128" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-9-960x128.png" alt="" class="wp-image-3042" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-9-960x128.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-9-768x102.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-9-375x50.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-9.png 1240w" sizes="auto, (max-width: 960px) 100vw, 960px" /></figure>



<p>These strings provide a good point on which to base a Yara rule for memory scanning on. For example, the following rule will search for either the bruteloader or bhttp_x64.dll strings in memory of a process:</p>



<pre class="wp-block-code"><code>rule brc4_badger_strings
{
meta:
    author = "@domchell"
    description = "Identifies strings used in Badger v1.0.x rDLL, even while sleeping"
strings:
    $a = "bruteloader"
    $b = "bhttp_x64.dll"
condition:
    1 of them
}</code></pre>



<p>We can test these against our notepad process while the badger is sleeping to evidence its effectiveness:</p>



<figure class="wp-block-image size-full is-style-default"><img loading="lazy" decoding="async" width="618" height="151" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-10.png" alt="" class="wp-image-3045" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-10.png 618w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-10-375x92.png 375w" sizes="auto, (max-width: 618px) 100vw, 618px" /></figure>



<p>It is unlikely the strings will exist in other processes, and using a simple one liner we can quickly find all the injected badgers on our test system:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-11-960x479.png" alt="" class="wp-image-3046" width="720" height="359" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-11-960x479.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-11-768x383.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-11-375x187.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-11.png 1196w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<p>Plugging this Yara rule in to virus total, we can quickly find <a href="https://www.virustotal.com/gui/file/c70b1fd133737a21904159ed2a867e0105060ac74937472da5e4d0e1f6fa1645" target="_blank" rel="noreferrer noopener">other samples</a>, such as:</p>



<figure class="wp-block-image size-large is-style-default"><img loading="lazy" decoding="async" width="960" height="149" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-12-960x149.png" alt="" class="wp-image-3047" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-12-960x149.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-12-768x119.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-12-1536x239.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-12-1920x299.png 1920w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-12-375x58.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-12.png 2000w" sizes="auto, (max-width: 960px) 100vw, 960px" /></figure>



<h2 class="wp-block-heading"><strong>Page Permissions</strong></h2>



<p>Analysis of the Brute Ratel obfuscate and sleep strategy observed the badger to shuffle the page permissions for the badger during sleep in an attempt to evade prolonging executable permissions while the badger sleeps.</p>



<p>Below, we can see the badger operating on a sleep 0, the page permissions for the badger are PAGE_EXECUTE_READ on an unmapped page; this is necessary in order to perform tasking:</p>



<figure class="wp-block-image size-large is-style-default"><img loading="lazy" decoding="async" width="960" height="279" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-13-960x279.png" alt="" class="wp-image-3048" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-13-960x279.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-13-768x223.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-13-1536x446.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-13-375x109.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-13.png 1584w" sizes="auto, (max-width: 960px) 100vw, 960px" /></figure>



<p>Putting the badger to sleep, we can see that the obfuscate and sleep strategy obfuscates the .text section and resets the page permissions for the badger to to PAGE_READWRITE:</p>



<figure class="wp-block-image size-large is-style-default"><img loading="lazy" decoding="async" width="960" height="379" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-14-960x379.png" alt="" class="wp-image-3049" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-14-960x379.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-14-768x303.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-14-1536x607.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-14-375x148.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-14.png 1590w" sizes="auto, (max-width: 960px) 100vw, 960px" /></figure>



<p>Interestingly, we however note that this behaviour is not replicated while a SMB pivot is being performed, that is when two badgers are linked. Here we can see our two badgers linked and both on a 60 second sleep:</p>



<figure class="wp-block-image size-large is-style-default"><img loading="lazy" decoding="async" width="960" height="110" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-15-960x110.png" alt="" class="wp-image-3050" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-15-960x110.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-15-768x88.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-15-1536x177.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-15-1920x221.png 1920w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-15-375x43.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-15.png 2000w" sizes="auto, (max-width: 960px) 100vw, 960px" /></figure>



<p>Analysis of the page permissions while two badgers are linked reveals that both remain PAGE_EXECUTE_READ, irrespective of the sleep time:</p>



<figure class="wp-block-image size-large is-style-default"><img loading="lazy" decoding="async" width="960" height="188" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-16-960x188.png" alt="" class="wp-image-3051" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-16-960x188.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-16-768x150.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-16-1536x301.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-16-375x73.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-16.png 1910w" sizes="auto, (max-width: 960px) 100vw, 960px" /></figure>



<p>The conclusion is that the obfuscate and sleep strategy is only applicable to the .text section, and while no peer-to-peer pivot is present.</p>



<p>Curious to how the obfuscate and sleep functionality worked, we began to reverse engineer it. Walking through the sleep routine in windbg, we can get an initial flavour of what’s happening; the badger is using WaitForSingleObjectEx to delay execution during a series of asynchronous procedure calls (APC), and leveraging an indirect syscall to execute NtTestAlert and force an alert on the thread:</p>



<figure class="wp-block-image size-large is-style-default"><img loading="lazy" decoding="async" width="960" height="398" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-17-960x398.png" alt="" class="wp-image-3052" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-17-960x398.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-17-768x318.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-17-1536x637.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-17-375x155.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-17.png 1544w" sizes="auto, (max-width: 960px) 100vw, 960px" /></figure>



<p>Diving in to IDA, we can get a better feel for what is happening. First it creates a new thread with the start address spoofed to a fixed location of TpReleaseCleanupGroupMembers+550:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-18-960x990.png" alt="" class="wp-image-3053" width="720" height="743" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-18-960x990.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-18-768x792.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-18-375x387.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-18.png 1364w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<p>A series of context structures are then created for a number of function calls, to NtWaitForSingleObject, NtProtectVirtualMemory, , SystemFunction032, NtGetContextThread and SetThreadContext:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-19-960x990.png" alt="" class="wp-image-3054" width="720" height="743" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-19-960x990.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-19-768x792.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-19-375x387.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-19.png 1364w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<p>Next, a number of APCs are queued against the NtContinue, with the intention of using it to proxy calls to the aforementioned context structures; this technique acts as a rudimentary form of ROP:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-20-960x710.png" alt="" class="wp-image-3055" width="720" height="533" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-20-960x710.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-20-768x568.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-20-1536x1135.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-20-375x277.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-20.png 1902w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<p>Having reverse engineered the sleeping technique, we soon realised that it it was very similar to  <a href="https://twitter.com/ilove2pwn_" target="_blank" rel="noreferrer noopener">@ilove2pwn_</a>’s <a href="https://github.com/SecIdiot/FOLIAGE/blob/master/source/sleep.c" target="_blank" rel="noreferrer noopener">Foliage</a> project, with the exception of the hardcoded thread start address.</p>



<p>Despite extensive debugging and reverse engineering of the badger, we unable to reveal any evidence of the “Windows Event Creation, Wait Objects and Timers” techniques referenced in the v1.0 blog post; indeed the APIs required for these techniques did not appear to be imported via the badger’s hashed imports.</p>



<h2 class="wp-block-heading"><strong>Brute Ratels Threads</strong></h2>



<p>To analyse how Brute Ratel threads look in memory, we injected the badger in to a fresh copy of notepad. Immediately, we can see there are some suspicious indicators in the threads used by the sleeping badger.</p>



<p>Firstly, we note that there is a suspicious looking thread with a 0x0 start address, and a single frame calling WaitForSingleObjectEx in the call stack:</p>



<figure class="wp-block-image size-full is-style-default"><img loading="lazy" decoding="async" width="369" height="137" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-21.png" alt="" class="wp-image-3056"/></figure>



<p>We can speculate that this thread is used for the HTTP comms based on analysis of the thread call stack while the badger is now sleeping:</p>



<figure class="wp-block-image size-full is-style-default"><img loading="lazy" decoding="async" width="407" height="190" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-22.png" alt="" class="wp-image-3057" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-22.png 407w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-22-375x175.png 375w" sizes="auto, (max-width: 407px) 100vw, 407px" /></figure>



<p>Based on the information we gained from reverse engineering the obfuscate and sleep strategy, we noted that new threads were created with a hardcoded spoofed start address of ntdll!TpReleaseCleanupGroupMembers+0x550:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-23-960x475.png" alt="" class="wp-image-3058" width="720" height="356" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-23-960x475.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-23-768x380.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-23-375x186.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-23.png 1073w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<p>We were unable to find any instances of this occurring as a start address naturally, and as such leads to a trivial indicator for hunting Brute Ratel threads. In practice this looks as follows within our injected notepad process:</p>



<figure class="wp-block-image size-full is-style-default"><img loading="lazy" decoding="async" width="719" height="313" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-24.png" alt="" class="wp-image-3059" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-24.png 719w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-24-375x163.png 375w" sizes="auto, (max-width: 719px) 100vw, 719px" /></figure>



<p>The call stack for the thread is also slightly irregular as it not only contains calls to delay execution, but also the first frame points to ntdll.dll!NtTerminateJobObject+0x1f. A deeper look at why NtNerminateJobObject is used highlights that this is simply a ROP gadget for NtTestAlert and is used to execute pending APCs on the thread:</p>



<figure class="wp-block-image size-large is-style-default"><img loading="lazy" decoding="async" width="960" height="398" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-25-960x398.png" alt="" class="wp-image-3060" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-25-960x398.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-25-768x318.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-25-1536x637.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-25-375x155.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-25.png 1544w" sizes="auto, (max-width: 960px) 100vw, 960px" /></figure>



<h2 class="wp-block-heading"><strong>Memory Hooks</strong></h2>



<p>In our first post in this series, we detailed two potential approaches for detecting in-memory beacons based on memory hooks; by looking for signatures of known patches (e.g. ret to ntdll.dll!EtwEventWrite) and by detecting copy on write operations.</p>



<p>Applying these concepts to Brute Ratel, we note that the badger does not apply any memory hooks until its post-exploitation functionality is used by the operator. An example of this, would be the sharpinline command, which runs a .NET assembly in the current process:</p>



<figure class="wp-block-image size-large is-style-default"><img loading="lazy" decoding="async" width="960" height="329" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-26-960x329.png" alt="" class="wp-image-3061" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-26-960x329.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-26-768x263.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-26-1536x526.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-26-375x128.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-26.png 1846w" sizes="auto, (max-width: 960px) 100vw, 960px" /></figure>



<p>Once the assembly has completed and the beacon gone back to sleep, we can get a better understanding of whats going on by attaching a debugger and disassembling the values of ntdll.dll!EtwEventWrite and amsi.dll!AmsiScanBuffer:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-27-960x340.png" alt="" class="wp-image-3062" width="720" height="255" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-27-960x340.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-27-768x272.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-27-375x133.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-27.png 1514w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<p>As shown above, these are simple and persistent patches to disable .NET ETW data and inhibit AMSI. As the patches are persistent, we can detect them by either of the aforementioned techniques, since not only will we receive a high signal detection due to the first instruction of EtwEventWrite being a ret, but also an indicator that the pages where EtwEventWrite resides have been modified due to the clearing of the shared bit.</p>



<p>Using BeaconHunter, we can rapidly detect these hooks based on resolving the exports on the modified pages, providing a strong indicator that malicious tampering has taken place:</p>



<figure class="wp-block-image size-full is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-28.png" alt="" class="wp-image-3063" width="571" height="473" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-28.png 761w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-28-375x310.png 375w" sizes="auto, (max-width: 571px) 100vw, 571px" /></figure>



<h2 class="wp-block-heading"><strong>Brute Ratel C2 Server</strong></h2>



<p>Moving away from the endpoint, as hunters we also have an interest in detecting the command-and-control infrastructure as this may assist in providing us with sufficient intelligence to detect beaconing based on network telemetry.</p>



<p>The C2 server for Brute Ratel is developed in golang, and by default only allows the operator to modify the default landing page for the C2. To fingerprint the C2 server, we discovered it was possible to generate an unhandled exception when sending a POST request containing base64 to any URI. For example, consider the following base64 POST data compared with the the plaintext:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-29-960x465.png" alt="" class="wp-image-3064" width="720" height="349" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-29-960x465.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-29-768x372.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-29-1536x743.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-29-1920x929.png 1920w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-29-375x182.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-29.png 2000w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<p>It is likely this occurs as the expected input for the base64 decoded POST data should conform to the C2 traffic format. A simple Nuclei rule might help us in scanning for this kind of infrastructure:</p>



<pre class="wp-block-code"><code>id: brc4-ts

info:
  name: Brute Ratel C2 Server Fingerprint
  author: Dominic Chell
  severity: info
  description: description
  reference:
    - https://
  tags: tags
requests:
  - raw:
      - |-
        POST / HTTP/1.1
        Host: {{Hostname}}
        Content-Length: 8

        Zm9vYmFy</code></pre>



<p>Outside of direct interaction with the C2, it is also possible to detect C2 infrastructure where the operator has not manually redefined the default landing page based on a hash of the HTML (<a href="https://www.shodan.io/search?query=http.html_hash%3A-1957161625">http.html_hash=-1957161625</a>).</p>



<p>Using a simple Shodan <a href="https://www.shodan.io/search?query=http.html_hash%3A-1957161625" target="_blank" rel="noreferrer noopener">query</a>, we can quickly find live infrastructure exposed to the Internet:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-30-960x514.png" alt="" class="wp-image-3065" width="720" height="386" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-30-960x514.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-30-768x411.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-30-1536x822.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-30-375x201.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-30.png 1920w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<p>Although only around 40 team servers were identified, we can get a better picture of where these are located based on the geographical spread:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-31-960x544.png" alt="" class="wp-image-3066" width="720" height="408" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-31-960x544.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-31-768x435.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-31-1536x871.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-31-1920x1089.png 1920w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-31-375x213.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-31.png 2000w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<p>It is quite likely some of these techniques are already known, as based on reports against our test infrastructure, defenders are actively hunting these C2 servers:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-32-960x583.png" alt="" class="wp-image-3067" width="720" height="437" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-32-960x583.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-32-768x467.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-32-1536x933.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-32-375x228.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-32.png 1791w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-33-960x61.png" alt="" class="wp-image-3068" width="720" height="46" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-33-960x61.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-33-768x49.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-33-1536x98.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-33-375x24.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-33.png 1920w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<h2 class="wp-block-heading"><strong>Brute Ratel Configurations</strong></h2>



<p>Analysis of the Badger revealed that Brute Ratel maintains an encrypted configuration structure in memory which includes details on the C2 endpoints. Being able to extract this from either artifacts or from running processes can prove helpful for defenders. Our analysis revealed that this configuration is held in a base64 and RC4 encrypted blob using a fixed key of “bYXJm/3#M?:XyMBF” in the artifacts for the badger. While the configuration is stored plaintext in memory for the sleeping badger.</p>



<p>We developed the following config extractor that can be used against both on-disk artifacts for BRC4 v1.0.x or injected sleeping badgers with Brute Ratel 1.0.x and 1.1.x:</p>



<pre class="wp-block-code"><code>#define _CRT_SECURE_NO_WARNINGS

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;Windows.h&gt;
#include &lt;string&gt;
#include &lt;vector&gt;

#pragma comment(lib, "Crypt32.lib")

std::string HexDump(void* pBuffer, DWORD cbBuffer)
{
	PBYTE pbBuffer = (PBYTE)pBuffer;
	std::string strHex;

#define FORMAT_APPEND_1(a)	{ char szTmp&#91;256]; sprintf(szTmp, a); strHex += szTmp; }
#define FORMAT_APPEND_2(a,b)	{ char szTmp&#91;256]; sprintf(szTmp, a, b); strHex += szTmp; }

	for (DWORD i = 0; i &lt; cbBuffer;)
	{
		FORMAT_APPEND_2("0x8x  ", i);

		DWORD n = ((cbBuffer - i) &lt; 16) ? (cbBuffer - i) : 16;

		for (DWORD j = 0; j &lt; n; j++)
		{
			FORMAT_APPEND_2("%02X ", pbBuffer&#91;i + j]);
		}

		for (DWORD j = 0; j &lt; (16 - n); j++)
		{
			FORMAT_APPEND_1("   ");
		}

		FORMAT_APPEND_1(" ");

		for (DWORD j = 0; j &lt; n; j++)
		{
			FORMAT_APPEND_2("%c", (pbBuffer&#91;i + j] &lt; 0x20 || pbBuffer&#91;i + j] &gt; 0x7f) ? '.' : pbBuffer&#91;i + j]);
		}

		FORMAT_APPEND_1("\n");

		i += n;
	}

	return strHex;
}

BOOL ReadAllBytes(std::string strFile, PBYTE* ppbBuffer, UINT* puiBufferLength)
{
	BOOL bSuccess = FALSE;
	PBYTE pbBuffer = NULL;

	*ppbBuffer = NULL;
	*puiBufferLength = 0;

	FILE* fp = fopen(strFile.c_str(), "rb");
	if (fp)
	{
		fseek(fp, 0, SEEK_END);
		long lFile = ftell(fp);
		fseek(fp, 0, SEEK_SET);

		if (!(pbBuffer = (PBYTE)malloc(lFile)))
			goto Cleanup;

		if (fread(pbBuffer, 1, lFile, fp) != lFile)
			goto Cleanup;

		*ppbBuffer = pbBuffer;
		*puiBufferLength = (UINT)lFile;

		pbBuffer = NULL;
		bSuccess = TRUE;
	}

Cleanup:
	if (fp) fclose(fp);
	if (pbBuffer) free(pbBuffer);
	return bSuccess;
}

void Brc4DecodeString(BYTE* pszKey, BYTE* pszInput, BYTE* pszOutput, int cchInput)
{
	BYTE szCharmap&#91;0x100];

	for (UINT i = 0; i &lt; sizeof(szCharmap); i++)
	{
		szCharmap&#91;i] = (char)i;
	}

	UINT cchKey = strlen((char*)pszKey);

	BYTE l = 0;

	for (UINT i = 0; i &lt; sizeof(szCharmap); i++)
	{
		BYTE x = szCharmap&#91;i];
		BYTE k = pszKey&#91;i % cchKey];
		BYTE y = x + k + l;
		l = y;
		szCharmap&#91;i] = szCharmap&#91;y];
		szCharmap&#91;y] = x;
	}

	l = 0;

	for (UINT i = 0; i &lt; cchInput; i++)
	{
		BYTE x = szCharmap&#91;i + 1];
		BYTE y = x + l;
		l = y;
		BYTE z = szCharmap&#91;y];
		szCharmap&#91;i + 1] = z;
		szCharmap&#91;y] = x;
		x = x + szCharmap&#91;i + 1];
		x = szCharmap&#91;x];
		x = x ^ pszInput&#91;i];
		pszOutput&#91;i] = x;
	}
}

BOOL MatchPattern(PBYTE pbInput, PBYTE pbSearch, DWORD cbSearch, BYTE byteMask)
{
	BOOL bMatch = TRUE;

	for (DWORD j = 0; j &lt; cbSearch; j++)
	{
		if (pbSearch&#91;j] != byteMask &amp;&amp; pbInput&#91;j] != pbSearch&#91;j])
		{
			bMatch = FALSE;
			break;
		}
	}

	return bMatch;
}

PBYTE FindPattern(PBYTE pbInput, UINT cbInput, PBYTE pbSearch, DWORD cbSearch, BYTE byteMask, UINT* pcSkipMatches)
{
	if (cbInput &gt; cbSearch)
	{
		for (UINT i = 0; i &lt; cbInput - cbSearch; i++)
		{
			BOOL bMatch = MatchPattern(pbInput + i, pbSearch, cbSearch, byteMask);

			if (bMatch)
			{
				if (!*pcSkipMatches)
				{
					return &amp;pbInput&#91;i];
				}

				(*pcSkipMatches)--;
			}
		}
	}
	
	return NULL;
}

BOOL LocateBrc4Config(PBYTE pbInput, UINT cbInput, PBYTE* ppbConfig)
{
#define XOR_RAX_RAX			0x48, 0x31, 0xC0,
#define PUSH_RAX			0x50,
#define MOV_EAX_IMM32		0xB8, 0xab, 0xab, 0xab, 0xab,
#define MOV_RAX_IMM64		0x48, 0xB8, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab,
#define PUSH_IMM32			0x68, 0xab, 0xab, 0xab, 0xab,
#define MOV_EAX_0			0xB8, 0x00, 0x00, 0x00, 0x00,

	BYTE Pattern1&#91;] =
	{
		XOR_RAX_RAX
		PUSH_RAX
		MOV_EAX_IMM32
		PUSH_RAX
		MOV_RAX_IMM64
		PUSH_RAX
		MOV_RAX_IMM64
		PUSH_RAX
		MOV_RAX_IMM64
		PUSH_RAX
		MOV_RAX_IMM64
		PUSH_RAX
		MOV_RAX_IMM64
		PUSH_RAX
		MOV_RAX_IMM64
	},
	Pattern2&#91;] =
	{
		XOR_RAX_RAX
		PUSH_RAX
		MOV_RAX_IMM64
		PUSH_RAX
		MOV_RAX_IMM64
		PUSH_RAX
		MOV_RAX_IMM64
		PUSH_RAX
		MOV_RAX_IMM64
		PUSH_RAX
		MOV_RAX_IMM64
		PUSH_RAX
		MOV_RAX_IMM64
		PUSH_RAX
		MOV_RAX_IMM64
	};

	UINT cSkipMatches = 0;

	if (cbInput &lt; 100)
	{
		return FALSE;
	}

	PBYTE pbConfigStart = FindPattern(pbInput, cbInput, Pattern1, sizeof(Pattern1), 0xab, &amp;cSkipMatches);

	if (!pbConfigStart)
	{
		cSkipMatches = 0;

		pbConfigStart = FindPattern(pbInput, cbInput, Pattern2, sizeof(Pattern2), 0xab, &amp;cSkipMatches);

		if (!pbConfigStart)
		{
			return FALSE;
		}
	}

	BYTE Pattern3&#91;] = {
		PUSH_IMM32
		MOV_EAX_0
		PUSH_RAX
		MOV_EAX_0
		PUSH_RAX
		MOV_EAX_0
		PUSH_RAX
	};

	cSkipMatches = 0;

	PBYTE pbConfigEnd = FindPattern(pbConfigStart, cbInput - (pbConfigStart - pbInput), Pattern3, sizeof(Pattern3), 0xab, &amp;cSkipMatches);

	if (!pbConfigEnd)
	{
		return FALSE;
	}

	*ppbConfig = (PBYTE)malloc(pbConfigEnd - pbConfigStart);
	
	if (!*ppbConfig)
	{
		return FALSE;
	}

	memset(*ppbConfig, 0, pbConfigEnd - pbConfigStart);

	pbConfigStart += 4; // skip: XOR_RAX_RAX / PUSH_RAX

	BYTE Pattern4&#91;] = {
		MOV_EAX_IMM32
		PUSH_RAX
	},
	Pattern5&#91;] = {
		MOV_RAX_IMM64
		PUSH_RAX
	};

	for (UINT uiIndex = 0, i = 0; i &lt; pbConfigEnd - pbConfigStart;)
	{
		if (MatchPattern(pbConfigStart + i, Pattern4, sizeof(Pattern4), 0xab))
		{
			(*ppbConfig)&#91;uiIndex++] = pbConfigStart&#91;i + 4];
			(*ppbConfig)&#91;uiIndex++] = pbConfigStart&#91;i + 3];
			(*ppbConfig)&#91;uiIndex++] = pbConfigStart&#91;i + 2];
			(*ppbConfig)&#91;uiIndex++] = pbConfigStart&#91;i + 1];

			i += sizeof(Pattern4);
		}
		else if (MatchPattern(pbConfigStart + i, Pattern5, sizeof(Pattern5), 0xab))
		{
			(*ppbConfig)&#91;uiIndex++] = pbConfigStart&#91;i + 9];
			(*ppbConfig)&#91;uiIndex++] = pbConfigStart&#91;i + 8];
			(*ppbConfig)&#91;uiIndex++] = pbConfigStart&#91;i + 7];
			(*ppbConfig)&#91;uiIndex++] = pbConfigStart&#91;i + 6];
			(*ppbConfig)&#91;uiIndex++] = pbConfigStart&#91;i + 5];
			(*ppbConfig)&#91;uiIndex++] = pbConfigStart&#91;i + 4];
			(*ppbConfig)&#91;uiIndex++] = pbConfigStart&#91;i + 3];
			(*ppbConfig)&#91;uiIndex++] = pbConfigStart&#91;i + 2];

			i += sizeof(Pattern5);
		}
		else if (MatchPattern(pbConfigStart + i, Pattern3, sizeof(Pattern3), 0xab))
		{
			break;
		}
		else
		{
			return FALSE;
		}
	}

	std::string config = (char*)*ppbConfig;
	std::reverse(config.begin(), config.end());

	strcpy((char*)*ppbConfig, config.c_str());

	return TRUE;
}

BOOL FromBase64(char* pszString, PBYTE* ppbBinary, UINT* pcbBinary)
{
	DWORD cbBinary = 0;

	if (FAILED(CryptStringToBinaryA(pszString, 0, CRYPT_STRING_BASE64, NULL, &amp;cbBinary, NULL, NULL)))
	{
		return FALSE;
	}

	*ppbBinary = (PBYTE)malloc(cbBinary + 1);

	if (!*ppbBinary)
	{
		return FALSE;
	}

	if (FAILED(CryptStringToBinaryA(pszString, 0, CRYPT_STRING_BASE64, *ppbBinary, &amp;cbBinary, NULL, NULL)))
	{
		return FALSE;
	}

	*pcbBinary = cbBinary;

	return TRUE;
}

BOOL ScanProcessForBadgerConfig(HANDLE hProcess, std::string&amp; badgerId, std::vector&lt;std::wstring&gt;&amp; configStrings)
{
	SIZE_T nBytesRead;
	PBYTE lpMemoryRegion = NULL, pbBadgerStateStruct = NULL;

	printf("&#91;+] Searching process memory for badger state ...\n");

	while (1)
	{
		MEMORY_BASIC_INFORMATION mbi = { 0 };

		if (!VirtualQueryEx(hProcess, lpMemoryRegion, &amp;mbi, sizeof(mbi)))
		{
			break;
		}

		if ((mbi.State &amp; MEM_COMMIT) &amp;&amp; !(mbi.Protect &amp; PAGE_GUARD) &amp;&amp;
			((mbi.Protect &amp; PAGE_READONLY) || (mbi.Protect &amp; PAGE_READWRITE) || (mbi.Protect &amp; PAGE_EXECUTE_READWRITE)))
		{
			//printf("&#91;+] Searching process memory at 0x%p (size 0x%x)\n", lpMemoryRegion, mbi.RegionSize);

			PBYTE pbLocalMemoryCopy = (PBYTE)malloc(mbi.RegionSize);

			if (!ReadProcessMemory(hProcess, lpMemoryRegion, pbLocalMemoryCopy, mbi.RegionSize, &amp;nBytesRead))
			{
				//printf("&#91;!] Unable to read memory at 0x%p\n", lpMemoryRegion);
			}
			else
			{
				for (UINT i = 0; i &lt; mbi.RegionSize - 128 &amp;&amp; !pbBadgerStateStruct; i++)
				{
					if (memcmp(pbLocalMemoryCopy + i, "b-", 2) == 0)
					{
						char* pszEndPtr = NULL;
						int badgerId = strtoul((char*)pbLocalMemoryCopy + i + 2, &amp;pszEndPtr, 10);
						
						if (pszEndPtr != (char*)pbLocalMemoryCopy + i + 2 &amp;&amp; pszEndPtr &amp;&amp; *pszEndPtr == '\\' &amp;&amp; strnlen(pszEndPtr, 100) &gt; 16)
						{
							pbBadgerStateStruct = lpMemoryRegion + i;
							break;
						}
					}
				}
			}

			free(pbLocalMemoryCopy);
			pbLocalMemoryCopy = NULL;
		}

		lpMemoryRegion += mbi.RegionSize;
	}

	if (!pbBadgerStateStruct)
	{
		printf("&#91;!] Failed to find badger state\n");
		return FALSE;
	}

	printf("&#91;+] Found badger state at 0x%p\n", pbBadgerStateStruct);

	BYTE BadgerState&#91;0x1000];
	
	memset(BadgerState, 0, sizeof(BadgerState));

	if (!ReadProcessMemory(hProcess, pbBadgerStateStruct, BadgerState, 0x1000, &amp;nBytesRead))
	{
		if (GetLastError() != ERROR_PARTIAL_COPY)
		{
			printf("&#91;!] Unable to read badger state at 0x%p\n", pbBadgerStateStruct);
			return FALSE;
		}
	}

	badgerId = (char*)BadgerState;

	BYTE ConfigString&#91;1024];

	memset(ConfigString, 0, sizeof(ConfigString));

	for (UINT i = 0x100 + (0x10 - ((DWORD64)pbBadgerStateStruct &amp; 0xf)); i &lt; sizeof(BadgerState); i += sizeof(DWORD64))
	{
		DWORD64 pMem = *(DWORD64*)(BadgerState + i);

		if (pMem)
		{
			ConfigString&#91;0] = 0;

			if (!ReadProcessMemory(hProcess, (LPVOID)pMem, ConfigString, 1024, &amp;nBytesRead) || nBytesRead != 1024)
			{
				continue;
			}

			BOOL bIsValid = ConfigString&#91;0] != 0;
			std::wstring badgerString;

#define MIN_STRING_LENGTH	5

			if (bIsValid)
			{
				char* pszConfigString = (char*)ConfigString;
				
				for (UINT j = 0; j &lt; nBytesRead &amp;&amp; pszConfigString&#91;j] != 0; j++)
				{
					if (!isprint(pszConfigString&#91;j]) &amp;&amp; !(pszConfigString&#91;j] == '\t' || pszConfigString&#91;j] == '\r' || pszConfigString&#91;j] == '\n'))
					{
						break;
					}
					
					badgerString.push_back(pszConfigString&#91;j]);
				}

				bIsValid = badgerString.size() &gt;= MIN_STRING_LENGTH;
			}

			if (!bIsValid)
			{
				badgerString.clear();
				bIsValid = TRUE;

				WCHAR* pwszConfigString = (WCHAR*)ConfigString;

				for (UINT j = 0; j &lt; nBytesRead / sizeof(WCHAR) &amp;&amp; pwszConfigString&#91;j] != 0; j++)
				{
					if (!iswprint(pwszConfigString&#91;j]) &amp;&amp; !(pwszConfigString&#91;j] == '\t' || pwszConfigString&#91;j] == '\r' || pwszConfigString&#91;j] == '\n'))
					{
						break;
					}

					badgerString.push_back(pwszConfigString&#91;j]);
				}

				bIsValid = badgerString.size() &gt;= MIN_STRING_LENGTH;
			}

			if (bIsValid)
			{
				configStrings.push_back(badgerString);
			}
		}
	}

	return TRUE;
}

int main(int argc, char *argv&#91;])
{
	PBYTE key = (PBYTE)"bYXJm/3#M?:XyMBF";

	printf("BruteRatel v1.x Config Extractor\n");

	if (argc &lt; 2)
	{
		printf(
			"Usage: Brc4ConfigExtractor.exe &lt;file&gt; &#91;key]\n"
			"    &lt;file|pid&gt; - file to scan for config, or running process ID\n"
			"    &#91;key]  - key if not default\n"
		);

		return 1;
	}

	if (argc &gt; 2)
	{
		key = (PBYTE)argv&#91;2];
	}

	if (atoi(argv&#91;1]) == 0)
	{
		PBYTE pbBadger = NULL;
		UINT cbBadger = 0;

		if (!ReadAllBytes(argv&#91;1], &amp;pbBadger, &amp;cbBadger))
		{
			printf("&#91;!] Input file '%s' not found\n", argv&#91;1]);
			return 1;
		}

		printf("&#91;+] Analysing file '%s' (%u bytes)\n", argv&#91;1], cbBadger);

		PBYTE pbConfigText = NULL;

		if (!LocateBrc4Config(pbBadger, cbBadger, &amp;pbConfigText))
		{
			printf("&#91;!] Failed to locate BRC4 config\n");
			return 1;
		}

		printf("&#91;+] Located BRC4 config: %s\n", pbConfigText);

		PBYTE pbBinaryConfig = NULL;
		UINT cbBinaryConfig = 0;

		if (!FromBase64((char*)pbConfigText, &amp;pbBinaryConfig, &amp;cbBinaryConfig))
		{
			printf("&#91;!] Failed to decode BRC4 config from base64\n");
			return 1;
		}

		Brc4DecodeString(key, pbBinaryConfig, pbBinaryConfig, cbBinaryConfig);

		printf("&#91;+] Decoded config: %.*s\n", cbBinaryConfig, pbBinaryConfig);
	}
	else
	{
		DWORD dwPid = atoi(argv&#91;1]);

		printf("&#91;+] Analysing process with ID %u\n", dwPid);

		HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPid);

		if (!hProcess)
		{
			printf("&#91;!] Failed to open process\n");
			return 1;
		}

		std::string badgerId;
		std::vector&lt;std::wstring&gt; configStrings;

		if (!ScanProcessForBadgerConfig(hProcess, badgerId, configStrings))
		{
			printf("&#91;!] Failed to locate badger configuration in memory\n");
			return 1;
		}

		printf("&#91;+] Badger '%s' found...\n", badgerId.c_str());

		for (auto configString : configStrings)
		{
			printf("    : %S\n", configString.c_str());
		}

		CloseHandle(hProcess);
	}

	return 0;
}</code></pre>



<p>Running the extractor tool on either an artifact or a running process (even while sleeping), will extract the Brute Ratel configuration state for the process or artifact:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-34-960x498.png" alt="" class="wp-image-3069" width="720" height="374" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-34-960x498.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-34-768x398.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-34-1536x796.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-34-375x194.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-34.png 1628w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<h1 class="wp-block-heading">Updated v1.1 Analysis</h1>



<p>Shortly after our talk on this subject at x33fcon, Brute Ratel announced a new version of the software. As such, it seemed appropriate to analyse this to ensure defenders have accurate advice given the recent uptake in Brute Ratel by threat actors.</p>



<h2 class="wp-block-heading">Analysis of Obfuscate and Sleep Techniques</h2>



<p>One of the things that struck us about the v1.1 release, was the declaration that the author had discovered new sleep and obfuscate techniques. As stated in this <a href="https://www.youtube.com/watch?v=nB5QHVtN9_g&amp;t=267s" target="_blank" rel="noreferrer noopener">YouTube video</a> &#8220;<strong>Brute Ratel C4 v/s Nighthawk and Open Source Sleep Obfuscation Techniques</strong>&#8220;, the author says “I didn’t even knew (SIC) about this technique until Austin released the blog post on this. However, Brute Ratel does not use either of these two techniques that we have seen over here.” in reference to the APC technique used in <a href="https://github.com/SecIdiot/FOLIAGE" target="_blank" rel="noreferrer noopener">Foliage</a> and the Timer based technique as used in MDSec’s Nighthawk and as reverse engineered <a href="https://suspicious.actor/2022/05/05/mdsec-nighthawk-study.html" target="_blank" rel="noreferrer noopener">here</a> and a proof of concept implementation released <a href="https://github.com/Cracked5pider/Ekko/blob/main/Src/Ekko.c" target="_blank" rel="noreferrer noopener">here</a>. Noting that this video appeared a short time after the Ekko release.</p>



<p>Reverse engineering of the obfuscate in sleep techniques used within Brute Ratel v1.1 reveal that three sleeping strategies are now available. The first, as we have previously documented is an extremely similar implementation to <a href="https://twitter.com/ilove2pwn_" target="_blank" rel="noreferrer noopener">@ilove2pwn_</a>’s Foliage, if not an exact copy.</p>



<p>The second implementation, reverse engineering revealed to be an almost identical implementation of <a href="https://twitter.com/c5pider" target="_blank" rel="noreferrer noopener">@c5pider</a>’s Ekko code (and originally discovered by <a href="https://twitter.com/peterwintrsmith" target="_blank" rel="noreferrer noopener">Peter Winter-Smith</a> and used in MDSec’s Nighthawk). For example, consider the following taken from <a href="https://github.com/Cracked5pider/Ekko/blob/main/Src/Ekko.c#L97" target="_blank" rel="noreferrer noopener">Ekko</a>:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-35-960x604.png" alt="" class="wp-image-3070" width="720" height="453" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-35-960x604.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-35-768x483.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-35-1536x967.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-35-375x236.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-35.png 1824w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<p>Compare this with the technique implemented inside Brute Ratel:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-36-960x640.png" alt="" class="wp-image-3071" width="720" height="480" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-36-960x640.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-36-768x512.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-36-1536x1023.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-36-375x250.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-36.png 1636w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<p>As you can see, the code is almost identical; indeed the few changes include replacing the WinApi calls for CreateTimerQueueTimer with the Rtl wrapper RtlCreateTimer, noting that the breakpoints for Rtl wrappers were avoided (likely intentionally) in the aforementioned video demonstration.</p>



<p>This brings us to the third technique used by Brute Ratel which is a variation of timers and is not publicly documented. We can see here that this technique uses a subtle variation on timers and instead proxies the timer through RtlRegisterWait:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-37-960x508.png" alt="" class="wp-image-3072" width="720" height="381" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-37-960x508.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-37-768x407.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-37-1536x813.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-37-375x199.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-37.png 1636w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<p>While this technique is not publicly documented, it has been available in Nighthawk for some time, coincidentally with the same values used for many of the constants. Further coincidences arise with other undocumented/unpublished features arising in the Brute Ratel v1.1 release.<br>So far, we have only discussed the sleeping techniques available in the x64 implementation of Brute Ratel. Analysis of the x86 implementation shows that the obfuscate and sleep strategies are fixed to the aforementioned APC Foliage based implementation (noting the breakpoints never hit):</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-38-960x244.png" alt="" class="wp-image-3073" width="720" height="183" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-38-960x244.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-38-768x195.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-38-1536x391.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-38-1920x489.png 1920w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-38-375x95.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-38.png 2000w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<p>To date there are no public or open source x86 implementations of obfuscate and sleep strategies that use timers, limiting the available opportunities to easily integrate such code without custom development.</p>



<h2 class="wp-block-heading"><strong>In Memory Detections</strong></h2>



<p>One of the updates in the v1.1 release implies that the .rdata section is now also obfuscated, in order to hide strings such as “[+] AMSI Patched” which were exposed in the memory of the sleeping badger. However, even cursory memory analysis shows there remains many exposed strings within the memory of the sleeping badger. As a result, this means there are many opportunities to pluck out Brute Ratel processes on an endpoint, even while the badger is sleeping. For example, consider the Brute Ratel C2 data which is stored in a JSON format, simply searching for one of its unique parameters in memory such as “chkin” will allow us to spot a badger:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-39-960x364.png" alt="" class="wp-image-3075" width="720" height="273" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-39-960x364.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-39-768x291.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-39-375x142.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-39.png 1302w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<p>Or simply searching for the badger identifier (e.g. b-) will find them scattered all over both the heap and the stack. As a bonus, this can act as simple mechanism to spot the thread that Brute Ratel is operating from, for example:</p>



<figure class="wp-block-image size-large is-style-default"><img loading="lazy" decoding="async" width="960" height="40" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-40-960x40.png" alt="" class="wp-image-3076" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-40-960x40.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-40-768x32.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-40-1536x64.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-40-1920x80.png 1920w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-40-375x16.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-40.png 2000w" sizes="auto, (max-width: 960px) 100vw, 960px" /></figure>



<p>Here we can see the presence of the “b-4\” on the stack of thread 4344. We can confirm that is indeed the thread for Brute Ratel from the UI:</p>



<figure class="wp-block-image size-large is-style-default"><img loading="lazy" decoding="async" width="960" height="159" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-41-960x159.png" alt="" class="wp-image-3077" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-41-960x159.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-41-768x127.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-41-1536x254.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-41-1920x318.png 1920w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-41-375x62.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-41.png 2000w" sizes="auto, (max-width: 960px) 100vw, 960px" /></figure>



<p>With this in mind, we’re able to build a simple but effective Yara rule to pluck sleeping Brute Ratel processes from memory:</p>



<pre class="wp-block-code"><code>rule brc4_badger_strings
{
meta:
    author = "@domchell"
    description = "Identifies strings from Brute Ratel v1.1"
strings:
    $a = "\"chkin\":"
condition:
    $a
}</code></pre>



<p>Executing the Yara rule, we can spot the sleeping badger:</p>



<figure class="wp-block-image size-large is-style-default"><img loading="lazy" decoding="async" width="960" height="317" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-42-960x317.png" alt="" class="wp-image-3078" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-42-960x317.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-42-768x254.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-42-1536x507.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-42-375x124.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-42.png 1654w" sizes="auto, (max-width: 960px) 100vw, 960px" /></figure>



<p>The detections documented in v1.0 for post-exploitation actions such as suspicious copy on write operations remain relevant and still offer an effective means of detection for BRC4 post-exploitation.</p>



<h2 class="wp-block-heading"><strong>Thread Stack Spoofing</strong></h2>



<p>In the v1.0 release of Brute Ratel, as we noted the start address of the thread is hardcoded to ntdll!TpReleaseCleanupGroupMembers+0x550. Version 1.1 proclaims to offer “full thread stack masquerading”. Analysis of the stack spoofing for Brute Ratel reveals a simplistic implementation of rewriting the threads call stack. This process occurs just prior to the badger going to sleep, using the aforementioned timer technique. In an attempt to make the thread appear more legitimate, a new thread stack is created with hardcoded addresses for the first two frames. The addresses hardcoded are at offsets 0xa and 0x12 from RtlUserThreadStart and BaseThreadInitThunk respectively:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-43-960x583.png" alt="" class="wp-image-3079" width="720" height="437" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-43-960x583.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-43-768x466.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-43-375x228.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-43.png 1064w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<p>We were able to identify any other threads using these hardcoded start addresses, as such it becomes trivial to identify any Brute Ratel threads on a system. To detect these threads, we updated BeaconHunter accordingly to identify threads with the first two frames at RtlUserThreadStart+0xa and BaseThreadInitThunk+0x12:</p>



<figure class="wp-block-image size-large is-resized is-style-default"><img loading="lazy" decoding="async" src="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-44-960x581.png" alt="" class="wp-image-3080" width="720" height="436" srcset="https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-44-960x581.png 960w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-44-768x465.png 768w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-44-1536x929.png 1536w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-44-375x227.png 375w, https://www.mdsec.co.uk/wp-content/uploads/2022/08/image-44.png 1570w" sizes="auto, (max-width: 720px) 100vw, 720px" /></figure>



<h2 class="wp-block-heading">Updated rDLL Extraction</h2>



<p>Shortly after our analysis at x33fcon, Brute Ratel announced an update to the method in which the artifacts hide the reflective DLL. Analysis of these artifacts revealed that this is achieved using RC4 to encrypt the reflective DLL with a random key; the PE header is then stomped. The 8 byte RC4 key is appended to the encrypted reflective DLL, followed by 400 bytes of base64 configuration file.</p>



<p>We developed the following tool targeting Brute Ratel v1.1 to extract the reflective DLL from DLL and EXE artifacts:</p>



<pre class="wp-block-code"><code>//
// only works with BRC4 1.1 binaries.
//
#include &lt;algorithm
#include &lt;windows.h&gt;
#include &lt;cstdio&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;vector&gt;
#include &lt;iomanip&gt;

typedef struct _RC4_CTX {
    BYTE       x, y;
    BYTE       s&#91;256];
} RC4_CTX, *PRC4_CTX;

std::vector&lt;BYTE&gt;
ReadData(std::string path) {
    std::ifstream instream(path, std::ios::in | std::ios::binary);
    std::vector&lt;BYTE&gt; input((std::istreambuf_iterator&lt;char&gt;(instream)), std::istreambuf_iterator&lt;char&gt;());
    return input;
}

bool
WriteData(std::string path, std::vector&lt;BYTE&gt; data) {
    std::ofstream outstream(path, std::ios::out | std::ios::binary);
    std::copy(data.begin(), data.end(), std::ostreambuf_iterator&lt;char&gt;(outstream));
    return outstream.good();
}

BYTE 
start_sig&#91;]={
#if defined(_WIN64)
    0x55, 0x50, 0x53, 0x51, 0x52, 0x56, 0x57, 0x41, 0x50, 0x41, 0x51, 0x41, 0x52, 0x41, 0x53, 0x41,
    0x54, 0x41, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48, 0x89, 0xE5, 0x48, 0x83, 0xE4, 0xF0, 0x48, 0x31,
    0xC0, 0x50
#else
    0x60, 0x89, 0xE5, 0x83, 0xE4, 0xF8, 0x31, 0xC0, 0x50
#endif
};

BYTE
end_sig&#91;]={
#if defined(_WIN64)
    0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5D, 0x41, 0x5C, 0x41, 0x5B, 0x41, 0x5A, 0x41, 0x59, 0x41, 0x58, 
    0x5F, 0x5E, 0x5A, 0x59, 0x5B, 0x58, 0x5D, 0xC3
#else
    0x83, 0xC4, 0x10, 0x61, 0xC3
#endif
};

void
RC4_set_key(
    PRC4_CTX c,
    PVOID    key,
    UINT     keylen)
{
    UINT i;
    UCHAR j;
    PUCHAR k=(PUCHAR)key;

    for (i=0; i&lt;256; i++) {
        c-&gt;s&#91;i] = (UCHAR)i;
    }
    
    c-&gt;x = 0; c-&gt;y = 0;
    
    for (i=0, j=0; i&lt;256; i++) {
        j = (j + (c-&gt;s&#91;i] + k&#91;i % keylen]));
        UCHAR t = c-&gt;s&#91;i];
        c-&gt;s&#91;i] = c-&gt;s&#91;j];
        c-&gt;s&#91;j] = t;
    }
}

void
RC4_crypt(
    PRC4_CTX c, 
    PUCHAR   buf, 
    UINT     len)
{
    UCHAR x = c-&gt;x, y = c-&gt;y, j=0, t;

    for (UINT i=0; i&lt;len; i++) {
        x = (x + 1);
        y = (y + c-&gt;s&#91;x]);
        t = c-&gt;s&#91;x];
        c-&gt;s&#91;x] = c-&gt;s&#91;y];
        c-&gt;s&#91;y] = t;
        j = (c-&gt;s&#91;x] + c-&gt;s&#91;y]);
        buf&#91;i] ^= c-&gt;s&#91;j];
    }
    c-&gt;x = x;
    c-&gt;y = y;
}

std::vector&lt;BYTE&gt;
extract_encrypted_rdll(PBYTE ptr, DWORD maxlen) {
    std::vector&lt;BYTE&gt; outbuf;
    printf("Searching %ld bytes.\n", maxlen);
    
    for (DWORD i=0; i&lt;maxlen;) {
        if (!memcmp(&amp;ptr&#91;i], end_sig, sizeof(end_sig))) {
            printf("Reached end of signature...\n");
            break;
        }
    #if defined(_WIN64)
        if ((ptr&#91;i] &amp; 0x40) == 0x40 &amp;&amp; (ptr&#91;i+1] &amp; 0xB0) == 0xB0) 
        {
            BYTE buf&#91;8];
            
            buf&#91;0] = ptr&#91;i + 9];
            buf&#91;1] = ptr&#91;i + 8];
            buf&#91;2] = ptr&#91;i + 7];
            buf&#91;3] = ptr&#91;i + 6];
            buf&#91;4] = ptr&#91;i + 5];
            buf&#91;5] = ptr&#91;i + 4];
            buf&#91;6] = ptr&#91;i + 3];
            buf&#91;7] = ptr&#91;i + 2];
            
            outbuf.insert(outbuf.end(), buf, buf + sizeof(buf));
            i += (ptr&#91;i + 10] == 0x41) ? 12 : 11;
        } else i++;
    #else
        if ((ptr&#91;i] &amp; 0xB0) == 0xB0 &amp;&amp; (ptr&#91;i+5] &amp; 0x50) == 0x50) {
            BYTE buf&#91;4];
            
            buf&#91;0] = ptr&#91;i + 4];
            buf&#91;1] = ptr&#91;i + 3];
            buf&#91;2] = ptr&#91;i + 2];
            buf&#91;3] = ptr&#91;i + 1];
            
            outbuf.insert(outbuf.end(), buf, buf + sizeof(buf));
            i += 6;
        } else i++;
    #endif
    }
	std::reverse(outbuf.begin(), outbuf.end());
    return outbuf;
}

int
main(int argc, char *argv&#91;]) {
    if (argc != 2) {
        printf("usage: decrypt_brc4 &lt;DLL|EXE&gt;\n");
        return 0;
    }
    
    std::vector&lt;BYTE&gt; inbuf, infile = ReadData(argv&#91;1]);
    DWORD len=0, ptr=0;
    
    if (infile.empty()) {
        printf("Nothing to read.\n");
        return 0;
    }
    
    do {
        auto dos = (PIMAGE_DOS_HEADER)infile.data();
        auto nt = (PIMAGE_NT_HEADERS)(infile.data() + dos-&gt;e_lfanew);
        auto s = IMAGE_FIRST_SECTION(nt);
        
        for (DWORD i=0; i&lt;nt-&gt;FileHeader.NumberOfSections; i++) {
            char Name&#91;IMAGE_SIZEOF_SHORT_NAME + 1] = {0};
            memcpy(Name, s&#91;i].Name, IMAGE_SIZEOF_SHORT_NAME);
            
            if (std::string(Name) == ".data") {
                len = s&#91;i].SizeOfRawData;
                ptr = s&#91;i].PointerToRawData;
                break;
            }
        }
        
        if (!len) {
            printf("Unable to locate .data section.\n");
            break;
        }
        
        printf("Searching %ld bytes for loader...\n", len);
        
        for (DWORD idx=0; idx&lt;len - sizeof(start_sig); idx++) {
            if(!memcmp(infile.data() + ptr + idx, start_sig, sizeof(start_sig))) {
                printf("Found signature : %08lX\n", ptr + idx);
                inbuf = extract_encrypted_rdll(infile.data() + ptr + idx, len - idx);
                break;
            }
        }
        
        if (inbuf.size()) {
            printf("size : %zd\n", inbuf.size());
            RC4_CTX c;
            BYTE key&#91;8+1] = {0};
            memcpy((char*)key, inbuf.data() + inbuf.size() - 400 - 8, 8);
            
            //
            // Decrypt RDLL. The additional 400 bytes are base64 configuration.
            //
            RC4_set_key(&amp;c, key, 8);
            RC4_crypt(&amp;c, inbuf.data(), inbuf.size() - 400);
            
            //
            // Fix DOS header.
            //
            inbuf&#91;0] = 'M';
            inbuf&#91;1] = 'Z';
            WriteData(std::string(argv&#91;1]) + ".dll", inbuf);
        }
    } while (FALSE);
    
    return 0;
}</code></pre>



<h2 class="wp-block-heading">Conclusion</h2>



<p>In summary, we’ve highlighted a number of techniques to detect Brute Ratel both in its artifacts, in-memory, through threat hunting and across the network. As this framework grows in popularity with threat actors, it is important to understand the many ways in which it can be detected. As a side note, we have also illustrated how the framework takes close inspiration from the many available open source community tools; knowledge of these can assist in reverse engineering the framework and provide a better understanding of its capabilities (and by virtue its detection points).</p>



<p>This blog post was written <a href="https://twitter.com/domchell" target="_blank" rel="noreferrer noopener">Dominic Chell</a>.</p>
		</div>
		
		<div class="author">
			<div class="content-wrapper clearfix">
				<div class="author-avatar">
					<img alt='' src='https://secure.gravatar.com/avatar/9cb7b62409a4b5ef00769dca4ba852fc49229c9729d600fc2637daf77068c31c?s=96&#038;d=wp_user_avatar&#038;r=g' srcset='https://secure.gravatar.com/avatar/9cb7b62409a4b5ef00769dca4ba852fc49229c9729d600fc2637daf77068c31c?s=192&#038;d=wp_user_avatar&#038;r=g 2x' class='avatar avatar-96 photo' height='96' width='96' loading='lazy' decoding='async'/>				</div>
				<div class="author-meta">
					<div class="author-meta__content">
						<span>written by</span>
						<h4>MDSec Research</h4>
					</div>
				</div>
			</div>
		</div>
		<section class="testing">
	<div class="content-wrapper">
		<h2>Ready to engage<br>with MDSec?</h2>
		<div class="button">
			<a href="https://www.mdsec.co.uk/contact">
				Get in touch
			</a>
		</div>
	</div>
</section>		
	</section>




	<section class="newsletter">
	<div class="content-wrapper clearfix">
		<div class="newsletter-left">
			<p>
				Stay updated with the latest <br>news from MDSec.
			</p>
		</div>
		<div class="newsletter-right">
			<div class="frm_forms  with_frm_style frm_style_formidable-style" id="frm_form_2_container" >
<form enctype="multipart/form-data" method="post" class="frm-show-form  frm_js_validate " id="form_newslettersignupform" >
<div class="frm_form_fields ">
<fieldset>
<legend class="frm_screen_reader">Newsletter Signup Form</legend>

<div class="frm_fields_container">
<input type="hidden" name="frm_action" value="create" />
<input type="hidden" name="form_id" value="2" />
<input type="hidden" name="frm_hide_fields_2" id="frm_hide_fields_2" value="" />
<input type="hidden" name="form_key" value="newslettersignupform" />
<input type="hidden" name="item_meta[0]" value="" />
<input type="hidden" id="frm_submit_entry_2" name="frm_submit_entry_2" value="b7c2d4502c" /><input type="hidden" name="_wp_http_referer" value="/2022/08/part-3-how-i-met-your-beacon-brute-ratel/" /><div id="frm_field_10_container" class="frm_form_field form-field  frm_none_container frm_full">
    <label for="field_nkjbj" id="field_nkjbj_label" class="frm_primary_label">Email
        <span class="frm_required"></span>
    </label>
    <input type="email" id="field_nkjbj" name="item_meta[10]" value=""  placeholder="Enter your email for updates" data-invmsg="Email is invalid" aria-invalid="false"  />
    
    
</div>
<div id="frm_field_11_container" class="frm_form_field form-field  frm_none_container frm_first frm_full">
    <label for="g-recaptcha-response" id="field_ah4d8_label" class="frm_primary_label">
        <span class="frm_required"></span>
    </label>
    <div  id="field_ah4d8" class="frm-g-recaptcha" data-sitekey="6Lc27L0ZAAAAAMV4QCtKwWRbT-Hm1FnY6IKqcSxw" data-size="invisible" data-theme="light"></div>
    
    
</div>
	<input type="hidden" name="item_key" value="" />
			<div id="frm_field_29_container">
			<label for="field_xaxxy"  style="display:none;">
				If you are human, leave this field blank.			</label>
			<input  id="field_xaxxy" type="text" class="frm_form_field form-field frm_verify" name="item_meta[29]" value=""  style="display:none;" />
		</div>
		<input name="frm_state" type="hidden" value="sLl+is0DzTJ53hwWmIZHJ93AFeMhYrOB8yG9US4sGwU=" /><div class="frm_submit">

<button class="frm_button_submit" type="submit"  >Submit</button>

</div></div>
</fieldset>
</div>

</form>
</div>
			
		</div>
	</div>
</section>

		</div>
	<!-- Site Wrapper End -->
	
	<!-- Footer Start -->	
	<footer>
		<div class="content-wrapper clearfix">
			<div class="footer-col">
				<div class="footer-logo">
					<a href="https://www.mdsec.co.uk" title="MDSec">
						<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/mdsec-logo.svg" alt="MDsec">
					</a>
				</div>
			</div>
			<div class="footer-col">
				<h3>Services</h3>
				<nav class="footer-nav">
					<ul>
						<li><a href="https://www.mdsec.co.uk/our-services/adversary-simulation/">Adversary Simulation</a></li>
						<li><a href="https://www.mdsec.co.uk/our-services/applicaton-security/">Application Security</a></li>
						<li><a href="https://www.mdsec.co.uk/our-services/penetration-testing/">Penetration Testing</a></li>
						<li><a href="https://www.mdsec.co.uk/our-services/response/">Response</a></li>
					</ul>
				</nav>
				<h3>Resource Centre</h3>
				<nav class="footer-nav">
					<ul>
						<li><a href="https://www.mdsec.co.uk/knowledge-centre/research/">Research</a></li>
						<li><a href="https://www.mdsec.co.uk/knowledge-centre/training/">Training</a></li>
						<li><a href="https://www.mdsec.co.uk/knowledge-centre/insights/">Insights</a></li>
					</ul>
				</nav>				
			</div>
			<div class="footer-col">
				<h3>Company</h3>
				<nav class="footer-nav">
					<ul>
						<li><a href="https://www.mdsec.co.uk/about/">About</a></li>
						<li><a href="https://www.mdsec.co.uk/contact/">Contact</a></li>
						<li><a href="https://www.mdsec.co.uk/careers/">Careers</a></li>
						<li><a href="https://www.mdsec.co.uk/privacy-policy/">Privacy</a></li>
					</ul>
				</nav>
				<p>
					t: +44 (0) 1625 263 503<br>
					e: <a href="mailto:contact@mdsec.co.uk">contact@mdsec.co.uk</a>
				</p>
				<p>
					32A Park Green<br>
					Macclesfield<br>
					Cheshire<br>
					SK11 7NA
				</p>
			</div>
			<div class="footer-col">
				<h3>Accreditations</h3>
				<div class="logo-list clearfix">
					<div class="logo-list__item">
						<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/logos/best.png" alt="Best">
					</div>
					<div class="logo-list__item">
						<img src="https://www.mdsec.co.uk/wp-content/uploads/2019/11/check-whitetrans.png" alt="IT Health Check Service">
					</div>
					<div class="logo-list__item">
						<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/logos/crest-star.png" alt="Crest Star">
					</div>
					<div class="logo-list__item">
						<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/logos/crest.png" alt="Crest">
					</div>
					<div class="logo-list__item">
						<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/logos/cyber-essentials.png" alt="Cyber Essentials">
					</div>
					<div class="logo-list__item">
						<img src="https://www.mdsec.co.uk/wp-content/themes/mdsec/img/logos/british-assessment-bureau.png" alt="British Assessment Bureau">
					</div>
				</div>
			</div>
		</div>
	</footer>

	<div class="end clearfix">
		<div class="end__left">
			Copyright 2025 MDSec
		</div>
		<div class="end__right">
			<!--<a href="#">Privacy Policy</a>-->
		</div>
	</div>
	<!-- Footer End -->
	
    <script type="7e28dcd54f536f2053cb55c3-text/javascript">
				( function() {
					const style = document.createElement( 'style' );
					style.appendChild( document.createTextNode( '#frm_field_29_container {visibility:hidden;overflow:hidden;width:0;height:0;position:absolute;}' ) );
					document.head.appendChild( style );
					document.currentScript?.remove();
				} )();
			</script><script type="speculationrules">
{"prefetch":[{"source":"document","where":{"and":[{"href_matches":"\/*"},{"not":{"href_matches":["\/wp-*.php","\/wp-admin\/*","\/wp-content\/uploads\/*","\/wp-content\/*","\/wp-content\/plugins\/*","\/wp-content\/themes\/mdsec\/*","\/*\\?(.+)"]}},{"not":{"selector_matches":"a[rel~=\"nofollow\"]"}},{"not":{"selector_matches":".no-prefetch, .no-prefetch a"}}]},"eagerness":"conservative"}]}
</script>
<script type="7e28dcd54f536f2053cb55c3-text/javascript" src="https://www.mdsec.co.uk/wp-includes/js/jquery/jquery.js?ver=1.11.0" id="jquery-js"></script>
<script type="7e28dcd54f536f2053cb55c3-text/javascript" src="https://www.mdsec.co.uk/wp-content/themes/mdsec/js/main.js?ver=1" id="main-js"></script>
<script type="7e28dcd54f536f2053cb55c3-text/javascript" src="https://www.mdsec.co.uk/wp-content/themes/mdsec/js/highlight.min.js?ver=1" id="prism-js-js"></script>
<script type="7e28dcd54f536f2053cb55c3-text/javascript" src="https://www.mdsec.co.uk/wp-content/themes/mdsec/js/isotope.pkgd.min.js?ver=1" id="isotope-js-js"></script>
<script type="7e28dcd54f536f2053cb55c3-text/javascript" src="https://www.mdsec.co.uk/wp-content/themes/mdsec/js/jquery.matchHeight.js?ver=1.0.0" id="matchheight-js-js"></script>
<script type="7e28dcd54f536f2053cb55c3-text/javascript" src="https://www.mdsec.co.uk/wp-content/themes/mdsec/js/modernizr.js?ver=2.8.3" id="modernizr-script-js"></script>
<script type="7e28dcd54f536f2053cb55c3-text/javascript" id="formidable-js-extra">
/* <![CDATA[ */
var frm_js = {"ajax_url":"https:\/\/www.mdsec.co.uk\/wp-admin\/admin-ajax.php","images_url":"https:\/\/www.mdsec.co.uk\/wp-content\/plugins\/formidable\/images","loading":"Loading\u2026","remove":"Remove","offset":"4","nonce":"e8f3c74dcf","id":"ID","no_results":"No results match","file_spam":"That file looks like Spam.","calc_error":"There is an error in the calculation in the field with key","empty_fields":"Please complete the preceding required fields before uploading a file.","focus_first_error":"1","include_alert_role":"1","include_resend_email":""};
/* ]]> */
</script>
<script type="7e28dcd54f536f2053cb55c3-text/javascript" src="https://www.mdsec.co.uk/wp-content/plugins/formidable/js/frm.min.js?ver=6.24.1" id="formidable-js"></script>
<script type="7e28dcd54f536f2053cb55c3-text/javascript" defer="defer" async="async" src="https://www.google.com/recaptcha/api.js?onload=frmRecaptcha&amp;render=explicit&amp;ver=3" id="captcha-api-js"></script>

	<script type="7e28dcd54f536f2053cb55c3-text/javascript">
		
		$grid = jQuery('.grid').isotope({
			itemSelector: '.grid-item',
			percentPosition: true,
			masonry: {
			columnWidth: '.grid-sizer',
			gutter: '.gutter-sizer',
			}
		});

		jQuery('.filter-group').on( 'click', 'li', function() {
			var filterValue = jQuery(this).attr('data-filter');
			var filterName = jQuery(this).attr('data-name');
			$grid.isotope({ filter: filterValue });
			var elems = $grid.isotope('getFilteredItemElements');
			jQuery(".sort-group-item").removeClass('active');

		});	

	</script>
	<script type="7e28dcd54f536f2053cb55c3-text/javascript" src='/wp-content/themes/mdsec/jquery.marquee.min.js'></script>		
	<script type="7e28dcd54f536f2053cb55c3-text/javascript">
	jQuery(window).load(function() {
		jQuery('.message').marquee({
			//speed in milliseconds of the marquee
			duration: 12000,
			//gap in pixels between the tickers
			gap: 0,
			//time in milliseconds before the marquee will start animating
			delayBeforeStart: 500,
			//'left' or 'right'
			direction: 'left',
			//true or false - should the marquee be duplicated to show an effect of continues flow
			duplicated: true,
			pauseOnHover: true,
			startVisible: true
		});
		
		jQuery('.message-item').css('opacity', '1');
	});
	</script>
	<script type="7e28dcd54f536f2053cb55c3-text/javascript">hljs.initHighlightingOnLoad();</script>



    	    			
<script src="/cdn-cgi/scripts/7d0fa10a/cloudflare-static/rocket-loader.min.js" data-cf-settings="7e28dcd54f536f2053cb55c3-|49" defer></script></body>
<!-- Body End -->

</html>
