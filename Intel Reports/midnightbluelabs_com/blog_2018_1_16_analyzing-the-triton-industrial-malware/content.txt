<!DOCTYPE html><!-- Last Published: Mon Mar 17 2025 09:48:18 GMT+0000 (Coordinated Universal Time) --><html data-wf-domain="www.midnightblue.nl" data-wf-page="6721124edbaba72cfbf44b49" data-wf-site="64a2900ed5e9bb672af9b2ed"><head><meta charset="utf-8"/><title>Analyzing the TRITON industrial malware</title><meta content="A discussion of an incident targeting Schneider Triconex, along with its background, the TRITON attack framework and the attack payload." name="description"/><meta content="Analyzing the TRITON industrial malware" property="og:title"/><meta content="A discussion of an incident targeting Schneider Triconex, along with its background, the TRITON attack framework and the attack payload." property="og:description"/><meta content="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64a29febc9120baf1b431924_midnightblue.jpg" property="og:image"/><meta content="Analyzing the TRITON industrial malware" property="twitter:title"/><meta content="A discussion of an incident targeting Schneider Triconex, along with its background, the TRITON attack framework and the attack payload." property="twitter:description"/><meta content="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64a29febc9120baf1b431924_midnightblue.jpg" property="twitter:image"/><meta property="og:type" content="website"/><meta content="summary_large_image" name="twitter:card"/><meta content="width=device-width, initial-scale=1" name="viewport"/><link href="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/css/midnightblue.webflow.1b7924166.css" rel="stylesheet" type="text/css"/><style>@media (min-width:992px) {html.w-mod-js:not(.w-mod-ix) [data-w-id="1d7775dd-f930-2742-04d7-cc0544d317b6"] {opacity:0;}html.w-mod-js:not(.w-mod-ix) [data-w-id="1d7775dd-f930-2742-04d7-cc0544d317c6"] {-webkit-transform:translate3d(0, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(-180deg) skew(0, 0);-moz-transform:translate3d(0, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(-180deg) skew(0, 0);-ms-transform:translate3d(0, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(-180deg) skew(0, 0);transform:translate3d(0, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(-180deg) skew(0, 0);}html.w-mod-js:not(.w-mod-ix) [data-w-id="1d7775dd-f930-2742-04d7-cc0544d317ca"] {-webkit-transform:translate3d(0vw, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0vw, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0vw, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0vw, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);}html.w-mod-js:not(.w-mod-ix) [data-w-id="1d7775dd-f930-2742-04d7-cc0544d317c8"] {-webkit-transform:translate3d(0%, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0%, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0%, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0%, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);}html.w-mod-js:not(.w-mod-ix) [data-w-id="1d7775dd-f930-2742-04d7-cc0544d317f6"] {display:none;opacity:0;-webkit-transform:translate3d(0, 2px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 2px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 2px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 2px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);}html.w-mod-js:not(.w-mod-ix) [data-w-id="1d7775dd-f930-2742-04d7-cc0544d317f4"] {-webkit-transform:translate3d(0, 0px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 0px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 0px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 0px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);}html.w-mod-js:not(.w-mod-ix) [data-w-id="1d7775dd-f930-2742-04d7-cc0544d31805"] {display:none;opacity:0;-webkit-transform:translate3d(0, 2px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 2px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 2px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 2px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);}html.w-mod-js:not(.w-mod-ix) [data-w-id="1d7775dd-f930-2742-04d7-cc0544d31803"] {-webkit-transform:translate3d(0, 0px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 0px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 0px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 0px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);}html.w-mod-js:not(.w-mod-ix) [data-w-id="1d7775dd-f930-2742-04d7-cc0544d31899"] {-webkit-transform:translate3d(0, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(-180deg) skew(0, 0);-moz-transform:translate3d(0, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(-180deg) skew(0, 0);-ms-transform:translate3d(0, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(-180deg) skew(0, 0);transform:translate3d(0, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(-180deg) skew(0, 0);}html.w-mod-js:not(.w-mod-ix) [data-w-id="1d7775dd-f930-2742-04d7-cc0544d3189b"] {-webkit-transform:translate3d(0%, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0%, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0%, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0%, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);}html.w-mod-js:not(.w-mod-ix) [data-w-id="1d7775dd-f930-2742-04d7-cc0544d318af"] {-webkit-transform:translate3d(0, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(-180deg) skew(0, 0);-moz-transform:translate3d(0, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(-180deg) skew(0, 0);-ms-transform:translate3d(0, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(-180deg) skew(0, 0);transform:translate3d(0, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(-180deg) skew(0, 0);}html.w-mod-js:not(.w-mod-ix) [data-w-id="1d7775dd-f930-2742-04d7-cc0544d318b1"] {-webkit-transform:translate3d(0%, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0%, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0%, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0%, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);}}</style><link href="https://fonts.googleapis.com" rel="preconnect"/><link href="https://fonts.gstatic.com" rel="preconnect" crossorigin="anonymous"/><script src="https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js" type="text/javascript"></script><script type="text/javascript">WebFont.load({  google: {    families: ["Open Sans:300,300italic,400,400italic,600,600italic,700,700italic,800,800italic","Poppins:100,200,300,regular,500,600,700,800,900"]  }});</script><script type="text/javascript">!function(o,c){var n=c.documentElement,t=" w-mod-";n.className+=t+"js",("ontouchstart"in o||o.DocumentTouch&&c instanceof DocumentTouch)&&(n.className+=t+"touch")}(window,document);</script><link href="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64a2928ba843a3c5c35b1ab6_midnightblue%20favicon.png" rel="shortcut icon" type="image/x-icon"/><link href="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64a29292e7f60775e38b9b38_midnightblue%20webclip.png" rel="apple-touch-icon"/><script src="https://www.google.com/recaptcha/api.js" type="text/javascript"></script><style type="text/css">
/* Styles not to be applied in Designer */
.cursor-wrap {
  position: fixed;
  top: 0;
  left: 0;
  pointer-events: none;
  z-index:9999;
  mix-blend-mode: difference;
}

/* Hide scrollbars wherever supported */
body {
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */
  overscroll-behavior-y: none; /* Disable 'bounce back' and other browser effects upon scrolling past page end */
}
html::-webkit-scrollbar,
body::-webkit-scrollbar {
  display: none; /* Webkit */
  width: 0; /* Chromium */
}
  
/* Override placement of nav button to compensate for scrollbar width
 * We probably can remove this, unless if in some configuration the scroll bar is still shown. 
 * We leave it just in case, since if the scroll bar is hidden, calc() will just compute 9.6vw. 
 */
@media (min-width: 991px) {
  .button.navbutton {
    right: calc(9.6vw - (100vw - 100%));
  }
}

.cursor {
  position: fixed;
  top: -30px;
  left: -30px;
  z-index:9999;
}
  
.grow {
  transform:scale(5) !important;
  opacity:.2;
}

.circle {
  transform: scale(0.8);
  transition: all 0.35s ease-in-out;
  z-index:9999;
}

  
@media (max-width: 1281px) {
  .cursor-wrap {
    display:none !important;
  }
  
  .cursor {
    display:none !important;
  }
  
  .circle {
    display:none !important;
  }
}
</style></head><body class="body-white"><div class="general-css w-embed"><style type="text/css">
* {
	  text-rendering: optimizeLegibility;
    -moz-osx-font-smoothing: grayscale;
    font-smoothing: antialiased;
    -webkit-font-smoothing: antialiased;
}



@media only screen and (min-width: 991px) {
  .nav, .scrollbar {
  	mix-blend-mode:difference;
  }
}

/* Hide scrollbar for Chrome, Safari and Opera */
body::-webkit-scrollbar {
  display: none;
}

/* Hide scrollbar for IE, Edge and Firefox */
body {
  -ms-overflow-style: none;  /* IE and Edge */
  scrollbar-width: none;  /* Firefox */
}

@media only screen and (min-width: 991px) {
  .service-item:nth-child(3n+3) > .absolute-service-image {
    display:block !important;
  }
}

/* Hide scrollbar for Chrome, Safari and Opera */
.anchors-list::-webkit-scrollbar {
  display: none;
}

/* Hide scrollbar for IE, Edge and Firefox */
.anchors-list {
  -ms-overflow-style: none;  /* IE and Edge */
  scrollbar-width: none;  /* Firefox */
}



@media only screen and (min-width: 1700px) {
  .menu-text, .button, .paragraph {
    font-size:.7vw;
  }
  .navbutton {
  	top:1.8vw !important;
  }
  .menu-items {
  	padding: .25vw 1.75vw .25vw 10.5vw;
  }
}

/* Zigzag text/img listings */
@media only screen and (min-width: 991px) {
  .zigzag-item:nth-child(even) > .zigzag-image {
    order:-1 !important;
  }
}
</style></div><div class="scrollbar"><div class="scrollbar-indicator"></div></div><div id="top" class="nav"><div class="container hspread"><a href="/" class="logo-link w-inline-block"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64a2a0979af1f6039e015fa6_midnightblue-logo-white.svg" loading="lazy" alt="Midnight Blue" class="c-logo_white"/></a><div class="menu-items"><div class="div-block"><div data-w-id="5352f572-d7e1-678b-de2b-ce77feedf2eb" data-is-ix2-target="1" class="hamburger first" data-animation-type="lottie" data-src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64a2cead08e32f68f5834bb1_Comp%201.json" data-loop="0" data-direction="1" data-autoplay="0" data-renderer="svg" data-default-duration="2" data-duration="0" data-ix2-initial-state="0"></div></div></div></div></div><div class="nav-open-wrapper"><div class="nav-open"><div class="nav-column noshrink"><a href="/" class="nav-link w-inline-block"><h3 class="h3 mbot-0">Home</h3></a><a href="/services" class="nav-link w-inline-block"><h3 class="h3 mbot-0">Services</h3></a><a href="/markets" class="nav-link w-inline-block"><h3 class="h3 mbot-0">Markets</h3></a><a href="/knowledge" class="nav-link hide-on-mobile w-inline-block"><h3 class="h3 mbot-0">Knowledge</h3></a><a href="/knowledge?type=Research" class="nav-link only-mobile w-inline-block"><h3 class="h3 mbot-0">Research</h3></a><a href="/knowledge?type=Cases" class="nav-link only-mobile w-inline-block"><h3 class="h3 mbot-0">Cases</h3></a><a href="/knowledge?type=Blog" class="nav-link only-mobile w-inline-block"><h3 class="h3 mbot-0">Blog</h3></a><a href="/company" class="nav-link w-inline-block"><h3 class="h3 mbot-0">Company</h3></a><a href="/contact-us" class="nav-link w-inline-block"><h3 class="h3 mbot-0">Contact</h3></a></div><div class="nav-column spread"><div class="nav-categories"><div class="nav-category"><div class="paragraph poppins dark-gray">Services</div><div class="nav-category-wrap w-dyn-list"><div role="list" class="nav-category-links w-dyn-items"><div role="listitem" class="nav-category-item w-dyn-item"><a data-w-id="4c8513d9-72ff-7024-1b2d-6636e991dc21" href="/services/systems-vulnerability-research" class="category-link w-inline-block"><div class="sub-item-line"><div class="hover-line-inner"></div></div><div class="paragraph poppins dark mbot-0">Systems &amp; vulnerability research</div></a></div><div role="listitem" class="nav-category-item w-dyn-item"><a data-w-id="4c8513d9-72ff-7024-1b2d-6636e991dc21" href="/services/capability-development" class="category-link w-inline-block"><div class="sub-item-line"><div class="hover-line-inner"></div></div><div class="paragraph poppins dark mbot-0">Capability development</div></a></div><div role="listitem" class="nav-category-item w-dyn-item"><a data-w-id="4c8513d9-72ff-7024-1b2d-6636e991dc21" href="/services/defensive-design" class="category-link w-inline-block"><div class="sub-item-line"><div class="hover-line-inner"></div></div><div class="paragraph poppins dark mbot-0">Defensive design</div></a></div></div></div></div><div class="nav-category"><div class="paragraph poppins dark-gray">Knowledge</div><div class="nav-category-links"><a data-w-id="3800f21f-892e-bb38-f38b-69005f993ec3" href="/knowledge?type=Research" class="category-link w-inline-block"><div class="sub-item-line"><div class="hover-line-inner"></div></div><div class="paragraph poppins dark mbot-0">Research</div></a><a data-w-id="3800f21f-892e-bb38-f38b-69005f993ec8" href="/knowledge?type=Cases" class="category-link w-inline-block"><div class="sub-item-line"><div class="hover-line-inner"></div></div><div class="paragraph poppins dark mbot-0">Cases</div></a><a data-w-id="3800f21f-892e-bb38-f38b-69005f993ecd" href="/knowledge?type=Blog" class="category-link w-inline-block"><div class="sub-item-line"><div class="hover-line-inner"></div></div><div class="paragraph poppins dark mbot-0">Blog</div></a></div></div></div><div class="contact-methods in-menu"><a data-w-id="3800f21f-892e-bb38-f38b-69005f993ed3" href="mailto:sales@midnightblue.nl" class="contact-method w-inline-block"><div class="arrow-container"><div class="arrow-wrapper to-left"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f2ccee1510d6f5717b738b_envelope.svg" loading="lazy" alt="" class="arrow-inner"/></div><div class="arrow-wrapper"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f2ccee1510d6f5717b738b_envelope.svg" loading="lazy" alt="" class="arrow-inner"/></div></div><p class="paragraph dark poppins medium mbot-0">sales[ Â ]midnightblue[ Â ]nl</p></a><a data-w-id="3800f21f-892e-bb38-f38b-69005f993edb" href="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64b8288f60eb4ca6ae6cd45f_sales%40midnightblue.nl-(0x9035856DF1D41F73)-public.asc.txt" target="_blank" class="contact-method w-inline-block"><div class="arrow-container"><div class="arrow-wrapper to-left"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f2cd0d6b8ca1f7d94bad55_key.svg" loading="lazy" alt="" class="arrow-inner"/></div><div class="arrow-wrapper"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f2cd0d6b8ca1f7d94bad55_key.svg" loading="lazy" alt="" class="arrow-inner"/></div></div><p class="paragraph dark poppins medium mbot-0">PGP (0x9035856DF1D41F73)</p></a></div></div></div></div><a href="/contact-us" class="button navbutton w-button">Work with us</a><div id="go-to-top" data-w-id="1d7775dd-f930-2742-04d7-cc0544d317b6" class="page-wrapper"><section id="top" class="detail-hero blog"><div class="container"><div class="padded-content"><div class="spread vertical-mobile"><div class="labels"><div data-w-id="1d7775dd-f930-2742-04d7-cc0544d317bc" style="-webkit-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);opacity:0" class="paragraph">January, 2018</div><div class="timing"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f32a73150b858761f8cdb8_clock%20white.svg" loading="lazy" alt="Reading time" class="timing-icon"/><div class="paragraph">30 Minutes</div></div><div fs-cmsfilter-field="type" class="paragraph blue semibold as-label white-label">Blog</div></div><a data-w-id="1d7775dd-f930-2742-04d7-cc0544d317c4" href="/knowledge" class="contact-method first-mobile w-inline-block"><div class="arrow-container"><div data-w-id="1d7775dd-f930-2742-04d7-cc0544d317c6" class="arrow-wrapper to-left"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f9c88b30b39c80c94779d3_white%20arrow.svg" loading="lazy" alt="" class="arrow-inner"/></div><div data-w-id="1d7775dd-f930-2742-04d7-cc0544d317c8" class="arrow-wrapper"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f9c88b30b39c80c94779d3_white%20arrow.svg" loading="lazy" alt="" class="arrow-inner"/></div></div><p data-w-id="1d7775dd-f930-2742-04d7-cc0544d317ca" class="paragraph">Overview</p></a></div><div class="title-mask"><h1 data-w-id="1d7775dd-f930-2742-04d7-cc0544d317cd" style="-webkit-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);opacity:0" class="h1 uppercase">Analyzing the TRITON industrial malware</h1></div></div><div data-w-id="1d7775dd-f930-2742-04d7-cc0544d317cf" class="image-wrap negative"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64a2a86786350c0fc28bf801_bg%20img%20(1).jpg" loading="lazy" sizes="(max-width: 991px) 90vw, 95vw" srcset="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64a2a86786350c0fc28bf801_bg%20img%20(1)-p-500.jpg 500w, https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64a2a86786350c0fc28bf801_bg%20img%20(1)-p-800.jpg 800w, https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64a2a86786350c0fc28bf801_bg%20img%20(1)-p-1080.jpg 1080w, https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64a2a86786350c0fc28bf801_bg%20img%20(1)-p-1600.jpg 1600w, https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64a2a86786350c0fc28bf801_bg%20img%20(1).jpg 2484w" alt="" class="image-inner parallax"/><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64a2a2e372d93ae04306af5f_midnightblue-logo-dark.svg" loading="lazy" alt="" class="blog-icon"/></div></div><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f9c8e9fe42e97e00f57a95_fade.svg" loading="lazy" alt="" class="fade"/><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f9c930b53f01981d9c24f4_circles.svg" loading="lazy" alt="" class="circles"/></section><section class="smoke-section as-first"><div class="container"><div class="padded-content"><div id="project" class="content-block"><h2 data-w-id="1d7775dd-f930-2742-04d7-cc0544d317d8" style="-webkit-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);opacity:0" class="paragraph dark poppins medium gray mbot-2">Introduction</h2><div class="two-grid"><p id="w-node-_1d7775dd-f930-2742-04d7-cc0544d317db-fbf44b49" data-w-id="1d7775dd-f930-2742-04d7-cc0544d317db" style="-webkit-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);opacity:0" class="paragraph dark">Last month FireEye released <a href="https://www.fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.html">a report detailing an incident</a> that their subsidiary Mandiant responded to at a critical infrastructure organization. Here a malware framework, dubbed TRITON (also referred to as TRISIS or HatMan), was discovered targeting the <a href="https://www.schneider-electric.com/en/work/products/industrial-automation-control/triconex-safety-systems/">Schneider Electric Triconex</a> line of industrial safety systems, allegedly in order to cause physical damage and shut down operations. The activity was believed to be consistent with a nation state preparing for an attack. According to a Dragos <a href="https://dragos.com/blog/trisis/TRISIS-01.pdf">report on the same malware</a>, their team discovered TRITON being deployed against at least one victim in the Middle East in mid-November 2017.</p><p id="w-node-_1d7775dd-f930-2742-04d7-cc0544d317e0-fbf44b49" data-w-id="1d7775dd-f930-2742-04d7-cc0544d317e0" style="-webkit-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);opacity:0" class="paragraph dark">This blog post aims to discuss the incident background, the TRITON framework and the attack payload in an effort to clarify this attack in particular and attacks on industrial safety systems in general. It draws upon previously published reports by <a href="https://fireeye.com/blog/threat-research/2017/12/attackers-deploy-new-ics-attack-framework-triton.htm">FireEye</a>, <a href="https://dragos.com/blog/trisis/TRISIS-01.pdf">Dragos</a> and <a href="https://ics-cert.us-cert.gov/sites/default/files/documents/MAR-17-352-01%20HatMan%E2%80%94Safety%20System%20Targeted%20Malware_S508C.pdf">ICS-CERT</a> as well as analysis (which can be <a href="https://github.com/samvartaka/triton_analysis">found here</a>) by Midnight Blue and <a href="https://twitter.com/bl4ckic3">Ali Abbasi</a> of the <a href="https://github.com/ICSrepo/TRISIS-TRITON-HATMAN">publicly available malware</a>. Further details of the incident and malware are likely to be discussed by others during <a href="https://s4x18.com/sessions/aurora-10-years-later-progress-failure-what-remains-to-be-learned">this week&#x27;s S4x18 TRITON/TRISIS session</a>.</p></div></div></div></div></section><section class="white-section"><div class="container"><div class="padded-content"><div class="content-block"><div data-w-id="1d7775dd-f930-2742-04d7-cc0544d317ec" style="-webkit-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);opacity:0" class="paragraph dark mbot-0 w-richtext"><h2>Summary</h2><p>TRITON is the first publicly known example of malware targeting industrial safety controllers, an escalation with serious potential consequences compared to previous ICS-focussed incidents. It has been deployed against at least one victim in the Middle East with no indications of victims outside of the Middle East so far. TRITON is a framework for implanting Schneider Electric Triconex safety controllers with a passive backdoor through which attackers can, at a later point in time, inject potentially destructive payloads.</p><p>Though the potential impact is very serious (including infrastructural damage and loss of life resulting from sabotaging critical safety systems) it is important to nuance the threat posed by the discovery of this malware, especially when the original attacker intent remains speculative. In addition, the attack is not very scalable even against other Triconex safety controllers due to the complexity of required industrial process comprehension. However, a sufficiently knowledgeable and well-resourced attacker seeking to target a facility using Triconex controllers as part of its safety systems could repurpose TRITON, thereby lowering the bar somewhat by removing the barrier of reverse-engineering the proprietary TriStation protocol. The incident is illustrative of various woes in the industrial cybersecurity world which have been discussed extensively over the past years, ranging from devices which are &#x27;insecure by design&#x27; and have been exposed to hyper-connected environments they were not quite designed for to a lack of basic IT/OT security hygiene and early warning insights on part of asset owners.</p><h2>Background</h2><p>TRITON is one of the few publicly known examples of malware targeting Industrial Control Systems (ICS), after <a href="http://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/w32_stuxnet_dossier.pdf">Stuxnet</a>, <a href="https://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/Dragonfly_Threat_Against_Western_Energy_Suppliers.pdf">Havex</a>, <a href="https://www.iod.org.nz/Portals/0/Branches%20and%20events/Canterbury/BOOZ%20ALLEN%20-%20When%20the%20Lights%20Went%20Out.pdf">Blackenergy2 </a>and <a href="https://dragos.com/blog/crashoverride/CrashOverride-01.pdf">Industroyer</a>, and the first publicly known example of malware targeting industrial safety controllers specifically. Safety Instrumented Systems (SIS) are autonomous control systems tasked with maintaining automated process safe states and are typically used to implement safety logic in critical processes where serious damage or loss of life might be a risk. This is done by, for example, monitoring temperature or pressure via sensor inputs and halting the flow or heating of gases when dangerous thresholds are exceeded. They are usually connected to actuators (eg. for opening or closing a valve) in order to override normal process control and halt the runaway process.</p><figure class="w-richtext-align-center w-richtext-figure-type-image"><div><img alt="Basic industrial safety &amp;amp; protection layers (source)" src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65fb10320ffb9bd0a3745662_layers_of_protection.jpeg"/></div><figcaption> Â  Â  Â  Â  Â  Â Basic industrial safety &amp; protection layers (<a href="http://www.pacontrol.com/safetysystems.html">source</a>)</figcaption></figure><p>Safety controllers are typically a kind of Programmable Logic Controller (PLC) designed to high standards with redundant modules and tend to have components that allow for safe failure in case the main processor fails or power is lost. They are deployed in a manner specific to the process environment requirements and are usually configured in one of the <em>IEC 61131-3</em> programming languages (eg. LD, ST, etc.). Of course, safety is not quite the same as security and safety controllers tend to have the same kind of <a href="http://www.digitalbond.com/blog/2013/11/04/insecure-by-design-secure-by-design/">&#x27;insecure by design&#x27;</a> profile as a regular PLC: ie. everything from hardcoded maintenance backdoor accounts to insecure proprietary protocols.</p><p>Traditionally, SIS connectivity is limited and systems are segregated from the rest of the Operational Technology (OT) environment which would limit the potential impact of safety controller security issues. But over the years, as part of a broader trend in embedded systems in general, this isolation has made way for more and more connectivity and systems integration. While this integration comes with benefits in terms of cost, usability and process insights for business intelligence purposes, the flip side is that it exposes systems that were never designed for secure connectivity in the first place to the wider OT and IT environments and by extension to whatever the wider network itself is exposed to. The potential implications of a malicious SIS-compromising attacker are serious and could range from shutting down a process to allowing for unsafe states and manipulating other parts of the OT environment to create such a state which might result in financial losses, damage to equipment, products and the environment or human safety and loss of life.</p><p>But it&#x27;s important to nuance this image and avoid alarmist headlines. First of all because fear, uncertainty and doubt cause sensible analysis and good advice to be lost amid sensationalism and help create a &#x27;boy who cried wolf&#x27; effect where the stock that ICS equipment vendors and OT asset owners and operators put in the opinions of the security industry as a whole erodes over time. Secondly, while the initial steps along the &#x27;<a href="https://www.sans.org/reading-room/whitepapers/ICS/industrial-control-system-cyber-kill-chain-36297">ICS Kill Chain</a>&#x27;, up to and including the compromise of the safety controller, might seem relatively simple, crafting the &#x27;<em>OT payload</em>&#x27; that actually does the damage is typically neither easy nor scalable. As pointed out by <a href="http://eprints.lancs.ac.uk/88089/1/sample_sigconf.pdf">Benjamin Green, Marina Krotofil and Ali Abbasi</a> such attacks require a high level of process comprehension which would have to be derived from analysis of acquired documents, diagrams, data historian files, device configurations and network traffic. This would have to be done on a facility-to-facility basis since even attacks against two functionally similar facilities will require attackers to take differences in process scale and design, equipment and device configuration into account.</p><p>In the case of SIS that means that a security compromise does not trivially compromise process safety. Apart from the SIS, the facility in question might have safety measures ranging from sacrificial parts in machines, enclosures and blast dampers to alarms and emergency procedures and as such assessing the implications of SIS compromise would require facility-specific process comprehension as well. This does not mean that such worst-case scenarios are infeasible but that the attacker space capable of bringing them about and their scalability are more limited than often portrayed.</p><h2>The Incident</h2><p>The FireEye report claims that the attacker gained remote access to a Triconex engineering workstation running Microsoft Windows as well as the <em>Distributed Control System (DCS)</em>. The attacker deployed a Py2EXE application, which was disguised as a benign Triconex log reviewing application named Trilog.exe, containing the TRITON framework on the engineering workstation together with two binary payload files named inject.bin and imain.bin. TRITON does not leverage any 0-days but instead reprograms the target safety controllers via the <em>TriStation </em>protocol (discussed below) which lacks authentication (though ACLs could have been configured on the controllers). As the TriStation protocol is proprietary and undocumented this means the attacker had to reverse engineer it, possibly through a combination of using similarities with the documented <em>Triconex System Access Application (TSAA)</em> protocol, inspection of traffic between the engineering workstation and the controller and reverse-engineering of workstation software and controller firmware.</p><p>The TRITON framework is capable of autodiscovering Triconex controllers on the network by sending a UDP broadcast message over port 1502 but this functionality was not used during the incident. Instead the IP addresses of the target controllers were specified directly and upon connection the status of the controller was retrieved over TriStation. If the controller was running the inject.bin and imain.bin payload files were injected into the controller program memory and a periodic check was initiated to see if any error was detected. If so, TRITON would reset the controller to the previous state over Tristation and if this failed it would write a dummy program to memory in what was likely an attempt at anti-forensics. During the incident, the industrial process was shutdown as a result of some controllers entering a failed safe state which caused the asset owner to initiate the investigation. The cause of this failed safe state was reportedly a failed validation check between the three separate redundant Triconex processor modules.</p><p>The fact that both the DCS and SIS systems were compromised suggests the attacker intended to cause serious damage rather than a mere process shutdown. This hypothesis is strengthened (though not indisputably confirmed) by the fact that the attacker apparently made several attempts to deliver a specific control logic to the safety controllers rather than merely shut them down.</p><h2>Triconex Safety Instrumented Systems (SIS)</h2><p>The Schneider Electric Triconex line of safety controllers consists of the <em>Tricon (CX), Trident and Tri-GP</em> systems all of which share the <em>triple modular redundancy (TMR)</em> architecture. While the incident targeted <em>Tricon 3008</em> controllers specifically, the heart of the attack is the (ab)use of the unauthenticated TriStation protocol and as such all safety controllers running this protocol are potentially affected.</p><figure class="w-richtext-align-center w-richtext-figure-type-image"><div><img alt="Tricon 3008 front panel (source)" src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65fb104e4fc1d6e32b2a08a5_tricon_3008_panel.png"/></div></figure><p>According to the <a href="https://www.nrc.gov/docs/ML0932/ML093290420.pdf">Planning and Installation Guide for Tricon v9âv10 Systems</a>, a basic Tricon controller consists of the Main Processors, I/O modules, communication modules, chassis, field wiring connections and an engineering workstation PC communicating with the controller over TriStation. A chassis houses three <em>Main Processor (MP)</em> Modules, each of which serve one channel (or &#x27;leg&#x27;) of the controller and independently executes the control program and communicates with its own I/O subsystem (every I/O module has three independent channels for serving the three MPs) in parallel with the other Main Processors. The three MP modules, which operate autonomously without shared clocks, power regulation or circuitry, then compare data and control program at periodic intervals and synchronize with their neighbors over a high-speed proprietary communications bus named <em>TriBus</em>. TriBus consists of three independent serial links. Hardware voting on the I/O data takes place over TriBus among the MPs and if disagreement occurs, the signal in two out of three prevails and the third MP is corrected. Here one-time differences are distinguished from patterns of differences. This Triple Modular Redundant (TMR) architecture is designed for fault tolerance in the face of transient faults or component failures.</p><figure class="w-richtext-align-center w-richtext-figure-type-image"><div><img alt="trm.png" src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65fb1071527c6f9efa5a2c51_trm.png"/></div></figure><p>There are a variety of communication modules, talking to the Main Processors over the communication bus, for Triconex controllers to facilitate serial and network communications across a variety of protocols. Examples include the <em>Advanced Communication Module (ACM)</em> which acts as an interface between a Tricon controller and a <em>Foxboro Intelligent Automation (I/A)</em> Series DCS, the <em>Hiway Interface Module (HIM)</em> which acts as an interface between a Tricon controller and a <em>Honeywell TDC-3000</em> control system or the <em>Tricon Communication Module (TCM)</em> which allows communications with TriStation, other Triconex controllers, Modbus master/slave devices and external hosts over Ethernet networks. These communications include the documented <em>Tricon System Access Application (TSAA) </em>protocol, a multi-slave master/slave protocol used to read and write data points, and the undocumented TriStation protocol, a single-slave master/slave protocol used by the <a href="https://www.nrc.gov/docs/ML0932/ML093290423.pdf">TriStation 1131 or MSW engineering workstation software</a> to develop and download the control program running on the Triconex controllers. By default, Ethernet communications for TSAA take place over UDP port 1500 while those for TriStation take place over UDP port 1502.</p><p>The Triconex controllers have a physical four-position key switch which can be set to either <em>RUN </em>(normal operation, read-only but can be overridden by a GATENB function block in the control program), <em>PROGRAM </em>(allows control program loading and verification), <em>STOP</em> (stop reading inputs, forces non-retentive digital and analog outputs to 0, and halts the control program. This position can be overridden by TriStation) or <em>REMOTE </em>(allows writes to control program variables). However, in the incident in question the target controllers were left in <em>PROGRAM </em>mode and the payload injected by TRITON (described below) allows subsequent malicious modifications by means of communications with the implant regardless of key switch position.</p><figure class="w-richtext-align-center w-richtext-figure-type-image"><div><img alt="tricon_3008_mp.png" src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65fb107f0fb9b5bdba38f55b_tricon_3008_mp.png"/></div></figure><p>A control program is developed and debugged with the TriStation 1131 / MSW software, downloaded to the controller over the TriStation protocol, stored in Flash and then loaded into SRAM or DRAM (depending on the Tricon version) to be executed by the Main Processor module. The control program is translated from one of the IEC 61131-3 languages (LD, FBD, ST) into native PowerPC machine code and interfaces only with the main processor.</p><p>Shortly after the incident was disclosed, the <a href="https://github.com/ICSrepo/TRISIS-TRITON-HATMAN">TRITON framework and payloads</a> were found to be publicly available from multiple sources. The payload files (eg. imain.bin) contain PowerPC shellcode and from this we can infer that the target Triconex controllers in the incident seem to have been using the Tricon 3008 Main Processor Modules. Since older Tricon MPs such as the 3006 or 3007 would use the 32-bit <em>National Semiconductor 32GX32</em> and newer ones such as the 3009 use a (reportedly ARM) dual-core 32-bit processor running at 800MHz, the 3008 are the only Tricon MPs (to our knowledge) which use the PowerPC architecture. More specifically they use the 32-bit <a href="https://www.nxp.com/products/processors-and-microcontrollers/power-architecture-processors/powerquicc-processors/powerquicc-i/mpc860-powerquicc-processor:MPC860">Freescale PowerQUICC MPC860EN microcontroller</a>, a detail which will be relevant when dissecting the shellcode payloads later on.</p><p>The Tricon 3008 MP runs the <em>Enhanced Triconex System Executive (ETSX)</em> firmware (stored in flash) which executes the control program on the main processor. On older Tricon MP modules firmware updates had to take place by manually replacing EPROMs made accessible through cutouts in module side panel but on the Tricon 3008 firmware can be upgraded over Ethernet through the port on the front panel. This can be done by connecting the Ethernet port to a workstation PC running the <em>TcxFwm.exe</em> firmware manager. The dedicated<em> Input and Output Control and Communication (IOCCOM) </em>processor (also an MPC860EN) runs its own firmware separate from the ETSX which can be upgraded in the same fashion using the firmware manager.</p><h2>The TRITON Framework</h2><p>The rather lean TRITON framework was built to facilitate interacting with a Tricon controller via the unauthenticated TriStation protocol over Ethernet. It is capable of functionality such as reading and writing control programs and data, running and halting a program and retrieving status information. The framework is written in Python and consists of the following components:</p><ul role="list"><li><em>TS_cnames.py</em>: contains named lookup constants for TriStation protocol function and response codes as well as key switch and control program states.<br/></li><li><em>TsHi.py</em>: the high-level interface of the framework which allows for reading and writing functions and programs as well as retrieving project information and interaction with the implant payload (as described later). Most interestingly, it includes the <em>SafeAppendProgramMod</em> function which fetches the program table, reads programs and functions and appends supplied shellcode to an existing control program. It also handles CRC32 checksums where necessary.<br/></li><li><em>TsBase.py</em>: acts as a translation layer between the high-level interface and the low-level TriStation function codes and data formatting for functionality such as uploading and downloading of programs or fetching control program status and module versions.<br/></li><li><em>TsLow.py</em>: the lowest layer which implements the functionality to send TriStation packets crafted by the upper layers to the <em>Tricon Communication Module (TCM)</em> over UDP. Also includes auto-discovery of Tricon controllers by sending an UDP &#x27;ping&#x27; broadcast message (0x06 0x00 0x00 0x00 0x00 0x88) on port 1502.</li></ul><p>Finally, apart from the framework there is a script named <em>script_test.py</em> which uses the framework to connect to a Tricon controller and inject a multi-stage payload described later on.</p><h2>The TriStation Protocol</h2><p>The TriStation protocol is a typical UDP-based serial-over-ethernet protocol as encountered throughout the world of industrial control systems. Request packets consist of a 2-byte function code (FC) followed by a counter ID, length field and request data together with checksums. Responses consist of a response code (RC), length field, response data and checksums.</p><p>While we will not exhaustively document the TriStation protocol as reconstructed from the TRITON framework here, the &#x27;heart&#x27; of the TRITON attack lies in the following sequence of function codes and expected response codes:</p><ul role="list"><li>&#x27;<em>Start download change</em>&#x27; (FC: 0x01). Expects &#x27;<em>Download change permitted</em>&#x27; (RC: 0x66). Arguments are `[old_name] [version info] [new_name] [program info]`.<br/></li><li>&#x27;<em>Allocate program</em>&#x27; (FC: 0x37). Expects &#x27;<em>Allocate program response</em>&#x27; (RC: 0x99). Arguments are `[id] [next] [full_chunks] [offset] [len] [data]`.<br/></li><li>&#x27;<em>End download change</em>&#x27; (FC: 0x0B). Expects &#x27;<em>Modification accepted</em>&#x27; (RC: 0x67).</li></ul><p>Apart from that the following TriStation command is used to communicate with the implant after it has been successfully injected:</p><ul role="list"><li>&#x27;<em>Get MP status</em>&#x27; (FC: 0x1D). Expects &#x27;<em>Get system variables response</em>&#x27; (RC: 0x96). Arguments are `[cmd] [mp] [data]`.</li></ul><p>Interestingly, the <a href="https://www.nrc.gov/docs/ML0932/ML093290423.pdf">TriStation Developer&#x27;s Guide</a> mentions it is possible to restrict access to a Tricon controller from a TriStation PC.Projects themselves can be &#x27;password protected&#x27; (though in practice this often comes down to a hashed or even plaintext password stored in the project file which the workstation software checks upon opening the project) and a password can be required for connecting to the controller (which is specified in the project and takes effect after it has been downloaded to the controller). Such a password is not present initially and by default the password is &#x27;PASSWORD&#x27;. Seeing as how the TriStation protocol itself is unencrypted, however, any attacker capable of observing network traffic between the controller and workstation is likely to be able to circumvent such a protection.</p><p>The developer&#x27;s guide also mentions that model 4351A and 4352A TCMs allow for IP-based client access control lists to be specified which regulate access to a resource (ability to perform download change or download all, access to diagnostic information, etc.) at a certain level (deny, read only or read/write). It seems that this functionality could potentially be used to restrict from what IP addresses the TRITON framework could inject its payload or communicate with the implant but the strength of such a workaround would rely on mitigating the ability of the attacker to move laterally among engineering workstations. UDP IP spoofing could also be a problem here.</p><h2>The Payload</h2><p>The payload used in the incident can be thought of as a four-stage shellcode. The first stage is an argument-setting piece of shellcode. The second stage is formed by <em>inject.bin</em> (which is currently not publicly available) which functions as an implant installer. The third stage is formed by <em>imain.bin</em> (discussed below) which functions as a backdoor implant capable of receiving and executing the fourth stage. The final stage would have been formed by an actual &#x27;<em>OT payload</em>&#x27; performing the disruptive operations but apparently no such payload was recovered during the incident since the attacker was discovered while preparing the implant. A high-level description of the first two stages can be found in the <a href="https://ics-cert.us-cert.gov/sites/default/files/documents/MAR-17-352-01%20HatMan%E2%80%94Safety%20System%20Targeted%20Malware_S508C.pdf">United States Department of Homeland Security ICS-CERT report</a> on TRITON/TRISIS/HatMan.</p><h3>Stage 1: Argument-Setter (PresetStatusField)</h3><p>After connecting to the target controller the script calls <a href="https://github.com/ICSrepo/TRISIS-TRITON-HATMAN/blob/c27fcae3dcb0d0ce36ddeef081851039c4a0658d/decompiled_code/script_test.py#L12">PresetStatusField</a> which injects a piece of shellcode using <em>SafeAppendProgramMod</em>. What this shellcode does is iterate through memory from address 0x800000 to 0x800100 (in DRAM) until it finds an address where two 32-bit marker values 0x400000 and 0x600000 reside side-by-side. If it finds this, it writes a value (0x00008001) to offset 0x18 from this address. We reverse-engineered and created a cleaned-up pseudo-c for this shellcode:</p><p>â</p></div><div class="code-block-element"><div class="code-block-script w-embed w-script"><!-- [Attributes by Finsweet] Copy to clipboard -->
<script defer src="https://cdn.jsdelivr.net/npm/@finsweet/attributes-copyclip@1/copyclip.js"></script></div><div class="code-block-css w-embed"><style>
.code-block {
	background-color:#0D1123!important;
  padding:.75vw !important;
}

.linenumber {
	opacity:.3 !important;
  padding-right: 2vw !important;
}

@media only screen and (max-width: 991px) {
  .code-block {
    padding:5px !important;
    padding-top:15px !important;
    padding-bottom:15px !important;
  }
  .linenumber {
    padding-right: 10px !important;
  }
}
</style></div><div class="code-wrapper"><pre contenteditable="false" class="code-block w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-c" style="white-space:pre"><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">1</span><span>r2 = </span><span style="color:#f5ab35">0x800000</span><span>;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">2</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">3</span><span></span><span style="color:#dcc6e0">while</span><span> (</span><span style="color:#f5ab35">true</span><span>)
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">4</span>{
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">5</span><span>    </span><span style="color:#dcc6e0">if</span><span> ((</span><span style="color:#dcc6e0">uint32_t</span><span>)*(</span><span style="color:#dcc6e0">uint32_t</span><span>*)(r2) == </span><span style="color:#f5ab35">0x400000</span><span>) </span><span style="color:#d4d0ab">// cp_status.us</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">6</span>    {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">7</span><span>        </span><span style="color:#dcc6e0">if</span><span> ((</span><span style="color:#dcc6e0">uint32_t</span><span>)*(</span><span style="color:#dcc6e0">uint32_t</span><span>*)(r2 + </span><span style="color:#f5ab35">4</span><span>) == </span><span style="color:#f5ab35">0x600000</span><span>) </span><span style="color:#d4d0ab">// cp_status.ds</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">8</span>        {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">9</span><span>            r2 += </span><span style="color:#f5ab35">0x18</span><span>; </span><span style="color:#d4d0ab">// cp_status.fstat</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">10</span><span>            *(</span><span style="color:#dcc6e0">uint32_t</span><span>*)(r2) = (</span><span style="color:#dcc6e0">uint32_t</span><span>)value;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">11</span><span>            </span><span style="color:#dcc6e0">break</span><span>;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">12</span>        }
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">13</span>    }
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">14</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">15</span><span>    </span><span style="color:#dcc6e0">if</span><span> ((r3 &amp; </span><span style="color:#f5ab35">0xffffffff</span><span>) &gt;= </span><span style="color:#f5ab35">0x800100</span><span>)
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">16</span>    {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">17</span><span>        </span><span style="color:#dcc6e0">break</span><span>;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">18</span>    }
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">19</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">20</span><span>    r2 += </span><span style="color:#f5ab35">4</span><span>;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">21</span>}
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">22</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none">23</span><span>system_call(</span><span style="color:#f5ab35">-1</span><span>);</span></code></pre><div fs-copyclip-message="Copied!" fs-copyclip-element="click" data-w-id="1d7775dd-f930-2742-04d7-cc0544d317f4" class="copy-trigger"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f324f331149314c0ea5d36_copy.svg" loading="lazy" alt="" class="copy-icon"/><div data-w-id="1d7775dd-f930-2742-04d7-cc0544d317f6" class="copy-hint"><div class="paragraph small">Copy</div></div></div><div fs-copyclip-element="copy-this" class="hidden-code">r2 = 0x800000;<br/><br/>while (true)<br/>{<br/>Â Â Â Â if ((uint32_t)*(uint32_t*)(r2) == 0x400000) // cp_status.us<br/>Â Â Â Â {<br/>Â Â Â Â Â Â Â Â if ((uint32_t)*(uint32_t*)(r2 + 4) == 0x600000) // cp_status.ds<br/>Â Â Â Â Â Â Â Â {<br/>Â Â Â Â Â Â Â Â Â Â Â Â r2 += 0x18; // cp_status.fstat<br/>Â Â Â Â Â Â Â Â Â Â Â Â *(uint32_t*)(r2) = (uint32_t)value;<br/>Â Â Â Â Â Â Â Â Â Â Â Â break;<br/>Â Â Â Â Â Â Â Â }<br/>Â Â Â Â }<br/><br/>Â Â Â Â if ((r3 &amp; 0xffffffff) &gt;= 0x800100)<br/>Â Â Â Â {<br/>Â Â Â Â Â Â Â Â break;<br/>Â Â Â Â }<br/><br/>Â Â Â Â r2 += 4;<br/>}<br/><br/>system_call(-1);</div></div></div><div data-w-id="1d7775dd-f930-2742-04d7-cc0544d317fb" style="-webkit-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);opacity:0" class="paragraph dark mbot-0 w-richtext"><p>This shellcode writes the attacker-supplied value into the &#x27;<em>fstat</em>&#x27; field of the <em>Control Program (CP) Status</em> structure. This is followed by a TriStation request for the CP status and a check to see whether the returned value equals the supplied value. The value in question (0x00008001) is used as an argument by the second-stage inject.bin shellcode.</p><h2>Stage 2: Implant Installer (inject.bin)</h2><p>Since inject.bin has not been publicly released, we will limit our discussion here to what has been published by other parties and can be inferred from the publicly available materials. Based on these resources it is our conjecture that inject.bin is an implant installer which relocates the imain.bin implant backdoor to part of the <em>Enhanced Triconex System Executive (ETSX)</em> in order to allow for attacker read/write/execute access to safety controller memory regardless of the Tricon key switch position.</p><p>After the argument-setting shellcode has been injected, inject.bin and imain.bin are injected using <em>SafeAppendProgramMod</em>. It is interesting to note here that imain.bin is sandwiched between two markers (0x1234 and 0x56789A) and length fields. The ICS-CERT report mentions inject.bin assumes the argument written by the first stage payload resides at a static address and uses it as 1) a countdown for the number of cycles to idle 2) a step counter to track and control execution progress and 3) a field for writing debug information upon failure. In this way the attacker can monitor inject.bin for problems. If no problems are detected &#x27;<em>Script SUCCESS</em>&#x27; is output and a dummy program containing nothing but a <em>system_call(-1);</em> is forcefully appended.</p><figure class="w-richtext-align-center w-richtext-figure-type-image"><div><img alt="inject.bin control-flow (source)" src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65fb10ccbd5de18be9f79a2c_inject_bin.png"/></div><figcaption> Â  Â  Â  Â  Â  Â inject.bin control-flow (<a href="https://ics-cert.us-cert.gov/sites/default/files/documents/MAR-17-352-01%20HatMan%E2%80%94Safety%20System%20Targeted%20Malware_S508C.pdf">source</a>)</figcaption></figure><p>The inject.bin shellcode has the above flowchart (courtsey of the ICS-CERT report) and seems to be a finite state machine which starts by waiting for a number of cycles before issuing a number of system calls and checking their results. If these checks are passed, the imain.bin shellcode is relocated and the function pointer of the &#x27;<em>get main processor diagnostic data</em>&#x27; TriStation command is changed to the address of the relocated imain.bin so that it is executed prior to the normal handler.</p><p>As <a href="https://vimeo.com/248057640">Reid Wightman</a> noted, inject.bin seems to contain <a href="http://www.hick.org/code/skape/papers/egghunt-shellcode.pdf">egg-hunter</a> functionality hunting for the 0x1234 and 0x56789A &#x27;eggs&#x27; surrounding imain.bin. This is probably due to a lack of control by the TriStation functionality underlying SafeAppendProgramMod in determining where the injected code ends up which would require a piece of <a href="https://nets.ec/Shellcode/Environment#GetPc">GetPC code</a> to determine where inject.bin currently lives and a subsequent egghunt to determine where any other injected code or data lives if one cannot be sure offsets remain static upon injection. After this information is known to inject.bin it can safely relocate imain.bin.</p><h3>Stage 3: Backdoor Implant (imain.bin)</h3><p>The third stage shellcode, imain.bin, is a backdoor implant which allows an attacker to have read/write/execute access to safety controller memory regardless of the Tricon key switch position or any reset of control programs by the engineering workstation. This would allow an attacker to inject and execute a disruptive &#x27;OT payload&#x27; at a later moment. It is currently unclear whether the backdoor would persist across a safety controller reboot as it seems to modify the in-memory copies of the control program and firmware rather than their on-flash copies. The FireEye report mentions that they patched the attacker script to allow for in-memory persistence of the payload but this seems unrelated to cross-reboot persistence.</p><p>It is executed before the actual handler for the TriStation &#x27;<em>get main processor diagnostic data</em>&#x27; command and looks for a specifically crafted packet body from which it extracts a command value and its arguments. It supports three commands: reading and writing from and to memory as well as executing code at an arbitrary address. It is capable of making non-persistent changes to the running firmware by disabling address translation, writing to it and then flushing the instruction cache and re-enabling address translation.</p><p>The TRITON framework can communicate with the implant over the aforementioned channel by using the <a href="https://github.com/ICSrepo/TRISIS-TRITON-HATMAN/blob/c27fcae3dcb0d0ce36ddeef081851039c4a0658d/decompiled_code/library/TsHi.py"><em>TsHi.ExplReadRam(Ex), TsHi.ExplWriteRam(Ex) and TsHi.ExplExec</em></a> functions which utilize the <em>TsBase.ExecuteExploit</em> function. The latter function send a TriStation &#x27;<em>get main processor diagnostic data</em>&#x27; command with a crafted packet body of the form:</p><p>[command (1 byte)] [MP (1 byte)] [field_0 (4 bytes)] [field_1 (4 bytes)] [field_2 (N bytes)]</p><p>We reverse-engineered the imain.bin implant and manually reconstructed the following approximation in pseudo-C:</p></div><div class="code-block-element"><div class="code-block-script w-embed w-script"><!-- [Attributes by Finsweet] Copy to clipboard -->
<script defer src="https://cdn.jsdelivr.net/npm/@finsweet/attributes-copyclip@1/copyclip.js"></script></div><div class="code-block-css w-embed"><style>
.code-block {
	background-color:#0D1123!important;
  padding:.75vw !important;
}

.linenumber {
	opacity:.3 !important;
  padding-right: 2vw !important;
}

@media only screen and (max-width: 991px) {
  .code-block {
    padding:5px !important;
    padding-top:15px !important;
    padding-bottom:15px !important;
  }
  .linenumber {
    padding-right: 10px !important;
  }
}
</style></div><div class="code-wrapper"><pre contenteditable="false" class="code-block w-code-block" style="display:block;overflow-x:auto;background:#2b2b2b;color:#f8f8f2;padding:0.5em"><code class="language-c" style="white-space:pre"><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">1</span><span style="color:#f5ab35">#</span><span class="hljs-meta-keyword" style="color:#f5ab35">define</span><span style="color:#f5ab35"> M_READ_RAM  0x17</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">2</span><span></span><span style="color:#f5ab35">#</span><span class="hljs-meta-keyword" style="color:#f5ab35">define</span><span style="color:#f5ab35"> M_WRITE_RAM 0x41</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">3</span><span></span><span style="color:#f5ab35">#</span><span class="hljs-meta-keyword" style="color:#f5ab35">define</span><span style="color:#f5ab35"> M_EXECUTE   0xF9</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">4</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">5</span><span></span><span class="hljs-class" style="color:#dcc6e0">struct</span><span class="hljs-class"> </span><span class="hljs-class" style="color:#00e0e0">argument_struct</span><span class="hljs-class">
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">6</span><span class="hljs-class">{</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">7</span><span>    </span><span style="color:#dcc6e0">uint16_t</span><span> unknown_ui16_00;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">8</span><span>    </span><span style="color:#dcc6e0">uint8_t</span><span> unknown_ui8_02;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">9</span><span>    </span><span style="color:#dcc6e0">uint16_t</span><span> return_value;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">10</span><span>    </span><span style="color:#dcc6e0">uint8_t</span><span> cmd;                </span><span style="color:#d4d0ab">// cmd field</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">11</span><span>    </span><span style="color:#dcc6e0">uint8_t</span><span> mp;                    </span><span style="color:#d4d0ab">// mp field</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">12</span><span>    </span><span style="color:#dcc6e0">uint32_t</span><span> field_0;            </span><span style="color:#d4d0ab">// argument field 0 (eg. size)</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">13</span><span>    </span><span style="color:#dcc6e0">uint32_t</span><span> field_1;            </span><span style="color:#d4d0ab">// argument field 1 (eg. address)</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">14</span><span>    </span><span style="color:#dcc6e0">uint8_t</span><span>  field_3[...];      </span><span style="color:#d4d0ab">// argument field 3 (eg. data)</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">15</span>};
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">16</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">17</span><span></span><span class="hljs-function" style="color:#dcc6e0">void</span><span class="hljs-function"> </span><span class="hljs-function" style="color:#00e0e0">imain</span><span class="hljs-function" style="color:#f5ab35">(</span><span class="hljs-function" style="color:#dcc6e0">void</span><span class="hljs-function" style="color:#f5ab35">)</span><span class="hljs-function">
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">18</span><span class="hljs-function"></span><span>{
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">19</span>    arg = (struct argument_struct*)get_argument();
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">20</span><span>    </span><span style="color:#d4d0ab">// Retrieve implant command and MP value</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">21</span>    cmd = arg-&gt;cmd;
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">22</span>    mp = arg-&gt;mp;
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">23</span><span>    compare_mp = *(</span><span style="color:#dcc6e0">uint8_t</span><span>*)(</span><span style="color:#f5ab35">0x199400</span><span>);
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">24</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">25</span><span>    </span><span style="color:#dcc6e0">if</span><span> ((mp == compare_mp) || (mp == </span><span style="color:#f5ab35">0xFF</span><span>))
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">26</span>    {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">27</span>        mp = arg-&gt;return_value;
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">28</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">29</span><span>        </span><span style="color:#d4d0ab">// Check implant command</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">30</span><span>        </span><span style="color:#dcc6e0">switch</span><span> (cmd)
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">31</span>        {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">32</span><span>            </span><span style="color:#d4d0ab">// Read N bytes from RAM at address X</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">33</span><span>            </span><span style="color:#dcc6e0">case</span><span> M_READ_RAM:
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">34</span>            {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">35</span><span>                </span><span style="color:#dcc6e0">if</span><span> (mp &gt;= </span><span style="color:#f5ab35">0x14</span><span>)
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">36</span>                {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">37</span>                    size = arg-&gt;field_0;
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">38</span>                    address = arg-&gt;field_1;
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">39</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">40</span><span>                    </span><span style="color:#dcc6e0">if</span><span> ((size &gt; </span><span style="color:#f5ab35">0</span><span>) &amp;&amp; (size &lt;= </span><span style="color:#f5ab35">0x400</span><span>))
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">41</span>                    {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">42</span><span>                        </span><span style="color:#f5ab35">memcpy</span><span>(&amp;arg-&gt;cmd, address, size);
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">43</span><span>                        return_value = (size + </span><span style="color:#f5ab35">0xA</span><span>);
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">44</span>                    }
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">45</span><span>                    </span><span style="color:#dcc6e0">else</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">46</span>                    {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">47</span><span>                        </span><span style="color:#dcc6e0">goto</span><span> main_end;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">48</span>                    }
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">49</span>                }
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">50</span><span>                </span><span style="color:#dcc6e0">else</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">51</span>                {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">52</span><span>                    </span><span style="color:#dcc6e0">goto</span><span> main_end;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">53</span>                }
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">54</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">55</span><span>            }</span><span style="color:#dcc6e0">break</span><span>;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">56</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">57</span><span>            </span><span style="color:#d4d0ab">// Write N bytes to RAM at address X</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">58</span><span>            </span><span style="color:#dcc6e0">case</span><span> M_WRITE_RAM:
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">59</span>            {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">60</span>                size = arg-&gt;field_0;
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">61</span>                address = arg-&gt;field_1;
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">62</span>                data = arg-&gt;field_3;
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">63</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">64</span><span>                </span><span style="color:#dcc6e0">if</span><span> ((size &gt; </span><span style="color:#f5ab35">0</span><span>) &amp;&amp; (size == (mp - </span><span style="color:#f5ab35">0x14</span><span>)))
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">65</span>                {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">66</span><span>                    reenable_address_translation = </span><span style="color:#f5ab35">0</span><span>;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">67</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">68</span><span>                    </span><span style="color:#dcc6e0">if</span><span> (address &lt; </span><span style="color:#f5ab35">0x100000</span><span>)
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">69</span>                    {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">70</span><span>                        reenable_address_translation = </span><span style="color:#f5ab35">1</span><span>;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">71</span>                        disable_address_translation();
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">72</span>                    }
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">73</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">74</span><span>                    </span><span style="color:#f5ab35">memcpy</span><span>(address, &amp;data, size);
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">75</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">76</span><span>                    </span><span style="color:#dcc6e0">if</span><span> (reenable_address_translation == </span><span style="color:#f5ab35">1</span><span>)
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">77</span>                    {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">78</span>                        enable_address_translation();
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">79</span>                    }
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">80</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">81</span><span>                    return_value = </span><span style="color:#f5ab35">0xA</span><span>;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">82</span>                }
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">83</span><span>                </span><span style="color:#dcc6e0">else</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">84</span>                {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">85</span><span>                    </span><span style="color:#dcc6e0">goto</span><span> main_end;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">86</span>                }
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">87</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">88</span><span>            }</span><span style="color:#dcc6e0">break</span><span>;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">89</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">90</span><span>            </span><span style="color:#d4d0ab">// Execute function at address X</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">91</span><span>            </span><span style="color:#dcc6e0">case</span><span> M_EXECUTE:
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">92</span>            {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">93</span><span>                </span><span style="color:#dcc6e0">if</span><span> (mp &gt;= </span><span style="color:#f5ab35">0x10</span><span>)
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">94</span>                {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">95</span>                    function_ptr = arg-&gt;field_0;
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">96</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">97</span><span>                    </span><span style="color:#dcc6e0">if</span><span> (function_ptr &lt; </span><span style="color:#f5ab35">0x100000</span><span>)
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">98</span>                    {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">99</span>                        call(function_ptr);
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">100</span><span>                        return_value = </span><span style="color:#f5ab35">0xA</span><span>;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">101</span>                    }
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">102</span><span>                    </span><span style="color:#dcc6e0">else</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">103</span>                    {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">104</span><span>                        </span><span style="color:#dcc6e0">goto</span><span> main_end;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">105</span>                    }
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">106</span>                }
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">107</span><span>                </span><span style="color:#dcc6e0">else</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">108</span>                {
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">109</span><span>                    </span><span style="color:#dcc6e0">goto</span><span> main_end;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">110</span>                }
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">111</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">112</span><span>            }</span><span style="color:#dcc6e0">break</span><span>;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">113</span>        }
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">114</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">115</span>        switch_end:
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">116</span><span>            arg-&gt;unknown_ui8_02 = </span><span style="color:#f5ab35">0x96</span><span>;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">117</span>            arg-&gt;return_value = return_value;
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">118</span>            tristation_mp_diagnostic_data_response();
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">119</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">120</span>    }
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">121</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">122</span><span>    </span><span style="color:#d4d0ab">// This most likely continues with the actual TriStation &#x27;get main processor diagnostic data&#x27; handler</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">123</span>    main_end:
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">124</span><span>        jump(</span><span style="color:#f5ab35">0x3A0B0</span><span>);
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">125</span>}
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">126</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">127</span><span></span><span class="hljs-function" style="color:#dcc6e0">void</span><span class="hljs-function"> </span><span class="hljs-function" style="color:#00e0e0">disable_address_translation</span><span class="hljs-function" style="color:#f5ab35">(</span><span class="hljs-function" style="color:#dcc6e0">void</span><span class="hljs-function" style="color:#f5ab35">)</span><span class="hljs-function">
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">128</span><span class="hljs-function"></span><span>{
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">129</span><span>    mtpsr eid, r3;    </span><span style="color:#d4d0ab">// External Interrupt Disable (EID) = r3</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">130</span><span>    r4 = </span><span style="color:#f5ab35">-0x40</span><span>;        </span><span style="color:#d4d0ab">// 11111111111111111111111111011000; Sets IR=0 (Instruction address translation is disabled), DR=1 (Data address translation is enabled)</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">131</span><span>    mfmsr r3;        </span><span style="color:#d4d0ab">// r3 = Machine State Register</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">132</span><span>    r3 = r4 &amp; r3;    </span><span style="color:#d4d0ab">// Disable instruction address translation</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">133</span><span>    mtmsr r3;        </span><span style="color:#d4d0ab">// Machine State Register = r3</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">134</span><span>    </span><span style="color:#dcc6e0">return</span><span>;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">135</span>}
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">136</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">137</span><span></span><span class="hljs-function" style="color:#dcc6e0">void</span><span class="hljs-function"> </span><span class="hljs-function" style="color:#00e0e0">enable_address_translation</span><span class="hljs-function" style="color:#f5ab35">(</span><span class="hljs-function" style="color:#dcc6e0">void</span><span class="hljs-function" style="color:#f5ab35">)</span><span class="hljs-function">
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">138</span><span class="hljs-function"></span><span>{
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">139</span><span>    r3 = </span><span style="color:#f5ab35">0xC000000</span><span>;        </span><span style="color:#d4d0ab">// 00001100000000000000000000000000; IC_CST CMD = 110 (Instruction cache invalidate all command)</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">140</span><span>    mtspr ic_csr, r3;    </span><span style="color:#d4d0ab">// Instruction Cache Control and Status Register = r3.</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">141</span><span>    isync;                </span><span style="color:#d4d0ab">// Synchronize context, flush instruction queue</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">142</span><span>    mfmsr r3;             </span><span style="color:#d4d0ab">// r3 = Machine State Register</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">143</span><span>    r3 |= </span><span style="color:#f5ab35">0x30</span><span>;         </span><span style="color:#d4d0ab">// 110000; Sets IR=1 (Instruction address translation is enabled), DR=1 (Data address translation is enabled)</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">144</span><span>    mtmsr r3;             </span><span style="color:#d4d0ab">// Machine State Register = r3</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">145</span><span>    sync;                 </span><span style="color:#d4d0ab">// Ordering to ensure all instructions initiated prior to the sync instruction complete and no subsequent ones initiate until synced</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">146</span><span>    mtspr eie, r3;         </span><span style="color:#d4d0ab">// External Interrupt Enable (EIE) = r3</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">147</span><span>    </span><span style="color:#dcc6e0">return</span><span>;
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">148</span>}
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">149</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">150</span><span></span><span style="color:#d4d0ab">// This most likely retrieves the argument to the TriStation &#x27;get main processor diagnostic data&#x27; command</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">151</span><span></span><span class="hljs-function" style="color:#dcc6e0">void</span><span class="hljs-function"> </span><span class="hljs-function" style="color:#00e0e0">get_argument</span><span class="hljs-function" style="color:#f5ab35">(</span><span class="hljs-function" style="color:#dcc6e0">void</span><span class="hljs-function" style="color:#f5ab35">)</span><span class="hljs-function">
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">152</span><span class="hljs-function"></span><span>{
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">153</span>    r3 = r31;
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">154</span><span>    jump(</span><span style="color:#f5ab35">0x6B9CC</span><span>);
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">155</span>}
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">156</span>
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">157</span><span></span><span style="color:#d4d0ab">// This most likely sends a response to the TriStation &#x27;get main processor diagnostic data&#x27; command</span><span>
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">158</span><span></span><span class="hljs-function" style="color:#dcc6e0">void</span><span class="hljs-function"> </span><span class="hljs-function" style="color:#00e0e0">tristation_mp_diagnostic_data_response</span><span class="hljs-function" style="color:#f5ab35">(</span><span class="hljs-function" style="color:#dcc6e0">void</span><span class="hljs-function" style="color:#f5ab35">)</span><span class="hljs-function">
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">159</span><span class="hljs-function"></span><span>{
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">160</span>    r3 = r31;
<span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">161</span><span>    jump(</span><span style="color:#f5ab35">0x68F0C</span><span>);
</span><span class="comment linenumber react-syntax-highlighter-line-number" style="display:inline-block;min-width:3.25em;padding-right:1em;text-align:right;user-select:none">162</span>}</code></pre><div fs-copyclip-message="Copied!" fs-copyclip-element="click" data-w-id="1d7775dd-f930-2742-04d7-cc0544d31803" class="copy-trigger"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f324f331149314c0ea5d36_copy.svg" loading="lazy" alt="" class="copy-icon"/><div data-w-id="1d7775dd-f930-2742-04d7-cc0544d31805" class="copy-hint"><div class="paragraph small">Copy</div></div></div><div fs-copyclip-element="copy-this" class="hidden-code">#define M_READ_RAMÂ Â 0x17<br/>#define M_WRITE_RAM 0x41<br/>#define M_EXECUTEÂ Â Â 0xF9<br/><br/>struct argument_struct<br/>{<br/>Â Â Â Â uint16_t unknown_ui16_00;<br/>Â Â Â Â uint8_t unknown_ui8_02;<br/>Â Â Â Â uint16_t return_value;<br/>Â Â Â Â uint8_t cmd;Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â // cmd field<br/>Â Â Â Â uint8_t mp;Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â // mp field<br/>Â Â Â Â uint32_t field_0;Â Â Â Â Â Â Â Â Â Â Â Â // argument field 0 (eg. size)<br/>Â Â Â Â uint32_t field_1;Â Â Â Â Â Â Â Â Â Â Â Â // argument field 1 (eg. address)<br/>Â Â Â Â uint8_tÂ Â field_3[...];Â Â Â Â Â Â // argument field 3 (eg. data)<br/>};<br/><br/>void imain(void)<br/>{<br/>Â Â Â Â arg = (struct argument_struct*)get_argument();<br/>Â Â Â Â // Retrieve implant command and MP value<br/>Â Â Â Â cmd = arg-&gt;cmd;<br/>Â Â Â Â mp = arg-&gt;mp;<br/>Â Â Â Â compare_mp = *(uint8_t*)(0x199400);<br/><br/>Â Â Â Â if ((mp == compare_mp) || (mp == 0xFF))<br/>Â Â Â Â {<br/>Â Â Â Â Â Â Â Â mp = arg-&gt;return_value;<br/><br/>Â Â Â Â Â Â Â Â // Check implant command<br/>Â Â Â Â Â Â Â Â switch (cmd)<br/>Â Â Â Â Â Â Â Â {<br/>Â Â Â Â Â Â Â Â Â Â Â Â // Read N bytes from RAM at address X<br/>Â Â Â Â Â Â Â Â Â Â Â Â case M_READ_RAM:<br/>Â Â Â Â Â Â Â Â Â Â Â Â {<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â if (mp &gt;= 0x14)<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â size = arg-&gt;field_0;<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â address = arg-&gt;field_1;<br/><br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â if ((size &gt; 0) &amp;&amp; (size &lt;= 0x400))<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â memcpy(&amp;arg-&gt;cmd, address, size);<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â return_value = (size + 0xA);<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â else<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â goto main_end;<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â else<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â goto main_end;<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }<br/><br/>Â Â Â Â Â Â Â Â Â Â Â Â }break;<br/><br/>Â Â Â Â Â Â Â Â Â Â Â Â // Write N bytes to RAM at address X<br/>Â Â Â Â Â Â Â Â Â Â Â Â case M_WRITE_RAM:<br/>Â Â Â Â Â Â Â Â Â Â Â Â {<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â size = arg-&gt;field_0;<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â address = arg-&gt;field_1;<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â data = arg-&gt;field_3;<br/><br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â if ((size &gt; 0) &amp;&amp; (size == (mp - 0x14)))<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â reenable_address_translation = 0;<br/><br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â if (address &lt; 0x100000)<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â reenable_address_translation = 1;<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â disable_address_translation();<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }<br/><br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â memcpy(address, &amp;data, size);<br/><br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â if (reenable_address_translation == 1)<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â enable_address_translation();<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }<br/><br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â return_value = 0xA;<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â else<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â goto main_end;<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }<br/><br/>Â Â Â Â Â Â Â Â Â Â Â Â }break;<br/><br/>Â Â Â Â Â Â Â Â Â Â Â Â // Execute function at address X<br/>Â Â Â Â Â Â Â Â Â Â Â Â case M_EXECUTE:<br/>Â Â Â Â Â Â Â Â Â Â Â Â {<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â if (mp &gt;= 0x10)<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â function_ptr = arg-&gt;field_0;<br/><br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â if (function_ptr &lt; 0x100000)<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â call(function_ptr);<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â return_value = 0xA;<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â else<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â goto main_end;<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â else<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â goto main_end;<br/>Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }<br/><br/>Â Â Â Â Â Â Â Â Â Â Â Â }break;<br/>Â Â Â Â Â Â Â Â }<br/><br/>Â Â Â Â Â Â Â Â switch_end:<br/>Â Â Â Â Â Â Â Â Â Â Â Â arg-&gt;unknown_ui8_02 = 0x96;<br/>Â Â Â Â Â Â Â Â Â Â Â Â arg-&gt;return_value = return_value;<br/>Â Â Â Â Â Â Â Â Â Â Â Â tristation_mp_diagnostic_data_response();<br/><br/>Â Â Â Â }<br/><br/>Â Â Â Â // This most likely continues with the actual TriStation &#x27;get main processor diagnostic data&#x27; handler<br/>Â Â Â Â main_end:<br/>Â Â Â Â Â Â Â Â jump(0x3A0B0);<br/>}<br/><br/>void disable_address_translation(void)<br/>{<br/>Â Â Â Â mtpsr eid, r3;Â Â Â Â // External Interrupt Disable (EID) = r3<br/>Â Â Â Â r4 = -0x40;Â Â Â Â Â Â Â Â // 11111111111111111111111111011000; Sets IR=0 (Instruction address translation is disabled), DR=1 (Data address translation is enabled)<br/>Â Â Â Â mfmsr r3;Â Â Â Â Â Â Â Â // r3 = Machine State Register<br/>Â Â Â Â r3 = r4 &amp; r3;Â Â Â Â // Disable instruction address translation<br/>Â Â Â Â mtmsr r3;Â Â Â Â Â Â Â Â // Machine State Register = r3<br/>Â Â Â Â return;<br/>}<br/><br/>void enable_address_translation(void)<br/>{<br/>Â Â Â Â r3 = 0xC000000;Â Â Â Â Â Â Â Â // 00001100000000000000000000000000; IC_CST CMD = 110 (Instruction cache invalidate all command)<br/>Â Â Â Â mtspr ic_csr, r3;Â Â Â Â // Instruction Cache Control and Status Register = r3.<br/>Â Â Â Â isync;Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â // Synchronize context, flush instruction queue<br/>Â Â Â Â mfmsr r3;Â Â Â Â Â Â Â Â Â Â Â Â Â // r3 = Machine State Register<br/>Â Â Â Â r3 |= 0x30;Â Â Â Â Â Â Â Â Â // 110000; Sets IR=1 (Instruction address translation is enabled), DR=1 (Data address translation is enabled)<br/>Â Â Â Â mtmsr r3;Â Â Â Â Â Â Â Â Â Â Â Â Â // Machine State Register = r3<br/>Â Â Â Â sync;Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â // Ordering to ensure all instructions initiated prior to the sync instruction complete and no subsequent ones initiate until synced<br/>Â Â Â Â mtspr eie, r3;Â Â Â Â Â Â Â Â Â // External Interrupt Enable (EIE) = r3<br/>Â Â Â Â return;<br/>}<br/><br/>// This most likely retrieves the argument to the TriStation &#x27;get main processor diagnostic data&#x27; command<br/>void get_argument(void)<br/>{<br/>Â Â Â Â r3 = r31;<br/>Â Â Â Â jump(0x6B9CC);<br/>}<br/><br/>// This most likely sends a response to the TriStation &#x27;get main processor diagnostic data&#x27; command<br/>void tristation_mp_diagnostic_data_response(void)<br/>{<br/>Â Â Â Â r3 = r31;<br/>Â Â Â Â jump(0x68F0C);<br/>}</div></div></div><div data-w-id="1d7775dd-f930-2742-04d7-cc0544d3180a" style="-webkit-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);opacity:0" class="paragraph dark mbot-0 w-richtext"><h3>Stage 4: Missing OT Payload</h3><p>In order to affect operations beyond a mere process shutdown (ie. the dreaded cyber-physical damage scenario), a fourth-stage &#x27;OT payload&#x27; causing or facilitating a safety failure would be required. As mentioned before, however, it was claimed no OT payload was recovered during the incident. The absence of an OT payload on the compromised engineering workstation could imply it would have been dropped later after initial safety controller implantation tests had passed. It is conceivable an attacker would want to make sure multiple safety controllers were properly implanted and working before activating a possibly complicated (collection of) OT payload(s). But it&#x27;s also possible the attacker hadn&#x27;t started to develop a proper OT payload yet while they were already implanting the controllers. Regardless, any assessment of the attacker&#x27;s end game under these conditions remains speculative.</p></div></div></div></div></section><section class="smoke-section"><div class="container"><div class="padded-content"><div class="spread"><h2 data-w-id="1d7775dd-f930-2742-04d7-cc0544d31895" style="-webkit-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);opacity:0" class="paragraph dark poppins medium gray">Related knowledge items</h2><a data-w-id="1d7775dd-f930-2742-04d7-cc0544d31897" style="-webkit-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);opacity:0" href="/knowledge" class="contact-method w-inline-block"><div class="arrow-container"><div data-w-id="1d7775dd-f930-2742-04d7-cc0544d31899" class="arrow-wrapper to-left"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f1cac87c9617936cf65738_arrow.svg" loading="lazy" alt="" class="arrow-inner"/></div><div data-w-id="1d7775dd-f930-2742-04d7-cc0544d3189b" class="arrow-wrapper"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f1cac87c9617936cf65738_arrow.svg" loading="lazy" alt="" class="arrow-inner"/></div></div><p class="paragraph orange poppins medium">All items</p></a></div><div class="knowledge-container w-dyn-list"><div fs-cmsload-mode="pagination" fs-cmsfilter-element="list" fs-cmsload-element="list" role="list" class="knowledge-list w-dyn-items"><div id="w-node-_1d7775dd-f930-2742-04d7-cc0544d318a1-fbf44b49" data-w-id="1d7775dd-f930-2742-04d7-cc0544d318a1" style="-webkit-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);opacity:0" role="listitem" class="knowledge-item w-dyn-item"><a href="/blog/reverse-engineering-and-fuzzing-the-lorex-2k-indoor-wi-fi-security-camera" class="knowledge-link w-inline-block"><div class="knowledge-image"><img src="https://cdn.prod.website-files.com/64b4f6a11f3e7b73f26b76eb/67446c2d2b156a4944d53687_37.jpg" loading="lazy" alt="" sizes="(max-width: 479px) 81vw, (max-width: 767px) 80vw, (max-width: 991px) 37vw, 28vw" srcset="https://cdn.prod.website-files.com/64b4f6a11f3e7b73f26b76eb/67446c2d2b156a4944d53687_37-p-500.jpg 500w, https://cdn.prod.website-files.com/64b4f6a11f3e7b73f26b76eb/67446c2d2b156a4944d53687_37-p-800.jpg 800w, https://cdn.prod.website-files.com/64b4f6a11f3e7b73f26b76eb/67446c2d2b156a4944d53687_37.jpg 1000w" class="image-inner"/></div><div class="knowledge-meta"><div class="paragraph poppins dark-gray">Nov 2024</div><div fs-cmsfilter-field="type" class="paragraph blue semibold as-label">Blog</div></div><h2 class="h3 mbot-0">Reverse engineering and fuzzing the Lorex 2K Indoor Wi-Fi Security Camera</h2><p class="paragraph dark mbot-0">This blog post highlights the failed and successful attempts on attacking the Lorex camer. A follow-up blog post will go in-depth on the vulnerability found and ultimately used at Pwn2Own Ireland.</p><div class="knowledge-cta"><div data-w-id="1d7775dd-f930-2742-04d7-cc0544d318ab" class="contact-method"><p class="paragraph orange poppins medium">Read more</p><div class="arrow-container"><div data-w-id="1d7775dd-f930-2742-04d7-cc0544d318af" class="arrow-wrapper to-left"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f1cac87c9617936cf65738_arrow.svg" loading="lazy" alt="" class="arrow-inner"/></div><div data-w-id="1d7775dd-f930-2742-04d7-cc0544d318b1" class="arrow-wrapper"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f1cac87c9617936cf65738_arrow.svg" loading="lazy" alt="" class="arrow-inner"/></div></div></div><div class="timing"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f1df6957b25ac0aac2036f_clock.svg" loading="lazy" alt="" class="timing-icon"/><div class="paragraph dark poppins mbot-0">40 minutes</div></div></div></a></div><div id="w-node-_1d7775dd-f930-2742-04d7-cc0544d318a1-fbf44b49" data-w-id="1d7775dd-f930-2742-04d7-cc0544d318a1" style="-webkit-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 10px, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);opacity:0" role="listitem" class="knowledge-item w-dyn-item"><a href="/blog/cve-2024-8036-abb-insecure-updates" class="knowledge-link w-inline-block"><div class="knowledge-image"><img src="https://cdn.prod.website-files.com/64b4f6a11f3e7b73f26b76eb/67211a3db3dd7f6cb43b4ad2_35.jpg" loading="lazy" alt="" sizes="(max-width: 479px) 81vw, (max-width: 767px) 80vw, (max-width: 991px) 37vw, 28vw" srcset="https://cdn.prod.website-files.com/64b4f6a11f3e7b73f26b76eb/67211a3db3dd7f6cb43b4ad2_35-p-500.jpg 500w, https://cdn.prod.website-files.com/64b4f6a11f3e7b73f26b76eb/67211a3db3dd7f6cb43b4ad2_35-p-800.jpg 800w, https://cdn.prod.website-files.com/64b4f6a11f3e7b73f26b76eb/67211a3db3dd7f6cb43b4ad2_35.jpg 1000w" class="image-inner"/></div><div class="knowledge-meta"><div class="paragraph poppins dark-gray">Oct 2024</div><div fs-cmsfilter-field="type" class="paragraph blue semibold as-label">Blog</div></div><h2 class="h3 mbot-0">CVE-2024-8036: Multiple ABB products affected by insecure updates</h2><p class="paragraph dark mbot-0">Midnight Blue and Secura found two security vulnerabilities in multiple ABB products used in critical OT environments, allowing for remote code execution</p><div class="knowledge-cta"><div data-w-id="1d7775dd-f930-2742-04d7-cc0544d318ab" class="contact-method"><p class="paragraph orange poppins medium">Read more</p><div class="arrow-container"><div data-w-id="1d7775dd-f930-2742-04d7-cc0544d318af" class="arrow-wrapper to-left"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f1cac87c9617936cf65738_arrow.svg" loading="lazy" alt="" class="arrow-inner"/></div><div data-w-id="1d7775dd-f930-2742-04d7-cc0544d318b1" class="arrow-wrapper"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f1cac87c9617936cf65738_arrow.svg" loading="lazy" alt="" class="arrow-inner"/></div></div></div><div class="timing"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f1df6957b25ac0aac2036f_clock.svg" loading="lazy" alt="" class="timing-icon"/><div class="paragraph dark poppins mbot-0">30 minutes</div></div></div></a></div></div></div></div></div></section></div><div data-w-id="dda78c49-0681-ce9c-3595-81a854e2c851" class="footer-cover"></div><section id="work-with-us" class="footer"><div class="footer-contain"><div class="container vcenter"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64a2a6f5623f82375edc5ef0_arrow%20down.svg" loading="lazy" data-w-id="0731d965-42ad-bc0b-556f-6fc76b4ca3b9" alt="" class="arrow-down mtop-0 mbot-2"/><div class="footer-cta-wrap"><h2 data-w-id="0731d965-42ad-bc0b-556f-6fc76b4ca3bb" class="h1 smaller center">Interested in working together?</h2><a href="#" class="button outline absolute w-button">Go to top</a></div><div data-w-id="0731d965-42ad-bc0b-556f-6fc76b4ca3bf" class="methods"><a href="mailto:sales[at]midnightblue[dot]nl" class="method w-inline-block"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64a43a862c51f907b3cf929f_mail%20icon.svg" loading="lazy" alt="" class="contact-icon"/><div class="paragraph">sales[ ]midnightblue[ ]nl</div></a><a href="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64b8288f60eb4ca6ae6cd45f_sales%40midnightblue.nl-(0x9035856DF1D41F73)-public.asc.txt" class="method w-inline-block"><img src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/64a43b00d1825b3fa635cf18_key%20icon.svg" loading="lazy" alt="" class="contact-icon"/><div class="paragraph">PGP (0x9035856DF1D41F73)</div></a></div></div><div class="container"><div class="footer-meta"><div class="_25 automobile"><div class="paragraph gray">Â© 2024 Midnight Blue</div></div><div class="_25 automobile"><div class="paragraph gray">All Rights Reserved</div></div><div class="half right automobile"><a href="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/65f7fadfade737a64b2507b4_privacy_policy.pdf" target="_blank" class="paragraph gray">We Respect Your Privacy</a></div></div></div></div></section><script src="https://d3e54v103j8qbb.cloudfront.net/js/jquery-3.5.1.min.dc5e7f18c8.js?site=64a2900ed5e9bb672af9b2ed" type="text/javascript" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script><script src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/js/webflow.schunk.b7cad701f94860c2.js" type="text/javascript"></script><script src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/js/webflow.schunk.75ccb24fa46f0543.js" type="text/javascript"></script><script src="https://cdn.prod.website-files.com/64a2900ed5e9bb672af9b2ed/js/webflow.45c3ae85.02448ac06e2b1eab.js" type="text/javascript"></script><div class="cursor-wrap js-cursor-wrap">
  <div class="cursor js-cursor">
    <svg height="60" width="60" class="circle" fill="#EC9D30">
      <circle cx="30" cy="30" r="7"  />
    </svg>
  </div>
</div>

<script>
function addHoverEffect(classNames, group) {
  const elements = document.querySelectorAll(classNames.join(', '));

  elements.forEach(element => {
    element.addEventListener('mouseover', () => {
      elements.forEach(sibling => {
        if (sibling !== element) {
          sibling.style.opacity = '0.3';
          sibling.style.transition = 'opacity 0.3s ease';
        }
      });
      element.style.opacity = '1';
    });

    element.addEventListener('mouseout', () => {
      elements.forEach(sibling => {
        sibling.style.opacity = '1';
      });
    });
  });
}

// Separate groups
addHoverEffect(['.nav-link'], 'nav-link');
</script>

<!-- Text Animation -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js" integrity="sha512-16esztaSRplJROstbIIdwX3N97V1+pZvV33ABoG1H2OyTttBxEGkTsoIVsiP1iaTtM8b3+hu2kB6pQ4Clr5yug==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js" integrity="sha512-Ic9xkERjyZ1xgJ5svx3y0u3xrvfT/uPkV99LBwe68xjy/mGtO+4eURHZBW2xW4SZbFrF1Tf090XqB+EVgXnVjw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://unpkg.com/split-type"></script>
<script>
gsap.registerPlugin(ScrollTrigger);

const splitTypes = document.querySelectorAll('.reveal-type');
splitTypes.forEach((char,i) => {
  const text = new SplitType(char, {types: ['chars','words']});
  gsap.from(text.chars, {
    scrollTrigger: {
      trigger: char,
      start: 'top 80%',
      end: 'top 20%',
      scrub: true,
      markers: false
    },
    opacity: 0.1,
    stagger: 0.1,
  })
});
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

<script>
/*- MOUSE STICKY -*/
function lerp(a, b, n) {
    return (1 - n) * a + n * b
}

// Initialize Cursor
class Cursor {
  constructor() {
    this.bind()
    this.cursor = document.querySelector('.js-cursor')
    
    this.mouseCurrent = {
      x: 0,
      y: 0
    }
    
    this.mouseLast = {
      x: this.mouseCurrent.x,
      y: this.mouseCurrent.y
    }
    
    this.rAF = undefined
  }
  
  bind() {
    ['getMousePosition', 'run'].forEach((fn) => this[fn] = this[fn].bind(this))
  }
  
  getMousePosition(e) {
    this.mouseCurrent = {
      x: e.clientX,
      y: e.clientY
    }
  }
  
  run() {
    this.mouseLast.x = lerp(this.mouseLast.x, this.mouseCurrent.x, 0.2)
    this.mouseLast.y = lerp(this.mouseLast.y, this.mouseCurrent.y, 0.2)
    
    this.mouseLast.x = Math.floor(this.mouseLast.x * 100) / 100
    this.mouseLast.y = Math.floor(this.mouseLast.y * 100) / 100
    
    this.cursor.style.transform = `translate3d(${this.mouseLast.x}px, ${this.mouseLast.y}px, 0)`
    
    this.rAF = requestAnimationFrame(this.run)
  }
  
  requestAnimationFrame() {
    this.rAF = requestAnimationFrame(this.run)
  }
  
  addEvents() {
    window.addEventListener('mousemove', this.getMousePosition, false)
  }
  
  on() {
    this.addEvents()
    
    this.requestAnimationFrame()
  }
  
  init() {
    this.on()
  }
}

const cursor = new Cursor()

cursor.init();
  
//increase cursor scale when hovering buttons
$(".button, .menu-link, .logo-link, .card-wrap, .method, .text-link, .input-field, .checkbox-field, .contact-method, .type, .filter_select, .knowledge-item, .pagination_page-button, .pagination-button, .hamburger, .anchor, .category-link").mouseenter(function(){
     $(".circle").addClass("grow");
});
$(".button, .menu-link, .logo-link, .card-wrap, .method, .text-link, .input-field, .checkbox-field, .contact-method, .type, .filter_select, .knowledge-item, .pagination_page-button, .pagination-button, .hamburger, .anchor, .category-link").mouseleave(function(){
     $(".circle").removeClass("grow");
});
</script>



<script>
// Get the cursor element
const cursorElement = document.querySelector('.cursor');

// Function to hide the cursor element
function hideCursor() {
  cursorElement.style.display = 'none';
}

// Event listener for cursor leaving the viewport
window.addEventListener('mouseleave', () => {
  hideCursor();
});

</script>

<script src="https://cdn.prod.website-files.com/6330c0ebacf06abbc83b6eb3/64103732523ba652052e0223_lenis-bundled.txt"></script>
<script>
class Scroll extends Lenis {
  constructor() {
    super({
      duration: .5,
      easing: (t) => (t === 1 ? 1 : 1 - Math.pow(2, -10 * t)), // https://easings.net
      direction: "vertical",
      smooth: true,
      smoothTouch: false,
      touchMultiplier: .5
    });
    this.time = 0;
    this.isActive = true;
    this.init();
  }
  init() {
    this.config();
    this.render();
    this.handleEditorView();
  }
  config() {
    // allow scrolling on overflow elements
    const overscroll = [
      ...document.querySelectorAll('[data-scroll="overscroll"]')
    ];
    if (overscroll.length > 0) {
      overscroll.forEach((item) =>
        item.setAttribute("onwheel", "event.stopPropagation()")
      );
    }
    // stop and start scroll btns
    const stop = [...document.querySelectorAll('[data-scroll="stop"]')];
    if (stop.length > 0) {
      stop.forEach((item) => {
        item.onclick = () => {
          this.stop();
          this.isActive = false;
        };
      });
    }
    const start = [...document.querySelectorAll('[data-scroll="start"]')];
    if (start.length > 0) {
      start.forEach((item) => {
        item.onclick = () => {
          this.start();
          this.isActive = true;
        };
      });
    }
    // toggle page scrolling
    const toggle = [...document.querySelectorAll('[data-scroll="toggle"]')];
    if (toggle.length > 0) {
      toggle.forEach((item) => {
        item.onclick = () => {
          if (this.isActive) {
            this.stop();
            this.isActive = false;
          } else {
            this.start();
            this.isActive = true;
          }
        };
      });
    }
    // anchor links
    const anchor = [...document.querySelectorAll("[data-scrolllink]")];
    if (anchor.length > 0) {
      anchor.forEach((item) => {
        const id = parseFloat(item.dataset.scrolllink);
        const target = document.querySelector(`[data-scrolltarget="${id}"]`);
        if (target) {
          //console.log(id, target);
          item.onclick = () => this.scrollTo(target);
        }
      });
    }
  }
  render() {
    this.raf((this.time += 10));
    window.requestAnimationFrame(this.render.bind(this));
  }
  /* ---- */
  handleEditorView() {
    const html = document.documentElement;
    const config = { attributes: true, childList: false, subtree: false };
    const callback = (mutationList, observer) => {
      for (const mutation of mutationList) {
        if (mutation.type === "attributes") {
          const btn = document.querySelector(".w-editor-bem-EditSiteButton");
          const bar = document.querySelector(".w-editor-bem-EditorMainMenu");
          const addTrig = (target) =>
            target.addEventListener("click", () => this.destroy());
          if (btn) addTrig(btn);
          if (bar) addTrig(bar);
        }
      }
    };
    const observer = new MutationObserver(callback);
    observer.observe(html, config);
  }
}
window.SmoothScroll = new Scroll();
</script></body></html>