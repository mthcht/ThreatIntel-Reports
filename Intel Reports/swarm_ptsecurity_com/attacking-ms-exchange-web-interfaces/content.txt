<!doctype html>
<html lang="en-US" class="h-100">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="format-detection" content="telephone=no">

	<title>Attacking MS Exchange Web Interfaces &#8211; PT SWARM</title>
<meta name='robots' content='max-image-preview:large' />
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	<link rel="alternate" type="application/rss+xml" title="PT SWARM &raquo; Feed" href="https://swarm.ptsecurity.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="PT SWARM &raquo; Comments Feed" href="https://swarm.ptsecurity.com/comments/feed/" />
<script>
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/16.0.1\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/16.0.1\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/swarm.ptsecurity.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.8.2"}};
/*! This file is auto-generated */
!function(s,n){var o,i,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),a=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===a[t]})}function u(e,t){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);for(var n=e.getImageData(16,16,1,1),a=0;a<n.data.length;a++)if(0!==n.data[a])return!1;return!0}function f(e,t,n,a){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\udde8\ud83c\uddf6","\ud83c\udde8\u200b\ud83c\uddf6")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!a(e,"\ud83e\udedf")}return!1}function g(e,t,n,a){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):s.createElement("canvas"),o=r.getContext("2d",{willReadFrequently:!0}),i=(o.textBaseline="top",o.font="600 32px Arial",{});return e.forEach(function(e){i[e]=t(o,e,n,a)}),i}function t(e){var t=s.createElement("script");t.src=e,t.defer=!0,s.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",i=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){s.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+g.toString()+"("+[JSON.stringify(i),f.toString(),p.toString(),u.toString()].join(",")+"));",a=new Blob([e],{type:"text/javascript"}),r=new Worker(URL.createObjectURL(a),{name:"wpTestEmojiSupports"});return void(r.onmessage=function(e){c(n=e.data),r.terminate(),t(n)})}catch(e){}c(n=g(i,f,p,u))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
</script>
<style id='wp-emoji-styles-inline-css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://swarm.ptsecurity.com/wp-includes/css/dist/block-library/style.min.css?ver=6.8.2' media='all' />
<style id='classic-theme-styles-inline-css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='co-authors-plus-coauthors-style-inline-css'>
.wp-block-co-authors-plus-coauthors.is-layout-flow [class*=wp-block-co-authors-plus]{display:inline}

</style>
<style id='co-authors-plus-avatar-style-inline-css'>
.wp-block-co-authors-plus-avatar :where(img){height:auto;max-width:100%;vertical-align:bottom}.wp-block-co-authors-plus-coauthors.is-layout-flow .wp-block-co-authors-plus-avatar :where(img){vertical-align:middle}.wp-block-co-authors-plus-avatar:is(.alignleft,.alignright){display:table}.wp-block-co-authors-plus-avatar.aligncenter{display:table;margin-inline:auto}

</style>
<style id='co-authors-plus-image-style-inline-css'>
.wp-block-co-authors-plus-image{margin-bottom:0}.wp-block-co-authors-plus-image :where(img){height:auto;max-width:100%;vertical-align:bottom}.wp-block-co-authors-plus-coauthors.is-layout-flow .wp-block-co-authors-plus-image :where(img){vertical-align:middle}.wp-block-co-authors-plus-image:is(.alignfull,.alignwide) :where(img){width:100%}.wp-block-co-authors-plus-image:is(.alignleft,.alignright){display:table}.wp-block-co-authors-plus-image.aligncenter{display:table;margin-inline:auto}

</style>
<style id='global-styles-inline-css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='swarm-style-css' href='https://swarm.ptsecurity.com/wp-content/themes/swarm-2/style.css?ver=1.3.0' media='all' />
<script src="https://swarm.ptsecurity.com/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script src="https://swarm.ptsecurity.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<link rel="canonical" href="https://swarm.ptsecurity.com/attacking-ms-exchange-web-interfaces/" />
<link rel='shortlink' href='https://swarm.ptsecurity.com/?p=159' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://swarm.ptsecurity.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fswarm.ptsecurity.com%2Fattacking-ms-exchange-web-interfaces%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://swarm.ptsecurity.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fswarm.ptsecurity.com%2Fattacking-ms-exchange-web-interfaces%2F&#038;format=xml" />
<meta name="twitter:card" content="summary_large_image"/>
<meta property="og:title" content="Attacking MS Exchange Web Interfaces" />
<meta property="og:description" content="Describing all the techniques for attacking MS Exchange in Q2 2020 and introducing a new one: the LDAP via Exchange attack" />
<meta property="og:site_name" content="PT SWARM" />
<meta property="og:type" content="article" />
<meta property="og:url" content="https://swarm.ptsecurity.com/attacking-ms-exchange-web-interfaces/" />
<meta property="og:image" content="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-12-20-28.png" />
<meta property="article:author" content="Arseniy Sharoglazov" />
<meta name="twitter:creator" content="@_mohemiv"/>
<link rel="icon" href="https://swarm.ptsecurity.com/wp-content/uploads/2020/06/favicon-1.png" sizes="32x32" />
<link rel="icon" href="https://swarm.ptsecurity.com/wp-content/uploads/2020/06/favicon-1.png" sizes="192x192" />
<link rel="apple-touch-icon" href="https://swarm.ptsecurity.com/wp-content/uploads/2020/06/favicon-1.png" />
<meta name="msapplication-TileImage" content="https://swarm.ptsecurity.com/wp-content/uploads/2020/06/favicon-1.png" />
		<style id="wp-custom-css">
			img {
    image-rendering: -webkit-optimize-contrast;
}		</style>
		
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-171997764-1"></script>
    <script>
        window.dataLayer = window.dataLayer || [];

        function gtag() {
            dataLayer.push(arguments);
        }

        gtag('js', new Date());
        gtag('config', 'UA-171997764-1');
    </script>

    <script type="text/javascript">
        (function (m, e, t, r, i, k, a) {
            m[i] = m[i] || function () {
                (m[i].a = m[i].a || []).push(arguments)
            };
            m[i].l = 1 * new Date();
            k = e.createElement(t), a = e.getElementsByTagName(t)[0], k.async = 1, k.src = r, a.parentNode.insertBefore(k, a)
        })
        (window, document, "script", "https://cdn.jsdelivr.net/npm/yandex-metrica-watch/tag.js", "ym");
        ym(66262255, "init", {
            clickmap: true,
            trackLinks: true,
            accurateTrackBounce: true
        });
    </script>
</head>

<body class="wp-singular post-template-default single single-post postid-159 single-format-standard wp-theme-swarm-2 d-flex flex-column h-100">
<header>
    <div class="container px-0">

        <nav class="navbar navbar-expand navbar-light bg-white">
            <a class="navbar-brand my-md-0 font-weight-bold"
               href="https://swarm.ptsecurity.com/"
               rel="home">PT SWARM</a>
			<ul id="primary-menu" class="navbar-nav mr-auto"><li itemscope="itemscope" itemtype="https://www.schema.org/SiteNavigationElement" id="menu-item-56" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-56 nav-item"><a title="Home" href="/" class="nav-link">Home</a></li>
<li itemscope="itemscope" itemtype="https://www.schema.org/SiteNavigationElement" id="menu-item-57" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-57 nav-item"><a title="About" href="https://swarm.ptsecurity.com/about/" class="nav-link">About</a></li>
</ul>            <a href="https://twitter.com/ptswarm" class="btn-twitter"
               target="_blank" rel="noopener nofollow" title="Twitter"
               onclick="ym(66262255,'reachGoal','test'); return true;">
                <i></i><span class="label">Follow @ptswarm</span>
            </a>

            <!--
            <form class="form-inline my-2 my-lg-0 d-none d-md-flex mr-3" rel="search" action="
			https://swarm.ptsecurity.com/">
                <input type="checkbox" id="SearchControl">
                <input class="form-control mr-sm-2" name="s" type="text" placeholder="Search"
                       value="">
                <label class="text-muted" for="SearchControl" aria-label="Search">
                    <div class="icon-search">
                        <svg width="20" height="20" viewBox="0 0 16 16" fill="currentColor"
                             xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd"
                                  d="M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z"/>
                            <path fill-rule="evenodd"
                                  d="M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z"/>
                        </svg>
                    </div>
                    <div class="icon-close">&times;</div>
                </label>
            </form>
            -->

        </nav>
    </div>
</header>

    <main role="main" class="flex-shrink-0">
        <div class="container p-3 single">
			
<article id="post-159" class="mt-4 mb-5 post-159 post type-post status-publish format-standard hentry category-uncategorized tag-active-directory tag-ms-exchange tag-penetration-testing">
    <header class="entry-header">
		<h1 class="entry-title">Attacking MS Exchange Web Interfaces</h1>            <div class="entry-meta">
				Written by <a href="https://swarm.ptsecurity.com/author/arseniy-sharoglazov/" title="Posts by Arseniy Sharoglazov" class="author url fn" rel="author">Arseniy Sharoglazov</a><span class="posted-on"> on <time class="entry-date published" datetime="2020-07-23T01:00:56+00:00">July 23, 2020</time></span>            </div><!-- .entry-meta -->
		    </header><!-- .entry-header -->

    <div class="entry-content">

		
		
            <div class="authors-block">
				<div class="widget widget_co_authors_plus"><h2 class="widgettitle">Author</h2>            <div class="mb-4">
                <div class="avatar-wrapper">
					<img width="100" height="100" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/foto_arseniy-150x150.jpg" class="avatar avatar-100 photo wp-post-image" alt="" decoding="async" />                </div>
                <div>
                    <div class="display-name">
						<a href="https://swarm.ptsecurity.com/author/arseniy-sharoglazov/" title="Posts by Arseniy Sharoglazov" rel="author">Arseniy Sharoglazov</a>                    </div>
                    <div class="description">
                        <div class="mb-2">
							Penetration Testing Expert                        </div>
						                            <div class="mb-2">
								<a href="https://twitter.com/_mohemiv" title="Visit Arseniy Sharoglazov&#8217;s Twitter" class="icon icon-twitter" rel="external noopener" target="_blank">_mohemiv</a>                            </div>
						                    </div>
                </div>
            </div>
		</div>            </div>

		
		
<p>During external penetration testing, I often see MS Exchange on the perimeter:</p>



<figure class="wp-block-image size-full"><img fetchpriority="high" decoding="async" width="595" height="396" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-12-35-13.png" alt="" class="wp-image-1346"/><figcaption>Examples of MS Exchange web interfaces</figcaption></figure>



<p>Exchange is basically a mail server that supports a bunch of Microsoft protocols.  It&#8217;s usually located on subdomains named autodiscover, mx, owa or mail, and it can also be detected by existing <code>/owa/</code>, <code>/ews/</code>, <code>/ecp/</code>, <code>/oab/</code>, <code>/autodiscover/</code>, <code>/Microsoft-Server-ActiveSync/</code>, <code>/rpc/</code>, <code>/powershell/</code> endpoints on the web server. </p>



<p>The knowledge about how to attack Exchange is crucial for every penetration testing team. If you found yourself choosing between a non-used website on a shared hosting and a MS Exchange, only the latter could guide you inside.</p>



<p>In this article, I&#8217;ll cover all the available techniques for attacking MS Exchange web interfaces and introduce a new technique and a new tool to connect to MS Exchange from the Internet and extract arbitrary Active Directory records, which are also known as LDAP records.</p>



<span id="more-159"></span>



<h2 class="wp-block-heading">Techniques for Attacking Exchange in Q2 2020</h2>



<p>Let&#8217;s assume you&#8217;ve already brute-forced or somehow accessed a low-privilege domain account.</p>



<p>If you had been a black hat, you would try to sign into the Exchange and access the user&#8217;s mailbox. However, for red teamers, it&#8217;s never possible since keeping the client data private is the main goal during penetration testing engagements.</p>



<p>I know of only 5 ways to attack fully updated MS Exchange via a web interface and not disclose any mailbox content:</p>



<h6 class="wp-block-heading"><strong>Getting Exchange User List and Other Information</strong></h6>



<p>Exchange servers have a url <em>/autodiscover/autodiscover.xml</em> that implements <a href="https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxdscli/78530279-d042-4eb0-a1f4-03b18143cd19" target="_blank" rel="noreferrer noopener">Autodiscover Publishing and Lookup Protocol (MS-OXDSCLI)</a>. It accepts special requests that return a configuration of the mailbox to which an email belongs.</p>



<p>If Exchange is covered by Microsoft TMG, you must specify a non-browser User-Agent in the request or you will be redirected to an HTML page to authenticate.</p>



<p class="sidenote"><a href="https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff826797(v=vs.85)" target="_blank" rel="noreferrer noopener">Microsoft TMG&#8217;s Default User-Agent Mapping</a></p>



<p>An example of a request to the Autodiscover service:</p>



<pre class="wp-block-code http"><code>POST /autodiscover/autodiscover.xml HTTP/1.1
Host: exch01.contoso.com
User-Agent: Microsoft Office/16.0 (Windows NT 10.0; Microsoft Outlook 16.0.10730; Pro)
Authorization: Basic Q09OVE9TT1x1c2VyMDE6UEBzc3cwcmQ=
Content-Length: 341
Content-Type: text/xml

&lt;Autodiscover xmlns="http://schemas.microsoft.com/exchange/autodiscover/outlook/requestschema/2006"&gt;
    &lt;Request&gt;
      &lt;EMailAddress&gt;kmia@contoso.com&lt;/EMailAddress&gt;
      &lt;AcceptableResponseSchema&gt;http://schemas.microsoft.com/exchange/autodiscover/outlook/responseschema/2006a&lt;/AcceptableResponseSchema&gt;
    &lt;/Request&gt;
&lt;/Autodiscover&gt;</code></pre>



<p>The specified in the <em>&lt;EMailAddress&gt;</em> tag email needs to be a primary email of an existing user, but it does not necessarily need to correspond to the account used for the authentication. Any domain account will be accepted since the authentication and the authorization are fully done on IIS and Windows levels and Exchange is only processing the XML.</p>



<p>If the specified email has been accepted, you will get a big response containing a dynamically constructed XML. Examine the response, but don&#8217;t miss the four following items:</p>



<figure class="wp-block-image size-full"><img decoding="async" width="807" height="1452" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-01-09-20-7-1.png" alt="" class="wp-image-1348"/><figcaption>An example of the Autodiscover service&#8217;s output</figcaption></figure>



<p>In the X-BackEndCookie cookie you will find a SID. It&#8217;s the SID of the used account, and not the SID of the mailbox owner. This SID can be useful when you don&#8217;t know the domain of the bruteforced user.</p>



<p>In the <em>&lt;AD&gt;</em> and <em>&lt;Server&gt;</em> tags you will find one of Domain Controllers FQDNs, and the Exchange RPC identity. The DC FQDN will refer to the domain of the mailbox owner. Both <em>&lt;AD&gt;</em> and <em>&lt;Server&gt;</em> values can vary for each request. As you go along, you&#8217;ll see how you may apply this data.</p>



<p>In the &lt;<em>OABUrl</em>&gt; tag you will find a path to a directory with Offline Address Book (OAB) files.</p>



<p>Using the &lt;<em>OABUrl</em>&gt; path, you can get an Address List of all Exchange users. To do so, request the <em>&lt;OABUrl&gt;/oab.xml</em> page from the server and list OAB files:</p>



<figure class="wp-block-image size-full w-normal no-decoration"><img decoding="async" width="807" height="643" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-12-47-11-1.png" alt="" class="wp-image-1363"/><figcaption>Getting access to Offline Address Books</figcaption></figure>



<p>The Global Address List (GAL) is an Address Book that includes every mail-enabled object in the organization. Download its OAB file from the same directory, unpack it <a href="https://www.cabextract.org.uk/libmspack/" target="_blank" rel="noreferrer noopener">via the oabextract tool from libmspack library</a>, and run one of the OAB&nbsp;extraction tools or just a <em>strings</em> command to get access to user data:</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="650" height="509" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-12-53-30.png" alt="" class="wp-image-1353"/><figcaption>An example of extracting data via Offline Address Books</figcaption></figure>



<p>There could be multiple organizations on the server and multiple GALs, but this function is almost never used. If it&#8217;s enabled, the Autodiscover service will return different <em>OABUrl</em> values for users from different organizations.</p>



<p>There are ways to get Address Lists without touching OABs (e.g., <a href="https://github.com/sensepost/ruler/wiki/GAL" target="_blank" rel="noreferrer noopener">via MAPI over HTTP in Ruler</a> or <a href="https://github.com/dafthack/MailSniper" target="_blank" rel="noreferrer noopener">via OWA or EWS in MailSniper</a>), but these techniques require your account to have a mailbox associated with it.</p>



<p>After getting a user list, you can perform a Password Spraying attack via the same Autodiscover service or via any other domain authentication on the perimeter. I advise you check out <a href="https://github.com/nyxgeek/ntlmscan" target="_blank" rel="noreferrer noopener">ntlmscan utility</a>, as it contains a quite good wordlist of NTLM endpoints.</p>



<div class="wp-block-group pros-and-cons"><div class="wp-block-group__inner-container is-layout-flow wp-block-group-is-layout-flow">
<p><strong>Pros and Cons</strong></p>



<ul class="wp-block-list"><li class="pros">Any domain account can be used</li><li class="cons">The obtained information is very limited</li><li class="cons">You can only get a list of users who have a mailbox</li><li class="cons">You have to specify an existent user’s primary email address</li><li class="cons">The attacks are well-known for Blue Teams, and you can expect blocking or monitoring of the needed endpoints</li><li class="cons">Available extraction tools do not support the full OAB format and often crash</li></ul>
</div></div>



<p>Don&#8217;t confuse Exchange Autodiscover with Lync Autodiscover; they are two completely different services.</p>



<h6 class="wp-block-heading"><strong>Usage of Ruler</strong></h6>



<p>Ruler is a tool for connecting to Exchange via <em>MAPI over HTTP</em> or <em>RPC over HTTP v2</em> protocols and insert special-crafted records to a user mailbox to abuse the user&#8217;s Microsoft Outlook functions and make it execute arbitrary commands or code.</p>



<figure class="wp-block-image size-large no-decoration w-normal"><img decoding="async" width="807" height="158" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-12-54-28.png" alt="" class="wp-image-1354"/><figcaption>An example of Ruler usage</figcaption></figure>



<p>There are currently only three known techniques to get an RCE in such a way: via rules, via forms, and via folder home pages. All three are fixed, but organizations which have no WSUS, or have a WSUS configured to process only Critical Security Updates, can still be attacked.</p>



<p class="sidenote"><a href="https://www.microsoft.com/en-us/msrc/security-update-severity-rating-system" target="_blank" rel="noreferrer noopener">Microsoft Update Severity Ratings</a> <br> You must install both Critical and Important updates to protect your domain from Ruler&#8217;s attacks</p>



<div class="wp-block-group pros-and-cons"><div class="wp-block-group__inner-container is-layout-flow wp-block-group-is-layout-flow">
<p><strong>Pros and Cons</strong></p>



<ul class="wp-block-list"><li class="pros">A successful attack leads to RCE</li><li class="cons">The used account must have a mailbox</li><li class="cons">The user must regularly connect to Exchange and have a vulnerable MS Outlook</li><li class="cons">The tool provides no way to know if the user uses MS Outlook and what its version is</li><li class="cons">The tool requires you to specify the user&#8217;s primary email address</li><li class="cons">The tool requires /autodiscover/ endpoint to be available</li><li class="cons">The tool has no Unicode support</li><li class="cons">The tool has a limited protocol support and may fail with mystery errors</li><li class="cons">Blue Teams can reveal the tool by its hardcoded strings and BLOBs, including the &#8220;Ruler&#8221; string in its go-ntlm external library</li></ul>
</div></div>



<p>Link to a tool: <a href="https://github.com/sensepost/ruler" target="_blank" rel="noreferrer noopener">https://github.com/sensepost/ruler</a></p>



<h6 class="wp-block-heading"><strong>Usage of PEAS</strong></h6>



<p>PEAS is a lesser-known alternative to Ruler. It&#8217;s a tool for connecting to Exchange via ActiveSync protocol and get access to any SMB server in the internal network:</p>



<figure class="wp-block-image size-large no-decoration w-normal"><img decoding="async" width="807" height="207" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-12-55-09.png" alt="" class="wp-image-1355" title=""/><figcaption>An example of PEAS usage</figcaption></figure>



<p>To use PEAS, you need to know any internal domain name that has no dots. This can be a NetBIOS name of a server, a subdomain of a root domain, or a special name like localhost. A domain controller NetBIOS name can be obtained from the FQDN from the <em>&lt;AD&gt;</em> tag of the Autodiscover XML, but other names are tricky to get.</p>



<p>The PEAS attacks work via the Search and ItemOperations commands in ActiveSync.</p>



<p class="icon icon-note">Note #1</p>



<p>It&#8217;s a good idea to modify PEAS hard-coded identifiers. Exchange stores identifiers of all ActiveSync clients, and Blue Teams can easily request them via an LDAP request. These records can be accessible via any user with at least Organization Management privileges:</p>



<figure class="wp-block-image size-full no-decoration w-normal"><img decoding="async" width="807" height="703" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-12-56-18.png" alt="" class="wp-image-1357"/><figcaption>Getting a list of accounts that have used PEAS via LDAP using <em>(msExchDeviceID=123456)</em> filter</figcaption></figure>



<p>These identifiers are also used to wipe lost devices or to filter or quarantine new devices by their models or model families. If the quarantine policy is enforced, Exchange sends emails to administrators when a new device has been connected. Once the device is allowed, a device with the same model or model family can be used to access any mailbox.&nbsp;</p>



<p>An example of widely used identifiers:</p>



<pre class="wp-block-code http"><code>msExchDeviceID: 302dcfc5920919d72c5372ce24a13cd3
msExchDeviceModel: Outlook for iOS and Android
msExchDeviceOS: OutlookBasicAuth
msExchDeviceType: Outlook
msExchDeviceUserAgent: Outlook-iOS-Android/1.0</code></pre>



<p>If you have been quarantined, PEAS will show an empty output, and there will be no signs of quarantine even in the decrypted TLS traffic.</p>



<p class="icon icon-note">Note #2</p>



<p>The ActiveSync service supports http/https URLs for connecting to Windows SharePoint Services (WSS). This feature can be abused by performing a blind SSRF attack, and you will have an option to authenticate to the target with any credentials via NTLM:</p>



<figure class="wp-block-image size-full no-decoration w-normal"><img decoding="async" width="807" height="183" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-12-59-00.png" alt="" class="wp-image-1358"/><figcaption>Forcing Exchange to make a WSS connection to http://SHP01/test/test/test with CONTOSO\sharepoint-setup account</figcaption></figure>



<figure class="wp-block-image size-full w-normal"><img decoding="async" width="804" height="448" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-12-59-00-1.png" alt="" class="wp-image-1359"/><figcaption>An example of a WSS connection: <a href="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/activesync_wss_sample.pcap">activesync_wss_sample.pcap</a></figcaption></figure>



<p>The shown requests will be sent even if the target is not a SharePoint. For HTTPS connections, the certificate will require a validation. As it is ActiveSync, the target hostname should have no dots.</p>



<div class="wp-block-group pros-and-cons"><div class="wp-block-group__inner-container is-layout-flow wp-block-group-is-layout-flow">
<p><strong>Pros and Cons</strong></p>



<ul class="wp-block-list"><li class="pros">The tool has no bugs on the protocol level</li><li class="pros">The tool supports usage of different credentials for each Exchange and SMB/HTTP</li><li class="pros">The tool attacks are unique and cannot be currently done via other techniques or software</li><li class="cons">The used account must have a mailbox</li><li class="cons">The ActiveSync protocol must be enabled on the server and for the used account</li><li class="cons">The support of UNC/WSS paths must not be disabled in the ActiveSync configuration</li><li class="cons">The list of allowed SMB/WSS servers must not be set in the ActiveSync configuration</li><li class="cons">You need to know hostnames to connect</li><li class="cons">ActiveSync accepts only plaintext credentials, so there is no way to perform the NTLM Relay or Pass-The-Hash attack</li></ul>
</div></div>



<p>The tool has some bugs related to Unicode paths, but they can be easily fixed.</p>



<p>Link to a tool: <a href="https://github.com/FSecureLABS/PEAS" target="_blank" rel="noreferrer noopener">https://github.com/FSecureLABS/PEAS</a></p>



<h6 class="wp-block-heading"><strong>Abusing EWS Subscribe Operation</strong></h6>



<p>Exchange Web Services (EWS) is an Exchange API designed to provide access to mailbox items. It has a Subscribe operation, which allows a user to set a URL to get callbacks from Exchange via HTTP protocol to receive push notifications.</p>



<p>In 2018, the ZDI Research Team discovered that Exchange authenticates to the specified URL via NTLM or Kerberos, and this can be used in NTLM Relay attacks to the Exchange itself.</p>



<p class="sidenote"><a href="https://www.thezdi.com/blog/2018/12/19/an-insincere-form-of-flattery-impersonating-users-on-microsoft-exchange" target="_blank" rel="noreferrer noopener">Impersonating Users on Microsoft Exchange</a></p>



<figure class="wp-block-image size-full no-decoration w-normal"><img decoding="async" width="807" height="263" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-01-49.png" alt="" class="wp-image-1361"/><figcaption>Forcing Exchange to make a connection to http://attacker.com/test/test/test</figcaption></figure>



<p>After the original publication, the researcher Dirk-jan Mollema demonstrated that HTTP requests in Windows can be relayed to LDAP and released the PrivExchange tool and a new version of NTLMRelayX to get a write access to Active Directory on behalf of the Exchange account.</p>



<p class="sidenote"><a href="https://dirkjanm.io/abusing-exchange-one-api-call-away-from-domain-admin/" target="_blank" rel="noreferrer noopener">Abusing Exchange: One API call away from Domain Admin</a> </p>



<p>Currently, Subscribe HTTP callbacks do not support any interaction with a receiving side, but it&#8217;s still possible to specify any URL to get an incoming connection, so they can be used for blind SSRF attacks.</p>



<div class="wp-block-group pros-and-cons"><div class="wp-block-group__inner-container is-layout-flow wp-block-group-is-layout-flow">
<p><strong>Pros and Cons</strong></p>



<ul class="wp-block-list"><li class="cons">The used account must have a mailbox</li><li class="cons">You must have an extensive knowledge of the customer’s internal network</li></ul>
</div></div>



<p>Link to a tool: <a href="https://github.com/dirkjanm/PrivExchange" target="_blank" rel="noreferrer noopener">https://github.com/dirkjanm/PrivExchange</a></p>



<h6 class="wp-block-heading"><strong>Abusing Office Web Add-ins</strong></h6>



<p>This technique is only for persistence, so just read the information by the link if needed.</p>



<p>Link to a technique: <a href="https://www.mdsec.co.uk/2019/01/abusing-office-web-add-ins-for-fun-and-limited-profit/" target="_blank" rel="noreferrer noopener">https://www.mdsec.co.uk/2019/01/abusing-office-web-add-ins-for-fun-and-limited-profit/</a></p>



<h2 class="wp-block-heading">The New Tool We Want</h2>



<p>Based on the available attacks and software, it&#8217;s easy to imagine the tool that will be great to have:</p>



<ul class="wp-block-list"><li>The tool must work with any domain account</li><li>The tool must not rely on /autodiscover/ and /oab/ URLs</li><li>The knowledge of any email addresses must not be required</li><li>All used protocols must be fully and qualitatively implemented</li><li>The tool must be able to get Address Lists on all versions of Exchange in any encoding</li><li>The tool must not rely on endpoints which can be protected by ADFS, as ADFS may require Multi-Factor Authentication</li><li>The tool must be able to get other useful data from Active Directory: service account names, hostnames, subnets, etc</li></ul>



<p>These requirements led me to choose RPC over HTTP v2 protocol for this research. It&#8217;s the oldest protocol for communication with Exchange, it&#8217;s enabled by default in Exchange 2003/2007/2010/2013/2016/2019, and it can pass through Microsoft Forefront TMG servers.</p>



<h2 class="wp-block-heading">How RPC over HTTP v2 works</h2>



<p>Let&#8217;s run Ruler and see how it communicates via RPC over HTTP v2:</p>



<div class="wp-block-columns is-layout-flex wp-container-core-columns-is-layout-9d6595d7 wp-block-columns-is-layout-flex">
<div class="wp-block-column is-layout-flow wp-block-column-is-layout-flow">
<p><strong>Connection #1</strong></p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="522" height="936" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-11-29.png" alt="" class="wp-image-1365"/><figcaption>Traffic dump of Ruler #1 connection</figcaption></figure>
</div>



<div class="wp-block-column is-layout-flow wp-block-column-is-layout-flow">
<p><strong><strong>Parallel Connection</strong> #2</strong></p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="522" height="939" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-11-29-1.png" alt="" class="wp-image-1366"/><figcaption>Traffic dump of Ruler #2 connection</figcaption></figure>
</div>
</div>



<p>RPC over HTTP v2 works in two parallel connections: IN and OUT channels. It&#8217;s a patented Microsoft technology for high-speed traffic passing via two fully compliant HTTP/1.1 connections.</p>



<p>The structure of RPC over HTTP v2 data is described <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rpch/c0f4c9c5-1a61-4d10-b8e2-005378d1d212" target="_blank" rel="noreferrer noopener">in the MS-RPCH Specification</a>, and it just consists of ordinary MSRPC packets and special RTS RPC packets, where RTS stands for Request to Send. </p>



<h5 class="has-text-align-center wp-block-heading">RPC over HTTP v2 carries MSRPC</h5>



<p>The endpoint <em>/rpc/rpcproxy.dll</em> actually is not a part of Exchange. It&#8217;s a part of a service called <strong>RPC Proxy</strong>. It&#8217;s an intermediate forwarding server between RPC Clients and RPC Servers.</p>



<p>The Exchange RPC Server is on port 6001 in our case:</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="550" height="150" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-34-33.png" alt="" class="wp-image-1368"/><figcaption>An example of a pure ncacn_http endpoint</figcaption></figure>



<p>We will refer to such ports as <strong>ncacn_http</strong> services/endpoints. According to the specification, each client must use RPC Proxies to connect to ncacn_http services, but surely you can emulate RPC Proxy and connect to ncacn_http endpoints directly, if you need to.</p>



<p>RPC IN and OUT channels operate independently, and they can potentially pass through different RPC Proxies, and the RPC Server can be on a different host as well:</p>



<figure class="wp-block-image size-large no-decoration"><img decoding="async" width="745" height="335" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/MS-Exchange_scheme_1_v.03-2-3.jpg" alt="" class="wp-image-626" title=""/></figure>



<p>The RPC Server, i.e., the ncacn_http endpoint orchestrates IN and OUT channels, and packs or unpacks  MSRPC packets into or from them.</p>



<p>Both RPC Proxies and RPC Servers control the amount of traffic passing through the chain to protect from Denial-of-Service attacks. This protection is one of the reasons for the existence of RTS RPC packets.</p>



<h2 class="wp-block-heading">Determining target RPC Server name</h2>



<p>In the RPC over HTTP v2 traffic dump, you can see that Ruler obtained the RPC Server name from the Autodiscover service and put it into the URL:</p>



<figure class="wp-block-image size-full w-full"><img decoding="async" width="805" height="568" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-35-50.png" alt="" class="wp-image-1369"/><figcaption>Traffic dump of Ruler&#8217;s RPC over HTTP v2 connection</figcaption></figure>



<p>Interestingly, according to the MS-RPCH specification, this URL should contain a hostname or an IP; and such &#8220;GUID hostnames&#8221; cannot be used:</p>



<figure class="wp-block-image size-full w-normal"><img decoding="async" width="778" height="656" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-37-02.png" alt="" class="wp-image-1371"/><figcaption>An excerpt from the MS-RPCH specification: <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rpch/0b7aecea-cd35-436d-9b4b-ae1e1fd5174f" target="_blank" rel="noreferrer noopener">2.2.2 URI Encoding</a></figcaption></figure>



<p>The article by Microsoft <a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/windows/win32/rpc/rpc-over-http-security" target="_blank">RPC over HTTP Security</a> also mentions nothing about this format, but it shows the registry key where RPC Proxies contain allowed values for this URL: <code>HKLM\Software\Microsoft\Rpc\RpcProxy</code>.</p>



<figure class="wp-block-image size-full no-decoration w-full"><img decoding="async" width="823" height="526" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-08-15-17-00-11.png" alt="" class="wp-image-1559"/><figcaption>An example of a content of HKLM\Software\Microsoft\Rpc\RpcProxy key </figcaption></figure>



<p>It was discovered that each RPC&nbsp;Proxy has a default ACL that accepts connections to the RPC&nbsp;Proxy itself via 593 and 49152-65535 ports using its NetBIOS name, and all Exchange servers have a similar ACL containing every Exchange NetBIOS name with corresponding ncacn_http ports.</p>



<p>Since RPC Proxies support NTLM authentication, we can always get theirs NetBIOS names via NTLMSSP:</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="600" height="323" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-41-48.png" alt="" class="wp-image-1375"/><figcaption>An example of getting target NetBIOS name via NTLMSSP using nmap</figcaption></figure>



<p>So now we likely have a technique for connecting to RPC Proxies without usage of the Autodiscover service and knowing the Exchange GUID identity.</p>



<p>Based on the code available in Impacket, I&#8217;ve developed RPC&nbsp;over&nbsp;HTTP&nbsp;v2 protocol implementation, rpcmap.py utility, and slightly modified rpcdump.py to verify our ideas and pave the way for future steps:</p>



<figure class="wp-block-image size-large w-full no-decoration"><img decoding="async" width="807" height="774" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-42-54.png" alt="" class="wp-image-1376"/><figcaption>Running rpcmap.py for Exchange 2019. The previous version of this tool was contributed to Impacket in May 2020.</figcaption></figure>



<figure class="wp-block-image size-full"><img decoding="async" width="640" height="517" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-43-37.png" alt="" class="wp-image-1377"/><figcaption>Traffic dump of RPC IN Channel of rpcmap.py</figcaption></figure>



<p>Although rpcmap.py successfully used our technique to connect to the latest Exchange, internally the request was processed in a different way: Exchange 2003/2007/2010 used to get connections via rpcproxy.dll, but Exchange 2013/2016/2019 have RpcProxyShim.dll.</p>



<p><strong>RpcProxyShim.dll</strong> hooks RpcProxy.dll callbacks and processes Exchange GUID identities. NetBIOS names are also supported for backwards compatibility. RpcProxyShim.dll allows to skip authentication on the RPC level and can forward traffic directly to the Exchange process to get a faster connection.</p>



<p>For more information about RpcProxyShim.dll and RPC Proxy ACLs, read comments <a href="https://github.com/SecureAuthCorp/impacket/blob/b97fdef3daafc2a3b736cfe4cfe5712d81f1be96/impacket/dcerpc/v5/rpch.py#L477" target="_blank" rel="noreferrer noopener">in our MS-RPCH implimentation code</a>.</p>



<h2 class="wp-block-heading">Exploring RPC over HTTP v2 endpoints</h2>



<p>Let&#8217;s run rpcmap.py with <em>-brute-opnums</em> option for MS Exchange 2019 to get information about which endpoints are accessible via RPC over HTTP v2:</p>



<pre class="wp-block-code txt"><code>$ rpcmap.py -debug -auth-transport 'CONTOSO/mia:P@ssw0rd' -auth-rpc 'CONTOSO/mia:P@ssw0rd' -auth-level 6 -brute-opnums 'ncacn_http:&#91;6001,RpcProxy=exch01.contoso.com:443]'
&#91;+] StringBinding has been changed to ncacn_http:EXCH01&#91;6001,RpcProxy=exch01.contoso.com:443]
Protocol: &#91;MS-DCOM]: Distributed Component Object Model (DCOM) Remote
Provider: N/A
UUID: 00000131-0000-0000-C000-000000000046 v0.0
Opnums 0-64: rpc_s_access_denied

Protocol: &#91;MS-DCOM]: Distributed Component Object Model (DCOM)
Provider: N/A
UUID: 00000134-0000-0000-C000-000000000046 v0.0
Opnums 0-64: rpc_s_access_denied

Protocol: &#91;MS-DCOM]: Distributed Component Object Model (DCOM) Remote
Provider: N/A
UUID: 00000143-0000-0000-C000-000000000046 v0.0
Opnums 0-64: rpc_s_access_denied

Protocol: &#91;MS-OXABREF]: Address Book Name Service Provider Interface (NSPI) Referral Protocol
Provider: N/A
UUID: 1544F5E0-613C-11D1-93DF-00C04FD7BD09 v1.0
Opnum 0: rpc_x_bad_stub_data
Opnum 1: rpc_x_bad_stub_data
Opnums 2-64: nca_s_op_rng_error (opnum not found)

Protocol: &#91;MS-DCOM]: Distributed Component Object Model (DCOM)
Provider: ole32.dll
UUID: 18F70770-8E64-11CF-9AF1-0020AF6E72F4 v0.0
Opnums 0-64: rpc_s_access_denied

Protocol: &#91;MS-OXCRPC]: Wire Format Protocol
Provider: N/A
UUID: 5261574A-4572-206E-B268-6B199213B4E4 v0.1
Opnum 0: rpc_x_bad_stub_data
Opnums 1-64: nca_s_op_rng_error (opnum not found)

Procotol: N/A
Provider: N/A
UUID: 5DF3C257-334B-4E96-9EFB-A0619255BE09 v1.0
Opnums 0-64: rpc_s_access_denied

Protocol: &#91;MS-OXCRPC]: Wire Format Protocol
Provider: N/A
UUID: A4F1DB00-CA47-1067-B31F-00DD010662DA v0.81
Opnum 0: rpc_x_bad_stub_data
Opnum 1: rpc_x_bad_stub_data
Opnum 2: rpc_x_bad_stub_data
Opnum 3: rpc_x_bad_stub_data
Opnum 4: rpc_x_bad_stub_data
Opnum 5: rpc_x_bad_stub_data
Opnum 6: success
Opnum 7: rpc_x_bad_stub_data
Opnum 8: rpc_x_bad_stub_data
Opnum 9: rpc_x_bad_stub_data
Opnum 10: rpc_x_bad_stub_data
Opnum 11: rpc_x_bad_stub_data
Opnum 12: rpc_x_bad_stub_data
Opnum 13: rpc_x_bad_stub_data
Opnum 14: rpc_x_bad_stub_data
Opnums 15-64: nca_s_op_rng_error (opnum not found)

Protocol: &#91;MS-RPCE]: Remote Management Interface
Provider: rpcrt4.dll
UUID: AFA8BD80-7D8A-11C9-BEF4-08002B102989 v1.0
Opnum 0: success
Opnum 1: rpc_x_bad_stub_data
Opnum 2: success
Opnum 3: success
Opnum 4: rpc_x_bad_stub_data
Opnums 5-64: nca_s_op_rng_error (opnum not found)

Procotol: N/A
Provider: N/A
UUID: BA3FA067-8D56-4B56-BA1F-9CBAE8DB3478 v1.0
Opnums 0-64: rpc_s_access_denied

Protocol: &#91;MS-NSPI]: Name Service Provider Interface (NSPI) Protocol
Provider: ntdsai.dll
UUID: F5CC5A18-4264-101A-8C59-08002B2F8426 v56.0
Opnum 0: rpc_x_bad_stub_data
Opnum 1: rpc_x_bad_stub_data
Opnum 2: rpc_x_bad_stub_data
Opnum 3: rpc_x_bad_stub_data
Opnum 4: rpc_x_bad_stub_data
Opnum 5: rpc_x_bad_stub_data
Opnum 6: rpc_x_bad_stub_data
Opnum 7: rpc_x_bad_stub_data
Opnum 8: rpc_x_bad_stub_data
Opnum 9: rpc_x_bad_stub_data
Opnum 10: rpc_x_bad_stub_data
Opnum 11: rpc_x_bad_stub_data
Opnum 12: rpc_x_bad_stub_data
Opnum 13: rpc_x_bad_stub_data
Opnum 14: rpc_x_bad_stub_data
Opnum 15: rpc_x_bad_stub_data
Opnum 16: rpc_x_bad_stub_data
Opnum 17: rpc_x_bad_stub_data
Opnum 18: rpc_x_bad_stub_data
Opnum 19: rpc_x_bad_stub_data
Opnum 20: rpc_x_bad_stub_data
Opnums 21-64: nca_s_op_rng_error (opnum not found)</code></pre>



<p>The rpcmap.py works via the Remote Management Interface described <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rpce/3165f378-ede3-48a8-b871-be1183e1b7fb" target="_blank" rel="noreferrer noopener">in MS-RPCE 2.2.1.3</a>. If it&#8217;s available, it can show all interfaces offered by the RPC Server. Note that the tool may show non-available endpoints, and provider and protocol lines are taken from the Impacket database, and they can be wrong.</p>



<p>Correlating the rpcmap.py output with the Exchange documentation, the next table with a complete list of protocols available via RPC over HTTP v2 in MS Exchange was formed:</p>



<div class="wp-block-group"><div class="wp-block-group__inner-container is-layout-flow wp-block-group-is-layout-flow">
<div class="wp-block-group"><div class="wp-block-group__inner-container is-layout-flow wp-block-group-is-layout-flow">
<figure class="wp-block-table w-normal"><table><tbody><tr><th><strong>Protocol</strong></th><th><strong>UUID</strong></th><th><strong>Description</strong></th></tr><tr><td><a target="_blank" href="https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxcrpc/137f0ce2-31fd-4952-8a7d-6c0b242e4b6a" rel="noopener noreferrer">MS‑OXCRPC</a></td><td>A4F1DB00-CA47-1067-B31F-00DD010662DA v0.81</td><td>Wire Format Protocol EMSMDB Interface</td></tr><tr><td><a target="_blank" href="https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxcrpc/137f0ce2-31fd-4952-8a7d-6c0b242e4b6a" rel="noopener noreferrer">MS‑OXCRPC</a></td><td>5261574A-4572-206E-B268-6B199213B4E4 v0.1</td><td>Wire Format Protocol AsyncEMSMDB Interface</td></tr><tr><td><a target="_blank" href="https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxabref/88c2b896-fe4f-4e28-8a87-e83a73d9c90e" rel="noopener noreferrer">MS‑OXABREF</a></td><td>1544F5E0-613C-11D1-93DF-00C04FD7BD09 v1.0</td><td>Address Book Name Service Provider Interface (NSPI) Referral Protocol</td></tr><tr><td><a target="_blank" href="https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxnspi/63662a26-c8fc-4493-a41a-fbcbb7e43136" rel="noopener noreferrer">MS‑OXNSPI</a></td><td>F5CC5A18-4264-101A-8C59-08002B2F8426 v56.0</td><td>Exchange Server Name Service Provider Interface (NSPI) Protocol</td></tr></tbody></table></figure>
</div></div>
</div></div>



<p>MS-OXCRPC is the protocol that Ruler uses to send MAPI messages to Exchange, and MS-OXABREF and MS-OXNSPI are two completely new protocols for the penetration testing field.</p>



<h2 class="wp-block-heading">Exploring MS-OXABREF and MS-OXNSPI</h2>



<p>MS-OXNSPI is one of the protocols that Outlook uses to access Address Books. MS-OXABREF is its auxiliary protocol to obtain the specific RPC Server name to connect to it via RPC Proxy to use the main protocol.</p>



<p>MS-OXNSPI contains 21 operations to access Address Books. It appears to be an OAB with search and dynamic queries:</p>



<figure class="wp-block-image size-full w-full"><img decoding="async" width="805" height="907" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-15-20-21.png" alt="" class="wp-image-1407"/><figcaption>Contents of <a href="https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxnspi/63662a26-c8fc-4493-a41a-fbcbb7e43136" target="_blank" rel="noreferrer noopener">the MS-OXNSPI specification</a></figcaption></figure>



<p>The important thing for working with MS-OXNSPI is understanding what Legacy DN is. In the specification you will see terms &#8220;DN&#8221; and &#8220;DNs&#8221; that seem to refer to Active Directory:</p>



<figure class="wp-block-image size-full"><img decoding="async" width="698" height="387" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-45-07-1.png" alt="" class="wp-image-1381"/><figcaption>An excerpt from the MS-OXNSPI specification: <a href="https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxnspi/a4e056f0-7d05-4e6d-8acb-65751e83a071" target="_blank" rel="noreferrer noopener">3.1.4.1.13 NspiDNToMId</a></figcaption></figure>



<p>The truth is, these DNs are not Active Directory DNs. They are Legacy DNs.</p>



<p>In 1997, Exchange was not based on Active Directory and used its predecessor, X.500 Directory Service. In 2000, the migration to Active Directory happened, and for each X.500&nbsp;attribute a corresponding attribute in Active Directory was assigned:</p>



<figure class="wp-block-table w-normal"><table><tbody><tr><td><strong>X.500 Attribute</strong></td><td><strong>Active Directory Attribute</strong></td></tr><tr><td>DXA‑Flags</td><td><small>none</small></td></tr><tr><td>DXA‑Task</td><td><small>none</small></td></tr><tr><td>distinguishedName</td><td>legacyExchangeDN</td></tr><tr><td>objectGUID</td><td>objectGUID</td></tr><tr><td>mail</td><td>mail</td></tr><tr><td><small>none</small></td><td>distinguishedName</td></tr><tr><td>…</td><td>…</td></tr></tbody></table></figure>



<p>X.500 distinguishedName was moved to legacyExchangeDN, and Active Directory was given its own distinguishedName. But, from Exchange protocols point of view, not that much has changed. The protocols were modified to access Active Directory instead of X.500 Directory Service, but a lot of the terminology and internal features remained the same.</p>



<p>I would say X.500 space on top of Active Directory was formed, and all elements with legacyExchangeDN attribute represent it.</p>



<p>Let&#8217;s see how it&#8217;s done in practice.</p>



<p>I&#8217;ve developed the implementation of MS-OXNSPI protocol, but before we use it, let&#8217;s request our sample object via LDAP:</p>



<figure class="wp-block-image size-full no-decoration w-full"><img decoding="async" width="807" height="257" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-48-08.png" alt="" class="wp-image-1384" title=""/><figcaption>Connecting to Active Directory via LDAP and getting information about a sample user</figcaption></figure>



<p>As expected, the distinguishedName field contains the object&#8217;s Active Directory Distinguished Name, and the legacyExchangeDN field contains a different thing we call Legacy DN.</p>



<p>To request information about this user via MS-OXNSPI, we will use its Legacy DN as a DN, as it represents a DN in our imaginary X.500 space:</p>



<figure class="wp-block-image size-full no-decoration w-full"><img decoding="async" width="807" height="464" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-48-53.png" alt="" class="wp-image-1385"/><figcaption>Connecting to Exchange via MS-OXNSPI and performing the NspiDNToMId operation</figcaption></figure>



<p>The NspiDNToMId operation we called returned a temporary object identifier that works only during this session. We will talk about it in the next section, but for now, just observe that we passed Legacy DN as a DN and it worked.</p>



<p>Also note we have used &#8220;Administrator&#8221; account and it worked despite the fact that this account doesn&#8217;t have a mailbox. Even a machine account would work fine.</p>



<p>Let&#8217;s request all the object properties via the obtained temporary identifier:</p>



<figure class="wp-block-image size-full no-decoration w-full"><img decoding="async" width="807" height="611" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-49-34.png" alt="" class="wp-image-1386"/><figcaption>Requesting the sample object information via MS-OXNSPI</figcaption></figure>



<p>You can see we were able to get a lot of properties which do not show up via other techniques (e.g., OAB extracting). Sadly, not all Active Directory properties are here. Exchange returns only fields of our imaginary X.500 space.</p>



<p>As the documentation describes operations to get all members of any Address Book, we are able to develop a tool to extract all available fields of all mailbox accounts. I will present this tool at the end, but now let&#8217;s move on since we wanted to get access to whole Active Directory information.</p>



<h2 class="wp-block-heading">Revealing Formats of MIDs and Legacy DNs</h2>



<p>One of the key terms in MS-OXNSPI is Minimal Entry ID (MId). MIDs are 4-byte integers that act like temporary identifiers during a single MS-OXNSPI session:</p>



<figure class="wp-block-image size-full w-full"><img decoding="async" width="805" height="372" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-50-14.png" alt="" class="wp-image-1387"/><figcaption>An excerpt from the MS-OXNSPI specification: <a href="https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxnspi/902ede0d-bb0a-46f0-bf68-03a6ed08d4e8" target="_blank" rel="noreferrer noopener">2.2.9.1 MinimalEntryID</a></figcaption></figure>



<p>The documentation does not disclose the algorithm used for MIDs creation.</p>



<p>To explore how MIDs are formed, we will call NspiGetSpecialTable operation and obtain a list of existing Address&nbsp;Books:</p>



<figure class="wp-block-image size-full no-decoration w-full"><img decoding="async" width="781" height="645" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-50-55.png" alt="" class="wp-image-1388"/><figcaption>The demonstration of usage of NspiGetSpecialTable operation</figcaption></figure>



<p>In the output, the PidTagAddressBookContainerId field contains an assigned MId for each Address Book. It&#8217;s easy to spot that they are simply integers that are decrementing from 0xFFFFFFF0:</p>



<figure class="wp-block-table w-normal"><table><tbody><tr><td><strong>MID HEX Format</strong></td><td><strong>MID Unsigned Int Format</strong></td><td><strong>MID Signed Int Format</strong></td></tr><tr><td>0xFFFFFFF0</td><td>4294967280</td><td>-16</td></tr><tr><td>0xFFFFFFEF</td><td>4294967279</td><td>-17</td></tr><tr><td>0xFFFFFFEE</td><td>4294967278</td><td>-18</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table></figure>



<p>The 4294967280 number also appeared in the previous section where we requested sample user information. It&#8217;s here again because I used a blank session to take this screenshot. If it was the same session, we would get MIDs assigned from 4294967279.</p>



<p>Take a look into the PidTagEntryId field in the shown output. It contains new for us Legacy DN format:</p>



<pre class="wp-block-code"><code>/guid=B2D6307C8376CA4DA4CE20E29BB1F2DF</code></pre>



<p>If you will try to request objects using this format, you will discover you can get any Active Directory object by its objectGUID:</p>



<figure class="wp-block-image size-full"><img decoding="async" width="780" height="672" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-55-04.png" alt="" class="wp-image-1392" title="w-full no-decoration"/><figcaption>Getting access to a service account&#8217;s data by its objectGUID</figcaption></figure>



<p>This output shows the other similar Legacy DN format:</p>



<pre class="wp-block-code"><code>/o=NT5/ou=00000000000000000000000000000000/cn=F24B833B62919948B1D1D2D888CDB10B</code></pre>



<p>So, we need very little to obtain whole Active Directory data: we must either get a list of all Active Directory GUIDs, or somehow make the server assign a MId to each Active Directory object.</p>



<h2 class="wp-block-heading">Revealing Hidden Format of MIDs</h2>



<p>I redrawn the previously used schematic to show how MS-OXNSPI works from the server perspective:</p>



<figure class="wp-block-image no-decoration w-full"><img decoding="async" width="871" height="331" class="wp-image-764" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/MS-Exchange_scheme_1_v.03-3-1.jpg"></figure>



<p>Exchange does not match or sort the data itself; it&#8217;s acting like a proxy. Most of the work happens on Domain Controllers. Exchange uses LDAP and MS-NSPI protocols to connect to DCs to access the Active Directory database.</p>



<p>MS-NSPI is the MSRPC protocol that is almost fully compliant with MS-OXNSPI: </p>



<div class="wp-block-columns w-normal is-layout-flex wp-container-core-columns-is-layout-9d6595d7 wp-block-columns-is-layout-flex">
<div class="wp-block-column is-layout-flow wp-block-column-is-layout-flow">
<figure class="wp-block-image size-large"><img decoding="async" width="368" height="434" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-58-54.png" alt="" class="wp-image-1396"/><figcaption>Contents of <a href="https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxnspi/63662a26-c8fc-4493-a41a-fbcbb7e43136" target="_blank" rel="noreferrer noopener">the MS-OXNSPI specification</a></figcaption></figure>



<p></p>
</div>



<div class="wp-block-column is-layout-flow wp-block-column-is-layout-flow">
<figure class="wp-block-image size-full"><img decoding="async" width="368" height="434" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-13-58-54-1.png" alt="" class="wp-image-1397"/><figcaption>Contents of <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nspi/6dd0a3ea-b4d4-4a73-a857-add03a89a543" target="_blank" rel="noreferrer noopener">the MS-NSPI specification</a></figcaption></figure>
</div>
</div>



<p>The main difference is that the MS-NSPI protocol is offered by the ntdsai.dll library in the lsass.exe memory on DCs when Exchange is set up. </p>



<p>The MS-NSPI and MS-OXNSPI protocols are even sharing UUIDs:</p>



<figure class="wp-block-table w-normal"><table><tbody><tr><td><strong>Protocol</strong></td><td><strong>UUID</strong></td></tr><tr><td>MS‑NSPI</td><td>F5CC5A18-4264-101A-8C59-08002B2F8426 v56.0</td></tr><tr><td>MS‑OXNSPI</td><td>F5CC5A18-4264-101A-8C59-08002B2F8426 v56.0</td></tr></tbody></table></figure>



<p>So, MS-NSPI is the third network protocol after LDAP and MS-DRSR (MS-DRSR is also known as DcSync and DRSUAPI) to access the Active Directory database.</p>



<p>Let&#8217;s connect to a Domain Controller via MS-NSPI using our code developed for MS-OXNSPI:</p>



<figure class="wp-block-image size-full"><img decoding="async" width="700" height="321" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-14-01-20.png" alt="" class="wp-image-1399"/><figcaption>Determining MS-NSPI endpoint on a DC and connecting to it</figcaption></figure>



<p>And let&#8217;s call NspiGetSpecialTable, the operation we previously used for obtaining a list of existing Address Books, directly on a DC:</p>



<figure class="wp-block-image size-full no-decoration w-normal"><img decoding="async" width="774" height="572" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-14-02-13.png" alt="" class="wp-image-1403"/><figcaption>Calling NspiGetSpecialTable on a Domain Controller</figcaption></figure>



<p>The returning Address Books remain the same, but the MIDs are different. A MId on a Domain Controller represents an object DNT.</p>



<p><strong>Distinguished Name Tags (DNTs)</strong> are 4-byte integer indexes of objects inside a Domain Controller NTDS.dit database. DNTs are different on every DC: they are never replicated, but can be copied during an initial DC synchronization.</p>



<p>DNTs usually start between 1700 and 2200, end before 100,000 in medium-sized domains, and end before 5,000,000 in large-sized domains. New DNTs are created by incrementing previous ones. According to the Microsoft website, the maximum possible DNT is 2<sup>31</sup>&nbsp;(2,147,483,648).</p>



<h4 class="has-text-align-center wp-block-heading">MIDs on Domain Controllers are DNTs</h4>



<p>The fact that DCs use DNTs as MIDs is convenient since, in this way, DCs don&#8217;t need to maintain an in-memory correspondence table between MIDs and GUIDs for each object. The downside is that an NSPI client can request any DNT skipping the MID-assigning process.</p>



<h2 class="wp-block-heading">Requesting DNTs via Exchange</h2>



<p>Let&#8217;s construct a table with approximate MID ranges we have discovered:</p>



<figure class="wp-block-table w-normal"><table><tbody><tr><td><strong>MID Range</strong></td><td><strong>Used to</strong></td></tr><tr><td>0x00000000&nbsp;..&nbsp;0x0000000F</td><td>Trigger specific behaviors in specific methods (e.g.,&nbsp;indicating the end of a table)</td></tr><tr><td>0x00000010&nbsp;..&nbsp;0x7FFFFFFF</td><td>Used by Domain Controllers as MIDs and DNTs</td></tr><tr><td>0xFFFFFFF0&nbsp;..&nbsp;0x80000000</td><td>Used by Exchange as dynamically assigned MIDs</td></tr></tbody></table></figure>



<p>It&#8217;s clear Domain Controllers MIDs and Exchange MIDs are not intersecting. It&#8217;s done on purpose:</p>



<h4 class="has-text-align-center wp-block-heading">Exchange allows proxying DC MIDs to and from the end-user</h4>



<p>This is one of the ways how Exchange devolves data matching operations to Domain Controllers. An example of an operation that clearly shows this can be NspiUpdateStat:</p>



<figure class="wp-block-image size-large no-decoration"><img decoding="async" width="792" height="302" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-15-16-29.png" alt="" class="wp-image-1405"/><figcaption>Calling the NspiUpdateStat operation via MS Exchange</figcaption></figure>



<p>In fact, in Exchange 2003, MS-OXNSPI didn&#8217;t exist and the future protocol named MS-OXABREF returned a Domain Controller address to the client. Next, the client contacted the MS-NSPI interface on a DC via RPC Proxy without passing traffic through Exchange.</p>



<p>After 2003, NSPI implementation started to move from DCs to Exchange, and you will find the <strong>NSPI Proxy Interface</strong> term in books of that time. In 2011, the initial MS-OXNSPI specification was published, but internally it&#8217;s still based on Domain Controller NSPI endpoints.</p>



<p>This story also explains why we see the 593/tcp port with ncacn_http endpoint mapper on every DC nowadays. This is the port for Outlook 2003 to locate MS-NSPI interface via RPC Proxies.</p>



<p>If you are wondering if we can look up all DNTs from zero to a large number as MIDs via Exchange, this is exactly how our tool will get all Active Directory records.</p>



<h2 class="wp-block-heading">The Tool&#8217;s Overview</h2>



<p>The exchanger.py utility was developed to conduct all described movements:</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="720" height="272" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-15-23-20.png" alt="" class="wp-image-1409"/><figcaption>Displaying supported attacks in exchanger.py</figcaption></figure>



<p>The <em>list-tables</em> attack lists Address Books and can count entities in every one of them:</p>



<figure class="wp-block-image size-full"><img decoding="async" width="720" height="649" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-15-24-36.png" alt="" class="wp-image-1410"/><figcaption>Example usage of the list-tables attack</figcaption></figure>



<p>The <em>dump-tables</em> attack can dump any specified Address Book by its name or GUID. It supports requesting all the properties, or one of the predefined set of fields. It&#8217;s capable of getting any number of rows via one request:</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="750" height="450" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-15-25-21.png" alt="" class="wp-image-1411"/><figcaption>The help of the dump-tables attack</figcaption></figure>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="720" height="464" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-15-26-43.png" alt="" class="wp-image-1413"/><figcaption>Example usage of the dump-tables attack</figcaption></figure>



<p>The <em>guid-known</em> attack returns Active Directory objects by their GUIDs. It&#8217;s capable of looking up GUIDs from a specified file.</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="750" height="465" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-15-27-39.png" alt="" class="wp-image-1414"/><figcaption>Example usage of the guid-known attack</figcaption></figure>



<p>The <em>dnt-lookup</em> option dumps all Active Directory records via requesting DNTs. It requests multiple DNTs at one time to speed up the attack and reduce traffic:</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="750" height="546" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-15-28-28.png" alt="" class="wp-image-1415"/><figcaption>Example usage of the dnt-lookup attack</figcaption></figure>



<p>The <em>dnt-lookup</em> attack supports the <em>-output-file</em> flag to write the output to a file, as the output could be larger than 1&nbsp;GB. The output file will include, but will not be limited to: user thumbnails, all description and info fields, user certificates, machine certificates (including machine NetBIOS names), subnets, and printer URLs.</p>



<h2 class="wp-block-heading">The Tool&#8217;s Internal Features</h2>



<p>The internal exchanger.py features:</p>



<ul class="wp-block-list"><li>Python2/Python3 compatibility</li><li>NTLM and Basic authentication, including Pass-The-Hash attack</li><li>TLS SNI support; HTTP Chunked Transfer Encoding support</li><li>Full Unicode compliance</li><li>RPC over HTTP v2 implementation tested on 20+ targets</li><li>RPC Fragmentation and RPC over HTTP v2 Flow control</li><li>MS-OXABREF implementation</li><li>MS-NSPI/MS-OXNSPI implementation</li><li>Complete OXNSPI/NSPI/MAPI fields database</li><li>Optimized NDR parser to work with large-sized RPC results</li></ul>



<p>The tool doesn&#8217;t support usage of the Autodiscover service, since during many penetration tests, this service was blocked or it was almost impossible to guess an email to get its output.</p>



<p>When Basic is forced or Microsoft TMG is covering the Exchange, the tool will not be able to get the RPC Server name from NTLMSSP, or this name will not work. If this happens, manually request the RPC Server name via Autodiscover or find it in HTTP headers, in sources of OWA login form, or in mail headers of emails from the server and set it in <em>-rpc-hostname</em> flag:</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="800" height="622" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/Screenshot-from-2020-07-23-15-29-22.png" alt="" class="wp-image-1416"/><figcaption>Examples of setting -rpc-hostname flag</figcaption></figure>



<p>If you are not sure in what hostname the tool is getting from NTLMSSP, use <em>-debug</em> flag to show this information and other useful debugging output.</p>



<h2 class="wp-block-heading">The Tool&#8217;s Limitations</h2>



<p>The tool was developed with support for any Exchange configuration and was tested in all such cases. However, there are two issues that can occur:  </p>



<h6 class="wp-block-heading"><strong>Issue with Multi-Tenant Configurations</strong></h6>



<p>When Exchange uses multiple Active Directory domains, the <em>dnt-lookup</em> attack may crash a Domain Controller.</p>



<p>Probably no one has ever used all the features of MS-NSPI, especially on Global Catalog Domain Controllers, and the ntdsai.dll library may throw some unhandled exceptions which result in lsass.exe termination and a reboot. We were unable to consistently reproduce this behavior.</p>



<p>The <em>list-tables</em>, <em>dump-tables</em> and <em>guid-known</em> attacks are safe and work fine with Exchange Multi-Tenant Configurations. </p>



<h6 class="wp-block-heading"><strong>Issue with Nginx</strong></h6>



<p>If MS Exchange is running behind an nginx server that was not specially configured for Exchange, the nginx will buffer data in RPC IN/OUT Channels and release them by 4k/8k size blocks. This will break our tool and MS Outlook as well.</p>



<p>We&#8217;d probably can develop a workaround for this by expanding RPC traffic with unnecessary data.</p>



<h2 class="wp-block-heading">Getting The Tool</h2>



<p>The exchanger.py tool, and rpcmap.py and rpcdump.py utilities are now avaliable in the official Impacket repository: <a rel="noreferrer noopener" href="https://github.com/SecureAuthCorp/impacket" target="_blank">https://github.com/SecureAuthCorp/impacket</a></p>



<p>Thanks <a href="https://twitter.com/agsolino">@agsolino</a> for merging!</p>



<p>I hope we&#8217;ll see an offline OAB unpacker and MS-OXCRPC and MAPI implementation with at least Ruler functions in exchanger.py in the future.</p>



<p>Feel free to comment on this article <a href="https://twitter.com/ptswarm/status/1286300883744165890" target="_blank" rel="noreferrer noopener">on our Twitter</a>. Follow <a rel="noreferrer noopener" href="https://twitter.com/ptswarm" target="_blank">@ptswarm</a> or <a href="https://twitter.com/_mohemiv" target="_blank" rel="noreferrer noopener">@_mohemiv</a> so you don’t miss our future research and other publications.</p>



<h2 class="wp-block-heading">Mitigations</h2>



<p>We recommend that all our clients use client certificates or a VPN to provide remote access to employees. No Exchange, or other domain services should be available directly from the Internet.</p>

		    </div><!-- .entry-content -->

	        <footer class="entry-footer my-5">
			                <span class="icon icon-tag"></span>
                <span class="tags-links">
                    <a href="https://swarm.ptsecurity.com/tag/active-directory/" rel="tag">Active Directory</a>, <a href="https://swarm.ptsecurity.com/tag/ms-exchange/" rel="tag">MS Exchange</a>, <a href="https://swarm.ptsecurity.com/tag/penetration-testing/" rel="tag">Penetration Testing</a>                </span>
				        </footer><!-- .entry-footer -->
	
</article><!-- #post-159 -->
                <div class="post-navigation">            <div class="nav-item">
                <div class="nav-caption">Previous</div>
            </div>
			<a href="https://swarm.ptsecurity.com/rce-in-f5-big-ip/" rel="prev">Remote Code Execution in F5 Big‑IP</a>            <div class="nav-item">
                <div class="nav-caption">Next</div>
            </div>
			<a href="https://swarm.ptsecurity.com/openfire-admin-console/" rel="next">Vulnerabilities in the Openfire Admin Console</a></div>
				        </div>
    </main>


<footer class="footer mt-auto py-3">
    <div class="container">
        <div class="row">
            <div class="col-md-3">
                <a href="https://twitter.com/ptswarm" class="icon icon-twitter"
                   target="_blank" rel="noopener nofollow">Twitter</a><br>
            </div>
            <div class="col-md-6 text-muted pt-3 pt-md-0 text-md-right">
                <small>
                    Copyright © <span class="copyright-date">2020 - 2025</span>
					PT SWARM<br>
                    <span class="site-description">Positive Technologies Offensive Team</span>
                </small>
            </div>
        </div>

    </div>
</footer>

<script type="speculationrules">
{"prefetch":[{"source":"document","where":{"and":[{"href_matches":"\/*"},{"not":{"href_matches":["\/wp-*.php","\/wp-admin\/*","\/wp-content\/uploads\/*","\/wp-content\/*","\/wp-content\/plugins\/*","\/wp-content\/themes\/swarm-2\/*","\/*\\?(.+)"]}},{"not":{"selector_matches":"a[rel~=\"nofollow\"]"}},{"not":{"selector_matches":".no-prefetch, .no-prefetch a"}}]},"eagerness":"conservative"}]}
</script>
<style id='core-block-supports-inline-css'>
.wp-container-core-columns-is-layout-9d6595d7{flex-wrap:nowrap;}
</style>
<script src="https://swarm.ptsecurity.com/wp-content/themes/swarm-2/js/bundle.js?ver=1.3.0" id="swarm-bundle-js"></script>

</body>
</html>
