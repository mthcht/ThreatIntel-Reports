<!doctype html>
<html lang="en-US" class="h-100">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="format-detection" content="telephone=no">

	<title>Kerberoasting without SPNs &#8211; PT SWARM</title>
<meta name='robots' content='max-image-preview:large' />
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	<link rel="alternate" type="application/rss+xml" title="PT SWARM &raquo; Feed" href="https://swarm.ptsecurity.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="PT SWARM &raquo; Comments Feed" href="https://swarm.ptsecurity.com/comments/feed/" />
<script>
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/16.0.1\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/16.0.1\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/swarm.ptsecurity.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.8.2"}};
/*! This file is auto-generated */
!function(s,n){var o,i,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),a=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===a[t]})}function u(e,t){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);for(var n=e.getImageData(16,16,1,1),a=0;a<n.data.length;a++)if(0!==n.data[a])return!1;return!0}function f(e,t,n,a){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\udde8\ud83c\uddf6","\ud83c\udde8\u200b\ud83c\uddf6")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!a(e,"\ud83e\udedf")}return!1}function g(e,t,n,a){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):s.createElement("canvas"),o=r.getContext("2d",{willReadFrequently:!0}),i=(o.textBaseline="top",o.font="600 32px Arial",{});return e.forEach(function(e){i[e]=t(o,e,n,a)}),i}function t(e){var t=s.createElement("script");t.src=e,t.defer=!0,s.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",i=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){s.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+g.toString()+"("+[JSON.stringify(i),f.toString(),p.toString(),u.toString()].join(",")+"));",a=new Blob([e],{type:"text/javascript"}),r=new Worker(URL.createObjectURL(a),{name:"wpTestEmojiSupports"});return void(r.onmessage=function(e){c(n=e.data),r.terminate(),t(n)})}catch(e){}c(n=g(i,f,p,u))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
</script>
<style id='wp-emoji-styles-inline-css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://swarm.ptsecurity.com/wp-includes/css/dist/block-library/style.min.css?ver=6.8.2' media='all' />
<style id='classic-theme-styles-inline-css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='co-authors-plus-coauthors-style-inline-css'>
.wp-block-co-authors-plus-coauthors.is-layout-flow [class*=wp-block-co-authors-plus]{display:inline}

</style>
<style id='co-authors-plus-avatar-style-inline-css'>
.wp-block-co-authors-plus-avatar :where(img){height:auto;max-width:100%;vertical-align:bottom}.wp-block-co-authors-plus-coauthors.is-layout-flow .wp-block-co-authors-plus-avatar :where(img){vertical-align:middle}.wp-block-co-authors-plus-avatar:is(.alignleft,.alignright){display:table}.wp-block-co-authors-plus-avatar.aligncenter{display:table;margin-inline:auto}

</style>
<style id='co-authors-plus-image-style-inline-css'>
.wp-block-co-authors-plus-image{margin-bottom:0}.wp-block-co-authors-plus-image :where(img){height:auto;max-width:100%;vertical-align:bottom}.wp-block-co-authors-plus-coauthors.is-layout-flow .wp-block-co-authors-plus-image :where(img){vertical-align:middle}.wp-block-co-authors-plus-image:is(.alignfull,.alignwide) :where(img){width:100%}.wp-block-co-authors-plus-image:is(.alignleft,.alignright){display:table}.wp-block-co-authors-plus-image.aligncenter{display:table;margin-inline:auto}

</style>
<style id='global-styles-inline-css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='swarm-style-css' href='https://swarm.ptsecurity.com/wp-content/themes/swarm-2/style.css?ver=1.3.0' media='all' />
<script src="https://swarm.ptsecurity.com/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script src="https://swarm.ptsecurity.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<link rel="canonical" href="https://swarm.ptsecurity.com/kerberoasting-without-spns/" />
<link rel='shortlink' href='https://swarm.ptsecurity.com/?p=1534' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://swarm.ptsecurity.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fswarm.ptsecurity.com%2Fkerberoasting-without-spns%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://swarm.ptsecurity.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fswarm.ptsecurity.com%2Fkerberoasting-without-spns%2F&#038;format=xml" />
<meta name="twitter:card" content="summary_large_image"/>
<meta property="og:title" content="Performing Kerberoasting without SPNs" />
<meta property="og:description" content="You don&#039;t need SPNs in the Kerberoasting attack" />
<meta property="og:site_name" content="PT SWARM" />
<meta property="og:type" content="article" />
<meta property="og:url" content="https://swarm.ptsecurity.com/kerberoasting-without-spns/" />
<meta property="og:image" content="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-03-07-39-26-2.png" />
<meta property="article:author" content="Arseniy Sharoglazov" />
<meta name="twitter:creator" content="@_mohemiv"/>
<link rel="icon" href="https://swarm.ptsecurity.com/wp-content/uploads/2020/06/favicon-1.png" sizes="32x32" />
<link rel="icon" href="https://swarm.ptsecurity.com/wp-content/uploads/2020/06/favicon-1.png" sizes="192x192" />
<link rel="apple-touch-icon" href="https://swarm.ptsecurity.com/wp-content/uploads/2020/06/favicon-1.png" />
<meta name="msapplication-TileImage" content="https://swarm.ptsecurity.com/wp-content/uploads/2020/06/favicon-1.png" />
		<style id="wp-custom-css">
			img {
    image-rendering: -webkit-optimize-contrast;
}		</style>
		
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-171997764-1"></script>
    <script>
        window.dataLayer = window.dataLayer || [];

        function gtag() {
            dataLayer.push(arguments);
        }

        gtag('js', new Date());
        gtag('config', 'UA-171997764-1');
    </script>

    <script type="text/javascript">
        (function (m, e, t, r, i, k, a) {
            m[i] = m[i] || function () {
                (m[i].a = m[i].a || []).push(arguments)
            };
            m[i].l = 1 * new Date();
            k = e.createElement(t), a = e.getElementsByTagName(t)[0], k.async = 1, k.src = r, a.parentNode.insertBefore(k, a)
        })
        (window, document, "script", "https://cdn.jsdelivr.net/npm/yandex-metrica-watch/tag.js", "ym");
        ym(66262255, "init", {
            clickmap: true,
            trackLinks: true,
            accurateTrackBounce: true
        });
    </script>
</head>

<body class="wp-singular post-template-default single single-post postid-1534 single-format-standard wp-theme-swarm-2 d-flex flex-column h-100">
<header>
    <div class="container px-0">

        <nav class="navbar navbar-expand navbar-light bg-white">
            <a class="navbar-brand my-md-0 font-weight-bold"
               href="https://swarm.ptsecurity.com/"
               rel="home">PT SWARM</a>
			<ul id="primary-menu" class="navbar-nav mr-auto"><li itemscope="itemscope" itemtype="https://www.schema.org/SiteNavigationElement" id="menu-item-56" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-56 nav-item"><a title="Home" href="/" class="nav-link">Home</a></li>
<li itemscope="itemscope" itemtype="https://www.schema.org/SiteNavigationElement" id="menu-item-57" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-57 nav-item"><a title="About" href="https://swarm.ptsecurity.com/about/" class="nav-link">About</a></li>
</ul>            <a href="https://twitter.com/ptswarm" class="btn-twitter"
               target="_blank" rel="noopener nofollow" title="Twitter"
               onclick="ym(66262255,'reachGoal','test'); return true;">
                <i></i><span class="label">Follow @ptswarm</span>
            </a>

            <!--
            <form class="form-inline my-2 my-lg-0 d-none d-md-flex mr-3" rel="search" action="
			https://swarm.ptsecurity.com/">
                <input type="checkbox" id="SearchControl">
                <input class="form-control mr-sm-2" name="s" type="text" placeholder="Search"
                       value="">
                <label class="text-muted" for="SearchControl" aria-label="Search">
                    <div class="icon-search">
                        <svg width="20" height="20" viewBox="0 0 16 16" fill="currentColor"
                             xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd"
                                  d="M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z"/>
                            <path fill-rule="evenodd"
                                  d="M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z"/>
                        </svg>
                    </div>
                    <div class="icon-close">&times;</div>
                </label>
            </form>
            -->

        </nav>
    </div>
</header>

    <main role="main" class="flex-shrink-0">
        <div class="container p-3 single">
			
<article id="post-1534" class="mt-4 mb-5 post-1534 post type-post status-publish format-standard hentry category-uncategorized tag-active-directory tag-kerberos tag-penetration-testing">
    <header class="entry-header">
		<h1 class="entry-title">Kerberoasting without SPNs</h1>            <div class="entry-meta">
				Written by <a href="https://swarm.ptsecurity.com/author/arseniy-sharoglazov/" title="Posts by Arseniy Sharoglazov" class="author url fn" rel="author">Arseniy Sharoglazov</a><span class="posted-on"> on <time class="entry-date published" datetime="2020-08-19T14:26:44+00:00">August 19, 2020</time></span>            </div><!-- .entry-meta -->
		    </header><!-- .entry-header -->

    <div class="entry-content">

		
		
            <div class="authors-block">
				<div class="widget widget_co_authors_plus"><h2 class="widgettitle">Author</h2>            <div class="mb-4">
                <div class="avatar-wrapper">
					<img width="100" height="100" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/07/foto_arseniy-150x150.jpg" class="avatar avatar-100 photo wp-post-image" alt="" decoding="async" />                </div>
                <div>
                    <div class="display-name">
						<a href="https://swarm.ptsecurity.com/author/arseniy-sharoglazov/" title="Posts by Arseniy Sharoglazov" rel="author">Arseniy Sharoglazov</a>                    </div>
                    <div class="description">
                        <div class="mb-2">
							Penetration Testing Expert                        </div>
						                            <div class="mb-2">
								<a href="https://twitter.com/_mohemiv" title="Visit Arseniy Sharoglazov&#8217;s Twitter" class="icon icon-twitter" rel="external noopener" target="_blank">_mohemiv</a>                            </div>
						                    </div>
                </div>
            </div>
		</div>            </div>

		
		
<p><strong>Service principal names&nbsp;(SPNs)</strong>&nbsp;are records in an Active Directory (AD) database that show which services are registered to which accounts:</p>



<figure class="wp-block-image size-full no-decoration"><img fetchpriority="high" decoding="async" width="685" height="475" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-03-07-39-26-1.png" alt="" class="wp-image-1565"/><figcaption>An example of an account that has SPNs</figcaption></figure>



<p>If an account has an SPN or multiple SPNs, you can request a service ticket to one of these SPNs via Kerberos, and since a part of the service ticket will be encrypted with the key derived from the account&#8217;s password, you will be able to brute force this password offline. This is how Kerberoasting works.</p>



<p>There is a way to perform the Kerberoasting attack without knowing SPNs of the target services. I&#8217;ll show how it could be done, how it works, and when it could be useful.</p>



<span id="more-1534"></span>



<h2 class="wp-block-heading">Kerberos Basics</h2>



<p>Kerberos is an open source binary protocol based on the ASN.1 format. The core of Kerberos is key distribution center (KDC) services, which use 88/tcp and 88/udp ports. In the Active Directory environment they are installed on each of the domain controllers.</p>



<p>Let&#8217;s run the GetUserSPNs.py tool from Impacket to demonstrate how Kerberoasting works:</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="841" height="540" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-19-12-51-41.png" alt="" class="wp-image-1597"/><figcaption>Performing the Kerberoasting attack in a lab environment</figcaption></figure>



<p>First, the tool connects to LDAP, and finds users which have SPNs and which are not machine accounts. Every machine account in the AD has a bunch of SPNs, but their service tickets are not brute-forceable because machine accounts have passwords that are 240 bytes long.</p>



<p>Then, the tool connects to a KDC, and for each of the discovered accounts gets a service ticket using one of its SPNs. In our example only one account was discovered, and the tool chosed &#8220;MSSQLSvc/sp-sql:1433&#8221; SPN to request a ticket.</p>



<p>It&#8217;s not important whether chosen services are functioning; the existence of an SPN in the AD database is sufficient for the attack.</p>



<p>Here is the traffic dump of this GetUserSPNs.py launch, so now we can examine all the described stages in detail:</p>



<figure class="wp-block-image size-full"><img decoding="async" width="839" height="271" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-03-07-27-05.png" alt="" class="wp-image-1585"/><figcaption>Traffic dump of the Kerberoasting attack</figcaption></figure>



<h2 class="wp-block-heading">How clients get TGTs</h2>



<p>Each client must authenticate to the KDC and obtain a ticket-granting ticket (TGT), which will allow them to ask for any number of service tickets going forward.</p>



<p>This mechanism is used to reduce the number of needed authentications, and there is no way to bypass it and request a service ticket without having a TGT.</p>



<h6 class="wp-block-heading"><strong>Unauthenticated AS-REQ / Preauth Request</strong><strong></strong></h6>



<p>AS-REQ packets serve to ask for TGTs.</p>



<p>In AS-REQ clients specify the special &#8220;krbtgt/DomainFQDN&#8221; SPN in the sname field, and the principal name of the account to which the TGT is being requested for in the cname field:</p>



<figure class="wp-block-image size-full"><img decoding="async" width="823" height="529" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-17-20-30-59.png" alt="" class="wp-image-1603"/><figcaption>Content of the unauthenticated AS-REQ packet (#7)</figcaption></figure>



<p>The first AS-REQ packet is sent without authentication data to maintain backwards compatibility. It will succeed only if the DONT_REQ_PREAUTH flag in the Active Directory for the target account is set.</p>



<p>The response for AS-REQs should contain a structure that is encrypted and signed with the key derived from the client account&#8217;s password, so if AS-REQs worked without any authentication, anyone would be able to brute force anyone else&#8217;s password offline.</p>



<p>This is called an ASREPRoasting attack, and in Impacket it can be performed by the GetNPUsers.py script:</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="823" height="232" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-08-18-53-41.png" alt="" class="wp-image-1613"/><figcaption>Performing an ASREPRoasting attack using GetNPUsers.py from Impacket</figcaption></figure>



<p>One application of ASREPRoasting is Targeted Kerberoasting. It relies on intentionally setting the DONT_REQ_PREAUTH flag for accounts you control in the AD, and getting their <em>$krb5asrep$</em>&nbsp;hashes.</p>



<p>Since the &#8220;Administrator&#8221; account we used doesn&#8217;t have the DONT_REQ_PREAUTH flag set, the KDC sent a KRB-ERR packet to the client with the KRB_PREAUTH_REQURED error. This packet is called Preauth Request.</p>



<figure class="wp-block-image size-full w-full"><img decoding="async" width="624" height="322" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-18-19-49-37.png" alt="" class="wp-image-1618"/><figcaption>Content of the KRB-ERR packet (#8)</figcaption></figure>



<p>If the &#8220;Administrator&#8221; account didn&#8217;t exist, we would get the KDC_ERR_C_PRINCIPAL_UNKNOWN error. This is the feature that is used in Kerberos User Enumeration attacks.</p>



<h6 class="wp-block-heading"><strong>Authenticated AS-REQ</strong><strong></strong></h6>



<p>Let&#8217;s examine the next AS-REQ packet:</p>



<figure class="wp-block-image size-full w-full"><img decoding="async" width="823" height="601" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-19-13-42-45.png" alt="" class="wp-image-1626"/><figcaption>Content of the authenticated AS-REQ packet (#9)</figcaption></figure>



<p>The next AS-REQ is basically the same request as the first one, but it contains data which could authorize the client. This data is a special structure that contains the current timestamp, and this structure is encrypted and signed with the key derived from the account’s password.</p>



<p>Keys derived from account’s passwords are known as Kerberos Keys, and they&#8217;re calculated differently depending on the utilized encryption algorithm:</p>



<ul class="wp-block-list"><li>AES-128 and AES-256: the key is calculated from the PBKDF2 hash of the password</li><li>RC4: the key is calculated from the NT hash of the password (always used with the Pass-The-Hash attack)</li><li>DES: the key is calculated directly from the password</li></ul>



<p>Using a client principal name in the request, the KDC tries to look up the client&#8217;s account in the AD database, extract its precalculated Kerberos keys, and verify the client&#8217;s identity.</p>



<h6 class="wp-block-heading"><strong>AS-REP</strong></h6>



<p>After the KDC verifies the client&#8217;s identity, it sends an AS-REP packet that contains data the client can construct a TGT memory object from:</p>



<figure class="wp-block-image size-full w-full"><img decoding="async" width="823" height="496" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-17-21-07-28.png" alt="" class="wp-image-1636"/><figcaption>Content of the AS-REP packet (#10)</figcaption></figure>



<p>The TGT itself is encrypted and signed with the kerberos key of the krbtgt account, so it&#8217;s intended to be unpacked only on KDC sides. It contains a session key, metadata, and the client&#8217;s Privileged Attribute Certificate (PAC). A PAC includes the client&#8217;s name, security identifier (SID), and groups.</p>



<p>In order for a client to use a TGT, it needs to construct a TGT memory object, which will contain the TGT itself, its session key, and all the metadata. Clients extract the session key from the part of an AS-REP that is encrypted by their keys.</p>



<h2 class="wp-block-heading">How clients get Service Tickets</h2>



<p>After a client constructs a TGT memory object, it can ask for any number of service tickets using TGS-REQ packets. The KDC will respond with TGS-REP packets when these requests are accepted.</p>



<h6 class="wp-block-heading"><strong>TGS-REQ</strong><strong></strong></h6>



<p>A TGS-REQ contains a service principal name that the ticket is requesting for, a TGT, and a structure encrypted with the TGT session key and containing the current timestamp:</p>



<figure class="wp-block-image size-full w-full"><img decoding="async" width="823" height="762" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-08-16-03-09.png" alt="" class="wp-image-1652"/><figcaption>Content of the TGS-REQ packet (#11)</figcaption></figure>



<p>When the KDC receives a TGS-REQ, it decrypts the TGT, extracts the session key, and checks the client&#8217;s identity.</p>



<h6 class="wp-block-heading"><strong>TGS-REP</strong></h6>



<p>TGS-REP packets are used to transfer service tickets to KDC clients.</p>



<p>After the KDC verifies the client&#8217;s identity, the following steps are happening:</p>



<ol class="wp-block-list"><li>The KDC checks if the TGT is still valid according to the decrypted timestamps;</li><li>If more than 15 minutes have passed since the TGT was issued, the KDC recalculates the decrypted PAC, and check if the client has not been disabled in the Active Directory;</li><li>The KDC looks up an account that the sent service principal name is resolving to;</li><li>The KDC extracts the kerberos key of the discovered account;</li><li>The KDC constructs a service ticket, which consists of the PAC and the service ticket session key; the service ticket is encrypted and signed with the service account&#8217;s kerberos key;</li><li>The KDC creates a structure with the service ticket session key and encrypts and signs it with the TGT session key.</li></ol>



<p>Both the service ticket and the structure with the service ticket session key are included in the TGS-REP packet:</p>



<figure class="wp-block-image size-full w-full"><img decoding="async" width="823" height="487" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-08-16-45-37.png" alt="" class="wp-image-1672"/><figcaption>Content of the TGS-REP packet (#12)</figcaption></figure>



<p>The encrypted part of the service ticket is the part that is brute forced in the Kerberoasting attack.</p>



<h2 class="wp-block-heading">Exploring formats of Principal Names</h2>



<p>Let&#8217;s examine principal names in the AS-REQ packet we gathered before:</p>



<figure class="wp-block-image size-full w-full"><img decoding="async" width="573" height="416" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-08-14-34-00-2.png" alt="" class="wp-image-1682"/><figcaption>An example of principal names in Kerberos traffic</figcaption></figure>



<p>Client principal names are passed in cname fields, and service principal names are sent in sname fields. All principal names are accompanied by an integer called the principal name type.</p>



<p>Principal names are usually split by the &#8220;/&#8221; character into a sequence of strings. For example, the principal name <em>krbtgt/CONTOSO</em>.COM in Kerberos traffic consists of two strings: <em>krbtgt</em> and <em>CONTOSO.COM</em>.</p>



<p>According to <a href="https://tools.ietf.org/html/rfc4120">RFC 4120</a>, cname and sname fields have different purposes, but the structure of these fields is identical:</p>



<pre class="wp-block-code"><code>KDC-REQ-BODY    ::= SEQUENCE {
 kdc-options  &#91;0] KDCOptions,
 cname        &#91;1] PrincipalName OPTIONAL
 realm        &#91;2] Realm
 sname        &#91;3] PrincipalName OPTIONAL,
 ...
}

PrincipalName   ::= SEQUENCE {
 name-type    &#91;0] Int32,
 name-string  &#91;1] SEQUENCE OF KerberosString
}

KerberosString  ::= GeneralString (IA5String)</code></pre>



<p>The identical structure of cname and sname fields caught my attention,  and I decided to test different options of their usage in the Kerberos protocol.</p>



<h2 class="wp-block-heading">The Kerberos Secret</h2>



<p>It was discovered that Windows KDC services treat cname and sname fields by the same function set, and it&#8217;s irrelevant which format of a principal name you choose at any given time.</p>



<h4 class="has-text-align-center wp-block-heading">All Principal Names that resolve to the same account are equal</h4>



<p>If you have an SPN value in a Kerberos packet, you can substitute it to the SAM Account Name (SAN) value of the account the SPN belongs, and nothing will break:</p>



<figure class="wp-block-image size-full w-full"><img decoding="async" width="823" height="537" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-08-21-33-05.png" alt="" class="wp-image-1693"/><figcaption>An example of a TGT-REQ packet with a SAN</figcaption></figure>



<p>This way you can perform the Kerberoasting attack without knowing any SPN of the target account. But the existence of at least one SPN for the target account will continue to be needed.</p>



<h2 class="wp-block-heading" id="block-1bf9d0fe-9250-4754-84b6-cf7e878b3df5">Bonus: Revisiting S4U and AnySPN attacks</h2>



<p>I examined Impacket source code, and I found two interesting places which are closely related to the discovered technique, but not related to Kerberoasting.</p>



<h6 class="wp-block-heading"><strong>S4U2Self and S4U2Proxy Requests with SAM Account Names</strong></h6>



<p>Let&#8217;s try to abuse Resource-Based Constrained Delegation using getST.py form Impacket:</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="823" height="491" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/11/Screenshot-from-2020-08-10-22-12-40.png" alt="" class="wp-image-2245"/><figcaption>An example of abusing Resource-Based Constrained Delegation using Impacket</figcaption></figure>



<p>Here we have the &#8220;user01&#8221;&nbsp;account that has the &#8220;http/test&#8221;&nbsp;SPN and privileges to delegate access to any SPN of the &#8220;SRV02$&#8221;&nbsp;account.</p>



<p>According to the specification (<a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/36a72c74-7995-4cba-a2d2-6c9471a2a6af" target="_blank">S4USelf KRB_TGT_REQ</a>, <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/ddb2cafd-1f01-4834-b52a-d4a5b34cd960" target="_blank" rel="noreferrer noopener">S4U2Proxy KRB_TGS_REQ</a>), the user01&#8217;s service should use its SPN in S4U2Self and S4U2Proxy requests. However, you can see that Impacket uses SANs in such requests:</p>



<figure class="wp-block-image size-full"><img decoding="async" width="823" height="602" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/11/Screenshot-from-2020-08-10-22-56-24.png" alt="" class="wp-image-2251"/><figcaption>Traffic Dump of Impacket&#8217;s S4U2Self request</figcaption></figure>



<p>These requests don&#8217;t comply with the specification, but succeed because Windows KDCs are insensitive to given principal name formats.</p>



<h6 class="wp-block-heading"><strong>AnySPN Attack</strong></h6>



<p>Impacket implements a thing called AnySPN attack. This attack tries to modify the SPN in the given service ticket file, when it&#8217;s different from the target service SPN:</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="821" height="384" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/11/Screenshot-from-2020-08-10-23-25-19-1.png" alt="" class="wp-image-2279"/><figcaption>Performing the AnySPN attack using Impacket</figcaption></figure>



<p>Alberto Solino wrote an excellent article <a href="https://www.secureauth.com/blog/kerberos-delegation-spns-and-more/" target="_blank" rel="noreferrer noopener">Kerberos Delegation, SPNs and More</a>&nbsp;explaining how it works.</p>



<p>Here is the main section from this article:</p>



<figure class="wp-block-image size-full"><img decoding="async" width="814" height="400" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/11/Screenshot-from-2020-08-10-23-35-43.png" alt="" class="wp-image-2287"/><figcaption>A fragment of Alberto Solino&#8217;s article</figcaption></figure>



<p>Briefly, Benjamin Delpy, Ben Campbell and Alberto Solino noticed that a service ticket for Service A on Host A might work for Service B on Host A.</p>



<p>Actually, if we decrypt any service ticket&#8217;s encrypted part, we will see that it doesn&#8217;t contain any SPNs:</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="823" height="512" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/11/Screenshot-from-2020-08-08-17-13-42.png" alt="" class="wp-image-2300"/><figcaption>Decrypting the service ticket&#8217;s encrypted part using the service account&#8217;s password</figcaption></figure>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="823" height="608" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/11/Screenshot-from-2020-08-08-17-16-11.png" alt="" class="wp-image-2301"/><figcaption>Printing the information contained in the service ticket&#8217;s encrypted part</figcaption></figure>



<p>The service ticket&#8217;s encrypted part contains only the ticket&#8217;s session key, the metadata, and the authenticating user&#8217;s PAC. The service ticket&#8217;s SPN is contained in the unencrypted and unsigned part of the protocol, and it may simply not be taken into account by the client.</p>



<h4 class="has-text-align-center wp-block-heading">A Service Ticket is valid for all services run by its service account</h4>



<p>So, if you wondered which SPN a service ticket is issued to when it&#8217;s requested without an SPN, now you know that the service ticket just don&#8217;t contain any.</p>



<h2 class="wp-block-heading">Bonus: Playing with Principal Name Types</h2>



<p>The structure of cname and sname fields contain an integer called <strong>Principal Name Type</strong>. The RFC 4120 specification defines 9 possible values for it:</p>



<figure class="wp-block-image size-full w-full"><img decoding="async" width="757" height="556" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-09-15-25-23.png" alt="" class="wp-image-1705"/><figcaption>An excerpt from RFC 4120: <a href="https://tools.ietf.org/html/rfc4120#page-99" target="_blank" rel="noreferrer noopener">6.2. Principal Names</a></figcaption></figure>



<p>I&#8217;ve done some research, and I&#8217;ve created a table with the actual Principal Name Types values and their meanings in Windows:</p>



<figure class="wp-block-table w-normal"><table><tbody><tr><td><strong>Name Type</strong></td><td><strong>Value</strong></td><td><strong>Meaning</strong></td></tr><tr><td>NT-UNKNOWN</td><td>0</td><td>Represents SPN and SAN formats</td></tr><tr><td>NT-PRINCIPAL</td><td>1</td><td>Equal to NT-UNKNOWN</td></tr><tr><td>NT-SRV-INST</td><td>2</td><td>Equal to NT-UNKNOWN</td></tr><tr><td>NT-SRV-HST</td><td>3</td><td>Equal to NT-UNKNOWN</td></tr><tr><td>NT-SRV-XHST</td><td>4</td><td>Represents SPN format</td></tr><tr><td>NT-UID</td><td>5</td><td>Not supported</td></tr><tr><td>NT-X500-PRINCIPAL</td><td>6</td><td>Represents DN format</td></tr><tr><td>NT-SMTP-NAME</td><td>7</td><td>Equal to NT-UNKNOWN</td></tr><tr><td>NT-ENTERPRISE</td><td>10</td><td>Represents UPN, SAN and multiple DomainName+SAN formats</td></tr><tr><td>NT-MS-PRINCIPAL</td><td>-128</td><td>Represents SAN and multiple DomainName+SAN formats</td></tr><tr><td>NT-MS-PRINCIPAL-AND-ID</td><td>-129</td><td>Equal to NT-MS-PRINCIPAL</td></tr><tr><td>NT-ENT-PRINCIPAL-AND-ID</td><td>-130</td><td>Equal to NT-X500-PRINCIPAL</td></tr><tr><td></td><td>*</td><td>Equal to NT-UNKNOWN</td></tr></tbody></table></figure>



<p>I found NT-ENTERPRISE type more valuable than the commonly used NT-UNKNOWN one. It supports the following bunch of name formats:</p>



<ul class="wp-block-list"><li>userPrincipalName</li><li>sAMAccountName</li><li>sAMAccountName@DomainNetBIOSName</li><li>sAMAccountName@DomainFQDN</li><li>DomainNetBIOSName\sAMAccountName</li><li>DomainFQDN\sAMAccountName</li></ul>



<p>Note that if you use the <em>SRV01</em>&nbsp;string as a sAMAccountName, and the <em>SRV01</em>&nbsp;account does not exist, and the <em>SRV01$</em>&nbsp;account exists, this name will be treated as a principal name of the <em>SRV01$</em>&nbsp;account.</p>



<p>Other interesting Principal Name Types is NT-X500-PRINCIPAL. It supports DNs in the <a href="https://tools.ietf.org/html/rfc1779" data-type="URL" data-id="https://tools.ietf.org/html/rfc1779">RFC 1779</a> structure. Here are three examples of how the same Active Directory object can be written in this structure:</p>



<pre class="wp-block-code text"><code>CN=SQL ADMIN,OU=LAB Users,DC=CONTOSO,DC=COM
CN="SQL ADMIN";OU="LAB Users";DC="CONTOSO";DC="COM"
OID.2.5.4.3=SQL ADMIN,OU=LAB Users,DC=CONTOSO,DC=COM</code></pre>



<p>Unfortunately, the NT-X500-PRINCIPAL type is not supported across forest trusts.</p>



<h2 class="wp-block-heading">The Technique&#8217;s Application in Kerberoasting</h2>



<p>I&#8217;ve added the usage of NT-ENTERPRISE and NT-MS-PRINCIPAL types to Impacket&#8217;s GetUserSPNs.py. Let&#8217;s see three common scenarios when these changes are necessary for  Kerberoasting to succeed.</p>



<h6 class="wp-block-heading"><strong>Kerberoasting with no access to LDAP</strong></h6>



<p>You might find yourself in a situation where you have access to a KDC service, you have an account list obtained (for example, via a RID cycling attack), and you don&#8217;t have SPNs.</p>



<p>Since you no longer need SPNs, you can request service tickets just by a user list using the new <em>-userfile</em> option:</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="823" height="371" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-09-23-28-55.png" alt="" class="wp-image-1744"/><figcaption>Performing Kerberoasting by a user list using the new GetUserSPNs.py</figcaption></figure>



<p>The <em>-userfile</em> option utilizes the NT-ENTERPRISE type to look up accountd from the specified file.</p>



<h6 class="wp-block-heading"><strong>Kerberoasting accounts with incorrect SPNs</strong></h6>



<p>There are two types of SPNs for which KDCs prohibit returning tickets:</p>



<ul class="wp-block-list"><li>Wrong syntax SPNs</li><li>Duplicate SPNs, i.e. when the same SPN values are assigned to multiple accounts</li></ul>



<p>If a KDC finds that one of these is the case, it returns the KDC_ERR_S_PRINCIPAL_UNKNOWN error as if the passed SPN didn&#8217;t exist:</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="823" height="188" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-09-22-08-16.png" alt="" class="wp-image-1736"/><figcaption>Kerberoasting an account with an incorrect SPN</figcaption></figure>



<p>The new GetUserSPNs.py wraps the account list from LDAP to NT-MS-PRINCIPAL type and doesn&#8217;t utilize SPNs, so you will get the hashes even from misconstrued SPNs:</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="823" height="370" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-10-20-32-48.png" alt="" class="wp-image-1740"/><figcaption>Kerberoasting an account with an incorrect SPN using the new GetUserSPNs.py</figcaption></figure>



<p>Internally the &#8220;DomainFQDN\sAMAccountName&#8221; format is utilized, and the &#8220;\&#8221; character is changed to &#8220;/&#8221; in the output to comply the username with the Impacket format and prevent its escaping in other tools.</p>



<h6 class="wp-block-heading"><strong>Kerberoasting accounts with NetBIOS Name SPNs via Forest Trusts</strong></h6>



<p>When you ask for a service ticket for an SPN from another domain, and this SPN has a hostname in a NetBIOS name format, your KDC won&#8217;t be able to find the target service:</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="824" height="209" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-09-22-22-13-2.png" alt="" class="wp-image-1760"/><figcaption>Kerberoasting an account with a NetBIOS Name SPN via a Forest Trust</figcaption></figure>



<p>With the new GetUserSPNs.py file you will never get the KDC_ERR_S_PRINCIPAL_UNKNOWN for such services:</p>



<figure class="wp-block-image size-full no-decoration"><img decoding="async" width="823" height="423" src="https://swarm.ptsecurity.com/wp-content/uploads/2020/08/Screenshot-from-2020-08-10-20-53-44.png" alt="" class="wp-image-1762"/><figcaption>Kerberoasting an account with a NetBIOS Name SPN via a Forest Trust using the new GetUserSPNs.py</figcaption></figure>



<h2 class="wp-block-heading">Afterwords</h2>



<p>I hope you found the information about requesting service tickets without specifying SPNs useful,  and the description of the Kerberos protocol and the &#8220;Bonus: Revisiting S4U and AnySPN attacks&#8221; section helpful as well.</p>



<p>Below is the list of tools which currently support described in the article techniques.</p>



<h6 class="wp-block-heading"><strong>Impacket</strong></h6>



<p>The updated GetUserSPNs.py script is available in the official Impacket repository: <a rel="noreferrer noopener" href="https://github.com/SecureAuthCorp/impacket" target="_blank">https://github.com/SecureAuthCorp/impacket</a></p>



<p>Thanks <a href="https://twitter.com/agsolino">@agsolino</a> for merging!</p>



<p><strong>Rubeus</strong></p>



<p>Charlie Clark (<a rel="noreferrer noopener" href="https://twitter.com/exploitph" target="_blank">@exploitph</a>) added the support of NT-ENTERPRISE principals to Rubeus: <a rel="noreferrer noopener" href="https://github.com/GhostPack/Rubeus/pull/60" target="_blank">PR#60</a></p>

		    </div><!-- .entry-content -->

	        <footer class="entry-footer my-5">
			                <span class="icon icon-tag"></span>
                <span class="tags-links">
                    <a href="https://swarm.ptsecurity.com/tag/active-directory/" rel="tag">Active Directory</a>, <a href="https://swarm.ptsecurity.com/tag/kerberos/" rel="tag">Kerberos</a>, <a href="https://swarm.ptsecurity.com/tag/penetration-testing/" rel="tag">Penetration Testing</a>                </span>
				        </footer><!-- .entry-footer -->
	
</article><!-- #post-1534 -->
                <div class="post-navigation">            <div class="nav-item">
                <div class="nav-caption">Previous</div>
            </div>
			<a href="https://swarm.ptsecurity.com/openfire-admin-console/" rel="prev">Vulnerabilities in the Openfire Admin Console</a>            <div class="nav-item">
                <div class="nav-caption">Next</div>
            </div>
			<a href="https://swarm.ptsecurity.com/grafana-6-4-3-arbitrary-file-read/" rel="next">Grafana 6.4.3 Arbitrary File Read</a></div>
				        </div>
    </main>


<footer class="footer mt-auto py-3">
    <div class="container">
        <div class="row">
            <div class="col-md-3">
                <a href="https://twitter.com/ptswarm" class="icon icon-twitter"
                   target="_blank" rel="noopener nofollow">Twitter</a><br>
            </div>
            <div class="col-md-6 text-muted pt-3 pt-md-0 text-md-right">
                <small>
                    Copyright © <span class="copyright-date">2020 - 2025</span>
					PT SWARM<br>
                    <span class="site-description">Positive Technologies Offensive Team</span>
                </small>
            </div>
        </div>

    </div>
</footer>

<script type="speculationrules">
{"prefetch":[{"source":"document","where":{"and":[{"href_matches":"\/*"},{"not":{"href_matches":["\/wp-*.php","\/wp-admin\/*","\/wp-content\/uploads\/*","\/wp-content\/*","\/wp-content\/plugins\/*","\/wp-content\/themes\/swarm-2\/*","\/*\\?(.+)"]}},{"not":{"selector_matches":"a[rel~=\"nofollow\"]"}},{"not":{"selector_matches":".no-prefetch, .no-prefetch a"}}]},"eagerness":"conservative"}]}
</script>
<script src="https://swarm.ptsecurity.com/wp-content/themes/swarm-2/js/bundle.js?ver=1.3.0" id="swarm-bundle-js"></script>

</body>
</html>
