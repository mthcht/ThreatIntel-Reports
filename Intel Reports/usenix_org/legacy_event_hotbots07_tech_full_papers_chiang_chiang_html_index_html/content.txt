<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>A Case Study of the Rustock Rootkit and Spam Bot</TITLE>
<META NAME="description" CONTENT="A Case Study of the Rustock Rootkit and Spam Bot">
<META NAME="keywords" CONTENT="rustock_hotbots07_paper">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="rustock_hotbots07_paper.css">

</HEAD>

<a href="https://www.usenix.org"><img src="/graphics/new_usenix.jpg" width="288" height="232" alt="Check out the new USENIX Web site." align="right"></a>


<BODY >
<P>

<P>
<H1 ALIGN="CENTER">A Case Study of the Rustock Rootkit and Spam Bot</H1><DIV>

<P ALIGN="CENTER"><STRONG>Ken Chiang, Levi Lloyd<BR>
Sandia National Laboratories<A NAME="tex2html1"
  HREF="#foot8"><SUP><IMG  ALIGN="BOTTOM" BORDER="1" ALT="[*]"
 SRC="footnote.png"></SUP></A><BR>
Livermore, CA 94550<BR>
<TT><A NAME="tex2html2" HREF="/cdn-cgi/l/email-protection#b8d3dbd0d1d9d6dff8cbd9d6dcd1d996dfd7ce"><span class="__cf_email__" data-cfemail="1378707b7a727d745360727d777a723d747c65">[email&#160;protected]</span></A> <A NAME="tex2html2b" HREF="/cdn-cgi/l/email-protection#2e42424241574a6e5d4f404a474f00494158"><span class="__cf_email__" data-cfemail="dcb0b0b0b3a5b89cafbdb2b8b5bdf2bbb3aa">[email&#160;protected]</span></A></TT>
</STRONG></P>
</DIV>

<P>

<H3>Abstract:</H3>
<DIV>
In this paper we present a case study of the steps leading up to the extraction of the spam bot payload found within a backdoor rootkit known as Backdoor.Rustock.B or Spam-Mailbot.c.  Following the extraction of the spam module we focus our analysis on the steps necessary to decrypt the communications between the command and control server and infected hosts. Part of the discussion involves a method to extract the encryption key from within the malware binary and use that to decrypt the communications.  The result is a better understanding of an advanced botnet communications scheme.
</DIV>
<P>

<P>

<H1><A NAME="SECTION00010000000000000000">
Introduction</A>
</H1>
The threat produced by botnets has escalated in recent years.  Not only has the number of infected machines grown to catastrophic levels, but the sophistication level of the tools used to infect and control vulnerable systems has also increased.  Traditionally, botnets have used the Internet Relay Chat (IRC) protocol for command and control&nbsp;[<A
 HREF="index.html#kye1">1</A>,<A
 HREF="index.html#barford1">2</A>,<A
 HREF="index.html#ianelli1">3</A>].  This method is losing popularity among bot creators and herders since it is generally easy to detect, monitor, and block IRC traffic.  New methods for hiding the command and control communications include HTTP based communications, encryption, and peer-to-peer network models&nbsp;[<A
 HREF="index.html#ianelli1">3</A>,<A
 HREF="index.html#phatbot1">4</A>,<A
 HREF="index.html#sinit1">5</A>,<A
 HREF="index.html#lemos1">6</A>].

<P>
In this analysis we examine a backdoor rootkit known as Backdoor.Rustock.B&nbsp;[<A
 HREF="index.html#symantec1">7</A>] or Spam-Mailbot.c&nbsp;[<A
 HREF="index.html#mcafee1">8</A>] but hereafter referred to simply as rustock.  While work has been done to deobfuscate the malware and study the rootkit&nbsp;[<A
 HREF="index.html#symantec1">7</A>,<A
 HREF="index.html#boldewin1">9</A>], little information is available about the functionality of the spam bot that is contained within rustock.  We are particularly interested in the communications between the command and control (C&amp;C) server and infected hosts since they provide a glimpse into an advanced botnet communications scheme.  The remainder of this paper presents a case study of the steps necessary to extract and reverse engineer the spam bot component.

<P>
First, we provide some information gleaned from observing the network traffic produced by the bot.  Then, we walk through the three phases of deobfuscation leading to the extraction of the spam bot component. Next, we describe the reverse engineering of the spam bot leading up to the extraction of the session encryption key from memory that makes it possible to decrypt the C&amp;C communications between client and server.  Finally we summarize a sample decrypted C&amp;C communication session between client and server.

<P>

<H1><A NAME="SECTION00020000000000000000">
Network Traffic Analysis</A>
</H1>
Before we begin the static analysis of the rustock malware we are able to learn a lot about the functionality of the spam bot through direct observation of the network traffic between the client and server.  By looking through a network traffic dump we determine that all C&amp;C communications are encrypted.  The communications can be divided into two phases: key exchange and instructions.  Both phases are initiated by the client in the form of HTTP POSTs.  Figure 1<A HREF="#fig-candc"><IMG  ALIGN="BOTTOM" BORDER="1" ALT="[*]"
 SRC="crossref.png"></A> gives a general overview of the encrypted communications.  

<P>

<DIV ALIGN="CENTER"><A NAME="fig-candc"></A><A NAME="24"></A>
<TABLE>
<CAPTION ALIGN="BOTTOM"><STRONG>Figure 1: </STRONG> 
<FONT SIZE="-1"><I>Spam bot command and control</I></FONT></CAPTION>
<TR><TD><IMG
 WIDTH="345" HEIGHT="292" BORDER="0"
 SRC="img1.png"
 ALT="\begin{figure}\begin{center}
\epsfig{file=candc.eps, width=3in}
\small\itshape\end{center}\end{figure}"></TD></TR>
</TABLE>
</DIV>

<P>
The key exchange phase is similar in all C&amp;C sessions we observed.  The HTTP POST from the client contains a 96-byte encrypted payload and is sent to the <TT>login.php</TT> page on the server.  This is followed by a response from the server containing a 16-byte payload. 

<P>
The instruction phase of the C&amp;C communications consists of a variable number of HTTP POSTs from the client and corresponding responses from the server.  The size of the payloads contained within these packets is also variable and therefore assumed to be dependent upon the variable nature of the underlying C&amp;C instructions.

<P>
In addition to the information we gained through observation of the network traffic the people at Symantec helped us recognize that the encryption algorithm used to encrypt the data was RC4.

<P>

<H1><A NAME="SECTION00030000000000000000">
Static Analysis of the Malware</A>
</H1>
By combining the information we gather from static and dynamic analyses, we are able to ultimately decipher the communications between the client and server.  This section describes the static analysis portion of the investigation into rustock.  We perform the static analysis on this malware by studying the obfuscated disassembly code of the binary file <TT>lzx32.sys</TT>.  The MD5 sum of this particular variant is: <TT>FDAFB3A14338B2B612C4E5C4F94B3677</TT>.

<P>
As shown in Figure 2<A HREF="#fig-overview"><IMG  ALIGN="BOTTOM" BORDER="1" ALT="[*]"
 SRC="crossref.png"></A>, the malware contains four main components: the initial deobfuscation routine, the rootkit loader, the rootkit, and the spam module.

<P>

<DIV ALIGN="CENTER"><A NAME="fig-overview"></A><A NAME="36"></A>
<TABLE>
<CAPTION ALIGN="BOTTOM"><STRONG>Figure 2: </STRONG> 
<FONT SIZE="-1"><I>Overview of the lzx32.sys malware.  In our analysis we break it down into four parts: A. The first deobfuscation routine, B. The rootkit loader which contains the second deobfuscation routine, C. The rootkit containing the third deobfuscation routine, and D. The spam module.</I></FONT></CAPTION>
<TR><TD><IMG
 WIDTH="347" HEIGHT="484" BORDER="0"
 SRC="img2.png"
 ALT="\begin{figure}\begin{center}
\epsfig{file=overview.eps, width=3in}
\small\itshape\end{center}\end{figure}"></TD></TR>
</TABLE>
</DIV>

<P>
IDA Pro 5.0 Standard Edition&nbsp;[<A
 HREF="index.html#ida1">10</A>], an interactive disassembly tool is used to study the code.  A useful plug-in to the disassembly tool called idax86emu&nbsp;[<A
 HREF="index.html#idax86emu1">11</A>] is also employed to deobfuscate the malware.  The plug-in tool emulates the x86 CPU instruction set and can modify the disassembly as it walks through the obfuscated code.  

<P>

<H2><A NAME="SECTION00031000000000000000">
Initial Deobfuscation Routine</A>
</H2>
The Portable Executable (PE) header found within the <TT>lzx32.sys</TT> executable points to an entry point located at address <TT>0x00011000</TT>.  This is the starting point of the first deobfuscation routine.  The code at the entry point consists of a series of nested loops that contain instructions to self-modify the code starting at <TT>0x000114AF</TT> (note: this address and all future references to addresses in this section are virtual addresses as seen by the disassembler and may be different with other versions of the malware).  

<P>
Using the emulator, we follow the deobfuscation routine to address <TT>0x000114AF</TT>.  At this address, the deobfuscated code looks different and makes more sense than the code prior to running through deobfuscation, see Figure 3<A HREF="#fig-deob"><IMG  ALIGN="BOTTOM" BORDER="1" ALT="[*]"
 SRC="crossref.png"></A>.   This is the beginning of the rootkit loader.

<P>

<DIV ALIGN="CENTER"><A NAME="fig-deob"></A><A NAME="51"></A>
<TABLE>
<CAPTION ALIGN="BOTTOM"><STRONG>Figure 3: </STRONG> 
<FONT SIZE="-1"><I>View of the disassembled code at the rootkit loader's entrypoint before and after deobfuscation.</I></FONT></CAPTION>
<TR><TD><IMG
 WIDTH="369" HEIGHT="327" BORDER="0"
 SRC="img3.png"
 ALT="\begin{figure}\begin{center}
\epsfig{file=deobfuscate.eps, width=3.2in}
\small\itshape\end{center}\end{figure}"></TD></TR>
</TABLE>
</DIV>

<P>

<H2><A NAME="SECTION00032000000000000000">
The Rootkit Loader</A>
</H2>

<P>
After a careful study of the code contained within the rootkit loader, we learn it takes the following steps:

<P>

<OL>
<LI>Searches for the ntoskernl.exe image in memory and imports the functions:  <TT>ExAllocatePool</TT>, <TT>ZwQuerySystemInformation</TT>, <TT>ExFreePool</TT>, and <TT>stricmp</TT>.
</LI>
<LI>Using these imported functions, the malware allocates a chunk of memory of about 34k (<TT>0x8800</TT> bytes) and deobfuscates the memory chunk starting at address <TT>0x00011926</TT> into the allocated memory.  The deobfuscation routine used at this stage (DOBF Routine 2 in Figure 2<A HREF="#fig-overview"><IMG  ALIGN="BOTTOM" BORDER="1" ALT="[*]"
 SRC="crossref.png"></A>) can be  recognized by the parameters passed to the function; they are the address of the encrypted <TT>0x8800</TT> bytes embedded in the binary and the address of the <TT>0x8800</TT> bytes of newly allocated memory.  The deobfuscation routine is called at <TT>0x00011593</TT>. The deobfuscated memory turns out to be another PE executable, which is then mapped back to location <TT>0x00011926</TT>.  This executable is the embedded rootkit component that we will discuss in section&nbsp;<A HREF="#sec-rootkit"><IMG  ALIGN="BOTTOM" BORDER="1" ALT="[*]"
 SRC="crossref.png"></A>. 
</LI>
<LI>Using the PE header of the embedded rootkit component starting at <TT>0x00011926</TT>, the rootkit loader sets up the import tables by using the strings table located within the deobfuscated rootkit component.  Some example function names are <TT>ZwEnumerateKey</TT>, <TT>ZwCreateKey</TT>, and <TT>ZwQueryKey</TT>.  These functions will be used by the rootkit component later to hide itself.  The rootkit loader then does any necessary relocation using the relocation section of the embedded binary.
</LI>
<LI>Since the rookit component is now decoded and mapped into the malware, its PE header is no longer needed.  Therefore, in an attempt to defeat RAM forensics, the rootkit loader deletes the MZ and PE signatures bytes from the decoded rootkit executable from memory before passing control to the embedded rootkit binary.
</LI>
<LI>The rootkit loader now jumps to <TT>0x00011D92</TT>, the entry point of the rootkit component, which will be discussed next. 
</LI>
</OL>

<P>

<H2><A NAME="SECTION00033000000000000000"></A>
<A NAME="sec-rootkit"></A><BR>
The Rootkit Component
</H2>
The rootkit component's primary purpose is to hide traces of itself from the user.  For example, in our dynamic test environment, the registry key <TT>HKLM\system\CurrentControlSet\services\pe386</TT> used to start the malware disappears from the registry as soon as the malware is loaded.  A detailed discussion of the rootkit's functionality is outside of the scope of this paper, however, a general discussion of the steps it takes that lead up to the extraction and execution of the spam component is discussed here.  

<P>
The rootkit component entry function at <TT>0x00011D92</TT> takes two arguments:  

<P>

<UL>
<LI>A pointer to an object representing the original malware driver file, i.e. <TT>lzx32.sys</TT>.  It appears that this object is created by the Windows operating system when driver files are loaded into memory as a service.
</LI>
<LI>The registry path pointing to the registry key that loaded the malware driver file into the operating system.  This path is Unicode encoded.
</LI>
</UL>

<P>
Knowing that the first argument is a pointer to the file object representing the original malware driver file is key in understanding how a modular component can be loaded and executed by the rootkit component.  

<P>
After storing the two arguments in global variables, a system thread is created.  This thread has the following functionality:

<P>

<OL>
<LI>Creates a handle to the rootkit kernel driver named: <TT>\BaseNamedObjects\{DC5E72A0-6D41-47E4-C56D-024587F4523B}</TT>  (Since this handle name is hard-coded into the binary, it may serve as a way to detect the presence of the rootkit module).
</LI>
<LI>Checks whether the loaded malware driver file is stored in an Alternate Data Stream (ADS).
</LI>
<LI>Deletes all sub-keys in the hive: <TT>HKLM\system\CurrentControlSet\Enum\Root\Legacy_lzx32.sys</TT>
</LI>
<LI>Replaces the registry functions to hide the registry key created to load the malware at boot.
</LI>
<LI>Creates a notify routine using <TT>PsSetCreateProcessNotifyRoutine</TT> which gets called for all process activity.  This notify routine creates at most two threads to inject the spam component into the services.exe process.  By doing this, the malware ensures its survivability.  
</LI>
<LI>The rootkit then replaces the <TT>ZwQuerySystemInformation</TT>, and <TT>ZwTerminateProcess</TT> functions.
</LI>
<LI>The same routine that injects the spam component discussed in step 5 is called at this point to start the spam component.  This routine will be discussed in detail next.
</LI>
</OL>

<P>
The spam component is encrypted and appended to the original driver file <TT>lzx32.sys</TT>.  The rootkit uses the first argument to extract this encrypted executable.  One way to detect the presence of the appended component is to parse the PE header of the original malware driver file.  By so doing, one will notice that there is additional data past the end of the PE executable.  To extract and decrypt the appended data, the rootkit takes the following steps:

<P>

<OL>
<LI>Reads the last four bytes of the original file, this is the size of the encrypted and compressed executable, we will call it <TT>bot_compressed_size</TT>.
</LI>
<LI>Moves the file pointer back by <TT>bot_compressed_size + 4</TT>, and reads in four bytes that represent the xor key.  
</LI>
<LI>Reads in the next four bytes after the xor key, this is the uncompressed size of the appended file, we will call it <TT>bot_uncompressed_size</TT>.
</LI>
<LI>The xor key is then used to xor-decrypt the data four bytes at a time, starting from the byte after <TT>bot_uncompressed_size</TT>.
</LI>
<LI>Allocates and uses a memory chunk of size <TT>bot_uncompressed_size</TT>, the xor-decrypted data is then deobfuscated using deobfuscation routine 3 (DOBF Routine 3 is the same as DOBF Routine 2).
</LI>
</OL>

<P>
The resulting file is another PE executable that is the modular spam bot component.  To properly extract this module, it is important to use the size variables detailed above.  Using the wrong sizes results in an incomplete spam module.

<P>
It was previously mentioned that the spam module is injected into the <TT>services.exe</TT> process, this is another step taken by the malware to thwart detection.  The rootkit component follows these steps to inject the module into the <TT>services.exe</TT> process:

<P>

<OL>
<LI>Finds the process ID of <TT>services.exe</TT> by using the <TT>ZwQuerySystemInformation</TT> API function to return all system thread and process information and searching the returned results.  Once found the process ID is stored in a global variable.
</LI>
<LI>Creates another copy of the <TT>services.exe</TT> process.
</LI>
<LI>Sets up networking capabilities by hooking the <TT>tcpip.sys</TT>, <TT>wanarp.sys</TT>, and <TT>ndis.sys</TT> driver functions.
</LI>
<LI>Extracts, decrypts, and deobfuscates the spam module as described above.
</LI>
<LI>Maps the spam module into non-paged allocated memory.
</LI>
<LI>Calls <TT>KeAttachProcess</TT> to switch the memory context to the <TT>services.exe</TT> process.
</LI>
<LI>The rootkit then sets up an asynchronous procedural call that provides a method to run the spam module code. 
</LI>
</OL>

<P>

<H2><A NAME="SECTION00034000000000000000">
The Spam Module</A>
</H2>
Now that we have extracted and decrypted the spam module, we use our observations of the network traffic generated by the bot and our dynamic analysis to determine where to focus our static analysis.  We target the function calls that post to the <TT>login.php</TT> and <TT>data.php</TT> server files. By analyzing these functions with the knowledge that the symmetric encryption algorithm is RC4, we are able to locate the code that randomly generates the session key and a location where the prepared form of the RC4 session key is stored in memory.  

<P>
The RC4 encryption algorithm consists of two main parts, the key-scheduling algorithm, and the pseudo-random generation algorithm&nbsp;[<A
 HREF="index.html#schneier1">12</A>].  To generate the keystream the two algorithms make use of an internal state consisting of two parts, a permutation of all 256 possible bytes, and two 8-bit index pointers. 
By comparing the two functions found within the assembly code with a C code implementation of RC4&nbsp;[<A
 HREF="index.html#rc41">13</A>], we are able to determine that the assembly functions are direct implementations of the two algorithms that make up RC4.  Additionally, the struct stored in global memory is the secret internal state consisting of a 256 byte char array and two index pointers into the array.  The function containing the key-scheduling algorithm is called once during <TT>login.php</TT>.  This function initializes the internal state variable and stores it in the global struct. The session key itself is not stored in global memory and is therefore difficult to extract.  Fortunately, having the internal state variables is as good as having the original key generated by the infected host.  

<P>
The code snippet in Figure 4<A HREF="#fig-sig"><IMG  ALIGN="BOTTOM" BORDER="1" ALT="[*]"
 SRC="crossref.png"></A> is from the IDA pro disassembly and shows the instructions leading up to the storage of the global struct containing the state variables. We have named the global struct <TT>g_prepped_session_key</TT>.	

<P>

<DIV ALIGN="CENTER"><A NAME="fig-sig"></A><A NAME="120"></A>
<TABLE>
<CAPTION ALIGN="BOTTOM"><STRONG>Figure 4: </STRONG> 
<FONT SIZE="-1"><I>Disassbled code for the routine that stores the prepared session key in a global struct.  The hex equivalent of the first 4-bytes of the highlighted code is used to generate a signature that will be used later to extract the prepared key.</I></FONT></CAPTION>
<TR><TD><IMG
 WIDTH="716" HEIGHT="436" BORDER="0"
 SRC="img4.png"
 ALT="\begin{figure*}\begin{center}
\epsfig{file=signature.eps, scale=0.8}
\small\itshape\end{center}\end{figure*}"></TD></TR>
</TABLE>
</DIV>

<P>
The instruction <TT>jz short loc_405CE4</TT> is the instruction that precedes the code that prepares the session key and stores it in global memory.  Converting this instruction and subsequent instructions to hexadecimal results in a unique signature <TT>0x74 0x11 0xA1 0x64</TT> that we will use later to search and extract from memory the internal state variables used to decrypt the encrypted network communications.

<P>

<H1><A NAME="SECTION00040000000000000000">
Key Extraction</A>
</H1>
Now that we know what we are looking for we need to search through memory to find the RC4 internal state variable.  Based on information gathered through the analysis of the rustock rootkit we know that the spam module is injected into the <TT>services.exe</TT> process.  A thorough overview of live memory forensics is beyond the scope of this paper but we will discuss one method we used to extract the RC4 state variable from the memory of a running machine infected with the spam bot.

<P>
We used Microsoft's User Mode Process Dumper&nbsp;[<A
 HREF="index.html#userdump1">14</A>] to dump the memory space of the <TT>services.exe</TT> process to a file.  Timing of the memory dump is critical since it must occur after the key exchange and instruction phases of the C&amp;C session but before the next key exchange.  Because the client typically initiates another C&amp;C session with the server every few minutes it is important to keep track of the various sessions and the corresponding memory dumps.  In order to prevent the possibility of the state variable being overwritten one could use a remote kernel debugger to break execution after the C&amp;C session has completed rather than dumping the memory.  The disadvantage of this method is that it affects the timing of subsequent C&amp;C sessions and could be noticed by the server.

<P>
Once we have a memory dump and a corresponding network capture of the C&amp;C session, we load the memory dump into Microsoft's windbg&nbsp;[<A
 HREF="index.html#windbg1">15</A>]. The log file shown in Figure 5<A HREF="#fig-windbg"><IMG  ALIGN="BOTTOM" BORDER="1" ALT="[*]"
 SRC="crossref.png"></A> enumerates the steps we took to extract the key.  First, we locate the signature isolated in the previous section (<TT>0x74 0x11 0xA1 0x64</TT>). Next, we disassemble several instructions starting at the memory address we just found.  The <TT>mov</TT> instruction at address <TT>0x00d35cd3</TT> loads a pointer to the struct containing the RC4 state variables, so to find the key we simply dereference the pointer.  Finally we dump the state variables to a file.  

<P>

<DIV ALIGN="CENTER"><A NAME="fig-windbg"></A><A NAME="138"></A>
<TABLE>
<CAPTION ALIGN="BOTTOM"><STRONG>Figure 5: </STRONG> 
<FONT SIZE="-1"><I>windbg log file with comments.  This shows how to extract the RC4 state variables from memory.</I></FONT></CAPTION>
<TR><TD><IMG
 WIDTH="714" HEIGHT="552" BORDER="0"
 SRC="img5.png"
 ALT="\begin{figure*}\begin{center}
\epsfig{file=windbg_log.eps, scale=0.85}
\small\itshape\end{center}\end{figure*}"></TD></TR>
</TABLE>
</DIV>

<P>

<H1><A NAME="SECTION00050000000000000000">
Decryption</A>
</H1>
Now that we have the RC4 state variables we decrypt the C&amp;C communications.  For each call to the <TT>data.php</TT> routine, there are two parts.  First, the client copies the global struct containing the RC4 state variables to a local instance located on the stack and calls the RC4 encryption/decryption function on the string it wishes to encrypt.  The C&amp;C server receives the encrypted payload and decrypts it.  Both the encryption on the client end and the decryption on the server end modify the state variables in precisely the same fashion, so the state is synchronized on both ends before and after encryption/decryption.  From this point the server encrypts the response using the modified state variables and sends it to the client where it is decrypted.  Again, the state variables are modified in the same way on both the server and client ends.  Each call to the <TT>data.php</TT> function starts with a fresh copy of the global state variable struct.

<P>
To decrypt the captured C&amp;C session we use the global struct we have extracted from the memory dump containing the state variables. We modify the C code implementation of RC4&nbsp;[<A
 HREF="index.html#rc41">13</A>] to read the key-scheduling state variables from disk rather then generating a new instance.  For us to decrypt the communication we need to apply the RC4 encryption/decryption function (pseudo random generation algorithm) to the POST message from the client followed by the response from the server.  This keeps the state variables synchronized and allows us to decrypt both sides of the communication.  Each exchange consisting of a POST to <TT>data.php</TT> and reply from the server can be decrypted separately since the state variable is copied from the global struct to the stack each time.  

<P>
One thing to note is that the first fourteen bytes of the client message are ignored when encrypting the message.  This was noticed during the static analysis of the spam module.  In order to keep the state variables synchronized, we also must ignore the first fourteen bytes of the message.

<P>
Table 1<A HREF="#table1"><IMG  ALIGN="BOTTOM" BORDER="1" ALT="[*]"
 SRC="crossref.png"></A> is a summary of a sample C&amp;C session we decrypted and consists of seven data exchanges.  The client initiates the conversation by sending the "kill.txt" string for which the server responds with a list of processes to terminate and files to delete from the client.  Some examples of processes are <TT>CAPP.exe</TT>, <TT>syswire.exe</TT>, <TT>Ravmond.exe</TT>.  Some examples of files are <TT>m_hook.sys</TT>, <TT>comdlj32.dll</TT>, and <TT>secure32.html</TT>.  Web searches for the processes and file names indicate that these are other malicious programs that the client may be infected with.  This provides a way to eliminate other infections that may conflict with this bot.  

<P>
<BR><P></P>
<A NAME="table1"></A>
<DIV ALIGN="CENTER"><A NAME="160"></A>
<TABLE>
<TR><TD><TABLE CELLPADDING=3 BORDER="1">
<TR><TH ALIGN="LEFT"><B>Message</B></TH>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH=300><B>Message Contents or Summary</B></TH>
</TR>
<TR><TD ALIGN="LEFT">Client 1</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=164>"kill.txt"</TD>
</TR>
<TR><TD ALIGN="LEFT">Server 1</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=164>Server response specifies processes to terminate and files to delete from the client</TD>
</TR>
<TR><TD ALIGN="LEFT">Client 2</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=164>Information about the client</TD>
</TR>
<TR><TD ALIGN="LEFT">Server 2</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=164>Information for the client about the client and file names to create or request for subsequent communications with the server</TD>
</TR>
<TR><TD ALIGN="LEFT">Client 3</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=164>"neutral.txt"</TD>
</TR>
<TR><TD ALIGN="LEFT">Server 3</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=164>List of domain names to query for mail servers to use</TD>
</TR>
<TR><TD ALIGN="LEFT">Client 4</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=164>"unlucky.txt"</TD>
</TR>
<TR><TD ALIGN="LEFT">Server 4</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=164>List of SMTP server responses that indicate failure</TD>
</TR>
<TR><TD ALIGN="LEFT">Client 5</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=164>"tmpcode.bin"</TD>
</TR>
<TR><TD ALIGN="LEFT">Server 5</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=164>Binary data that specifies the formatting of spam message to be sent by the client</TD>
</TR>
<TR><TD ALIGN="LEFT">Client 6</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=164>"tmpcode.bin"</TD>
</TR>
<TR><TD ALIGN="LEFT">Server 6</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=164>Binary data including spam content</TD>
</TR>
<TR><TD ALIGN="LEFT">Client 7</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=164>"-"</TD>
</TR>
<TR><TD ALIGN="LEFT">Server 7</TD>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH=164>List of target email addresses</TD>
</TR>
</TABLE>
<FONT SIZE="-1"><I>
</I></FONT></TD></TR>
<CAPTION><STRONG>Table 1:</STRONG>
<FONT SIZE="-1"><I>Summary of decrypted C&amp;C communications between the infected client and the server.</I></FONT></CAPTION>
</TABLE>
</DIV><P></P><BR>

<P>
Next, the client sends information about itself to the server including bandwidth, OS version, SMTP availability (if outbound TCP/25 is allowed), if it is a virtual machine, and if it is blacklisted on a DNS blacklist. The server responds with additional information including the client's external IP address, machine name, task id that the server assigns to the client for a given spamming job, whether an update of the client is available, and names of additional command strings that the client can use for subsequent communications.  An example of the command strings are "filesnames=neutral.txt" and "unluckystrings=unlucky.txt".

<P>
The next packet sent by the client is "neutral.txt", this request results in a list of domain names from the server.  The client puts these domain names in a double-linked list and queries them for the presence of mail servers.  

<P>
The fourth client request in this session is "unlucky.txt".  This request results in a list of error messages that an SMTP server could return.  Some examples are "Please use your provider SMTP" and "your mail rejected"

<P>
In the fifth and sixth exchange, the client sends the request string "tmpcode.bin" and the server responds with binary code and spam content that is used by the client to generate spam messages that are dynamic in nature to bypass spam filters.  

<P>
Finally, in the last session, the client send a single dash ("-") to which the server responds with a list of email addresses where spam messages will be sent.

<P>

<H1><A NAME="SECTION00060000000000000000">
Conclusions</A>
</H1>
Rustock is an advanced piece of malware used to effectively hide criminal activity.  The rootkit technology employed makes it difficult to detect the infection at the host level.  The use of encrypted HTTP for C&amp;C makes it difficult to detect at the network level.  Even after detection of the malware, the multiple levels of obfuscation makes it difficult for analysts to find information about the C&amp;C servers to generate signatures.

<P>
Based on our observation that the starting address of the deobfuscated code changed between versions of <TT>lzx32.sys</TT> as well as different obfuscation techniques we conclude that the outer most binary packer/obfuscator was changed.  It is likely that the reason for this is that the authors of the code were attempting to avoid antivirus detection as well as to increase the amount of time that it takes to deobfuscate the code.  Our technique for deobfuscation was not affected much by the different techniques since we step through the code using an emulator.

<P>
Our analysis of the C&amp;C communications indicates ordinary spam bot functionality. Aside from this functionality the spam module also has the ability to download and execute arbitrary code.  This could be used for other nefarious purposes.  In addition, the modular design of the rootkit and embedded spam module makes it easy to update the spam module.  During our experiments, we observed multiple updates to the spam module.  These updates were confined to changes of C&amp;C server domain names and search terms used to build the spam, but it indicates that it would be simple for those controlling the botnet to update the module with other features.

<P>

<H1><A NAME="SECTION00070000000000000000">
Future Work</A>
</H1>
More work is needed to see if automated unpacking tools such as PolyUnpack&nbsp;[<A
 HREF="index.html#royal1">16</A>] could be used to quickly deobfuscate the various binaries contained within <TT>lzx32.sys</TT>.  This would greatly reduce the amount of time needed to analyze future versions of rustock.

<P>
Future work is also needed to better understand the details of the rustock rootkit.  Since our focus was on getting to the spam module, we did not do a detailed analysis on the rootkit itself.  Further details can be found in&nbsp;[<A
 HREF="index.html#boldewin1">9</A>]. One element of the rootkit that needs more analysis is the alternative behavior exhibited when the malware driver detects that it is not stored in an ADS.

<P>
Additional work should be done to automate the key extraction and C&amp;C decryption.  One way to do this would be to continually monitor the network traffic from an infected client.  Anytime a post to <TT>login.php</TT> is seen, a remote procedure call could be initiated to the infected host to dump the memory space of the <TT>services.exe</TT> process.  Given the network captures and memory dumps it would be easy to write a script to extract the key from the dumps and decrypt the C&amp;C communications in a way similar to our method.

<P>

<H1><A NAME="SECTION00080000000000000000">
Acknowledgments</A>
</H1>
We wish to express our appreciation to the people at Symantec who gave us several pointers about the deobfuscation of the rustock rootkit and helped us identify the encryption algorithm.  We would also like to thank Chris Eagle from the Naval Postgraduate School for his tips on deobfuscation techniques and in using the idax86emu plugin for IDA Pro.

<P>
 
<H2><A NAME="SECTION00090000000000000000">
Bibliography</A>
</H2><DL COMPACT><DD>
<P>

<P>
<P></P><DT><A NAME="kye1">1</A>
<DD> Paul Bacher, Thorsten Holz, Markus Kotter, and Georg Wicherski, Know Your Enemy: Tracking Botnets, 
<TT><A NAME="tex2html11"
  HREF="https://www.honeynet.org/papers/bots/">https://www.honeynet.org/papers/bots/</A></TT>, (2005).

<P>
<P></P><DT><A NAME="barford1">2</A>
<DD> Paul Barford and Vinod Yegneswaran, An Inside Look at Botnets,
<TT><A NAME="tex2html12"
  HREF="https://www.cs.wisc.edu/~pb/botnets_final.pdf">https://www.cs.wisc.edu/~pb/botnets_final.pdf</A></TT>
<P>
<P></P><DT><A NAME="ianelli1">3</A>
<DD> Nicholas Ianelli and Aaron Hackworth, Botnets as a Vehicle for Online Crime,
<TT><A NAME="tex2html13"
  HREF="https://www.cert.org/archive/pdf/Botnets.pdf">https://www.cert.org/archive/pdf/Botnets.pdf</A></TT>, (2005).

<P>
<P></P><DT><A NAME="phatbot1">4</A>
<DD> Phatbot Trojan Analysis, LURHQ Threat Intelligence Group, 
<TT><A NAME="tex2html14"
  HREF="https://www.lurhq.com/phatbot.html">https://www.lurhq.com/phatbot.html</A></TT>, (2004).

<P>
<P></P><DT><A NAME="sinit1">5</A>
<DD> Sinit P2P Trojan Analysis, LURHQ Threat Intelligence Group, 
<TT><A NAME="tex2html15"
  HREF="https://www.lurhq.com/sinit.html">https://www.lurhq.com/sinit.html</A></TT>, (2004).

<P>
<P></P><DT><A NAME="lemos1">6</A>
<DD> Robert Lemos, Bot software looks to 
improve peerage, SecurityFocus, 
<TT><A NAME="tex2html16"
  HREF="https://www.securityfocus.com/news/11390">https://www.securityfocus.com/news/11390</A></TT>, (2006).

<P>
<P></P><DT><A NAME="symantec1">7</A>
<DD> Backdoor.Rustock.B, Symantec, 
<TT><A NAME="tex2html17"
  HREF="https://www.sarc.com/avcenter/venc/data/backdoor.rustock.b.html">https://www.sarc.com/avcenter/venc/data/backdoor.rustock.b.html</A></TT>, (2006).

<P>
<P></P><DT><A NAME="mcafee1">8</A>
<DD> Spam-Mailbot.c, McAfee, 
<TT><A NAME="tex2html18"
  HREF="https://vil.nai.com/vil/content/v_140181.htm">https://vil.nai.com/vil/content/v_140181.htm</A></TT>, (2006).

<P>
<P></P><DT><A NAME="boldewin1">9</A>
<DD> Frank Boldewin, A Journey to the Center of the Rustock.B Rootkit, 
<TT><A NAME=tex2html19"
  HREF="https://www.reconstructer.org/papers/A%20Journey%20to%20the%20Center%20of%20the%20Rustock.B%20Rootkit.zip">https://www.reconstructer.org/papers/A%20Journey%20to%20the%20Center%20of%20the%20Rustock.B%20Rootkit.zip</A></TT>, (2007).

<P>
<p></P><DT><A NAME="ida1">10</A>
<DD> IDA Pro,
<TT><A NAME="tex2html20"
  HREF="https://www.datarescue.com/idabase">https://www.datarescue.com/idabase</A></TT>

<P>
<P></P><DT><A NAME="idax86emu1">11</A>
<DD> The x86 Emulator plugin for IDAPro, Chris Eagle, 
<TT><A NAME="tex2html21"
  HREF="https://ida-x86emu.sourceforge.net">https://ida-x86emu.sourceforge.net</A></TT>

<P>
<P></P><DT><A NAME="schneier1">12</A>
<DD> Bruce Schneier, <I>Applied Cryptography: Protocols, Algorithms, and Source Code in C</I>, Second Edition, John Wiley and Sons, New York, NY, (1996).

<P>
<P></P><DT><A NAME="rc41">13</A>
<DD> RC4 C source code, 
<TT><A NAME="tex2html22"
  HREF="https://www.cypherspace.org/adam/rsa/rc4.c">https://www.cypherspace.org/adam/rsa/rc4.c</A></TT>

<P>
<P></P><DT><A NAME="userdump1">14</A>
<DD> Microsoft User Mode Process Dumper,  
<TT><A NAME="tex2html23"
  HREF="https://www.microsoft.com/downloads/details.aspx?FamilyID=E089CA41-6A87-40C8-BF69-28AC08570B7E&displaylang=en">https://www.microsoft.com/downloads/details.aspx?FamilyID=E089CA41-6A87-40C8-BF69-28AC08570B7E&displaylang=en</A></TT>

<P>
<P></P><DT><A NAME="windbg1">15</A>
<DD> Microsoft windbg, 
<TT><A NAME="tex2html23"
  HREF="https://www.microsoft.com/whdc/devtools/debugging/default.mspx">https://www.microsoft.com/whdc/devtools/debugging/default.mspx</A></TT>
<P>
<P></P><DT><A NAME="royal1">16</A>
<DD> Paul Royal, Mitch Halpin, David Dagon, Robert Edmonds, and Wenke Lee,  PolyUnpack: Automating the Hidden-Code Extraction of Unpack-Executing Malware. In <I>Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC 2006)</I> (December 2006).

<P>
</DL>
<HR>
<P>

<DL>
<DT><A NAME="foot8">Sandia National Laboratories</A><A
 HREF="index.html#tex2html1"><SUP><IMG  ALIGN="BOTTOM" BORDER="1" ALT="[*]"
 SRC="footnote.png"></SUP></A></DT>
<DD>Sandia is a multiprogram laboratory operated by Sandia Corporation, a Lockheed Martin Company, for the United States Department of Energy's National Nuclear Security Administration under Contract DE-AC04-94AL85000.

</DD>
</DL><HR>

<ADDRESS>
Levi Lloyd
2007-04-03
</ADDRESS>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script></BODY>
</HTML>
