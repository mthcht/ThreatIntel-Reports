<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-TDBVSRVN');</script>
<!-- End Google Tag Manager -->
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<!-- Mobile Specific Metas  ================================================== -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<!-- CORE CONCRETE  ================================================== -->
<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>

<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Spam from the kernel</title>
<meta name="description" content="Trojan.Srizbi is the first example seen in the wild of a complex piece of malware that operates fully from kernel mode. Kimmo Kasslin and Elia Florio provide a detailed analysis." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 2578;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>

	<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
	<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>

<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->

<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.js" integrity="sha512-ZwR1/gSZM3ai6vCdI+LVF1zSq/5HznD3ZSTk7kajkaj4D292NLuduDCO1c/NT8Id+jE58KYLKT7hXnbtryGmMg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />
<!-- added by lian to get some nice icons: -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<!-- added by lian to get syntax highlighting -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>

<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->
<!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<!-- Navbar
    ================================================== -->
	<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
				<div class="navbar-inner">
					<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
					<div class="navbar-header">
						<button type="button" class="navbar-toggle btn_navbar_custom" >
							<span class="icon-bar"></span>
							<span class="icon-bar"></span>
							<span class="icon-bar"></span>
						  </button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div>		</div>
				</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav">		<div class="nav-collapse collapse nav_collapse_custom navbar-collapse" > <div style="clear:both"></div>
<div class="vb-global-search-div"> 
<form action="/index.php/global-search-results/" method="get">
<fieldset>
	<input name="search_paths[]" type="hidden" value="" />
		<input name="query" type="text"  class="vb-global-search"  placeholder="Search site..."/>
	<input name="submit" type="submit" value="Search!" style="display:none"/>
</fieldset>
</form>
</div>


<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self"  class=" nav-first nav-item-6299 "  >Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self"  class=" nav-item-260 "  >VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self"  class=" nav-item-166 "  >VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self"  class=" nav-path-selected active nav-item-160 "  >Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self"  class=" nav-last nav-item-130 "  >Blog</a></li></ul> 	</div>
				</div>
			</div><div class="clearfix"></div>
        </div>
      </div>
	 
    </div>
	<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>
		
<!-- Navbar
    ================================================== -->		
<div class="container m-top-20">
	<div class="row">    
		<div class="col-md-9 col-sm-9 col-lg-9">
		<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb200711-srizbi"></a>Spam from the kernel</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2007-11-01</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="firstname">Kimmo</span> <span class="surname">Kasslin</span></h3><span class="orgname">F-Secure</span>, <span class="orgdiv">Malaysia</span></div><div class="author titlepage"><h3 class="author"><span class="firstname">Elia</span> <span class="surname">Florio</span></h3><span class="orgname">Symantec</span>, <span class="orgdiv">Ireland</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>Trojan.Srizbi is the first example seen in the wild of a complex piece of malware that operates fully from kernel mode. Kimmo Kasslin and Elia Florio provide a detailed analysis.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2007 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
    <div id="ccm-remo-expand-title-4729" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-4729" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id2329348">Introduction</a></span></dt><dt><span class="sect1"><a href="#id4112952">Origin of Trojan.Srizbi</a></span></dt><dt><span class="sect1"><a href="#id3646005">Full-kernel malware</a></span></dt><dt><span class="sect1"><a href="#id3332482">NDIS hijacking</a></span></dt><dt><span class="sect1"><a href="#id4625162">Stealth spam</a></span></dt><dt><span class="sect1"><a href="#id2759541">Conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2329348"></a>Introduction</h2></div></div></div><p>In December 2006 one of the authors of this article concluded his research paper on kernel malware with the following paragraph [<span class="citation"><a href="#citation.1">1</a></span>]:</p><p>&lsquo;This paper has shown the basic techniques that kernel malware is using to do their job. Their main role has been to perform some specific tasks for the main user-mode component. However, the scene is changing. There has been lots of interest in various research groups to investigate for the possibilities to do more complex tasks directly from kernel. The next big thing is going to be the network side. This year we have already seen presentations talking about how backdoors can be implemented directly from kernel mode using only the NDIS layer and custom TCP/IP stack. We have also seen a presentation about bypassing personal firewalls from kernel-mode.&rsquo;</p><p>Regrettably, the prediction became true in June 2007 when the authors started to analyse a malicious kernel-mode driver consisting of large amounts of code. After deeper analysis it became evident that there were no signs of user-mode injection, meaning that all of the code was being executed at ring 0. Since then the malware family has been known as Trojan.Srizbi (or as Rootkit:W32/Agent.EA).</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4112952"></a>Origin of Trojan.Srizbi</h2></div></div></div><p>In June 2007 several AV companies raised an alert due to a large-scale web-based attack being carried out with drive-by exploits. A malicious tag was injected into the homepages of many legitimate Italian and Russian websites. Attackers had injected an IFRAME to redirect visitors to a website running a multi-staged exploit kit, nowadays best known as &lsquo;MPack&rsquo; [<span class="citation"><a href="#citation.2">2</a></span>]. The specific MPack installation used for this attack was designed to download several trojans from the remote server 81.95.146.150, hosted by the ambiguous &lsquo;Russian Business Network&rsquo;.</p><p>One of the nasty creatures to spread from this server was Trojan.Srizbi, a sophisticated piece of malware contained within 150Kb of kernel mode code. This was the first public revelation of Srizbi, but further research tracked older samples back to April 2007. The first observed filename was &lsquo;windbg48.sys&rsquo;, followed by &lsquo;symavc32.sys&rsquo; more recently. Other pseudo random names of this threat always take the format [CHARS][2DIGITS] (e.g. Cmjg57.sys, Wdml36.sys, Fln51.sys, etc.).</p><p>The Srizbi driver is installed by a dropper component that is packed with UPX and protected with a layer of scrambled code. This layer uses custom spaghetti code obfuscation with CALL/JMP mixed with junk opcodes. It resembles the Rustock.B polymorphic packer, but it is more advanced. The dropper code makes API calls by using PUSH/RET sequences, and parameters are pushed into the stack with MOV [ESP] and other complex indirect loading instructions, making standard static analysis almost impossible (see <a href="#figure.1">Figure 1</a>).</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="Examples of scrambled API calls used by the Srizbi packer." src="/uploads/images/figures/2007/11/FIG1_api_calls.gif" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;Examples of scrambled API calls used by the Srizbi packer.</b></p></div><p>Reverse engineering of this piece of code is not straightforward and may require the assistance of custom tracing tools. However, it is possible to spot two principal decryption routines in the code:</p><div class="orderedlist"><ol type="1"><li><p>decryption with NOT BYTE</p></li><li><p>decryption with BYTE XOR 0xB0</p></li></ol></div><p>Decryption routine (1) is identical to the one inside the driver and is used to decrypt all text strings; the XOR decryption (2) is used to decrypt the embedded driver. The Srizbi installer drops a copy of the driver into the &lsquo;%SystemRoot%\System32\drivers&rsquo; folder and installs it as a service via OpenSCManager and CreateService. Next, the service is started and the installer self-deletes.</p><p>Another of Srizbi&rsquo;s challenges is the use of CRC values instead of basic string compares when it searches for names or resolves imported API functions dynamically. In some cases the only viable solution to find which string is being searched by Srizbi is to brute force CRCs over a set of possible strings.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3646005"></a>Full-kernel malware</h2></div></div></div><p>We can say with some certainty that Trojan.Srizbi represents an important milestone in the evolution of malware utilizing kernel-mode techniques. It is the first complex full-kernel malware [<span class="citation"><a href="#citation.3">3</a></span>] to have features such as file and registry hiding, bypassing of memory hooks, and low-level NDIS hooks with a private TCP/IP stack. The latter is utilized to implement a fully blown spam client with an HTTP-based command and control (C&amp;C) infrastructure &ndash; all directly from ring 0.</p><p>The fact that Trojan.Srizbi is fully implemented in kernel mode makes it very powerful. It can activate very early during the boot process, allowing it to make its system modifications before most security products even have a chance to load. Also, many security products do not consider activities initiated by kernel-mode code to be suspicious or malicious since the kernel should be trusted.</p><p>A feature that makes Srizbi unique is the fact that it disables and removes other competitor rootkits from the infected system very effectively. The trend of malware gangs fighting each other is becoming more intense nowadays since every unprotected machine is likely to be targeted by multiple pieces of malware &ndash; but in the end, there can be only one! Only the strongest and most sophisticated malware will survive.</p><p>Srizbi tries to accomplish this goal in a unique way: it rebuilds a clean copy of KiServiceTable by reading NTOSKRNL.EXE directly from disk and then it retrieves all the original (hook-free) function pointers of the required file and registry API functions. With this technique Srizbi is able to bypass most rootkits (and security products) present on the machine and can safely enumerate any files and registry keys.</p><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Srizbi rebuilds its own Service Table from disk." src="/uploads/images/figures/2007/11/FIG2_rebuild_sdt.PNG" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Srizbi rebuilds its own Service Table from disk.</b></p></div><p>We also found that Srizbi contains a generic driver removal routine based on CRC values. The routine enumerates services sub keys from following key:</p><pre class="programlisting">\REGISTRY\MACHINE\SYSTEM\CurrentControlSet\Services\[SRV_NAME]</pre><p>If the CRC of [SRV_NAME] matches one of the following hardcoded CRC values, then the trojan unloads the driver with ZwUnloadDriver then deletes the launch point of the service by removing the related registry key and its sub keys.</p><div class="table"><a id="table.1"></a><table border="1" summary="CRC values and service names targeted by Srizbi&rsquo;s driver removal
      routine."><colgroup><col align="center" /><col /></colgroup><tbody><tr><td align="center"><span class="bold"><strong>CRC value</strong></span></td><td align="center"><span class="bold"><strong>Service name</strong></span></td></tr><tr><td align="center">0xe0e5a117</td><td align="center">runtime</td></tr><tr><td align="center">0x4c4f27cc</td><td align="center">runtime2</td></tr><tr><td align="center">0xbf36b345</td><td align="center">xpdx</td></tr><tr><td align="center">0x949b30b3</td><td align="center">lzx32</td></tr></tbody></table><p class="title"><b>Table&nbsp;1.&nbsp;CRC values and service names targeted by Srizbi&rsquo;s driver removal routine.</b></p></div><p>The services in <a href="#table.1">Table 1</a> are quite (in)famous within the AV industry, since they are used by two of today&rsquo;s most common rootkit malware families: Backdoor.Rustock.B (lzx32, xpdx) and Trojan.Pandex (runtime, runtime2). Srizbi also contains the text strings of some other malware, &lsquo;wincom32.sys&rsquo; and &lsquo;ntio256.sys&rsquo;, however they are not referenced and never used in the actual code. More evidence of the ongoing war between the Srizbi gang and other malware authors was reported by researchers at Arbor Networks [<span class="citation"><a href="#citation.4">4</a></span>], who noticed StormWorm bots running DDoS attacks against Srizbi domains.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3332482"></a>NDIS hijacking</h2></div></div></div><p>From a technical point of view the most interesting part of Trojan.Srizbi is its network layer implementation. Its sole purpose is to bypass personal firewalls and other security products that monitor incoming and outgoing network packets. The implication is that the infected machine will be able to communicate with the command and control server and send thousands of spam emails even if the firewall is set to the &lsquo;block-all-traffic&rsquo; mode.</p><p><em class="productname">Windows</em> networking architecture is divided into different layers where the ones most commonly used by today&rsquo;s firewalls are TDI and NDIS. The NDIS layer abstracts the network hardware from network drivers and is the lowest layer available for third-party network drivers. This makes it the obvious choice for modern firewalls since the lower they operate the harder it is to bypass them.</p><p>Usually NDIS hooking firewalls install their triggers to the following locations:</p><div class="itemizedlist"><ul type="disc"><li><p>NDIS library functions</p></li><li><p>NDIS_PROTOCOL_BLOCK structure handler function pointers</p></li><li><p>NDIS_OPEN_BLOCK structure handler function pointers</p></li></ul></div><p>The actual triggers controlling inbound and outbound traffic are implemented by replacing several function pointers from inside the two internal NDIS structures that the NDIS layer uses for sending packets to and receiving packets from the driver controlling the hardware. The following are some commonly hooked handler functions:</p><div class="itemizedlist"><ul type="disc"><li><p>NDIS_OPEN_BLOCK-&gt;SendHandler</p></li><li><p>NDIS_OPEN_BLOCK-&gt;SendPacketsHandler</p></li><li><p>NDIS_OPEN_BLOCK-&gt;ReceiveHandler</p></li><li><p>NDIS_OPEN_BLOCK-&gt;ReceivePacketHandler</p></li></ul></div><p>The firewall driver normally installs inline hooks into four functions exported by ndis.sys that allow it to hook the required NDIS handler functions for any newly registered protocol driver. Otherwise the new protocol driver would be able to send and receive traffic without the firewall seeing it. The hooked functions are:</p><div class="itemizedlist"><ul type="disc"><li><p>NdisRegisterProtocol</p></li><li><p>NdisDeregisterProtocol</p></li><li><p>NdisOpenAdapter</p></li><li><p>NdisCloseAdapter</p></li></ul></div><p>Now that we have had a brief introduction to how modern firewalls are able to filter the traffic, let&rsquo;s continue by looking at what makes it possible for Trojan.Srizbi to bypass them completely.</p><p>First, Trojan.Srizbi finds a network adapter that it can use to communicate with the Internet. It does this by finding a suitable interface from the TCP/IP driver&rsquo;s registry settings. It calls an undocumented LookupRoute function exported by tcpip.sys which will give it the IP address of the default gateway. Then it enumerates all sub keys under the key:</p><pre class="programlisting">\REGISTRY\MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces</pre><p>It uses the default gateway address to find the matching interface, or if there are no matches it will take the one that has proper IP settings defined. Next, it enumerates all sub keys under the key:</p><pre class="programlisting">\REGISTRY\MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Adapters</pre><p>Finally, it selects the adapter whose IpConfig value matches the previously found interface.</p><p>Trojan.Srizbi gets access to the NDIS structures by installing a dummy protocol temporarily. It first registers a new protocol with a random name by calling NdisRegisterProtocol. Then it binds the protocol to the previously selected adapter by calling NdisOpenAdapter. As a result, the temporary protocol&rsquo;s NDIS_OPEN_BLOCK handler functions will be set up by the underlying system.</p><p>As we have already mentioned these two functions are commonly hooked by the firewall. Trojan.Srizbi solves this problem by using its private and hook-free version of ndis.sys. During initialization it loads the ndis.sys file into memory, resolves its imports and finally relocates the new module into the base address of the original ndis.sys module. This means that the private module will still be using e.g. the same global variables as the original ndis.sys module.</p><p>The following is the disassembly of the private and original NdisRegisterProtocol functions:</p><pre class="programlisting">kd&gt; u poi(Yol33!NdisRegisterProtocol)
816b917d 8bff         mov    edi,edi
816b917f 55           push   ebp
816b9180 8bec         mov    ebp,esp
816b9182 51           push   ecx
816b9183 53           push   ebx
816b9184 56           push   esi
816b9185 57           push   edi
816b9186 b938d16ff9   mov    ecx,offset NDIS!ndisPkgs+0x20 (f96fd138)

kd&gt; u ndis!NdisRegisterProtocol
NDIS!NdisRegisterProtocol:
f96ff17d e9b2d75200   jmp    fwdrv+0x934 (f9c2c934)
f96ff182 51           push   ecx
f96ff183 53           push   ebx
f96ff184 56           push   esi
f96ff185 57           push   edi
f96ff186 b938d16ff9   mov    ecx,offset NDIS!ndisPkgs+0x20 (f96fd138)</pre><p>With the help of the dummy protocol the driver now has a handle to the registered protocol that is bound to the underlying adapter. The handle is returned by NdisRegisterProtocol&rsquo;s second argument called NdisProtocolHandle, which is defined as PNDIS_HANDLE. This is actually a pointer to the dummy protocol&rsquo;s NDIS_PROTOCOL_BLOCK. By using the information stored in this structure the malware is able to find the adapter&rsquo;s NDIS_MINIPORT_BLOCK structure that is part of the lowest layers of NDIS. It then searches for other protocols that are bound to the same adapter, and takes the first one to match any of the following protocols:</p><div class="orderedlist"><ol type="1"><li><p>TCPIP</p></li><li><p>PSCHED</p></li><li><p>TCPIP_WANARP</p></li></ol></div><p>The way this whole process works is illustrated in <a href="#figure.3">Figure 3</a>.</p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Trojan.Srizbi uses the &lsquo;dummy protocol&rsquo; approach to find the NDIS structures that it hooks." src="/uploads/images/figures/2007/11/FIG3_trojan_srizbi_ndis.png" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Trojan.Srizbi uses the &lsquo;dummy protocol&rsquo; approach to find the NDIS structures that it hooks.</b></p></div><p>Now that the driver has access to the NDIS structures of an existing protocol it will replace a bunch of handler functions with its own. In addition, it fetches the addresses of certain handler functions that it will use itself. After it has finished it will just uninstall the dummy protocol.</p><p>Trojan.Srizbi uses its NDIS hooks and the original handler functions together with its own TCP/IP stack to send and receive packets.</p><p>To send packets it uses the following handler function:</p><div class="itemizedlist"><ul type="disc"><li><p>NDIS_MINIPORT_BLOCK-&gt;SendPacketsHandler</p></li></ul></div><p>To get a notification after the send operation has completed it uses the following hook:</p><div class="itemizedlist"><ul type="disc"><li><p>NDIS_OPEN_BLOCK-&gt;SendCompleteHandler</p></li></ul></div><p>To receive packets it uses the following hooks:</p><div class="itemizedlist"><ul type="disc"><li><p>NDIS_OPEN_BLOCK-&gt;ReceiveHandler</p></li><li><p>NDIS_OPEN_BLOCK-&gt;ReceivePacketHandler</p></li></ul></div><p>Since the malware is using its own TCP/IP stack it has somehow to identify which of the received packets should be passed to its private stack instead of the stack used by the system. One solution to this problem would be to use its own IP and MAC addresses since their combination should be unique on most physical machines [<span class="citation"><a href="#citation.5">5</a></span>].</p><p>However, Trojan.Srizbi uses a different approach. When it sends packets it always uses a source port that is higher than 32,000. For every packet received it checks whether it is a TCP packet, whether its destination IP equals the client&#39;s address, and whether the destination port is larger than 32,000. If all of these are true then it forwards the packet to its private stack. To make sure that no other application (using ephemeral ports) sends packets using its reserved source port range it sets the MaxUserPort registry value to 31,999, which is defined under the following key:</p><pre class="programlisting">\REGISTRY\MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters</pre></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4625162"></a>Stealth spam</h2></div></div></div><p>Srizbi (like Rustock) is a spam bot. A sophisticated, stealthy and powerful spam machine. Once the trojan takes over NDIS networking, it contacts C&amp;C servers on TCP port 4099 and retrieves spam instructions and configurations. The spam backdoor has a large set of commands that allow the botmaster to define a lot of parameters. A deep analysis of the C&amp;C protocol is beyond the scope of this document, but we can briefly summarize how it works. Each spam session starts with the download of a ZIP package containing the files shown in <a href="#table.2">Table 2</a>.</p><div class="table"><a id="table.2"></a><table border="1" summary="Configuration files included in the package provided by the
      Srizbi C&amp;C server."><colgroup><col /><col /></colgroup><thead><tr><th align="center">File</th><th align="center">Content</th></tr></thead><tbody><tr><td>config</td><td>Configuration file with all spam parameters (e.g. task_owner, max_mails, max_sim conn, pipeline, subj, etc.)</td></tr><tr><td>message</td><td>Text/HTML body of the spam message</td></tr><tr><td>mlist</td><td>List of recipients</td></tr><tr><td>000_data22</td><td>List of mail domains</td></tr><tr><td>001_ncommall</td><td>List of names/surnames</td></tr><tr><td>002_senderna</td><td>List of names/surnames</td></tr><tr><td>003_sendersu</td><td>List of names/surnames</td></tr><tr><td>mxdata</td><td>MX records of the domains</td></tr></tbody></table><p class="title"><b>Table&nbsp;2.&nbsp;Configuration files included in the package provided by the Srizbi C&amp;C server.</b></p></div><p>Srizbi also has an advanced feature that allows the trojan eventually to bypass some badly configured honeypot machines. The trojan does not trust the locally configured DNS server of the infected machine and instead receives all the necessary DNS information as part of the ZIP package. For example, if Srizbi needs to resolve the &lsquo;smtp.acme.org&rsquo; server to send spam, it will receive in the package the necessary MX record info for the &lsquo;acme.org&rsquo; domain. Any honeypot that simply blocks/redirects DNS resolutions to prevent threats from spamming will be bypassed by Srizbi because it has a kind of private DNS server over the C&amp;C channel. Srizbi can send image spam in HTML format using English and also Cyrillic Unicode character sets.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2759541"></a>Conclusion</h2></div></div></div><p>Despite all the advanced features implemented for spam and networking, the major weakness of Srizbi is its hiding technique. The rootkit attempts to hide itself by placing the following kernel hooks:</p><div class="itemizedlist"><ul type="disc"><li><p>Inline hook: NtOpenKey, NtEnumerateKey</p></li><li><p>\FileSystem\Ntfs driver: IRP_MJ_CREATE, IRP_MJ_DIRECTORY_CONTROL;</p></li></ul></div><p>These hooks effectively hide the malware&rsquo;s driver file and registry keys, but currently they can easily be detected by common rootkit detectors and can effectively be bypassed to remove the threat from the infected system.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4627936"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] Kasslin, K. Kernel malware: the attack from within. 2006. <span class="bibliosource"><a href="http://www.f-secure.com/weblog/archives/kasslin_AVAR2006_KernelMalware_paper.pdf" target="_blank">http://www.f-secure.com/weblog/archives/kasslin_AVAR2006_KernelMalware_paper.pdf</a></span>.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Symantec. MPack &ndash; The Movie. <span class="bibliosource"><a href="http://www.symantec.com/enterprise/security_response/weblog/2007/06/mpack_the_movie.html" target="_blank">http://www.symantec.com/enterprise/security_response/weblog/2007/06/mpack_the_movie.html</a></span>.</p></div><div class="bibliomixed"><a id="citation.3"></a><p class="bibliomixed">[3] Malicious code that executes all its code in ring 0. After it is installed into the system by a dropper component (user-mode code or kernel-mode exploit) it will be able to operate by itself.</p></div><div class="bibliomixed"><a id="citation.4"></a><p class="bibliomixed">[4] McPherson, D. When spambots attack &ndash; each other! <span class="bibliosource"><a href="http://asert.arbornetworks.com/2007/07/when-spambots-attack-each-other/" target="_blank">http://asert.arbornetworks.com/2007/07/when-spambots-attack-each-other/</a></span>.</p></div><div class="bibliomixed"><a id="citation.5"></a><p class="bibliomixed">[5] Hoglund, G.; Butler, J. Rootkits: subverting the Windows kernel. 2005. Upper Saddle River, NJ. Addison-Wesley Professional. 324 pages. ISBN 0-321-29431-9.</p></div></div></div>		</div>
		<div class="col-md-3 col-sm-3 col-lg-3">
		
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Spam from the kernel&url=https://www.virusbulletin.com/virusbulletin/2007/11/spam-kernel"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2007/11/spam-kernel'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2007/11/spam-kernel&title=Spam from the kernel"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2007/11/spam-kernel&t=Spam from the kernel"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2007/11/spam-kernel"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">

			<h3 class="ccm-page-list-title">
			<a href="/virusbulletin/2025/08/built-be-believed-emotional-mimicry-new-class-threat/" target="_self">Built to be believed: emotional mimicry as a new class of threat</a>
		</h3>
		<div class="ccm-page-list-description">
			In the early days of virus hoaxes and digital confidence scams, we learned that the most dangerous threats weren&rsquo;t always technical but psychological. Now, a new class of threats is emerging that targets that same vulnerability. Only this time, it&rsquo;s&hellip;		</div>
		
			<h3 class="ccm-page-list-title">
			<a href="/virusbulletin/2023/10/nexus-android-banking-botnet-compromising-cc-panels-and-dissecting-mobile-appinjects/" target="_self">Nexus Android banking botnet &ndash; compromising C&amp;C panels and dissecting mobile AppInjects</a>
		</h3>
		<div class="ccm-page-list-description">
			Aditya Sood &amp; Rohit Bansal provide details of a security vulnerability in the Nexus Android botnet C&amp;C panel that was exploited to compromise the C&amp;C panel in order to gather threat intelligence, and present a model of mobile AppInjects.		</div>
		
			<h3 class="ccm-page-list-title">
			<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
		</h3>
		<div class="ccm-page-list-description">
			TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip;		</div>
		
			<h3 class="ccm-page-list-title">
			<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
		</h3>
		<div class="ccm-page-list-description">
			Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip;		</div>
		
			<h3 class="ccm-page-list-title">
			<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
		</h3>
		<div class="ccm-page-list-description">
			In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip;		</div>
		
	 

	 
</div><!-- end .ccm-page-list -->


<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p>		</div>
	</div>
</div>

<!-- Footer
    ================================================== -->
    <footer class="bs-footer" role="contentinfo">
      <div class="container">
        <div class="bs-social">
			<div class="row ">
						
				<div class="col-md-3">
					<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p>				</div>
				<div class="col-md-3">
					<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb100/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p>				</div>	
									<div class="col-md-3">
					<p><a title="VB2024" href="/conference/vb2024/">VB2024 (Dublin)</a></p>
<p><a title="VB2023" href="/conference/vb2023/">VB2023 (London)</a></p>
<p><a title="VB2022" href="/conference/vb2022/">VB2022 (Prague)</a></p>
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p>					</div>	
				
									<div class="col-md-3">
					<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div>					</div>	
				
								
			</div>
			<div class="row ">
				<div class="col-md-12">
									</div>							
			</div>
		</div>
      </div>
    </footer>

	<!-- lian's attempt for a new footer -->
    <footer class="bs-footer2" role="contentinfo">
      <div class="container">
        <div class="bs-social2">
			<div class="row ">
						
				<div class="col-md-3">
									</div>
				<div class="col-md-3">
									</div>	
									<div class="col-md-3">
										</div>	
				
									<div class="col-md-3">
										</div>	
				
								
			</div>
			<div class="row ">
				<div class="col-md-12">
					<p style="text-align: left;">©1989-2025 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p>				</div>							
			</div>
		</div>
      </div>
    </footer>

<script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-TDBVSRVN"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->

<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
	<div class="disclosure-container">
					<div class="disclosure-content">
				<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
			</div>
			<div class="disclosure-form">
	<form action="/index.php/cookies_disclosure/" method="POST">
					<input type="hidden" name="allowCookies" value="1" />
							<div class="button">
			<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
		</div>
	</form>
</div>
				<div class="ccm-spacer">&nbsp;</div>
	</div>
</div>
</body>
</html>