<!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-TDBVSRVN');</script>
<!-- End Google Tag Manager -->
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<!-- Mobile Specific Metas  ================================================== -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
<!-- CORE CONCRETE  ================================================== -->
<script type="text/javascript">var BOOTSTRAP_VERSION ="lumen";
	var BOOTSTRAP_JS_HEAD =1;
	var BOOTSTRAP_CDN_ENABLE =0; var BOOTSTRAP_NAVBAR_TYPE =0; var BOOTSTRAP_LOGO_OPTION =0; var BOOTSTRAP_NAVBAR =1; var BootstrapInputFix =true;var BootstrapNavbarLineHeightFix =true;var BOOTSTRAP_EDT= 0; </script>

<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<title>Virus Bulletin :: Andromeda 2.7 features</title>
<meta name="description" content="A new version of the Andromeda bot was recently spotted in the wild with strengthened self-defence mechanisms and novel methods for keeping its process hidden and running persistently. Moreover, its communication data structure and encryption scheme have changed, rendering previous Andromeda IPS/IDS signatures useless. Suweera De Souza and Neo Tan take a detailed look at Andromeda 2.7." />
<meta name="generator" content="concrete5 - 5.6.3.5" />
<script type="text/javascript">
var CCM_DISPATCHER_FILENAME = '/index.php';var CCM_CID = 1828;var CCM_EDIT_MODE = false;var CCM_ARRANGE_MODE = false;var CCM_IMAGE_PATH = "/concrete/images";
var CCM_TOOLS_PATH = "/index.php/tools/required";
var CCM_BASE_URL = "https://www.virusbulletin.com";
var CCM_REL = "";

</script>

	<link rel="shortcut icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
	<link rel="icon" href="/files/8914/5459/9485/VBIcon.png" type="image/x-icon" />
<link rel="stylesheet" type="text/css" href="/concrete/css/ccm.base.css" />
<script type="text/javascript" src="/concrete/js/jquery.js"></script>
<script type="text/javascript" src="/concrete/js/ccm.base.js"></script>

<script type="text/javascript">
var COOKIES_ALLOWED=false;
</script>
<link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure.css" />
<!--[if lte IE 8]><link rel="stylesheet" type="text/css" href="/packages/free_cookies_disclosure/css/cookies_disclosure_ie.css" /><![endif]-->

<script type="text/javascript">
var COOKIES_DISCLOSURE_HIDE_INTERVAL=10;
</script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_hide.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/lumen/bootstrap-overwrites.css" />
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/css/members.css" />
<script type="text/javascript" src="/packages/bootstrap/js/common/prettify.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/jquery.easing.1.3.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/bootstrap.min.js"></script>
<link rel="stylesheet" type="text/css" href="/libraries/css/jquery.fancybox.css" />
<script type="text/javascript" src="/libraries/js/jquery.fancybox.pack.js"></script>
<link rel="stylesheet" media="screen" type="text/css" href="/files/cache/css/bootstrap/typography.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.js" integrity="sha512-ZwR1/gSZM3ai6vCdI+LVF1zSq/5HznD3ZSTk7kajkaj4D292NLuduDCO1c/NT8Id+jE58KYLKT7hXnbtryGmMg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script type="text/javascript" src="/index.php/tools/packages/free_cookies_disclosure/disclosure_i18n_js"></script>
<script type="text/javascript" src="/packages/free_cookies_disclosure/js/disclosure_ajax_form.js"></script>
<link rel="stylesheet" type="text/css" href="/concrete/blocks/page_list/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/remo_expand/blocks/remo_expand/templates/vbexpand/view.css" />
<script type="text/javascript" src="/packages/remo_expand/js/jquery.color.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/jquery.ba-hashchange.js"></script>
<script type="text/javascript" src="/packages/remo_expand/js/remo.expand.js"></script>
<link rel="stylesheet" type="text/css" href="/packages/bootstrap/blocks/search/templates/VB_global_search/view.css" />
<link rel="stylesheet" type="text/css" href="/packages/travisn_spacer/css/ccm.tnspacer.css" />
<!-- added by lian to get some nice icons: -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css" integrity="sha384-T8Gy5hrqNKT+hzMclPo118YTQO6cYprQmhrYwIiQ/3axmI1hQomh7Ud2hPOy8SP1" crossorigin="anonymous">

<!-- added by lian to get syntax highlighting -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/prettify/r298/run_prettify.js" integrity="sha256-1SFdTXlsw0RkQ+iO0E91LDshGiIbPiTYqJto0px4wds=" crossorigin="anonymous"></script>

<!--[if gte IE 9]>
<script src="/packages/bootstrap/js/common/modernizr.js"></script>
<![endif]-->
<!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
<!--[if lt IE 9]>	
	
	<script src="/packages/bootstrap/js/common/html5shiv.js"></script>
	<script src="/packages/bootstrap/js/common/respond.min.js"></script>
	
<![endif]-->
</head>
<body data-spy="scroll" data-target=".bs-sidebar">

<!-- Navbar
    ================================================== -->
	<div class="navbar  navbar-fixed-top navbar-default  bs-docs-nav">
				<div class="navbar-inner">
					<div class="container"><div class="row"><div class="col-sm-4 col-md-4 logo-position-1 col-logo">
					<div class="navbar-header">
						<button type="button" class="navbar-toggle btn_navbar_custom" >
							<span class="icon-bar"></span>
							<span class="icon-bar"></span>
							<span class="icon-bar"></span>
						  </button><div class="mobile-clearfix"></div><div class="navbar-brand navbar-brand-area"><a href="/"><img border="0" class="ccm-image-block" alt="" src="/files/4614/4535/7515/logo-big.png" width="339" height="92" /></a></div>		</div>
				</div><div class="col-sm-8 col-md-8 logo-position-1 col-nav">		<div class="nav-collapse collapse nav_collapse_custom navbar-collapse" > <div style="clear:both"></div>
<div class="vb-global-search-div"> 
<form action="/index.php/global-search-results/" method="get">
<fieldset>
	<input name="search_paths[]" type="hidden" value="" />
		<input name="query" type="text"  class="vb-global-search"  placeholder="Search site..."/>
	<input name="submit" type="submit" value="Search!" style="display:none"/>
</fieldset>
</form>
</div>


<div class="tnSpacer" style="height:48px"></div>
<ul class="nav nav-pills"><li class=" nav-first nav-item-6299"><a href="/newsletter/" target="_self"  class=" nav-first nav-item-6299 "  >Newsletter</a></li><li class=" nav-item-260"><a href="/conference/" target="_self"  class=" nav-item-260 "  >VB Conference</a></li><li class=" nav-item-166"><a href="/testing/" target="_self"  class=" nav-item-166 "  >VB Testing</a></li><li class=" nav-path-selected active nav-item-160"><a href="/virusbulletin/" target="_self"  class=" nav-path-selected active nav-item-160 "  >Bulletin</a></li><li class=" nav-last nav-item-130"><a href="/blog/" target="_self"  class=" nav-last nav-item-130 "  >Blog</a></li></ul> 	</div>
				</div>
			</div><div class="clearfix"></div>
        </div>
      </div>
	 
    </div>
	<div class="navbar-top-fixed-space "><div class="clearfix"></div></div>
		
<!-- Navbar
    ================================================== -->		
<div class="container m-top-20">
	<div class="row">    
		<div class="col-md-9 col-sm-9 col-lg-9">
		<div class="titlepage" xmlns=""><div><div><h1 class="title" xmlns="http://www.w3.org/1999/xhtml"><a id="vb201308-Andromeda"></a>Andromeda 2.7 features</h1></div><div><p class="pubdate" xmlns="http://www.w3.org/1999/xhtml">2013-08-01</p></div><div><div class="authorgroup" xmlns="http://www.w3.org/1999/xhtml"><div class="author titlepage"><h3 class="author"><span class="surname">Suweera De Souza</span></h3><span class="orgname">Fortinet</span>, <span class="orgdiv">Canada</span></div><div class="author titlepage"><h3 class="author"><span class="firstname">Neo</span> <span class="surname">Tan</span></h3><span class="orgname">Fortinet</span>, <span class="orgdiv">Canada</span></div><b class="editedby">Editor: </b><span class="editor"><span class="firstname">Helen</span> <span class="surname">Martin</span></span></div></div><div><div class="abstract" xmlns="http://www.w3.org/1999/xhtml"><p class="title"><b>Abstract</b></p><p>A new version of the Andromeda bot was recently spotted in the wild with strengthened self-defence mechanisms and novel methods for keeping its process hidden and running persistently. Moreover, its communication data structure and encryption scheme have changed, rendering previous Andromeda IPS/IDS signatures useless. Suweera De Souza and Neo Tan take a detailed look at Andromeda 2.7.</p></div></div><div><p class="copyright" xmlns="http://www.w3.org/1999/xhtml"><i>Copyright &copy; 2013 Virus Bulletin</i></p></div></div><hr /></div>
<div class="ccm-remo-expand">
    <div id="ccm-remo-expand-title-2921" class="ccm-remo-expand-title ccm-remo-expand-closed" data-expander-speed="200">Table of contents</div><div id="ccm-remo-expand-content-2921" class="ccm-remo-expand-content"><div class="toc"><dl><dt><span class="sect1"><a href="#id3522692"></a></span></dt><dt><span class="sect1"><a href="#id3286411">Overview of unpacking routine</a></span></dt><dt><span class="sect1"><a href="#id2208488">The way to the real routine</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3073476">Anti-API hook</a></span></dt><dt><span class="sect2"><a href="#id4936660">Customized exception handler</a></span></dt><dt><span class="sect2"><a href="#id4378238">Anti-VM and anti-forensics</a></span></dt><dt><span class="sect2"><a href="#id2511910">Data structure of encrypted routine</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id3995908">Twin malicious injected processes</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id2711878">Code injection routine</a></span></dt><dt><span class="sect2"><a href="#id2947450">Twin process interaction</a></span></dt><dt><span class="sect2"><a href="#id3352690">Process 1 (installation routine and watchdogs)</a></span></dt><dt><span class="sect2"><a href="#id3291937">Process 2 (core routine)</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4171956">Communication protocol, encryption algorithm</a></span></dt><dd><dl><dt><span class="sect2"><a href="#id3885482">Create connections</a></span></dt><dt><span class="sect2"><a href="#id3535093">Communication protocol and encryption algorithm</a></span></dt></dl></dd><dt><span class="sect1"><a href="#id4361602">Conclusion</a></span></dt></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3522692"></a></h2></div></div></div><p> Recently, we found a new version of the Andromeda bot in the wild. This version has strengthened its self-defence mechanisms by utilizing more anti-debug/anti VM tricks than its predecessors. It also employs some novel methods for trying to keep its process hidden and running persistently. Moreover, its communication data structure and encryption scheme have changed, rendering the old Andromeda IPS/IDS signatures useless. </p><p>In this article, we will look at the following: </p><div class="itemizedlist"><ul type="disc"><li><p>Its unpacking routine</p></li><li><p>Its anti-debug/anti VM tricks</p></li><li><p>Its malicious code injection routine</p></li><li><p>The interaction between its twin injected malicious processes</p></li><li><p>Its communication protocol, encryption algorithm and command control.</p></li></ul></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3286411"></a>Overview of unpacking routine</h2></div></div></div><p>The sample we analysed is firstly packed with UPX. However, once unpacked, the code inside is another custom packer. This custom packer creates dynamic memory and decrypts code into this memory (<a href="#figure.1">Figure 1</a>). It jumps to a lot of addresses by pushing the offset onto the stack and then returning to it. The code in memory calls VirtualAlloc three times. The first allocated memory is used for storing bytes copied from the original file. Those bytes are then copied over to the third allocated memory where they are rearranged by swapping bytes (using the algorithm shown in <a href="#figure.2">Figure 2</a>). Finally, the partially decrypted bytes are copied to the second allocated memory, where the data is decompressed using the aPLib decompression library. The result is a PE file which is then written over the original file image, and the anti-debugging tricks are carried out from here. <a href="#figure.1">Figure 1</a> gives an overview of the unpacking routine.</p><div class="figure"><a id="figure.1"></a><div class="mediaobject"><img alt="The unpacking process." src="/uploads/images/figures/2013/08/Andromeda-1.jpg" /></div><p class="title"><b>Figure&nbsp;1.&nbsp;The unpacking process.</b></p></div><div class="figure"><a id="figure.2"></a><div class="mediaobject"><img alt="Algorithm showing how the bytes were swapped." src="/uploads/images/figures/2013/08/Andromeda-2.jpg" /></div><p class="title"><b>Figure&nbsp;2.&nbsp;Algorithm showing how the bytes were swapped.</b></p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id2208488"></a>The way to the real routine</h2></div></div></div><p>This version of Andromeda employs many anti debug/anti VM tricks, which result in the bot switching to a pre-set fake routine in order to prevent it from running in the VM environment, being debugged or monitored. The purpose is obvious: to prevent analysts from being able to access the real malicious routine. In the following sections, we&rsquo;ll take a detailed look at these defence mechanisms.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3073476"></a>Anti-API hook</h3></div></div></div><p>The sample allocates another section of memory for its anti API hooking technique. The technique consists of storing the first instruction of the API to memory, followed by a jump to its second instruction in the DLL. </p><p>For example, in <a href="#figure.3">Figure 3</a>, memory location 0x7FF9045E stores the location of memory 0x7FF80060, which is where the first instruction of the API ntdll.RtlAllocateHeap is stored, followed by a jump to the second instruction in the DLL. </p><div class="figure"><a id="figure.3"></a><div class="mediaobject"><img alt="Anti-API hooking." src="/uploads/images/figures/2013/08/Andromeda-3.jpg" /></div><p class="title"><b>Figure&nbsp;3.&nbsp;Anti-API hooking.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4936660"></a>Customized exception handler</h3></div></div></div><p>A pointer to a handler function is passed to the SetUnhandledExceptionFilter API. The handler is called when an access violation error is intentionally created by the sample when it tries to write into the file&rsquo;s PE header. The code in the handler is only executed if the process is not being debugged. </p><p>This function (<a href="#figure.4">Figure 4</a>) gets the pExceptionPointers &gt;ContextRecord (the second DWORD of arg_0) in order to set the location of the real payload (sub_401EA5) to the EIP (ebx+0B8h) upon return. It also gets the ESP (ebx+0C4h) and then sets the two arguments which will be passed to the payload function: arg0 to dword_402058 and arg1 to sub_401AA2. Dword_402058 points to the encrypted code and sub_401AA2 points to another decryption routine which will be injected by the code decrypted from dword_402058. </p><div class="figure"><a id="figure.4"></a><div class="mediaobject"><img alt="UnhandledExceptionFilter function." src="/uploads/images/figures/2013/08/Andromeda-4.jpg" /></div><p class="title"><b>Figure&nbsp;4.&nbsp;UnhandledExceptionFilter function.</b></p></div><p>(Click <a href="/uploads/images/figures/2013/08/Andromeda-4-large.jpg" target="_top">here</a> to view a larger version of Figure 4.)</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id4378238"></a>Anti-VM and anti-forensics</h3></div></div></div><p>The GetVolumeInformationA API is called on drive C:\ to get the name of the drive. Then the bot calculates the CRC32 hash value of the name (<a href="#figure.5">Figure 5</a>). If the hash value of the drive name matches 0x20C7DD84, it will bypass all the anti-debugging and anti-VM checks and invoke the exception directly. When the CRC32 hash is reversed, one possible result is &lsquo;BVabi&rsquo;. This could be the name of the author&rsquo;s C drive, so that he/she could skip all the trouble when debugging his/her own program.</p><div class="figure"><a id="figure.5"></a><div class="mediaobject"><img alt="Checking if the drive name&rsquo;s CRC32 value is 0x20C7DD84." src="/uploads/images/figures/2013/08/Andromeda-5.jpg" /></div><p class="title"><b>Figure&nbsp;5.&nbsp;Checking if the drive name&rsquo;s CRC32 value is 0x20C7DD84.</b></p></div><p>If the hash value of the drive name doesn&rsquo;t match, the following anti-debug/anti-VM tricks are employed:</p><div class="orderedlist"><ol type="1"><li><p>Iterating through process names and computing their CRC32 hash values: if a hash value matches any of those on a list of hash values of VM processes (<a href="#figure.6">Figure 6</a>) and forensics tools (regmon.exe, filemon.exe, etc.), this indicates that the debugging process is inside a sandbox environment and being monitored.</p><div class="figure"><a id="figure.6"></a><div class="mediaobject"><img alt="Matching the process with CRC32 hash values." src="/uploads/images/figures/2013/08/Andromeda-6.jpg" /></div><p class="title"><b>Figure&nbsp;6.&nbsp;Matching the process with CRC32 hash values.</b></p></div></li><li><p>Trying to load the libraries guard32.dll and sbiedll.dll, which belong to <span class="emphasis"><em>Comodo</em></span> and <span class="emphasis"><em>Sandboxie</em></span> respectively. If the libraries can be loaded successfully, this indicates that the debugging process is inside a sandbox environment. </p></li><li><p>Querying for a value in the system\currentcontrolset\services\disk\enum registry to search for the presence of any virtual machine (<a href="#figure.7">Figure 7</a>).</p><div class="figure"><a id="figure.7"></a><div class="mediaobject"><img alt="Querying for virtual machines" src="/uploads/images/figures/2013/08/Andromeda-7.jpg" /></div><p class="title"><b>Figure&nbsp;7.&nbsp;Querying for virtual machines</b></p></div></li><li><p>Calling the opcode rdtsc, which returns the processor time stamp. When first called, it saves it in edx, and the second time it saves it in eax. The registers are subtracted and if the result of the tickcount is more than 0x200h, this indicates that the process is being debugged.</p></li></ol></div><p>If the bot does detect the presence of either a debugger or a virtual machine, it decrypts the dummy code. This code copies itself under %alluserprofiles% as svchost.exe with hidden system file attributes. It then writes itself in the registry HKLM\Software\Microsoft\Windows\CurrentVersion\Run as SunJavaUpdateSched. A socket is then created to listen actively, but no connection has been made previously.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2511910"></a>Data structure of encrypted routine</h3></div></div></div><p>As mentioned, the bot will decrypt the code as the next routine, whether dummy code or a useful routine. The encrypted code of the file is contained within a specific structure that the file uses when carrying out its decryption routine. In this sample, there are three sets of encrypted code which represent three different routines. One routine contains dummy code that is decrypted only when the sample is being debugged or run in a virtual machine. The second routine contains code that injects itself into another process, whereon the third routine is decrypted in that process. The data structure is shown in <a href="#figure.8">Figure 8</a>.</p><div class="figure"><a id="figure.8"></a><div class="mediaobject"><img alt="Data structure used by the bot." src="/uploads/images/figures/2013/08/Andromeda-8.jpg" /></div><p class="title"><b>Figure&nbsp;8.&nbsp;Data structure used by the bot.</b></p></div><p>The encrypted data, which is located at 0x28h after the structure, is decrypted using RC4. The key used is a fixed length of 0x10h and is located at the beginning of the structure. The decrypted code is further decompressed into allocated memory using the aPLib decompression library. </p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id3995908"></a>Twin malicious injected processes</h2></div></div></div><p>The bot will inject its core code into two processes after successfully bypassing all the anti-debug/anti-VM tricks. First, let&rsquo;s see how the malicious code is injected into processes before we shed light on how the two injected processes interact with each other.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2711878"></a>Code injection routine</h3></div></div></div><p>The bot calls the GetVolumeInformation API on C:\, to get the VolumeSerialNumber. It then checks whether the environment variable &lsquo;svch&rsquo; has already been created [<span class="citation"><a href="#citation.1">1</a></span>]. If it has, then it will inject itself into svchost.exe. If the environment variable is not present, it will set the environment variable &lsquo;src&rsquo; to point to its own file path and then inject into msiexec.exe. This suggests that the bot injects its code into two different processes at different instances. We shall see why in the next section. </p><p>It then gets the Windows directory. Before injection, the bot needs to find the location of these files (svchost.exe, msiexec.exe) in the Windows directory. Thus, it calls ZwQueryInformationProcess and accordingly concatenates the process name with \System32 for 32-bit and \SysWOW64 for 64-bit systems. </p><p>The injection process involves several steps: </p><div class="orderedlist"><ol type="1"><li><p>As with the previous versions, the malware calls CreateFile to get the handle of the file it wants to inject. It then gets its section handle by calling ZwCreateSection, which is used by ZwMapViewOfSection to get the image of the file in memory. From this image, it extracts the size of image and the address of the entry point from the PE header. </p></li><li><p>A memory address with the same size as that of the image of the file it wants to inject is created with page_execute_readwrite access. Then the image of the file is copied over to this memory address.</p></li><li><p>Another memory address is created with the same size as that of the image of the original bot file, also with page_execute_readwrite access. The original file is then copied over to this new memory address.</p></li><li><p>A suspended process of the file to be injected is created. The memory address containing the original file is unmapped. ZwMapViewOfSection is called with the bot&rsquo;s file handle and the process handle (acquired from creating the suspended file process). So now the injected file&rsquo;s process handle has a map view of the botnet file. Before it calls ResumeThread to resume the process, it changes the entry point of the injected file to point to its code, which it has modified as follows:</p><pre class="programlisting">push &lt;address of botnet code to jump to&gt;
ret
</pre></li></ol></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id2947450"></a>Twin process interaction</h3></div></div></div><p>The code that is injected into the process decrypts more code into memory using the methods described in the previous section. This final decrypted code is the commencement of the botnet&rsquo;s payload. In this version, Andromeda displays some new techniques in its execution. </p><p>First, it modifies the registry entry HKLM\system\currentcontrolset\services\sharedaccess\parameters\firewallpolicy\standardprofile\authorizedapplications\list to the value of %s:*:Generic Host Process, which points to the path of the current process. This is done to allow the process to bypass the firewall. </p><p>Next, it tries to determine whether the environment variable &lsquo;svch&rsquo; has been set. If it has, it means that another instance of the file has been run. If it has not been set, then the malware has yet to inject itself into the other process. </p><p>The creation of two processes is important for the bot. One process is used to make sure that the copy of the bot which will be created in %alluserprofile% is always present and that the registry entries have not been modified. The second process is used for connecting to the C&amp;C server and executing instructions based on the messages received. Additionally, the two processes communicate with each other through an instance of creating a pipe connection. It is this connection that enables either process to check that both instances of the bot are always running or to terminate the processes in the event of an update or installation. The analysis of this part has been divided into Process 1 and Process 2, so as to better understand the communication between the two processes (<a href="#figure.9">Figure 9</a>). </p><div class="figure"><a id="figure.9"></a><div class="mediaobject"><img alt="The flow of communication between the two bot processes." src="/uploads/images/figures/2013/08/Andromeda-9.jpg" /></div><p class="title"><b>Figure&nbsp;9.&nbsp;The flow of communication between the two bot processes.</b></p></div><p>(Click <a href="/uploads/images/figures/2013/08/Andromeda-9-large.jpg" target="_top">here</a> to view a larger version of Figure 9.)</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3352690"></a>Process 1 (installation routine and watchdogs)</h3></div></div></div><p>This part of code is executed when the environment variable &lsquo;svch&rsquo; has not been found. The bot tries to connect to the pipe name, which is &lsquo;kill&rsquo; xor&rsquo;ed by the VolumeSerialNumber. If it can connect, then the bot terminates the other process. This thread is created as a check to terminate the other bot process in the event of an installation. </p><p>It then tries to get the environment variable &lsquo;src&rsquo;, which was created before injection. The value contains the path from which the original file was run. It uses this path to create a copy of the original file before deleting it, and saves it in %alluserprofile% with a random filename. </p><p>Next, the bot wants to enable the file to autorun, so it saves the path of the file in %alluserprofile% in the registry. At first, it tries to access the subkey \software\microsoft\windows\currentversion\Policies\Explorer\Run in registry HKLM. If it is unsuccessful, it accesses the subkey \software\microsoft\windows nt\currentversion\windows in HKCU. The registry that it accesses successfully is the one that is used throughout for any modifications (explained in pseudo code in <a href="#figure.10">Figure 10</a>). Once it has accessed the registry, it sets the security key of the registry to KEY_ALL_ACCESS. The security key is obtained by passing the string &lsquo;D:(A;;KA;;;WD)&rsquo; to the ConvertStringSecurityDescriptorToSecurityDescriptorA API, which converts it to a security key. Once it has set the security key, it saves the path of the new file to the registry under the value of VolumeSerialNumber (for HKLM) or Load (for HKCU). The original file in the old path is deleted and the environment variable &lsquo;src&rsquo; is set, pointing to 0. </p><div class="figure"><a id="figure.10"></a><div class="mediaobject"><img alt="Pseudo code of registry chosen." src="/uploads/images/figures/2013/08/Andromeda-10.jpg" /></div><p class="title"><b>Figure&nbsp;10.&nbsp;Pseudo code of registry chosen.</b></p></div><p>After this, the bot creates two watchdog threads which are primarily used to keep re-setting the file and the registry entries if they have been modified. The first thread checks if any modification has been made to the filename in %alluserprofile%, or if it has been deleted. Then it creates the file again with the same filename. It accomplishes this by first saving the file to the buffer by calling ReadFile. Then it calls the FindFirstChangeNotificationW API, whose handle will retrieve the changes made to the filename. If the handle is 0xFFFFFFFF, then no changes have been made, and it enters a loop. If a change has been notified, then it creates the file again with the same filename, and writes the contents of the file back from the buffer created by ReadFile. </p><p>The second thread checks if any changes have been made to a value in the registry. If a change has been made, then it resets the registry security key and the value in the registry. Notification of changes made to the registry is set by calling RegNotifyChangeKeyValue. </p><p>The bot then creates two environment variables &ndash; &lsquo;ppid&rsquo;, pointing to its process ID, and &lsquo;svch&rsquo; with the value of 1. It then runs the file that has been created in %alluserprofile%. After running the file, it tries to connect to the pipe &lsquo;kill&rsquo; xor&rsquo;ed by the VolumeSerialNumber. Since the value of svch has been set to 1, the second process will create a thread that creates the named pipe connection and executes a second thread to connect to the C&amp;C server. When the first process can connect successfully to the pipe connection created by the second process, it resets the environment variables &lsquo;svch&rsquo; and &lsquo;ppid&rsquo; to 0. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3291937"></a>Process 2 (core routine)</h3></div></div></div><p>When the bot is run in another process, it sets the environment variable &lsquo;svch&rsquo; to 0. A thread is created that creates a named pipe. If a connection is established, the thread reads the bytes that are written from the other process. If the message is &lsquo;kill&rsquo; xor&rsquo;ed by VolumeSerialNumber, the process terminates. However, if the message is &lsquo;gpid&rsquo;, then it sends its current process ID to the first process. This information is used by the old process to access information about the new process when the new process terminates. When the new process terminates, the old process checks the handle of the process. If the message is &lsquo;kill&rsquo; xor&rsquo;ed by VolumeSerialNumber, then the old process terminates. This check is made when the bot wants to update itself and hence has to make sure that the watchdog threads have been terminated. Otherwise, the old process terminates the new process and runs the file in %alluserprofile% again. </p><p>After the new process has created its thread to connect to the C&amp;C server, it will get the &lsquo;ppid&rsquo; environment variable. This variable contains the process ID of the old process. Like the old process, it uses this information to access when the old process terminates. And if the message is &lsquo;kill&rsquo; xor&rsquo;ed by VolumeSerialNumber, then the new process terminates. This check is performed when an installation is taking place. Otherwise, the new process runs the file in %alluserprofile% and terminates itself. </p><p><a href="#figure.11">Figure 11</a> shows how the process IDs are used by the processes. </p><div class="figure"><a id="figure.11"></a><div class="mediaobject"><img alt="Process IDs used by the processes." src="/uploads/images/figures/2013/08/Andromeda-11.jpg" /></div><p class="title"><b>Figure&nbsp;11.&nbsp;Process IDs used by the processes.</b></p></div><p>The second thread created by the new process carries out some further code injection. It first resolves winhttp.dll APIs using the anti-API hooking technique and also inline hooks three APIs: ws2_32.GetAddrInfoW (<a href="#figure.12">Figure 12</a> and <a href="#figure.13">Figure 13</a>), ntdll.ZwMapViewOfSection and ntdll.ZwUnmapViewOfSection. The control flow of the APIs is redirected by inserting a jump to the malicious function. Before writing to the API, it calls VirtualProtect. After the bytes have been written, it calls FlushInstructionCache so that the changes take effect immediately. </p><div class="figure"><a id="figure.12"></a><div class="mediaobject"><img alt="Before inline hooking GetAddrInfoW." src="/uploads/images/figures/2013/08/Andromeda-12.jpg" /></div><p class="title"><b>Figure&nbsp;12.&nbsp;Before inline hooking GetAddrInfoW.</b></p></div><div class="figure"><a id="figure.13"></a><div class="mediaobject"><img alt="After inline hooking GetAddrInfoW." src="/uploads/images/figures/2013/08/Andromeda-13.jpg" /></div><p class="title"><b>Figure&nbsp;13.&nbsp;After inline hooking GetAddrInfoW.</b></p></div><p>It then calls QueueUserAPC, which creates an asynchronous procedure call object. This object points to the code which decrypts some encrypted strings using RC4 decryption (<a href="#figure.14">Figure 14</a>). These encrypted strings are the domains it intends to connect to. Before each decrypted string, it inserts the DWORD 0x6C727501 xor&rsquo;ed by VolumeSerialNumber, which is ASCII for URL. This magic DWORD is used when it calls the RtlWalkHeap API to retrieve the domain names from the heap.</p><div class="figure"><a id="figure.14"></a><div class="mediaobject"><img alt="The decrypted domain names (now offline)." src="/uploads/images/figures/2013/08/Andromeda-14.jpg" /></div><p class="title"><b>Figure&nbsp;14.&nbsp;The decrypted domain names (now offline).</b></p></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4171956"></a>Communication protocol, encryption algorithm</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3885482"></a>Create connections</h3></div></div></div><p>The hooked GetAddrInfoW API performs a DNS query for the input host name from <span class="emphasis"><em>Google</em></span> DNS server 8.8.4.4 (Figure 15) using a randomly generated query identifier. It then returns the query result or &lsquo;127.0.0.1&rsquo; if the DNS query fails. The DNS record received is then used for querying the C&amp;C domain name. It does this to avoid any application level DNS server redirection. The hooked ZwMapViewOfSection and ZwUnmapViewOfSection APIs will be used later to map/unmap the plug in image downloaded from the C&amp;C server.</p><div class="figure"><a id="figure.15"></a><div class="mediaobject"><img alt="Hard-coded Google DNS server IP in the GetAddrInfoW hooked function." src="/uploads/images/figures/2013/08/Andromeda-15.jpg" /></div><p class="title"><b>Figure&nbsp;15.&nbsp;Hard-coded Google DNS server IP in the GetAddrInfoW hooked function.</b></p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3535093"></a>Communication protocol and encryption algorithm</h3></div></div></div><p>Before establishing a connection, the bot prepares the message to be sent to the C&amp;C server. It uses the following format:</p><pre class="programlisting">id:%lu|bid:%lu|bv:%lu|os:%lu|la:%lu|rg:%lu</pre><div class="itemizedlist"><ul type="disc"><li><p>id is the VolumeSerialNumber, which is used as an RC4 key to decrypt the message received</p></li><li><p>bid is a hard coded DWORD used for the communication</p></li><li><p>bv is the version of the botnet (in this case it is 2.7)</p></li><li><p>os is the version of the current operating system</p></li><li><p>la is the socket name byte swapped</p></li><li><p>rg is set to 1 if the process is in the Administrator group, otherwise it is 0 (<a href="#figure.16">Figure 16</a>).</p></li></ul></div><p>This string is encrypted using RC4 with a hard-coded key of length 0x20 and is further encrypted using base64. The message is then sent to the server. Once a message is received, the bot calculates the CRC32 hash of the message without including the first DWORD (<a href="#figure.16">Figure 16</a>). If the calculated hash matches the first DWORD, the message is valid. Later it is decrypted using RC4 with the VolumeSerialNumber as the key. After the RC4 decryption the message is in the format gn([base64-encoded string]). This used to be just the base64 encoded string, but for some reason the author decided not to make the server backward compatible with the older bot versions. Then it decodes the base64 string inside the brackets to get the message in plain text (<a href="#figure.17">Figure 17</a>).</p><div class="figure"><a id="figure.16"></a><div class="mediaobject"><img alt="First DWORD of message received containing the CRC32 hash value." src="/uploads/images/figures/2013/08/Andromeda-16.jpg" /></div><p class="title"><b>Figure&nbsp;16.&nbsp;First DWORD of message received containing the CRC32 hash value.</b></p></div><div class="figure"><a id="figure.17"></a><div class="mediaobject"><img alt="Message received from the server." src="/uploads/images/figures/2013/08/Andromeda-17.jpg" /></div><p class="title"><b>Figure&nbsp;17.&nbsp;Message received from the server.</b></p></div><p>The first DWORD of the message is used as a multiplier to multiply a value in a fixed offset. The DWORD in that offset is used as an interval to delay calling the thread again to establish another connection. The next byte indicates what action to carry out &ndash; there are seven options:</p><div class="itemizedlist"><ul type="disc"><li><p>Case 1 (download EXE):</p><p>Connect to the domain decrypted from the message to download an EXE file. Save the file to the %tmp% location with a random name and run the process.</p></li><li><p>Case 2 (load plug-ins):</p><p>Connect to the domain decrypted from the message, install and load plug ins. The plug ins are decrypted by RC4 using the same key of length 0x20h.</p></li><li><p>Case 3 (update case): </p><p>Connect to the domain to get the update EXE file. If a filename of VolumeSerialNumber is present in the registry, then save the PE file to the %tmp% location with a random name; else save it to the current location with the name of the file as VolumeSerialNumber. The file in %tmp% is run, while the current process terminates. It also sends the message &lsquo;kill&rsquo; xor&rsquo;ed by VolumeSerialNumber to terminate the older process. </p></li><li><p>Case 4 (download DLL): </p><p>Connect to the domain and save the DLL file to the %alluserprofile% location. The file is saved as a .dat file with a random name and loaded from a specified export function. The registry is modified so it can be auto-loaded by the bot. </p></li><li><p>Case 5 (delete DLLs): </p><p>Delete and uninstall all the DLLs loaded and installed in Case 4. </p></li><li><p>Case 6 (delete plug-ins): </p><p>Uninstall all the plug-ins loaded in Case 3. </p></li><li><p>Case 7 (uninstall bot): </p><p>Suspend all threads and uninstall the bot. </p></li></ul></div><p>After executing the action based on which instruction it received, another message is sent to the server to notify it that the action has been completed:</p><pre class="programlisting">id:%lu|tid:%lu|res:%lu</pre><div class="itemizedlist"><ul type="disc"><li><p>id is the VolumeSerialNumber</p></li><li><p>tid is the next byte (task id) after the byte displaying the case number in the message received</p></li><li><p>res is the result of whether or not the task was carried out successfully.</p></li></ul></div><p>Once the message has been sent, the thread exits and waits for the delay interval period to pass before it reconnects to the server to receive additional instructions.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title"><a class="chapter" id="id4361602"></a>Conclusion</h2></div></div></div><p>This new version of the Andromeda bot has demonstrated its tenacity by executing code that ensures every instance of its process is kept running and by employing more anti debug/anti VM tricks than its previous version. However, it is still possible to bypass all those tricks once we have complete knowledge of its executing procedures. Moreover, we could easily block its communication data after addressing the decryption performance issue.</p><div class="bibliography"><div class="titlepage"><div><div><h3 class="title"><a class="chapter" id="id3808325"></a>Bibliography</h3></div></div></div><div class="bibliomixed"><a id="citation.1"></a><p class="bibliomixed">[1] All the environment variables used in this version of Andromeda are encrypted using xor on the VolumeSerialNumber, which the file acquires by calling GetVolumeInformationA on drive C:\. The bot employs this technique as a way of specifying its status in the machine. &lsquo;svch&rsquo; is a flag if the process is injected into svchost.exe; &lsquo;src&rsquo; stores the location of the file; &lsquo;ppid&rsquo; stores the first process ID;&lsquo;gpid&rsquo; stores the second process ID.</p></div><div class="bibliomixed"><a id="citation.2"></a><p class="bibliomixed">[2] Tan, N. Andromeda Botnet. Virus Bulletin, June 2012, pp.5&ndash;11.</p></div></div></div>		</div>
		<div class="col-md-3 col-sm-3 col-lg-3">
		
<div id="NDPHPBlock13359" class="NDPHPBlock">
<div style="width: 100%;"><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Tweet this!' href="https://twitter.com/share?text=Andromeda 2.7 features&url=https://www.virusbulletin.com/virusbulletin/2013/08/andromeda-2-7-features"><img src='/uploads/images/buttons/twitter.png' alt='twitter.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Facebook' href='https://www.facebook.com/sharer.php?u=https://www.virusbulletin.com/virusbulletin/2013/08/andromeda-2-7-features'><img src='/uploads/images/buttons/fb.png' alt='fb.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on LinkedIn' href="https://www.linkedin.com/shareArticle?mini=true&url=https://www.virusbulletin.com/virusbulletin/2013/08/andromeda-2-7-features&title=Andromeda 2.7 features"><img src='/uploads/images/buttons/linkedin.png' alt='linkedin.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='Share on Hacker News' href="https://news.ycombinator.com/submitlink?u=https://www.virusbulletin.com/virusbulletin/2013/08/andromeda-2-7-features&t=Andromeda 2.7 features"><img src='/uploads/images/buttons/hackernews.png' alt='hackernews.png' width='45' height='45' class='responsive' /></a></center></div><div style='float: left; width: 20%; margin-left: auto; margin-right: auto; text-align: center;'><center><a target='_blank' title='reddit this!' href="https://www.reddit.com/submit?url=https://www.virusbulletin.com/virusbulletin/2013/08/andromeda-2-7-features"><img src='/uploads/images/buttons/reddit.png' alt='reddit.png' width='45' height='45' class='responsive' /></a></center></div></div></div><p> </p>
<h2>Latest articles:</h2>
<div class="ccm-page-list">

			<h3 class="ccm-page-list-title">
			<a href="/virusbulletin/2023/10/nexus-android-banking-botnet-compromising-cc-panels-and-dissecting-mobile-appinjects/" target="_self">Nexus Android banking botnet &ndash; compromising C&amp;C panels and dissecting mobile AppInjects</a>
		</h3>
		<div class="ccm-page-list-description">
			Aditya Sood &amp; Rohit Bansal provide details of a security vulnerability in the Nexus Android botnet C&amp;C panel that was exploited to compromise the C&amp;C panel in order to gather threat intelligence, and present a model of mobile AppInjects.		</div>
		
			<h3 class="ccm-page-list-title">
			<a href="/virusbulletin/2022/04/cryptojacking-fly-teamtnt-using-nvidia-drivers-mine-cryptocurrency/" target="_self">Cryptojacking on the fly: TeamTNT using NVIDIA drivers to mine cryptocurrency</a>
		</h3>
		<div class="ccm-page-list-description">
			TeamTNT is known for attacking insecure and vulnerable Kubernetes deployments in order to infiltrate organizations&rsquo; dedicated environments and transform them into attack launchpads. In this article Aditya Sood presents a new module introduced by&hellip;		</div>
		
			<h3 class="ccm-page-list-title">
			<a href="/virusbulletin/2021/12/collector-stealer-russian-origin-credential-and-information-extractor/" target="_self">Collector-stealer: a Russian origin credential and information extractor</a>
		</h3>
		<div class="ccm-page-list-description">
			Collector-stealer, a piece of malware of Russian origin, is heavily used on the Internet to exfiltrate sensitive data from end-user systems and store it in its C&amp;C panels. In this article, researchers Aditya K Sood and Rohit Chaturvedi present a 360&hellip;		</div>
		
			<h3 class="ccm-page-list-title">
			<a href="/virusbulletin/2021/06/fighting-fire-fire/" target="_self">Fighting Fire with Fire</a>
		</h3>
		<div class="ccm-page-list-description">
			In 1989, Joe Wells encountered his first virus: Jerusalem. He disassembled the virus, and from that moment onward, was intrigued by the properties of these small pieces of self-replicating code. Joe Wells was an expert on computer viruses, was partly&hellip;		</div>
		
			<h3 class="ccm-page-list-title">
			<a href="/virusbulletin/2021/04/run-your-malicious-vba-macros-anywhere/" target="_self">Run your malicious VBA macros anywhere!</a>
		</h3>
		<div class="ccm-page-list-description">
			Kurt Natvig wanted to understand whether it&rsquo;s possible to recompile VBA macros to another language, which could then easily be &lsquo;run&rsquo; on any gateway, thus revealing a sample&rsquo;s true nature in a safe manner. In this article he explains how he recompiled&hellip;		</div>
		
	 

	 
</div><!-- end .ccm-page-list -->


<p><br /><a class="btn btn-block btn-warning" href="/virusbulletin/archive">Bulletin Archive</a></p>		</div>
	</div>
</div>

<!-- Footer
    ================================================== -->
    <footer class="bs-footer" role="contentinfo">
      <div class="container">
        <div class="bs-social">
			<div class="row ">
						
				<div class="col-md-3">
					<p><a title="About Us" href="/about-vb/about-us/">About us</a></p>
<p><a title="Contact Us" href="/about-vb/contact-us/">Contact us</a></p>
<p><a title="Advisory Board" href="/about-vb/advisory-board/">Advisory board</a></p>
<p><a title="Press" href="/about-vb/press/">Press information</a></p>
<p><a title="Security Events Calendar" href="/resources/calendar/">Security events calendar</a></p>
<p><a title="Newsletter" href="/newsletter/">Virus Bulletin newsletter</a></p>				</div>
				<div class="col-md-3">
					<p><a title="VB Testing" href="/testing/">Testing</a></p>
<p><a title="VB100" href="/testing/vb100/">VB100</a></p>
<p><a title="VBSpam" href="/testing/vbspam/">VBSpam</a></p>
<p><a title="Consultancy Services" href="/testing/consultancy-services/">Consultancy services</a></p>
<p><a title="The Spammers' Compendium" href="/resources/spammerscompendium/">Spammers' Compendium</a></p>				</div>	
									<div class="col-md-3">
					<p><a title="VB2024" href="/conference/vb2024/">VB2024 (Dublin)</a></p>
<p><a title="VB2023" href="/conference/vb2023/">VB2023 (London)</a></p>
<p><a title="VB2022" href="/conference/vb2022/">VB2022 (Prague)</a></p>
<p><a title="VB2021 localhost" href="/conference/vb2021/">VB2021 localhost</a></p>
<p><a title="VB2020 localhost" href="/conference/vb2020/">VB2020 localhost</a></p>
<p><a title="Conference Archive" href="/conference/vb-conference-archive/">Older conferences</a></p>					</div>	
				
									<div class="col-md-3">
					<div class="row">
<table style="float: right;" border="0">
<tbody>
<tr>
<td align="center"><a href="/rss" target="_blank"><img title="Get our blog updates" src="/uploads/images/buttons/rss-square-gray.png" alt="rss.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://twitter.com/virusbtn" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on Twitter" src="/uploads/images/buttons/twitter-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.linkedin.com/company/virus-bulletin" target="_blank"><img class="bhtmbxoyxwpzahwcvxnw" title="Visit us on LinkedIn" src="/uploads/images/buttons/linkedin-square-gray.png" alt="linkedin.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.facebook.com/virusbulletin" target="_blank"><img title="Visit us on Facebook" src="/uploads/images/buttons/fb-square-gray.png" alt="twitter.png" width="35" height="35" /></a></td>
<td> </td>
<td align="center"><a href="https://www.youtube.com/user/virusbtn" target="_blank"><img title="Visit us on Youtube" src="/uploads/images/buttons/youtube-square-gray.png" alt="youtube.png" width="35" height="35" /></a></td>
</tr>
</tbody>
</table>
</div>					</div>	
				
								
			</div>
			<div class="row ">
				<div class="col-md-12">
									</div>							
			</div>
		</div>
      </div>
    </footer>

	<!-- lian's attempt for a new footer -->
    <footer class="bs-footer2" role="contentinfo">
      <div class="container">
        <div class="bs-social2">
			<div class="row ">
						
				<div class="col-md-3">
									</div>
				<div class="col-md-3">
									</div>	
									<div class="col-md-3">
										</div>	
				
									<div class="col-md-3">
										</div>	
				
								
			</div>
			<div class="row ">
				<div class="col-md-12">
					<p style="text-align: left;">©1989-2025 Virus Bulletin.        <a title="Privacy Policy" href="/about-vb/privacy-policy/">Privacy policy</a>        <a title="Cookies" href="/about-vb/privacy-policy/cookies/">Cookies</a>        <a title="Terms and Conditions" href="/about-vb/terms-and-conditions/">Terms and Conditions</a></p>				</div>							
			</div>
		</div>
      </div>
    </footer>

<script type="text/javascript" src="/libraries/js/fancybox.load.js"></script>
<script type="text/javascript" src="/packages/bootstrap/js/common/app.js"></script>
<!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-TDBVSRVN"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->

<div id="ccm-cookiesDisclosure" class="disclosure-bottom">
	<div class="disclosure-container">
					<div class="disclosure-content">
				<p> We have placed cookies on your device in order to improve the functionality of this site, as outlined in our <a href="/about-vb/privacy-policy/cookies" target="_blank">cookies policy</a>. However, you may delete and block all cookies from this site and your use of the site will be unaffected. By continuing to browse this site, you are agreeing to Virus Bulletin's use of data as outlined in our <a href="/about-vb/privacy-policy/" target="_blank">privacy policy</a>.</p>
			</div>
			<div class="disclosure-form">
	<form action="/index.php/cookies_disclosure/" method="POST">
					<input type="hidden" name="allowCookies" value="1" />
							<div class="button">
			<input class="btn btn-info btn-sm" type="submit" name="submit" value="I understand. Don't show this message again!" />
		</div>
	</form>
</div>
				<div class="ccm-spacer">&nbsp;</div>
	</div>
</div>
</body>
</html>