<!DOCTYPE html>
<html lang="en-US">
<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
<script>
window.koko_analytics = {"url":"https:\/\/winternl.com\/koko-analytics-collect.php","site_url":"https:\/\/winternl.com","post_id":1139,"path":"\/detecting-manual-syscalls-from-user-mode\/","method":"cookie","use_cookie":true};
</script>
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	
<!-- The SEO Framework by Sybre Waaijer -->
<meta name="robots" content="max-snippet:-1,max-image-preview:large,max-video-preview:-1" />
<link rel="canonical" href="https://winternl.com/detecting-manual-syscalls-from-user-mode/" />
<meta name="description" content="By now direct system calls are ubiquitous in offensive tooling. Manual system calls remain effective for evading userland based EDRs. From within userland&#8230;" />
<meta property="og:type" content="article" />
<meta property="og:locale" content="en_US" />
<meta property="og:site_name" content="winternl" />
<meta property="og:title" content="Detecting Manual Syscalls from User Mode" />
<meta property="og:description" content="By now direct system calls are ubiquitous in offensive tooling. Manual system calls remain effective for evading userland based EDRs. From within userland, there has been little answer to this&#8230;" />
<meta property="og:url" content="https://winternl.com/detecting-manual-syscalls-from-user-mode/" />
<meta property="og:image" content="https://winternl.com/wp-content/uploads/2024/09/w-alphabet-icon.png" />
<meta property="og:image:width" content="512" />
<meta property="og:image:height" content="512" />
<meta property="article:published_time" content="2021-02-10T19:17:02+00:00" />
<meta property="article:modified_time" content="2024-09-28T23:37:22+00:00" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:title" content="Detecting Manual Syscalls from User Mode" />
<meta name="twitter:description" content="By now direct system calls are ubiquitous in offensive tooling. Manual system calls remain effective for evading userland based EDRs. From within userland, there has been little answer to this&#8230;" />
<meta name="twitter:image" content="https://winternl.com/wp-content/uploads/2024/09/w-alphabet-icon.png" />
<script type="application/ld+json">{"@context":"https://schema.org","@graph":[{"@type":"WebSite","@id":"https://winternl.com/#/schema/WebSite","url":"https://winternl.com/","name":"winternl","description":"cybersecurity &amp; programming","inLanguage":"en-US","potentialAction":{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https://winternl.com/search/{search_term_string}/"},"query-input":"required name=search_term_string"},"publisher":{"@type":"Organization","@id":"https://winternl.com/#/schema/Organization","name":"winternl","url":"https://winternl.com/","logo":{"@type":"ImageObject","url":"https://winternl.com/wp-content/uploads/2024/09/w-alphabet-icon.png","contentUrl":"https://winternl.com/wp-content/uploads/2024/09/w-alphabet-icon.png","width":512,"height":512,"contentSize":"7253"}}},{"@type":"WebPage","@id":"https://winternl.com/detecting-manual-syscalls-from-user-mode/","url":"https://winternl.com/detecting-manual-syscalls-from-user-mode/","name":"Detecting Manual Syscalls from User Mode &#x2d; winternl","description":"By now direct system calls are ubiquitous in offensive tooling. Manual system calls remain effective for evading userland based EDRs. From within userland&#8230;","inLanguage":"en-US","isPartOf":{"@id":"https://winternl.com/#/schema/WebSite"},"breadcrumb":{"@type":"BreadcrumbList","@id":"https://winternl.com/#/schema/BreadcrumbList","itemListElement":[{"@type":"ListItem","position":1,"item":"https://winternl.com/","name":"winternl"},{"@type":"ListItem","position":2,"item":"https://winternl.com/category/defensive-security/","name":"Category: Defensive Security"},{"@type":"ListItem","position":3,"name":"Detecting Manual Syscalls from User Mode"}]},"potentialAction":{"@type":"ReadAction","target":"https://winternl.com/detecting-manual-syscalls-from-user-mode/"},"datePublished":"2021-02-10T19:17:02+00:00","dateModified":"2024-09-28T23:37:22+00:00","author":{"@type":"Person","@id":"https://winternl.com/#/schema/Person/98c61005048ad033c8dc14836a4a83a2","name":"winternl"}}]}</script>
<!-- / The SEO Framework by Sybre Waaijer | 5.55ms meta | 0.19ms boot -->

<title>Detecting Manual Syscalls from User Mode &#x2d; winternl</title>
<link rel="alternate" type="application/rss+xml" title="winternl &raquo; Feed" href="https://winternl.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="winternl &raquo; Comments Feed" href="https://winternl.com/comments/feed/" />
<script>
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/16.0.1\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/16.0.1\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/winternl.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.8.3"}};
/*! This file is auto-generated */
!function(s,n){var o,i,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),a=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===a[t]})}function u(e,t){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);for(var n=e.getImageData(16,16,1,1),a=0;a<n.data.length;a++)if(0!==n.data[a])return!1;return!0}function f(e,t,n,a){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\udde8\ud83c\uddf6","\ud83c\udde8\u200b\ud83c\uddf6")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!a(e,"\ud83e\udedf")}return!1}function g(e,t,n,a){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):s.createElement("canvas"),o=r.getContext("2d",{willReadFrequently:!0}),i=(o.textBaseline="top",o.font="600 32px Arial",{});return e.forEach(function(e){i[e]=t(o,e,n,a)}),i}function t(e){var t=s.createElement("script");t.src=e,t.defer=!0,s.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",i=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){s.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+g.toString()+"("+[JSON.stringify(i),f.toString(),p.toString(),u.toString()].join(",")+"));",a=new Blob([e],{type:"text/javascript"}),r=new Worker(URL.createObjectURL(a),{name:"wpTestEmojiSupports"});return void(r.onmessage=function(e){c(n=e.data),r.terminate(),t(n)})}catch(e){}c(n=g(i,f,p,u))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
</script>
<style id='wp-block-site-title-inline-css'>
.wp-block-site-title{box-sizing:border-box}.wp-block-site-title :where(a){color:inherit;font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;text-decoration:inherit}
</style>
<style id='wp-block-site-tagline-inline-css'>
.wp-block-site-tagline{box-sizing:border-box}
</style>
<style id='wp-block-group-inline-css'>
.wp-block-group{box-sizing:border-box}:where(.wp-block-group.wp-block-group-is-layout-constrained){position:relative}
</style>
<style id='wp-block-page-list-inline-css'>
.wp-block-navigation .wp-block-page-list{align-items:var(--navigation-layout-align,initial);background-color:inherit;display:flex;flex-direction:var(--navigation-layout-direction,initial);flex-wrap:var(--navigation-layout-wrap,wrap);justify-content:var(--navigation-layout-justify,initial)}.wp-block-navigation .wp-block-navigation-item{background-color:inherit}.wp-block-page-list{box-sizing:border-box}
</style>
<style id='wp-block-navigation-link-inline-css'>
.wp-block-navigation .wp-block-navigation-item__label{overflow-wrap:break-word}.wp-block-navigation .wp-block-navigation-item__description{display:none}.link-ui-tools{border-top:1px solid #f0f0f0;padding:8px}.link-ui-block-inserter{padding-top:8px}.link-ui-block-inserter__back{margin-left:8px;text-transform:uppercase}

				.is-style-arrow-link .wp-block-navigation-item__label:after {
					content: "\2197";
					padding-inline-start: 0.25rem;
					vertical-align: middle;
					text-decoration: none;
					display: inline-block;
				}
</style>
<style id='wp-block-search-inline-css'>
.wp-block-search__button{margin-left:10px;word-break:normal}.wp-block-search__button.has-icon{line-height:0}.wp-block-search__button svg{height:1.25em;min-height:24px;min-width:24px;width:1.25em;fill:currentColor;vertical-align:text-bottom}:where(.wp-block-search__button){border:1px solid #ccc;padding:6px 10px}.wp-block-search__inside-wrapper{display:flex;flex:auto;flex-wrap:nowrap;max-width:100%}.wp-block-search__label{width:100%}.wp-block-search__input{appearance:none;border:1px solid #949494;flex-grow:1;margin-left:0;margin-right:0;min-width:3rem;padding:8px;text-decoration:unset!important}.wp-block-search.wp-block-search__button-only .wp-block-search__button{box-sizing:border-box;display:flex;flex-shrink:0;justify-content:center;margin-left:0;max-width:100%}.wp-block-search.wp-block-search__button-only .wp-block-search__inside-wrapper{min-width:0!important;transition-property:width}.wp-block-search.wp-block-search__button-only .wp-block-search__input{flex-basis:100%;transition-duration:.3s}.wp-block-search.wp-block-search__button-only.wp-block-search__searchfield-hidden,.wp-block-search.wp-block-search__button-only.wp-block-search__searchfield-hidden .wp-block-search__inside-wrapper{overflow:hidden}.wp-block-search.wp-block-search__button-only.wp-block-search__searchfield-hidden .wp-block-search__input{border-left-width:0!important;border-right-width:0!important;flex-basis:0;flex-grow:0;margin:0;min-width:0!important;padding-left:0!important;padding-right:0!important;width:0!important}:where(.wp-block-search__input){font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;text-transform:inherit}:where(.wp-block-search__button-inside .wp-block-search__inside-wrapper){border:1px solid #949494;box-sizing:border-box;padding:4px}:where(.wp-block-search__button-inside .wp-block-search__inside-wrapper) .wp-block-search__input{border:none;border-radius:0;padding:0 4px}:where(.wp-block-search__button-inside .wp-block-search__inside-wrapper) .wp-block-search__input:focus{outline:none}:where(.wp-block-search__button-inside .wp-block-search__inside-wrapper) :where(.wp-block-search__button){padding:4px 8px}.wp-block-search.aligncenter .wp-block-search__inside-wrapper{margin:auto}.wp-block[data-align=right] .wp-block-search.wp-block-search__button-only .wp-block-search__inside-wrapper{float:right}
</style>
<link rel='stylesheet' id='wp-block-navigation-css' href='https://winternl.com/wp-includes/blocks/navigation/style.min.css?ver=6.8.3' media='all' />
<style id='wp-block-post-featured-image-inline-css'>
.wp-block-post-featured-image{margin-left:0;margin-right:0}.wp-block-post-featured-image a{display:block;height:100%}.wp-block-post-featured-image :where(img){box-sizing:border-box;height:auto;max-width:100%;vertical-align:bottom;width:100%}.wp-block-post-featured-image.alignfull img,.wp-block-post-featured-image.alignwide img{width:100%}.wp-block-post-featured-image .wp-block-post-featured-image__overlay.has-background-dim{background-color:#000;inset:0;position:absolute}.wp-block-post-featured-image{position:relative}.wp-block-post-featured-image .wp-block-post-featured-image__overlay.has-background-gradient{background-color:initial}.wp-block-post-featured-image .wp-block-post-featured-image__overlay.has-background-dim-0{opacity:0}.wp-block-post-featured-image .wp-block-post-featured-image__overlay.has-background-dim-10{opacity:.1}.wp-block-post-featured-image .wp-block-post-featured-image__overlay.has-background-dim-20{opacity:.2}.wp-block-post-featured-image .wp-block-post-featured-image__overlay.has-background-dim-30{opacity:.3}.wp-block-post-featured-image .wp-block-post-featured-image__overlay.has-background-dim-40{opacity:.4}.wp-block-post-featured-image .wp-block-post-featured-image__overlay.has-background-dim-50{opacity:.5}.wp-block-post-featured-image .wp-block-post-featured-image__overlay.has-background-dim-60{opacity:.6}.wp-block-post-featured-image .wp-block-post-featured-image__overlay.has-background-dim-70{opacity:.7}.wp-block-post-featured-image .wp-block-post-featured-image__overlay.has-background-dim-80{opacity:.8}.wp-block-post-featured-image .wp-block-post-featured-image__overlay.has-background-dim-90{opacity:.9}.wp-block-post-featured-image .wp-block-post-featured-image__overlay.has-background-dim-100{opacity:1}.wp-block-post-featured-image:where(.alignleft,.alignright){width:100%}
</style>
<style id='wp-block-post-title-inline-css'>
.wp-block-post-title{box-sizing:border-box;word-break:break-word}.wp-block-post-title :where(a){display:inline-block;font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;text-decoration:inherit}
</style>
<style id='wp-block-post-date-inline-css'>
.wp-block-post-date{box-sizing:border-box}
</style>
<style id='wp-block-paragraph-inline-css'>
.is-small-text{font-size:.875em}.is-regular-text{font-size:1em}.is-large-text{font-size:2.25em}.is-larger-text{font-size:3em}.has-drop-cap:not(:focus):first-letter{float:left;font-size:8.4em;font-style:normal;font-weight:100;line-height:.68;margin:.05em .1em 0 0;text-transform:uppercase}body.rtl .has-drop-cap:not(:focus):first-letter{float:none;margin-left:.1em}p.has-drop-cap.has-background{overflow:hidden}:root :where(p.has-background){padding:1.25em 2.375em}:where(p.has-text-color:not(.has-link-color)) a{color:inherit}p.has-text-align-left[style*="writing-mode:vertical-lr"],p.has-text-align-right[style*="writing-mode:vertical-rl"]{rotate:180deg}
</style>
<style id='wp-block-post-author-name-inline-css'>
.wp-block-post-author-name{box-sizing:border-box}
</style>
<style id='wp-block-heading-inline-css'>
h1.has-background,h2.has-background,h3.has-background,h4.has-background,h5.has-background,h6.has-background{padding:1.25em 2.375em}h1.has-text-align-left[style*=writing-mode]:where([style*=vertical-lr]),h1.has-text-align-right[style*=writing-mode]:where([style*=vertical-rl]),h2.has-text-align-left[style*=writing-mode]:where([style*=vertical-lr]),h2.has-text-align-right[style*=writing-mode]:where([style*=vertical-rl]),h3.has-text-align-left[style*=writing-mode]:where([style*=vertical-lr]),h3.has-text-align-right[style*=writing-mode]:where([style*=vertical-rl]),h4.has-text-align-left[style*=writing-mode]:where([style*=vertical-lr]),h4.has-text-align-right[style*=writing-mode]:where([style*=vertical-rl]),h5.has-text-align-left[style*=writing-mode]:where([style*=vertical-lr]),h5.has-text-align-right[style*=writing-mode]:where([style*=vertical-rl]),h6.has-text-align-left[style*=writing-mode]:where([style*=vertical-lr]),h6.has-text-align-right[style*=writing-mode]:where([style*=vertical-rl]){rotate:180deg}

				.is-style-asterisk:before {
					content: '';
					width: 1.5rem;
					height: 3rem;
					background: var(--wp--preset--color--contrast-2, currentColor);
					clip-path: path('M11.93.684v8.039l5.633-5.633 1.216 1.23-5.66 5.66h8.04v1.737H13.2l5.701 5.701-1.23 1.23-5.742-5.742V21h-1.737v-8.094l-5.77 5.77-1.23-1.217 5.743-5.742H.842V9.98h8.162l-5.701-5.7 1.23-1.231 5.66 5.66V.684h1.737Z');
					display: block;
				}

				/* Hide the asterisk if the heading has no content, to avoid using empty headings to display the asterisk only, which is an A11Y issue */
				.is-style-asterisk:empty:before {
					content: none;
				}

				.is-style-asterisk:-moz-only-whitespace:before {
					content: none;
				}

				.is-style-asterisk.has-text-align-center:before {
					margin: 0 auto;
				}

				.is-style-asterisk.has-text-align-right:before {
					margin-left: auto;
				}

				.rtl .is-style-asterisk.has-text-align-left:before {
					margin-right: auto;
				}
</style>
<style id='wp-block-quote-inline-css'>
.wp-block-quote{box-sizing:border-box;overflow-wrap:break-word}.wp-block-quote.is-large:where(:not(.is-style-plain)),.wp-block-quote.is-style-large:where(:not(.is-style-plain)){margin-bottom:1em;padding:0 1em}.wp-block-quote.is-large:where(:not(.is-style-plain)) p,.wp-block-quote.is-style-large:where(:not(.is-style-plain)) p{font-size:1.5em;font-style:italic;line-height:1.6}.wp-block-quote.is-large:where(:not(.is-style-plain)) cite,.wp-block-quote.is-large:where(:not(.is-style-plain)) footer,.wp-block-quote.is-style-large:where(:not(.is-style-plain)) cite,.wp-block-quote.is-style-large:where(:not(.is-style-plain)) footer{font-size:1.125em;text-align:right}.wp-block-quote>cite{display:block}
</style>
<style id='wp-block-list-inline-css'>
ol,ul{box-sizing:border-box}:root :where(.wp-block-list.has-background){padding:1.25em 2.375em}

				ul.is-style-checkmark-list {
					list-style-type: "\2713";
				}

				ul.is-style-checkmark-list li {
					padding-inline-start: 1ch;
				}
</style>
<link rel='stylesheet' id='kevinbatdorf-code-block-pro-style-css' href='https://winternl.com/wp-content/plugins/code-block-pro/build/style-index.css?ver=1.13.0' media='all' />
<style id='wp-block-video-inline-css'>
.wp-block-video{box-sizing:border-box}.wp-block-video video{vertical-align:middle;width:100%}@supports (position:sticky){.wp-block-video [poster]{object-fit:cover}}.wp-block-video.aligncenter{text-align:center}.wp-block-video :where(figcaption){margin-bottom:1em;margin-top:.5em}
</style>
<style id='wp-block-post-content-inline-css'>
.wp-block-post-content{display:flow-root}
</style>
<style id='wp-block-post-terms-inline-css'>
.wp-block-post-terms{box-sizing:border-box}.wp-block-post-terms .wp-block-post-terms__separator{white-space:pre-wrap}

				.is-style-pill a,
				.is-style-pill span:not([class], [data-rich-text-placeholder]) {
					display: inline-block;
					background-color: var(--wp--preset--color--base-2);
					padding: 0.375rem 0.875rem;
					border-radius: var(--wp--preset--spacing--20);
				}

				.is-style-pill a:hover {
					background-color: var(--wp--preset--color--contrast-3);
				}
</style>
<style id='wp-block-spacer-inline-css'>
.wp-block-spacer{clear:both}
</style>
<style id='wp-block-separator-inline-css'>
@charset "UTF-8";.wp-block-separator{border:none;border-top:2px solid}:root :where(.wp-block-separator.is-style-dots){height:auto;line-height:1;text-align:center}:root :where(.wp-block-separator.is-style-dots):before{color:currentColor;content:"···";font-family:serif;font-size:1.5em;letter-spacing:2em;padding-left:2em}.wp-block-separator.is-style-dots{background:none!important;border:none!important}
</style>
<style id='wp-block-comments-inline-css'>
.wp-block-post-comments{box-sizing:border-box}.wp-block-post-comments .alignleft{float:left}.wp-block-post-comments .alignright{float:right}.wp-block-post-comments .navigation:after{clear:both;content:"";display:table}.wp-block-post-comments .commentlist{clear:both;list-style:none;margin:0;padding:0}.wp-block-post-comments .commentlist .comment{min-height:2.25em;padding-left:3.25em}.wp-block-post-comments .commentlist .comment p{font-size:1em;line-height:1.8;margin:1em 0}.wp-block-post-comments .commentlist .children{list-style:none;margin:0;padding:0}.wp-block-post-comments .comment-author{line-height:1.5}.wp-block-post-comments .comment-author .avatar{border-radius:1.5em;display:block;float:left;height:2.5em;margin-right:.75em;margin-top:.5em;width:2.5em}.wp-block-post-comments .comment-author cite{font-style:normal}.wp-block-post-comments .comment-meta{font-size:.875em;line-height:1.5}.wp-block-post-comments .comment-meta b{font-weight:400}.wp-block-post-comments .comment-meta .comment-awaiting-moderation{display:block;margin-bottom:1em;margin-top:1em}.wp-block-post-comments .comment-body .commentmetadata{font-size:.875em}.wp-block-post-comments .comment-form-author label,.wp-block-post-comments .comment-form-comment label,.wp-block-post-comments .comment-form-email label,.wp-block-post-comments .comment-form-url label{display:block;margin-bottom:.25em}.wp-block-post-comments .comment-form input:not([type=submit]):not([type=checkbox]),.wp-block-post-comments .comment-form textarea{box-sizing:border-box;display:block;width:100%}.wp-block-post-comments .comment-form-cookies-consent{display:flex;gap:.25em}.wp-block-post-comments .comment-form-cookies-consent #wp-comment-cookies-consent{margin-top:.35em}.wp-block-post-comments .comment-reply-title{margin-bottom:0}.wp-block-post-comments .comment-reply-title :where(small){font-size:var(--wp--preset--font-size--medium,smaller);margin-left:.5em}.wp-block-post-comments .reply{font-size:.875em;margin-bottom:1.4em}.wp-block-post-comments input:not([type=submit]),.wp-block-post-comments textarea{border:1px solid #949494;font-family:inherit;font-size:1em}.wp-block-post-comments input:not([type=submit]):not([type=checkbox]),.wp-block-post-comments textarea{padding:calc(.667em + 2px)}:where(.wp-block-post-comments input[type=submit]){border:none}.wp-block-comments{box-sizing:border-box}
</style>
<style id='wp-block-post-navigation-link-inline-css'>
.wp-block-post-navigation-link .wp-block-post-navigation-link__arrow-previous{display:inline-block;margin-right:1ch}.wp-block-post-navigation-link .wp-block-post-navigation-link__arrow-previous:not(.is-arrow-chevron){transform:scaleX(1)}.wp-block-post-navigation-link .wp-block-post-navigation-link__arrow-next{display:inline-block;margin-left:1ch}.wp-block-post-navigation-link .wp-block-post-navigation-link__arrow-next:not(.is-arrow-chevron){transform:scaleX(1)}.wp-block-post-navigation-link.has-text-align-left[style*="writing-mode: vertical-lr"],.wp-block-post-navigation-link.has-text-align-right[style*="writing-mode: vertical-rl"]{rotate:180deg}
</style>
<style id='wp-emoji-styles-inline-css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<style id='wp-block-library-inline-css'>
:root{--wp-admin-theme-color:#007cba;--wp-admin-theme-color--rgb:0,124,186;--wp-admin-theme-color-darker-10:#006ba1;--wp-admin-theme-color-darker-10--rgb:0,107,161;--wp-admin-theme-color-darker-20:#005a87;--wp-admin-theme-color-darker-20--rgb:0,90,135;--wp-admin-border-width-focus:2px;--wp-block-synced-color:#7a00df;--wp-block-synced-color--rgb:122,0,223;--wp-bound-block-color:var(--wp-block-synced-color)}@media (min-resolution:192dpi){:root{--wp-admin-border-width-focus:1.5px}}.wp-element-button{cursor:pointer}:root{--wp--preset--font-size--normal:16px;--wp--preset--font-size--huge:42px}:root .has-very-light-gray-background-color{background-color:#eee}:root .has-very-dark-gray-background-color{background-color:#313131}:root .has-very-light-gray-color{color:#eee}:root .has-very-dark-gray-color{color:#313131}:root .has-vivid-green-cyan-to-vivid-cyan-blue-gradient-background{background:linear-gradient(135deg,#00d084,#0693e3)}:root .has-purple-crush-gradient-background{background:linear-gradient(135deg,#34e2e4,#4721fb 50%,#ab1dfe)}:root .has-hazy-dawn-gradient-background{background:linear-gradient(135deg,#faaca8,#dad0ec)}:root .has-subdued-olive-gradient-background{background:linear-gradient(135deg,#fafae1,#67a671)}:root .has-atomic-cream-gradient-background{background:linear-gradient(135deg,#fdd79a,#004a59)}:root .has-nightshade-gradient-background{background:linear-gradient(135deg,#330968,#31cdcf)}:root .has-midnight-gradient-background{background:linear-gradient(135deg,#020381,#2874fc)}.has-regular-font-size{font-size:1em}.has-larger-font-size{font-size:2.625em}.has-normal-font-size{font-size:var(--wp--preset--font-size--normal)}.has-huge-font-size{font-size:var(--wp--preset--font-size--huge)}.has-text-align-center{text-align:center}.has-text-align-left{text-align:left}.has-text-align-right{text-align:right}#end-resizable-editor-section{display:none}.aligncenter{clear:both}.items-justified-left{justify-content:flex-start}.items-justified-center{justify-content:center}.items-justified-right{justify-content:flex-end}.items-justified-space-between{justify-content:space-between}.screen-reader-text{border:0;clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px;word-wrap:normal!important}.screen-reader-text:focus{background-color:#ddd;clip-path:none;color:#444;display:block;font-size:1em;height:auto;left:5px;line-height:normal;padding:15px 23px 14px;text-decoration:none;top:5px;width:auto;z-index:100000}html :where(.has-border-color){border-style:solid}html :where([style*=border-top-color]){border-top-style:solid}html :where([style*=border-right-color]){border-right-style:solid}html :where([style*=border-bottom-color]){border-bottom-style:solid}html :where([style*=border-left-color]){border-left-style:solid}html :where([style*=border-width]){border-style:solid}html :where([style*=border-top-width]){border-top-style:solid}html :where([style*=border-right-width]){border-right-style:solid}html :where([style*=border-bottom-width]){border-bottom-style:solid}html :where([style*=border-left-width]){border-left-style:solid}html :where(img[class*=wp-image-]){height:auto;max-width:100%}:where(figure){margin:0 0 1em}html :where(.is-position-sticky){--wp-admin--admin-bar--position-offset:var(--wp-admin--admin-bar--height,0px)}@media screen and (max-width:600px){html :where(.is-position-sticky){--wp-admin--admin-bar--position-offset:0px}}
</style>
<style id='global-styles-inline-css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--color--base: #f9f9f9;--wp--preset--color--base-2: #ffffff;--wp--preset--color--contrast: #111111;--wp--preset--color--contrast-2: #636363;--wp--preset--color--contrast-3: #A4A4A4;--wp--preset--color--accent: #cfcabe;--wp--preset--color--accent-2: #c2a990;--wp--preset--color--accent-3: #d8613c;--wp--preset--color--accent-4: #b1c5a4;--wp--preset--color--accent-5: #b5bdbc;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--gradient--gradient-1: linear-gradient(to bottom, #cfcabe 0%, #F9F9F9 100%);--wp--preset--gradient--gradient-2: linear-gradient(to bottom, #C2A990 0%, #F9F9F9 100%);--wp--preset--gradient--gradient-3: linear-gradient(to bottom, #D8613C 0%, #F9F9F9 100%);--wp--preset--gradient--gradient-4: linear-gradient(to bottom, #B1C5A4 0%, #F9F9F9 100%);--wp--preset--gradient--gradient-5: linear-gradient(to bottom, #B5BDBC 0%, #F9F9F9 100%);--wp--preset--gradient--gradient-6: linear-gradient(to bottom, #A4A4A4 0%, #F9F9F9 100%);--wp--preset--gradient--gradient-7: linear-gradient(to bottom, #cfcabe 50%, #F9F9F9 50%);--wp--preset--gradient--gradient-8: linear-gradient(to bottom, #C2A990 50%, #F9F9F9 50%);--wp--preset--gradient--gradient-9: linear-gradient(to bottom, #D8613C 50%, #F9F9F9 50%);--wp--preset--gradient--gradient-10: linear-gradient(to bottom, #B1C5A4 50%, #F9F9F9 50%);--wp--preset--gradient--gradient-11: linear-gradient(to bottom, #B5BDBC 50%, #F9F9F9 50%);--wp--preset--gradient--gradient-12: linear-gradient(to bottom, #A4A4A4 50%, #F9F9F9 50%);--wp--preset--font-size--small: 0.9rem;--wp--preset--font-size--medium: 1.05rem;--wp--preset--font-size--large: clamp(1.39rem, 1.39rem + ((1vw - 0.2rem) * 0.767), 1.85rem);--wp--preset--font-size--x-large: clamp(1.85rem, 1.85rem + ((1vw - 0.2rem) * 1.083), 2.5rem);--wp--preset--font-size--xx-large: clamp(2.5rem, 2.5rem + ((1vw - 0.2rem) * 1.283), 3.27rem);--wp--preset--font-family--body: "Inter", sans-serif;--wp--preset--font-family--heading: Cardo;--wp--preset--font-family--system-sans-serif: -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Cantarell, Ubuntu, roboto, noto, arial, sans-serif;--wp--preset--font-family--system-serif: Iowan Old Style, Apple Garamond, Baskerville, Times New Roman, Droid Serif, Times, Source Serif Pro, serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol;--wp--preset--font-family--open-sans: "Open Sans", sans-serif;--wp--preset--font-family--inconsolata: Inconsolata, monospace;--wp--preset--spacing--20: min(1.5rem, 2vw);--wp--preset--spacing--30: min(2.5rem, 3vw);--wp--preset--spacing--40: min(4rem, 5vw);--wp--preset--spacing--50: min(6.5rem, 8vw);--wp--preset--spacing--60: min(10.5rem, 13vw);--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--spacing--10: 1rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:root { --wp--style--global--content-size: 620px;--wp--style--global--wide-size: 1280px; }:where(body) { margin: 0; }.wp-site-blocks { padding-top: var(--wp--style--root--padding-top); padding-bottom: var(--wp--style--root--padding-bottom); }.has-global-padding { padding-right: var(--wp--style--root--padding-right); padding-left: var(--wp--style--root--padding-left); }.has-global-padding > .alignfull { margin-right: calc(var(--wp--style--root--padding-right) * -1); margin-left: calc(var(--wp--style--root--padding-left) * -1); }.has-global-padding :where(:not(.alignfull.is-layout-flow) > .has-global-padding:not(.wp-block-block, .alignfull)) { padding-right: 0; padding-left: 0; }.has-global-padding :where(:not(.alignfull.is-layout-flow) > .has-global-padding:not(.wp-block-block, .alignfull)) > .alignfull { margin-left: 0; margin-right: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.wp-site-blocks) > * { margin-block-start: 1.2rem; margin-block-end: 0; }:where(.wp-site-blocks) > :first-child { margin-block-start: 0; }:where(.wp-site-blocks) > :last-child { margin-block-end: 0; }:root { --wp--style--block-gap: 1.2rem; }:root :where(.is-layout-flow) > :first-child{margin-block-start: 0;}:root :where(.is-layout-flow) > :last-child{margin-block-end: 0;}:root :where(.is-layout-flow) > *{margin-block-start: 1.2rem;margin-block-end: 0;}:root :where(.is-layout-constrained) > :first-child{margin-block-start: 0;}:root :where(.is-layout-constrained) > :last-child{margin-block-end: 0;}:root :where(.is-layout-constrained) > *{margin-block-start: 1.2rem;margin-block-end: 0;}:root :where(.is-layout-flex){gap: 1.2rem;}:root :where(.is-layout-grid){gap: 1.2rem;}.is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}.is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}.is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}.is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}.is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}.is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}.is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}.is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}body{background-color: var(--wp--preset--color--base);color: var(--wp--preset--color--contrast);font-family: var(--wp--preset--font-family--inconsolata);font-size: var(--wp--preset--font-size--medium);font-style: normal;font-weight: 400;line-height: 1.55;--wp--style--root--padding-top: 0px;--wp--style--root--padding-right: var(--wp--preset--spacing--50);--wp--style--root--padding-bottom: 0px;--wp--style--root--padding-left: var(--wp--preset--spacing--50);}a:where(:not(.wp-element-button)){color: var(--wp--preset--color--contrast);font-family: var(--wp--preset--font-family--inconsolata);text-decoration: underline;}:root :where(a:where(:not(.wp-element-button)):hover){text-decoration: none;}h1, h2, h3, h4, h5, h6{color: var(--wp--preset--color--contrast);font-family: var(--wp--preset--font-family--inconsolata);font-weight: 400;line-height: 1.2;}h1{font-size: var(--wp--preset--font-size--xx-large);line-height: 1.15;}h2{font-size: var(--wp--preset--font-size--x-large);}h3{font-size: var(--wp--preset--font-size--large);}h4{font-size: clamp(1.1rem, 1.1rem + ((1vw - 0.2rem) * 0.767), 1.5rem);}h5{font-size: var(--wp--preset--font-size--medium);}h6{font-size: var(--wp--preset--font-size--small);}:root :where(.wp-element-button, .wp-block-button__link){background-color: var(--wp--preset--color--contrast);border-radius: .33rem;border-color: var(--wp--preset--color--contrast);border-width: 0;color: var(--wp--preset--color--base);font-family: var(--wp--preset--font-family--inconsolata);font-size: var(--wp--preset--font-size--small);font-style: normal;font-weight: 500;line-height: inherit;padding-top: 0.6rem;padding-right: 1rem;padding-bottom: 0.6rem;padding-left: 1rem;text-decoration: none;}:root :where(.wp-element-button:hover, .wp-block-button__link:hover){background-color: var(--wp--preset--color--contrast-2);border-color: var(--wp--preset--color--contrast-2);color: var(--wp--preset--color--base);}:root :where(.wp-element-button:focus, .wp-block-button__link:focus){background-color: var(--wp--preset--color--contrast-2);border-color: var(--wp--preset--color--contrast-2);color: var(--wp--preset--color--base);outline-color: var(--wp--preset--color--contrast);outline-offset: 2px;}:root :where(.wp-element-button:active, .wp-block-button__link:active){background-color: var(--wp--preset--color--contrast);color: var(--wp--preset--color--base);}:root :where(.wp-element-caption, .wp-block-audio figcaption, .wp-block-embed figcaption, .wp-block-gallery figcaption, .wp-block-image figcaption, .wp-block-table figcaption, .wp-block-video figcaption){color: var(--wp--preset--color--contrast-2);font-family: var(--wp--preset--font-family--inconsolata);font-size: 0.8rem;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-base-color{color: var(--wp--preset--color--base) !important;}.has-base-2-color{color: var(--wp--preset--color--base-2) !important;}.has-contrast-color{color: var(--wp--preset--color--contrast) !important;}.has-contrast-2-color{color: var(--wp--preset--color--contrast-2) !important;}.has-contrast-3-color{color: var(--wp--preset--color--contrast-3) !important;}.has-accent-color{color: var(--wp--preset--color--accent) !important;}.has-accent-2-color{color: var(--wp--preset--color--accent-2) !important;}.has-accent-3-color{color: var(--wp--preset--color--accent-3) !important;}.has-accent-4-color{color: var(--wp--preset--color--accent-4) !important;}.has-accent-5-color{color: var(--wp--preset--color--accent-5) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-base-background-color{background-color: var(--wp--preset--color--base) !important;}.has-base-2-background-color{background-color: var(--wp--preset--color--base-2) !important;}.has-contrast-background-color{background-color: var(--wp--preset--color--contrast) !important;}.has-contrast-2-background-color{background-color: var(--wp--preset--color--contrast-2) !important;}.has-contrast-3-background-color{background-color: var(--wp--preset--color--contrast-3) !important;}.has-accent-background-color{background-color: var(--wp--preset--color--accent) !important;}.has-accent-2-background-color{background-color: var(--wp--preset--color--accent-2) !important;}.has-accent-3-background-color{background-color: var(--wp--preset--color--accent-3) !important;}.has-accent-4-background-color{background-color: var(--wp--preset--color--accent-4) !important;}.has-accent-5-background-color{background-color: var(--wp--preset--color--accent-5) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-base-border-color{border-color: var(--wp--preset--color--base) !important;}.has-base-2-border-color{border-color: var(--wp--preset--color--base-2) !important;}.has-contrast-border-color{border-color: var(--wp--preset--color--contrast) !important;}.has-contrast-2-border-color{border-color: var(--wp--preset--color--contrast-2) !important;}.has-contrast-3-border-color{border-color: var(--wp--preset--color--contrast-3) !important;}.has-accent-border-color{border-color: var(--wp--preset--color--accent) !important;}.has-accent-2-border-color{border-color: var(--wp--preset--color--accent-2) !important;}.has-accent-3-border-color{border-color: var(--wp--preset--color--accent-3) !important;}.has-accent-4-border-color{border-color: var(--wp--preset--color--accent-4) !important;}.has-accent-5-border-color{border-color: var(--wp--preset--color--accent-5) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-gradient-1-gradient-background{background: var(--wp--preset--gradient--gradient-1) !important;}.has-gradient-2-gradient-background{background: var(--wp--preset--gradient--gradient-2) !important;}.has-gradient-3-gradient-background{background: var(--wp--preset--gradient--gradient-3) !important;}.has-gradient-4-gradient-background{background: var(--wp--preset--gradient--gradient-4) !important;}.has-gradient-5-gradient-background{background: var(--wp--preset--gradient--gradient-5) !important;}.has-gradient-6-gradient-background{background: var(--wp--preset--gradient--gradient-6) !important;}.has-gradient-7-gradient-background{background: var(--wp--preset--gradient--gradient-7) !important;}.has-gradient-8-gradient-background{background: var(--wp--preset--gradient--gradient-8) !important;}.has-gradient-9-gradient-background{background: var(--wp--preset--gradient--gradient-9) !important;}.has-gradient-10-gradient-background{background: var(--wp--preset--gradient--gradient-10) !important;}.has-gradient-11-gradient-background{background: var(--wp--preset--gradient--gradient-11) !important;}.has-gradient-12-gradient-background{background: var(--wp--preset--gradient--gradient-12) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}.has-xx-large-font-size{font-size: var(--wp--preset--font-size--xx-large) !important;}.has-body-font-family{font-family: var(--wp--preset--font-family--body) !important;}.has-heading-font-family{font-family: var(--wp--preset--font-family--heading) !important;}.has-system-sans-serif-font-family{font-family: var(--wp--preset--font-family--system-sans-serif) !important;}.has-system-serif-font-family{font-family: var(--wp--preset--font-family--system-serif) !important;}.has-open-sans-font-family{font-family: var(--wp--preset--font-family--open-sans) !important;}.has-inconsolata-font-family{font-family: var(--wp--preset--font-family--inconsolata) !important;}:where(.wp-site-blocks *:focus){outline-width:2px;outline-style:solid}
:root :where(.wp-block-list){padding-left: var(--wp--preset--spacing--10);}
:root :where(.wp-block-navigation){font-weight: 500;}
:root :where(.wp-block-navigation a:where(:not(.wp-element-button))){text-decoration: none;}
:root :where(.wp-block-navigation a:where(:not(.wp-element-button)):hover){text-decoration: underline;}
:root :where(.wp-block-post-author-name){font-size: var(--wp--preset--font-size--small);}
:root :where(.wp-block-post-author-name a:where(:not(.wp-element-button))){text-decoration: none;}
:root :where(.wp-block-post-author-name a:where(:not(.wp-element-button)):hover){text-decoration: underline;}
:root :where(.wp-block-post-date){color: var(--wp--preset--color--contrast-2);font-size: var(--wp--preset--font-size--small);}
:root :where(.wp-block-post-date a:where(:not(.wp-element-button))){color: var(--wp--preset--color--contrast-2);text-decoration: none;}
:root :where(.wp-block-post-date a:where(:not(.wp-element-button)):hover){text-decoration: underline;}
:root :where(.wp-block-post-featured-image img, .wp-block-post-featured-image .block-editor-media-placeholder, .wp-block-post-featured-image .wp-block-post-featured-image__overlay){border-radius: var(--wp--preset--spacing--20);}
:root :where(.wp-block-post-terms){font-size: var(--wp--preset--font-size--small);}:root :where(.wp-block-post-terms .wp-block-post-terms__prefix){color: var(--wp--preset--color--contrast-2);}
:root :where(.wp-block-post-terms a:where(:not(.wp-element-button))){text-decoration: none;}
:root :where(.wp-block-post-terms a:where(:not(.wp-element-button)):hover){text-decoration: underline;}
:root :where(.wp-block-post-title a:where(:not(.wp-element-button))){text-decoration: none;}
:root :where(.wp-block-post-title a:where(:not(.wp-element-button)):hover){text-decoration: underline;}
:root :where(.wp-block-quote){background-color: var(--wp--preset--color--base-2);border-radius: var(--wp--preset--spacing--20);font-family: var(--wp--preset--font-family--heading);font-size: var(--wp--preset--font-size--large);font-style: italic;line-height: 1.3;padding-top: calc(var(--wp--preset--spacing--30) + 0.75rem);padding-right: calc(var(--wp--preset--spacing--30) + 0.75rem);padding-bottom: calc(var(--wp--preset--spacing--30) + 0.75rem);padding-left: calc(var(--wp--preset--spacing--30) + 0.75rem);}:root :where(.wp-block-quote :where(p)){margin-block-start:0;margin-block-end:calc(var(--wp--preset--spacing--10) + 0.5rem);}:root :where(.wp-block-quote :where(:last-child)){margin-block-end:0;}:root :where(.wp-block-quote.has-text-align-right.is-style-plain, .rtl .is-style-plain.wp-block-quote:not(.has-text-align-center):not(.has-text-align-left)){border-width: 0 2px 0 0;padding-left:calc(var(--wp--preset--spacing--20) + 0.5rem);padding-right:calc(var(--wp--preset--spacing--20) + 0.5rem);}:root :where(.wp-block-quote.has-text-align-left.is-style-plain, body:not(.rtl) .is-style-plain.wp-block-quote:not(.has-text-align-center):not(.has-text-align-right)){border-width: 0 0 0 2px;padding-left:calc(var(--wp--preset--spacing--20) + 0.5rem);padding-right:calc(var(--wp--preset--spacing--20) + 0.5rem)}
:root :where(.wp-block-quote cite){font-family: var(--wp--preset--font-family--body);font-size: var(--wp--preset--font-size--small);font-style: normal;}
:root :where(.wp-block-search .wp-block-search__label, .wp-block-search .wp-block-search__input, .wp-block-search .wp-block-search__button){font-size: var(--wp--preset--font-size--small);}:root :where(.wp-block-search .wp-block-search__input){border-radius:.33rem}
:root :where(.wp-block-search .wp-element-button,.wp-block-search  .wp-block-button__link){border-radius: .33rem;}
:root :where(.wp-block-separator){border-color: currentColor;border-width: 0 0 1px 0;border-style: solid;color: var(--wp--preset--color--contrast);}:root :where(.wp-block-separator){}:root :where(.wp-block-separator:not(.is-style-wide):not(.is-style-dots):not(.alignwide):not(.alignfull)){width: var(--wp--preset--spacing--60)}
:root :where(.wp-block-site-tagline){color: var(--wp--preset--color--contrast-2);font-size: var(--wp--preset--font-size--small);}
:root :where(.wp-block-site-title){font-family: var(--wp--preset--font-family--body);font-size: clamp(0.875rem, 0.875rem + ((1vw - 0.2rem) * 0.542), 1.2rem);font-style: normal;font-weight: 600;}
:root :where(.wp-block-site-title a:where(:not(.wp-element-button))){text-decoration: none;}
:root :where(.wp-block-site-title a:where(:not(.wp-element-button)):hover){text-decoration: none;}
</style>
<style id='core-block-supports-inline-css'>
.wp-elements-d6202aa7d337f2ce08aedc8ed261a84e a:where(:not(.wp-element-button)){color:var(--wp--preset--color--contrast);}.wp-container-core-navigation-is-layout-f665d2b5{justify-content:flex-end;}.wp-container-core-group-is-layout-b2891da8{justify-content:space-between;}.wp-container-core-group-is-layout-23b1a4dc > .alignfull{margin-right:calc(var(--wp--preset--spacing--30) * -1);margin-left:calc(var(--wp--preset--spacing--30) * -1);}.wp-container-core-group-is-layout-dfe8e91f{gap:0.3em;justify-content:flex-start;}.wp-container-core-group-is-layout-6215b345{gap:var(--wp--preset--spacing--10);flex-direction:column;align-items:stretch;}.wp-container-core-group-is-layout-e716077d > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width:1000px;margin-left:auto !important;margin-right:auto !important;}.wp-container-core-group-is-layout-e716077d > .alignwide{max-width:1000px;}.wp-container-core-group-is-layout-e716077d .alignfull{max-width:none;}.wp-container-core-post-content-is-layout-704e782a > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width:1000px;margin-left:auto !important;margin-right:auto !important;}.wp-container-core-post-content-is-layout-704e782a > .alignwide{max-width:1000px;}.wp-container-core-post-content-is-layout-704e782a .alignfull{max-width:none;}.wp-container-core-group-is-layout-c08a3ef2{flex-wrap:nowrap;justify-content:space-between;}.wp-container-core-group-is-layout-fe1ad1e6{gap:6px;}.wp-container-core-group-is-layout-e5edad21{justify-content:space-between;align-items:flex-start;}
</style>
<style id='wp-block-template-skip-link-inline-css'>

		.skip-link.screen-reader-text {
			border: 0;
			clip-path: inset(50%);
			height: 1px;
			margin: -1px;
			overflow: hidden;
			padding: 0;
			position: absolute !important;
			width: 1px;
			word-wrap: normal !important;
		}

		.skip-link.screen-reader-text:focus {
			background-color: #eee;
			clip-path: none;
			color: #444;
			display: block;
			font-size: 1em;
			height: auto;
			left: 5px;
			line-height: normal;
			padding: 15px 23px 14px;
			text-decoration: none;
			top: 5px;
			width: auto;
			z-index: 100000;
		}
</style>
<link rel="https://api.w.org/" href="https://winternl.com/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://winternl.com/wp-json/wp/v2/posts/1139" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://winternl.com/xmlrpc.php?rsd" />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://winternl.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwinternl.com%2Fdetecting-manual-syscalls-from-user-mode%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://winternl.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwinternl.com%2Fdetecting-manual-syscalls-from-user-mode%2F&#038;format=xml" />
<script type="importmap" id="wp-importmap">
{"imports":{"@wordpress\/interactivity":"https:\/\/winternl.com\/wp-includes\/js\/dist\/script-modules\/interactivity\/index.min.js?ver=55aebb6e0a16726baffb"}}
</script>
<script type="module" src="https://winternl.com/wp-includes/js/dist/script-modules/block-library/navigation/view.min.js?ver=61572d447d60c0aa5240" id="@wordpress/block-library/navigation/view-js-module"></script>
<script type="module" src="https://winternl.com/wp-includes/js/dist/script-modules/block-library/search/view.min.js?ver=208bf143e4074549fa89" id="@wordpress/block-library/search/view-js-module"></script>
<link rel="modulepreload" href="https://winternl.com/wp-includes/js/dist/script-modules/interactivity/index.min.js?ver=55aebb6e0a16726baffb" id="@wordpress/interactivity-js-modulepreload"><style class='wp-fonts-local'>
@font-face{font-family:Inter;font-style:normal;font-weight:300 900;font-display:fallback;src:url('https://winternl.com/wp-content/themes/twentytwentyfour/assets/fonts/inter/Inter-VariableFont_slnt,wght.woff2') format('woff2');font-stretch:normal;}
@font-face{font-family:Cardo;font-style:normal;font-weight:400;font-display:fallback;src:url('https://winternl.com/wp-content/themes/twentytwentyfour/assets/fonts/cardo/cardo_normal_400.woff2') format('woff2');}
@font-face{font-family:Cardo;font-style:italic;font-weight:400;font-display:fallback;src:url('https://winternl.com/wp-content/themes/twentytwentyfour/assets/fonts/cardo/cardo_italic_400.woff2') format('woff2');}
@font-face{font-family:Cardo;font-style:normal;font-weight:700;font-display:fallback;src:url('https://winternl.com/wp-content/themes/twentytwentyfour/assets/fonts/cardo/cardo_normal_700.woff2') format('woff2');}
@font-face{font-family:"Open Sans";font-style:normal;font-weight:300;font-display:fallback;src:url('http://172-236-100-146.ip.linodeusercontent.com/wp-content/uploads/fonts/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsiH0C4iY1M2xLER.woff2') format('woff2');}
@font-face{font-family:Inconsolata;font-style:normal;font-weight:300;font-display:fallback;src:url('http://172-236-100-146.ip.linodeusercontent.com/wp-content/uploads/fonts/QldgNThLqRwH-OJ1UHjlKENVzkWGVkL3GZQmAwLYxYWI2qfdm7Lpp9s8aR_8lleY2co.woff2') format('woff2');}
</style>
<link rel="icon" href="https://winternl.com/wp-content/uploads/2024/09/w-alphabet-icon-150x150.png" sizes="32x32" />
<link rel="icon" href="https://winternl.com/wp-content/uploads/2024/09/w-alphabet-icon-300x300.png" sizes="192x192" />
<link rel="apple-touch-icon" href="https://winternl.com/wp-content/uploads/2024/09/w-alphabet-icon-300x300.png" />
<meta name="msapplication-TileImage" content="https://winternl.com/wp-content/uploads/2024/09/w-alphabet-icon-300x300.png" />
</head>

<body class="wp-singular post-template-default single single-post postid-1139 single-format-standard wp-embed-responsive wp-theme-twentytwentyfour">

<div class="wp-site-blocks"><header class="wp-block-template-part">
<div class="wp-block-group alignfull has-global-padding is-layout-constrained wp-container-core-group-is-layout-23b1a4dc wp-block-group-is-layout-constrained" style="padding-top:var(--wp--preset--spacing--30);padding-right:var(--wp--preset--spacing--30);padding-bottom:var(--wp--preset--spacing--30);padding-left:var(--wp--preset--spacing--30)">
<div class="wp-block-group alignwide is-content-justification-space-between is-layout-flex wp-container-core-group-is-layout-b2891da8 wp-block-group-is-layout-flex">
<div class="wp-block-group is-layout-flex wp-block-group-is-layout-flex"><h1 class="has-link-color wp-elements-d6202aa7d337f2ce08aedc8ed261a84e wp-block-site-title"><a href="https://winternl.com" target="_self" rel="home">winternl</a></h1>

<p class="wp-block-site-tagline">cybersecurity &amp; programming</p></div>


<nav class="is-responsive items-justified-right wp-block-navigation is-content-justification-right is-layout-flex wp-container-core-navigation-is-layout-f665d2b5 wp-block-navigation-is-layout-flex" aria-label="Navigation" 
		 data-wp-interactive="core/navigation" data-wp-context='{"overlayOpenedBy":{"click":false,"hover":false,"focus":false},"type":"overlay","roleAttribute":"","ariaLabel":"Menu"}'><button aria-haspopup="dialog" aria-label="Open menu" class="wp-block-navigation__responsive-container-open" 
				data-wp-on-async--click="actions.openMenuOnClick"
				data-wp-on--keydown="actions.handleMenuKeydown"
			><svg width="24" height="24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-hidden="true" focusable="false"><rect x="4" y="7.5" width="16" height="1.5" /><rect x="4" y="15" width="16" height="1.5" /></svg></button>
				<div class="wp-block-navigation__responsive-container"  id="modal-2" 
				data-wp-class--has-modal-open="state.isMenuOpen"
				data-wp-class--is-menu-open="state.isMenuOpen"
				data-wp-watch="callbacks.initMenu"
				data-wp-on--keydown="actions.handleMenuKeydown"
				data-wp-on-async--focusout="actions.handleMenuFocusout"
				tabindex="-1"
			>
					<div class="wp-block-navigation__responsive-close" tabindex="-1">
						<div class="wp-block-navigation__responsive-dialog" 
				data-wp-bind--aria-modal="state.ariaModal"
				data-wp-bind--aria-label="state.ariaLabel"
				data-wp-bind--role="state.roleAttribute"
			>
							<button aria-label="Close menu" class="wp-block-navigation__responsive-container-close" 
				data-wp-on-async--click="actions.closeMenuOnClick"
			><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" aria-hidden="true" focusable="false"><path d="m13.06 12 6.47-6.47-1.06-1.06L12 10.94 5.53 4.47 4.47 5.53 10.94 12l-6.47 6.47 1.06 1.06L12 13.06l6.47 6.47 1.06-1.06L13.06 12Z"></path></svg></button>
							<div class="wp-block-navigation__responsive-container-content" 
				data-wp-watch="callbacks.focusFirstElement"
			 id="modal-2-content">
								<ul class="wp-block-navigation__container is-responsive items-justified-right wp-block-navigation"><ul class="wp-block-page-list"><li class="wp-block-pages-list__item wp-block-navigation-item open-on-hover-click"><a class="wp-block-pages-list__item__link wp-block-navigation-item__content" href="https://winternl.com/about/">about</a></li></ul><li class=" wp-block-navigation-item wp-block-navigation-link"><a class="wp-block-navigation-item__content"  href="https://github.com/jackullrich" target="_blank"  ><span class="wp-block-navigation-item__label">github</span></a></li><li class=" wp-block-navigation-item wp-block-navigation-link"><a class="wp-block-navigation-item__content"  href="https://x.com/winternl_t" target="_blank"  ><span class="wp-block-navigation-item__label">xitter</span></a></li></ul><form role="search" method="get" action="https://winternl.com/" class="wp-block-search__button-only wp-block-search__searchfield-hidden wp-block-search__icon-button wp-block-search" 
		 data-wp-interactive="core/search"
		 data-wp-context='{"isSearchInputVisible":false,"inputId":"wp-block-search__input-1","ariaLabelExpanded":"Submit Search","ariaLabelCollapsed":"Expand search field"}'
		 data-wp-class--wp-block-search__searchfield-hidden="!context.isSearchInputVisible"
		 data-wp-on-async--keydown="actions.handleSearchKeydown"
		 data-wp-on-async--focusout="actions.handleSearchFocusout"
		><label class="wp-block-search__label screen-reader-text" for="wp-block-search__input-1" >Search</label><div class="wp-block-search__inside-wrapper " ><input aria-hidden="true" class="wp-block-search__input has-small-font-size" data-wp-bind--aria-hidden="!context.isSearchInputVisible" data-wp-bind--tabindex="state.tabindex" id="wp-block-search__input-1" placeholder=""  value="" type="search" name="s" required /><button  aria-expanded="false"  class="wp-block-search__button has-small-font-size has-icon wp-element-button" data-wp-bind--aria-controls="state.ariaControls" data-wp-bind--aria-expanded="context.isSearchInputVisible" data-wp-bind--aria-label="state.ariaLabel" data-wp-bind--type="state.type" data-wp-on--click="actions.openSearchInput"  ><svg class="search-icon" viewBox="0 0 24 24" width="24" height="24">
					<path d="M13 5c-3.3 0-6 2.7-6 6 0 1.4.5 2.7 1.3 3.7l-3.8 3.8 1.1 1.1 3.8-3.8c1 .8 2.3 1.3 3.7 1.3 3.3 0 6-2.7 6-6S16.3 5 13 5zm0 10.5c-2.5 0-4.5-2-4.5-4.5s2-4.5 4.5-4.5 4.5 2 4.5 4.5-2 4.5-4.5 4.5z"></path>
				</svg></button></div></form>
							</div>
						</div>
					</div>
				</div></nav></div>
</div>
</header>


<main class="wp-block-group alignfull is-layout-flow wp-block-group-is-layout-flow">
<div class="wp-block-group has-global-padding is-layout-constrained wp-container-core-group-is-layout-e716077d wp-block-group-is-layout-constrained" style="margin-bottom:var(--wp--preset--spacing--40);padding-top:var(--wp--preset--spacing--50)">


<div class="wp-block-group is-vertical is-content-justification-stretch is-layout-flex wp-container-core-group-is-layout-6215b345 wp-block-group-is-layout-flex" style="padding-top:0;padding-bottom:0"><h1 class="wp-block-post-title has-x-large-font-size">Detecting Manual Syscalls from User Mode</h1>

<div class="wp-block-template-part">
<div class="wp-block-group is-content-justification-left is-layout-flex wp-container-core-group-is-layout-dfe8e91f wp-block-group-is-layout-flex"><div class="wp-block-post-date"><time datetime="2021-02-10T19:17:02+00:00"><a href="https://winternl.com/detecting-manual-syscalls-from-user-mode/">Feb 10, 2021</a></time></div>


<p class="has-contrast-2-color has-text-color">—</p>



<p class="has-contrast-2-color has-text-color has-small-font-size">by</p>


<div class="wp-block-post-author-name"><a href="https://winternl.com/author/winternl/" target="_self" class="wp-block-post-author-name__link">winternl</a></div></div>
</div></div>
</div>


<div class="entry-content alignfull wp-block-post-content has-global-padding is-layout-constrained wp-container-core-post-content-is-layout-704e782a wp-block-post-content-is-layout-constrained">
<p>By now direct system calls are ubiquitous in offensive tooling. Manual system calls remain effective for evading userland based EDRs. From within userland, there has been little answer to this powerful technique. Such syscalls can be effectively mitigated from kernel mode, but for many reasons, most EDRs will continue to operate exclusively from usermode. This post will present a novel method for detecting manual syscalls from usermode. </p>



<h3 class="wp-block-heading">Previous Work</h3>



<p>In 2015, <a href="https://twitter.com/aionescu" target="_blank" rel="noreferrer noopener">Alex Ionescu</a> presented a talk at RECON entitled, <em>Hooking Nirvana: Stealthy Instrumentation Hooks</em>, where, among other techniques, he described an instrumentation callback engine which is used internally by Microsoft. You can watch his talk <a href="https://www.youtube.com/watch?v=pHyWyH804xE" target="_blank" rel="noreferrer noopener">here</a> and read his presentation slides <a href="https://github.com/ionescu007/HookingNirvana/blob/master/Esoteric%20Hooks.pdf" target="_blank" rel="noreferrer noopener">here</a>.</p>



<p>The techniques discussed here <a href="https://splintercod3.blogspot.com/p/weaponizing-mapping-injection-with.html" target="_blank" rel="noreferrer noopener">have already been</a> weaponized for offensive code injection, but as far as I can tell, have not been applied defensively.</p>



<p>My research is also based off of previous work done by <a href="https://twitter.com/_qaz_qaz" target="_blank" rel="noreferrer noopener">@qaz_qaz</a> and his <a href="https://secrary.com/Random/InstrumentationCallback/" target="_blank" rel="noreferrer noopener">PoC here</a>. <a href="https://www.codeproject.com/Articles/543542/Windows-x64-System-Service-Hooks-and-Advanced-Debu" target="_blank" rel="noreferrer noopener">This article</a> also served as a primary point of reference.</p>



<p>And finally, a user by the name of <em>esoterik</em> on the game-hacking forum unknowncheats <a href="https://www.unknowncheats.me/forum/1967011-post29.html" target="_blank" rel="noreferrer noopener">provided an example</a> of a thread safe implementation of the instrumentation hook. <a href="https://www.unknowncheats.me/forum/anti-cheat-bypass/253247-instrumentation-callbacks-syscall-callbacks.html" target="_blank" rel="noreferrer noopener">Full thread</a>.</p>



<h3 class="wp-block-heading">Hooking Nirvana Revisted</h3>



<p>There exists an <a href="https://www.usenix.org/legacy/events/vee06/full_papers/p154-bhansali.pdf" target="_blank" rel="noreferrer noopener">internal instrumentation engine,</a> known as Nirvana, used by Microsoft which has been present since Windows Vista. </p>



<blockquote class="wp-block-quote has-text-align-center ticss-47ff9720 is-style-default has-base-background-color has-background has-inconsolata-font-family has-medium-font-size is-layout-flow wp-block-quote-is-layout-flow">
<p class="has-medium-font-size"><em>Nirvana is a lightweight, dynamic translation framework that can be used to monitor and control the (user mode) execution of a running process without needing to recompile or rebuild any code in that process. This is sometimes also referred to as program shepherding, sandboxing, emulation, or virtualization. Dynamic translation is a powerful complement to existing static analysis and instrumentation techniques.</em></p>
</blockquote>



<p>To understand how this technique will ultimately work, it is necessary to first understand kernel to user mode callbacks. <em>Ntdll </em>maintains a set of exported functions which are used by the kernel to invoke specific functionality in usermode. There are a number of these callbacks which are well documented. These functions are called when the kernel transitions back to user mode. The location (i.e. exported function) will vary based upon intended functionality.</p>



<ul class="wp-block-list">
<li><em>LdrInitializeThunk </em>&#8211; Thread and initial process thread creation starting point.</li>



<li><em>KiUserExceptionDispatcher </em>&#8211; Kernel exception dispatcher will IRET here on 1 of 2 conditions.
<ol class="wp-block-list">
<li>the process has no debug port.</li>



<li>the process has a debug port, but the debugger chose not to handle the exception.</li>
</ol>
</li>



<li><em>KiRaiseUserExceptionDispatcher </em>&#8211; Control flow will land here in certain instances during a system service when instead of returning a bad status code, it can simply invoke the user exception chain. For instance: CloseHandle() with an invalid handle value.</li>



<li><em>KiUserCallbackDispatcher </em>&#8211; Control flow will land here for Win32K window and thread message based operations. It then calls into function table contained in the process PEB</li>



<li><em>KiUserApcDispatcher </em>&#8211; This is where user queued apc&#8217;s are dispatched.</li>
</ul>



<p>The above list was taken from this <a href="https://www.codeproject.com/Articles/543542/Windows-x64-system-service-hooks-and-advanced-debu" target="_blank" rel="noreferrer noopener">article</a>. There are many such callbacks, and if you&#8217;d like to explore more you can visit <a href="http://www.nynaeve.net/?p=200" target="_blank" rel="noreferrer noopener">Nynaeve&#8217;s blog</a>.</p>



<p>Each time the kernel encounters a scenario in which it returns to user mode code, it will check if the <em>KPROCESS!InstrumentationCallback</em> member is not <em>NULL</em>. If it is not <em>NULL</em> and it points to valid memory, the kernel will swap out the <em>RIP</em> on the trap frame and replace it with the value stored in the <em>InstrumentationCallback</em> field.</p>



<div class="wp-block-kevinbatdorf-code-block-pro" data-code-block-pro-font-family="Code-Pro-JetBrains-Mono" style="font-size:.875rem;font-family:Code-Pro-JetBrains-Mono,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace;line-height:1.25rem;--cbp-tab-width:2;tab-size:var(--cbp-tab-width, 2)"><span role="button" tabindex="0" data-code="0: kd&gt; dt _kprocess
nt!_KPROCESS
   // ...
   +0x3d8 InstrumentationCallback : Ptr64 Void" style="color:#000000;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki light-plus" style="background-color: #FFFFFF" tabindex="0"><code><span class="line"><span style="color: #098658">0</span><span style="color: #000000">: kd&gt; dt _kprocess</span></span>
<span class="line"><span style="color: #000000">nt!_KPROCESS</span></span>
<span class="line"><span style="color: #008000">   // ...</span></span>
<span class="line"><span style="color: #000000">   +</span><span style="color: #098658">0x3d8</span><span style="color: #000000"> InstrumentationCallback : Ptr64 Void</span></span></code></pre></div>



<p>But remember, this is the KPROCESS structure, which resides in kernel memory. Official documentation on the <em>InstrumentationCallback</em> field is sparse to non, but serendipitously, Microsoft may have inadvertently leaked a clue we can utilize in their SDK. Referencing a specific version of the Windows 7 SDK, there exists a <em>PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION </em>structure.</p>



<div class="wp-block-kevinbatdorf-code-block-pro" data-code-block-pro-font-family="Code-Pro-JetBrains-Mono" style="font-size:.875rem;font-family:Code-Pro-JetBrains-Mono,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace;line-height:1.25rem;--cbp-tab-width:2;tab-size:var(--cbp-tab-width, 2)"><span role="button" tabindex="0" data-code="typedef struct _PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION
{
  ULONG Version;
  ULONG Reserved;
  PVOID Callback;
} PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION, *PPROCESS_INSTRUMENTATION_CALLBACK_INFORMATION;" style="color:#000000;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki light-plus" style="background-color: #FFFFFF" tabindex="0"><code><span class="line"><span style="color: #0000FF">typedef</span><span style="color: #000000"> </span><span style="color: #0000FF">struct</span><span style="color: #000000"> </span><span style="color: #267F99">_PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION</span></span>
<span class="line"><span style="color: #000000">{</span></span>
<span class="line"><span style="color: #000000">  ULONG Version;</span></span>
<span class="line"><span style="color: #000000">  ULONG Reserved;</span></span>
<span class="line"><span style="color: #000000">  PVOID Callback;</span></span>
<span class="line"><span style="color: #000000">} </span><span style="color: #267F99">PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION</span><span style="color: #000000">, </span><span style="color: #0000FF">*</span><span style="color: #267F99">PPROCESS_INSTRUMENTATION_CALLBACK_INFORMATION</span><span style="color: #000000">;</span></span></code></pre></div>



<p>The <em>KPROCESS!InstrumentationCallback</em> field can be set from usermode by calling <em>NtSetInformationProcess</em> with an undocumented <em>PROCESSINFOCLASS</em> value and a pointer to a <em>PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION </em>structure.</p>



<p>It is worth noting that process instrumentation behavior and capabilities change between most Windows versions, and certain functionality only exists in later Windows versions. For this post, all research and development is done on a 64-bit Windows 10 machine.</p>



<h3 class="wp-block-heading">Nirvana &#8212; Now What?</h3>



<p>To recap, there exists internal functionality on Windows machines to instrument (read: hook) all kernel to usermode callbacks. In order to detect evasive syscall behavior, there must be a defensive thesis on what makes a syscall malicious. Ideally, a defensive actor would like to allow all syscalls which originate from a legitimate source and block execution when syscalls originate from a malicious source. Manual syscalls may function exactly as legitimate ones but often originate well outside of where they &#8220;should be&#8221;. And the as saying goes, what goes up must come down. Well, for this context, what transitions to the kernel, must transition back to usermode. And this is exactly the defensive thesis used.</p>



<p><em>All syscalls which do not transition from</em> <em>the kernel back to usermode at a known valid location, are in fact crafted for evasive purposes.</em></p>



<p>The plan now becomes clear. Find out if the syscall returns back to usermode at a known location. This address could be an exported function in <em>ntdll.dll</em> or <em>win32u.dll</em> (I&#8217;m sure there are more callbacks). It may not be a memory page in the <em>.text</em> section an unknown module.</p>



<h3 class="wp-block-heading">Plan of Defense</h3>



<p>Because Nirvana&#8217;s instrumentation engine hooks transitions <em>from</em> the kernel, we are tasked with determining <em>where</em> the transition originated from. An auxiliary task, which increases instrumentation robustness, is determining whether the transition was in fact a syscall or another type of transition, such as an APC which would return to <em>ntdll!KiUserApcDispatcher.</em> Still, these addresses should <em>always</em> return to a known module.</p>



<p>After a syscall is issued, R10 will contain the address of the first instruction to be executed back in userland. This is almost always a return instruction. Validating the integrity of this address can detect the presence of manual syscall invocations.</p>



<h3 class="wp-block-heading">Instrumenting from User Mode</h3>



<p>Setting the <em>KPROCESS!InstrumentationCallback</em> field is easy. It can be done in about 20 lines of code and only a single function call.</p>



<div class="wp-block-kevinbatdorf-code-block-pro" data-code-block-pro-font-family="Code-Pro-JetBrains-Mono" style="font-size:.875rem;font-family:Code-Pro-JetBrains-Mono,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace;line-height:1.25rem;--cbp-tab-width:2;tab-size:var(--cbp-tab-width, 2)"><span role="button" tabindex="0" data-code="#define PROCESS_INFO_CLASS_INSTRUMENTATION 40

typedef struct _PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION
{
	ULONG Version;
	ULONG Reserved;
	PVOID Callback;
} PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION, * PPROCESS_INSTRUMENTATION_CALLBACK_INFORMATION;

PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION nirvana;
nirvana.Callback = (PVOID)(ULONG_PTR)InstrumentationCallbackThunk;
nirvana.Reserved = 0; /* Always 0 */
nirvana.Version = 0; /* x64 -&gt; 0 | x86 -&gt; 1 */

NtSetInformationProcess(
  GetCurrentProcess(),
  (PROCESS_INFORMATION_CLASS)PROCESS_INFO_CLASS_INSTRUMENTATION,
  &amp;nirvana,
  sizeof(nirvana));" style="color:#000000;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki light-plus" style="background-color: #FFFFFF" tabindex="0"><code><span class="line"><span style="color: #AF00DB">#define</span><span style="color: #0000FF"> PROCESS_INFO_CLASS_INSTRUMENTATION 40</span></span>
<span class="line"></span>
<span class="line"><span style="color: #0000FF">typedef</span><span style="color: #000000"> </span><span style="color: #0000FF">struct</span><span style="color: #000000"> </span><span style="color: #267F99">_PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION</span></span>
<span class="line"><span style="color: #000000">{</span></span>
<span class="line"><span style="color: #000000">	ULONG Version;</span></span>
<span class="line"><span style="color: #000000">	ULONG Reserved;</span></span>
<span class="line"><span style="color: #000000">	PVOID Callback;</span></span>
<span class="line"><span style="color: #000000">} </span><span style="color: #267F99">PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION</span><span style="color: #000000">, </span><span style="color: #0000FF">*</span><span style="color: #000000"> </span><span style="color: #267F99">PPROCESS_INSTRUMENTATION_CALLBACK_INFORMATION</span><span style="color: #000000">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #000000">PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION nirvana;</span></span>
<span class="line"><span style="color: #001080">nirvana</span><span style="color: #000000">.</span><span style="color: #001080">Callback</span><span style="color: #000000"> = (PVOID)(ULONG_PTR)InstrumentationCallbackThunk;</span></span>
<span class="line"><span style="color: #001080">nirvana</span><span style="color: #000000">.</span><span style="color: #001080">Reserved</span><span style="color: #000000"> = </span><span style="color: #098658">0</span><span style="color: #000000">;</span><span style="color: #008000"> /* Always 0 */</span></span>
<span class="line"><span style="color: #001080">nirvana</span><span style="color: #000000">.</span><span style="color: #001080">Version</span><span style="color: #000000"> = </span><span style="color: #098658">0</span><span style="color: #000000">;</span><span style="color: #008000"> /* x64 -&gt; 0 | x86 -&gt; 1 */</span></span>
<span class="line"></span>
<span class="line"><span style="color: #795E26">NtSetInformationProcess</span><span style="color: #000000">(</span></span>
<span class="line"><span style="color: #000000">  </span><span style="color: #795E26">GetCurrentProcess</span><span style="color: #000000">(),</span></span>
<span class="line"><span style="color: #000000">  (PROCESS_INFORMATION_CLASS)PROCESS_INFO_CLASS_INSTRUMENTATION,</span></span>
<span class="line"><span style="color: #000000">  &amp;nirvana,</span></span>
<span class="line"><span style="color: #000000">  </span><span style="color: #0000FF">sizeof</span><span style="color: #000000">(nirvana));</span></span></code></pre></div>



<p>Now that we have the <em>InstrumentationCallback</em> field updated, we must implement the hook. The hook has to be cognizant of all non-volatile registers, proper stack alignment, unintended recursion, and thread safety. The hook is implemented in two separate files, in part because the 64-bit MSVC compiler does not support inline assembly. The first part of the instrumentation hook is coded in assembly. This procedure will be pointed to by the <em>KPROCESS!InstrumentationCallback</em> field. It is responsible for preserving registers (which cannot easily be accomplished without inline assembly) and subsequently calling the next part of the hooking routine. The second function is written in C/C++ and will contain the logic needed to verify the integrity of the syscall.</p>



<p>Prior to Windows 10, the instrumentation functionality used by this project was only available for 64-bit Windows versions. To support x86 and WoW64, four new fields were added to the <em>TEB </em>structure.</p>



<div class="wp-block-kevinbatdorf-code-block-pro" data-code-block-pro-font-family="Code-Pro-JetBrains-Mono" style="font-size:.875rem;font-family:Code-Pro-JetBrains-Mono,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace;line-height:1.25rem;--cbp-tab-width:2;tab-size:var(--cbp-tab-width, 2)"><span role="button" tabindex="0" data-code="_TEB_64
+0x02D0	ULONG_PTR InstrumentationCallbackSp
+0x02D8	ULONG_PTR InstrumentationCallbackPreviousPc
+0x02E0	ULONG_PTR InstrumentationCallbackPreviousSp
+0x02EC	BOOLEAN InstrumentationCallbackDisabled" style="color:#000000;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki light-plus" style="background-color: #FFFFFF" tabindex="0"><code><span class="line"><span style="color: #000000">_TEB_64</span></span>
<span class="line"><span style="color: #000000">+</span><span style="color: #098658">0x02D0</span><span style="color: #000000">	ULONG_PTR InstrumentationCallbackSp</span></span>
<span class="line"><span style="color: #000000">+</span><span style="color: #098658">0x02D8</span><span style="color: #000000">	ULONG_PTR InstrumentationCallbackPreviousPc</span></span>
<span class="line"><span style="color: #000000">+</span><span style="color: #098658">0x02E0</span><span style="color: #000000">	ULONG_PTR InstrumentationCallbackPreviousSp</span></span>
<span class="line"><span style="color: #000000">+</span><span style="color: #098658">0x02EC</span><span style="color: #000000">	BOOLEAN InstrumentationCallbackDisabled</span></span></code></pre></div>



<p>In x64 Windows, I believe, but am not certain, these fields are unused when implementing instrumentation callbacks. However, because they present a thread safe location to store information regarding the callback, the hook can use these addresses for reading and writing information. The following code is originally from <em>esoterik</em>, found under the previous research section.</p>



<div class="wp-block-kevinbatdorf-code-block-pro" data-code-block-pro-font-family="Code-Pro-JetBrains-Mono" style="font-size:.875rem;font-family:Code-Pro-JetBrains-Mono,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace;line-height:1.25rem;--cbp-tab-width:2;tab-size:var(--cbp-tab-width, 2)"><span role="button" tabindex="0" data-code="InstrumentationCallbackThunk proc
	mov     gs:[2e0h], rsp            ; _TEB_64 InstrumentationCallbackPreviousSp
	mov     gs:[2d8h], r10            ; _TEB_64 InstrumentationCallbackPreviousPc
	mov     r10, rcx                  ; Save original RCX
	sub     rsp, 4d0h                 ; Alloc stack space for CONTEXT structure
	and     rsp, -10h                 ; RSP must be 16 byte aligned before calls
	mov     rcx, rsp
	call    __imp_RtlCaptureContext   ; Save the current register state. 
	                                  ; RtlCaptureContext does not require shadow space
	sub     rsp, 20h                  ; Shadow space
	call    InstrumentationCallback
InstrumentationCallbackThunk endp" style="color:#000000;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki light-plus" style="background-color: #FFFFFF" tabindex="0"><code><span class="line"><span style="color: #000000">InstrumentationCallbackThunk proc</span></span>
<span class="line"><span style="color: #000000">	mov     </span><span style="color: #0000FF">gs</span><span style="color: #000000">:[</span><span style="color: #098658">2e0h</span><span style="color: #000000">], </span><span style="color: #0000FF">rsp</span><span style="color: #000000">            </span><span style="color: #008000">; _TEB_64 InstrumentationCallbackPreviousSp</span></span>
<span class="line"><span style="color: #000000">	mov     </span><span style="color: #0000FF">gs</span><span style="color: #000000">:[</span><span style="color: #098658">2d8h</span><span style="color: #000000">], </span><span style="color: #0000FF">r10</span><span style="color: #000000">            </span><span style="color: #008000">; _TEB_64 InstrumentationCallbackPreviousPc</span></span>
<span class="line"><span style="color: #000000">	mov     </span><span style="color: #0000FF">r10</span><span style="color: #000000">, </span><span style="color: #0000FF">rcx</span><span style="color: #000000">                  </span><span style="color: #008000">; Save original RCX</span></span>
<span class="line"><span style="color: #000000">	sub     </span><span style="color: #0000FF">rsp</span><span style="color: #000000">, </span><span style="color: #098658">4d0h</span><span style="color: #000000">                 </span><span style="color: #008000">; Alloc stack space for CONTEXT structure</span></span>
<span class="line"><span style="color: #000000">	and     </span><span style="color: #0000FF">rsp</span><span style="color: #000000">, -</span><span style="color: #098658">10h</span><span style="color: #000000">                 </span><span style="color: #008000">; RSP must be 16 byte aligned before calls</span></span>
<span class="line"><span style="color: #000000">	mov     </span><span style="color: #0000FF">rcx</span><span style="color: #000000">, </span><span style="color: #0000FF">rsp</span></span>
<span class="line"><span style="color: #000000">	call    __imp_RtlCaptureContext   </span><span style="color: #008000">; Save the current register state. </span></span>
<span class="line"><span style="color: #000000">	                                  </span><span style="color: #008000">; RtlCaptureContext does not require shadow space</span></span>
<span class="line"><span style="color: #000000">	sub     </span><span style="color: #0000FF">rsp</span><span style="color: #000000">, </span><span style="color: #098658">20h</span><span style="color: #000000">                  </span><span style="color: #008000">; Shadow space</span></span>
<span class="line"><span style="color: #000000">	call    InstrumentationCallback</span></span>
<span class="line"><span style="color: #000000">InstrumentationCallbackThunk endp</span></span></code></pre></div>



<p>Because Rtl* functions are implemented entirely in usermode, there is no need to worry about recursion here.</p>



<p>The second, and main part of the instrumentation routine is responsible for analyzing the execution context at the point of kernel to usermode return. The routine is only a PoC and performs a very cursory bounds check to determine whether <em>RIP</em> is pointing to a memory location within <em>ntdll.dll </em>or <em>win32u.dll</em>. If not, the program will warn of a potential manual syscall and break execution.</p>



<p>Here&#8217;s my version of the instrumentation hook which implements the minimal required code for a PoC. Optionally it performs a reverse lookup if the executable is built with debug information.</p>



<div class="wp-block-kevinbatdorf-code-block-pro" data-code-block-pro-font-family="Code-Pro-JetBrains-Mono" style="font-size:.875rem;font-family:Code-Pro-JetBrains-Mono,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,monospace;line-height:1.25rem;--cbp-tab-width:2;tab-size:var(--cbp-tab-width, 2)"><span role="button" tabindex="0" data-code="#define RIP_SANITY_CHECK(Rip,BaseAddress,ModuleSize) (Rip &gt; BaseAddress) &amp;&amp; (Rip &lt; (BaseAddress + ModuleSize))

VOID InstrumentationCallback(PCONTEXT ctx)
{
	BOOLEAN bInstrumentationCallbackDisabled;
	ULONG_PTR NtdllBase;
	ULONG_PTR W32UBase;
	DWORD NtdllSize;
	DWORD W32USize;

#if _DEBUG
	BOOLEAN SymbolLookupResult;
	DWORD64 Displacement;
	PSYMBOL_INFO SymbolInfo;
	PCHAR SymbolBuffer[sizeof(SYMBOL_INFO) + 1024];
#endif

	ULONG_PTR pTEB = (ULONG_PTR)NtCurrentTeb();

	//
	// https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/teb/index.htm
	//
	ctx-&gt;Rip = *((ULONG_PTR*)(pTEB + 0x02D8)); // TEB-&gt;InstrumentationCallbackPreviousPc
	ctx-&gt;Rsp = *((ULONG_PTR*)(pTEB + 0x02E0)); // TEB-&gt;InstrumentationCallbackPreviousSp
	ctx-&gt;Rcx = ctx-&gt;R10;

	//
	// Prevent recursion. TEB-&gt;InstrumentationCallbackDisabled
	//
	bInstrumentationCallbackDisabled = *((BOOLEAN*)pTEB + 0x1b8);

	if (!bInstrumentationCallbackDisabled) {

		//
		// Disabling for no recursion
		// 
		*((BOOLEAN*)pTEB + 0x1b8) = TRUE;

#if _DEBUG
		SymbolInfo = (PSYMBOL_INFO)SymbolBuffer;
		RtlSecureZeroMemory(SymbolInfo, sizeof(SYMBOL_INFO) + 1024);

		SymbolInfo-&gt;SizeOfStruct = sizeof(SYMBOL_INFO);
		SymbolInfo-&gt;MaxNameLen = 1024;

		SymbolLookupResult = SymFromAddr(
			GetCurrentProcess(),
			ctx-&gt;Rip,
			&amp;Displacement,
			SymbolInfo
		);
#endif

#if _DEBUG
		if (SymbolLookupResult) {
#endif
			NtdllBase = (ULONG_PTR)InterlockedCompareExchangePointer(
				(PVOID*)&amp;g_NtdllBase,
				NULL,
				NULL
			);

			W32UBase = (ULONG_PTR)InterlockedCompareExchangePointer(
				(PVOID*)&amp;g_W32UBase,
				NULL,
				NULL
			);

			NtdllSize = InterlockedCompareExchange(
				(DWORD*)&amp;g_NtdllSize,
				NULL,
				NULL
			);

			W32USize = InterlockedCompareExchange(
				(DWORD*)&amp;g_W32USize,
				NULL,
				NULL
			);

			if (RIP_SANITY_CHECK(ctx-&gt;Rip, NtdllBase, NtdllSize)) {

				if (NtdllBase) {

#if _DEBUG
					//
					// See if we can look up by name
					//
					PVOID pFunction = GetProcAddress((HMODULE)NtdllBase, SymbolInfo-&gt;Name);

					if (!pFunction) {
						printf(&quot;[-] Reverse lookup failed for function: %s.\n&quot;, SymbolInfo-&gt;Name);
					}
					else {
						printf(&quot;[+] Reverse lookup successful for function %s.\n&quot;, SymbolInfo-&gt;Name);
					}
#endif
				}
				else {
					printf(&quot;[-] ntdll.dll not found.\n&quot;);
				}
			}
			else if (RIP_SANITY_CHECK(ctx-&gt;Rip, W32UBase, W32USize)) {

				if (W32UBase) {

#if _DEBUG
					//
					// See if we can look up by name
					//
					PVOID pFunction = GetProcAddress((HMODULE)W32UBase, SymbolInfo-&gt;Name);

					if (!pFunction) {
						printf(&quot;[-] Reverse lookup failed for function: %s.\n&quot;, SymbolInfo-&gt;Name);
					}
					else {
						printf(&quot;[+] Reverse lookup successful for function %s.\n&quot;, SymbolInfo-&gt;Name);
					}
#endif
				}
				else {
					printf(&quot;[-] win32u.dll not found.\n&quot;);
				}
			}
			else {

				printf(&quot;[SYSCALL-DETECT] Kernel returns to unverified module, preventing further execution!\n&quot;);
#if _DEBUG
				printf(&quot;[SYSCALL-DETECT] Function: %s\n&quot;, SymbolInfo-&gt;Name);
#endif
				DebugBreak();
			}

#if _DEBUG
		}
		else {

			//
			// SymFromAddr failed
			//
			printf(&quot;SymFromAddr failed.\n&quot;);
			// DebugBreak();
		}
#endif
		//
		// Enabling so we can catch next callback.
		//
		* ((BOOLEAN*)pTEB + 0x1b8) = FALSE;
	}

	RtlRestoreContext(ctx, NULL);
}" style="color:#000000;display:none" aria-label="Copy" class="code-block-pro-copy-button"><svg xmlns="http://www.w3.org/2000/svg" style="width:24px;height:24px" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path class="with-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path><path class="without-check" stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg></span><pre class="shiki light-plus" style="background-color: #FFFFFF" tabindex="0"><code><span class="line"><span style="color: #AF00DB">#define</span><span style="color: #0000FF"> RIP_SANITY_CHECK(</span><span style="color: #001080">Rip</span><span style="color: #0000FF">,</span><span style="color: #001080">BaseAddress</span><span style="color: #0000FF">,</span><span style="color: #001080">ModuleSize</span><span style="color: #0000FF">) (Rip &gt; BaseAddress) &amp;&amp; (Rip &lt; (BaseAddress + ModuleSize))</span></span>
<span class="line"></span>
<span class="line"><span style="color: #267F99">VOID</span><span style="color: #000000"> </span><span style="color: #795E26">InstrumentationCallback</span><span style="color: #000000">(</span><span style="color: #267F99">PCONTEXT</span><span style="color: #000000"> </span><span style="color: #001080">ctx</span><span style="color: #000000">)</span></span>
<span class="line"><span style="color: #000000">{</span></span>
<span class="line"><span style="color: #000000">	BOOLEAN bInstrumentationCallbackDisabled;</span></span>
<span class="line"><span style="color: #000000">	ULONG_PTR NtdllBase;</span></span>
<span class="line"><span style="color: #000000">	ULONG_PTR W32UBase;</span></span>
<span class="line"><span style="color: #000000">	DWORD NtdllSize;</span></span>
<span class="line"><span style="color: #000000">	DWORD W32USize;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #AF00DB">#if</span><span style="color: #0000FF"> _DEBUG</span></span>
<span class="line"><span style="color: #000000">	BOOLEAN SymbolLookupResult;</span></span>
<span class="line"><span style="color: #000000">	DWORD64 Displacement;</span></span>
<span class="line"><span style="color: #000000">	PSYMBOL_INFO SymbolInfo;</span></span>
<span class="line"><span style="color: #000000">	PCHAR </span><span style="color: #001080">SymbolBuffer</span><span style="color: #000000">[</span><span style="color: #0000FF">sizeof</span><span style="color: #000000">(SYMBOL_INFO) + </span><span style="color: #098658">1024</span><span style="color: #000000">];</span></span>
<span class="line"><span style="color: #AF00DB">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color: #000000">	ULONG_PTR pTEB = (ULONG_PTR)</span><span style="color: #795E26">NtCurrentTeb</span><span style="color: #000000">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: #008000">	//</span></span>
<span class="line"><span style="color: #008000">	// https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/teb/index.htm</span></span>
<span class="line"><span style="color: #008000">	//</span></span>
<span class="line"><span style="color: #000000">	</span><span style="color: #001080">ctx</span><span style="color: #000000">-&gt;</span><span style="color: #001080">Rip</span><span style="color: #000000"> = *((ULONG_PTR*)(pTEB + </span><span style="color: #098658">0x02D8</span><span style="color: #000000">));</span><span style="color: #008000"> // TEB-&gt;InstrumentationCallbackPreviousPc</span></span>
<span class="line"><span style="color: #000000">	</span><span style="color: #001080">ctx</span><span style="color: #000000">-&gt;</span><span style="color: #001080">Rsp</span><span style="color: #000000"> = *((ULONG_PTR*)(pTEB + </span><span style="color: #098658">0x02E0</span><span style="color: #000000">));</span><span style="color: #008000"> // TEB-&gt;InstrumentationCallbackPreviousSp</span></span>
<span class="line"><span style="color: #000000">	</span><span style="color: #001080">ctx</span><span style="color: #000000">-&gt;</span><span style="color: #001080">Rcx</span><span style="color: #000000"> = </span><span style="color: #001080">ctx</span><span style="color: #000000">-&gt;</span><span style="color: #001080">R10</span><span style="color: #000000">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #008000">	//</span></span>
<span class="line"><span style="color: #008000">	// Prevent recursion. TEB-&gt;InstrumentationCallbackDisabled</span></span>
<span class="line"><span style="color: #008000">	//</span></span>
<span class="line"><span style="color: #000000">	bInstrumentationCallbackDisabled = *((BOOLEAN*)pTEB + </span><span style="color: #098658">0x1b8</span><span style="color: #000000">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #000000">	</span><span style="color: #AF00DB">if</span><span style="color: #000000"> (!bInstrumentationCallbackDisabled) {</span></span>
<span class="line"></span>
<span class="line"><span style="color: #008000">		//</span></span>
<span class="line"><span style="color: #008000">		// Disabling for no recursion</span></span>
<span class="line"><span style="color: #008000">		// </span></span>
<span class="line"><span style="color: #000000">		*((BOOLEAN*)pTEB + </span><span style="color: #098658">0x1b8</span><span style="color: #000000">) = TRUE;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #AF00DB">#if</span><span style="color: #0000FF"> _DEBUG</span></span>
<span class="line"><span style="color: #000000">		SymbolInfo = (PSYMBOL_INFO)SymbolBuffer;</span></span>
<span class="line"><span style="color: #000000">		</span><span style="color: #795E26">RtlSecureZeroMemory</span><span style="color: #000000">(SymbolInfo, </span><span style="color: #0000FF">sizeof</span><span style="color: #000000">(SYMBOL_INFO) + </span><span style="color: #098658">1024</span><span style="color: #000000">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #000000">		</span><span style="color: #001080">SymbolInfo</span><span style="color: #000000">-&gt;</span><span style="color: #001080">SizeOfStruct</span><span style="color: #000000"> = </span><span style="color: #0000FF">sizeof</span><span style="color: #000000">(SYMBOL_INFO);</span></span>
<span class="line"><span style="color: #000000">		</span><span style="color: #001080">SymbolInfo</span><span style="color: #000000">-&gt;</span><span style="color: #001080">MaxNameLen</span><span style="color: #000000"> = </span><span style="color: #098658">1024</span><span style="color: #000000">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #000000">		SymbolLookupResult = </span><span style="color: #795E26">SymFromAddr</span><span style="color: #000000">(</span></span>
<span class="line"><span style="color: #000000">			</span><span style="color: #795E26">GetCurrentProcess</span><span style="color: #000000">(),</span></span>
<span class="line"><span style="color: #000000">			</span><span style="color: #001080">ctx</span><span style="color: #000000">-&gt;</span><span style="color: #001080">Rip</span><span style="color: #000000">,</span></span>
<span class="line"><span style="color: #000000">			&amp;Displacement,</span></span>
<span class="line"><span style="color: #000000">			SymbolInfo</span></span>
<span class="line"><span style="color: #000000">		);</span></span>
<span class="line"><span style="color: #AF00DB">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color: #AF00DB">#if</span><span style="color: #0000FF"> _DEBUG</span></span>
<span class="line"><span style="color: #000000">		</span><span style="color: #AF00DB">if</span><span style="color: #000000"> (SymbolLookupResult) {</span></span>
<span class="line"><span style="color: #AF00DB">#endif</span></span>
<span class="line"><span style="color: #000000">			NtdllBase = (ULONG_PTR)</span><span style="color: #795E26">InterlockedCompareExchangePointer</span><span style="color: #000000">(</span></span>
<span class="line"><span style="color: #000000">				(PVOID*)&amp;g_NtdllBase,</span></span>
<span class="line"><span style="color: #000000">				</span><span style="color: #0000FF">NULL</span><span style="color: #000000">,</span></span>
<span class="line"><span style="color: #000000">				</span><span style="color: #0000FF">NULL</span></span>
<span class="line"><span style="color: #000000">			);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #000000">			W32UBase = (ULONG_PTR)</span><span style="color: #795E26">InterlockedCompareExchangePointer</span><span style="color: #000000">(</span></span>
<span class="line"><span style="color: #000000">				(PVOID*)&amp;g_W32UBase,</span></span>
<span class="line"><span style="color: #000000">				</span><span style="color: #0000FF">NULL</span><span style="color: #000000">,</span></span>
<span class="line"><span style="color: #000000">				</span><span style="color: #0000FF">NULL</span></span>
<span class="line"><span style="color: #000000">			);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #000000">			NtdllSize = </span><span style="color: #795E26">InterlockedCompareExchange</span><span style="color: #000000">(</span></span>
<span class="line"><span style="color: #000000">				(DWORD*)&amp;g_NtdllSize,</span></span>
<span class="line"><span style="color: #000000">				</span><span style="color: #0000FF">NULL</span><span style="color: #000000">,</span></span>
<span class="line"><span style="color: #000000">				</span><span style="color: #0000FF">NULL</span></span>
<span class="line"><span style="color: #000000">			);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #000000">			W32USize = </span><span style="color: #795E26">InterlockedCompareExchange</span><span style="color: #000000">(</span></span>
<span class="line"><span style="color: #000000">				(DWORD*)&amp;g_W32USize,</span></span>
<span class="line"><span style="color: #000000">				</span><span style="color: #0000FF">NULL</span><span style="color: #000000">,</span></span>
<span class="line"><span style="color: #000000">				</span><span style="color: #0000FF">NULL</span></span>
<span class="line"><span style="color: #000000">			);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #000000">			</span><span style="color: #AF00DB">if</span><span style="color: #000000"> (</span><span style="color: #795E26">RIP_SANITY_CHECK</span><span style="color: #000000">(</span><span style="color: #001080">ctx</span><span style="color: #000000">-&gt;</span><span style="color: #001080">Rip</span><span style="color: #000000">, NtdllBase, NtdllSize)) {</span></span>
<span class="line"></span>
<span class="line"><span style="color: #000000">				</span><span style="color: #AF00DB">if</span><span style="color: #000000"> (NtdllBase) {</span></span>
<span class="line"></span>
<span class="line"><span style="color: #AF00DB">#if</span><span style="color: #0000FF"> _DEBUG</span></span>
<span class="line"><span style="color: #008000">					//</span></span>
<span class="line"><span style="color: #008000">					// See if we can look up by name</span></span>
<span class="line"><span style="color: #008000">					//</span></span>
<span class="line"><span style="color: #000000">					PVOID pFunction = </span><span style="color: #795E26">GetProcAddress</span><span style="color: #000000">((HMODULE)NtdllBase, </span><span style="color: #001080">SymbolInfo</span><span style="color: #000000">-&gt;</span><span style="color: #001080">Name</span><span style="color: #000000">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #000000">					</span><span style="color: #AF00DB">if</span><span style="color: #000000"> (!pFunction) {</span></span>
<span class="line"><span style="color: #000000">						</span><span style="color: #795E26">printf</span><span style="color: #000000">(</span><span style="color: #A31515">&quot;[-] Reverse lookup failed for function: </span><span style="color: #001080">%s</span><span style="color: #A31515">.</span><span style="color: #EE0000">\n</span><span style="color: #A31515">&quot;</span><span style="color: #000000">, </span><span style="color: #001080">SymbolInfo</span><span style="color: #000000">-&gt;</span><span style="color: #001080">Name</span><span style="color: #000000">);</span></span>
<span class="line"><span style="color: #000000">					}</span></span>
<span class="line"><span style="color: #000000">					</span><span style="color: #AF00DB">else</span><span style="color: #000000"> {</span></span>
<span class="line"><span style="color: #000000">						</span><span style="color: #795E26">printf</span><span style="color: #000000">(</span><span style="color: #A31515">&quot;[+] Reverse lookup successful for function </span><span style="color: #001080">%s</span><span style="color: #A31515">.</span><span style="color: #EE0000">\n</span><span style="color: #A31515">&quot;</span><span style="color: #000000">, </span><span style="color: #001080">SymbolInfo</span><span style="color: #000000">-&gt;</span><span style="color: #001080">Name</span><span style="color: #000000">);</span></span>
<span class="line"><span style="color: #000000">					}</span></span>
<span class="line"><span style="color: #AF00DB">#endif</span></span>
<span class="line"><span style="color: #000000">				}</span></span>
<span class="line"><span style="color: #000000">				</span><span style="color: #AF00DB">else</span><span style="color: #000000"> {</span></span>
<span class="line"><span style="color: #000000">					</span><span style="color: #795E26">printf</span><span style="color: #000000">(</span><span style="color: #A31515">&quot;[-] ntdll.dll not found.</span><span style="color: #EE0000">\n</span><span style="color: #A31515">&quot;</span><span style="color: #000000">);</span></span>
<span class="line"><span style="color: #000000">				}</span></span>
<span class="line"><span style="color: #000000">			}</span></span>
<span class="line"><span style="color: #000000">			</span><span style="color: #AF00DB">else</span><span style="color: #000000"> </span><span style="color: #AF00DB">if</span><span style="color: #000000"> (</span><span style="color: #795E26">RIP_SANITY_CHECK</span><span style="color: #000000">(</span><span style="color: #001080">ctx</span><span style="color: #000000">-&gt;</span><span style="color: #001080">Rip</span><span style="color: #000000">, W32UBase, W32USize)) {</span></span>
<span class="line"></span>
<span class="line"><span style="color: #000000">				</span><span style="color: #AF00DB">if</span><span style="color: #000000"> (W32UBase) {</span></span>
<span class="line"></span>
<span class="line"><span style="color: #AF00DB">#if</span><span style="color: #0000FF"> _DEBUG</span></span>
<span class="line"><span style="color: #008000">					//</span></span>
<span class="line"><span style="color: #008000">					// See if we can look up by name</span></span>
<span class="line"><span style="color: #008000">					//</span></span>
<span class="line"><span style="color: #000000">					PVOID pFunction = </span><span style="color: #795E26">GetProcAddress</span><span style="color: #000000">((HMODULE)W32UBase, </span><span style="color: #001080">SymbolInfo</span><span style="color: #000000">-&gt;</span><span style="color: #001080">Name</span><span style="color: #000000">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: #000000">					</span><span style="color: #AF00DB">if</span><span style="color: #000000"> (!pFunction) {</span></span>
<span class="line"><span style="color: #000000">						</span><span style="color: #795E26">printf</span><span style="color: #000000">(</span><span style="color: #A31515">&quot;[-] Reverse lookup failed for function: </span><span style="color: #001080">%s</span><span style="color: #A31515">.</span><span style="color: #EE0000">\n</span><span style="color: #A31515">&quot;</span><span style="color: #000000">, </span><span style="color: #001080">SymbolInfo</span><span style="color: #000000">-&gt;</span><span style="color: #001080">Name</span><span style="color: #000000">);</span></span>
<span class="line"><span style="color: #000000">					}</span></span>
<span class="line"><span style="color: #000000">					</span><span style="color: #AF00DB">else</span><span style="color: #000000"> {</span></span>
<span class="line"><span style="color: #000000">						</span><span style="color: #795E26">printf</span><span style="color: #000000">(</span><span style="color: #A31515">&quot;[+] Reverse lookup successful for function </span><span style="color: #001080">%s</span><span style="color: #A31515">.</span><span style="color: #EE0000">\n</span><span style="color: #A31515">&quot;</span><span style="color: #000000">, </span><span style="color: #001080">SymbolInfo</span><span style="color: #000000">-&gt;</span><span style="color: #001080">Name</span><span style="color: #000000">);</span></span>
<span class="line"><span style="color: #000000">					}</span></span>
<span class="line"><span style="color: #AF00DB">#endif</span></span>
<span class="line"><span style="color: #000000">				}</span></span>
<span class="line"><span style="color: #000000">				</span><span style="color: #AF00DB">else</span><span style="color: #000000"> {</span></span>
<span class="line"><span style="color: #000000">					</span><span style="color: #795E26">printf</span><span style="color: #000000">(</span><span style="color: #A31515">&quot;[-] win32u.dll not found.</span><span style="color: #EE0000">\n</span><span style="color: #A31515">&quot;</span><span style="color: #000000">);</span></span>
<span class="line"><span style="color: #000000">				}</span></span>
<span class="line"><span style="color: #000000">			}</span></span>
<span class="line"><span style="color: #000000">			</span><span style="color: #AF00DB">else</span><span style="color: #000000"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color: #000000">				</span><span style="color: #795E26">printf</span><span style="color: #000000">(</span><span style="color: #A31515">&quot;[SYSCALL-DETECT] Kernel returns to unverified module, preventing further execution!</span><span style="color: #EE0000">\n</span><span style="color: #A31515">&quot;</span><span style="color: #000000">);</span></span>
<span class="line"><span style="color: #AF00DB">#if</span><span style="color: #0000FF"> _DEBUG</span></span>
<span class="line"><span style="color: #000000">				</span><span style="color: #795E26">printf</span><span style="color: #000000">(</span><span style="color: #A31515">&quot;[SYSCALL-DETECT] Function: </span><span style="color: #001080">%s</span><span style="color: #EE0000">\n</span><span style="color: #A31515">&quot;</span><span style="color: #000000">, </span><span style="color: #001080">SymbolInfo</span><span style="color: #000000">-&gt;</span><span style="color: #001080">Name</span><span style="color: #000000">);</span></span>
<span class="line"><span style="color: #AF00DB">#endif</span></span>
<span class="line"><span style="color: #000000">				</span><span style="color: #795E26">DebugBreak</span><span style="color: #000000">();</span></span>
<span class="line"><span style="color: #000000">			}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #AF00DB">#if</span><span style="color: #0000FF"> _DEBUG</span></span>
<span class="line"><span style="color: #000000">		}</span></span>
<span class="line"><span style="color: #000000">		</span><span style="color: #AF00DB">else</span><span style="color: #000000"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color: #008000">			//</span></span>
<span class="line"><span style="color: #008000">			// SymFromAddr failed</span></span>
<span class="line"><span style="color: #008000">			//</span></span>
<span class="line"><span style="color: #000000">			</span><span style="color: #795E26">printf</span><span style="color: #000000">(</span><span style="color: #A31515">&quot;SymFromAddr failed.</span><span style="color: #EE0000">\n</span><span style="color: #A31515">&quot;</span><span style="color: #000000">);</span></span>
<span class="line"><span style="color: #008000">			// DebugBreak();</span></span>
<span class="line"><span style="color: #000000">		}</span></span>
<span class="line"><span style="color: #AF00DB">#endif</span></span>
<span class="line"><span style="color: #008000">		//</span></span>
<span class="line"><span style="color: #008000">		// Enabling so we can catch next callback.</span></span>
<span class="line"><span style="color: #008000">		//</span></span>
<span class="line"><span style="color: #000000">		* ((BOOLEAN*)pTEB + </span><span style="color: #098658">0x1b8</span><span style="color: #000000">) = FALSE;</span></span>
<span class="line"><span style="color: #000000">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color: #000000">	</span><span style="color: #795E26">RtlRestoreContext</span><span style="color: #000000">(ctx, </span><span style="color: #0000FF">NULL</span><span style="color: #000000">);</span></span>
<span class="line"><span style="color: #000000">}</span></span></code></pre></div>



<p>Ideally, there should be <em>much more</em> verification done to ensure the integrity of the syscall. Ultimately this will be left as an exercise to the reader. Here are some of my own ideas (I&#8217;d love to hear yours):</p>



<ul class="wp-block-list">
<li>If running an instrumentation routine on an executable with a <em>pdb</em> symbol file store, one can use the set of symbol handler functions located within <em>dbghelp.dll</em> to perform reverse lookups. The symbol handler functions can resolve <em>RIP</em> to a function name using the function <em><a href="https://docs.microsoft.com/en-us/windows/win32/api/dbghelp/nf-dbghelp-symfromaddr" target="_blank" rel="noreferrer noopener">SymFromAddr</a></em>. If the function does not resolve, the syscall was most likely issued in an evasive way.</li>



<li>An immediate bypass to this technique which comes to mind is to simply overwrite a legitimate, but seldom used exported function in <em>ntdll.dll</em>. One could simply overwrite the syscall number with your desired index and call the function as normal. A resolution to this bypass might be to implement an anti-tamper routine on <em>ntdl.dll&#8217;s</em> address space. Perhaps hash and cross-reference each of it&#8217;s Nt* routines.</li>



<li>Reverse disassembly seems feasible in providing further analysis of the origin of the syscall. Syscalls will (always?) be followed by a <em>ret</em> instruction, which is the location pointed to by <em>RIP</em> upon transition back to usermode. One can assume the previous instruction will be a syscall (x64 Windows 10). Following the syscall stub structure present in x64 Windows 10, the instruction preceding the syscall would move the syscall service index into eax. I wonder if it&#8217;s possible to retrieve the syscall index from the information available when the kernel returns to usermode? It would be a very powerful defensive technique to reverse disassemble <em>RIP</em> until the <em>Nt*</em> procedure base is identified (<em>mov r10, rcx</em>). Then cross-referencing the syscall index found via reverse disassembly to the corresponding syscall index and address pair found by performing a sort on the set of {<em>Zw* U Nt*}</em> function addresses (<a href="https://www.mdsec.co.uk/2020/12/bypassing-user-mode-hooks-and-direct-invocation-of-system-calls-for-red-teams/" target="_blank" rel="noreferrer noopener">as described by odzhan</a>). If the base addresses and syscall indeces do not match, then the syscall was likely manual.</li>
</ul>



<h3 class="wp-block-heading">Final Remarks</h3>



<p>Of course, this is just another tool in the proverbial toolkit, and does not represent a significant change in the dynamic of the userland threat landscape. I do however, think this a powerful technique that has been overlooked by the blue team. Most userland unhookers do not account for this instrumentation callback. Conversely, I see lots of potential for misuse and offensive tooling &#8212; as I hope you do too.</p>



<p><a href="https://github.com/jackullrich/syscall-detect" target="_blank" rel="noreferrer noopener">Full PoC available on my GitHub</a>.</p>



<h4 class="wp-block-heading">Vs. Outflank&#8217;s Dumpert</h4>



<figure class="wp-block-video aligncenter"><video controls src="http://172-236-100-146.ip.linodeusercontent.com/wp-content/uploads/2021/02/B3LzihARZF.webm"></video><figcaption class="wp-element-caption">Fullscreen available. Resolution may not display correctly on mobile.</figcaption></figure>



<p>The instrumentation callback is catching a manual syscall returning to dumpert&#8217;s module, while leaving normal functionality uninterrupted.</p>



<h4 class="wp-block-heading"> Vs. Notepad (Debug logging enabled)</h4>



<figure class="wp-block-video aligncenter"><video controls src="http://172-236-100-146.ip.linodeusercontent.com/wp-content/uploads/2021/02/fyiZgjEgrV.webm"></video><figcaption class="wp-element-caption">Fullscreen available. Resolution may not display correctly on mobile.</figcaption></figure>



<p>Notepad functionality is allowed through the instrumentation callback. Functions are being resolved correctly via <em>SymFromAddr</em>. There is a noticeable performance impact due to console logging. Additionally, notepad will crash when the dll is injected before full process initialization. The hook needs a lot more work!</p>
</div>


<div class="wp-block-group has-global-padding is-layout-constrained wp-block-group-is-layout-constrained" style="margin-top:var(--wp--preset--spacing--40);padding-bottom:var(--wp--preset--spacing--50)"><div class="taxonomy-post_tag is-style-pill wp-block-post-terms"><a href="https://winternl.com/tag/hooking/" rel="tag">Hooking</a><span class="wp-block-post-terms__separator">  </span><a href="https://winternl.com/tag/syscalls/" rel="tag">Syscalls</a></div>


<div class="wp-block-group has-global-padding is-layout-constrained wp-block-group-is-layout-constrained">
<div style="height:var(--wp--preset--spacing--40)" aria-hidden="true" class="wp-block-spacer"></div>



<hr class="wp-block-separator has-text-color has-contrast-3-color has-alpha-channel-opacity has-contrast-3-background-color has-background is-style-wide" style="margin-bottom:var(--wp--preset--spacing--40)"/>





<nav aria-label="Posts" class="wp-block-group is-content-justification-space-between is-nowrap is-layout-flex wp-container-core-group-is-layout-c08a3ef2 wp-block-group-is-layout-flex" style="padding-top:var(--wp--preset--spacing--40);padding-bottom:var(--wp--preset--spacing--40)"><div class="post-navigation-link-previous wp-block-post-navigation-link"><span class="wp-block-post-navigation-link__arrow-previous is-arrow-arrow" aria-hidden="true">←</span><a href="https://winternl.com/designing-emulation-resistant-control-flow/" rel="prev"><span class="post-navigation-link__label">Previous: </span> <span class="post-navigation-link__title">Designing Emulation Resistant Control Flow</span></a></div>

<div class="post-navigation-link-next wp-block-post-navigation-link"><a href="https://winternl.com/dealing-with-failure/" rel="next"><span class="post-navigation-link__label">Next: </span> <span class="post-navigation-link__title">Dealing with Failure: Failure Escalation Policy in Unmanaged CLR Hosts</span></a><span class="wp-block-post-navigation-link__arrow-next is-arrow-arrow" aria-hidden="true">→</span></div></nav>
</div>
</div>
</main>


<footer class="wp-block-template-part">
<div class="wp-block-group alignwide has-global-padding is-layout-constrained wp-block-group-is-layout-constrained">
<div class="wp-block-group alignwide is-layout-flow wp-block-group-is-layout-flow" style="padding-top:var(--wp--preset--spacing--50);padding-bottom:var(--wp--preset--spacing--50)">
<hr class="wp-block-separator has-alpha-channel-opacity is-style-wide"/>



<div class="wp-block-group is-content-justification-space-between is-layout-flex wp-container-core-group-is-layout-e5edad21 wp-block-group-is-layout-flex">
<div class="wp-block-group is-layout-flex wp-container-core-group-is-layout-fe1ad1e6 wp-block-group-is-layout-flex">
<p class="has-small-font-size">©</p>


<p style="font-style:normal;font-weight:400;" class="wp-block-site-title has-small-font-size"><a href="https://winternl.com" target="_self" rel="home">winternl</a></p></div>



<p class="has-small-font-size"></p>
</div>
</div>
</div>
</footer></div>
<script type="speculationrules">
{"prefetch":[{"source":"document","where":{"and":[{"href_matches":"\/*"},{"not":{"href_matches":["\/wp-*.php","\/wp-admin\/*","\/wp-content\/uploads\/*","\/wp-content\/*","\/wp-content\/plugins\/*","\/wp-content\/themes\/twentytwentyfour\/*","\/*\\?(.+)"]}},{"not":{"selector_matches":"a[rel~=\"nofollow\"]"}},{"not":{"selector_matches":".no-prefetch, .no-prefetch a"}}]},"eagerness":"conservative"}]}
</script>
<script src="https://winternl.com/wp-content/plugins/code-block-pro/build/front/front.js?ver=0437d762201d8ceb35ea" id="kevinbatdorf-code-block-pro-view-script-js" data-wp-strategy="defer"></script>
<script id="kevinbatdorf-code-block-pro-view-script-js-after">
window.codeBlockPro = {"pluginUrl":"https:\/\/winternl.com\/wp-content\/plugins\/code-block-pro\/"};
</script>
<script id="wp-block-template-skip-link-js-after">
	( function() {
		var skipLinkTarget = document.querySelector( 'main' ),
			sibling,
			skipLinkTargetID,
			skipLink;

		// Early exit if a skip-link target can't be located.
		if ( ! skipLinkTarget ) {
			return;
		}

		/*
		 * Get the site wrapper.
		 * The skip-link will be injected in the beginning of it.
		 */
		sibling = document.querySelector( '.wp-site-blocks' );

		// Early exit if the root element was not found.
		if ( ! sibling ) {
			return;
		}

		// Get the skip-link target's ID, and generate one if it doesn't exist.
		skipLinkTargetID = skipLinkTarget.id;
		if ( ! skipLinkTargetID ) {
			skipLinkTargetID = 'wp--skip-link--target';
			skipLinkTarget.id = skipLinkTargetID;
		}

		// Create the skip link.
		skipLink = document.createElement( 'a' );
		skipLink.classList.add( 'skip-link', 'screen-reader-text' );
		skipLink.id = 'wp-skip-link';
		skipLink.href = '#' + skipLinkTargetID;
		skipLink.innerText = 'Skip to content';

		// Inject the skip link.
		sibling.parentElement.insertBefore( skipLink, sibling );
	}() );
	
</script>
<script defer src="https://winternl.com/wp-content/plugins/koko-analytics/assets/dist/js/script.js?ver=2.0.18" id="koko-analytics-js"></script>
</body>
</html>
