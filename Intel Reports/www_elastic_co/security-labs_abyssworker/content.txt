<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Shedding light on the ABYSSWORKER driver — Elastic Security Labs</title><meta name="description" content="Elastic Security Labs describes ABYSSWORKER, a malicious driver used with the MEDUSA ransomware attack-chain to disable anti-malware tools."/><meta property="og:title" content="Shedding light on the ABYSSWORKER driver — Elastic Security Labs"/><meta property="og:description" content="Elastic Security Labs describes ABYSSWORKER, a malicious driver used with the MEDUSA ransomware attack-chain to disable anti-malware tools."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/abyssworker/abyssworker.jpg?7a2c76dfcd6a6b7d22a838866a8591d2"/><meta property="og:image:alt" content="Elastic Security Labs describes ABYSSWORKER, a malicious driver used with the MEDUSA ransomware attack-chain to disable anti-malware tools."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/abyssworker"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Shedding light on the ABYSSWORKER driver — Elastic Security Labs"/><meta name="twitter:description" content="Elastic Security Labs describes ABYSSWORKER, a malicious driver used with the MEDUSA ransomware attack-chain to disable anti-malware tools."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/abyssworker/abyssworker.jpg?7a2c76dfcd6a6b7d22a838866a8591d2"/><meta name="twitter:image:alt" content="Elastic Security Labs describes ABYSSWORKER, a malicious driver used with the MEDUSA ransomware attack-chain to disable anti-malware tools."/><link rel="canonical" href="https://www.elastic.co/security-labs/abyssworker"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fabyssworker%2Fabyssworker.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fabyssworker%2Fabyssworker.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fabyssworker%2Fabyssworker.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fabyssworker%2Fabyssworker.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fabyssworker%2Fabyssworker.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fabyssworker%2Fabyssworker.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fabyssworker%2Fabyssworker.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fabyssworker%2Fabyssworker.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-6099969c8d0667dd.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-b0c191de1a3710e4.js" defer=""></script><script src="/security-labs/_next/static/zgtdq_G6IdLL0e41oqL5l/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/zgtdq_G6IdLL0e41oqL5l/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/abyssworker"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/abyssworker"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2025-03-20T00:00:00.000Z">20 March 2025</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/cyril-francois">Cyril François</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Shedding light on the ABYSSWORKER&nbsp;driver</span></h1><p class="text-zinc-200 text-base md:text-xl">Elastic Security Labs describes ABYSSWORKER, a malicious driver used with the MEDUSA ransomware attack-chain to disable anti-malware tools.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>16 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/malware-analysis">Malware analysis</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Shedding light on the ABYSSWORKER driver" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fabyssworker%2Fabyssworker.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fabyssworker%2Fabyssworker.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fabyssworker%2Fabyssworker.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fabyssworker%2Fabyssworker.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fabyssworker%2Fabyssworker.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fabyssworker%2Fabyssworker.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fabyssworker%2Fabyssworker.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fabyssworker%2Fabyssworker.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fabyssworker%2Fabyssworker.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="summary" class="absolute -top-32"></span>Summary</h1>
<p>Cybercriminals are increasingly bringing their own drivers — either exploiting a vulnerable legitimate driver or using a custom-built driver to disable endpoint detection and response (EDR) systems and evade detection or prevention capabilities.</p>
<p>Elastic Security Labs has monitored a financially motivated campaign deploying MEDUSA ransomware through the use of a <a href="https://unit42.paloaltonetworks.com/packer-as-a-service-heartcrypt-malware/">HEARTCRYPT</a>-packed loader. This loader was deployed alongside a revoked certificate-signed driver from a Chinese vendor we named ABYSSWORKER, which it installs on the victim machine and then uses to target and silence different EDR vendors. This EDR-killer driver was <a href="https://www.linkedin.com/pulse/attackers-leveraging-microsoft-teams-defaults-quick-assist-p1u5c/">first reported</a> by ConnectWise in another campaign, using a different certificate and IO control codes, at which time some of its capabilities were discussed.</p>
<p>In this article, we take an in-depth look at this driver, examining its various features and techniques. We also provide relative virtual addresses (RVA) under each reversed code screenshot to link the research with the reference sample, along with a small client example that you can use to further experiment with this malware.</p>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="technical-analysis" class="absolute -top-32"></span>Technical Analysis</h1>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="pe-header" class="absolute -top-32"></span>PE header</h2>
<p>The binary is a 64-bit Windows PE driver named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">smuol.sys</code>, and imitates a legitimate CrowdStrike Falcon driver.</p>
<p></p>
<p>At the time of analysis, we found a dozen samples on VirusTotal, dating from 2024-08-08 to 2025-02-24. Most were VMProtect packed, but two — referenced in the observable tables below — weren’t protected.</p>
<p>All samples are signed using likely stolen, revoked certificates from Chinese companies. These certificates are widely known and shared across different malware samples and campaigns but are not specific to this driver. The certificate fingerprints are listed below:</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left">Fingerprint</th><th align="left">Name</th></tr></thead><tbody><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">51 68 1b 3c 9e 66 5d d0 b2 9e 25 71 46 d5 39 dc</code></td><td align="left">Foshan Gaoming Kedeyu Insulation Materials Co., Ltd</td></tr><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">7f 67 15 0f bb 0d 25 4e 47 42 84 c7 f7 81 9c 4f</code></td><td align="left">FEI XIAO</td></tr><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">72 88 1f 10 cd 24 8a 33 e6 12 43 a9 e1 50 ec 1d</code></td><td align="left">Fuzhou Dingxin Trade Co., Ltd.</td></tr><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">75 e8 e7 b9 04 3b 13 df 60 e7 64 99 66 30 21 c1</code></td><td align="left">Changsha Hengxiang Information Technology Co., Ltd</td></tr><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">03 93 47 e6 1d ec 6f 63 98 d4 d4 6b f7 32 65 6c</code></td><td align="left">Xinjiang Yishilian Network Technology Co., Ltd</td></tr><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">4e fa 7e 7b ba 65 ec 1a b7 74 f2 b3 13 57 d5 99</code></td><td align="left">Shenzhen Yundian Technology Co., Ltd</td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="obfuscation" class="absolute -top-32"></span>Obfuscation</h2>
<p>ABYSSWORKER uses functions that always return the same value, relying on a combination of opaque predicates and other derivation functions. For example, the zero-returning function below always returns a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0</code> based on hardcoded derived values.</p>
<p></p>
<p>Below is one of the derivation functions:</p>
<p></p>
<p>These constant-returning functions are called repeatedly throughout the binary to hinder static analysis. However, there are only three such functions, and they aren&#x27;t used in any predicate but are simply called. We can easily identify them, making this an inefficient obfuscation scheme.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="initialization" class="absolute -top-32"></span>Initialization</h2>
<p>Upon initialization, the driver begins by obtaining pointers to several kernel modules and its client protection feature, which will be discussed in the following sections.</p>
<p></p>
<p></p>
<p>Then, it creates a device with the path <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">\\device\\czx9umpTReqbOOKF</code> and a symbolic link with the path <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">\\??\\fqg0Et4KlNt4s1JT</code>.</p>
<p></p>
<p></p>
<p>It completes initialization by registering callbacks for its major functions.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="client-protection-on-device-opening" class="absolute -top-32"></span>Client protection on device opening</h2>
<p>When the driver device is opened, the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IRP_MJ_CREATE</code> major callback is called. This function is responsible for adding the process ID to the list of processes to protect and for stripping any pre-existing handles to the target process from the list of running processes.</p>
<p>The function retrieves the process ID from the current kernel thread since the kernel callback is executed in the context of the client process when the device is opened.</p>
<p></p>
<p>Before adding the process ID to the protection list, ABYSSWORKER searches for and strips any existing handles to the client process in other running processes.</p>
<p>To achieve this, the malware iterates over existing processes by brute-forcing their Process IDs (PIDs) to avoid reliance on any API. For each process, it iterates over their handles, also using brute force, and checks if the underlying object corresponds to the client process. If a match is found, it strips the access rights using the value passed as a parameter (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x8bb</code>).</p>
<p></p>
<p></p>
<p>Finally, it adds the PID to the global list of protected processes.</p>
<p></p>
<p>As mentioned earlier, the driver sets up its protection feature during the initialization phase. This protection relies on registering two <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">pre-operation</code> callbacks using the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ObRegisterCallback</code> API: one to detect the opening of handles to its protected processes and another to detect the opening of handles to the threads of those protected processes.</p>
<p>The two callbacks operate in the same way: they set the desired access for the handle to zero, effectively denying the creation of the handle.</p>
<p></p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="deviceiocontrol-handlers" class="absolute -top-32"></span>DeviceIoControl handlers</h2>
<p>Upon receiving a device I/O control request, ABYSSWORKER dispatches the request to handlers based on the I/O control code. These handlers cover a wide range of operations, from file manipulation to process and driver termination, providing a comprehensive toolset that can be used to terminate or permanently disable EDR systems.</p>
<p>We detail the different IO controls in the table below:</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left">Name</th><th align="left">Code</th></tr></thead><tbody><tr><td align="left">Enable malware</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x222080</code></td></tr><tr><td align="left">Copy file</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x222184</code></td></tr><tr><td align="left">Remove callbacks and devices by module name</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x222400</code></td></tr><tr><td align="left">Replace driver major functions by module name</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x222404</code></td></tr><tr><td align="left">Kill system threads by module name</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x222408</code></td></tr><tr><td align="left">Detach mini filter devices</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x222440</code></td></tr><tr><td align="left">Delete file</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x222180</code></td></tr><tr><td align="left">Disable malware</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x222084</code></td></tr><tr><td align="left">Load api</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x2220c0</code></td></tr><tr><td align="left">Decrease all drivers reference counter</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x222100</code></td></tr><tr><td align="left">Decrease all devices reference counter</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x222104</code></td></tr><tr><td align="left">Terminate process</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x222144</code></td></tr><tr><td align="left">Terminate thread</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x222140</code></td></tr><tr><td align="left">Removing hooks from Ntfs and Pnp drivers&#x27; major functions</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x222444</code></td></tr><tr><td align="left">Reboot</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x222664</code></td></tr></tbody></table></div>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="enabling-the-malware-0x222080" class="absolute -top-32"></span>Enabling the malware (0x222080)</h3>
<p>As discussed in this <a href="https://www.linkedin.com/pulse/attackers-leveraging-microsoft-teams-defaults-quick-assist-p1u5c/">blog post</a>, the client must enable the driver by sending a password (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">7N6bCAoECbItsUR5-h4Rp2nkQxybfKb0F-wgbJGHGh20pWUuN1-ZxfXdiOYps6HTp0X</code>) to the driver, in our case it’s through the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x222080</code> IO control.</p>
<p>The handler simply compares the user input with the hardcoded password. If correct, it sets a global flag to true (1). This flag is checked in all other handlers to permit or deny execution.</p>
<p></p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="loading-the-api-0x2220c0" class="absolute -top-32"></span>Loading the API (0x2220c0)</h3>
<p>Most handlers in the malware rely on kernel APIs that must be loaded using this handler. This handler loads these globals along with several structures, using the kernel module pointers previously loaded during initialization. Once the loading is complete, a global flag is set to signal the availability of these APIs.</p>
<p></p>
<p>This handler has two modes of operation: a full mode and a partial mode. In full mode, it loads the APIs using a mapping structure of function names and RVA provided by the user as input to the IO control. In partial mode, it searches for some of the APIs on its own but does not load all the APIs that are loaded in full mode, hence the term partial mode. If the user opts for partial mode due to the inability to provide this mapping structure, some handlers will not execute. In this chapter, we only cover the full mode of operation.</p>
<p>We detail the structures used below:</p>
<pre><code>#define AM_NAME_LENGTH 256
typedef struct _struct_435
{
   uint64_t rva;
   char name[AM_NAME_LENGTH];
} struct_435_t;

#define AM_ARRAY_LENGTH 1024
typedef struct _struct_433
{
   struct_435_t array[AM_ARRAY_LENGTH];
   uint32_t length;
} struct_433_t;</code></pre>
<p>We provide a short example of usage below:</p>
<pre><code>struct_433_t api_mapping = {
    .length = 25,
    .array = {
        [0] = {.rva = 0xcec620, .name = &quot;PspLoadImageNotifyRoutine&quot;},
        [1] = {.rva = 0xcec220, .name = &quot;PspCreateThreadNotifyRoutine&quot;},
        [2] = {.rva = 0xcec420, .name = &quot;PspCreateProcessNotifyRoutine&quot;},
        // (...)
        [24] = {.rva = 0x250060, .name = &quot;NtfsFsdShutdown&quot;},
}};

uint32_t malware_load_api(HANDLE device)
{
    return send_ioctrl(device, IOCTRL_LOAD_API, &amp;api_mapping, sizeof(struct_433_t), NULL, 0);
}</code></pre>
<p>To load its API, the function starts by loading three &#x27;callback lists&#x27; from different kernel object types. These are used by the handler that removes registered notification callbacks belonging to a specific module.</p>
<p></p>
<p>Then, it loads pointers to functions by using the provided structure, simply by searching for the function name and adding the associated RVA to the module&#x27;s base address.</p>
<p></p>
<p></p>
<p>This is done for the following 25 functions:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PspLoadImageNotifyRoutine</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PspCreateThreadNotifyRoutine</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PspCreateProcessNotifyRoutine</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CallbackListHead</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PspSetCreateProcessNotifyRoutine</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PspTerminateThreadByPointer</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PsTerminateProcess</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IopInvalidDeviceRequest</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ClassGlobalDispatch</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtfsFsdRead</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtfsFsdWrite</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtfsFsdLockControl</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtfsFsdDirectoryControl</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtfsFsdClose</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtfsFsdCleanup</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtfsFsdCreate</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtfsFsdDispatchWait</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtfsFsdDispatchSwitch</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtfsFsdDispatch</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtfsFsdFlushBuffers</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtfsFsdDeviceControl</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtfsFsdFileSystemControl</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtfsFsdSetInformation</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtfsFsdPnp</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtfsFsdShutdown</code></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="file-copy-and-deletion-0x222184-0x222180" class="absolute -top-32"></span>File copy and deletion (0x222184, 0x222180)</h3>
<p>To copy or delete files, ABYSSWORKER relies on a strategy that, although not new, remains interesting. Instead of using a common API like <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtCreateFile</code>, an I/O Request Packet (IRP) is created from scratch and sent directly to the corresponding drive device containing the target file.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="creating-a-file" class="absolute -top-32"></span>Creating a file</h4>
<p>The file creation function is used to showcase how this mechanism works. The function starts by obtaining the drive device from the file path. Then, a new file object is created and linked to the target drive device, ensuring that the new object is properly linked to the drive.</p>
<p></p>
<p>Then, it creates a new IRP object and sets all the necessary data to perform the file creation operation. The major function targeted by this IRP is specified in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">MajorFunction</code> property, which, in this case, is set to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IRP_MJ_CREATE</code>, as expected for file creation.</p>
<p></p>
<p>Then, the malware sends the IRP to the target drive device. While it could have used the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IoCallDriver</code> API to do so, it instead sends the IRP manually by calling the corresponding device&#x27;s major function.</p>
<p></p>
<p>At this point, the file object is valid for further use. The handler finishes its work by incrementing the reference counter of the file object and assigning it to its output parameter for later use.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="copying-a-file" class="absolute -top-32"></span>Copying a file</h4>
<p>To copy a file, ABYSSWORKER opens both the source and destination files, then reads (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IRP_MJ_READ</code>) from the source and writes (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IRP_MJ_WRITE</code>) to the destination.</p>
<p></p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="deleting-a-file" class="absolute -top-32"></span>Deleting a file</h4>
<p>The deletion handler sets the file attribute to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ATTRIBUTE_NORMAL</code> to unprotect any read-only file and sets the file disposition to delete (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">disposition_info.DeleteFile = 1</code>) to remove the file using the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IRP_MJ_SET_INFORMATION</code> IRP.</p>
<p></p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="notification-callbacks-removal-by-module-name-0x222400" class="absolute -top-32"></span>Notification callbacks removal by module name (0x222400)</h3>
<p>Malware clients can use this handler to blind EDR products and their visibility. It searches for and removes all registered notification callbacks. The targeted callbacks are those registered with the following APIs:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PsSetCreateProcessNotifyRoutine</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PsSetLoadImageNotifyRoutine</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PsSetCreateThreadNotifyRoutine</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ObRegisterCallbacks</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CmRegisterCallback</code></li>
</ul>
<p>Additionally, it removes callbacks registered through a MiniFilter driver and, optionally, removes devices belonging to a specific module.</p>
<p></p>
<p>To delete those notification callbacks, the handler locates them using various methods, such as the three global callback lists previously loaded in the loading API handler, which contain callbacks registered with <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ObRegisterCallbacks</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CmRegisterCallback</code>. It then deletes them using the corresponding APIs, like <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ObUnRegisterCallbacks</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CmUnRegisterCallbacks</code>.</p>
<p>Blinding EDR using these methods deserves a whole blog post of its own. To keep this post concise, we won’t provide more details here, but we invite the reader to explore these methods in two well-documented projects that implement these techniques:</p>
<ul>
<li><a href="https://github.com/wavestone-cdt/EDRSandblast/tree/master">EDRSandblast</a></li>
<li><a href="https://github.com/myzxcg/RealBlindingEDR">RealBlindingEDR</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="replace-driver-major-functions-by-module-name-0x222404" class="absolute -top-32"></span>Replace driver major functions by module name <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x222404</code></h3>
<p>Another way to interfere with a driver is by using this handler to replace all its major functions with a dummy function, thus disabling any interaction with the driver, given a target module name.</p>
<p>To achieve this, ABYSSWORKER iterates through the driver objects in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Driver</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Filesystem</code> object directories. For each driver object, it compares the underlying module name to the target module, and if they match, it replaces all of its major functions with <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IopInvalidDeviceRequest</code>.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="detach-mini-filter-devices-0x222440" class="absolute -top-32"></span>Detach mini filter devices (0x222440)</h3>
<p>This handler iterates over all driver objects found in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Driver</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">FileSystem</code> object directories. For each driver, it explores its device tree and detaches all devices associated with the mini filter driver: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">FltMgr.sys</code>.</p>
<p></p>
<p>The function works by iterating over the devices of the driver through the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AttachedDevice</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NextDevice</code> pointers, retrieving the module name of each device&#x27;s associated driver, and comparing it to the target module name passed as a parameter (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">”FltMgr.sys”</code>). If the names match, it uses the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IoDetachDevice</code> function to unlink the device.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="kill-system-threads-by-module-name-0x222408" class="absolute -top-32"></span>Kill system threads by module name (0x222408)</h3>
<p>This handler iterates over threads by brute-forcing their thread IDs and kills them if the thread is a system thread and its start address belongs to the targeted module.</p>
<p></p>
<p>To terminate the thread, the malware queues an APC (asynchronous procedure call) to execute code in the context of the targeted thread. Once executed, this code will, in turn, call <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PsTerminateSystemThread</code>.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="terminate-process-and-terminate-thread-0x222144-0x222140" class="absolute -top-32"></span>Terminate process and terminate thread (0x222144, 0x222140)</h3>
<p>With these two handlers you can terminate any process or a thread by their PID or Thread ID (TID) using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PsTerminateProcess</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PsTerminateThread</code>.</p>
<p></p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="removing-hooks-from-ntfs-and-pnp-drivers-major-functions-0x222444" class="absolute -top-32"></span>Removing hooks from Ntfs and Pnp drivers&#x27; major functions (0x222444)</h3>
<p>On top of registering notification callbacks, some EDRs like to hook major functions of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NTFS</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PNP</code> drivers. To remove those hooks, the malware can call this driver to restore the original major functions of those drivers.</p>
<p></p>
<p>ABYSSWORKER simply iterates over each registered major function, checks if the function belongs to the driver module, and if not, it means the function has been hooked, so it replaces it with the original functions.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="reboot-0x222664" class="absolute -top-32"></span>Reboot <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x222664</code></h3>
<p>To reboot the machine, this handler uses the undocumented function <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HalReturnToFirmware</code>.</p>
<p></p>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="client-implementation-example" class="absolute -top-32"></span>Client implementation example</h1>
<p>In this blog post, we provide a small client implementation example. This example works with the reference sample and was used to debug it, but doesn’t implement all the IOCTRLs for the driver and is unlikely to be updated in the future.</p>
<p>However, it contains all the functions to enable it and load its API, so we hope that any motivated reader, with the help of the information in this article, will be able to extend it and further experiment with this malware.</p>
<p></p>
<p>The repository of the project is available <a href="https://github.com/elastic/labs-releases/tree/main/tools/abyssworker/client">here</a>.</p>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="malware-and-mitre-attck" class="absolute -top-32"></span>Malware and MITRE ATT&amp;CK</h1>
<p>Elastic uses the <a href="https://attack.mitre.org/">MITRE ATT&amp;CK</a> framework to document common tactics, techniques, and procedures that threats use against enterprise networks.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="tactics" class="absolute -top-32"></span>Tactics</h2>
<ul>
<li><a href="https://attack.mitre.org/tactics/TA0005">Defense Evasion</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="techniques" class="absolute -top-32"></span>Techniques</h2>
<p>Techniques represent how an adversary achieves a tactical goal by performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/techniques/T1222">File and Directory Permissions Modification</a></li>
<li><a href="https://attack.mitre.org/techniques/T1562/001">Disable or Modify Tools</a></li>
<li><a href="https://attack.mitre.org/techniques/T1553/002">Code Signing</a></li>
</ul>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="mitigations" class="absolute -top-32"></span>Mitigations</h1>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="yara" class="absolute -top-32"></span>YARA</h2>
<p>Elastic Security has created the following YARA rules related to this post:</p>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Rootkit_AbyssWorker.yar">https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Rootkit_AbyssWorker.yar</a></li>
</ul>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="observations" class="absolute -top-32"></span>Observations</h1>
<p>The following observables were discussed in this research:</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left">Observable</th><th align="left">Type</th><th align="left">Reference</th><th align="left">Date</th></tr></thead><tbody><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">6a2a0f9c56ee9bf7b62e1d4e1929d13046cd78a93d8c607fe4728cc5b1e8d050</code></td><td align="left">SHA256</td><td align="left">ABYSSWORKER reference sample</td><td align="left">VT first seen: 2025-01-22</td></tr><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">b7703a59c39a0d2f7ef6422945aaeaaf061431af0533557246397551b8eed505</code></td><td align="left">SHA256</td><td align="left">ABYSSWORKER sample</td><td align="left">VT first seen: 2025-01-27</td></tr></tbody></table></div>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="references" class="absolute -top-32"></span>References</h1>
<ul>
<li>Unit42, Jerome Tujague, Daniel Bunce. Crypted Hearts: Exposing the HeartCrypt Packer-as-a-Service Operation, December 13, 2024. <a href="https://unit42.paloaltonetworks.com/packer-as-a-service-heartcrypt-malware/">https://unit42.paloaltonetworks.com/packer-as-a-service-heartcrypt-malware/</a></li>
<li>ConnectWise, Blake Eakin. &quot;Attackers Leveraging Microsoft Teams Defaults and Quick Assist for Social Engineering Attacks&quot;, January 31 2025. <a href="https://www.linkedin.com/pulse/attackers-leveraging-microsoft-teams-defaults-quick-assist-p1u5c/">https://www.linkedin.com/pulse/attackers-leveraging-microsoft-teams-defaults-quick-assist-p1u5c/</a></li>
<li>wavestone-cdt, Aug 30, 2024. <a href="https://github.com/wavestone-cdt/EDRSandblast/tree/master">https://github.com/wavestone-cdt/EDRSandblast/tree/master</a></li>
<li>myzxcg, May 24, 2024. <a href="https://github.com/myzxcg/RealBlindingEDR">https://github.com/myzxcg/RealBlindingEDR</a></li>
</ul></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/abyssworker#pe-header"><span>PE&nbsp;header</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/abyssworker#obfuscation"><span>Obfuscation</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/abyssworker#initialization"><span>Initialization</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/abyssworker#client-protection-on-device-opening"><span>Client protection on device&nbsp;opening</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/abyssworker#deviceiocontrol-handlers"><span>DeviceIoControl&nbsp;handlers</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/abyssworker#enabling-the-malware-0x222080"><span>Enabling the malware&nbsp;(0x222080)</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/abyssworker#loading-the-api-0x2220c0"><span>Loading the API&nbsp;(0x2220c0)</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/abyssworker#file-copy-and-deletion-0x222184-0x222180"><span>File copy and deletion (0x222184,&nbsp;0x222180)</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/abyssworker#creating-a-file"><span>Creating a&nbsp;file</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/abyssworker#copying-a-file"><span>Copying a&nbsp;file</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/elastic-security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Shedding light on the ABYSSWORKER driver&amp;url=https://www.elastic.co/security-labs/abyssworker" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/abyssworker" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/abyssworker&amp;title=Shedding light on the ABYSSWORKER driver" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/abyssworker&amp;title=Shedding light on the ABYSSWORKER driver" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2025<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Shedding light on the ABYSSWORKER driver","slug":"abyssworker","date":"2025-03-20","description":"Elastic Security Labs describes ABYSSWORKER, a malicious driver used with the MEDUSA ransomware attack-chain to disable anti-malware tools.","image":"abyssworker.jpg","tags":["abyssworker","medusa","byod"],"body":{"raw":"\n# Summary\n\nCybercriminals are increasingly bringing their own drivers — either exploiting a vulnerable legitimate driver or using a custom-built driver to disable endpoint detection and response (EDR) systems and evade detection or prevention capabilities.\n\nElastic Security Labs has monitored a financially motivated campaign deploying MEDUSA ransomware through the use of a [HEARTCRYPT](https://unit42.paloaltonetworks.com/packer-as-a-service-heartcrypt-malware/)\\-packed loader. This loader was deployed alongside a revoked certificate-signed driver from a Chinese vendor we named ABYSSWORKER, which it installs on the victim machine and then uses to target and silence different EDR vendors. This EDR-killer driver was [first reported](https://www.linkedin.com/pulse/attackers-leveraging-microsoft-teams-defaults-quick-assist-p1u5c/) by ConnectWise in another campaign, using a different certificate and IO control codes, at which time some of its capabilities were discussed. \n\nIn this article, we take an in-depth look at this driver, examining its various features and techniques. We also provide relative virtual addresses (RVA) under each reversed code screenshot to link the research with the reference sample, along with a small client example that you can use to further experiment with this malware.\n\n# Technical Analysis\n\n## PE header\n\nThe binary is a 64-bit Windows PE driver named `smuol.sys`, and imitates a legitimate CrowdStrike Falcon driver.\n\n![ABYSSWORKER driver PE header description](/assets/images/abyssworker/image5.png)\n\nAt the time of analysis, we found a dozen samples on VirusTotal, dating from 2024-08-08 to 2025-02-24. Most were VMProtect packed, but two — referenced in the observable tables below — weren’t protected.\n\nAll samples are signed using likely stolen, revoked certificates from Chinese companies. These certificates are widely known and shared across different malware samples and campaigns but are not specific to this driver. The certificate fingerprints are listed below:\n\n| Fingerprint | Name |\n| :---- | :---- |\n| `51 68 1b 3c 9e 66 5d d0 b2 9e 25 71 46 d5 39 dc`  | Foshan Gaoming Kedeyu Insulation Materials Co., Ltd |\n| `7f 67 15 0f bb 0d 25 4e 47 42 84 c7 f7 81 9c 4f`  | FEI XIAO  |\n| `72 88 1f 10 cd 24 8a 33 e6 12 43 a9 e1 50 ec 1d`  | Fuzhou Dingxin Trade Co., Ltd.  |\n| `75 e8 e7 b9 04 3b 13 df 60 e7 64 99 66 30 21 c1`  | Changsha Hengxiang Information Technology Co., Ltd |\n| `03 93 47 e6 1d ec 6f 63 98 d4 d4 6b f7 32 65 6c`  | Xinjiang Yishilian Network Technology Co., Ltd  |\n| `4e fa 7e 7b ba 65 ec 1a b7 74 f2 b3 13 57 d5 99`  | Shenzhen Yundian Technology Co., Ltd |\n\n## Obfuscation\n\nABYSSWORKER uses functions that always return the same value, relying on a combination of opaque predicates and other derivation functions. For example, the zero-returning function below always returns a `0` based on hardcoded derived values.\n\n![Zero-Returning function `0x3238`](/assets/images/abyssworker/image7.png)\n\nBelow is one of the derivation functions:\n\n![Derivation function `0xF0B4`](/assets/images/abyssworker/image26.png)\n\nThese constant-returning functions are called repeatedly throughout the binary to hinder static analysis. However, there are only three such functions, and they aren't used in any predicate but are simply called. We can easily identify them, making this an inefficient obfuscation scheme.\n\n![Example of constant-returning function calls `0x10D2`](/assets/images/abyssworker/image20.png)\n\n## Initialization\n\nUpon initialization, the driver begins by obtaining pointers to several kernel modules and its client protection feature, which will be discussed in the following sections.\n\n![Loading pointers on kernel modules `0x63E2`](/assets/images/abyssworker/image35.png)\n\n![Initializing client protection feature 0x65c3](/assets/images/abyssworker/image28.png)\n\nThen, it creates a device with the path `\\\\device\\\\czx9umpTReqbOOKF` and a symbolic link with the path `\\\\??\\\\fqg0Et4KlNt4s1JT`.\n\n![Creating device `0x2F45`](/assets/images/abyssworker/image11.png)\n\n![Creating symbolic link `0x2FDA`](/assets/images/abyssworker/image17.png)\n\nIt completes initialization by registering callbacks for its major functions.\n\n![Registering driver major functions callbacks `0x3067`](/assets/images/abyssworker/image14.png)\n\n## Client protection on device opening\n\nWhen the driver device is opened, the `IRP_MJ_CREATE` major callback is called. This function is responsible for adding the process ID to the list of processes to protect and for stripping any pre-existing handles to the target process from the list of running processes.\n\nThe function retrieves the process ID from the current kernel thread since the kernel callback is executed in the context of the client process when the device is opened.\n\n![Get client PID from current thread `0x138B`](/assets/images/abyssworker/image33.png)\n\nBefore adding the process ID to the protection list, ABYSSWORKER searches for and strips any existing handles to the client process in other running processes.\n\nTo achieve this, the malware iterates over existing processes by brute-forcing their Process IDs (PIDs) to avoid reliance on any API. For each process, it iterates over their handles, also using brute force, and checks if the underlying object corresponds to the client process. If a match is found, it strips the access rights using the value passed as a parameter (`0x8bb`).\n\n![ABYSSWORKER stripping existing handles to the client from other processes `0x9EDB`](/assets/images/abyssworker/image21.png)\n\n![ABYSSWORKER setting access rights of client handle if found in process `0xA691`](/assets/images/abyssworker/image4.png)\n\nFinally, it adds the PID to the global list of protected processes.\n\n![Client PID is added to the global protected processes list `0x9F43`](/assets/images/abyssworker/image22.png)\n\nAs mentioned earlier, the driver sets up its protection feature during the initialization phase. This protection relies on registering two `pre-operation` callbacks using the `ObRegisterCallback` API: one to detect the opening of handles to its protected processes and another to detect the opening of handles to the threads of those protected processes.\n\nThe two callbacks operate in the same way: they set the desired access for the handle to zero, effectively denying the creation of the handle.\n\n![Registration of callbacks to catch thread and process opening to protected client `0xA2B0`](/assets/images/abyssworker/image18.png)\n\n![Denying access to protected process handle `0xA0A6`](/assets/images/abyssworker/image10.png)\n\n## DeviceIoControl handlers\n\nUpon receiving a device I/O control request, ABYSSWORKER dispatches the request to handlers based on the I/O control code. These handlers cover a wide range of operations, from file manipulation to process and driver termination, providing a comprehensive toolset that can be used to terminate or permanently disable EDR systems.\n\nWe detail the different IO controls in the table below:\n\n| Name | Code |\n| :---- | :---- |\n| Enable malware | `0x222080` |\n| Copy file | `0x222184` |\n| Remove callbacks and devices by module name | `0x222400` |\n| Replace driver major functions by module name | `0x222404` |\n| Kill system threads by module name | `0x222408` |\n| Detach mini filter devices | `0x222440` |\n| Delete file | `0x222180` |\n| Disable malware | `0x222084` |\n| Load api | `0x2220c0` |\n| Decrease all drivers reference counter | `0x222100` |\n| Decrease all devices reference counter | `0x222104` |\n| Terminate process | `0x222144` |\n| Terminate thread | `0x222140` |\n| Removing hooks from Ntfs and Pnp drivers' major functions | `0x222444` |\n| Reboot | `0x222664` |\n\n### Enabling the malware (0x222080)\n\nAs discussed in this [blog post](https://www.linkedin.com/pulse/attackers-leveraging-microsoft-teams-defaults-quick-assist-p1u5c/), the client must enable the driver by sending a password (`7N6bCAoECbItsUR5-h4Rp2nkQxybfKb0F-wgbJGHGh20pWUuN1-ZxfXdiOYps6HTp0X`) to the driver, in our case it’s through the `0x222080` IO control.\n\nThe handler simply compares the user input with the hardcoded password. If correct, it sets a global flag to true (1). This flag is checked in all other handlers to permit or deny execution.\n\n![Hardcoded password `0x12000`](/assets/images/abyssworker/image1.png)\n\n![Enabling malware if the password is correct `0x184B`](/assets/images/abyssworker/image3.png)\n\n### Loading the API (0x2220c0)\n\nMost handlers in the malware rely on kernel APIs that must be loaded using this handler. This handler loads these globals along with several structures, using the kernel module pointers previously loaded during initialization. Once the loading is complete, a global flag is set to signal the availability of these APIs.\n\n![Set the global flag to `1` once the API is loaded `0x1c28`](/assets/images/abyssworker/image29.png)\n\nThis handler has two modes of operation: a full mode and a partial mode. In full mode, it loads the APIs using a mapping structure of function names and RVA provided by the user as input to the IO control. In partial mode, it searches for some of the APIs on its own but does not load all the APIs that are loaded in full mode, hence the term partial mode. If the user opts for partial mode due to the inability to provide this mapping structure, some handlers will not execute. In this chapter, we only cover the full mode of operation.\n\nWe detail the structures used below:\n\n```c\n#define AM_NAME_LENGTH 256\ntypedef struct _struct_435\n{\n   uint64_t rva;\n   char name[AM_NAME_LENGTH];\n} struct_435_t;\n\n#define AM_ARRAY_LENGTH 1024\ntypedef struct _struct_433\n{\n   struct_435_t array[AM_ARRAY_LENGTH];\n   uint32_t length;\n} struct_433_t;\n```\n\nWe provide a short example of usage below:\n\n```c\nstruct_433_t api_mapping = {\n    .length = 25,\n    .array = {\n        [0] = {.rva = 0xcec620, .name = \"PspLoadImageNotifyRoutine\"},\n        [1] = {.rva = 0xcec220, .name = \"PspCreateThreadNotifyRoutine\"},\n        [2] = {.rva = 0xcec420, .name = \"PspCreateProcessNotifyRoutine\"},\n        // (...)\n        [24] = {.rva = 0x250060, .name = \"NtfsFsdShutdown\"},\n}};\n\nuint32_t malware_load_api(HANDLE device)\n{\n    return send_ioctrl(device, IOCTRL_LOAD_API, \u0026api_mapping, sizeof(struct_433_t), NULL, 0);\n}\n```\n\nTo load its API, the function starts by loading three 'callback lists' from different kernel object types. These are used by the handler that removes registered notification callbacks belonging to a specific module.\n\n![ABYSSWORKER getting callback list from kernel’s _OBJECT_TYPEs `0x5502`](/assets/images/abyssworker/image23.png)\n\nThen, it loads pointers to functions by using the provided structure, simply by searching for the function name and adding the associated RVA to the module's base address.\n\n![Get function RVA from structure `0x5896`](/assets/images/abyssworker/image9.png)\n\n![Search RVA associated with function name in structure `0x3540`](/assets/images/abyssworker/image6.png)\n\nThis is done for the following 25 functions:\n\n* `PspLoadImageNotifyRoutine`  \n* `PspCreateThreadNotifyRoutine`  \n* `PspCreateProcessNotifyRoutine`  \n* `CallbackListHead`  \n* `PspSetCreateProcessNotifyRoutine`  \n* `PspTerminateThreadByPointer`  \n* `PsTerminateProcess`  \n* `IopInvalidDeviceRequest`  \n* `ClassGlobalDispatch`  \n* `NtfsFsdRead`  \n* `NtfsFsdWrite`  \n* `NtfsFsdLockControl`  \n* `NtfsFsdDirectoryControl`  \n* `NtfsFsdClose`  \n* `NtfsFsdCleanup`  \n* `NtfsFsdCreate`  \n* `NtfsFsdDispatchWait`  \n* `NtfsFsdDispatchSwitch`  \n* `NtfsFsdDispatch`  \n* `NtfsFsdFlushBuffers`  \n* `NtfsFsdDeviceControl`  \n* `NtfsFsdFileSystemControl`  \n* `NtfsFsdSetInformation`  \n* `NtfsFsdPnp`  \n* `NtfsFsdShutdown`\n\n### File copy and deletion (0x222184, 0x222180)\n\nTo copy or delete files, ABYSSWORKER relies on a strategy that, although not new, remains interesting. Instead of using a common API like `NtCreateFile`, an I/O Request Packet (IRP) is created from scratch and sent directly to the corresponding drive device containing the target file.\n\n#### Creating a file\n\nThe file creation function is used to showcase how this mechanism works. The function starts by obtaining the drive device from the file path. Then, a new file object is created and linked to the target drive device, ensuring that the new object is properly linked to the drive.\n\n![Building a new file object `0x7A14`](/assets/images/abyssworker/image15.png)\n\nThen, it creates a new IRP object and sets all the necessary data to perform the file creation operation. The major function targeted by this IRP is specified in the `MajorFunction` property, which, in this case, is set to `IRP_MJ_CREATE`, as expected for file creation.\n\n![Building new IRP `0x7C68`](/assets/images/abyssworker/image16.png)\n\nThen, the malware sends the IRP to the target drive device. While it could have used the `IoCallDriver` API to do so, it instead sends the IRP manually by calling the corresponding device's major function.\n\n![Sending IRP to device `0x9B14`](/assets/images/abyssworker/image15.png)\n\nAt this point, the file object is valid for further use. The handler finishes its work by incrementing the reference counter of the file object and assigning it to its output parameter for later use.\n\n#### Copying a file\n\nTo copy a file, ABYSSWORKER opens both the source and destination files, then reads (`IRP_MJ_READ`) from the source and writes (`IRP_MJ_WRITE`) to the destination.\n\n![Copying file using IRPs `0x4BA8`](/assets/images/abyssworker/image40.png)\n\n![Reading and writing files using IRPs `0x66D9`](/assets/images/abyssworker/image31.png)\n\n#### Deleting a file\n\nThe deletion handler sets the file attribute to `ATTRIBUTE_NORMAL` to unprotect any read-only file and sets the file disposition to delete (`disposition_info.DeleteFile = 1`) to remove the file using the `IRP_MJ_SET_INFORMATION` IRP.\n\n![Setting file attribute to normal and deleting it `0x4FB6`](/assets/images/abyssworker/image30.png)\n\n![Building IRP_MJ_SET_INFORMATION IRP to delete file `0x67B4`](/assets/images/abyssworker/image24.png)\n\n### Notification callbacks removal by module name (0x222400)\n\nMalware clients can use this handler to blind EDR products and their visibility. It searches for and removes all registered notification callbacks. The targeted callbacks are those registered with the following APIs:\n\n- `PsSetCreateProcessNotifyRoutine`  \n- `PsSetLoadImageNotifyRoutine`  \n- `PsSetCreateThreadNotifyRoutine`  \n- `ObRegisterCallbacks`  \n- `CmRegisterCallback`\n\nAdditionally, it removes callbacks registered through a MiniFilter driver and, optionally, removes devices belonging to a specific module.\n\n![Deleting notifications callbacks and devices `0x263D`](/assets/images/abyssworker/image34.png)\n\nTo delete those notification callbacks, the handler locates them using various methods, such as the three global callback lists previously loaded in the loading API handler, which contain callbacks registered with `ObRegisterCallbacks` and `CmRegisterCallback`. It then deletes them using the corresponding APIs, like `ObUnRegisterCallbacks` and `CmUnRegisterCallbacks`.\n\nBlinding EDR using these methods deserves a whole blog post of its own. To keep this post concise, we won’t provide more details here, but we invite the reader to explore these methods in two well-documented projects that implement these techniques:\n\n- [EDRSandblast](https://github.com/wavestone-cdt/EDRSandblast/tree/master)  \n- [RealBlindingEDR](https://github.com/myzxcg/RealBlindingEDR)\n\n### Replace driver major functions by module name `0x222404`\n\nAnother way to interfere with a driver is by using this handler to replace all its major functions with a dummy function, thus disabling any interaction with the driver, given a target module name.\n\nTo achieve this, ABYSSWORKER iterates through the driver objects in the `Driver` and `Filesystem` object directories. For each driver object, it compares the underlying module name to the target module, and if they match, it replaces all of its major functions with `IopInvalidDeviceRequest`.\n\n![Replacing targeted driver major functions with dummy functions `0x9434`](/assets/images/abyssworker/image36.png)\n\n### Detach mini filter devices (0x222440)\n\nThis handler iterates over all driver objects found in the `Driver` and `FileSystem` object directories. For each driver, it explores its device tree and detaches all devices associated with the mini filter driver: `FltMgr.sys`.\n\n![Searching object directories for ```FltMgr.sys``` driver to delete its devices `0xE1D8`](/assets/images/abyssworker/image39.png)\n\nThe function works by iterating over the devices of the driver through the `AttachedDevice` and `NextDevice` pointers, retrieving the module name of each device's associated driver, and comparing it to the target module name passed as a parameter (`”FltMgr.sys”`). If the names match, it uses the `IoDetachDevice` function to unlink the device.\n\n![Iterating and detaching all devices by module name `0xB9E`](/assets/images/abyssworker/image32.png)\n\n### Kill system threads by module name (0x222408)\n\nThis handler iterates over threads by brute-forcing their thread IDs and kills them if the thread is a system thread and its start address belongs to the targeted module.\n\n![Brute-forcing threads to find and terminate targeted module system threads `0xECE6`](/assets/images/abyssworker/image8.png)\n\nTo terminate the thread, the malware queues an APC (asynchronous procedure call) to execute code in the context of the targeted thread. Once executed, this code will, in turn, call `PsTerminateSystemThread`.\n\n![ABYSSWORKER queuing APC to terminate target thread `0x10A6`](/assets/images/abyssworker/image27.png)\n\n### Terminate process and terminate thread (0x222144, 0x222140)\n\nWith these two handlers you can terminate any process or a thread by their PID or Thread ID (TID) using `PsTerminateProcess` and `PsTerminateThread`.\n\n![Terminating process by PID `0x2081`](/assets/images/abyssworker/image37.png)\n\n![Terminating thread by TID `0x1F07`](/assets/images/abyssworker/image13.png)\n\n### Removing hooks from Ntfs and Pnp drivers' major functions (0x222444)\n\nOn top of registering notification callbacks, some EDRs like to hook major functions of the `NTFS` and `PNP` drivers. To remove those hooks, the malware can call this driver to restore the original major functions of those drivers.\n\n![Restoring hooked NTFS and PNP driver major functions `0x2D32`](/assets/images/abyssworker/image25.png)\n\nABYSSWORKER simply iterates over each registered major function, checks if the function belongs to the driver module, and if not, it means the function has been hooked, so it replaces it with the original functions.\n\n![Restoring major function if hooked `0x43AD`](/assets/images/abyssworker/image38.png)\n\n### Reboot `0x222664`\n\nTo reboot the machine, this handler uses the undocumented function `HalReturnToFirmware`.\n\n![ABYSSWORKER reboot the machine from the kernel `0x2DC0`](/assets/images/abyssworker/image19.png)\n\n# Client implementation example\n\nIn this blog post, we provide a small client implementation example. This example works with the reference sample and was used to debug it, but doesn’t implement all the IOCTRLs for the driver and is unlikely to be updated in the future. \n\nHowever, it contains all the functions to enable it and load its API, so we hope that any motivated reader, with the help of the information in this article, will be able to extend it and further experiment with this malware.\n\n![Client example output](/assets/images/abyssworker/image2.png)\n\nThe repository of the project is available [here](https://github.com/elastic/labs-releases/tree/main/tools/abyssworker/client).\n\n# Malware and MITRE ATT\u0026CK\n\nElastic uses the [MITRE ATT\u0026CK](https://attack.mitre.org/) framework to document common tactics, techniques, and procedures that threats use against enterprise networks.\n\n## Tactics\n\n- [Defense Evasion](https://attack.mitre.org/tactics/TA0005)\n\n## Techniques\n\nTechniques represent how an adversary achieves a tactical goal by performing an action.\n\n- [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222)  \n- [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)   \n- [Code Signing](https://attack.mitre.org/techniques/T1553/002) \n\n# Mitigations\n\n## YARA\n\nElastic Security has created the following YARA rules related to this post:\n\n- [https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows\\_Rootkit\\_AbyssWorker.yar](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Rootkit_AbyssWorker.yar)\n\n# Observations\n\nThe following observables were discussed in this research:\n\n| Observable | Type | Reference | Date |\n| :---- | :---- | :---- | :---- |\n| `6a2a0f9c56ee9bf7b62e1d4e1929d13046cd78a93d8c607fe4728cc5b1e8d050` | SHA256 | ABYSSWORKER reference sample | VT first seen: 2025-01-22 |\n| `b7703a59c39a0d2f7ef6422945aaeaaf061431af0533557246397551b8eed505` | SHA256 | ABYSSWORKER sample | VT first seen: 2025-01-27 |\n\n# References\n\n- Unit42, Jerome Tujague, Daniel Bunce. Crypted Hearts: Exposing the HeartCrypt Packer-as-a-Service Operation, December 13, 2024\\. [https://unit42.paloaltonetworks.com/packer-as-a-service-heartcrypt-malware/](https://unit42.paloaltonetworks.com/packer-as-a-service-heartcrypt-malware/)  \n- ConnectWise, Blake Eakin. \"Attackers Leveraging Microsoft Teams Defaults and Quick Assist for Social Engineering Attacks\", January 31 2025\\. [https://www.linkedin.com/pulse/attackers-leveraging-microsoft-teams-defaults-quick-assist-p1u5c/](https://www.linkedin.com/pulse/attackers-leveraging-microsoft-teams-defaults-quick-assist-p1u5c/)  \n- wavestone-cdt, Aug 30, 2024\\. [https://github.com/wavestone-cdt/EDRSandblast/tree/master](https://github.com/wavestone-cdt/EDRSandblast/tree/master)  \n- myzxcg, May 24, 2024\\. [https://github.com/myzxcg/RealBlindingEDR](https://github.com/myzxcg/RealBlindingEDR)\n","code":"var Component=(()=\u003e{var h=Object.create;var a=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var u=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=\u003e{for(var n in e)a(t,n,{get:e[n],enumerable:!0})},l=(t,e,n,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!f.call(t,r)\u0026\u0026r!==n\u0026\u0026a(t,r,{get:()=\u003ee[r],enumerable:!(s=g(e,r))||s.enumerable});return t};var w=(t,e,n)=\u003e(n=t!=null?h(p(t)):{},l(e||!t||!t.__esModule?a(n,\"default\",{value:t,enumerable:!0}):n,t)),y=t=\u003el(a({},\"__esModule\",{value:!0}),t);var c=u((A,d)=\u003e{d.exports=_jsx_runtime});var x={};b(x,{default:()=\u003eR,frontmatter:()=\u003ev});var i=w(c()),v={title:\"Shedding light on the ABYSSWORKER driver\",slug:\"abyssworker\",date:\"2025-03-20\",description:\"Elastic Security Labs describes ABYSSWORKER, a malicious driver used with the MEDUSA ransomware attack-chain to disable anti-malware tools.\",author:[{slug:\"cyril-francois\"}],image:\"abyssworker.jpg\",category:[{slug:\"malware-analysis\"}],tags:[\"abyssworker\",\"medusa\",\"byod\"]};function o(t){let e=Object.assign({h1:\"h1\",p:\"p\",a:\"a\",h2:\"h2\",code:\"code\",img:\"img\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",h3:\"h3\",pre:\"pre\",ul:\"ul\",li:\"li\",h4:\"h4\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:\"summary\",children:\"Summary\"}),`\n`,(0,i.jsx)(e.p,{children:\"Cybercriminals are increasingly bringing their own drivers \\u2014 either exploiting a vulnerable legitimate driver or using a custom-built driver to disable endpoint detection and response (EDR) systems and evade detection or prevention capabilities.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic Security Labs has monitored a financially motivated campaign deploying MEDUSA ransomware through the use of a \",(0,i.jsx)(e.a,{href:\"https://unit42.paloaltonetworks.com/packer-as-a-service-heartcrypt-malware/\",rel:\"nofollow\",children:\"HEARTCRYPT\"}),\"-packed loader. This loader was deployed alongside a revoked certificate-signed driver from a Chinese vendor we named ABYSSWORKER, which it installs on the victim machine and then uses to target and silence different EDR vendors. This EDR-killer driver was \",(0,i.jsx)(e.a,{href:\"https://www.linkedin.com/pulse/attackers-leveraging-microsoft-teams-defaults-quick-assist-p1u5c/\",rel:\"nofollow\",children:\"first reported\"}),\" by ConnectWise in another campaign, using a different certificate and IO control codes, at which time some of its capabilities were discussed.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"In this article, we take an in-depth look at this driver, examining its various features and techniques. We also provide relative virtual addresses (RVA) under each reversed code screenshot to link the research with the reference sample, along with a small client example that you can use to further experiment with this malware.\"}),`\n`,(0,i.jsx)(e.h1,{id:\"technical-analysis\",children:\"Technical Analysis\"}),`\n`,(0,i.jsx)(e.h2,{id:\"pe-header\",children:\"PE header\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The binary is a 64-bit Windows PE driver named \",(0,i.jsx)(e.code,{children:\"smuol.sys\"}),\", and imitates a legitimate CrowdStrike Falcon driver.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image5.png\",alt:\"ABYSSWORKER driver PE header description\",width:\"337\",height:\"195\"})}),`\n`,(0,i.jsx)(e.p,{children:\"At the time of analysis, we found a dozen samples on VirusTotal, dating from 2024-08-08 to 2025-02-24. Most were VMProtect packed, but two \\u2014 referenced in the observable tables below \\u2014 weren\\u2019t protected.\"}),`\n`,(0,i.jsx)(e.p,{children:\"All samples are signed using likely stolen, revoked certificates from Chinese companies. These certificates are widely known and shared across different malware samples and campaigns but are not specific to this driver. The certificate fingerprints are listed below:\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:\"left\",children:\"Fingerprint\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Name\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"51 68 1b 3c 9e 66 5d d0 b2 9e 25 71 46 d5 39 dc\"})}),(0,i.jsx)(e.td,{align:\"left\",children:\"Foshan Gaoming Kedeyu Insulation Materials Co., Ltd\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"7f 67 15 0f bb 0d 25 4e 47 42 84 c7 f7 81 9c 4f\"})}),(0,i.jsx)(e.td,{align:\"left\",children:\"FEI XIAO\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"72 88 1f 10 cd 24 8a 33 e6 12 43 a9 e1 50 ec 1d\"})}),(0,i.jsx)(e.td,{align:\"left\",children:\"Fuzhou Dingxin Trade Co., Ltd.\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"75 e8 e7 b9 04 3b 13 df 60 e7 64 99 66 30 21 c1\"})}),(0,i.jsx)(e.td,{align:\"left\",children:\"Changsha Hengxiang Information Technology Co., Ltd\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"03 93 47 e6 1d ec 6f 63 98 d4 d4 6b f7 32 65 6c\"})}),(0,i.jsx)(e.td,{align:\"left\",children:\"Xinjiang Yishilian Network Technology Co., Ltd\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"4e fa 7e 7b ba 65 ec 1a b7 74 f2 b3 13 57 d5 99\"})}),(0,i.jsx)(e.td,{align:\"left\",children:\"Shenzhen Yundian Technology Co., Ltd\"})]})]})]})}),`\n`,(0,i.jsx)(e.h2,{id:\"obfuscation\",children:\"Obfuscation\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"ABYSSWORKER uses functions that always return the same value, relying on a combination of opaque predicates and other derivation functions. For example, the zero-returning function below always returns a \",(0,i.jsx)(e.code,{children:\"0\"}),\" based on hardcoded derived values.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image7.png\",alt:\"Zero-Returning function 0x3238\",width:\"319\",height:\"111\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Below is one of the derivation functions:\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image26.png\",alt:\"Derivation function 0xF0B4\",width:\"844\",height:\"64\"})}),`\n`,(0,i.jsx)(e.p,{children:\"These constant-returning functions are called repeatedly throughout the binary to hinder static analysis. However, there are only three such functions, and they aren't used in any predicate but are simply called. We can easily identify them, making this an inefficient obfuscation scheme.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image20.png\",alt:\"Example of constant-returning function calls 0x10D2\",width:\"335\",height:\"99\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"initialization\",children:\"Initialization\"}),`\n`,(0,i.jsx)(e.p,{children:\"Upon initialization, the driver begins by obtaining pointers to several kernel modules and its client protection feature, which will be discussed in the following sections.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image35.png\",alt:\"Loading pointers on kernel modules 0x63E2\",width:\"745\",height:\"147\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image28.png\",alt:\"Initializing client protection feature 0x65c3\",width:\"477\",height:\"56\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Then, it creates a device with the path \",(0,i.jsx)(e.code,{children:\"\\\\\\\\device\\\\\\\\czx9umpTReqbOOKF\"}),\" and a symbolic link with the path \",(0,i.jsx)(e.code,{children:\"\\\\\\\\??\\\\\\\\fqg0Et4KlNt4s1JT\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image11.png\",alt:\"Creating device 0x2F45\",width:\"755\",height:\"93\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image17.png\",alt:\"Creating symbolic link 0x2FDA\",width:\"458\",height:\"84\"})}),`\n`,(0,i.jsx)(e.p,{children:\"It completes initialization by registering callbacks for its major functions.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image14.png\",alt:\"Registering driver major functions callbacks 0x3067\",width:\"802\",height:\"157\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"client-protection-on-device-opening\",children:\"Client protection on device opening\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"When the driver device is opened, the \",(0,i.jsx)(e.code,{children:\"IRP_MJ_CREATE\"}),\" major callback is called. This function is responsible for adding the process ID to the list of processes to protect and for stripping any pre-existing handles to the target process from the list of running processes.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The function retrieves the process ID from the current kernel thread since the kernel callback is executed in the context of the client process when the device is opened.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image33.png\",alt:\"Get client PID from current thread 0x138B\",width:\"651\",height:\"94\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Before adding the process ID to the protection list, ABYSSWORKER searches for and strips any existing handles to the client process in other running processes.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"To achieve this, the malware iterates over existing processes by brute-forcing their Process IDs (PIDs) to avoid reliance on any API. For each process, it iterates over their handles, also using brute force, and checks if the underlying object corresponds to the client process. If a match is found, it strips the access rights using the value passed as a parameter (\",(0,i.jsx)(e.code,{children:\"0x8bb\"}),\").\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image21.png\",alt:\"ABYSSWORKER stripping existing handles to the client from other processes 0x9EDB\",width:\"620\",height:\"113\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image4.png\",alt:\"ABYSSWORKER setting access rights of client handle if found in process 0xA691\",width:\"801\",height:\"425\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Finally, it adds the PID to the global list of protected processes.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image22.png\",alt:\"Client PID is added to the global protected processes list 0x9F43\",width:\"543\",height:\"55\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"As mentioned earlier, the driver sets up its protection feature during the initialization phase. This protection relies on registering two \",(0,i.jsx)(e.code,{children:\"pre-operation\"}),\" callbacks using the \",(0,i.jsx)(e.code,{children:\"ObRegisterCallback\"}),\" API: one to detect the opening of handles to its protected processes and another to detect the opening of handles to the threads of those protected processes.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The two callbacks operate in the same way: they set the desired access for the handle to zero, effectively denying the creation of the handle.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image18.png\",alt:\"Registration of callbacks to catch thread and process opening to protected client 0xA2B0\",width:\"883\",height:\"231\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image10.png\",alt:\"Denying access to protected process handle 0xA0A6\",width:\"723\",height:\"343\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"deviceiocontrol-handlers\",children:\"DeviceIoControl handlers\"}),`\n`,(0,i.jsx)(e.p,{children:\"Upon receiving a device I/O control request, ABYSSWORKER dispatches the request to handlers based on the I/O control code. These handlers cover a wide range of operations, from file manipulation to process and driver termination, providing a comprehensive toolset that can be used to terminate or permanently disable EDR systems.\"}),`\n`,(0,i.jsx)(e.p,{children:\"We detail the different IO controls in the table below:\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:\"left\",children:\"Name\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Code\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"Enable malware\"}),(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"0x222080\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"Copy file\"}),(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"0x222184\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"Remove callbacks and devices by module name\"}),(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"0x222400\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"Replace driver major functions by module name\"}),(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"0x222404\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"Kill system threads by module name\"}),(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"0x222408\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"Detach mini filter devices\"}),(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"0x222440\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"Delete file\"}),(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"0x222180\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"Disable malware\"}),(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"0x222084\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"Load api\"}),(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"0x2220c0\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"Decrease all drivers reference counter\"}),(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"0x222100\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"Decrease all devices reference counter\"}),(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"0x222104\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"Terminate process\"}),(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"0x222144\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"Terminate thread\"}),(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"0x222140\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"Removing hooks from Ntfs and Pnp drivers' major functions\"}),(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"0x222444\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"Reboot\"}),(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"0x222664\"})})]})]})]})}),`\n`,(0,i.jsx)(e.h3,{id:\"enabling-the-malware-0x222080\",children:\"Enabling the malware (0x222080)\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"As discussed in this \",(0,i.jsx)(e.a,{href:\"https://www.linkedin.com/pulse/attackers-leveraging-microsoft-teams-defaults-quick-assist-p1u5c/\",rel:\"nofollow\",children:\"blog post\"}),\", the client must enable the driver by sending a password (\",(0,i.jsx)(e.code,{children:\"7N6bCAoECbItsUR5-h4Rp2nkQxybfKb0F-wgbJGHGh20pWUuN1-ZxfXdiOYps6HTp0X\"}),\") to the driver, in our case it\\u2019s through the \",(0,i.jsx)(e.code,{children:\"0x222080\"}),\" IO control.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The handler simply compares the user input with the hardcoded password. If correct, it sets a global flag to true (1). This flag is checked in all other handlers to permit or deny execution.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image1.png\",alt:\"Hardcoded password 0x12000\",width:\"760\",height:\"69\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image3.png\",alt:\"Enabling malware if the password is correct 0x184B\",width:\"604\",height:\"307\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"loading-the-api-0x2220c0\",children:\"Loading the API (0x2220c0)\"}),`\n`,(0,i.jsx)(e.p,{children:\"Most handlers in the malware rely on kernel APIs that must be loaded using this handler. This handler loads these globals along with several structures, using the kernel module pointers previously loaded during initialization. Once the loading is complete, a global flag is set to signal the availability of these APIs.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image29.png\",alt:\"Set the global flag to 1 once the API is loaded 0x1c28\",width:\"424\",height:\"170\"})}),`\n`,(0,i.jsx)(e.p,{children:\"This handler has two modes of operation: a full mode and a partial mode. In full mode, it loads the APIs using a mapping structure of function names and RVA provided by the user as input to the IO control. In partial mode, it searches for some of the APIs on its own but does not load all the APIs that are loaded in full mode, hence the term partial mode. If the user opts for partial mode due to the inability to provide this mapping structure, some handlers will not execute. In this chapter, we only cover the full mode of operation.\"}),`\n`,(0,i.jsx)(e.p,{children:\"We detail the structures used below:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-c\",children:`#define AM_NAME_LENGTH 256\ntypedef struct _struct_435\n{\n   uint64_t rva;\n   char name[AM_NAME_LENGTH];\n} struct_435_t;\n\n#define AM_ARRAY_LENGTH 1024\ntypedef struct _struct_433\n{\n   struct_435_t array[AM_ARRAY_LENGTH];\n   uint32_t length;\n} struct_433_t;\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"We provide a short example of usage below:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-c\",children:`struct_433_t api_mapping = {\n    .length = 25,\n    .array = {\n        [0] = {.rva = 0xcec620, .name = \"PspLoadImageNotifyRoutine\"},\n        [1] = {.rva = 0xcec220, .name = \"PspCreateThreadNotifyRoutine\"},\n        [2] = {.rva = 0xcec420, .name = \"PspCreateProcessNotifyRoutine\"},\n        // (...)\n        [24] = {.rva = 0x250060, .name = \"NtfsFsdShutdown\"},\n}};\n\nuint32_t malware_load_api(HANDLE device)\n{\n    return send_ioctrl(device, IOCTRL_LOAD_API, \u0026api_mapping, sizeof(struct_433_t), NULL, 0);\n}\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"To load its API, the function starts by loading three 'callback lists' from different kernel object types. These are used by the handler that removes registered notification callbacks belonging to a specific module.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image23.png\",alt:\"ABYSSWORKER getting callback list from kernel\\u2019s _OBJECT_TYPEs 0x5502\",width:\"871\",height:\"86\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Then, it loads pointers to functions by using the provided structure, simply by searching for the function name and adding the associated RVA to the module's base address.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image9.png\",alt:\"Get function RVA from structure 0x5896\",width:\"538\",height:\"126\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image6.png\",alt:\"Search RVA associated with function name in structure 0x3540\",width:\"713\",height:\"156\"})}),`\n`,(0,i.jsx)(e.p,{children:\"This is done for the following 25 functions:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"PspLoadImageNotifyRoutine\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"PspCreateThreadNotifyRoutine\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"PspCreateProcessNotifyRoutine\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"CallbackListHead\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"PspSetCreateProcessNotifyRoutine\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"PspTerminateThreadByPointer\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"PsTerminateProcess\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"IopInvalidDeviceRequest\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"ClassGlobalDispatch\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"NtfsFsdRead\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"NtfsFsdWrite\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"NtfsFsdLockControl\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"NtfsFsdDirectoryControl\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"NtfsFsdClose\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"NtfsFsdCleanup\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"NtfsFsdCreate\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"NtfsFsdDispatchWait\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"NtfsFsdDispatchSwitch\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"NtfsFsdDispatch\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"NtfsFsdFlushBuffers\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"NtfsFsdDeviceControl\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"NtfsFsdFileSystemControl\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"NtfsFsdSetInformation\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"NtfsFsdPnp\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"NtfsFsdShutdown\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"file-copy-and-deletion-0x222184-0x222180\",children:\"File copy and deletion (0x222184, 0x222180)\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"To copy or delete files, ABYSSWORKER relies on a strategy that, although not new, remains interesting. Instead of using a common API like \",(0,i.jsx)(e.code,{children:\"NtCreateFile\"}),\", an I/O Request Packet (IRP) is created from scratch and sent directly to the corresponding drive device containing the target file.\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"creating-a-file\",children:\"Creating a file\"}),`\n`,(0,i.jsx)(e.p,{children:\"The file creation function is used to showcase how this mechanism works. The function starts by obtaining the drive device from the file path. Then, a new file object is created and linked to the target drive device, ensuring that the new object is properly linked to the drive.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image15.png\",alt:\"Building a new file object 0x7A14\",width:\"921\",height:\"215\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Then, it creates a new IRP object and sets all the necessary data to perform the file creation operation. The major function targeted by this IRP is specified in the \",(0,i.jsx)(e.code,{children:\"MajorFunction\"}),\" property, which, in this case, is set to \",(0,i.jsx)(e.code,{children:\"IRP_MJ_CREATE\"}),\", as expected for file creation.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image16.png\",alt:\"Building new IRP 0x7C68\",width:\"830\",height:\"325\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Then, the malware sends the IRP to the target drive device. While it could have used the \",(0,i.jsx)(e.code,{children:\"IoCallDriver\"}),\" API to do so, it instead sends the IRP manually by calling the corresponding device's major function.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image15.png\",alt:\"Sending IRP to device 0x9B14\",width:\"921\",height:\"215\"})}),`\n`,(0,i.jsx)(e.p,{children:\"At this point, the file object is valid for further use. The handler finishes its work by incrementing the reference counter of the file object and assigning it to its output parameter for later use.\"}),`\n`,(0,i.jsx)(e.h4,{id:\"copying-a-file\",children:\"Copying a file\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"To copy a file, ABYSSWORKER opens both the source and destination files, then reads (\",(0,i.jsx)(e.code,{children:\"IRP_MJ_READ\"}),\") from the source and writes (\",(0,i.jsx)(e.code,{children:\"IRP_MJ_WRITE\"}),\") to the destination.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image40.png\",alt:\"Copying file using IRPs 0x4BA8\",width:\"1042\",height:\"171\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image31.png\",alt:\"Reading and writing files using IRPs 0x66D9\",width:\"667\",height:\"139\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"deleting-a-file\",children:\"Deleting a file\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The deletion handler sets the file attribute to \",(0,i.jsx)(e.code,{children:\"ATTRIBUTE_NORMAL\"}),\" to unprotect any read-only file and sets the file disposition to delete (\",(0,i.jsx)(e.code,{children:\"disposition_info.DeleteFile = 1\"}),\") to remove the file using the \",(0,i.jsx)(e.code,{children:\"IRP_MJ_SET_INFORMATION\"}),\" IRP.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image30.png\",alt:\"Setting file attribute to normal and deleting it 0x4FB6\",width:\"993\",height:\"99\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image24.png\",alt:\"Building IRP_MJ_SET_INFORMATION IRP to delete file 0x67B4\",width:\"774\",height:\"215\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"notification-callbacks-removal-by-module-name-0x222400\",children:\"Notification callbacks removal by module name (0x222400)\"}),`\n`,(0,i.jsx)(e.p,{children:\"Malware clients can use this handler to blind EDR products and their visibility. It searches for and removes all registered notification callbacks. The targeted callbacks are those registered with the following APIs:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"PsSetCreateProcessNotifyRoutine\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"PsSetLoadImageNotifyRoutine\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"PsSetCreateThreadNotifyRoutine\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"ObRegisterCallbacks\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"CmRegisterCallback\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"Additionally, it removes callbacks registered through a MiniFilter driver and, optionally, removes devices belonging to a specific module.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image34.png\",alt:\"Deleting notifications callbacks and devices 0x263D\",width:\"1032\",height:\"421\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"To delete those notification callbacks, the handler locates them using various methods, such as the three global callback lists previously loaded in the loading API handler, which contain callbacks registered with \",(0,i.jsx)(e.code,{children:\"ObRegisterCallbacks\"}),\" and \",(0,i.jsx)(e.code,{children:\"CmRegisterCallback\"}),\". It then deletes them using the corresponding APIs, like \",(0,i.jsx)(e.code,{children:\"ObUnRegisterCallbacks\"}),\" and \",(0,i.jsx)(e.code,{children:\"CmUnRegisterCallbacks\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:\"Blinding EDR using these methods deserves a whole blog post of its own. To keep this post concise, we won\\u2019t provide more details here, but we invite the reader to explore these methods in two well-documented projects that implement these techniques:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/wavestone-cdt/EDRSandblast/tree/master\",rel:\"nofollow\",children:\"EDRSandblast\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/myzxcg/RealBlindingEDR\",rel:\"nofollow\",children:\"RealBlindingEDR\"})}),`\n`]}),`\n`,(0,i.jsxs)(e.h3,{id:\"replace-driver-major-functions-by-module-name-0x222404\",children:[\"Replace driver major functions by module name \",(0,i.jsx)(e.code,{children:\"0x222404\"})]}),`\n`,(0,i.jsx)(e.p,{children:\"Another way to interfere with a driver is by using this handler to replace all its major functions with a dummy function, thus disabling any interaction with the driver, given a target module name.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"To achieve this, ABYSSWORKER iterates through the driver objects in the \",(0,i.jsx)(e.code,{children:\"Driver\"}),\" and \",(0,i.jsx)(e.code,{children:\"Filesystem\"}),\" object directories. For each driver object, it compares the underlying module name to the target module, and if they match, it replaces all of its major functions with \",(0,i.jsx)(e.code,{children:\"IopInvalidDeviceRequest\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image36.png\",alt:\"Replacing targeted driver major functions with dummy functions 0x9434\",width:\"625\",height:\"424\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"detach-mini-filter-devices-0x222440\",children:\"Detach mini filter devices (0x222440)\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"This handler iterates over all driver objects found in the \",(0,i.jsx)(e.code,{children:\"Driver\"}),\" and \",(0,i.jsx)(e.code,{children:\"FileSystem\"}),\" object directories. For each driver, it explores its device tree and detaches all devices associated with the mini filter driver: \",(0,i.jsx)(e.code,{children:\"FltMgr.sys\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image39.png\",alt:\"Searching object directories for FltMgr.sys driver to delete its devices 0xE1D8\",width:\"555\",height:\"352\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The function works by iterating over the devices of the driver through the \",(0,i.jsx)(e.code,{children:\"AttachedDevice\"}),\" and \",(0,i.jsx)(e.code,{children:\"NextDevice\"}),\" pointers, retrieving the module name of each device's associated driver, and comparing it to the target module name passed as a parameter (\",(0,i.jsx)(e.code,{children:\"\\u201DFltMgr.sys\\u201D\"}),\"). If the names match, it uses the \",(0,i.jsx)(e.code,{children:\"IoDetachDevice\"}),\" function to unlink the device.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image32.png\",alt:\"Iterating and detaching all devices by module name 0xB9E\",width:\"1097\",height:\"463\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"kill-system-threads-by-module-name-0x222408\",children:\"Kill system threads by module name (0x222408)\"}),`\n`,(0,i.jsx)(e.p,{children:\"This handler iterates over threads by brute-forcing their thread IDs and kills them if the thread is a system thread and its start address belongs to the targeted module.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image8.png\",alt:\"Brute-forcing threads to find and terminate targeted module system threads 0xECE6\",width:\"988\",height:\"292\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"To terminate the thread, the malware queues an APC (asynchronous procedure call) to execute code in the context of the targeted thread. Once executed, this code will, in turn, call \",(0,i.jsx)(e.code,{children:\"PsTerminateSystemThread\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image27.png\",alt:\"ABYSSWORKER queuing APC to terminate target thread 0x10A6\",width:\"844\",height:\"388\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"terminate-process-and-terminate-thread-0x222144-0x222140\",children:\"Terminate process and terminate thread (0x222144, 0x222140)\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"With these two handlers you can terminate any process or a thread by their PID or Thread ID (TID) using \",(0,i.jsx)(e.code,{children:\"PsTerminateProcess\"}),\" and \",(0,i.jsx)(e.code,{children:\"PsTerminateThread\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image37.png\",alt:\"Terminating process by PID 0x2081\",width:\"444\",height:\"130\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image13.png\",alt:\"Terminating thread by TID 0x1F07\",width:\"531\",height:\"292\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"removing-hooks-from-ntfs-and-pnp-drivers-major-functions-0x222444\",children:\"Removing hooks from Ntfs and Pnp drivers' major functions (0x222444)\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"On top of registering notification callbacks, some EDRs like to hook major functions of the \",(0,i.jsx)(e.code,{children:\"NTFS\"}),\" and \",(0,i.jsx)(e.code,{children:\"PNP\"}),\" drivers. To remove those hooks, the malware can call this driver to restore the original major functions of those drivers.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image25.png\",alt:\"Restoring hooked NTFS and PNP driver major functions 0x2D32\",width:\"471\",height:\"120\"})}),`\n`,(0,i.jsx)(e.p,{children:\"ABYSSWORKER simply iterates over each registered major function, checks if the function belongs to the driver module, and if not, it means the function has been hooked, so it replaces it with the original functions.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image38.png\",alt:\"Restoring major function if hooked 0x43AD\",width:\"873\",height:\"68\"})}),`\n`,(0,i.jsxs)(e.h3,{id:\"reboot-0x222664\",children:[\"Reboot \",(0,i.jsx)(e.code,{children:\"0x222664\"})]}),`\n`,(0,i.jsxs)(e.p,{children:[\"To reboot the machine, this handler uses the undocumented function \",(0,i.jsx)(e.code,{children:\"HalReturnToFirmware\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image19.png\",alt:\"ABYSSWORKER reboot the machine from the kernel 0x2DC0\",width:\"302\",height:\"132\"})}),`\n`,(0,i.jsx)(e.h1,{id:\"client-implementation-example\",children:\"Client implementation example\"}),`\n`,(0,i.jsx)(e.p,{children:\"In this blog post, we provide a small client implementation example. This example works with the reference sample and was used to debug it, but doesn\\u2019t implement all the IOCTRLs for the driver and is unlikely to be updated in the future.\"}),`\n`,(0,i.jsx)(e.p,{children:\"However, it contains all the functions to enable it and load its API, so we hope that any motivated reader, with the help of the information in this article, will be able to extend it and further experiment with this malware.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/abyssworker/image2.png\",alt:\"Client example output\",width:\"491\",height:\"91\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The repository of the project is available \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/tools/abyssworker/client\",rel:\"nofollow\",children:\"here\"}),\".\"]}),`\n`,(0,i.jsx)(e.h1,{id:\"malware-and-mitre-attck\",children:\"Malware and MITRE ATT\u0026CK\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic uses the \",(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/\",rel:\"nofollow\",children:\"MITRE ATT\u0026CK\"}),\" framework to document common tactics, techniques, and procedures that threats use against enterprise networks.\"]}),`\n`,(0,i.jsx)(e.h2,{id:\"tactics\",children:\"Tactics\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0005\",rel:\"nofollow\",children:\"Defense Evasion\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"techniques\",children:\"Techniques\"}),`\n`,(0,i.jsx)(e.p,{children:\"Techniques represent how an adversary achieves a tactical goal by performing an action.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1222\",rel:\"nofollow\",children:\"File and Directory Permissions Modification\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1562/001\",rel:\"nofollow\",children:\"Disable or Modify Tools\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1553/002\",rel:\"nofollow\",children:\"Code Signing\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h1,{id:\"mitigations\",children:\"Mitigations\"}),`\n`,(0,i.jsx)(e.h2,{id:\"yara\",children:\"YARA\"}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic Security has created the following YARA rules related to this post:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Rootkit_AbyssWorker.yar\",rel:\"nofollow\",children:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Rootkit_AbyssWorker.yar\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h1,{id:\"observations\",children:\"Observations\"}),`\n`,(0,i.jsx)(e.p,{children:\"The following observables were discussed in this research:\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:\"left\",children:\"Observable\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Type\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Reference\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Date\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"6a2a0f9c56ee9bf7b62e1d4e1929d13046cd78a93d8c607fe4728cc5b1e8d050\"})}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHA256\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"ABYSSWORKER reference sample\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"VT first seen: 2025-01-22\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"b7703a59c39a0d2f7ef6422945aaeaaf061431af0533557246397551b8eed505\"})}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHA256\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"ABYSSWORKER sample\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"VT first seen: 2025-01-27\"})]})]})]})}),`\n`,(0,i.jsx)(e.h1,{id:\"references\",children:\"References\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Unit42, Jerome Tujague, Daniel Bunce. Crypted Hearts: Exposing the HeartCrypt Packer-as-a-Service Operation, December 13, 2024. \",(0,i.jsx)(e.a,{href:\"https://unit42.paloaltonetworks.com/packer-as-a-service-heartcrypt-malware/\",rel:\"nofollow\",children:\"https://unit42.paloaltonetworks.com/packer-as-a-service-heartcrypt-malware/\"})]}),`\n`,(0,i.jsxs)(e.li,{children:['ConnectWise, Blake Eakin. \"Attackers Leveraging Microsoft Teams Defaults and Quick Assist for Social Engineering Attacks\", January 31 2025. ',(0,i.jsx)(e.a,{href:\"https://www.linkedin.com/pulse/attackers-leveraging-microsoft-teams-defaults-quick-assist-p1u5c/\",rel:\"nofollow\",children:\"https://www.linkedin.com/pulse/attackers-leveraging-microsoft-teams-defaults-quick-assist-p1u5c/\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[\"wavestone-cdt, Aug 30, 2024. \",(0,i.jsx)(e.a,{href:\"https://github.com/wavestone-cdt/EDRSandblast/tree/master\",rel:\"nofollow\",children:\"https://github.com/wavestone-cdt/EDRSandblast/tree/master\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[\"myzxcg, May 24, 2024. \",(0,i.jsx)(e.a,{href:\"https://github.com/myzxcg/RealBlindingEDR\",rel:\"nofollow\",children:\"https://github.com/myzxcg/RealBlindingEDR\"})]}),`\n`]})]})}function k(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(o,t)})):o(t)}var R=k;return y(x);})();\n;return Component;"},"_id":"articles/abyssworker.mdx","_raw":{"sourceFilePath":"articles/abyssworker.mdx","sourceFileName":"abyssworker.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/abyssworker"},"type":"Article","imageUrl":"/assets/images/abyssworker/abyssworker.jpg","readingTime":"16 min read","series":"","url":"/abyssworker","headings":[{"level":2,"title":"PE header","href":"#pe-header"},{"level":2,"title":"Obfuscation","href":"#obfuscation"},{"level":2,"title":"Initialization","href":"#initialization"},{"level":2,"title":"Client protection on device opening","href":"#client-protection-on-device-opening"},{"level":2,"title":"DeviceIoControl handlers","href":"#deviceiocontrol-handlers"},{"level":3,"title":"Enabling the malware (0x222080)","href":"#enabling-the-malware-0x222080"},{"level":3,"title":"Loading the API (0x2220c0)","href":"#loading-the-api-0x2220c0"},{"level":3,"title":"File copy and deletion (0x222184, 0x222180)","href":"#file-copy-and-deletion-0x222184-0x222180"},{"level":4,"title":"Creating a file","href":"#creating-a-file"},{"level":4,"title":"Copying a file","href":"#copying-a-file"},{"level":4,"title":"Deleting a file","href":"#deleting-a-file"},{"level":3,"title":"Notification callbacks removal by module name (0x222400)","href":"#notification-callbacks-removal-by-module-name-0x222400"},{"level":3,"title":"Replace driver major functions by module name `0x222404`","href":"#replace-driver-major-functions-by-module-name-0x222404"},{"level":3,"title":"Detach mini filter devices (0x222440)","href":"#detach-mini-filter-devices-0x222440"},{"level":3,"title":"Kill system threads by module name (0x222408)","href":"#kill-system-threads-by-module-name-0x222408"},{"level":3,"title":"Terminate process and terminate thread (0x222144, 0x222140)","href":"#terminate-process-and-terminate-thread-0x222144-0x222140"},{"level":3,"title":"Removing hooks from Ntfs and Pnp drivers' major functions (0x222444)","href":"#removing-hooks-from-ntfs-and-pnp-drivers-major-functions-0x222444"},{"level":3,"title":"Reboot `0x222664`","href":"#reboot-0x222664"},{"level":2,"title":"Tactics","href":"#tactics"},{"level":2,"title":"Techniques","href":"#techniques"},{"level":2,"title":"YARA","href":"#yara"}],"author":[{"title":"Cyril François","slug":"cyril-francois","description":"Elastic Security Labs Team Senior Research Engineer, Malware","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var d=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,o)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of f(e))!_.call(t,a)\u0026\u0026a!==n\u0026\u0026i(t,a,{get:()=\u003ee[a],enumerable:!(o=x(e,a))||o.enumerable});return t};var p=(t,e,n)=\u003e(n=t!=null?m(g(t)):{},s(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),y=t=\u003es(i({},\"__esModule\",{value:!0}),t);var u=d((w,c)=\u003e{c.exports=_jsx_runtime});var b={};j(b,{default:()=\u003eF,frontmatter:()=\u003eM});var r=p(u()),M={title:\"Cyril Fran\\xE7ois\",description:\"Elastic Security Labs Team Senior Research Engineer, Malware\",slug:\"cyril-francois\"};function l(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(l,t)})):l(t)}var F=C;return y(b);})();\n;return Component;"},"_id":"authors/cyril-francois.mdx","_raw":{"sourceFilePath":"authors/cyril-francois.mdx","sourceFileName":"cyril-francois.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/cyril-francois"},"type":"Author","imageUrl":"","url":"/authors/cyril-francois"}],"category":[{"title":"Malware analysis","slug":"malware-analysis","body":{"raw":"","code":"var Component=(()=\u003e{var u=Object.create;var s=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),M=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},i=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!g.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(o=x(n,r))||o.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?u(_(t)):{},i(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),p=t=\u003ei(s({},\"__esModule\",{value:!0}),t);var l=j((X,c)=\u003e{c.exports=_jsx_runtime});var D={};M(D,{default:()=\u003eC,frontmatter:()=\u003ew});var a=d(l()),w={title:\"Malware analysis\",slug:\"malware-analysis\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function y(t={}){let{wrapper:n}=t.components||{};return n?(0,a.jsx)(n,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=y;return p(D);})();\n;return Component;"},"_id":"categories/malware-analysis.mdx","_raw":{"sourceFilePath":"categories/malware-analysis.mdx","sourceFileName":"malware-analysis.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/malware-analysis"},"type":"Category","url":"/categories/malware-analysis"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"abyssworker"},"buildId":"zgtdq_G6IdLL0e41oqL5l","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>