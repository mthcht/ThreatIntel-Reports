<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>De-obfuscating ALCATRAZ — Elastic Security Labs</title><meta name="description" content="An exploration of techniques used by the obfuscator ALCATRAZ."/><meta property="og:title" content="De-obfuscating ALCATRAZ — Elastic Security Labs"/><meta property="og:description" content="An exploration of techniques used by the obfuscator ALCATRAZ."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/deobfuscating-alcatraz/alcatraz.png?c52a2be306189d6cfac1581f4b749206"/><meta property="og:image:alt" content="An exploration of techniques used by the obfuscator ALCATRAZ."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/deobfuscating-alcatraz"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="De-obfuscating ALCATRAZ — Elastic Security Labs"/><meta name="twitter:description" content="An exploration of techniques used by the obfuscator ALCATRAZ."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/deobfuscating-alcatraz/alcatraz.png?c52a2be306189d6cfac1581f4b749206"/><meta name="twitter:image:alt" content="An exploration of techniques used by the obfuscator ALCATRAZ."/><link rel="canonical" href="https://www.elastic.co/security-labs/deobfuscating-alcatraz"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeobfuscating-alcatraz%2Falcatraz.png&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeobfuscating-alcatraz%2Falcatraz.png&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeobfuscating-alcatraz%2Falcatraz.png&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeobfuscating-alcatraz%2Falcatraz.png&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeobfuscating-alcatraz%2Falcatraz.png&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeobfuscating-alcatraz%2Falcatraz.png&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeobfuscating-alcatraz%2Falcatraz.png&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeobfuscating-alcatraz%2Falcatraz.png&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/0ea4f4df910e6120-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/739c2d8941231bb4-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/4537cf419cc8d2a9.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/4537cf419cc8d2a9.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-fd33164cf89540f1.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-867613e90a20575d.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-b0c191de1a3710e4.js" defer=""></script><script src="/security-labs/_next/static/DWBt_Xau_SoqlVElVspNn/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/DWBt_Xau_SoqlVElVspNn/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_ead7f7 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/deobfuscating-alcatraz"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/deobfuscating-alcatraz"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2025-05-23T00:00:00.000Z">23 May 2025</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/daniel-stepanic">Daniel Stepanic</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>De-&nbsp;obfuscating&nbsp;ALCATRAZ</span></h1><p class="text-zinc-200 text-base md:text-xl">An exploration of techniques used by the obfuscator ALCATRAZ.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>15 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/malware-analysis">Malware analysis</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="De-obfuscating ALCATRAZ" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeobfuscating-alcatraz%2Falcatraz.png&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeobfuscating-alcatraz%2Falcatraz.png&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeobfuscating-alcatraz%2Falcatraz.png&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeobfuscating-alcatraz%2Falcatraz.png&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeobfuscating-alcatraz%2Falcatraz.png&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeobfuscating-alcatraz%2Falcatraz.png&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeobfuscating-alcatraz%2Falcatraz.png&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeobfuscating-alcatraz%2Falcatraz.png&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdeobfuscating-alcatraz%2Falcatraz.png&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="introduction" class="absolute -top-32"></span>Introduction</h2>
<p>Elastic Security Labs analyzes diverse malware that comes through our threat hunting pipelines and telemetry queues. We recently ran into a new malware family called DOUBLELOADER, seen alongside the RHADAMANTHYS infostealer.  One interesting attribute of DOUBLELOADER is that it is protected with an open-source obfuscator, <a href="https://github.com/weak1337/Alcatraz">ALCATRAZ</a> first released in 2023. While this project had its roots in the game hacking community, it’s also been observed in the e-crime space, and has been used in targeted <a href="https://news.sophos.com/en-us/2024/09/10/crimson-palace-new-tools-tactics-targets/">intrusions</a>.</p>
<p>The objective of this post is to walk through various obfuscation techniques employed by ALCATRAZ, while highlighting methods to combat these techniques as malware analysts. These techniques include <a href="https://tigress.wtf/flatten.html">control flow flattening</a>, <a href="https://github.com/mike1k/perses?tab=readme-ov-file#introduction">instruction mutation</a>, constant unfolding, LEA constant hiding, anti-disassembly <a href="https://1malware1.medium.com/anti-disassembly-techniques-e012338f2ae0">tricks</a> and entrypoint obfuscation.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="key-takeaways" class="absolute -top-32"></span>Key takeaways</h3>
<ul>
<li>The open-source obfuscator ALCATRAZ has been seen within new malware deployed alongside RHADAMANTHYS infections</li>
<li>Obfuscation techniques such as control flow flattening continue to serve as road blocks for analysts</li>
<li>By understanding obfuscation techniques and how to counter them, organizations can improve their ability to effectively triage and analyze protected binaries.</li>
<li>Elastic Security Labs releases tooling to deobfuscate ALCATRAZ protected binaries are released with this post</li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="doubleloader" class="absolute -top-32"></span>DOUBLELOADER</h2>
<p>Starting last December, our team observed a generic backdoor malware coupled with <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.rhadamanthys">RHADAMANTHYS</a> stealer infections. Based on the PDB path, this malware is self-described as DOUBLELOADER.</p>
<p></p>
<p>This malware leverages syscalls such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtOpenProcess</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtWriteVirtualMemory</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtCreateThreadEx</code> launching unbacked code within the Windows desktop/file manager (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">explorer.exe</code>). The malware collects host information, requests an updated version of itself and starts beaconing to a hardcoded IP (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">185.147.125.81</code>) stored within the binary.</p>
<p></p>
<p>DOUBLELOADER samples include a non-standard section (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.0Dev</code>) with executable permissions, this is a toolmark left based on the author&#x27;s handle for the binary obfuscation tool, <a href="https://github.com/weak1337/Alcatraz"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ALCATRAZ</code></a>.</p>
<p></p>
<p>Obfuscators such as ALCATRAZ end up increasing the complexity when triaging malware. Its main goal is to hinder binary analysis tools and increase the time of the reverse engineering process through different techniques; such as hiding the control flow or making decompilation hard to follow. Below is an example of obfuscated control flow of one function inside DOUBLELOADER.</p>
<p></p>
<p>The remainder of the post will focus on the various obfuscation techniques used by ALCATRAZ. We will use the first-stage of DOUBLELOADER along with basic code examples to highlight ALCATRAZ&#x27;s features.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="alcatraz" class="absolute -top-32"></span>ALCATRAZ</h2>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="alcatraz-overview" class="absolute -top-32"></span>ALCATRAZ Overview</h3>
<p>Alcatraz is an open-source obfuscator initially released in January 2023. While the project is recognized within the game hacking community as a foundational tool for learning obfuscation techniques, it’s also been observed being abused by e-crime and <a href="https://news.sophos.com/en-us/2024/09/10/crimson-palace-new-tools-tactics-targets/">APT groups</a>.</p>
<p>Alcatraz’s code base contains 5 main features centered around standard code obfuscation techniques along with enhancement to obfuscate the entrypoint. Its workflow follows a standard <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bin2bin</code> format, this means the user provides a compiled binary then after the transformations, they will receive a new compiled binary. This approach is particularly appealing to game hackers/malware developers due to its ease of use, requiring minimal effort and no modifications at the source code level.</p>
<p></p>
<p>The developer can choose to obfuscate all or specific functions as well as choose which obfuscation techniques to apply to each function. After compilation, the file is generated with the string (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">obf</code>) appended to the end of the filename.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="obfuscation-techniques-in-alcatraz" class="absolute -top-32"></span>Obfuscation techniques in ALCATRAZ</h2>
<p>The following sections will go through the various obfuscation techniques implemented by ALCATRAZ.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="entrypoint-obfuscation" class="absolute -top-32"></span>Entrypoint obfuscation</h3>
<p>Dealing with an obfuscated entrypoint is like getting a flat tire at the start of a family roadtrip. The idea is centered on confusing analysts and binary tooling where it’s not directly clear where the program starts, causing confusion at the very beginning of the analysis process.</p>
<p>The following is the view of a clean entrypoint (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x140001368</code>) from a non-obfuscated program within IDA Pro.</p>
<p></p>
<p>By enabling entrypoint obfuscation, ALCATRAZ moves the entrypoint then includes additional code with an algorithm to calculate the new entrypoint of the program. Below is a snippet of the decompiled view of the obfuscated entry-point.</p>
<p></p>
<p>As ALCATRAZ is an open-source obfuscator, we can find the custom entrypoint <a href="https://github.com/weak1337/Alcatraz/blob/739e65ebadaeb3f8206fb2199700725331465abb/Alcatraz/obfuscator/misc/custom_entry.cpp#L20">code</a> to see how the calculation is performed or reverse our own obfuscated example. In our decompilation, we can see the algorithm uses a few fields from the PE header such as the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Size of the Stack Commit</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Time Date Stamp</code> along with the first four bytes from the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.0dev</code> section. These fields are parsed then used with bitwise operations such as rotate right (ROR) and exclusive-or (XOR) to calculate the entrypoint.</p>
<p>Below is an example output of IDA Python script (Appendix A) that parses the PE and finds the true entrypoint, confirming the original starting point (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x140001368</code>) with the non-obfuscated sample.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="anti-disassembly" class="absolute -top-32"></span>Anti-disassembly</h3>
<p>Malware developers and obfuscators use anti-disassembly tricks to confuse or break disassemblers in order to make static analysis harder. These techniques abuse weaknesses during linear sweeps and recursive disassembly, preventing clean code reconstruction where the analyst is then forced to manually or automatically fix the underlying instructions.</p>
<p>ALCATRAZ implements one form of this technique by modifying any instructions starting with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0xFF</code> byte by adding a short jump instruction ( <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0xEB</code>) in front. The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0xFF</code> byte can represent the start of multiple valid instructions dealing with calls, indirect jumps, pushes on the stack. By adding the short jump  <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0xEB</code> in front, this effectively jumps to the next byte <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0xFF</code>. While it’s not complex, the damage is done breaking disassembly and requiring some kind of intervention.</p>
<p></p>
<p>In order to fix this specific technique, the file can be patched by replacing each occurrence of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0xEB</code> byte with NOPs. After patching, the code is restored to a cleaner state, allowing the following <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">call</code> instruction to be correctly disassembled.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="instruction-mutation" class="absolute -top-32"></span>Instruction Mutation</h3>
<p>One common technique used by obfuscators is instruction mutation, where instructions are transformed in a way that preserves their original behavior, but makes the code harder to understand. Frameworks such as <a href="https://tigress.wtf/index.html">Tigress</a> or <a href="https://github.com/mike1k/perses">Perses</a> are great examples of obfuscation research around instruction mutation.</p>
<p>Below is an example of this technique implemented by ALCATRAZ, where any addition between two registers is altered, but its semantic equivalence is kept intact. The simple <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">add</code> instruction gets transformed to 5 different instructions (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">push</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">not</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sub</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">pop</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sub</code>).</p>
<p></p>
<p>In order to correct this, we can use pattern matching to find these 5 instructions together, disassemble the bytes to find which registers are involved, then use an assembler such as Keystone to generate the correct corresponding bytes.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="constant-unfolding" class="absolute -top-32"></span>Constant Unfolding</h3>
<p>This obfuscation technique is prevalent throughout the DOUBLELOADER sample and is a widely used method in various forms of malware. The concept here is focused on inversing the compilation process; where instead of optimizing calculations that are known at compile time, the obfuscator “unfolds” these constants making the disassembly and decompilation complex and confusing. Below is a simple example of this technique where the known constant (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">46</code>) is broken up into two mathematical operations.</p>
<p></p>
<p>In DOUBLELOADER, we run into this technique being used anytime when immediate values are moved into a register. These immediate values are replaced with multiple bitwise operations masking these constant values, thus disrupting any context and the analyst’s flow. For example, in the disassembly below on the left-hand side, there is a comparison instruction of EAX value at address (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x18016CD93</code>). By reviewing the previous instructions, it’s not obvious or clear what the EAX value should be due to multiple obscure bitwise calculations. If we debug the program, we can see the EAX value is set to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0</code>.</p>
<p></p>
<p>In order to clean this obfuscation technique, we can confirm its behavior with our own example where we can use the following source code and see how the transformation is applied.</p>
<pre><code>#include &lt;iostream&gt;

int add(int a, int b)
{
	return a + b;
}

int main()
{
	int c;
	c = add(1, 2);
	printf(&quot;Meow %d&quot;,c);
	return 0;
}</code></pre>
<p>After compiling, we can view the disassembly of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">main</code> function in the clean version on the left and see these two constants (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">2,1</code>) moved into the EDX and ECX register. On the right side, is the transformed version, the two constants are hidden among the newly added instructions.</p>
<p></p>
<p>By using pattern matching techniques, we can look for these sequences of instructions, emulate the instructions to perform the various calculations to get the original values back, and then patch the remaining bytes with NOP’s to make sure the program will still run.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="lea-obfuscation" class="absolute -top-32"></span>LEA Obfuscation</h3>
<p>Similar to the previously discussed technique, LEA (Load Effective Address) obfuscation is focused on obscuring the immediate values associated with LEA instructions. An arithmetic calculation with subtraction will follow directly behind the LEA instruction to compute the original intended value. While this may seem like a minor change, it can have a significant impact breaking cross-references to strings and data — which are essential for effective binary analysis.</p>
<p>Below is an example of this technique within DOUBLELOADER where the RAX register value is disguised through a pattern of loading an initial value (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x1F4DFCF4F</code>), then subtracting (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x74D983C7</code>) to give us a new computed value (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x180064B88</code>).</p>
<p></p>
<p>If we go to that address inside our sample, we are taken to the read-only data section, where we can find the referenced string <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bad array new length</code>.</p>
<p></p>
<p>In order to correct this technique, we can use pattern matching to find these specific instructions, perform the calculation, then re-construct a new LEA instruction. Within 64-bit mode, LEA uses RIP-relative addressing so the address is calculated based on the current instruction pointer (RIP). Ultimately, we end up with a new instruction that looks like this: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">lea rax, [rip - 0xFF827]</code>.</p>
<p>Below are the steps to produce this final instruction:</p>
<p></p>
<p>With this information, we can use IDA Python to patch all these patterns out, below is an example of a fixed LEA instruction.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="control-flow-obfuscation" class="absolute -top-32"></span>Control Flow Obfuscation</h3>
<p><strong>Control flow flattening</strong> is a powerful obfuscation technique that disrupts the traditional structure of a program’s control flow by eliminating conventional constructs like conditional branches and loops. Instead, it restructures execution using a centralized dispatcher, which determines the next basic block to execute based on a state variable, making analysis and decompilation significantly more difficult. Below is a simple diagram that represents the differences between an unflattened and flattened control flow.</p>
<p></p>
<p>Our team has observed this technique in various malware such as <a href="https://www.elastic.co/security-labs/update-to-the-REF2924-intrusion-set-and-related-campaigns">DOORME</a> and it should come as no surprise in this case, that flattened control flow is one of the main <a href="https://github.com/weak1337/Alcatraz/tree/master?tab=readme-ov-file#control-flow-flattening">features</a> within the ALCATRAZ obfuscator. In order to approach un-flattening, we focused on established tooling by using IDA plugin <a href="https://eshard.com/posts/d810-deobfuscation-ida-pro">D810</a> written by security researcher Boris Batteux.</p>
<p>We will start with our previous example program using the common <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">_security_init_cookie</code> function used to detect buffer overflows. Below is the control flow diagram of the cookie initialization function in non-obfuscated form. Based on the graph, we can see there are six basic blocks, two conditional branches, and we can easily follow the execution flow.</p>
<p></p>
<p>If we take the same function and apply ALCATRAZ&#x27;s control flow flattening feature, the program’s control flow looks vastly different with 22 basic blocks, 8 conditional branches, and a new dispatcher. In the figure below, the color-filled blocks represent the previous basic blocks from the non-obfuscated version, the remaining blocks in white represent added obfuscator code used for dispatching and controlling the execution.</p>
<p></p>
<p>If we take a look at the decompilation, we can see the function is now broken into different parts within a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">while</code> loop where a new <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">state</code> variable is used to guide the program along with remnants from the obfuscation including <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">popf/pushf</code> instructions.</p>
<p></p>
<p>For cleaning this function, D810 applies two different rules (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">UnflattenerFakeJump</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">FixPredecessorOfConditionalJumpBlock</code>) that apply microcode transformations to improve decompilation.</p>
<pre><code>2025-04-03 15:44:50,182 - D810 - INFO - Starting decompilation of function at 0x140025098
2025-04-03 15:44:50,334 - D810 - INFO - glbopt finished for function at 0x140025098
2025-04-03 15:44:50,334 - D810 - INFO - BlkRule &#x27;UnflattenerFakeJump&#x27; has been used 1 times for a total of 3 patches
2025-04-03 15:44:50,334 - D810 - INFO - BlkRule &#x27;FixPredecessorOfConditionalJumpBlock&#x27; has been used 1 times for a total of 2 patches</code></pre>
<p>When we refresh the decompiler, the control-flow flattening is removed, and the pseudocode is cleaned up.</p>
<p></p>
<p>While this is a good example, fixing control-flow obfuscation can often be a manual and timely process that is function-dependent. In the next section, we will gather up some of the techniques we learned and apply it to DOUBLELOADER.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="cleaning-a-doubleloader-function" class="absolute -top-32"></span>Cleaning a DOUBLELOADER function</h2>
<p>One of the challenges when dealing with obfuscation in malware is not so much the individual obfuscation techniques, but when the techniques are layered. Additionally, in the case of DOUBLELOADER, large portions of code are placed in function chunks with ambiguous boundaries, making it challenging to analyze. In this section, we will go through a practical example showing the cleaning process for a DOUBLELOADER function protected by ALCATRAZ.</p>
<p>Upon launch at the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Start</code> export, one of the first calls goes to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">loc_18016C6D9</code>. This appears to be an entry to a larger function, however IDA is not properly able to create a function due to undefined instructions at <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x18016C8C1</code>.</p>
<p></p>
<p>If we scroll to this address, we can see the first disruption is due to the short jump anti-disassembly technique which we saw earlier in the blog post (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EB FF</code>).</p>
<p></p>
<p>After fixing 6 nearby occurrences of this same technique, we can go back to the start address (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x18016C6D9</code>) and use the MakeFunction feature. While the function will decompile, it is still heavily obfuscated which is not ideal for any analysis.</p>
<p></p>
<p>Going back to the disassembly, we can see the LEA obfuscation technique used in this function below where the string constant <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">”Error”</code> is now recovered using the earlier solution.</p>
<p></p>
<p>Another example below shows the transformation of an obfuscated parameter for a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">LoadIcon</code> call where the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">lpIconName</code> parameter gets cleaned to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x7f00</code> (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IDI_APPLICATION</code>).</p>
<p></p>
<p>Now that the decompilation has improved, we can finalize the cleanup by removing control flow obfuscation with the D810 plugin. Below is a demonstration showing the before and after effects.</p>
<p></p>
<p>This section has covered a real-world scenario of working towards cleaning a malicious obfuscated function protected by ALCATRAZ. While malware analysis reports often show the final outcomes, a good portion of time is often spent up-front working towards removing obfuscation and fixing up the binary so it can then be properly analyzed.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="ida-python-scripts" class="absolute -top-32"></span>IDA Python Scripts</h2>
<p>Our team is releasing a series of proof-of-concept <a href="https://github.com/elastic/labs-releases/tree/main/tools/alcatraz">IDA Python scripts</a> used to handle the default obfuscation techniques imposed by the ALCATRAZ obfuscator. These are meant to serve as basic examples when dealing with these techniques, and should be used for research purposes. Unfortunately, there is no silver bullet when dealing with obfuscation, but having some examples and general strategies can be valuable for tackling similar challenges in the future.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="yara" class="absolute -top-32"></span>YARA</h2>
<p>Elastic Security has created YARA rules to identify this activity.</p>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_DoubleLoader.yar">Windows.Trojan.DoubleLoader</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="observations" class="absolute -top-32"></span>Observations</h2>
<p>The following observables were discussed in this research.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left">Observable</th><th align="left">Type</th><th align="left">Name</th><th align="left">Reference</th></tr></thead><tbody><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">3050c464360ba7004d60f3ea7ebdf85d9a778d931fbf1041fa5867b930e1f7fd</code></td><td align="left">SHA256</td><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DoubleLo.dll</code></td><td align="left">DOUBLELOADER</td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="references" class="absolute -top-32"></span>References</h2>
<p>The following were referenced throughout the above research:</p>
<ul>
<li><a href="https://github.com/weak1337/Alcatraz">https://github.com/weak1337/Alcatraz</a></li>
<li><a href="https://gitlab.com/eshard/d810">https://gitlab.com/eshard/d810</a></li>
<li><a href="https://eshard.com/posts/d810-deobfuscation-ida-pro">https://eshard.com/posts/d810-deobfuscation-ida-pro</a></li>
<li><a href="http://keowu.re/posts/Analyzing-Mutation-Coded-VM-Protect-and-Alcatraz-English/">http://keowu.re/posts/Analyzing-Mutation-Coded-VM-Protect-and-Alcatraz-English/</a></li>
</ul></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/deobfuscating-alcatraz#introduction"><span>Introduction</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/deobfuscating-alcatraz#key-takeaways"><span>Key&nbsp;takeaways</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/deobfuscating-alcatraz#doubleloader"><span>DOUBLELOADER</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/deobfuscating-alcatraz#alcatraz"><span>ALCATRAZ</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/deobfuscating-alcatraz#alcatraz-overview"><span>ALCATRAZ&nbsp;Overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/deobfuscating-alcatraz#obfuscation-techniques-in-alcatraz"><span>Obfuscation techniques in&nbsp;ALCATRAZ</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/deobfuscating-alcatraz#entrypoint-obfuscation"><span>Entrypoint&nbsp;obfuscation</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/deobfuscating-alcatraz#anti-disassembly"><span>Anti-&nbsp;disassembly</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/deobfuscating-alcatraz#instruction-mutation"><span>Instruction&nbsp;Mutation</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/deobfuscating-alcatraz#constant-unfolding"><span>Constant&nbsp;Unfolding</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/elastic-security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=De-obfuscating ALCATRAZ&amp;url=https://www.elastic.co/security-labs/deobfuscating-alcatraz" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/deobfuscating-alcatraz" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/deobfuscating-alcatraz&amp;title=De-obfuscating ALCATRAZ" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/deobfuscating-alcatraz&amp;title=De-obfuscating ALCATRAZ" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2025<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"De-obfuscating ALCATRAZ","slug":"deobfuscating-alcatraz","date":"2025-05-23","description":"An exploration of techniques used by the obfuscator ALCATRAZ.","image":"alcatraz.png","tags":["ALCATRAZ","DOUBLELOADER","deobfuscation"],"body":{"raw":"\n## Introduction\n\nElastic Security Labs analyzes diverse malware that comes through our threat hunting pipelines and telemetry queues. We recently ran into a new malware family called DOUBLELOADER, seen alongside the RHADAMANTHYS infostealer.  One interesting attribute of DOUBLELOADER is that it is protected with an open-source obfuscator, [ALCATRAZ](https://github.com/weak1337/Alcatraz) first released in 2023. While this project had its roots in the game hacking community, it’s also been observed in the e-crime space, and has been used in targeted [intrusions](https://news.sophos.com/en-us/2024/09/10/crimson-palace-new-tools-tactics-targets/). \n\nThe objective of this post is to walk through various obfuscation techniques employed by ALCATRAZ, while highlighting methods to combat these techniques as malware analysts. These techniques include [control flow flattening](https://tigress.wtf/flatten.html), [instruction mutation](https://github.com/mike1k/perses?tab=readme-ov-file#introduction), constant unfolding, LEA constant hiding, anti-disassembly [tricks](https://1malware1.medium.com/anti-disassembly-techniques-e012338f2ae0) and entrypoint obfuscation. \n\n### Key takeaways\n\n- The open-source obfuscator ALCATRAZ has been seen within new malware deployed alongside RHADAMANTHYS infections  \n- Obfuscation techniques such as control flow flattening continue to serve as road blocks for analysts  \n- By understanding obfuscation techniques and how to counter them, organizations can improve their ability to effectively triage and analyze protected binaries.  \n- Elastic Security Labs releases tooling to deobfuscate ALCATRAZ protected binaries are released with this post \n\n## DOUBLELOADER\n\nStarting last December, our team observed a generic backdoor malware coupled with [RHADAMANTHYS](https://malpedia.caad.fkie.fraunhofer.de/details/win.rhadamanthys) stealer infections. Based on the PDB path, this malware is self-described as DOUBLELOADER.\n\n![PDB path in DOUBLELOADER](/assets/images/deobfuscating-alcatraz/image6.png \"PDB path in DOUBLELOADER\")  \n\nThis malware leverages syscalls such as `NtOpenProcess`, `NtWriteVirtualMemory`, `NtCreateThreadEx` launching unbacked code within the Windows desktop/file manager (`explorer.exe`). The malware collects host information, requests an updated version of itself and starts beaconing to a hardcoded IP (`185.147.125.81`) stored within the binary.\n\n![Outbound C2 traffic from DOUBLELOADER](/assets/images/deobfuscating-alcatraz/image31.png \"Outbound C2 traffic from DOUBLELOADER\")\n\nDOUBLELOADER samples include a non-standard section (`.0Dev`) with executable permissions, this is a toolmark left based on the author's handle for the binary obfuscation tool, [`ALCATRAZ`](https://github.com/weak1337/Alcatraz).\n\n![Section creation using ALCATRAZ](/assets/images/deobfuscating-alcatraz/image32.png \"Section creation using ALCATRAZ\")\n\nObfuscators such as ALCATRAZ end up increasing the complexity when triaging malware. Its main goal is to hinder binary analysis tools and increase the time of the reverse engineering process through different techniques; such as hiding the control flow or making decompilation hard to follow. Below is an example of obfuscated control flow of one function inside DOUBLELOADER.\n\n![Obfuscated control flow in DOUBLELOADER](/assets/images/deobfuscating-alcatraz/image5.png \"Obfuscated control flow in DOUBLELOADER\")\n\nThe remainder of the post will focus on the various obfuscation techniques used by ALCATRAZ. We will use the first-stage of DOUBLELOADER along with basic code examples to highlight ALCATRAZ's features.\n\n## ALCATRAZ\n\n### ALCATRAZ Overview\n\nAlcatraz is an open-source obfuscator initially released in January 2023. While the project is recognized within the game hacking community as a foundational tool for learning obfuscation techniques, it’s also been observed being abused by e-crime and [APT groups](https://news.sophos.com/en-us/2024/09/10/crimson-palace-new-tools-tactics-targets/).\n\nAlcatraz’s code base contains 5 main features centered around standard code obfuscation techniques along with enhancement to obfuscate the entrypoint. Its workflow follows a standard `bin2bin` format, this means the user provides a compiled binary then after the transformations, they will receive a new compiled binary. This approach is particularly appealing to game hackers/malware developers due to its ease of use, requiring minimal effort and no modifications at the source code level.\n\n![ALCATRAZ - menu](/assets/images/deobfuscating-alcatraz/image29.png \"ALCATRAZ - menu\")\n\nThe developer can choose to obfuscate all or specific functions as well as choose which obfuscation techniques to apply to each function. After compilation, the file is generated with the string (`obf`) appended to the end of the filename.  \n\n![Example of binary before and after obfuscation](/assets/images/deobfuscating-alcatraz/image14.png \"Example of binary before and after obfuscation\")\n\n## Obfuscation techniques in ALCATRAZ\n\nThe following sections will go through the various obfuscation techniques implemented by ALCATRAZ. \n\n### Entrypoint obfuscation\n\nDealing with an obfuscated entrypoint is like getting a flat tire at the start of a family roadtrip. The idea is centered on confusing analysts and binary tooling where it’s not directly clear where the program starts, causing confusion at the very beginning of the analysis process. \n\nThe following is the view of a clean entrypoint (`0x140001368`) from a non-obfuscated program within IDA Pro.\n\n![Non-obfuscated entrypoint](/assets/images/deobfuscating-alcatraz/image10.png \"Non-obfuscated entrypoint\")\n\nBy enabling entrypoint obfuscation, ALCATRAZ moves the entrypoint then includes additional code with an algorithm to calculate the new entrypoint of the program. Below is a snippet of the decompiled view of the obfuscated entry-point.\n\n![Decompilation of obfuscated entrypoint](/assets/images/deobfuscating-alcatraz/image30.png \"Decompilation of obfuscated entrypoint\")\n\nAs ALCATRAZ is an open-source obfuscator, we can find the custom entrypoint [code](https://github.com/weak1337/Alcatraz/blob/739e65ebadaeb3f8206fb2199700725331465abb/Alcatraz/obfuscator/misc/custom_entry.cpp#L20) to see how the calculation is performed or reverse our own obfuscated example. In our decompilation, we can see the algorithm uses a few fields from the PE header such as the `Size of the Stack Commit`, `Time Date Stamp` along with the first four bytes from the `.0dev` section. These fields are parsed then used with bitwise operations such as rotate right (ROR) and exclusive-or (XOR) to calculate the entrypoint. \n\nBelow is an example output of IDA Python script (Appendix A) that parses the PE and finds the true entrypoint, confirming the original starting point (`0x140001368`) with the non-obfuscated sample.\n\n![Real entrypoint after obfuscation](/assets/images/deobfuscating-alcatraz/image18.png \"Real entrypoint after obfuscation\")\n\n### Anti-disassembly\n\nMalware developers and obfuscators use anti-disassembly tricks to confuse or break disassemblers in order to make static analysis harder. These techniques abuse weaknesses during linear sweeps and recursive disassembly, preventing clean code reconstruction where the analyst is then forced to manually or automatically fix the underlying instructions. \n\nALCATRAZ implements one form of this technique by modifying any instructions starting with the `0xFF` byte by adding a short jump instruction ( `0xEB`) in front. The `0xFF` byte can represent the start of multiple valid instructions dealing with calls, indirect jumps, pushes on the stack. By adding the short jump  `0xEB` in front, this effectively jumps to the next byte `0xFF`. While it’s not complex, the damage is done breaking disassembly and requiring some kind of intervention.  \n\n![Anti-disassembly technique in ALCATRAZ](/assets/images/deobfuscating-alcatraz/image26.png \"Anti-disassembly technique in ALCATRAZ\")\n\nIn order to fix this specific technique, the file can be patched by replacing each occurrence of the `0xEB` byte with NOPs. After patching, the code is restored to a cleaner state, allowing the following `call` instruction to be correctly disassembled.\n\n![Anti-disassembly recovery](/assets/images/deobfuscating-alcatraz/image1.png \"Anti-disassembly recovery\")\n\n### Instruction Mutation\n\nOne common technique used by obfuscators is instruction mutation, where instructions are transformed in a way that preserves their original behavior, but makes the code harder to understand. Frameworks such as [Tigress](https://tigress.wtf/index.html) or [Perses](https://github.com/mike1k/perses) are great examples of obfuscation research around instruction mutation.\n\nBelow is an example of this technique implemented by ALCATRAZ, where any addition between two registers is altered, but its semantic equivalence is kept intact. The simple `add` instruction gets transformed to 5 different instructions (`push`, `not`, `sub`, `pop`, `sub`). \n\n![Example of instruction mutation via ALCATRAZ](/assets/images/deobfuscating-alcatraz/image9.png \"Example of instruction mutation via ALCATRAZ\")\n\nIn order to correct this, we can use pattern matching to find these 5 instructions together, disassemble the bytes to find which registers are involved, then use an assembler such as Keystone to generate the correct corresponding bytes.  \n\n![Recovering instructions from mutation technique](/assets/images/deobfuscating-alcatraz/image12.png \"Recovering instructions from mutation technique\")\n\n### Constant Unfolding\n\nThis obfuscation technique is prevalent throughout the DOUBLELOADER sample and is a widely used method in various forms of malware. The concept here is focused on inversing the compilation process; where instead of optimizing calculations that are known at compile time, the obfuscator “unfolds” these constants making the disassembly and decompilation complex and confusing. Below is a simple example of this technique where the known constant (`46`) is broken up into two mathematical operations.\n\n ![Unfolding process example](/assets/images/deobfuscating-alcatraz/image3.png \"Unfolding process example\")\n\nIn DOUBLELOADER, we run into this technique being used anytime when immediate values are moved into a register. These immediate values are replaced with multiple bitwise operations masking these constant values, thus disrupting any context and the analyst’s flow. For example, in the disassembly below on the left-hand side, there is a comparison instruction of EAX value at address (`0x18016CD93`). By reviewing the previous instructions, it’s not obvious or clear what the EAX value should be due to multiple obscure bitwise calculations. If we debug the program, we can see the EAX value is set to `0`.\n\n![Viewing unfolding technique in debugger](/assets/images/deobfuscating-alcatraz/image13.png \"Viewing unfolding technique in debugger\")\n\nIn order to clean this obfuscation technique, we can confirm its behavior with our own example where we can use the following source code and see how the transformation is applied.\n\n```c++\n#include \u003ciostream\u003e\n\nint add(int a, int b)\n{\n\treturn a + b;\n}\n\nint main()\n{\n\tint c;\n\tc = add(1, 2);\n\tprintf(\"Meow %d\",c);\n\treturn 0;\n}\n```\n\nAfter compiling, we can view the disassembly of the `main` function in the clean version on the left and see these two constants (`2,1`) moved into the EDX and ECX register. On the right side, is the transformed version, the two constants are hidden among the newly added instructions.  \n\n![Mutation transformation: before vs after](/assets/images/deobfuscating-alcatraz/image16.png \"Mutation transformation: before vs after\")\n\nBy using pattern matching techniques, we can look for these sequences of instructions, emulate the instructions to perform the various calculations to get the original values back, and then patch the remaining bytes with NOP’s to make sure the program will still run.\n\n![Using emulation to repair immediate moves](/assets/images/deobfuscating-alcatraz/image20.png \"Using emulation to repair immediate moves\")\n\n### LEA Obfuscation\n\nSimilar to the previously discussed technique, LEA (Load Effective Address) obfuscation is focused on obscuring the immediate values associated with LEA instructions. An arithmetic calculation with subtraction will follow directly behind the LEA instruction to compute the original intended value. While this may seem like a minor change, it can have a significant impact breaking cross-references to strings and data — which are essential for effective binary analysis.\n\nBelow is an example of this technique within DOUBLELOADER where the RAX register value is disguised through a pattern of loading an initial value (`0x1F4DFCF4F`), then subtracting (`0x74D983C7`) to give us a new computed value (`0x180064B88`).\n\n![LEA obfuscation pattern in ALCATRAZ](/assets/images/deobfuscating-alcatraz/image23.png \"LEA obfuscation pattern in ALCATRAZ\")\n\nIf we go to that address inside our sample, we are taken to the read-only data section, where we can find the referenced string `bad array new length`. \n\n![Referenced string after LEA obfuscation](/assets/images/deobfuscating-alcatraz/image27.png \"Referenced string after LEA obfuscation\")\n\nIn order to correct this technique, we can use pattern matching to find these specific instructions, perform the calculation, then re-construct a new LEA instruction. Within 64-bit mode, LEA uses RIP-relative addressing so the address is calculated based on the current instruction pointer (RIP). Ultimately, we end up with a new instruction that looks like this: `lea rax, [rip - 0xFF827]`. \n\nBelow are the steps to produce this final instruction: \n\n![Displacement calculation for LEA instruction](/assets/images/deobfuscating-alcatraz/image17.png \"Displacement calculation for LEA instruction\")\n\nWith this information, we can use IDA Python to patch all these patterns out, below is an example of a fixed LEA instruction.\n\n![Patching LEA instructions in DOUBLELOADER](/assets/images/deobfuscating-alcatraz/image28.png \"Patching LEA instructions in DOUBLELOADER\")\n\n### Control Flow Obfuscation\n\n**Control flow flattening** is a powerful obfuscation technique that disrupts the traditional structure of a program’s control flow by eliminating conventional constructs like conditional branches and loops. Instead, it restructures execution using a centralized dispatcher, which determines the next basic block to execute based on a state variable, making analysis and decompilation significantly more difficult. Below is a simple diagram that represents the differences between an unflattened and flattened control flow.\n\n![Standard control flow vs flattened control flow](/assets/images/deobfuscating-alcatraz/image21.png \"Standard control flow vs flattened control flow\")\n\nOur team has observed this technique in various malware such as [DOORME](https://www.elastic.co/security-labs/update-to-the-REF2924-intrusion-set-and-related-campaigns) and it should come as no surprise in this case, that flattened control flow is one of the main [features](https://github.com/weak1337/Alcatraz/tree/master?tab=readme-ov-file#control-flow-flattening) within the ALCATRAZ obfuscator. In order to approach un-flattening, we focused on established tooling by using IDA plugin [D810](https://eshard.com/posts/d810-deobfuscation-ida-pro) written by security researcher Boris Batteux.\n\nWe will start with our previous example program using the common `_security_init_cookie` function used to detect buffer overflows. Below is the control flow diagram of the cookie initialization function in non-obfuscated form. Based on the graph, we can see there are six basic blocks, two conditional branches, and we can easily follow the execution flow.\n\n![Control flow of non-obfuscated security_init_cookie function](/assets/images/deobfuscating-alcatraz/image11.png \"Control flow of non-obfuscated security_init_cookie function\")\n\nIf we take the same function and apply ALCATRAZ's control flow flattening feature, the program’s control flow looks vastly different with 22 basic blocks, 8 conditional branches, and a new dispatcher. In the figure below, the color-filled blocks represent the previous basic blocks from the non-obfuscated version, the remaining blocks in white represent added obfuscator code used for dispatching and controlling the execution.  \n\n![Obfuscated control flow of security_init_cookie function](/assets/images/deobfuscating-alcatraz/image19.png \"Obfuscated control flow of security_init_cookie function\")\n\nIf we take a look at the decompilation, we can see the function is now broken into different parts within a `while` loop where a new `state` variable is used to guide the program along with remnants from the obfuscation including `popf/pushf` instructions.\n\n![Obfuscated decompilation of security_init_cookie function](/assets/images/deobfuscating-alcatraz/image15.png \"Obfuscated decompilation of security_init_cookie function\")\n\nFor cleaning this function, D810 applies two different rules (`UnflattenerFakeJump`, `FixPredecessorOfConditionalJumpBlock`) that apply microcode transformations to improve decompilation.\n\n```\n2025-04-03 15:44:50,182 - D810 - INFO - Starting decompilation of function at 0x140025098\n2025-04-03 15:44:50,334 - D810 - INFO - glbopt finished for function at 0x140025098\n2025-04-03 15:44:50,334 - D810 - INFO - BlkRule 'UnflattenerFakeJump' has been used 1 times for a total of 3 patches\n2025-04-03 15:44:50,334 - D810 - INFO - BlkRule 'FixPredecessorOfConditionalJumpBlock' has been used 1 times for a total of 2 patches\n```\n\nWhen we refresh the decompiler, the control-flow flattening is removed, and the pseudocode is cleaned up.\n\n![Control-flow obfuscation removed from decompilation by D810](/assets/images/deobfuscating-alcatraz/image2.png \"Control-flow obfuscation removed from decompilation by D810\")\n   \nWhile this is a good example, fixing control-flow obfuscation can often be a manual and timely process that is function-dependent. In the next section, we will gather up some of the techniques we learned and apply it to DOUBLELOADER.\n\n## Cleaning a DOUBLELOADER function\n\nOne of the challenges when dealing with obfuscation in malware is not so much the individual obfuscation techniques, but when the techniques are layered. Additionally, in the case of DOUBLELOADER, large portions of code are placed in function chunks with ambiguous boundaries, making it challenging to analyze. In this section, we will go through a practical example showing the cleaning process for a DOUBLELOADER function protected by ALCATRAZ.\n\nUpon launch at the `Start` export, one of the first calls goes to `loc_18016C6D9`. This appears to be an entry to a larger function, however IDA is not properly able to create a function due to undefined instructions at `0x18016C8C1`.\n\n![Example of DoubleLoader causing error in IDA Pro](/assets/images/deobfuscating-alcatraz/image22.png \"Example of DoubleLoader causing error in IDA Pro\")\n\nIf we scroll to this address, we can see the first disruption is due to the short jump anti-disassembly technique which we saw earlier in the blog post (`EB FF`). \n\n![Anti-disassembly technique in DoubleLoader](/assets/images/deobfuscating-alcatraz/image24.png \"Anti-disassembly technique in DoubleLoader\")\n\nAfter fixing 6 nearby occurrences of this same technique, we can go back to the start address (`0x18016C6D9`) and use the MakeFunction feature. While the function will decompile, it is still heavily obfuscated which is not ideal for any analysis.\n\n![DoubleLoader function with ALCATRAZ obfuscation](/assets/images/deobfuscating-alcatraz/image7.gif \"DoubleLoader function with ALCATRAZ obfuscation\")\n\nGoing back to the disassembly, we can see the LEA obfuscation technique used in this function below where the string constant `”Error”` is now recovered using the earlier solution.\n\n![Restoring string constant from LEA obfuscation](/assets/images/deobfuscating-alcatraz/image8.gif \"Restoring string constant from LEA obfuscation\")\n\nAnother example below shows the transformation of an obfuscated parameter for a `LoadIcon` call where the `lpIconName` parameter gets cleaned to `0x7f00` (`IDI_APPLICATION`).  \n\n![Restoring LoadIcon parameter from immediate mov obfuscation](/assets/images/deobfuscating-alcatraz/image25.gif \"Restoring LoadIcon parameter from immediate mov obfuscation\")\n\nNow that the decompilation has improved, we can finalize the cleanup by removing control flow obfuscation with the D810 plugin. Below is a demonstration showing the before and after effects.\n\n![Decompilation cleanup of DoubleLoader function using D810](/assets/images/deobfuscating-alcatraz/image4.gif \"Decompilation cleanup of DoubleLoader function using D810\")\n\nThis section has covered a real-world scenario of working towards cleaning a malicious obfuscated function protected by ALCATRAZ. While malware analysis reports often show the final outcomes, a good portion of time is often spent up-front working towards removing obfuscation and fixing up the binary so it can then be properly analyzed. \n\n## IDA Python Scripts\n\nOur team is releasing a series of proof-of-concept [IDA Python scripts](https://github.com/elastic/labs-releases/tree/main/tools/alcatraz) used to handle the default obfuscation techniques imposed by the ALCATRAZ obfuscator. These are meant to serve as basic examples when dealing with these techniques, and should be used for research purposes. Unfortunately, there is no silver bullet when dealing with obfuscation, but having some examples and general strategies can be valuable for tackling similar challenges in the future.\n\n## YARA\n\nElastic Security has created YARA rules to identify this activity. \n\n- [Windows.Trojan.DoubleLoader](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_DoubleLoader.yar)\n\n## Observations\n\nThe following observables were discussed in this research.\n\n| Observable | Type | Name | Reference |\n| :---- | :---- | :---- | :---- |\n| `3050c464360ba7004d60f3ea7ebdf85d9a778d931fbf1041fa5867b930e1f7fd` | SHA256 | `DoubleLo.dll` | DOUBLELOADER |\n\n## References\n\nThe following were referenced throughout the above research:\n\n* [https://github.com/weak1337/Alcatraz](https://github.com/weak1337/Alcatraz)  \n* [https://gitlab.com/eshard/d810](https://gitlab.com/eshard/d810)  \n* [https://eshard.com/posts/d810-deobfuscation-ida-pro](https://eshard.com/posts/d810-deobfuscation-ida-pro)\n* [http://keowu.re/posts/Analyzing-Mutation-Coded-VM-Protect-and-Alcatraz-English/](http://keowu.re/posts/Analyzing-Mutation-Coded-VM-Protect-and-Alcatraz-English/)","code":"var Component=(()=\u003e{var d=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var p=(i,e)=\u003e()=\u003e(e||i((e={exports:{}}).exports,e),e.exports),b=(i,e)=\u003e{for(var n in e)o(i,n,{get:e[n],enumerable:!0})},r=(i,e,n,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of f(e))!m.call(i,a)\u0026\u0026a!==n\u0026\u0026o(i,a,{get:()=\u003ee[a],enumerable:!(s=u(e,a))||s.enumerable});return i};var w=(i,e,n)=\u003e(n=i!=null?d(g(i)):{},r(e||!i||!i.__esModule?o(n,\"default\",{value:i,enumerable:!0}):n,i)),A=i=\u003er(o({},\"__esModule\",{value:!0}),i);var l=p((k,c)=\u003e{c.exports=_jsx_runtime});var D={};b(D,{default:()=\u003eL,frontmatter:()=\u003ey});var t=w(l()),y={title:\"De-obfuscating ALCATRAZ\",slug:\"deobfuscating-alcatraz\",date:\"2025-05-23\",description:\"An exploration of techniques used by the obfuscator ALCATRAZ.\",author:[{slug:\"daniel-stepanic\"}],image:\"alcatraz.png\",category:[{slug:\"malware-analysis\"}],tags:[\"ALCATRAZ\",\"DOUBLELOADER\",\"deobfuscation\"]};function h(i){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",h3:\"h3\",ul:\"ul\",li:\"li\",img:\"img\",code:\"code\",pre:\"pre\",strong:\"strong\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},i.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:\"introduction\",children:\"Introduction\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Elastic Security Labs analyzes diverse malware that comes through our threat hunting pipelines and telemetry queues. We recently ran into a new malware family called DOUBLELOADER, seen alongside the RHADAMANTHYS infostealer.  One interesting attribute of DOUBLELOADER is that it is protected with an open-source obfuscator, \",(0,t.jsx)(e.a,{href:\"https://github.com/weak1337/Alcatraz\",rel:\"nofollow\",children:\"ALCATRAZ\"}),\" first released in 2023. While this project had its roots in the game hacking community, it\\u2019s also been observed in the e-crime space, and has been used in targeted \",(0,t.jsx)(e.a,{href:\"https://news.sophos.com/en-us/2024/09/10/crimson-palace-new-tools-tactics-targets/\",rel:\"nofollow\",children:\"intrusions\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The objective of this post is to walk through various obfuscation techniques employed by ALCATRAZ, while highlighting methods to combat these techniques as malware analysts. These techniques include \",(0,t.jsx)(e.a,{href:\"https://tigress.wtf/flatten.html\",rel:\"nofollow\",children:\"control flow flattening\"}),\", \",(0,t.jsx)(e.a,{href:\"https://github.com/mike1k/perses?tab=readme-ov-file#introduction\",rel:\"nofollow\",children:\"instruction mutation\"}),\", constant unfolding, LEA constant hiding, anti-disassembly \",(0,t.jsx)(e.a,{href:\"https://1malware1.medium.com/anti-disassembly-techniques-e012338f2ae0\",rel:\"nofollow\",children:\"tricks\"}),\" and entrypoint obfuscation.\"]}),`\n`,(0,t.jsx)(e.h3,{id:\"key-takeaways\",children:\"Key takeaways\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"The open-source obfuscator ALCATRAZ has been seen within new malware deployed alongside RHADAMANTHYS infections\"}),`\n`,(0,t.jsx)(e.li,{children:\"Obfuscation techniques such as control flow flattening continue to serve as road blocks for analysts\"}),`\n`,(0,t.jsx)(e.li,{children:\"By understanding obfuscation techniques and how to counter them, organizations can improve their ability to effectively triage and analyze protected binaries.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Elastic Security Labs releases tooling to deobfuscate ALCATRAZ protected binaries are released with this post\"}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"doubleloader\",children:\"DOUBLELOADER\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Starting last December, our team observed a generic backdoor malware coupled with \",(0,t.jsx)(e.a,{href:\"https://malpedia.caad.fkie.fraunhofer.de/details/win.rhadamanthys\",rel:\"nofollow\",children:\"RHADAMANTHYS\"}),\" stealer infections. Based on the PDB path, this malware is self-described as DOUBLELOADER.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image6.png\",alt:\"PDB path in DOUBLELOADER\",title:\"PDB path in DOUBLELOADER\",width:\"1261\",height:\"91\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"This malware leverages syscalls such as \",(0,t.jsx)(e.code,{children:\"NtOpenProcess\"}),\", \",(0,t.jsx)(e.code,{children:\"NtWriteVirtualMemory\"}),\", \",(0,t.jsx)(e.code,{children:\"NtCreateThreadEx\"}),\" launching unbacked code within the Windows desktop/file manager (\",(0,t.jsx)(e.code,{children:\"explorer.exe\"}),\"). The malware collects host information, requests an updated version of itself and starts beaconing to a hardcoded IP (\",(0,t.jsx)(e.code,{children:\"185.147.125.81\"}),\") stored within the binary.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image31.png\",alt:\"Outbound C2 traffic from DOUBLELOADER\",title:\"Outbound C2 traffic from DOUBLELOADER\",width:\"920\",height:\"371\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"DOUBLELOADER samples include a non-standard section (\",(0,t.jsx)(e.code,{children:\".0Dev\"}),\") with executable permissions, this is a toolmark left based on the author's handle for the binary obfuscation tool, \",(0,t.jsx)(e.a,{href:\"https://github.com/weak1337/Alcatraz\",rel:\"nofollow\",children:(0,t.jsx)(e.code,{children:\"ALCATRAZ\"})}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image32.png\",alt:\"Section creation using ALCATRAZ\",title:\"Section creation using ALCATRAZ\",width:\"1403\",height:\"147\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Obfuscators such as ALCATRAZ end up increasing the complexity when triaging malware. Its main goal is to hinder binary analysis tools and increase the time of the reverse engineering process through different techniques; such as hiding the control flow or making decompilation hard to follow. Below is an example of obfuscated control flow of one function inside DOUBLELOADER.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image5.png\",alt:\"Obfuscated control flow in DOUBLELOADER\",title:\"Obfuscated control flow in DOUBLELOADER\",width:\"737\",height:\"995\"})}),`\n`,(0,t.jsx)(e.p,{children:\"The remainder of the post will focus on the various obfuscation techniques used by ALCATRAZ. We will use the first-stage of DOUBLELOADER along with basic code examples to highlight ALCATRAZ's features.\"}),`\n`,(0,t.jsx)(e.h2,{id:\"alcatraz\",children:\"ALCATRAZ\"}),`\n`,(0,t.jsx)(e.h3,{id:\"alcatraz-overview\",children:\"ALCATRAZ Overview\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Alcatraz is an open-source obfuscator initially released in January 2023. While the project is recognized within the game hacking community as a foundational tool for learning obfuscation techniques, it\\u2019s also been observed being abused by e-crime and \",(0,t.jsx)(e.a,{href:\"https://news.sophos.com/en-us/2024/09/10/crimson-palace-new-tools-tactics-targets/\",rel:\"nofollow\",children:\"APT groups\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Alcatraz\\u2019s code base contains 5 main features centered around standard code obfuscation techniques along with enhancement to obfuscate the entrypoint. Its workflow follows a standard \",(0,t.jsx)(e.code,{children:\"bin2bin\"}),\" format, this means the user provides a compiled binary then after the transformations, they will receive a new compiled binary. This approach is particularly appealing to game hackers/malware developers due to its ease of use, requiring minimal effort and no modifications at the source code level.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image29.png\",alt:\"ALCATRAZ - menu\",title:\"ALCATRAZ - menu\",width:\"1272\",height:\"654\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The developer can choose to obfuscate all or specific functions as well as choose which obfuscation techniques to apply to each function. After compilation, the file is generated with the string (\",(0,t.jsx)(e.code,{children:\"obf\"}),\") appended to the end of the filename.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image14.png\",alt:\"Example of binary before and after obfuscation\",title:\"Example of binary before and after obfuscation\",width:\"894\",height:\"162\"})}),`\n`,(0,t.jsx)(e.h2,{id:\"obfuscation-techniques-in-alcatraz\",children:\"Obfuscation techniques in ALCATRAZ\"}),`\n`,(0,t.jsx)(e.p,{children:\"The following sections will go through the various obfuscation techniques implemented by ALCATRAZ.\"}),`\n`,(0,t.jsx)(e.h3,{id:\"entrypoint-obfuscation\",children:\"Entrypoint obfuscation\"}),`\n`,(0,t.jsx)(e.p,{children:\"Dealing with an obfuscated entrypoint is like getting a flat tire at the start of a family roadtrip. The idea is centered on confusing analysts and binary tooling where it\\u2019s not directly clear where the program starts, causing confusion at the very beginning of the analysis process.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The following is the view of a clean entrypoint (\",(0,t.jsx)(e.code,{children:\"0x140001368\"}),\") from a non-obfuscated program within IDA Pro.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image10.png\",alt:\"Non-obfuscated entrypoint\",title:\"Non-obfuscated entrypoint\",width:\"1396\",height:\"177\"})}),`\n`,(0,t.jsx)(e.p,{children:\"By enabling entrypoint obfuscation, ALCATRAZ moves the entrypoint then includes additional code with an algorithm to calculate the new entrypoint of the program. Below is a snippet of the decompiled view of the obfuscated entry-point.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image30.png\",alt:\"Decompilation of obfuscated entrypoint\",title:\"Decompilation of obfuscated entrypoint\",width:\"1407\",height:\"666\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"As ALCATRAZ is an open-source obfuscator, we can find the custom entrypoint \",(0,t.jsx)(e.a,{href:\"https://github.com/weak1337/Alcatraz/blob/739e65ebadaeb3f8206fb2199700725331465abb/Alcatraz/obfuscator/misc/custom_entry.cpp#L20\",rel:\"nofollow\",children:\"code\"}),\" to see how the calculation is performed or reverse our own obfuscated example. In our decompilation, we can see the algorithm uses a few fields from the PE header such as the \",(0,t.jsx)(e.code,{children:\"Size of the Stack Commit\"}),\", \",(0,t.jsx)(e.code,{children:\"Time Date Stamp\"}),\" along with the first four bytes from the \",(0,t.jsx)(e.code,{children:\".0dev\"}),\" section. These fields are parsed then used with bitwise operations such as rotate right (ROR) and exclusive-or (XOR) to calculate the entrypoint.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Below is an example output of IDA Python script (Appendix A) that parses the PE and finds the true entrypoint, confirming the original starting point (\",(0,t.jsx)(e.code,{children:\"0x140001368\"}),\") with the non-obfuscated sample.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image18.png\",alt:\"Real entrypoint after obfuscation\",title:\"Real entrypoint after obfuscation\",width:\"1165\",height:\"553\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"anti-disassembly\",children:\"Anti-disassembly\"}),`\n`,(0,t.jsx)(e.p,{children:\"Malware developers and obfuscators use anti-disassembly tricks to confuse or break disassemblers in order to make static analysis harder. These techniques abuse weaknesses during linear sweeps and recursive disassembly, preventing clean code reconstruction where the analyst is then forced to manually or automatically fix the underlying instructions.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"ALCATRAZ implements one form of this technique by modifying any instructions starting with the \",(0,t.jsx)(e.code,{children:\"0xFF\"}),\" byte by adding a short jump instruction ( \",(0,t.jsx)(e.code,{children:\"0xEB\"}),\") in front. The \",(0,t.jsx)(e.code,{children:\"0xFF\"}),\" byte can represent the start of multiple valid instructions dealing with calls, indirect jumps, pushes on the stack. By adding the short jump  \",(0,t.jsx)(e.code,{children:\"0xEB\"}),\" in front, this effectively jumps to the next byte \",(0,t.jsx)(e.code,{children:\"0xFF\"}),\". While it\\u2019s not complex, the damage is done breaking disassembly and requiring some kind of intervention.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image26.png\",alt:\"Anti-disassembly technique in ALCATRAZ\",title:\"Anti-disassembly technique in ALCATRAZ\",width:\"1220\",height:\"513\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"In order to fix this specific technique, the file can be patched by replacing each occurrence of the \",(0,t.jsx)(e.code,{children:\"0xEB\"}),\" byte with NOPs. After patching, the code is restored to a cleaner state, allowing the following \",(0,t.jsx)(e.code,{children:\"call\"}),\" instruction to be correctly disassembled.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image1.png\",alt:\"Anti-disassembly recovery\",title:\"Anti-disassembly recovery\",width:\"832\",height:\"488\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"instruction-mutation\",children:\"Instruction Mutation\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"One common technique used by obfuscators is instruction mutation, where instructions are transformed in a way that preserves their original behavior, but makes the code harder to understand. Frameworks such as \",(0,t.jsx)(e.a,{href:\"https://tigress.wtf/index.html\",rel:\"nofollow\",children:\"Tigress\"}),\" or \",(0,t.jsx)(e.a,{href:\"https://github.com/mike1k/perses\",rel:\"nofollow\",children:\"Perses\"}),\" are great examples of obfuscation research around instruction mutation.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Below is an example of this technique implemented by ALCATRAZ, where any addition between two registers is altered, but its semantic equivalence is kept intact. The simple \",(0,t.jsx)(e.code,{children:\"add\"}),\" instruction gets transformed to 5 different instructions (\",(0,t.jsx)(e.code,{children:\"push\"}),\", \",(0,t.jsx)(e.code,{children:\"not\"}),\", \",(0,t.jsx)(e.code,{children:\"sub\"}),\", \",(0,t.jsx)(e.code,{children:\"pop\"}),\", \",(0,t.jsx)(e.code,{children:\"sub\"}),\").\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image9.png\",alt:\"Example of instruction mutation via ALCATRAZ\",title:\"Example of instruction mutation via ALCATRAZ\",width:\"1957\",height:\"688\"})}),`\n`,(0,t.jsx)(e.p,{children:\"In order to correct this, we can use pattern matching to find these 5 instructions together, disassemble the bytes to find which registers are involved, then use an assembler such as Keystone to generate the correct corresponding bytes.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image12.png\",alt:\"Recovering instructions from mutation technique\",title:\"Recovering instructions from mutation technique\",width:\"788\",height:\"961\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"constant-unfolding\",children:\"Constant Unfolding\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"This obfuscation technique is prevalent throughout the DOUBLELOADER sample and is a widely used method in various forms of malware. The concept here is focused on inversing the compilation process; where instead of optimizing calculations that are known at compile time, the obfuscator \\u201Cunfolds\\u201D these constants making the disassembly and decompilation complex and confusing. Below is a simple example of this technique where the known constant (\",(0,t.jsx)(e.code,{children:\"46\"}),\") is broken up into two mathematical operations.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image3.png\",alt:\"Unfolding process example\",title:\"Unfolding process example\",width:\"479\",height:\"270\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"In DOUBLELOADER, we run into this technique being used anytime when immediate values are moved into a register. These immediate values are replaced with multiple bitwise operations masking these constant values, thus disrupting any context and the analyst\\u2019s flow. For example, in the disassembly below on the left-hand side, there is a comparison instruction of EAX value at address (\",(0,t.jsx)(e.code,{children:\"0x18016CD93\"}),\"). By reviewing the previous instructions, it\\u2019s not obvious or clear what the EAX value should be due to multiple obscure bitwise calculations. If we debug the program, we can see the EAX value is set to \",(0,t.jsx)(e.code,{children:\"0\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image13.png\",alt:\"Viewing unfolding technique in debugger\",title:\"Viewing unfolding technique in debugger\",width:\"1612\",height:\"458\"})}),`\n`,(0,t.jsx)(e.p,{children:\"In order to clean this obfuscation technique, we can confirm its behavior with our own example where we can use the following source code and see how the transformation is applied.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-c++\",children:`#include \u003ciostream\u003e\n\nint add(int a, int b)\n{\n\treturn a + b;\n}\n\nint main()\n{\n\tint c;\n\tc = add(1, 2);\n\tprintf(\"Meow %d\",c);\n\treturn 0;\n}\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"After compiling, we can view the disassembly of the \",(0,t.jsx)(e.code,{children:\"main\"}),\" function in the clean version on the left and see these two constants (\",(0,t.jsx)(e.code,{children:\"2,1\"}),\") moved into the EDX and ECX register. On the right side, is the transformed version, the two constants are hidden among the newly added instructions.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image16.png\",alt:\"Mutation transformation: before vs after\",title:\"Mutation transformation: before vs after\",width:\"1703\",height:\"598\"})}),`\n`,(0,t.jsx)(e.p,{children:\"By using pattern matching techniques, we can look for these sequences of instructions, emulate the instructions to perform the various calculations to get the original values back, and then patch the remaining bytes with NOP\\u2019s to make sure the program will still run.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image20.png\",alt:\"Using emulation to repair immediate moves\",title:\"Using emulation to repair immediate moves\",width:\"1291\",height:\"1071\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"lea-obfuscation\",children:\"LEA Obfuscation\"}),`\n`,(0,t.jsx)(e.p,{children:\"Similar to the previously discussed technique, LEA (Load Effective Address) obfuscation is focused on obscuring the immediate values associated with LEA instructions. An arithmetic calculation with subtraction will follow directly behind the LEA instruction to compute the original intended value. While this may seem like a minor change, it can have a significant impact breaking cross-references to strings and data \\u2014 which are essential for effective binary analysis.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Below is an example of this technique within DOUBLELOADER where the RAX register value is disguised through a pattern of loading an initial value (\",(0,t.jsx)(e.code,{children:\"0x1F4DFCF4F\"}),\"), then subtracting (\",(0,t.jsx)(e.code,{children:\"0x74D983C7\"}),\") to give us a new computed value (\",(0,t.jsx)(e.code,{children:\"0x180064B88\"}),\").\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image23.png\",alt:\"LEA obfuscation pattern in ALCATRAZ\",title:\"LEA obfuscation pattern in ALCATRAZ\",width:\"715\",height:\"343\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"If we go to that address inside our sample, we are taken to the read-only data section, where we can find the referenced string \",(0,t.jsx)(e.code,{children:\"bad array new length\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image27.png\",alt:\"Referenced string after LEA obfuscation\",title:\"Referenced string after LEA obfuscation\",width:\"651\",height:\"82\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"In order to correct this technique, we can use pattern matching to find these specific instructions, perform the calculation, then re-construct a new LEA instruction. Within 64-bit mode, LEA uses RIP-relative addressing so the address is calculated based on the current instruction pointer (RIP). Ultimately, we end up with a new instruction that looks like this: \",(0,t.jsx)(e.code,{children:\"lea rax, [rip - 0xFF827]\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Below are the steps to produce this final instruction:\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image17.png\",alt:\"Displacement calculation for LEA instruction\",title:\"Displacement calculation for LEA instruction\",width:\"1060\",height:\"323\"})}),`\n`,(0,t.jsx)(e.p,{children:\"With this information, we can use IDA Python to patch all these patterns out, below is an example of a fixed LEA instruction.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image28.png\",alt:\"Patching LEA instructions in DOUBLELOADER\",title:\"Patching LEA instructions in DOUBLELOADER\",width:\"1126\",height:\"612\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"control-flow-obfuscation\",children:\"Control Flow Obfuscation\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Control flow flattening\"}),\" is a powerful obfuscation technique that disrupts the traditional structure of a program\\u2019s control flow by eliminating conventional constructs like conditional branches and loops. Instead, it restructures execution using a centralized dispatcher, which determines the next basic block to execute based on a state variable, making analysis and decompilation significantly more difficult. Below is a simple diagram that represents the differences between an unflattened and flattened control flow.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image21.png\",alt:\"Standard control flow vs flattened control flow\",title:\"Standard control flow vs flattened control flow\",width:\"1999\",height:\"875\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Our team has observed this technique in various malware such as \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/update-to-the-REF2924-intrusion-set-and-related-campaigns\",rel:\"nofollow\",children:\"DOORME\"}),\" and it should come as no surprise in this case, that flattened control flow is one of the main \",(0,t.jsx)(e.a,{href:\"https://github.com/weak1337/Alcatraz/tree/master?tab=readme-ov-file#control-flow-flattening\",rel:\"nofollow\",children:\"features\"}),\" within the ALCATRAZ obfuscator. In order to approach un-flattening, we focused on established tooling by using IDA plugin \",(0,t.jsx)(e.a,{href:\"https://eshard.com/posts/d810-deobfuscation-ida-pro\",rel:\"nofollow\",children:\"D810\"}),\" written by security researcher Boris Batteux.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"We will start with our previous example program using the common \",(0,t.jsx)(e.code,{children:\"_security_init_cookie\"}),\" function used to detect buffer overflows. Below is the control flow diagram of the cookie initialization function in non-obfuscated form. Based on the graph, we can see there are six basic blocks, two conditional branches, and we can easily follow the execution flow.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image11.png\",alt:\"Control flow of non-obfuscated security_init_cookie function\",title:\"Control flow of non-obfuscated security_init_cookie function\",width:\"600\",height:\"357\"})}),`\n`,(0,t.jsx)(e.p,{children:\"If we take the same function and apply ALCATRAZ's control flow flattening feature, the program\\u2019s control flow looks vastly different with 22 basic blocks, 8 conditional branches, and a new dispatcher. In the figure below, the color-filled blocks represent the previous basic blocks from the non-obfuscated version, the remaining blocks in white represent added obfuscator code used for dispatching and controlling the execution.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image19.png\",alt:\"Obfuscated control flow of security_init_cookie function\",title:\"Obfuscated control flow of security_init_cookie function\",width:\"1407\",height:\"533\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"If we take a look at the decompilation, we can see the function is now broken into different parts within a \",(0,t.jsx)(e.code,{children:\"while\"}),\" loop where a new \",(0,t.jsx)(e.code,{children:\"state\"}),\" variable is used to guide the program along with remnants from the obfuscation including \",(0,t.jsx)(e.code,{children:\"popf/pushf\"}),\" instructions.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image15.png\",alt:\"Obfuscated decompilation of security_init_cookie function\",title:\"Obfuscated decompilation of security_init_cookie function\",width:\"677\",height:\"757\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"For cleaning this function, D810 applies two different rules (\",(0,t.jsx)(e.code,{children:\"UnflattenerFakeJump\"}),\", \",(0,t.jsx)(e.code,{children:\"FixPredecessorOfConditionalJumpBlock\"}),\") that apply microcode transformations to improve decompilation.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`2025-04-03 15:44:50,182 - D810 - INFO - Starting decompilation of function at 0x140025098\n2025-04-03 15:44:50,334 - D810 - INFO - glbopt finished for function at 0x140025098\n2025-04-03 15:44:50,334 - D810 - INFO - BlkRule 'UnflattenerFakeJump' has been used 1 times for a total of 3 patches\n2025-04-03 15:44:50,334 - D810 - INFO - BlkRule 'FixPredecessorOfConditionalJumpBlock' has been used 1 times for a total of 2 patches\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"When we refresh the decompiler, the control-flow flattening is removed, and the pseudocode is cleaned up.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image2.png\",alt:\"Control-flow obfuscation removed from decompilation by D810\",title:\"Control-flow obfuscation removed from decompilation by D810\",width:\"479\",height:\"424\"})}),`\n`,(0,t.jsx)(e.p,{children:\"While this is a good example, fixing control-flow obfuscation can often be a manual and timely process that is function-dependent. In the next section, we will gather up some of the techniques we learned and apply it to DOUBLELOADER.\"}),`\n`,(0,t.jsx)(e.h2,{id:\"cleaning-a-doubleloader-function\",children:\"Cleaning a DOUBLELOADER function\"}),`\n`,(0,t.jsx)(e.p,{children:\"One of the challenges when dealing with obfuscation in malware is not so much the individual obfuscation techniques, but when the techniques are layered. Additionally, in the case of DOUBLELOADER, large portions of code are placed in function chunks with ambiguous boundaries, making it challenging to analyze. In this section, we will go through a practical example showing the cleaning process for a DOUBLELOADER function protected by ALCATRAZ.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Upon launch at the \",(0,t.jsx)(e.code,{children:\"Start\"}),\" export, one of the first calls goes to \",(0,t.jsx)(e.code,{children:\"loc_18016C6D9\"}),\". This appears to be an entry to a larger function, however IDA is not properly able to create a function due to undefined instructions at \",(0,t.jsx)(e.code,{children:\"0x18016C8C1\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image22.png\",alt:\"Example of DoubleLoader causing error in IDA Pro\",title:\"Example of DoubleLoader causing error in IDA Pro\",width:\"1171\",height:\"439\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"If we scroll to this address, we can see the first disruption is due to the short jump anti-disassembly technique which we saw earlier in the blog post (\",(0,t.jsx)(e.code,{children:\"EB FF\"}),\").\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image24.png\",alt:\"Anti-disassembly technique in DoubleLoader\",title:\"Anti-disassembly technique in DoubleLoader\",width:\"1180\",height:\"424\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"After fixing 6 nearby occurrences of this same technique, we can go back to the start address (\",(0,t.jsx)(e.code,{children:\"0x18016C6D9\"}),\") and use the MakeFunction feature. While the function will decompile, it is still heavily obfuscated which is not ideal for any analysis.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image7.gif\",alt:\"DoubleLoader function with ALCATRAZ obfuscation\",title:\"DoubleLoader function with ALCATRAZ obfuscation\",width:\"1431\",height:\"1050\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Going back to the disassembly, we can see the LEA obfuscation technique used in this function below where the string constant \",(0,t.jsx)(e.code,{children:\"\\u201DError\\u201D\"}),\" is now recovered using the earlier solution.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image8.gif\",alt:\"Restoring string constant from LEA obfuscation\",title:\"Restoring string constant from LEA obfuscation\",width:\"1423\",height:\"462\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Another example below shows the transformation of an obfuscated parameter for a \",(0,t.jsx)(e.code,{children:\"LoadIcon\"}),\" call where the \",(0,t.jsx)(e.code,{children:\"lpIconName\"}),\" parameter gets cleaned to \",(0,t.jsx)(e.code,{children:\"0x7f00\"}),\" (\",(0,t.jsx)(e.code,{children:\"IDI_APPLICATION\"}),\").\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image25.gif\",alt:\"Restoring LoadIcon parameter from immediate mov obfuscation\",title:\"Restoring LoadIcon parameter from immediate mov obfuscation\",width:\"1110\",height:\"564\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Now that the decompilation has improved, we can finalize the cleanup by removing control flow obfuscation with the D810 plugin. Below is a demonstration showing the before and after effects.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/deobfuscating-alcatraz/image4.gif\",alt:\"Decompilation cleanup of DoubleLoader function using D810\",title:\"Decompilation cleanup of DoubleLoader function using D810\",width:\"2037\",height:\"1073\"})}),`\n`,(0,t.jsx)(e.p,{children:\"This section has covered a real-world scenario of working towards cleaning a malicious obfuscated function protected by ALCATRAZ. While malware analysis reports often show the final outcomes, a good portion of time is often spent up-front working towards removing obfuscation and fixing up the binary so it can then be properly analyzed.\"}),`\n`,(0,t.jsx)(e.h2,{id:\"ida-python-scripts\",children:\"IDA Python Scripts\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Our team is releasing a series of proof-of-concept \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/tools/alcatraz\",rel:\"nofollow\",children:\"IDA Python scripts\"}),\" used to handle the default obfuscation techniques imposed by the ALCATRAZ obfuscator. These are meant to serve as basic examples when dealing with these techniques, and should be used for research purposes. Unfortunately, there is no silver bullet when dealing with obfuscation, but having some examples and general strategies can be valuable for tackling similar challenges in the future.\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"yara\",children:\"YARA\"}),`\n`,(0,t.jsx)(e.p,{children:\"Elastic Security has created YARA rules to identify this activity.\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_DoubleLoader.yar\",rel:\"nofollow\",children:\"Windows.Trojan.DoubleLoader\"})}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"observations\",children:\"Observations\"}),`\n`,(0,t.jsx)(e.p,{children:\"The following observables were discussed in this research.\"}),`\n`,(0,t.jsx)(e.div,{className:\"table-container\",children:(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{align:\"left\",children:\"Observable\"}),(0,t.jsx)(e.th,{align:\"left\",children:\"Type\"}),(0,t.jsx)(e.th,{align:\"left\",children:\"Name\"}),(0,t.jsx)(e.th,{align:\"left\",children:\"Reference\"})]})}),(0,t.jsx)(e.tbody,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:\"left\",children:(0,t.jsx)(e.code,{children:\"3050c464360ba7004d60f3ea7ebdf85d9a778d931fbf1041fa5867b930e1f7fd\"})}),(0,t.jsx)(e.td,{align:\"left\",children:\"SHA256\"}),(0,t.jsx)(e.td,{align:\"left\",children:(0,t.jsx)(e.code,{children:\"DoubleLo.dll\"})}),(0,t.jsx)(e.td,{align:\"left\",children:\"DOUBLELOADER\"})]})})]})}),`\n`,(0,t.jsx)(e.h2,{id:\"references\",children:\"References\"}),`\n`,(0,t.jsx)(e.p,{children:\"The following were referenced throughout the above research:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/weak1337/Alcatraz\",rel:\"nofollow\",children:\"https://github.com/weak1337/Alcatraz\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://gitlab.com/eshard/d810\",rel:\"nofollow\",children:\"https://gitlab.com/eshard/d810\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://eshard.com/posts/d810-deobfuscation-ida-pro\",rel:\"nofollow\",children:\"https://eshard.com/posts/d810-deobfuscation-ida-pro\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"http://keowu.re/posts/Analyzing-Mutation-Coded-VM-Protect-and-Alcatraz-English/\",rel:\"nofollow\",children:\"http://keowu.re/posts/Analyzing-Mutation-Coded-VM-Protect-and-Alcatraz-English/\"})}),`\n`]})]})}function v(i={}){let{wrapper:e}=i.components||{};return e?(0,t.jsx)(e,Object.assign({},i,{children:(0,t.jsx)(h,i)})):h(i)}var L=v;return A(D);})();\n;return Component;"},"_id":"articles/deobfuscating-alcatraz.mdx","_raw":{"sourceFilePath":"articles/deobfuscating-alcatraz.mdx","sourceFileName":"deobfuscating-alcatraz.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/deobfuscating-alcatraz"},"type":"Article","imageUrl":"/assets/images/deobfuscating-alcatraz/alcatraz.png","readingTime":"15 min read","series":"","url":"/deobfuscating-alcatraz","headings":[{"level":2,"title":"Introduction","href":"#introduction"},{"level":3,"title":"Key takeaways","href":"#key-takeaways"},{"level":2,"title":"DOUBLELOADER","href":"#doubleloader"},{"level":2,"title":"ALCATRAZ","href":"#alcatraz"},{"level":3,"title":"ALCATRAZ Overview","href":"#alcatraz-overview"},{"level":2,"title":"Obfuscation techniques in ALCATRAZ","href":"#obfuscation-techniques-in-alcatraz"},{"level":3,"title":"Entrypoint obfuscation","href":"#entrypoint-obfuscation"},{"level":3,"title":"Anti-disassembly","href":"#anti-disassembly"},{"level":3,"title":"Instruction Mutation","href":"#instruction-mutation"},{"level":3,"title":"Constant Unfolding","href":"#constant-unfolding"},{"level":3,"title":"LEA Obfuscation","href":"#lea-obfuscation"},{"level":3,"title":"Control Flow Obfuscation","href":"#control-flow-obfuscation"},{"level":2,"title":"Cleaning a DOUBLELOADER function","href":"#cleaning-a-doubleloader-function"},{"level":2,"title":"IDA Python Scripts","href":"#ida-python-scripts"},{"level":2,"title":"YARA","href":"#yara"},{"level":2,"title":"Observations","href":"#observations"},{"level":2,"title":"References","href":"#references"}],"author":[{"title":"Daniel Stepanic","slug":"daniel-stepanic","description":"Elastic Security Labs Team Principal Security Researcher, Malware","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var _=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,c)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of x(e))!f.call(t,a)\u0026\u0026a!==n\u0026\u0026i(t,a,{get:()=\u003ee[a],enumerable:!(c=p(e,a))||c.enumerable});return t};var j=(t,e,n)=\u003e(n=t!=null?m(d(t)):{},s(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003es(i({},\"__esModule\",{value:!0}),t);var u=_((w,o)=\u003e{o.exports=_jsx_runtime});var b={};g(b,{default:()=\u003eS,frontmatter:()=\u003ey});var r=j(u()),y={title:\"Daniel Stepanic\",description:\"Elastic Security Labs Team Principal Security Researcher, Malware\",slug:\"daniel-stepanic\"};function l(t){return(0,r.jsx)(r.Fragment,{})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(l,t)})):l(t)}var S=D;return M(b);})();\n;return Component;"},"_id":"authors/daniel-stepanic.mdx","_raw":{"sourceFilePath":"authors/daniel-stepanic.mdx","sourceFileName":"daniel-stepanic.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/daniel-stepanic"},"type":"Author","imageUrl":"","url":"/authors/daniel-stepanic"}],"category":[{"title":"Malware analysis","slug":"malware-analysis","body":{"raw":"","code":"var Component=(()=\u003e{var u=Object.create;var s=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),M=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},i=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!g.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(o=x(n,r))||o.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?u(_(t)):{},i(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),p=t=\u003ei(s({},\"__esModule\",{value:!0}),t);var l=j((X,c)=\u003e{c.exports=_jsx_runtime});var D={};M(D,{default:()=\u003eC,frontmatter:()=\u003ew});var a=d(l()),w={title:\"Malware analysis\",slug:\"malware-analysis\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function y(t={}){let{wrapper:n}=t.components||{};return n?(0,a.jsx)(n,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=y;return p(D);})();\n;return Component;"},"_id":"categories/malware-analysis.mdx","_raw":{"sourceFilePath":"categories/malware-analysis.mdx","sourceFileName":"malware-analysis.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/malware-analysis"},"type":"Category","url":"/categories/malware-analysis"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"deobfuscating-alcatraz"},"buildId":"DWBt_Xau_SoqlVElVspNn","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>