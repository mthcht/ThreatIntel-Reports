<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Chasing Eddies: New Rust-based InfoStealer used in CAPTCHA campaigns — Elastic Security Labs</title><meta name="description" content="Elastic Security Labs walks through EDDIESTEALER, a lightweight commodity infostealer used in emerging CAPTCHA-based campaigns."/><meta property="og:title" content="Chasing Eddies: New Rust-based InfoStealer used in CAPTCHA campaigns — Elastic Security Labs"/><meta property="og:description" content="Elastic Security Labs walks through EDDIESTEALER, a lightweight commodity infostealer used in emerging CAPTCHA-based campaigns."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/eddiestealer/eddiestealer.png?55de6308a8ee2110b1399a01955e51eb"/><meta property="og:image:alt" content="Elastic Security Labs walks through EDDIESTEALER, a lightweight commodity infostealer used in emerging CAPTCHA-based campaigns."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/eddiestealer"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Chasing Eddies: New Rust-based InfoStealer used in CAPTCHA campaigns — Elastic Security Labs"/><meta name="twitter:description" content="Elastic Security Labs walks through EDDIESTEALER, a lightweight commodity infostealer used in emerging CAPTCHA-based campaigns."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/eddiestealer/eddiestealer.png?55de6308a8ee2110b1399a01955e51eb"/><meta name="twitter:image:alt" content="Elastic Security Labs walks through EDDIESTEALER, a lightweight commodity infostealer used in emerging CAPTCHA-based campaigns."/><link rel="canonical" href="https://www.elastic.co/security-labs/eddiestealer"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Feddiestealer%2Feddiestealer.png&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Feddiestealer%2Feddiestealer.png&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Feddiestealer%2Feddiestealer.png&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Feddiestealer%2Feddiestealer.png&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Feddiestealer%2Feddiestealer.png&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Feddiestealer%2Feddiestealer.png&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Feddiestealer%2Feddiestealer.png&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Feddiestealer%2Feddiestealer.png&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/0ea4f4df910e6120-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/739c2d8941231bb4-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/4537cf419cc8d2a9.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/4537cf419cc8d2a9.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-fd33164cf89540f1.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-80e976195c01c424.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-b0c191de1a3710e4.js" defer=""></script><script src="/security-labs/_next/static/6Uo_c3e7pOPG4qcACEsTq/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/6Uo_c3e7pOPG4qcACEsTq/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_ead7f7 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/eddiestealer"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/eddiestealer"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2025-05-30T00:00:00.000Z">30 May 2025</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/jia-yu-chan">Jia Yu Chan</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Chasing Eddies: New Rust-&nbsp;based InfoStealer used in CAPTCHA&nbsp;campaigns</span></h1><p class="text-zinc-200 text-base md:text-xl">Elastic Security Labs walks through EDDIESTEALER, a lightweight commodity infostealer used in emerging CAPTCHA-based campaigns.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>45 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/malware-analysis">Malware analysis</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Chasing Eddies: New Rust-based InfoStealer used in CAPTCHA campaigns" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Feddiestealer%2Feddiestealer.png&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Feddiestealer%2Feddiestealer.png&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Feddiestealer%2Feddiestealer.png&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Feddiestealer%2Feddiestealer.png&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Feddiestealer%2Feddiestealer.png&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Feddiestealer%2Feddiestealer.png&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Feddiestealer%2Feddiestealer.png&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Feddiestealer%2Feddiestealer.png&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Feddiestealer%2Feddiestealer.png&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="preamble" class="absolute -top-32"></span>Preamble</h2>
<p>Elastic Security Labs has uncovered a novel Rust-based infostealer distributed via Fake CAPTCHA campaigns. This malware is hosted on multiple adversary-controlled web properties. This campaign leverages deceptive CAPTCHA verification pages that trick users into executing a malicious PowerShell script, which ultimately deploys the infostealer, harvesting sensitive data such as credentials, browser information, and cryptocurrency wallet details. We are calling this malware EDDIESTEALER.</p>
<p>This adoption of Rust in malware development reflects a growing trend among threat actors seeking to leverage modern language features for enhanced stealth, stability, and resilience against traditional analysis workflows and threat detection engines. A seemingly simple infostealer written in Rust often requires more dedicated analysis efforts compared to its C/C++ counterpart, owing to factors such as zero-cost abstractions, Rust’s type system, compiler optimizations, and inherent difficulties in analyzing memory-safe binaries.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="key-takeaways" class="absolute -top-32"></span>Key takeaways</h2>
<ul>
<li>Fake CAPTCHA campaign loads EDDIESTEALER</li>
<li>EDDIESTEALER is a newly discovered Rust infostealer targeting Windows hosts</li>
<li>EDDIESTEALER receives a task list from the C2 server identifying data to target</li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="intial-access" class="absolute -top-32"></span>Intial access</h2>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="overview" class="absolute -top-32"></span>Overview</h3>
<p>Fake CAPTCHAs are malicious constructs that replicate the appearance and functionality of legitimate CAPTCHA systems, which are used to distinguish between human users and automated bots. Unlike their legitimate counterparts, fake CAPTCHAs serve as gateways for malware, leveraging social engineering to deceive users. They often appear as prompts like &quot;Verify you are a human&quot; or &quot;I&#x27;m not a robot,&quot; blending seamlessly into compromised websites or phishing campaigns. We have also encountered a similar campaign distributing <a href="https://www.elastic.co/security-labs/tricks-and-treats">GHOSTPULSE</a> in late 2024.</p>
<p>From our telemetry analysis leading up to the delivery of EDDIESTEALER, the initial vector was a compromised website deploying an obfuscated React-based JavaScript payload that displays a fake “I&#x27;m not a robot” verification screen.</p>
<p></p>
<p>Mimicking Google&#x27;s reCAPTCHA verification interface, the malware uses the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">document.execCommand(&quot;copy&quot;)</code> method to copy a PowerShell command into the user’s clipboard, next, it instructs the user to press Windows + R (to open the Windows run dialog box), then Ctrl + V to paste the clipboard contents, and finally Enter to execute the malicious PowerShell command.</p>
<p>This command silently downloads a second-stage payload (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">gverify.js</code>) from the attacker-controlled domain <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hxxps://llll.fit/version/</code> and saves it to the user’s <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Downloads</code> folder.</p>
<p></p>
<p>Finally, the malware executes <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">gverify.js</code> using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">cscript</code> in a hidden window.</p>
<p></p>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">gverify.js</code> is another obfuscated JavaScript payload that can be deobfuscated using open-source <a href="https://github.com/ben-sb/javascript-deobfuscator">tools</a>. Its functionality is fairly simple: fetching an executable (EDDIESTEALER) from <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hxxps://llll.fit/io</code> and saving the file under the user’s <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Downloads</code> folder with a pseudorandom 12-character file name.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="eddiestealer" class="absolute -top-32"></span>EDDIESTEALER</h2>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="overview-1" class="absolute -top-32"></span>Overview</h3>
<p>EDDIESTEALER is a novel Rust-based commodity infostealer. The majority of strings that give away its malicious intent are encrypted. The malware lacks robust anti-sandbox/VM protections against behavioral fingerprinting. However, newer variants suggest that the anti-sandbox/VM checks might be occurring on the server side. With relatively straightforward capabilities, it receives a task list from the C2 server as part of its configuration to target specific data and can self-delete after execution if specified.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="stripped-symbols" class="absolute -top-32"></span>Stripped Symbols</h3>
<p>EDDIESTEALER samples featured stripped function symbols, likely using Rust’s default compilation option, requiring symbol restoration before static analysis. We used <code><a href="https://github.com/N0fix/rustbinsign">rustbinsign</a></code>, which generates signatures for Rust standard libraries and crates based on specific Rust/compiler/dependency versions. While <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rustbinsign</code> only detected <code><a href="https://docs.rs/hashbrown/latest/hashbrown/">hashbrown</a></code> and <code><a href="https://docs.rs/rustc-demangle/latest/rustc_demangle/">rustc-demangle</a></code>, suggesting few external crates being used, it failed to identify crates such as <code><a href="https://docs.rs/tinyjson/latest/tinyjson/">tinyjson</a></code> and <code><a href="https://docs.rs/tokio-tungstenite/latest/tokio_tungstenite/">tungstenite</a></code> in newer variants. This occurred due to the lack of clear string artifacts. It is still possible to manually identify crates by finding unique strings and searching for the repository on GitHub, then download, compile and build signatures for them using the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">download_sign</code> mode. It is slightly cumbersome if we don’t know the exact version of the crate being used. However, restoring the standard library and runtime symbols is sufficient to advance the static analysis process.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="string-obfuscation" class="absolute -top-32"></span>String Obfuscation</h3>
<p>EDDIESTEALER encrypts most strings via a simple XOR cipher. Decryption involves two stages: first, the XOR key is derived by calling one of several key derivation functions; then, the decryption is performed inline within the function that uses the string.</p>
<p>The following example illustrates this, where <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sub_140020fd0</code> is the key derivation function, and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">data_14005ada8</code> is the address of the encrypted blob.</p>
<p></p>
<p>Each decryption routine utilizes its own distinct key derivation function. These functions consistently accept two arguments: an address within the binary and a 4-byte constant value. Some basic operations are then performed on these arguments to calculate the address where the XOR key resides.</p>
<p></p>
<p>Binary Ninja has a handy feature called <code><a href="https://docs.binary.ninja/dev/uidf.html">User-Informed Data Flow</a></code> (UIDF), which we can use to set the variables to known values to trigger a constant propagation analysis and simplify the expressions. Otherwise, a CPU emulator like <a href="https://www.unicorn-engine.org/">Unicorn</a> paired with a scriptable binary analysis tool can also be useful for batch analysis.</p>
<p></p>
<p></p>
<p>There is a general pattern for thread-safe, lazy initialization of shared resources, such as encrypted strings for module names, C2 domain and port, the sample’s unique identifier - that are decrypted only once but referenced many times during runtime. Each specific getter function checks a status flag for its resource; if uninitialized, it calls a shared, low-level synchronization function. This synchronization routine uses atomic operations and OS wait primitives (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WaitOnAddress</code>/<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WakeByAddressAll</code>) to ensure only one thread executes the actual initialization logic, which is invoked indirectly via a function pointer in the vtable of a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">dyn Trait</code> object.</p>
<p></p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="api-obfuscation" class="absolute -top-32"></span>API Obfuscation</h3>
<p>EDDIESTEALER utilizes a custom WinAPI lookup mechanism for most API calls. It begins by decrypting the names of the target module and function. Before attempting resolution, it checks a locally maintained hashtable to see if the function name and address have already been resolved. If not found, it dynamically loads the required module using a custom <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">LoadLibrary</code> wrapper, into the process’s address space, and invokes a <a href="https://github.com/cocomelonc/2023-04-16-malware-av-evasion-16/blob/ba05e209e079c2e339c67797b5a563a2e4dc0106/hack.cpp#L75">well-known implementation of GetProcAddress</a> to retrieve the address of the exported function. The API name and address are then inserted into the hashtable, optimizing future lookups.</p>
<p></p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="mutex-creation" class="absolute -top-32"></span>Mutex Creation</h3>
<p>EDDIESTEALER begins by creating a mutex to ensure that only one instance of the malware runs at any given time. The mutex name is a decrypted UUID string <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">431e2e0e-c87b-45ac-9fdb-26b7e24f0d39</code> (unique per sample), which is later referenced once more during its initial contact with the C2 server.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="sandbox-detection" class="absolute -top-32"></span>Sandbox Detection</h3>
<p>EDDIESTEALER performs a quick check to assess whether the total amount of physical memory is above ~4.0 GB as a weak sandbox detection mechanism. If the check fails, it deletes itself from disk.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="self-deletion" class="absolute -top-32"></span>Self-Deletion</h3>
<p>Based on a similar <a href="https://github.com/LloydLabs/delete-self-poc/tree/main">self-deletion technique</a> observed in <a href="https://www.elastic.co/security-labs/spring-cleaning-with-latrodectus">LATRODECTUS</a>, EDDIESTEALER is capable of deleting itself through NTFS Alternate Data Streams renaming, to bypass file locks.</p>
<p>The malware uses <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetModuleFileName</code> to obtain the full path of its executable and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateFileW</code> (wrapped in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">jy::ds::OpenHandle</code>) to open a handle to its executable file with the appropriate access rights. Then, a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">FILE_RENAME_INFO</code> structure with a new stream name is passed into <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SetFileInformationByHandle</code> to rename the default stream <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">$DATA</code> to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">:metadata</code>. The file handle is closed and reopened, this time using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SetFileInformationByHandle</code> on the handle with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">FILE_DISPOSITION_INFO.DeleteFile</code> flag set to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">TRUE</code> to enable a &quot;delete on close handle&quot; flag.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="additional-configuration-request" class="absolute -top-32"></span>Additional Configuration Request</h3>
<p>The initial configuration data is stored as encrypted strings within the binary. Once decrypted, this data is used to construct a request following the URI pattern: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">&lt;C2_ip_or_domain&gt;/&lt;resource_path&gt;/&lt;UUID&gt;</code>. The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">resource_path</code> is specified as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">api/handler</code>.  The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">UUID</code>, utilized earlier to create a mutex, is used as a unique identifier for build tracking.</p>
<p>EDDIESTEALER then communicates with its C2 server by sending an HTTP GET request with the constructed URI to retrieve a second-stage configuration containing a list of tasks for the malware to execute.</p>
<p></p>
<p></p>
<p>The second-stage configuration data is AES CBC encrypted and Base64 encoded. The Base64-encoded IV is prepended in the message before the colon (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">:</code>).</p>
<pre><code>Base64(IV):Base64(AESEncrypt(data))</code></pre>
<p></p>
<p>The AES key for decrypting the server-to-client message is stored unencrypted in UTF-8 encoding, in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.rdata</code> section. It is retrieved through a getter function.</p>
<p></p>
<p></p>
<p>The decrypted configuration for this sample contains the following in JSON format:</p>
<ul>
<li>Session ID</li>
<li>List of tasks (data to target)</li>
<li>AES key for client-to-server message encryption</li>
<li>Self-delete flag</li>
</ul>
<pre><code>{
    &quot;session&quot;: &quot;&lt;unique_session_id&gt;&quot;,
    &quot;tasks&quot;: [
        {
            &quot;id&quot;: &quot;&lt;unique_task_id&gt;&quot;,
            &quot;prepare&quot;: [],
            &quot;pattern&quot;: {
                &quot;path&quot;: &quot;&lt;file_system_path&gt;&quot;,
                &quot;recursive&quot;: &lt;true/false&gt;,
                &quot;filters&quot;: [
                    {
                        &quot;path_filter&quot;: &lt;null/string&gt;,
                        &quot;name&quot;: &quot;&lt;file_or_directory_name_pattern&gt;&quot;,
                        &quot;entry_type&quot;: &quot;&lt;FILE/DIR&gt;&quot;
                    },
                    ...
                ]
            },
            &quot;additional&quot;: [
                {
                    &quot;command&quot;: &quot;&lt;optional_command&gt;&quot;,
                    &quot;payload&quot;: {
                        &quot;&lt;command_specific_config&gt;&quot;: &lt;value&gt;
                    }
                },
                ...
            ]
        },
        ...
    ],
    &quot;network&quot;: {
        &quot;encryption_key&quot;: &quot;&lt;AES_encryption_key&gt;&quot;
    },
    &quot;self_delete&quot;: &lt;true/false&gt;
}</code></pre>
<p>For this particular sample and based on the tasks received from the server during our analysis, here are the list of filesystem-based exfiltration targets:</p>
<ul>
<li>Crypto wallets</li>
<li>Browsers</li>
<li>Password managers</li>
<li>FTP clients</li>
<li>Messaging applications</li>
</ul>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Crypto Wallet</th><th>Target Path Filter</th></tr></thead><tbody><tr><td>Armory</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\Armory\\*.wallet</code></td></tr><tr><td>Bitcoin</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\Bitcoin\\wallets\\*</code></td></tr><tr><td>WalletWasabi</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\WalletWasabi\\Client\\Wallets\\*</code></td></tr><tr><td>Daedalus Mainnet</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\Daedalus Mainnet\\wallets\\*</code></td></tr><tr><td>Coinomi</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%localappdata%\\Coinomi\\Coinomi\\wallets\\*</code></td></tr><tr><td>Electrum</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\Electrum\\wallets\\*</code></td></tr><tr><td>Exodus</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\Exodus\\exodus.wallet\\*</code></td></tr><tr><td>DashCore</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\DashCore\\wallets\\*</code></td></tr><tr><td>ElectronCash</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\ElectronCash\\wallets\\*</code></td></tr><tr><td>Electrum-DASH</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\Electrum-DASH\\wallets\\*</code></td></tr><tr><td>Guarda</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\Guarda\\IndexedDB</code></td></tr><tr><td>Atomic</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\atomic\\Local Storage</code></td></tr></tbody></table></div>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Browser</th><th>Target Path Filter</th></tr></thead><tbody><tr><td>Microsoft Edge</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%localappdata%\\Microsoft\\Edge\\User Data\\</code><br/><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">[Web Data,History,Bookmarks,Local Extension Settings\\...]</code></td></tr><tr><td>Brave</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%localappdata%\\BraveSoftware\\Brave-Browser\\User Data\\</code><br/><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">[Web Data,History,Bookmarks,Local Extension Settings\\...]</code></td></tr><tr><td>Google Chrome</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%localappdata%\\Google\\Chrome\\User Data\\</code><br/><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">[Web Data,History,Bookmarks,Local Extension Settings\\...]</code></td></tr><tr><td>Mozilla Firefox</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\Mozilla\\Firefox\\Profiles\\</code><br/><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">[key4.db,places.sqlite,logins.json,cookies.sqlite,formhistory.sqlite,webappsstore.sqlite,*+++*]</code></td></tr></tbody></table></div>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Password Manager</th><th>Target Path Filter</th></tr></thead><tbody><tr><td>Bitwarden</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\Bitwarden\\data.json</code></td></tr><tr><td>1Password</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%localappdata%\\1Password\\</code><br/><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">[1password.sqlite,1password_resources.sqlite]</code></td></tr><tr><td>KeePass</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%userprofile%\\Documents\\*.kdbx</code></td></tr></tbody></table></div>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>FTP Client</th><th>Target Path Filter</th></tr></thead><tbody><tr><td>FileZilla</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\FileZilla\\recentservers.xml</code></td></tr><tr><td>FTP Manager Lite</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%localappdata%\\DeskShare Data\\FTP Manager Lite\\2.0\\FTPManagerLiteSettings.db</code></td></tr><tr><td>FTPbox</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\FTPbox\\profiles.conf</code></td></tr><tr><td>FTP Commander Deluxe</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%ProgramFiles(x86)%\\FTP Commander Deluxe\\FTPLIST.TXT</code></td></tr><tr><td>Auto FTP Manager</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%localappdata%\\DeskShare Data\\Auto FTP Manager\\AutoFTPManagerSettings.db</code></td></tr><tr><td>3D-FTP</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%programdata%\\SiteDesigner\\3D-FTP\\sites.ini</code></td></tr><tr><td>FTPGetter</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\FTPGetter\\servers.xml</code></td></tr><tr><td>Total Commander</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\GHISLER\\wcx_ftp.ini</code></td></tr></tbody></table></div>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Messaging App</th><th>Target Path Filter</th></tr></thead><tbody><tr><td>Telegram Desktop</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%appdata%\\Telegram Desktop\\tdata\\*</code></td></tr></tbody></table></div>
<p>A list of targeted browser extensions can be found <a href="https://gist.github.com/jiayuchann/ba3cd9f4f430a9351fdff75869959853">here</a>.</p>
<p>These targets are subject to change as they are configurable by the C2 operator.</p>
<p>EDDIESTEALER then reads the targeted files using standard <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kernel32.dll</code> functions like <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateFileW</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetFileSizeEx</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ReadFile</code>, and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CloseHandle</code>.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="subsequent-c2-traffic" class="absolute -top-32"></span>Subsequent C2 Traffic</h3>
<p>After successfully retrieving the tasks, EDDIESTEALER performs system profiling to gather some information about the infected system:</p>
<ul>
<li>Location of the executable (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetModuleFileNameW</code>)</li>
<li>Locale ID (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetUserDefaultLangID</code>)</li>
<li>Username (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetUserNameW</code>)</li>
<li>Total amount of physical memory (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GlobalMemoryStatusEx</code>)</li>
<li>OS version (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">RtlGetVersion</code>)</li>
</ul>
<p>Following the same data format (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Base64(IV):Base64(AESEncrypt(data))</code>) for client-to-server messages, initial host information is AES-encrypted using the key retrieved from the additional configuration and sent via an HTTP POST request to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">&lt;C2_ip_or_domain&gt;/&lt;resource_path&gt;/info/&lt;session_id&gt;</code>. Subsequently, for each completed task, the collected data is also encrypted and transmitted in separate POST requests to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">&lt;C2_ip_or_domain&gt;/&lt;resource_path&gt;&lt;session_id&gt;/&lt;task_id&gt;</code>, right after each task is completed. This methodology generates a distinct C2 traffic pattern characterized by multiple, task-specific POST requests. This pattern is particularly easy to identify because this malware family primarily relies on HTTP instead of HTTPS for its C2 communication.</p>
<p></p>
<p>Our analysis uncovered encrypted strings that decrypt to panic metadata strings, disclosing internal Rust source file paths such as:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">apps\bin\src\services\chromium_hound.rs</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">apps\bin\src\services\system.rs</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">apps\bin\src\structs\search_pattern.rs</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">apps\bin\src\structs\search_entry.rs</code></li>
</ul>
<p>We discovered that error messages sent to the C2 server contain these strings, including the exact source file, line number, and column number where the error originated, allowing the malware developer to have built-in debugging feedback.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="chromium-specific-capabilities" class="absolute -top-32"></span>Chromium-specific Capabilities</h3>
<p>Since the <a href="https://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html">introduction</a> of Application-bound encryption, malware developers have adapted to alternative methods to bypass this protection and gain access to unencrypted sensitive data, such as cookies. <a href="https://github.com/Meckazin/ChromeKatz">ChromeKatz</a> is one of the more well-received open source solutions that we have seen malware implement. EDDIESTEALER is no exception—the malware developers reimplemented it in Rust.</p>
<p>Below is a snippet of the browser version checking logic similar to COOKIEKATZ, after retrieving version information from <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%localappdata%\&lt;browser_specific_path&gt;\\User Data\\Last Version</code>.</p>
<p></p>
<p>COOKIEKATZ <a href="https://github.com/Meckazin/ChromeKatz/blob/15cc8180663fe2cd6b0828f147b84f3449db7ba6/COOKIEKATZ/Main.cpp#L210">signature pattern</a> for detecting COOKIEMONSTER instances:</p>
<p></p>
<p>CredentialKatz <a href="https://github.com/Meckazin/ChromeKatz/blob/15cc8180663fe2cd6b0828f147b84f3449db7ba6/CredentialKatz/Main.cpp#L188">signature pattern</a> for detecting CookieMonster instances:</p>
<p></p>
<p>Here is an example of the exact copy-pasted logic of COOKIEKATZ’s <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">FindPattern</code>, where <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PatchBaseAddress</code> is inlined.</p>
<p></p>
<p>The developers introduced a modification to handle cases where the targeted Chromium browser is not running. If inactive, EDDIESTEALER spawns a new browser instance using the command-line arguments <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">--window-position=-3000,-3000 https://google.com</code>. This effectively positions the new window far off-screen, rendering it invisible to the user. The objective is to ensure the malware can still read the memory (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ReadProcessMemory</code>) of the necessary child process - the network service process identified by the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">--utility-sub-type=network.mojom.NetworkService</code> flag. For a more detailed explanation of this browser process interaction, refer to <a href="https://www.elastic.co/security-labs/katz-and-mouse-game">our previous research on MaaS infostealers</a>.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="differences-with-variants" class="absolute -top-32"></span>Differences with variants</h3>
<p>After analysis, more recent samples were identified with additional capabilities.</p>
<p>Information gathered on victim machines now include:</p>
<ul>
<li>Running processes</li>
<li>GPU information</li>
<li>Number of CPU cores</li>
<li>CPU name</li>
<li>CPU vendor</li>
</ul>
<p></p>
<p>The C2 communication pattern has been altered slightly. The malware now preemptively sends host system information to the server before requesting its decrypted configuration. In a few instances where the victim machine was able to reach out to the C2 server but received an empty task list, the adjustment suggests an evasion tactic: developers have likely introduced server-side checks to profile the client environment and withhold the main configuration if a sandbox or analysis system is detected.</p>
<p></p>
<p>The encryption key for client-to-server communication is no longer received dynamically from the C2 server; instead, it is now hardcoded in the binary. The key used by the client to decrypt server-to-client messages also remains hardcoded.</p>
<p></p>
<p>Newer compiled samples exhibit extensive use of function inline expansion, where many functions - both user-defined and from standard libraries and crates - have been inlined directly into their callers more often, resulting in larger functions and making it difficult to isolate user code. This behavior is likely the result of using LLVM’s inliner. While some functions remain un-inlined, the widespread inlining further complicates analysis.</p>
<p></p>
<p>In order to get all entries of Chrome’s Password Manager, EDDIESTEALER begins its credential theft routine by spawning a new Chrome process with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">--remote-debugging-port=&lt;port_num&gt;</code> flag, enabling Chrome’s DevTools Protocol over a local WebSocket interface. This allows the malware to interact with the browser in a headless fashion, without requiring any visible user interaction.</p>
<p></p>
<p>After launching Chrome, the malware queries <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">http://localhost:&lt;port&gt;/json/version</code> to retrieve the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">webSocketDebuggerUrl</code>, which provides the endpoint for interacting with the browser instance over WebSocket.</p>
<p></p>
<p>Using this connection, it issues a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Target.createTarget</code> command with the parameter <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">chrome://password-manager/passwords</code>, instructing Chrome to open its internal password manager in a new tab. Although this internal page does not expose its contents to the DOM or to DevTools directly, opening it causes Chrome to decrypt and load stored credentials into memory. This behavior is exploited by EDDIESTEALER in subsequent steps through CredentialKatz lookalike code, where it scans the Chrome process memory to extract plaintext credentials after they have been loaded by the browser.</p>
<p></p>
<p>Based on decrypted strings <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">os_crypt</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">encrypted_key</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CryptUnprotectData</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">local_state_pattern</code>, and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">login_data_pattern</code>, EDDIESTEALER variants appear to be backward compatible, supporting Chrome versions that still utilize DPAPI encryption.</p>
<p>We have identified 15 additional samples of EDDIESTEALER through code and infrastructure similarities on VirusTotal. The observations table will include the discovered samples, associated C2 IP addresses/domains, and a list of infrastructure hosting EDDIESTEALER.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="a-few-analysis-tips" class="absolute -top-32"></span>A Few Analysis Tips</h2>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="tracing" class="absolute -top-32"></span>Tracing</h3>
<p>To better understand the control flow and pinpoint the exact destinations of indirect jumps or calls in large code blocks, we can leverage binary tracing techniques. Tools like <code><a href="https://github.com/hasherezade/tiny_tracer">TinyTracer</a></code> can capture an API trace and generate a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.tag</code> file, which maps any selected API calls to be recorded to the executing line in assembly. Rust&#x27;s standard library functions call into WinAPIs under the hood, and this also captures any code that calls <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WinAPI</code> functions directly, bypassing the standard library&#x27;s abstraction. The tag file can then be imported into decompiler tools to automatically mark up the code blocks using plugins like <code><a href="https://github.com/leandrofroes/bn_ifl">IFL</a></code>.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="panic-metadata-for-code-segmentation" class="absolute -top-32"></span>Panic Metadata for Code Segmentation</h3>
<p><a href="https://cxiao.net/posts/2023-12-08-rust-reversing-panic-metadata/">Panic metadata</a> - the embedded source file paths (.rs files), line numbers, and column numbers associated with panic locations - offers valuable clues for segmenting and understanding different parts of the binary. This, however, is only the case if such metadata has not been stripped from the binary. Paths like <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">apps\bin\src\services\chromium.rs</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">apps\bin\src\structs\additional_task.rs</code> or any path that looks like part of a custom project typically points to the application’s unique logic. Paths beginning with <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">library&lt;core/alloc/std&gt;\src\</code> indicates code from the Rust standard library. Paths containing crate name and version such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hashbrown-0.15.2\src\raw\mod.rs</code> point to external libraries.</p>
<p>If the malware project has a somewhat organized codebase, the file paths in panic strings can directly map to logical modules. For instance, the decrypted string <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">apps\bin\src\utils\json.rs:48:39</code> is referenced in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sub_140011b4c</code>.</p>
<p></p>
<p>By examining the call tree for incoming calls to the function, many of them trace back to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sub_14002699d</code>. This function (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sub_14002699d</code>) is called within a known C2 communication routine (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">jy::C2::RetrieveAndDecryptConfig</code>), right after decrypting additional configuration data known to be JSON formatted.</p>
<p></p>
<p>Based on the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">json.rs</code> path and its calling context, an educated guess would be that <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sub_14002699d</code> is responsible for parsing JSON data. We can verify it by stepping over the function call. Sure enough, by inspecting the stack struct that is passed as reference to the function call, it now points to a heap address populated with parsed configuration fields.</p>
<p></p>
<p>For standard library and open-source third-party crates, the file path, line number, and (if available) the rustc commit hash or crate version allow you to look up the exact source code online.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="stack-slot-reuse" class="absolute -top-32"></span>Stack Slot Reuse</h3>
<p>One of the optimization features involves reusing stack slots for variables/stack structs that don’t have overlapping timelines. Variables that aren’t “live” at the same time can share the same stack memory location, reducing the overall stack frame size. Essentially, a variable is live from the moment it is assigned a value until the last point where that value could be accessed. This makes the decompiled output confusing as the same memory offset may hold different types or values at different points.</p>
<p>To handle this, we can define unions encompassing all possible types sharing the same memory offset within the function.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="rust-error-handling-and-enums" class="absolute -top-32"></span>Rust Error Handling and Enums</h3>
<p>Rust enums are tagged unions that define types with multiple variants, each optionally holding data, ideal for modeling states like success or failure. Variants are identified by a discriminant (tag).</p>
<p>Error-handling code can be seen throughout the binary, making up a significant portion of the decompiled code. Rust&#x27;s primary mechanism for error handling is the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Result&lt;T, E&gt;</code> generic enum. It has two variants: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Ok(T)</code>, indicating success and containing a value of type <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">T</code>, and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Err(E)</code>, indicating failure and containing an error value of type <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">E</code>.</p>
<p>In the example snippet below, a discriminant value of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x8000000000000000</code> is used to differentiate outcomes of resolving the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateFileW</code> API. If <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateFileW</code> is successfully resolved, the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">reuse</code> variable type contains the API function pointer, and the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">else</code> branch executes. Otherwise, the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">if</code> branch executes, assigning an error information string from <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">reuse</code> to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">arg1</code>.</p>
<p></p>
<p>For more information on how other common Rust types might look in memory, check out this <a href="https://cheats.rs/#memory-layout">cheatsheet</a> and this amazing <a href="https://www.youtube.com/watch?v=SGLX7g2a-gw&amp;t=749s">talk</a> by Cindy Xiao!</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="malware-and-mitre-attck" class="absolute -top-32"></span>Malware and MITRE ATT&amp;CK</h2>
<p>Elastic uses the<a href="https://attack.mitre.org/"> MITRE ATT&amp;CK</a> framework to document common tactics, techniques, and procedures that threats use against enterprise networks.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="tactics" class="absolute -top-32"></span>Tactics</h3>
<ul>
<li><a href="https://attack.mitre.org/tactics/TA0001">Initial Access</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0002">Execution</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0005">Defense Evasion</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0010">Exfiltration</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0006/">Credential Access</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0007/">Discovery</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0009">Collection</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="techniques" class="absolute -top-32"></span>Techniques</h3>
<p>Techniques represent how an adversary achieves a tactical goal by performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/techniques/T1566/">Phishing</a></li>
<li><a href="https://attack.mitre.org/techniques/T1659/">Content Injection</a></li>
<li><a href="https://attack.mitre.org/techniques/T1059/">Command and Scripting Interpreter</a></li>
<li><a href="https://attack.mitre.org/techniques/T1555/">Credentials from Password Stores</a></li>
<li><a href="https://attack.mitre.org/techniques/T1204/">User Execution</a></li>
<li><a href="https://attack.mitre.org/techniques/T1027/">Obfuscated Files or Information</a></li>
<li><a href="https://attack.mitre.org/techniques/T1041/">Exfiltration Over C2 Channel</a></li>
<li><a href="https://attack.mitre.org/techniques/T1497/">Virtualization/Sandbox Evasion</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="detections" class="absolute -top-32"></span>Detections</h2>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="yara" class="absolute -top-32"></span>YARA</h3>
<p>Elastic Security has created the following YARA rules related to this research:</p>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Infostealer_EddieStealer.yar">Windows.Infostealer.EddieStealer</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="behavioral-prevention-rules" class="absolute -top-32"></span>Behavioral prevention rules</h3>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/3e068e2ab4a045350c67ae26ff1439149ad68d1d/behavior/rules/windows/execution_suspicious_powershell_execution.toml">Suspicious PowerShell Execution</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/3e068e2ab4a045350c67ae26ff1439149ad68d1d/behavior/rules/windows/command_and_control_ingress_tool_transfer_via_powershell.toml">Ingress Tool Transfer via PowerShell</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/3e068e2ab4a045350c67ae26ff1439149ad68d1d/behavior/rules/windows/discovery_potential_browser_information_discovery.toml">Potential Browser Information Discovery</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/3e068e2ab4a045350c67ae26ff1439149ad68d1d/behavior/rules/windows/defense_evasion_potential_self_deletion_of_a_running_executable.toml">Potential Self Deletion of a Running Executable</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="observations" class="absolute -top-32"></span>Observations</h2>
<p>The following observables were discussed in this research.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Observable</th><th>Type</th><th>Name</th><th>Reference</th></tr></thead><tbody><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">47409e09afa05fcc9c9eff2c08baca3084d923c8d82159005dbae2029e1959d0</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">MvUlUwagHeZd.exe</code></td><td>EDDIESTEALER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">162a8521f6156070b9a97b488ee902ac0c395714aba970a688d54305cb3e163f</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">:metadata (copy)</code></td><td>EDDIESTEALER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">f8b4e2ca107c4a91e180a17a845e1d7daac388bd1bb4708c222cda0eff793e7a</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AegZs85U6COc.exe</code></td><td>EDDIESTEALER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">53f803179304e4fa957146507c9f936b38da21c2a3af4f9ea002a7f35f5bc23d</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">:metadata (copy)</code></td><td>EDDIESTEALER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">20eeae4222ff11e306fded294bebea7d3e5c5c2d8c5724792abf56997f30aaf9</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PETt3Wz4DXEL.exe</code></td><td>EDDIESTEALER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">1bdc2455f32d740502e001fce51dbf2494c00f4dcadd772ea551ed231c35b9a2</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Tk7n1al5m9Qc.exe</code></td><td>EDDIESTEALER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">d905ceb30816788de5ad6fa4fe108a202182dd579075c6c95b0fb26ed5520daa</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">YykbZ173Ysnd.exe</code></td><td>EDDIESTEALER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">b8b379ba5aff7e4ef2838517930bf20d83a1cfec5f7b284f9ee783518cb989a7</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">2025-04-03_20745dc4d048f67e0b62aca33be80283_akira_cobalt-strike_satacom</code></td><td>EDDIESTEALER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">f6536045ab63849c57859bbff9e6615180055c268b89c613dfed2db1f1a370f2</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">2025-03-23_6cc654225172ef70a189788746cbb445_akira_cobalt-strike</code></td><td>EDDIESTEALER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">d318a70d7f4158e3fe5f38f23a241787359c55d352cb4b26a4bd007fd44d5b80</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">2025-03-22_c8c3e658881593d798da07a1b80f250c_akira_cobalt-strike</code></td><td>EDDIESTEALER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">73b9259fecc2a4d0eeb0afef4f542642c26af46aa8f0ce2552241ee5507ec37f</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">2025-03-22_4776ff459c881a5b876da396f7324c64_akira_cobalt-strike</code></td><td>EDDIESTEALER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">2bef71355b37c4d9cd976e0c6450bfed5f62d8ab2cf096a4f3b77f6c0cb77a3b</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">TWO[1].file</code></td><td>EDDIESTEALER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">218ec38e8d749ae7a6d53e0d4d58e3acf459687c7a34f5697908aec6a2d7274d</code></td><td>SHA-256</td><td></td><td>EDDIESTEALER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">5330cf6a8f4f297b9726f37f47cffac38070560cbac37a8e561e00c19e995f42</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">verifcheck.exe</code></td><td>EDDIESTEALER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">acae8a4d92d24b7e7cb20c0c13fd07c8ab6ed8c5f9969504a905287df1af179b</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">3zeG4jGjFkOy.exe</code></td><td>EDDIESTEALER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0f5717b98e2b44964c4a5dfec4126fc35f5504f7f8dec386c0e0b0229e3482e7</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">verification.exe</code></td><td>EDDIESTEALER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">e8942805238f1ead8304cfdcf3d6076fa0cdf57533a5fae36380074a90d642e4</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">g_verify.js</code></td><td>EDDIESTEALER loader</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">7930d6469461af84d3c47c8e40b3d6d33f169283df42d2f58206f43d42d4c9f4</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">verif.js</code></td><td>EDDIESTEALER loader</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">45.144.53[.]145</code></td><td>ipv4-addr</td><td></td><td>EDDIESTEALER C2</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">84.200.154[.]47</code></td><td>ipv4-addr</td><td></td><td>EDDIESTEALER C2</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">shiglimugli[.]xyz</code></td><td>domain-name</td><td></td><td>EDDIESTEALER C2</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">xxxivi[.]com</code></td><td>domain-name</td><td></td><td>EDDIESTEALER C2 and intermediate infrastructure</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">llll[.]fit</code></td><td>domain-name</td><td></td><td>EDDIESTEALER intermediate infrastructure</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">plasetplastik[.]com</code></td><td>domain-name</td><td></td><td>EDDIESTEALER intermediate infrastructure</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">militrex[.]wiki</code></td><td>domain-name</td><td></td><td>EDDIESTEALER intermediate infrastructure</td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="references" class="absolute -top-32"></span>References</h2>
<p>The following were referenced throughout the above research:</p>
<ul>
<li><a href="https://github.com/N0fix/rustbinsign">https://github.com/N0fix/rustbinsign</a></li>
<li><a href="https://github.com/Meckazin/ChromeKatz">https://github.com/Meckazin/ChromeKatz</a></li>
<li><a href="https://github.com/hasherezade/tiny_tracer">https://github.com/hasherezade/tiny_tracer</a></li>
<li><a href="https://docs.binary.ninja/dev/uidf.html">https://docs.binary.ninja/dev/uidf.html</a></li>
<li><a href="https://www.unicorn-engine.org/">https://www.unicorn-engine.org/</a></li>
<li><a href="https://github.com/LloydLabs/delete-self-poc/tree/main">https://github.com/LloydLabs/delete-self-poc/tree/main</a></li>
<li><a href="https://cheats.rs/#memory-layout">https://cheats.rs/#memory-layout</a></li>
<li><a href="https://www.youtube.com/watch?v=SGLX7g2a-gw&amp;t=749s">https://www.youtube.com/watch?v=SGLX7g2a-gw&amp;t=749s</a></li>
<li><a href="https://cxiao.net/posts/2023-12-08-rust-reversing-panic-metadata/">https://cxiao.net/posts/2023-12-08-rust-reversing-panic-metadata/</a></li>
</ul></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/eddiestealer#preamble"><span>Preamble</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/eddiestealer#key-takeaways"><span>Key&nbsp;takeaways</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/eddiestealer#intial-access"><span>Intial&nbsp;access</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/eddiestealer#overview"><span>Overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/eddiestealer#eddiestealer"><span>EDDIESTEALER</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/eddiestealer#overview-1"><span>Overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/eddiestealer#stripped-symbols"><span>Stripped&nbsp;Symbols</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/eddiestealer#string-obfuscation"><span>String&nbsp;Obfuscation</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/eddiestealer#api-obfuscation"><span>API&nbsp;Obfuscation</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/eddiestealer#mutex-creation"><span>Mutex&nbsp;Creation</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/elastic-security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Chasing Eddies: New Rust-based InfoStealer used in CAPTCHA campaigns&amp;url=https://www.elastic.co/security-labs/eddiestealer" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/eddiestealer" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/eddiestealer&amp;title=Chasing Eddies: New Rust-based InfoStealer used in CAPTCHA campaigns" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/eddiestealer&amp;title=Chasing Eddies: New Rust-based InfoStealer used in CAPTCHA campaigns" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2025<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Chasing Eddies: New Rust-based InfoStealer used in CAPTCHA campaigns","slug":"eddiestealer","date":"2025-05-30","description":"Elastic Security Labs walks through EDDIESTEALER, a lightweight commodity infostealer used in emerging CAPTCHA-based campaigns.","image":"eddiestealer.png","tags":["EDDIESTEALER","infostealer"],"body":{"raw":"\n## Preamble\n\nElastic Security Labs has uncovered a novel Rust-based infostealer distributed via Fake CAPTCHA campaigns. This malware is hosted on multiple adversary-controlled web properties. This campaign leverages deceptive CAPTCHA verification pages that trick users into executing a malicious PowerShell script, which ultimately deploys the infostealer, harvesting sensitive data such as credentials, browser information, and cryptocurrency wallet details. We are calling this malware EDDIESTEALER.\n\nThis adoption of Rust in malware development reflects a growing trend among threat actors seeking to leverage modern language features for enhanced stealth, stability, and resilience against traditional analysis workflows and threat detection engines. A seemingly simple infostealer written in Rust often requires more dedicated analysis efforts compared to its C/C++ counterpart, owing to factors such as zero-cost abstractions, Rust’s type system, compiler optimizations, and inherent difficulties in analyzing memory-safe binaries.\n\n![EDDIESTEALER’s execution chain](/assets/images/eddiestealer/image9.png \"EDDIESTEALER’s execution chain\")\n\n## Key takeaways\n\n* Fake CAPTCHA campaign loads EDDIESTEALER\n* EDDIESTEALER is a newly discovered Rust infostealer targeting Windows hosts\n* EDDIESTEALER receives a task list from the C2 server identifying data to target\n\n## Intial access\n\n### Overview\n\nFake CAPTCHAs are malicious constructs that replicate the appearance and functionality of legitimate CAPTCHA systems, which are used to distinguish between human users and automated bots. Unlike their legitimate counterparts, fake CAPTCHAs serve as gateways for malware, leveraging social engineering to deceive users. They often appear as prompts like \"Verify you are a human\" or \"I'm not a robot,\" blending seamlessly into compromised websites or phishing campaigns. We have also encountered a similar campaign distributing [GHOSTPULSE](https://www.elastic.co/security-labs/tricks-and-treats) in late 2024.\n\nFrom our telemetry analysis leading up to the delivery of EDDIESTEALER, the initial vector was a compromised website deploying an obfuscated React-based JavaScript payload that displays a fake “I'm not a robot” verification screen. \n\n![Fake CAPTCHA GUI](/assets/images/eddiestealer/image36.png \"Fake CAPTCHA GUI\")\n\nMimicking Google's reCAPTCHA verification interface, the malware uses the `document.execCommand(\"copy\")` method to copy a PowerShell command into the user’s clipboard, next, it instructs the user to press Windows + R (to open the Windows run dialog box), then Ctrl + V to paste the clipboard contents, and finally Enter to execute the malicious PowerShell command.\n\nThis command silently downloads a second-stage payload (`gverify.js`) from the attacker-controlled domain `hxxps://llll.fit/version/` and saves it to the user’s `Downloads` folder.\n\n![Copy PowerShell command to clipboard](/assets/images/eddiestealer/image18.png \"Copy PowerShell command to clipboard\")\n\nFinally, the malware executes `gverify.js` using `cscript` in a hidden window.\n\n![PowerShell command to download and execute the second script](/assets/images/eddiestealer/image35.png \"PowerShell command to download and execute the second script\")\n\n`gverify.js` is another obfuscated JavaScript payload that can be deobfuscated using open-source [tools](https://github.com/ben-sb/javascript-deobfuscator). Its functionality is fairly simple: fetching an executable (EDDIESTEALER) from `hxxps://llll.fit/io` and saving the file under the user’s `Downloads` folder with a pseudorandom 12-character file name.\n\n![PowerShell script to download and execute EDDIESTEALER](/assets/images/eddiestealer/image2.png \"PowerShell script to download and execute EDDIESTEALER\")\n\n## EDDIESTEALER\n\n### Overview\n\nEDDIESTEALER is a novel Rust-based commodity infostealer. The majority of strings that give away its malicious intent are encrypted. The malware lacks robust anti-sandbox/VM protections against behavioral fingerprinting. However, newer variants suggest that the anti-sandbox/VM checks might be occurring on the server side. With relatively straightforward capabilities, it receives a task list from the C2 server as part of its configuration to target specific data and can self-delete after execution if specified.\n\n### Stripped Symbols\n\nEDDIESTEALER samples featured stripped function symbols, likely using Rust’s default compilation option, requiring symbol restoration before static analysis. We used \u003ccode\u003e[rustbinsign](https://github.com/N0fix/rustbinsign)\u003c/code\u003e, which generates signatures for Rust standard libraries and crates based on specific Rust/compiler/dependency versions. While `rustbinsign` only detected \u003ccode\u003e[hashbrown](https://docs.rs/hashbrown/latest/hashbrown/)\u003c/code\u003e and \u003ccode\u003e[rustc-demangle](https://docs.rs/rustc-demangle/latest/rustc_demangle/)\u003c/code\u003e, suggesting few external crates being used, it failed to identify crates such as \u003ccode\u003e[tinyjson](https://docs.rs/tinyjson/latest/tinyjson/)\u003c/code\u003e and \u003ccode\u003e[tungstenite](https://docs.rs/tokio-tungstenite/latest/tokio_tungstenite/)\u003c/code\u003e in newer variants. This occurred due to the lack of clear string artifacts. It is still possible to manually identify crates by finding unique strings and searching for the repository on GitHub, then download, compile and build signatures for them using the `download_sign` mode. It is slightly cumbersome if we don’t know the exact version of the crate being used. However, restoring the standard library and runtime symbols is sufficient to advance the static analysis process.\n\n![rustbinsign “info” output](/assets/images/eddiestealer/image40.png \"rustbinsign “info” output\")\n\n### String Obfuscation\n\nEDDIESTEALER encrypts most strings via a simple XOR cipher. Decryption involves two stages: first, the XOR key is derived by calling one of several key derivation functions; then, the decryption is performed inline within the function that uses the string.\n\nThe following example illustrates this, where `sub_140020fd0` is the key derivation function, and `data_14005ada8` is the address of the encrypted blob.\n\n![Example decryption operation](/assets/images/eddiestealer/image17.png \"Example decryption operation\")\n\nEach decryption routine utilizes its own distinct key derivation function. These functions consistently accept two arguments: an address within the binary and a 4-byte constant value. Some basic operations are then performed on these arguments to calculate the address where the XOR key resides.\n\n![Key derivation functions](/assets/images/eddiestealer/image39.png \"Key derivation functions\")\n\nBinary Ninja has a handy feature called \u003ccode\u003e[User-Informed Data Flow](https://docs.binary.ninja/dev/uidf.html)\u003c/code\u003e (UIDF), which we can use to set the variables to known values to trigger a constant propagation analysis and simplify the expressions. Otherwise, a CPU emulator like [Unicorn](https://www.unicorn-engine.org/) paired with a scriptable binary analysis tool can also be useful for batch analysis.\n\n![Binary Ninja’s UIDF applied](/assets/images/eddiestealer/image11.png \"Binary Ninja’s UIDF applied\")\n\n![Batch processing to decrypt all strings](/assets/images/eddiestealer/image42.png \"Batch processing to decrypt all strings\")\n\nThere is a general pattern for thread-safe, lazy initialization of shared resources, such as encrypted strings for module names, C2 domain and port, the sample’s unique identifier - that are decrypted only once but referenced many times during runtime. Each specific getter function checks a status flag for its resource; if uninitialized, it calls a shared, low-level synchronization function. This synchronization routine uses atomic operations and OS wait primitives (`WaitOnAddress`/`WakeByAddressAll`) to ensure only one thread executes the actual initialization logic, which is invoked indirectly via a function pointer in the vtable of a `dyn Trait` object.\n\n![Decryption routine abstracted through dyn Trait object and lazy init of shared resource](/assets/images/eddiestealer/image34.png \"Decryption routine abstracted through dyn Trait object and lazy init of shared resource\")\n\n![Example Trait object vtable](/assets/images/eddiestealer/image12.png \"Example Trait object vtable\")\n\n### API Obfuscation\n\nEDDIESTEALER utilizes a custom WinAPI lookup mechanism for most API calls. It begins by decrypting the names of the target module and function. Before attempting resolution, it checks a locally maintained hashtable to see if the function name and address have already been resolved. If not found, it dynamically loads the required module using a custom `LoadLibrary` wrapper, into the process’s address space, and invokes a [well-known implementation of GetProcAddress](https://github.com/cocomelonc/2023-04-16-malware-av-evasion-16/blob/ba05e209e079c2e339c67797b5a563a2e4dc0106/hack.cpp#L75) to retrieve the address of the exported function. The API name and address are then inserted into the hashtable, optimizing future lookups.\n\n![Core functions handling dynamic imports and API resolutions](/assets/images/eddiestealer/image31.png \"Core functions handling dynamic imports and API resolutions\")\n\n![Custom GetProcAddress implementation](/assets/images/eddiestealer/image23.png \"Custom GetProcAddress implementation\")\n\n### Mutex Creation\n\nEDDIESTEALER begins by creating a mutex to ensure that only one instance of the malware runs at any given time. The mutex name is a decrypted UUID string `431e2e0e-c87b-45ac-9fdb-26b7e24f0d39` (unique per sample), which is later referenced once more during its initial contact with the C2 server.\n\n![Retrieve the UUID and create a mutex with it](/assets/images/eddiestealer/image7.png \"Retrieve the UUID and create a mutex with it\")\n\n### Sandbox Detection\n\nEDDIESTEALER performs a quick check to assess whether the total amount of physical memory is above ~4.0 GB as a weak sandbox detection mechanism. If the check fails, it deletes itself from disk.\n\n![Memory check](/assets/images/eddiestealer/image27.png \"Memory check\")\n\n### Self-Deletion\n\nBased on a similar [self-deletion technique](https://github.com/LloydLabs/delete-self-poc/tree/main) observed in [LATRODECTUS](https://www.elastic.co/security-labs/spring-cleaning-with-latrodectus), EDDIESTEALER is capable of deleting itself through NTFS Alternate Data Streams renaming, to bypass file locks. \n\nThe malware uses `GetModuleFileName` to obtain the full path of its executable and `CreateFileW` (wrapped in `jy::ds::OpenHandle`) to open a handle to its executable file with the appropriate access rights. Then, a `FILE_RENAME_INFO` structure with a new stream name is passed into `SetFileInformationByHandle` to rename the default stream `$DATA` to `:metadata`. The file handle is closed and reopened, this time using `SetFileInformationByHandle` on the handle with the `FILE_DISPOSITION_INFO.DeleteFile` flag set to `TRUE` to enable a \"delete on close handle\" flag. \n\n![Self-deletion through ADS renaming](/assets/images/eddiestealer/image6.png \"Self-deletion through ADS renaming\")\n\n### Additional Configuration Request\n\nThe initial configuration data is stored as encrypted strings within the binary. Once decrypted, this data is used to construct a request following the URI pattern: `\u003cC2_ip_or_domain\u003e/\u003cresource_path\u003e/\u003cUUID\u003e`. The `resource_path` is specified as `api/handler`.  The `UUID`, utilized earlier to create a mutex, is used as a unique identifier for build tracking. \n\nEDDIESTEALER then communicates with its C2 server by sending an HTTP GET request with the constructed URI to retrieve a second-stage configuration containing a list of tasks for the malware to execute. \n\n![Decrypt strings required to build URI for C2 comms](/assets/images/eddiestealer/image16.png \"Decrypt strings required to build URI for C2 comms\")\n\n![HTTP request wrapper](/assets/images/eddiestealer/image21.png \"HTTP request wrapper\")\n\nThe second-stage configuration data is AES CBC encrypted and Base64 encoded. The Base64-encoded IV is prepended in the message before the colon (`:`).\n\n```\nBase64(IV):Base64(AESEncrypt(data))\n```\n\n![Encrypted data received from C2](/assets/images/eddiestealer/image3.png \"Encrypted data received from C2\")\n\nThe AES key for decrypting the server-to-client message is stored unencrypted in UTF-8 encoding, in the `.rdata` section. It is retrieved through a getter function. \n\n![Hardcoded AES key](/assets/images/eddiestealer/image41.png \"Hardcoded AES key\")\n\n![Core wrapper functions for config decryption](/assets/images/eddiestealer/image8.png \"Core wrapper functions for config decryption\")\n\nThe decrypted configuration for this sample contains the following in JSON format:\n\n* Session ID\n* List of tasks (data to target)\n* AES key for client-to-server message encryption\n* Self-delete flag\n\n```json\n{\n    \"session\": \"\u003cunique_session_id\u003e\",\n    \"tasks\": [\n        {\n            \"id\": \"\u003cunique_task_id\u003e\",\n            \"prepare\": [],\n            \"pattern\": {\n                \"path\": \"\u003cfile_system_path\u003e\",\n                \"recursive\": \u003ctrue/false\u003e,\n                \"filters\": [\n                    {\n                        \"path_filter\": \u003cnull/string\u003e,\n                        \"name\": \"\u003cfile_or_directory_name_pattern\u003e\",\n                        \"entry_type\": \"\u003cFILE/DIR\u003e\"\n                    },\n                    ...\n                ]\n            },\n            \"additional\": [\n                {\n                    \"command\": \"\u003coptional_command\u003e\",\n                    \"payload\": {\n                        \"\u003ccommand_specific_config\u003e\": \u003cvalue\u003e\n                    }\n                },\n                ...\n            ]\n        },\n        ...\n    ],\n    \"network\": {\n        \"encryption_key\": \"\u003cAES_encryption_key\u003e\"\n    },\n    \"self_delete\": \u003ctrue/false\u003e\n}\n```\n\nFor this particular sample and based on the tasks received from the server during our analysis, here are the list of filesystem-based exfiltration targets:\n\n* Crypto wallets\n* Browsers\n* Password managers\n* FTP clients\n* Messaging applications\n\n| Crypto Wallet    | Target Path Filter                           |\n|------------------|----------------------------------------------|\n| Armory           | `%appdata%\\\\Armory\\\\*.wallet`                  |\n| Bitcoin          | `%appdata%\\\\Bitcoin\\\\wallets\\\\*`               |\n| WalletWasabi     | `%appdata%\\\\WalletWasabi\\\\Client\\\\Wallets\\\\*`  |\n| Daedalus Mainnet | `%appdata%\\\\Daedalus Mainnet\\\\wallets\\\\*`      |\n| Coinomi          | `%localappdata%\\\\Coinomi\\\\Coinomi\\\\wallets\\\\*` |\n| Electrum         | `%appdata%\\\\Electrum\\\\wallets\\\\*`              |\n| Exodus           | `%appdata%\\\\Exodus\\\\exodus.wallet\\\\*`          |\n| DashCore         | `%appdata%\\\\DashCore\\\\wallets\\\\*`              |\n| ElectronCash     | `%appdata%\\\\ElectronCash\\\\wallets\\\\*`          |\n| Electrum-DASH    | `%appdata%\\\\Electrum-DASH\\\\wallets\\\\*`         |\n| Guarda           | `%appdata%\\\\Guarda\\\\IndexedDB`                 |\n| Atomic           | `%appdata%\\\\atomic\\\\Local Storage`           |\n\n| Browser         | Target Path Filter                                                                                                                         |\n|-----------------|--------------------------------------------------------------------------------------------------------------------------------------------|\n| Microsoft Edge  | `%localappdata%\\\\Microsoft\\\\Edge\\\\User Data\\\\`\u003cbr /\u003e`[Web Data,History,Bookmarks,Local Extension Settings\\\\...]`                               |\n| Brave           | `%localappdata%\\\\BraveSoftware\\\\Brave-Browser\\\\User Data\\\\`\u003cbr /\u003e`[Web Data,History,Bookmarks,Local Extension Settings\\\\...]`                  |\n| Google Chrome   | `%localappdata%\\\\Google\\\\Chrome\\\\User Data\\\\`\u003cbr /\u003e`[Web Data,History,Bookmarks,Local Extension Settings\\\\...]`                                |\n| Mozilla Firefox | `%appdata%\\\\Mozilla\\\\Firefox\\\\Profiles\\\\`\u003cbr /\u003e`[key4.db,places.sqlite,logins.json,cookies.sqlite,formhistory.sqlite,webappsstore.sqlite,*+++*]`|\n\n| Password Manager | Target Path Filter                                                           |\n|------------------|------------------------------------------------------------------------------|\n| Bitwarden        | `%appdata%\\\\Bitwarden\\\\data.json`                                              |\n| 1Password        | `%localappdata%\\\\1Password\\\\`\u003cbr /\u003e`[1password.sqlite,1password_resources.sqlite]` |\n| KeePass          | `%userprofile%\\\\Documents\\\\*.kdbx`                                             |\n\n| FTP Client           | Target Path Filter                                                               |\n|----------------------|----------------------------------------------------------------------------------|\n| FileZilla            | `%appdata%\\\\FileZilla\\\\recentservers.xml`                                          |\n| FTP Manager Lite     | `%localappdata%\\\\DeskShare Data\\\\FTP Manager Lite\\\\2.0\\\\FTPManagerLiteSettings.db` |\n| FTPbox               | `%appdata%\\\\FTPbox\\\\profiles.conf`                                                 |\n| FTP Commander Deluxe | `%ProgramFiles(x86)%\\\\FTP Commander Deluxe\\\\FTPLIST.TXT`                           |\n| Auto FTP Manager     | `%localappdata%\\\\DeskShare Data\\\\Auto FTP Manager\\\\AutoFTPManagerSettings.db`      |\n| 3D-FTP               | `%programdata%\\\\SiteDesigner\\\\3D-FTP\\\\sites.ini`                                   |\n| FTPGetter            | `%appdata%\\\\FTPGetter\\\\servers.xml`                                                |\n| Total Commander      | `%appdata%\\\\GHISLER\\\\wcx_ftp.ini`                                                  |\n\n| Messaging App    | Target Path Filter                    |\n|------------------|---------------------------------------|\n| Telegram Desktop | `%appdata%\\\\Telegram Desktop\\\\tdata\\\\*` |\n\nA list of targeted browser extensions can be found [here](https://gist.github.com/jiayuchann/ba3cd9f4f430a9351fdff75869959853).\n\nThese targets are subject to change as they are configurable by the C2 operator.\n\nEDDIESTEALER then reads the targeted files using standard `kernel32.dll` functions like `CreateFileW`, `GetFileSizeEx`, `ReadFile`, and `CloseHandle`.\n\n![APIs for reading files specified in the task list](/assets/images/eddiestealer/image26.png \"APIs for reading files specified in the task list\")\n\n### Subsequent C2 Traffic\n\nAfter successfully retrieving the tasks, EDDIESTEALER performs system profiling to gather some information about the infected system:\n\n* Location of the executable (`GetModuleFileNameW`)\n* Locale ID (`GetUserDefaultLangID`)\n* Username (`GetUserNameW`)\n* Total amount of physical memory (`GlobalMemoryStatusEx`)\n* OS version (`RtlGetVersion`)\n\nFollowing the same data format (`Base64(IV):Base64(AESEncrypt(data))`) for client-to-server messages, initial host information is AES-encrypted using the key retrieved from the additional configuration and sent via an HTTP POST request to `\u003cC2_ip_or_domain\u003e/\u003cresource_path\u003e/info/\u003csession_id\u003e`. Subsequently, for each completed task, the collected data is also encrypted and transmitted in separate POST requests to `\u003cC2_ip_or_domain\u003e/\u003cresource_path\u003e\u003csession_id\u003e/\u003ctask_id\u003e`, right after each task is completed. This methodology generates a distinct C2 traffic pattern characterized by multiple, task-specific POST requests. This pattern is particularly easy to identify because this malware family primarily relies on HTTP instead of HTTPS for its C2 communication.\n\n![C2 traffic log](/assets/images/eddiestealer/image20.png \"C2 traffic log\")\n\nOur analysis uncovered encrypted strings that decrypt to panic metadata strings, disclosing internal Rust source file paths such as: \n\n* `apps\\bin\\src\\services\\chromium_hound.rs`\n* `apps\\bin\\src\\services\\system.rs`\n* `apps\\bin\\src\\structs\\search_pattern.rs`\n* `apps\\bin\\src\\structs\\search_entry.rs` \n\nWe discovered that error messages sent to the C2 server contain these strings, including the exact source file, line number, and column number where the error originated, allowing the malware developer to have built-in debugging feedback.\n\n![Example error message](/assets/images/eddiestealer/image25.png \"Example error message\")\n\n### Chromium-specific Capabilities\n\nSince the [introduction](https://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html) of Application-bound encryption, malware developers have adapted to alternative methods to bypass this protection and gain access to unencrypted sensitive data, such as cookies. [ChromeKatz](https://github.com/Meckazin/ChromeKatz) is one of the more well-received open source solutions that we have seen malware implement. EDDIESTEALER is no exception—the malware developers reimplemented it in Rust. \n\nBelow is a snippet of the browser version checking logic similar to COOKIEKATZ, after retrieving version information from `%localappdata%\\\u003cbrowser_specific_path\u003e\\\\User Data\\\\Last Version`. \n\n![Browser version check](/assets/images/eddiestealer/image33.png \"Browser version check\")\n\nCOOKIEKATZ [signature pattern](https://github.com/Meckazin/ChromeKatz/blob/15cc8180663fe2cd6b0828f147b84f3449db7ba6/COOKIEKATZ/Main.cpp#L210) for detecting COOKIEMONSTER instances:\n\n![COOKIEKATZ signature pattern](/assets/images/eddiestealer/image24.png \"COOKIEKATZ signature pattern\")\n\nCredentialKatz [signature pattern](https://github.com/Meckazin/ChromeKatz/blob/15cc8180663fe2cd6b0828f147b84f3449db7ba6/CredentialKatz/Main.cpp#L188) for detecting CookieMonster instances:\n\n![CHROMEKATZ signature pattern](/assets/images/eddiestealer/image4.png \"CHROMEKATZ signature pattern\")\n\nHere is an example of the exact copy-pasted logic of COOKIEKATZ’s `FindPattern`, where `PatchBaseAddress` is inlined.\n\n![COOKIEKATZ FindPattern logic](/assets/images/eddiestealer/image28.png \"COOKIEKATZ FindPattern logic\")\n\nThe developers introduced a modification to handle cases where the targeted Chromium browser is not running. If inactive, EDDIESTEALER spawns a new browser instance using the command-line arguments `--window-position=-3000,-3000 https://google.com`. This effectively positions the new window far off-screen, rendering it invisible to the user. The objective is to ensure the malware can still read the memory (`ReadProcessMemory`) of the necessary child process - the network service process identified by the `--utility-sub-type=network.mojom.NetworkService` flag. For a more detailed explanation of this browser process interaction, refer to [our previous research on MaaS infostealers](https://www.elastic.co/security-labs/katz-and-mouse-game).\n\n### Differences with variants\n\nAfter analysis, more recent samples were identified with additional capabilities.\n\nInformation gathered on victim machines now include:\n\n* Running processes\n* GPU information\n* Number of CPU cores\n* CPU name\n* CPU vendor\n\n![Example system data collected](/assets/images/eddiestealer/image14.png \"Example system data collected\")\n\nThe C2 communication pattern has been altered slightly. The malware now preemptively sends host system information to the server before requesting its decrypted configuration. In a few instances where the victim machine was able to reach out to the C2 server but received an empty task list, the adjustment suggests an evasion tactic: developers have likely introduced server-side checks to profile the client environment and withhold the main configuration if a sandbox or analysis system is detected.\n\n![Possible sandbox/anti-analysis technique on C2 server-side](/assets/images/eddiestealer/image19.png \"Possible sandbox/anti-analysis technique on C2 server-side\")\n\nThe encryption key for client-to-server communication is no longer received dynamically from the C2 server; instead, it is now hardcoded in the binary. The key used by the client to decrypt server-to-client messages also remains hardcoded.\n\n![Example Hardcoded AES keys](/assets/images/eddiestealer/image29.png \"Example Hardcoded AES keys\")\n\nNewer compiled samples exhibit extensive use of function inline expansion, where many functions - both user-defined and from standard libraries and crates - have been inlined directly into their callers more often, resulting in larger functions and making it difficult to isolate user code. This behavior is likely the result of using LLVM’s inliner. While some functions remain un-inlined, the widespread inlining further complicates analysis.\n\n![Old vs new: control flow graph for the HTTP request function](/assets/images/eddiestealer/image1.png \"Old vs new: control flow graph for the HTTP request function\")\n\nIn order to get all entries of Chrome’s Password Manager, EDDIESTEALER begins its credential theft routine by spawning a new Chrome process with the `--remote-debugging-port=\u003cport_num\u003e` flag, enabling Chrome’s DevTools Protocol over a local WebSocket interface. This allows the malware to interact with the browser in a headless fashion, without requiring any visible user interaction. \n\n![Setting up Chrome process with remote debugging](/assets/images/eddiestealer/image22.png \"Setting up Chrome process with remote debugging\")\n\nAfter launching Chrome, the malware queries `http://localhost:\u003cport\u003e/json/version` to retrieve the `webSocketDebuggerUrl`, which provides the endpoint for interacting with the browser instance over WebSocket. \n\n![Sending request to retrieve webSocketDebuggerUrl](/assets/images/eddiestealer/image38.png \"Sending request to retrieve webSocketDebuggerUrl\")\n\nUsing this connection, it issues a `Target.createTarget` command with the parameter `chrome://password-manager/passwords`, instructing Chrome to open its internal password manager in a new tab. Although this internal page does not expose its contents to the DOM or to DevTools directly, opening it causes Chrome to decrypt and load stored credentials into memory. This behavior is exploited by EDDIESTEALER in subsequent steps through CredentialKatz lookalike code, where it scans the Chrome process memory to extract plaintext credentials after they have been loaded by the browser.\n\n![Decrypted strings referenced when accessing Chrome’s password manager](/assets/images/eddiestealer/image15.png \"Decrypted strings referenced when accessing Chrome’s password manager\")\n\nBased on decrypted strings `os_crypt`, `encrypted_key`, `CryptUnprotectData`, `local_state_pattern`, and `login_data_pattern`, EDDIESTEALER variants appear to be backward compatible, supporting Chrome versions that still utilize DPAPI encryption.\n\nWe have identified 15 additional samples of EDDIESTEALER through code and infrastructure similarities on VirusTotal. The observations table will include the discovered samples, associated C2 IP addresses/domains, and a list of infrastructure hosting EDDIESTEALER.\n\n## A Few Analysis Tips\n\n### Tracing\n\nTo better understand the control flow and pinpoint the exact destinations of indirect jumps or calls in large code blocks, we can leverage binary tracing techniques. Tools like \u003ccode\u003e[TinyTracer](https://github.com/hasherezade/tiny_tracer)\u003c/code\u003e can capture an API trace and generate a `.tag` file, which maps any selected API calls to be recorded to the executing line in assembly. Rust's standard library functions call into WinAPIs under the hood, and this also captures any code that calls `WinAPI` functions directly, bypassing the standard library's abstraction. The tag file can then be imported into decompiler tools to automatically mark up the code blocks using plugins like \u003ccode\u003e[IFL](https://github.com/leandrofroes/bn_ifl)\u003c/code\u003e.\n\n![Example comment markup after importing .tag file](/assets/images/eddiestealer/image5.png \"Example comment markup after importing .tag file\")\n\n### Panic Metadata for Code Segmentation\n\n[Panic metadata](https://cxiao.net/posts/2023-12-08-rust-reversing-panic-metadata/) - the embedded source file paths (.rs files), line numbers, and column numbers associated with panic locations - offers valuable clues for segmenting and understanding different parts of the binary. This, however, is only the case if such metadata has not been stripped from the binary. Paths like `apps\\bin\\src\\services\\chromium.rs`, `apps\\bin\\src\\structs\\additional_task.rs` or any path that looks like part of a custom project typically points to the application’s unique logic. Paths beginning with `library\u003ccore/alloc/std\u003e\\src\\` indicates code from the Rust standard library. Paths containing crate name and version such as `hashbrown-0.15.2\\src\\raw\\mod.rs` point to external libraries. \n\nIf the malware project has a somewhat organized codebase, the file paths in panic strings can directly map to logical modules. For instance, the decrypted string `apps\\bin\\src\\utils\\json.rs:48:39` is referenced in `sub_140011b4c`. \n\n![Panic string containing “json.rs” referenced in function sub_140011b4c](/assets/images/eddiestealer/image10.png \"Panic string containing “json.rs” referenced in function sub_140011b4c\")\n\nBy examining the call tree for incoming calls to the function, many of them trace back to `sub_14002699d`. This function (`sub_14002699d`) is called within a known C2 communication routine (`jy::C2::RetrieveAndDecryptConfig`), right after decrypting additional configuration data known to be JSON formatted. \n\n![Call tree of function sub_140011b4c](/assets/images/eddiestealer/image30.png \"Call tree of function sub_140011b4c\")\n\nBased on the `json.rs` path and its calling context, an educated guess would be that `sub_14002699d` is responsible for parsing JSON data. We can verify it by stepping over the function call. Sure enough, by inspecting the stack struct that is passed as reference to the function call, it now points to a heap address populated with parsed configuration fields.\n\n![Function sub_14002699d successfully parsing configuration fields](/assets/images/eddiestealer/image37.png \"Function sub_14002699d successfully parsing configuration fields\")\n\nFor standard library and open-source third-party crates, the file path, line number, and (if available) the rustc commit hash or crate version allow you to look up the exact source code online.\n\n### Stack Slot Reuse\n\nOne of the optimization features involves reusing stack slots for variables/stack structs that don’t have overlapping timelines. Variables that aren’t “live” at the same time can share the same stack memory location, reducing the overall stack frame size. Essentially, a variable is live from the moment it is assigned a value until the last point where that value could be accessed. This makes the decompiled output confusing as the same memory offset may hold different types or values at different points. \n\nTo handle this, we can define unions encompassing all possible types sharing the same memory offset within the function.\n\n![Stack slot reuse, resorting to UNION approach](/assets/images/eddiestealer/image32.png \"Stack slot reuse, resorting to UNION approach\")\n\n### Rust Error Handling and Enums\n\nRust enums are tagged unions that define types with multiple variants, each optionally holding data, ideal for modeling states like success or failure. Variants are identified by a discriminant (tag). \n\nError-handling code can be seen throughout the binary, making up a significant portion of the decompiled code. Rust's primary mechanism for error handling is the `Result\u003cT, E\u003e` generic enum. It has two variants: `Ok(T)`, indicating success and containing a value of type `T`, and `Err(E)`, indicating failure and containing an error value of type `E`. \n\nIn the example snippet below, a discriminant value of `0x8000000000000000` is used to differentiate outcomes of resolving the `CreateFileW` API. If `CreateFileW` is successfully resolved, the `reuse` variable type contains the API function pointer, and the `else` branch executes. Otherwise, the `if` branch executes, assigning an error information string from `reuse` to `arg1`.\n\n![Error handling example](/assets/images/eddiestealer/image13.png \"Error handling example\")\n\nFor more information on how other common Rust types might look in memory, check out this [cheatsheet](https://cheats.rs/#memory-layout) and this amazing [talk](https://www.youtube.com/watch?v=SGLX7g2a-gw\u0026t=749s) by Cindy Xiao!\n\n## Malware and MITRE ATT\u0026CK\n\nElastic uses the[ MITRE ATT\u0026CK](https://attack.mitre.org/) framework to document common tactics, techniques, and procedures that threats use against enterprise networks.\n\n### Tactics\n\n* [Initial Access](https://attack.mitre.org/tactics/TA0001)\n* [Execution](https://attack.mitre.org/tactics/TA0002)\n* [Defense Evasion](https://attack.mitre.org/tactics/TA0005)\n* [Exfiltration](https://attack.mitre.org/tactics/TA0010)\n* [Credential Access](https://attack.mitre.org/tactics/TA0006/)\n* [Discovery](https://attack.mitre.org/tactics/TA0007/)\n* [Collection](https://attack.mitre.org/tactics/TA0009)\n\n### Techniques\n\nTechniques represent how an adversary achieves a tactical goal by performing an action.\n\n* [Phishing](https://attack.mitre.org/techniques/T1566/)\n* [Content Injection](https://attack.mitre.org/techniques/T1659/)\n* [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059/)\n* [Credentials from Password Stores](https://attack.mitre.org/techniques/T1555/)\n* [User Execution](https://attack.mitre.org/techniques/T1204/)\n* [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027/)\n* [Exfiltration Over C2 Channel](https://attack.mitre.org/techniques/T1041/)\n* [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497/)\n\n## Detections\n\n### YARA\n\nElastic Security has created the following YARA rules related to this research:\n\n* [Windows.Infostealer.EddieStealer](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Infostealer_EddieStealer.yar)\n\n### Behavioral prevention rules\n\n* [Suspicious PowerShell Execution](https://github.com/elastic/protections-artifacts/blob/3e068e2ab4a045350c67ae26ff1439149ad68d1d/behavior/rules/windows/execution_suspicious_powershell_execution.toml)\n* [Ingress Tool Transfer via PowerShell](https://github.com/elastic/protections-artifacts/blob/3e068e2ab4a045350c67ae26ff1439149ad68d1d/behavior/rules/windows/command_and_control_ingress_tool_transfer_via_powershell.toml)\n* [Potential Browser Information Discovery](https://github.com/elastic/protections-artifacts/blob/3e068e2ab4a045350c67ae26ff1439149ad68d1d/behavior/rules/windows/discovery_potential_browser_information_discovery.toml)\n* [Potential Self Deletion of a Running Executable](https://github.com/elastic/protections-artifacts/blob/3e068e2ab4a045350c67ae26ff1439149ad68d1d/behavior/rules/windows/defense_evasion_potential_self_deletion_of_a_running_executable.toml)\n\n## Observations\n\nThe following observables were discussed in this research.\n\n| Observable                                                       | Type         | Name                                                                                           | Reference                                                    |\n|------------------------------------------------------------------|--------------|------------------------------------------------------------------------------------------------|--------------------------------------------------------------|\n| `47409e09afa05fcc9c9eff2c08baca3084d923c8d82159005dbae2029e1959d0` | SHA-256      | `MvUlUwagHeZd.exe`                                                                               | EDDIESTEALER                                                 |\n| `162a8521f6156070b9a97b488ee902ac0c395714aba970a688d54305cb3e163f` | SHA-256      | `:metadata (copy)`                                                                               | EDDIESTEALER                                     |\n| `f8b4e2ca107c4a91e180a17a845e1d7daac388bd1bb4708c222cda0eff793e7a` | SHA-256      | `AegZs85U6COc.exe`                                                                               | EDDIESTEALER                                     |\n| `53f803179304e4fa957146507c9f936b38da21c2a3af4f9ea002a7f35f5bc23d` | SHA-256      | `:metadata (copy)`                                                                               | EDDIESTEALER                                     |\n| `20eeae4222ff11e306fded294bebea7d3e5c5c2d8c5724792abf56997f30aaf9` | SHA-256      | `PETt3Wz4DXEL.exe`                                                                               | EDDIESTEALER                                     |\n| `1bdc2455f32d740502e001fce51dbf2494c00f4dcadd772ea551ed231c35b9a2` | SHA-256      | `Tk7n1al5m9Qc.exe`                                                                               | EDDIESTEALER                                     |\n| `d905ceb30816788de5ad6fa4fe108a202182dd579075c6c95b0fb26ed5520daa` | SHA-256      | `YykbZ173Ysnd.exe`                                                                               | EDDIESTEALER                                     |\n| `b8b379ba5aff7e4ef2838517930bf20d83a1cfec5f7b284f9ee783518cb989a7` | SHA-256      | `2025-04-03_20745dc4d048f67e0b62aca33be80283_akira_cobalt-strike_satacom` | EDDIESTEALER                                     |\n| `f6536045ab63849c57859bbff9e6615180055c268b89c613dfed2db1f1a370f2` | SHA-256      | `2025-03-23_6cc654225172ef70a189788746cbb445_akira_cobalt-strike`         | EDDIESTEALER                                     |\n| `d318a70d7f4158e3fe5f38f23a241787359c55d352cb4b26a4bd007fd44d5b80` | SHA-256      | `2025-03-22_c8c3e658881593d798da07a1b80f250c_akira_cobalt-strike`         | EDDIESTEALER                                     |\n| `73b9259fecc2a4d0eeb0afef4f542642c26af46aa8f0ce2552241ee5507ec37f` | SHA-256      | `2025-03-22_4776ff459c881a5b876da396f7324c64_akira_cobalt-strike`         | EDDIESTEALER                                     |\n| `2bef71355b37c4d9cd976e0c6450bfed5f62d8ab2cf096a4f3b77f6c0cb77a3b` | SHA-256      | `TWO[1].file`                | EDDIESTEALER                                     |\n| `218ec38e8d749ae7a6d53e0d4d58e3acf459687c7a34f5697908aec6a2d7274d` | SHA-256      |                                                                                                | EDDIESTEALER                                     |\n| `5330cf6a8f4f297b9726f37f47cffac38070560cbac37a8e561e00c19e995f42` | SHA-256      | `verifcheck.exe`                                                                                 | EDDIESTEALER                                     |\n| `acae8a4d92d24b7e7cb20c0c13fd07c8ab6ed8c5f9969504a905287df1af179b` | SHA-256      | `3zeG4jGjFkOy.exe`                                                                               | EDDIESTEALER                                     |\n| `0f5717b98e2b44964c4a5dfec4126fc35f5504f7f8dec386c0e0b0229e3482e7` | SHA-256      | `verification.exe`                                                                               | EDDIESTEALER                                     |\n| `e8942805238f1ead8304cfdcf3d6076fa0cdf57533a5fae36380074a90d642e4` | SHA-256      | `g_verify.js`                                                                                    | EDDIESTEALER loader                              |\n| `7930d6469461af84d3c47c8e40b3d6d33f169283df42d2f58206f43d42d4c9f4` | SHA-256      | `verif.js`                                                                                       | EDDIESTEALER loader                              |\n| `45.144.53[.]145`                                                  | ipv4-addr |                                                                                                | EDDIESTEALER C2                                              |\n| `84.200.154[.]47`                                                  | ipv4-addr |                                                                                                | EDDIESTEALER C2                                  |\n| `shiglimugli[.]xyz`                                                | domain-name  |                                                                                                | EDDIESTEALER C2                                  |\n| `xxxivi[.]com`                                                     | domain-name  |                                                                                                | EDDIESTEALER C2 and intermediate infrastructure  |\n| `llll[.]fit`                                                       | domain-name  |                                                                                                | EDDIESTEALER intermediate infrastructure                     |\n| `plasetplastik[.]com`                                              | domain-name  |                                                                                                | EDDIESTEALER intermediate infrastructure         |\n| `militrex[.]wiki`                                                  | domain-name  |                                                                                                | EDDIESTEALER intermediate infrastructure         |\n\n## References\n\nThe following were referenced throughout the above research:\n\n* [https://github.com/N0fix/rustbinsign](https://github.com/N0fix/rustbinsign) \n* [https://github.com/Meckazin/ChromeKatz](https://github.com/Meckazin/ChromeKatz) \n* [https://github.com/hasherezade/tiny_tracer](https://github.com/hasherezade/tiny_tracer) \n* [https://docs.binary.ninja/dev/uidf.html](https://docs.binary.ninja/dev/uidf.html)\n* [https://www.unicorn-engine.org/](https://www.unicorn-engine.org/)\n* [https://github.com/LloydLabs/delete-self-poc/tree/main](https://github.com/LloydLabs/delete-self-poc/tree/main) \n* [https://cheats.rs/#memory-layout](https://cheats.rs/#memory-layout) \n* [https://www.youtube.com/watch?v=SGLX7g2a-gw\u0026t=749s](https://www.youtube.com/watch?v=SGLX7g2a-gw\u0026t=749s) \n* [https://cxiao.net/posts/2023-12-08-rust-reversing-panic-metadata/](https://cxiao.net/posts/2023-12-08-rust-reversing-panic-metadata/) \n","code":"var Component=(()=\u003e{var h=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var u=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=\u003e{for(var n in e)a(t,n,{get:e[n],enumerable:!0})},c=(t,e,n,d)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!f.call(t,r)\u0026\u0026r!==n\u0026\u0026a(t,r,{get:()=\u003ee[r],enumerable:!(d=p(e,r))||d.enumerable});return t};var w=(t,e,n)=\u003e(n=t!=null?h(g(t)):{},c(e||!t||!t.__esModule?a(n,\"default\",{value:t,enumerable:!0}):n,t)),y=t=\u003ec(a({},\"__esModule\",{value:!0}),t);var s=u((A,l)=\u003e{l.exports=_jsx_runtime});var k={};b(k,{default:()=\u003eT,frontmatter:()=\u003eE});var i=w(s()),E={title:\"Chasing Eddies: New Rust-based InfoStealer used in CAPTCHA campaigns\",slug:\"eddiestealer\",date:\"2025-05-30\",description:\"Elastic Security Labs walks through EDDIESTEALER, a lightweight commodity infostealer used in emerging CAPTCHA-based campaigns.\",author:[{slug:\"jia-yu-chan\"}],image:\"eddiestealer.png\",category:[{slug:\"malware-analysis\"}],tags:[\"EDDIESTEALER\",\"infostealer\"]};function o(t){let e=Object.assign({h2:\"h2\",p:\"p\",img:\"img\",ul:\"ul\",li:\"li\",h3:\"h3\",a:\"a\",code:\"code\",pre:\"pre\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:\"preamble\",children:\"Preamble\"}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic Security Labs has uncovered a novel Rust-based infostealer distributed via Fake CAPTCHA campaigns. This malware is hosted on multiple adversary-controlled web properties. This campaign leverages deceptive CAPTCHA verification pages that trick users into executing a malicious PowerShell script, which ultimately deploys the infostealer, harvesting sensitive data such as credentials, browser information, and cryptocurrency wallet details. We are calling this malware EDDIESTEALER.\"}),`\n`,(0,i.jsx)(e.p,{children:\"This adoption of Rust in malware development reflects a growing trend among threat actors seeking to leverage modern language features for enhanced stealth, stability, and resilience against traditional analysis workflows and threat detection engines. A seemingly simple infostealer written in Rust often requires more dedicated analysis efforts compared to its C/C++ counterpart, owing to factors such as zero-cost abstractions, Rust\\u2019s type system, compiler optimizations, and inherent difficulties in analyzing memory-safe binaries.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image9.png\",alt:\"EDDIESTEALER\\u2019s execution chain\",title:\"EDDIESTEALER\\u2019s execution chain\",width:\"1475\",height:\"1103\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"key-takeaways\",children:\"Key takeaways\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Fake CAPTCHA campaign loads EDDIESTEALER\"}),`\n`,(0,i.jsx)(e.li,{children:\"EDDIESTEALER is a newly discovered Rust infostealer targeting Windows hosts\"}),`\n`,(0,i.jsx)(e.li,{children:\"EDDIESTEALER receives a task list from the C2 server identifying data to target\"}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"intial-access\",children:\"Intial access\"}),`\n`,(0,i.jsx)(e.h3,{id:\"overview\",children:\"Overview\"}),`\n`,(0,i.jsxs)(e.p,{children:[`Fake CAPTCHAs are malicious constructs that replicate the appearance and functionality of legitimate CAPTCHA systems, which are used to distinguish between human users and automated bots. Unlike their legitimate counterparts, fake CAPTCHAs serve as gateways for malware, leveraging social engineering to deceive users. They often appear as prompts like \"Verify you are a human\" or \"I'm not a robot,\" blending seamlessly into compromised websites or phishing campaigns. We have also encountered a similar campaign distributing `,(0,i.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/tricks-and-treats\",rel:\"nofollow\",children:\"GHOSTPULSE\"}),\" in late 2024.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"From our telemetry analysis leading up to the delivery of EDDIESTEALER, the initial vector was a compromised website deploying an obfuscated React-based JavaScript payload that displays a fake \\u201CI'm not a robot\\u201D verification screen.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image36.png\",alt:\"Fake CAPTCHA GUI\",title:\"Fake CAPTCHA GUI\",width:\"515\",height:\"427\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Mimicking Google's reCAPTCHA verification interface, the malware uses the \",(0,i.jsx)(e.code,{children:'document.execCommand(\"copy\")'}),\" method to copy a PowerShell command into the user\\u2019s clipboard, next, it instructs the user to press Windows + R (to open the Windows run dialog box), then Ctrl + V to paste the clipboard contents, and finally Enter to execute the malicious PowerShell command.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"This command silently downloads a second-stage payload (\",(0,i.jsx)(e.code,{children:\"gverify.js\"}),\") from the attacker-controlled domain \",(0,i.jsx)(e.code,{children:\"hxxps://llll.fit/version/\"}),\" and saves it to the user\\u2019s \",(0,i.jsx)(e.code,{children:\"Downloads\"}),\" folder.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image18.png\",alt:\"Copy PowerShell command to clipboard\",title:\"Copy PowerShell command to clipboard\",width:\"1305\",height:\"340\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Finally, the malware executes \",(0,i.jsx)(e.code,{children:\"gverify.js\"}),\" using \",(0,i.jsx)(e.code,{children:\"cscript\"}),\" in a hidden window.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image35.png\",alt:\"PowerShell command to download and execute the second script\",title:\"PowerShell command to download and execute the second script\",width:\"1875\",height:\"221\"})}),`\n`,(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:\"gverify.js\"}),\" is another obfuscated JavaScript payload that can be deobfuscated using open-source \",(0,i.jsx)(e.a,{href:\"https://github.com/ben-sb/javascript-deobfuscator\",rel:\"nofollow\",children:\"tools\"}),\". Its functionality is fairly simple: fetching an executable (EDDIESTEALER) from \",(0,i.jsx)(e.code,{children:\"hxxps://llll.fit/io\"}),\" and saving the file under the user\\u2019s \",(0,i.jsx)(e.code,{children:\"Downloads\"}),\" folder with a pseudorandom 12-character file name.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image2.png\",alt:\"PowerShell script to download and execute EDDIESTEALER\",title:\"PowerShell script to download and execute EDDIESTEALER\",width:\"1999\",height:\"425\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"eddiestealer\",children:\"EDDIESTEALER\"}),`\n`,(0,i.jsx)(e.h3,{id:\"overview-1\",children:\"Overview\"}),`\n`,(0,i.jsx)(e.p,{children:\"EDDIESTEALER is a novel Rust-based commodity infostealer. The majority of strings that give away its malicious intent are encrypted. The malware lacks robust anti-sandbox/VM protections against behavioral fingerprinting. However, newer variants suggest that the anti-sandbox/VM checks might be occurring on the server side. With relatively straightforward capabilities, it receives a task list from the C2 server as part of its configuration to target specific data and can self-delete after execution if specified.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"stripped-symbols\",children:\"Stripped Symbols\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"EDDIESTEALER samples featured stripped function symbols, likely using Rust\\u2019s default compilation option, requiring symbol restoration before static analysis. We used \",(0,i.jsx)(\"code\",{children:(0,i.jsx)(e.a,{href:\"https://github.com/N0fix/rustbinsign\",rel:\"nofollow\",children:\"rustbinsign\"})}),\", which generates signatures for Rust standard libraries and crates based on specific Rust/compiler/dependency versions. While \",(0,i.jsx)(e.code,{children:\"rustbinsign\"}),\" only detected \",(0,i.jsx)(\"code\",{children:(0,i.jsx)(e.a,{href:\"https://docs.rs/hashbrown/latest/hashbrown/\",rel:\"nofollow\",children:\"hashbrown\"})}),\" and \",(0,i.jsx)(\"code\",{children:(0,i.jsx)(e.a,{href:\"https://docs.rs/rustc-demangle/latest/rustc_demangle/\",rel:\"nofollow\",children:\"rustc-demangle\"})}),\", suggesting few external crates being used, it failed to identify crates such as \",(0,i.jsx)(\"code\",{children:(0,i.jsx)(e.a,{href:\"https://docs.rs/tinyjson/latest/tinyjson/\",rel:\"nofollow\",children:\"tinyjson\"})}),\" and \",(0,i.jsx)(\"code\",{children:(0,i.jsx)(e.a,{href:\"https://docs.rs/tokio-tungstenite/latest/tokio_tungstenite/\",rel:\"nofollow\",children:\"tungstenite\"})}),\" in newer variants. This occurred due to the lack of clear string artifacts. It is still possible to manually identify crates by finding unique strings and searching for the repository on GitHub, then download, compile and build signatures for them using the \",(0,i.jsx)(e.code,{children:\"download_sign\"}),\" mode. It is slightly cumbersome if we don\\u2019t know the exact version of the crate being used. However, restoring the standard library and runtime symbols is sufficient to advance the static analysis process.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image40.png\",alt:\"rustbinsign \\u201Cinfo\\u201D output\",title:\"rustbinsign \\u201Cinfo\\u201D output\",width:\"1519\",height:\"351\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"string-obfuscation\",children:\"String Obfuscation\"}),`\n`,(0,i.jsx)(e.p,{children:\"EDDIESTEALER encrypts most strings via a simple XOR cipher. Decryption involves two stages: first, the XOR key is derived by calling one of several key derivation functions; then, the decryption is performed inline within the function that uses the string.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The following example illustrates this, where \",(0,i.jsx)(e.code,{children:\"sub_140020fd0\"}),\" is the key derivation function, and \",(0,i.jsx)(e.code,{children:\"data_14005ada8\"}),\" is the address of the encrypted blob.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image17.png\",alt:\"Example decryption operation\",title:\"Example decryption operation\",width:\"959\",height:\"332\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Each decryption routine utilizes its own distinct key derivation function. These functions consistently accept two arguments: an address within the binary and a 4-byte constant value. Some basic operations are then performed on these arguments to calculate the address where the XOR key resides.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image39.png\",alt:\"Key derivation functions\",title:\"Key derivation functions\",width:\"1562\",height:\"963\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Binary Ninja has a handy feature called \",(0,i.jsx)(\"code\",{children:(0,i.jsx)(e.a,{href:\"https://docs.binary.ninja/dev/uidf.html\",rel:\"nofollow\",children:\"User-Informed Data Flow\"})}),\" (UIDF), which we can use to set the variables to known values to trigger a constant propagation analysis and simplify the expressions. Otherwise, a CPU emulator like \",(0,i.jsx)(e.a,{href:\"https://www.unicorn-engine.org/\",rel:\"nofollow\",children:\"Unicorn\"}),\" paired with a scriptable binary analysis tool can also be useful for batch analysis.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image11.png\",alt:\"Binary Ninja\\u2019s UIDF applied\",title:\"Binary Ninja\\u2019s UIDF applied\",width:\"738\",height:\"168\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image42.png\",alt:\"Batch processing to decrypt all strings\",title:\"Batch processing to decrypt all strings\",width:\"1321\",height:\"816\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"There is a general pattern for thread-safe, lazy initialization of shared resources, such as encrypted strings for module names, C2 domain and port, the sample\\u2019s unique identifier - that are decrypted only once but referenced many times during runtime. Each specific getter function checks a status flag for its resource; if uninitialized, it calls a shared, low-level synchronization function. This synchronization routine uses atomic operations and OS wait primitives (\",(0,i.jsx)(e.code,{children:\"WaitOnAddress\"}),\"/\",(0,i.jsx)(e.code,{children:\"WakeByAddressAll\"}),\") to ensure only one thread executes the actual initialization logic, which is invoked indirectly via a function pointer in the vtable of a \",(0,i.jsx)(e.code,{children:\"dyn Trait\"}),\" object.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image34.png\",alt:\"Decryption routine abstracted through dyn Trait object and lazy init of shared resource\",title:\"Decryption routine abstracted through dyn Trait object and lazy init of shared resource\",width:\"1487\",height:\"304\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image12.png\",alt:\"Example Trait object vtable\",title:\"Example Trait object vtable\",width:\"599\",height:\"231\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"api-obfuscation\",children:\"API Obfuscation\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"EDDIESTEALER utilizes a custom WinAPI lookup mechanism for most API calls. It begins by decrypting the names of the target module and function. Before attempting resolution, it checks a locally maintained hashtable to see if the function name and address have already been resolved. If not found, it dynamically loads the required module using a custom \",(0,i.jsx)(e.code,{children:\"LoadLibrary\"}),\" wrapper, into the process\\u2019s address space, and invokes a \",(0,i.jsx)(e.a,{href:\"https://github.com/cocomelonc/2023-04-16-malware-av-evasion-16/blob/ba05e209e079c2e339c67797b5a563a2e4dc0106/hack.cpp#L75\",rel:\"nofollow\",children:\"well-known implementation of GetProcAddress\"}),\" to retrieve the address of the exported function. The API name and address are then inserted into the hashtable, optimizing future lookups.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image31.png\",alt:\"Core functions handling dynamic imports and API resolutions\",title:\"Core functions handling dynamic imports and API resolutions\",width:\"1489\",height:\"399\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image23.png\",alt:\"Custom GetProcAddress implementation\",title:\"Custom GetProcAddress implementation\",width:\"1545\",height:\"831\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"mutex-creation\",children:\"Mutex Creation\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"EDDIESTEALER begins by creating a mutex to ensure that only one instance of the malware runs at any given time. The mutex name is a decrypted UUID string \",(0,i.jsx)(e.code,{children:\"431e2e0e-c87b-45ac-9fdb-26b7e24f0d39\"}),\" (unique per sample), which is later referenced once more during its initial contact with the C2 server.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image7.png\",alt:\"Retrieve the UUID and create a mutex with it\",title:\"Retrieve the UUID and create a mutex with it\",width:\"1224\",height:\"228\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"sandbox-detection\",children:\"Sandbox Detection\"}),`\n`,(0,i.jsx)(e.p,{children:\"EDDIESTEALER performs a quick check to assess whether the total amount of physical memory is above ~4.0 GB as a weak sandbox detection mechanism. If the check fails, it deletes itself from disk.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image27.png\",alt:\"Memory check\",title:\"Memory check\",width:\"997\",height:\"357\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"self-deletion\",children:\"Self-Deletion\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Based on a similar \",(0,i.jsx)(e.a,{href:\"https://github.com/LloydLabs/delete-self-poc/tree/main\",rel:\"nofollow\",children:\"self-deletion technique\"}),\" observed in \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/spring-cleaning-with-latrodectus\",rel:\"nofollow\",children:\"LATRODECTUS\"}),\", EDDIESTEALER is capable of deleting itself through NTFS Alternate Data Streams renaming, to bypass file locks.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The malware uses \",(0,i.jsx)(e.code,{children:\"GetModuleFileName\"}),\" to obtain the full path of its executable and \",(0,i.jsx)(e.code,{children:\"CreateFileW\"}),\" (wrapped in \",(0,i.jsx)(e.code,{children:\"jy::ds::OpenHandle\"}),\") to open a handle to its executable file with the appropriate access rights. Then, a \",(0,i.jsx)(e.code,{children:\"FILE_RENAME_INFO\"}),\" structure with a new stream name is passed into \",(0,i.jsx)(e.code,{children:\"SetFileInformationByHandle\"}),\" to rename the default stream \",(0,i.jsx)(e.code,{children:\"$DATA\"}),\" to \",(0,i.jsx)(e.code,{children:\":metadata\"}),\". The file handle is closed and reopened, this time using \",(0,i.jsx)(e.code,{children:\"SetFileInformationByHandle\"}),\" on the handle with the \",(0,i.jsx)(e.code,{children:\"FILE_DISPOSITION_INFO.DeleteFile\"}),\" flag set to \",(0,i.jsx)(e.code,{children:\"TRUE\"}),' to enable a \"delete on close handle\" flag.']}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image6.png\",alt:\"Self-deletion through ADS renaming\",title:\"Self-deletion through ADS renaming\",width:\"1348\",height:\"989\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"additional-configuration-request\",children:\"Additional Configuration Request\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The initial configuration data is stored as encrypted strings within the binary. Once decrypted, this data is used to construct a request following the URI pattern: \",(0,i.jsx)(e.code,{children:\"\u003cC2_ip_or_domain\u003e/\u003cresource_path\u003e/\u003cUUID\u003e\"}),\". The \",(0,i.jsx)(e.code,{children:\"resource_path\"}),\" is specified as \",(0,i.jsx)(e.code,{children:\"api/handler\"}),\".  The \",(0,i.jsx)(e.code,{children:\"UUID\"}),\", utilized earlier to create a mutex, is used as a unique identifier for build tracking.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"EDDIESTEALER then communicates with its C2 server by sending an HTTP GET request with the constructed URI to retrieve a second-stage configuration containing a list of tasks for the malware to execute.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image16.png\",alt:\"Decrypt strings required to build URI for C2 comms\",title:\"Decrypt strings required to build URI for C2 comms\",width:\"1113\",height:\"710\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image21.png\",alt:\"HTTP request wrapper\",title:\"HTTP request wrapper\",width:\"1450\",height:\"201\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The second-stage configuration data is AES CBC encrypted and Base64 encoded. The Base64-encoded IV is prepended in the message before the colon (\",(0,i.jsx)(e.code,{children:\":\"}),\").\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`Base64(IV):Base64(AESEncrypt(data))\n`})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image3.png\",alt:\"Encrypted data received from C2\",title:\"Encrypted data received from C2\",width:\"1999\",height:\"294\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The AES key for decrypting the server-to-client message is stored unencrypted in UTF-8 encoding, in the \",(0,i.jsx)(e.code,{children:\".rdata\"}),\" section. It is retrieved through a getter function.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image41.png\",alt:\"Hardcoded AES key\",title:\"Hardcoded AES key\",width:\"1099\",height:\"387\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image8.png\",alt:\"Core wrapper functions for config decryption\",title:\"Core wrapper functions for config decryption\",width:\"1093\",height:\"149\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The decrypted configuration for this sample contains the following in JSON format:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Session ID\"}),`\n`,(0,i.jsx)(e.li,{children:\"List of tasks (data to target)\"}),`\n`,(0,i.jsx)(e.li,{children:\"AES key for client-to-server message encryption\"}),`\n`,(0,i.jsx)(e.li,{children:\"Self-delete flag\"}),`\n`]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-json\",children:`{\n    \"session\": \"\u003cunique_session_id\u003e\",\n    \"tasks\": [\n        {\n            \"id\": \"\u003cunique_task_id\u003e\",\n            \"prepare\": [],\n            \"pattern\": {\n                \"path\": \"\u003cfile_system_path\u003e\",\n                \"recursive\": \u003ctrue/false\u003e,\n                \"filters\": [\n                    {\n                        \"path_filter\": \u003cnull/string\u003e,\n                        \"name\": \"\u003cfile_or_directory_name_pattern\u003e\",\n                        \"entry_type\": \"\u003cFILE/DIR\u003e\"\n                    },\n                    ...\n                ]\n            },\n            \"additional\": [\n                {\n                    \"command\": \"\u003coptional_command\u003e\",\n                    \"payload\": {\n                        \"\u003ccommand_specific_config\u003e\": \u003cvalue\u003e\n                    }\n                },\n                ...\n            ]\n        },\n        ...\n    ],\n    \"network\": {\n        \"encryption_key\": \"\u003cAES_encryption_key\u003e\"\n    },\n    \"self_delete\": \u003ctrue/false\u003e\n}\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"For this particular sample and based on the tasks received from the server during our analysis, here are the list of filesystem-based exfiltration targets:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Crypto wallets\"}),`\n`,(0,i.jsx)(e.li,{children:\"Browsers\"}),`\n`,(0,i.jsx)(e.li,{children:\"Password managers\"}),`\n`,(0,i.jsx)(e.li,{children:\"FTP clients\"}),`\n`,(0,i.jsx)(e.li,{children:\"Messaging applications\"}),`\n`]}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Crypto Wallet\"}),(0,i.jsx)(e.th,{children:\"Target Path Filter\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Armory\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\Armory\\\\\\\\*.wallet\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Bitcoin\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\Bitcoin\\\\\\\\wallets\\\\\\\\*\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"WalletWasabi\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\WalletWasabi\\\\\\\\Client\\\\\\\\Wallets\\\\\\\\*\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Daedalus Mainnet\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\Daedalus Mainnet\\\\\\\\wallets\\\\\\\\*\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Coinomi\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%localappdata%\\\\\\\\Coinomi\\\\\\\\Coinomi\\\\\\\\wallets\\\\\\\\*\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Electrum\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\Electrum\\\\\\\\wallets\\\\\\\\*\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Exodus\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\Exodus\\\\\\\\exodus.wallet\\\\\\\\*\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"DashCore\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\DashCore\\\\\\\\wallets\\\\\\\\*\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"ElectronCash\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\ElectronCash\\\\\\\\wallets\\\\\\\\*\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Electrum-DASH\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\Electrum-DASH\\\\\\\\wallets\\\\\\\\*\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Guarda\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\Guarda\\\\\\\\IndexedDB\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Atomic\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\atomic\\\\\\\\Local Storage\"})})]})]})]})}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Browser\"}),(0,i.jsx)(e.th,{children:\"Target Path Filter\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Microsoft Edge\"}),(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.code,{children:\"%localappdata%\\\\\\\\Microsoft\\\\\\\\Edge\\\\\\\\User Data\\\\\\\\\"}),(0,i.jsx)(\"br\",{}),(0,i.jsx)(e.code,{children:\"[Web Data,History,Bookmarks,Local Extension Settings\\\\\\\\...]\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Brave\"}),(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.code,{children:\"%localappdata%\\\\\\\\BraveSoftware\\\\\\\\Brave-Browser\\\\\\\\User Data\\\\\\\\\"}),(0,i.jsx)(\"br\",{}),(0,i.jsx)(e.code,{children:\"[Web Data,History,Bookmarks,Local Extension Settings\\\\\\\\...]\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Google Chrome\"}),(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.code,{children:\"%localappdata%\\\\\\\\Google\\\\\\\\Chrome\\\\\\\\User Data\\\\\\\\\"}),(0,i.jsx)(\"br\",{}),(0,i.jsx)(e.code,{children:\"[Web Data,History,Bookmarks,Local Extension Settings\\\\\\\\...]\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Mozilla Firefox\"}),(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\Mozilla\\\\\\\\Firefox\\\\\\\\Profiles\\\\\\\\\"}),(0,i.jsx)(\"br\",{}),(0,i.jsx)(e.code,{children:\"[key4.db,places.sqlite,logins.json,cookies.sqlite,formhistory.sqlite,webappsstore.sqlite,*+++*]\"})]})]})]})]})}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Password Manager\"}),(0,i.jsx)(e.th,{children:\"Target Path Filter\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Bitwarden\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\Bitwarden\\\\\\\\data.json\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"1Password\"}),(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.code,{children:\"%localappdata%\\\\\\\\1Password\\\\\\\\\"}),(0,i.jsx)(\"br\",{}),(0,i.jsx)(e.code,{children:\"[1password.sqlite,1password_resources.sqlite]\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"KeePass\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%userprofile%\\\\\\\\Documents\\\\\\\\*.kdbx\"})})]})]})]})}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"FTP Client\"}),(0,i.jsx)(e.th,{children:\"Target Path Filter\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"FileZilla\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\FileZilla\\\\\\\\recentservers.xml\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"FTP Manager Lite\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%localappdata%\\\\\\\\DeskShare Data\\\\\\\\FTP Manager Lite\\\\\\\\2.0\\\\\\\\FTPManagerLiteSettings.db\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"FTPbox\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\FTPbox\\\\\\\\profiles.conf\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"FTP Commander Deluxe\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%ProgramFiles(x86)%\\\\\\\\FTP Commander Deluxe\\\\\\\\FTPLIST.TXT\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Auto FTP Manager\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%localappdata%\\\\\\\\DeskShare Data\\\\\\\\Auto FTP Manager\\\\\\\\AutoFTPManagerSettings.db\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"3D-FTP\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%programdata%\\\\\\\\SiteDesigner\\\\\\\\3D-FTP\\\\\\\\sites.ini\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"FTPGetter\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\FTPGetter\\\\\\\\servers.xml\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Total Commander\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\GHISLER\\\\\\\\wcx_ftp.ini\"})})]})]})]})}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Messaging App\"}),(0,i.jsx)(e.th,{children:\"Target Path Filter\"})]})}),(0,i.jsx)(e.tbody,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"Telegram Desktop\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"%appdata%\\\\\\\\Telegram Desktop\\\\\\\\tdata\\\\\\\\*\"})})]})})]})}),`\n`,(0,i.jsxs)(e.p,{children:[\"A list of targeted browser extensions can be found \",(0,i.jsx)(e.a,{href:\"https://gist.github.com/jiayuchann/ba3cd9f4f430a9351fdff75869959853\",rel:\"nofollow\",children:\"here\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:\"These targets are subject to change as they are configurable by the C2 operator.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"EDDIESTEALER then reads the targeted files using standard \",(0,i.jsx)(e.code,{children:\"kernel32.dll\"}),\" functions like \",(0,i.jsx)(e.code,{children:\"CreateFileW\"}),\", \",(0,i.jsx)(e.code,{children:\"GetFileSizeEx\"}),\", \",(0,i.jsx)(e.code,{children:\"ReadFile\"}),\", and \",(0,i.jsx)(e.code,{children:\"CloseHandle\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image26.png\",alt:\"APIs for reading files specified in the task list\",title:\"APIs for reading files specified in the task list\",width:\"1287\",height:\"682\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"subsequent-c2-traffic\",children:\"Subsequent C2 Traffic\"}),`\n`,(0,i.jsx)(e.p,{children:\"After successfully retrieving the tasks, EDDIESTEALER performs system profiling to gather some information about the infected system:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Location of the executable (\",(0,i.jsx)(e.code,{children:\"GetModuleFileNameW\"}),\")\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Locale ID (\",(0,i.jsx)(e.code,{children:\"GetUserDefaultLangID\"}),\")\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Username (\",(0,i.jsx)(e.code,{children:\"GetUserNameW\"}),\")\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Total amount of physical memory (\",(0,i.jsx)(e.code,{children:\"GlobalMemoryStatusEx\"}),\")\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"OS version (\",(0,i.jsx)(e.code,{children:\"RtlGetVersion\"}),\")\"]}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Following the same data format (\",(0,i.jsx)(e.code,{children:\"Base64(IV):Base64(AESEncrypt(data))\"}),\") for client-to-server messages, initial host information is AES-encrypted using the key retrieved from the additional configuration and sent via an HTTP POST request to \",(0,i.jsx)(e.code,{children:\"\u003cC2_ip_or_domain\u003e/\u003cresource_path\u003e/info/\u003csession_id\u003e\"}),\". Subsequently, for each completed task, the collected data is also encrypted and transmitted in separate POST requests to \",(0,i.jsx)(e.code,{children:\"\u003cC2_ip_or_domain\u003e/\u003cresource_path\u003e\u003csession_id\u003e/\u003ctask_id\u003e\"}),\", right after each task is completed. This methodology generates a distinct C2 traffic pattern characterized by multiple, task-specific POST requests. This pattern is particularly easy to identify because this malware family primarily relies on HTTP instead of HTTPS for its C2 communication.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image20.png\",alt:\"C2 traffic log\",title:\"C2 traffic log\",width:\"1812\",height:\"315\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Our analysis uncovered encrypted strings that decrypt to panic metadata strings, disclosing internal Rust source file paths such as:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"apps\\\\bin\\\\src\\\\services\\\\chromium_hound.rs\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"apps\\\\bin\\\\src\\\\services\\\\system.rs\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"apps\\\\bin\\\\src\\\\structs\\\\search_pattern.rs\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"apps\\\\bin\\\\src\\\\structs\\\\search_entry.rs\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"We discovered that error messages sent to the C2 server contain these strings, including the exact source file, line number, and column number where the error originated, allowing the malware developer to have built-in debugging feedback.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image25.png\",alt:\"Example error message\",title:\"Example error message\",width:\"1889\",height:\"58\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"chromium-specific-capabilities\",children:\"Chromium-specific Capabilities\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Since the \",(0,i.jsx)(e.a,{href:\"https://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html\",rel:\"nofollow\",children:\"introduction\"}),\" of Application-bound encryption, malware developers have adapted to alternative methods to bypass this protection and gain access to unencrypted sensitive data, such as cookies. \",(0,i.jsx)(e.a,{href:\"https://github.com/Meckazin/ChromeKatz\",rel:\"nofollow\",children:\"ChromeKatz\"}),\" is one of the more well-received open source solutions that we have seen malware implement. EDDIESTEALER is no exception\\u2014the malware developers reimplemented it in Rust.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Below is a snippet of the browser version checking logic similar to COOKIEKATZ, after retrieving version information from \",(0,i.jsx)(e.code,{children:\"%localappdata%\\\\\u003cbrowser_specific_path\u003e\\\\\\\\User Data\\\\\\\\Last Version\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image33.png\",alt:\"Browser version check\",title:\"Browser version check\",width:\"1482\",height:\"1200\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"COOKIEKATZ \",(0,i.jsx)(e.a,{href:\"https://github.com/Meckazin/ChromeKatz/blob/15cc8180663fe2cd6b0828f147b84f3449db7ba6/COOKIEKATZ/Main.cpp#L210\",rel:\"nofollow\",children:\"signature pattern\"}),\" for detecting COOKIEMONSTER instances:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image24.png\",alt:\"COOKIEKATZ signature pattern\",title:\"COOKIEKATZ signature pattern\",width:\"1140\",height:\"1108\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"CredentialKatz \",(0,i.jsx)(e.a,{href:\"https://github.com/Meckazin/ChromeKatz/blob/15cc8180663fe2cd6b0828f147b84f3449db7ba6/CredentialKatz/Main.cpp#L188\",rel:\"nofollow\",children:\"signature pattern\"}),\" for detecting CookieMonster instances:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image4.png\",alt:\"CHROMEKATZ signature pattern\",title:\"CHROMEKATZ signature pattern\",width:\"829\",height:\"394\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Here is an example of the exact copy-pasted logic of COOKIEKATZ\\u2019s \",(0,i.jsx)(e.code,{children:\"FindPattern\"}),\", where \",(0,i.jsx)(e.code,{children:\"PatchBaseAddress\"}),\" is inlined.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image28.png\",alt:\"COOKIEKATZ FindPattern logic\",title:\"COOKIEKATZ FindPattern logic\",width:\"1618\",height:\"1124\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The developers introduced a modification to handle cases where the targeted Chromium browser is not running. If inactive, EDDIESTEALER spawns a new browser instance using the command-line arguments \",(0,i.jsx)(e.code,{children:\"--window-position=-3000,-3000 https://google.com\"}),\". This effectively positions the new window far off-screen, rendering it invisible to the user. The objective is to ensure the malware can still read the memory (\",(0,i.jsx)(e.code,{children:\"ReadProcessMemory\"}),\") of the necessary child process - the network service process identified by the \",(0,i.jsx)(e.code,{children:\"--utility-sub-type=network.mojom.NetworkService\"}),\" flag. For a more detailed explanation of this browser process interaction, refer to \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/katz-and-mouse-game\",rel:\"nofollow\",children:\"our previous research on MaaS infostealers\"}),\".\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"differences-with-variants\",children:\"Differences with variants\"}),`\n`,(0,i.jsx)(e.p,{children:\"After analysis, more recent samples were identified with additional capabilities.\"}),`\n`,(0,i.jsx)(e.p,{children:\"Information gathered on victim machines now include:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Running processes\"}),`\n`,(0,i.jsx)(e.li,{children:\"GPU information\"}),`\n`,(0,i.jsx)(e.li,{children:\"Number of CPU cores\"}),`\n`,(0,i.jsx)(e.li,{children:\"CPU name\"}),`\n`,(0,i.jsx)(e.li,{children:\"CPU vendor\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image14.png\",alt:\"Example system data collected\",title:\"Example system data collected\",width:\"1384\",height:\"220\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The C2 communication pattern has been altered slightly. The malware now preemptively sends host system information to the server before requesting its decrypted configuration. In a few instances where the victim machine was able to reach out to the C2 server but received an empty task list, the adjustment suggests an evasion tactic: developers have likely introduced server-side checks to profile the client environment and withhold the main configuration if a sandbox or analysis system is detected.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image19.png\",alt:\"Possible sandbox/anti-analysis technique on C2 server-side\",title:\"Possible sandbox/anti-analysis technique on C2 server-side\",width:\"1999\",height:\"430\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The encryption key for client-to-server communication is no longer received dynamically from the C2 server; instead, it is now hardcoded in the binary. The key used by the client to decrypt server-to-client messages also remains hardcoded.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image29.png\",alt:\"Example Hardcoded AES keys\",title:\"Example Hardcoded AES keys\",width:\"868\",height:\"86\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Newer compiled samples exhibit extensive use of function inline expansion, where many functions - both user-defined and from standard libraries and crates - have been inlined directly into their callers more often, resulting in larger functions and making it difficult to isolate user code. This behavior is likely the result of using LLVM\\u2019s inliner. While some functions remain un-inlined, the widespread inlining further complicates analysis.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image1.png\",alt:\"Old vs new: control flow graph for the HTTP request function\",title:\"Old vs new: control flow graph for the HTTP request function\",width:\"1999\",height:\"788\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"In order to get all entries of Chrome\\u2019s Password Manager, EDDIESTEALER begins its credential theft routine by spawning a new Chrome process with the \",(0,i.jsx)(e.code,{children:\"--remote-debugging-port=\u003cport_num\u003e\"}),\" flag, enabling Chrome\\u2019s DevTools Protocol over a local WebSocket interface. This allows the malware to interact with the browser in a headless fashion, without requiring any visible user interaction.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image22.png\",alt:\"Setting up Chrome process with remote debugging\",title:\"Setting up Chrome process with remote debugging\",width:\"1353\",height:\"455\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"After launching Chrome, the malware queries \",(0,i.jsx)(e.code,{children:\"http://localhost:\u003cport\u003e/json/version\"}),\" to retrieve the \",(0,i.jsx)(e.code,{children:\"webSocketDebuggerUrl\"}),\", which provides the endpoint for interacting with the browser instance over WebSocket.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image38.png\",alt:\"Sending request to retrieve webSocketDebuggerUrl\",title:\"Sending request to retrieve webSocketDebuggerUrl\",width:\"1598\",height:\"1211\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Using this connection, it issues a \",(0,i.jsx)(e.code,{children:\"Target.createTarget\"}),\" command with the parameter \",(0,i.jsx)(e.code,{children:\"chrome://password-manager/passwords\"}),\", instructing Chrome to open its internal password manager in a new tab. Although this internal page does not expose its contents to the DOM or to DevTools directly, opening it causes Chrome to decrypt and load stored credentials into memory. This behavior is exploited by EDDIESTEALER in subsequent steps through CredentialKatz lookalike code, where it scans the Chrome process memory to extract plaintext credentials after they have been loaded by the browser.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image15.png\",alt:\"Decrypted strings referenced when accessing Chrome\\u2019s password manager\",title:\"Decrypted strings referenced when accessing Chrome\\u2019s password manager\",width:\"1577\",height:\"451\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Based on decrypted strings \",(0,i.jsx)(e.code,{children:\"os_crypt\"}),\", \",(0,i.jsx)(e.code,{children:\"encrypted_key\"}),\", \",(0,i.jsx)(e.code,{children:\"CryptUnprotectData\"}),\", \",(0,i.jsx)(e.code,{children:\"local_state_pattern\"}),\", and \",(0,i.jsx)(e.code,{children:\"login_data_pattern\"}),\", EDDIESTEALER variants appear to be backward compatible, supporting Chrome versions that still utilize DPAPI encryption.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"We have identified 15 additional samples of EDDIESTEALER through code and infrastructure similarities on VirusTotal. The observations table will include the discovered samples, associated C2 IP addresses/domains, and a list of infrastructure hosting EDDIESTEALER.\"}),`\n`,(0,i.jsx)(e.h2,{id:\"a-few-analysis-tips\",children:\"A Few Analysis Tips\"}),`\n`,(0,i.jsx)(e.h3,{id:\"tracing\",children:\"Tracing\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"To better understand the control flow and pinpoint the exact destinations of indirect jumps or calls in large code blocks, we can leverage binary tracing techniques. Tools like \",(0,i.jsx)(\"code\",{children:(0,i.jsx)(e.a,{href:\"https://github.com/hasherezade/tiny_tracer\",rel:\"nofollow\",children:\"TinyTracer\"})}),\" can capture an API trace and generate a \",(0,i.jsx)(e.code,{children:\".tag\"}),\" file, which maps any selected API calls to be recorded to the executing line in assembly. Rust's standard library functions call into WinAPIs under the hood, and this also captures any code that calls \",(0,i.jsx)(e.code,{children:\"WinAPI\"}),\" functions directly, bypassing the standard library's abstraction. The tag file can then be imported into decompiler tools to automatically mark up the code blocks using plugins like \",(0,i.jsx)(\"code\",{children:(0,i.jsx)(e.a,{href:\"https://github.com/leandrofroes/bn_ifl\",rel:\"nofollow\",children:\"IFL\"})}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image5.png\",alt:\"Example comment markup after importing .tag file\",title:\"Example comment markup after importing .tag file\",width:\"817\",height:\"122\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"panic-metadata-for-code-segmentation\",children:\"Panic Metadata for Code Segmentation\"}),`\n`,(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.a,{href:\"https://cxiao.net/posts/2023-12-08-rust-reversing-panic-metadata/\",rel:\"nofollow\",children:\"Panic metadata\"}),\" - the embedded source file paths (.rs files), line numbers, and column numbers associated with panic locations - offers valuable clues for segmenting and understanding different parts of the binary. This, however, is only the case if such metadata has not been stripped from the binary. Paths like \",(0,i.jsx)(e.code,{children:\"apps\\\\bin\\\\src\\\\services\\\\chromium.rs\"}),\", \",(0,i.jsx)(e.code,{children:\"apps\\\\bin\\\\src\\\\structs\\\\additional_task.rs\"}),\" or any path that looks like part of a custom project typically points to the application\\u2019s unique logic. Paths beginning with \",(0,i.jsx)(e.code,{children:\"library\u003ccore/alloc/std\u003e\\\\src\\\\\"}),\" indicates code from the Rust standard library. Paths containing crate name and version such as \",(0,i.jsx)(e.code,{children:\"hashbrown-0.15.2\\\\src\\\\raw\\\\mod.rs\"}),\" point to external libraries.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"If the malware project has a somewhat organized codebase, the file paths in panic strings can directly map to logical modules. For instance, the decrypted string \",(0,i.jsx)(e.code,{children:\"apps\\\\bin\\\\src\\\\utils\\\\json.rs:48:39\"}),\" is referenced in \",(0,i.jsx)(e.code,{children:\"sub_140011b4c\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image10.png\",alt:\"Panic string containing \\u201Cjson.rs\\u201D referenced in function sub_140011b4c\",title:\"Panic string containing \\u201Cjson.rs\\u201D referenced in function sub_140011b4c\",width:\"1346\",height:\"267\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"By examining the call tree for incoming calls to the function, many of them trace back to \",(0,i.jsx)(e.code,{children:\"sub_14002699d\"}),\". This function (\",(0,i.jsx)(e.code,{children:\"sub_14002699d\"}),\") is called within a known C2 communication routine (\",(0,i.jsx)(e.code,{children:\"jy::C2::RetrieveAndDecryptConfig\"}),\"), right after decrypting additional configuration data known to be JSON formatted.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image30.png\",alt:\"Call tree of function sub_140011b4c\",title:\"Call tree of function sub_140011b4c\",width:\"762\",height:\"748\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Based on the \",(0,i.jsx)(e.code,{children:\"json.rs\"}),\" path and its calling context, an educated guess would be that \",(0,i.jsx)(e.code,{children:\"sub_14002699d\"}),\" is responsible for parsing JSON data. We can verify it by stepping over the function call. Sure enough, by inspecting the stack struct that is passed as reference to the function call, it now points to a heap address populated with parsed configuration fields.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image37.png\",alt:\"Function sub_14002699d successfully parsing configuration fields\",title:\"Function sub_14002699d successfully parsing configuration fields\",width:\"1075\",height:\"608\"})}),`\n`,(0,i.jsx)(e.p,{children:\"For standard library and open-source third-party crates, the file path, line number, and (if available) the rustc commit hash or crate version allow you to look up the exact source code online.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"stack-slot-reuse\",children:\"Stack Slot Reuse\"}),`\n`,(0,i.jsx)(e.p,{children:\"One of the optimization features involves reusing stack slots for variables/stack structs that don\\u2019t have overlapping timelines. Variables that aren\\u2019t \\u201Clive\\u201D at the same time can share the same stack memory location, reducing the overall stack frame size. Essentially, a variable is live from the moment it is assigned a value until the last point where that value could be accessed. This makes the decompiled output confusing as the same memory offset may hold different types or values at different points.\"}),`\n`,(0,i.jsx)(e.p,{children:\"To handle this, we can define unions encompassing all possible types sharing the same memory offset within the function.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image32.png\",alt:\"Stack slot reuse, resorting to UNION approach\",title:\"Stack slot reuse, resorting to UNION approach\",width:\"1999\",height:\"673\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"rust-error-handling-and-enums\",children:\"Rust Error Handling and Enums\"}),`\n`,(0,i.jsx)(e.p,{children:\"Rust enums are tagged unions that define types with multiple variants, each optionally holding data, ideal for modeling states like success or failure. Variants are identified by a discriminant (tag).\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Error-handling code can be seen throughout the binary, making up a significant portion of the decompiled code. Rust's primary mechanism for error handling is the \",(0,i.jsx)(e.code,{children:\"Result\u003cT, E\u003e\"}),\" generic enum. It has two variants: \",(0,i.jsx)(e.code,{children:\"Ok(T)\"}),\", indicating success and containing a value of type \",(0,i.jsx)(e.code,{children:\"T\"}),\", and \",(0,i.jsx)(e.code,{children:\"Err(E)\"}),\", indicating failure and containing an error value of type \",(0,i.jsx)(e.code,{children:\"E\"}),\".\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"In the example snippet below, a discriminant value of \",(0,i.jsx)(e.code,{children:\"0x8000000000000000\"}),\" is used to differentiate outcomes of resolving the \",(0,i.jsx)(e.code,{children:\"CreateFileW\"}),\" API. If \",(0,i.jsx)(e.code,{children:\"CreateFileW\"}),\" is successfully resolved, the \",(0,i.jsx)(e.code,{children:\"reuse\"}),\" variable type contains the API function pointer, and the \",(0,i.jsx)(e.code,{children:\"else\"}),\" branch executes. Otherwise, the \",(0,i.jsx)(e.code,{children:\"if\"}),\" branch executes, assigning an error information string from \",(0,i.jsx)(e.code,{children:\"reuse\"}),\" to \",(0,i.jsx)(e.code,{children:\"arg1\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/eddiestealer/image13.png\",alt:\"Error handling example\",title:\"Error handling example\",width:\"1452\",height:\"411\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"For more information on how other common Rust types might look in memory, check out this \",(0,i.jsx)(e.a,{href:\"https://cheats.rs/#memory-layout\",rel:\"nofollow\",children:\"cheatsheet\"}),\" and this amazing \",(0,i.jsx)(e.a,{href:\"https://www.youtube.com/watch?v=SGLX7g2a-gw\u0026t=749s\",rel:\"nofollow\",children:\"talk\"}),\" by Cindy Xiao!\"]}),`\n`,(0,i.jsx)(e.h2,{id:\"malware-and-mitre-attck\",children:\"Malware and MITRE ATT\u0026CK\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic uses the\",(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/\",rel:\"nofollow\",children:\" MITRE ATT\u0026CK\"}),\" framework to document common tactics, techniques, and procedures that threats use against enterprise networks.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"tactics\",children:\"Tactics\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0001\",rel:\"nofollow\",children:\"Initial Access\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0002\",rel:\"nofollow\",children:\"Execution\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0005\",rel:\"nofollow\",children:\"Defense Evasion\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0010\",rel:\"nofollow\",children:\"Exfiltration\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0006/\",rel:\"nofollow\",children:\"Credential Access\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0007/\",rel:\"nofollow\",children:\"Discovery\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0009\",rel:\"nofollow\",children:\"Collection\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"techniques\",children:\"Techniques\"}),`\n`,(0,i.jsx)(e.p,{children:\"Techniques represent how an adversary achieves a tactical goal by performing an action.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1566/\",rel:\"nofollow\",children:\"Phishing\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1659/\",rel:\"nofollow\",children:\"Content Injection\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1059/\",rel:\"nofollow\",children:\"Command and Scripting Interpreter\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1555/\",rel:\"nofollow\",children:\"Credentials from Password Stores\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1204/\",rel:\"nofollow\",children:\"User Execution\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1027/\",rel:\"nofollow\",children:\"Obfuscated Files or Information\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1041/\",rel:\"nofollow\",children:\"Exfiltration Over C2 Channel\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1497/\",rel:\"nofollow\",children:\"Virtualization/Sandbox Evasion\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"detections\",children:\"Detections\"}),`\n`,(0,i.jsx)(e.h3,{id:\"yara\",children:\"YARA\"}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic Security has created the following YARA rules related to this research:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Infostealer_EddieStealer.yar\",rel:\"nofollow\",children:\"Windows.Infostealer.EddieStealer\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"behavioral-prevention-rules\",children:\"Behavioral prevention rules\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/3e068e2ab4a045350c67ae26ff1439149ad68d1d/behavior/rules/windows/execution_suspicious_powershell_execution.toml\",rel:\"nofollow\",children:\"Suspicious PowerShell Execution\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/3e068e2ab4a045350c67ae26ff1439149ad68d1d/behavior/rules/windows/command_and_control_ingress_tool_transfer_via_powershell.toml\",rel:\"nofollow\",children:\"Ingress Tool Transfer via PowerShell\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/3e068e2ab4a045350c67ae26ff1439149ad68d1d/behavior/rules/windows/discovery_potential_browser_information_discovery.toml\",rel:\"nofollow\",children:\"Potential Browser Information Discovery\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/3e068e2ab4a045350c67ae26ff1439149ad68d1d/behavior/rules/windows/defense_evasion_potential_self_deletion_of_a_running_executable.toml\",rel:\"nofollow\",children:\"Potential Self Deletion of a Running Executable\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"observations\",children:\"Observations\"}),`\n`,(0,i.jsx)(e.p,{children:\"The following observables were discussed in this research.\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Observable\"}),(0,i.jsx)(e.th,{children:\"Type\"}),(0,i.jsx)(e.th,{children:\"Name\"}),(0,i.jsx)(e.th,{children:\"Reference\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"47409e09afa05fcc9c9eff2c08baca3084d923c8d82159005dbae2029e1959d0\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"MvUlUwagHeZd.exe\"})}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"162a8521f6156070b9a97b488ee902ac0c395714aba970a688d54305cb3e163f\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\":metadata (copy)\"})}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"f8b4e2ca107c4a91e180a17a845e1d7daac388bd1bb4708c222cda0eff793e7a\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"AegZs85U6COc.exe\"})}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"53f803179304e4fa957146507c9f936b38da21c2a3af4f9ea002a7f35f5bc23d\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\":metadata (copy)\"})}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"20eeae4222ff11e306fded294bebea7d3e5c5c2d8c5724792abf56997f30aaf9\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"PETt3Wz4DXEL.exe\"})}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"1bdc2455f32d740502e001fce51dbf2494c00f4dcadd772ea551ed231c35b9a2\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"Tk7n1al5m9Qc.exe\"})}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"d905ceb30816788de5ad6fa4fe108a202182dd579075c6c95b0fb26ed5520daa\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"YykbZ173Ysnd.exe\"})}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"b8b379ba5aff7e4ef2838517930bf20d83a1cfec5f7b284f9ee783518cb989a7\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"2025-04-03_20745dc4d048f67e0b62aca33be80283_akira_cobalt-strike_satacom\"})}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"f6536045ab63849c57859bbff9e6615180055c268b89c613dfed2db1f1a370f2\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"2025-03-23_6cc654225172ef70a189788746cbb445_akira_cobalt-strike\"})}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"d318a70d7f4158e3fe5f38f23a241787359c55d352cb4b26a4bd007fd44d5b80\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"2025-03-22_c8c3e658881593d798da07a1b80f250c_akira_cobalt-strike\"})}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"73b9259fecc2a4d0eeb0afef4f542642c26af46aa8f0ce2552241ee5507ec37f\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"2025-03-22_4776ff459c881a5b876da396f7324c64_akira_cobalt-strike\"})}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"2bef71355b37c4d9cd976e0c6450bfed5f62d8ab2cf096a4f3b77f6c0cb77a3b\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"TWO[1].file\"})}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"218ec38e8d749ae7a6d53e0d4d58e3acf459687c7a34f5697908aec6a2d7274d\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"5330cf6a8f4f297b9726f37f47cffac38070560cbac37a8e561e00c19e995f42\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"verifcheck.exe\"})}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"acae8a4d92d24b7e7cb20c0c13fd07c8ab6ed8c5f9969504a905287df1af179b\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"3zeG4jGjFkOy.exe\"})}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"0f5717b98e2b44964c4a5dfec4126fc35f5504f7f8dec386c0e0b0229e3482e7\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"verification.exe\"})}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"e8942805238f1ead8304cfdcf3d6076fa0cdf57533a5fae36380074a90d642e4\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"g_verify.js\"})}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER loader\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"7930d6469461af84d3c47c8e40b3d6d33f169283df42d2f58206f43d42d4c9f4\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"verif.js\"})}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER loader\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"45.144.53[.]145\"})}),(0,i.jsx)(e.td,{children:\"ipv4-addr\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER C2\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"84.200.154[.]47\"})}),(0,i.jsx)(e.td,{children:\"ipv4-addr\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER C2\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"shiglimugli[.]xyz\"})}),(0,i.jsx)(e.td,{children:\"domain-name\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER C2\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"xxxivi[.]com\"})}),(0,i.jsx)(e.td,{children:\"domain-name\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER C2 and intermediate infrastructure\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"llll[.]fit\"})}),(0,i.jsx)(e.td,{children:\"domain-name\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER intermediate infrastructure\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"plasetplastik[.]com\"})}),(0,i.jsx)(e.td,{children:\"domain-name\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER intermediate infrastructure\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"militrex[.]wiki\"})}),(0,i.jsx)(e.td,{children:\"domain-name\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"EDDIESTEALER intermediate infrastructure\"})]})]})]})}),`\n`,(0,i.jsx)(e.h2,{id:\"references\",children:\"References\"}),`\n`,(0,i.jsx)(e.p,{children:\"The following were referenced throughout the above research:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/N0fix/rustbinsign\",rel:\"nofollow\",children:\"https://github.com/N0fix/rustbinsign\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/Meckazin/ChromeKatz\",rel:\"nofollow\",children:\"https://github.com/Meckazin/ChromeKatz\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/hasherezade/tiny_tracer\",rel:\"nofollow\",children:\"https://github.com/hasherezade/tiny_tracer\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://docs.binary.ninja/dev/uidf.html\",rel:\"nofollow\",children:\"https://docs.binary.ninja/dev/uidf.html\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.unicorn-engine.org/\",rel:\"nofollow\",children:\"https://www.unicorn-engine.org/\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/LloydLabs/delete-self-poc/tree/main\",rel:\"nofollow\",children:\"https://github.com/LloydLabs/delete-self-poc/tree/main\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://cheats.rs/#memory-layout\",rel:\"nofollow\",children:\"https://cheats.rs/#memory-layout\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.youtube.com/watch?v=SGLX7g2a-gw\u0026t=749s\",rel:\"nofollow\",children:\"https://www.youtube.com/watch?v=SGLX7g2a-gw\u0026t=749s\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://cxiao.net/posts/2023-12-08-rust-reversing-panic-metadata/\",rel:\"nofollow\",children:\"https://cxiao.net/posts/2023-12-08-rust-reversing-panic-metadata/\"})}),`\n`]})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(o,t)})):o(t)}var T=v;return y(k);})();\n;return Component;"},"_id":"articles/eddiestealer.mdx","_raw":{"sourceFilePath":"articles/eddiestealer.mdx","sourceFileName":"eddiestealer.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/eddiestealer"},"type":"Article","imageUrl":"/assets/images/eddiestealer/eddiestealer.png","readingTime":"45 min read","series":"","url":"/eddiestealer","headings":[{"level":2,"title":"Preamble","href":"#preamble"},{"level":2,"title":"Key takeaways","href":"#key-takeaways"},{"level":2,"title":"Intial access","href":"#intial-access"},{"level":3,"title":"Overview","href":"#overview"},{"level":2,"title":"EDDIESTEALER","href":"#eddiestealer"},{"level":3,"title":"Overview","href":"#overview-1"},{"level":3,"title":"Stripped Symbols","href":"#stripped-symbols"},{"level":3,"title":"String Obfuscation","href":"#string-obfuscation"},{"level":3,"title":"API Obfuscation","href":"#api-obfuscation"},{"level":3,"title":"Mutex Creation","href":"#mutex-creation"},{"level":3,"title":"Sandbox Detection","href":"#sandbox-detection"},{"level":3,"title":"Self-Deletion","href":"#self-deletion"},{"level":3,"title":"Additional Configuration Request","href":"#additional-configuration-request"},{"level":3,"title":"Subsequent C2 Traffic","href":"#subsequent-c2-traffic"},{"level":3,"title":"Chromium-specific Capabilities","href":"#chromium-specific-capabilities"},{"level":3,"title":"Differences with variants","href":"#differences-with-variants"},{"level":2,"title":"A Few Analysis Tips","href":"#a-few-analysis-tips"},{"level":3,"title":"Tracing","href":"#tracing"},{"level":3,"title":"Panic Metadata for Code Segmentation","href":"#panic-metadata-for-code-segmentation"},{"level":3,"title":"Stack Slot Reuse","href":"#stack-slot-reuse"},{"level":3,"title":"Rust Error Handling and Enums","href":"#rust-error-handling-and-enums"},{"level":2,"title":"Malware and MITRE ATT\u0026CK","href":"#malware-and-mitre-attck"},{"level":3,"title":"Tactics","href":"#tactics"},{"level":3,"title":"Techniques","href":"#techniques"},{"level":2,"title":"Detections","href":"#detections"},{"level":3,"title":"YARA","href":"#yara"},{"level":3,"title":"Behavioral prevention rules","href":"#behavioral-prevention-rules"},{"level":2,"title":"Observations","href":"#observations"},{"level":2,"title":"References","href":"#references"}],"author":[{"title":"Jia Yu Chan","slug":"jia-yu-chan","description":"Elastic Security Labs Team Research Engineer, Malware","image":"jiayuchan.jpg","body":{"raw":"","code":"var Component=(()=\u003e{var g=Object.create;var i=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var l=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var h=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),p=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},o=(t,e,n,c)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of x(e))!f.call(t,r)\u0026\u0026r!==n\u0026\u0026i(t,r,{get:()=\u003ee[r],enumerable:!(c=j(e,r))||c.enumerable});return t};var _=(t,e,n)=\u003e(n=t!=null?g(l(t)):{},o(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),d=t=\u003eo(i({},\"__esModule\",{value:!0}),t);var u=h((D,s)=\u003e{s.exports=_jsx_runtime});var b={};p(b,{default:()=\u003eC,frontmatter:()=\u003ey});var a=_(u()),y={title:\"Jia Yu Chan\",description:\"Elastic Security Labs Team Research Engineer, Malware\",slug:\"jia-yu-chan\",image:\"jiayuchan.jpg\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,a.jsx)(e,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=M;return d(b);})();\n;return Component;"},"_id":"authors/jia-yu-chan.mdx","_raw":{"sourceFilePath":"authors/jia-yu-chan.mdx","sourceFileName":"jia-yu-chan.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/jia-yu-chan"},"type":"Author","imageUrl":"/assets/images/authors/jiayuchan.jpg","url":"/authors/jia-yu-chan"}],"category":[{"title":"Malware analysis","slug":"malware-analysis","body":{"raw":"","code":"var Component=(()=\u003e{var u=Object.create;var s=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),M=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},i=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!g.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(o=x(n,r))||o.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?u(_(t)):{},i(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),p=t=\u003ei(s({},\"__esModule\",{value:!0}),t);var l=j((X,c)=\u003e{c.exports=_jsx_runtime});var D={};M(D,{default:()=\u003eC,frontmatter:()=\u003ew});var a=d(l()),w={title:\"Malware analysis\",slug:\"malware-analysis\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function y(t={}){let{wrapper:n}=t.components||{};return n?(0,a.jsx)(n,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=y;return p(D);})();\n;return Component;"},"_id":"categories/malware-analysis.mdx","_raw":{"sourceFilePath":"categories/malware-analysis.mdx","sourceFileName":"malware-analysis.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/malware-analysis"},"type":"Category","url":"/categories/malware-analysis"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"eddiestealer"},"buildId":"6Uo_c3e7pOPG4qcACEsTq","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>