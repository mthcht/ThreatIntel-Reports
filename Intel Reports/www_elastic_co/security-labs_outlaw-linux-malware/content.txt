<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Outlaw Linux Malware: Persistent, Unsophisticated, and Surprisingly Effective — Elastic Security Labs</title><meta name="description" content="Outlaw is a persistent Linux malware leveraging simple brute-force and mining tactics to maintain a long-lasting botnet."/><meta property="og:title" content="Outlaw Linux Malware: Persistent, Unsophisticated, and Surprisingly Effective — Elastic Security Labs"/><meta property="og:description" content="Outlaw is a persistent Linux malware leveraging simple brute-force and mining tactics to maintain a long-lasting botnet."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/outlaw-linux-malware/outlaw.jpg?2ee75fc0c5b1ea9ae37a5aa480f4a5b9"/><meta property="og:image:alt" content="Outlaw is a persistent Linux malware leveraging simple brute-force and mining tactics to maintain a long-lasting botnet."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/outlaw-linux-malware"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Outlaw Linux Malware: Persistent, Unsophisticated, and Surprisingly Effective — Elastic Security Labs"/><meta name="twitter:description" content="Outlaw is a persistent Linux malware leveraging simple brute-force and mining tactics to maintain a long-lasting botnet."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/outlaw-linux-malware/outlaw.jpg?2ee75fc0c5b1ea9ae37a5aa480f4a5b9"/><meta name="twitter:image:alt" content="Outlaw is a persistent Linux malware leveraging simple brute-force and mining tactics to maintain a long-lasting botnet."/><link rel="canonical" href="https://www.elastic.co/security-labs/outlaw-linux-malware"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Foutlaw-linux-malware%2Foutlaw.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Foutlaw-linux-malware%2Foutlaw.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Foutlaw-linux-malware%2Foutlaw.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Foutlaw-linux-malware%2Foutlaw.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Foutlaw-linux-malware%2Foutlaw.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Foutlaw-linux-malware%2Foutlaw.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Foutlaw-linux-malware%2Foutlaw.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Foutlaw-linux-malware%2Foutlaw.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-3f98baf421dd3cb5.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-b0c191de1a3710e4.js" defer=""></script><script src="/security-labs/_next/static/uMiIwNtxi2PxMPLSS6bF4/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/uMiIwNtxi2PxMPLSS6bF4/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/outlaw-linux-malware"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/outlaw-linux-malware"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2025-04-01T00:00:00.000Z">1 April 2025</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/remco-sprooten">Remco Sprooten</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/ruben-groenewoud">Ruben Groenewoud</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Outlaw Linux Malware: Persistent, Unsophisticated, and Surprisingly&nbsp;Effective</span></h1><p class="text-zinc-200 text-base md:text-xl">Outlaw is a persistent Linux malware leveraging simple brute-force and mining tactics to maintain a long-lasting botnet.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>33 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/malware-analysis">Malware analysis</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Outlaw Linux Malware: Persistent, Unsophisticated, and Surprisingly Effective" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Foutlaw-linux-malware%2Foutlaw.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Foutlaw-linux-malware%2Foutlaw.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Foutlaw-linux-malware%2Foutlaw.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Foutlaw-linux-malware%2Foutlaw.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Foutlaw-linux-malware%2Foutlaw.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Foutlaw-linux-malware%2Foutlaw.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Foutlaw-linux-malware%2Foutlaw.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Foutlaw-linux-malware%2Foutlaw.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Foutlaw-linux-malware%2Foutlaw.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="preface" class="absolute -top-32"></span>Preface</h2>
<p>OUTLAW is a persistent yet unsophisticated auto-propagating coinminer package observed across multiple versions over the past few years [<a href="https://www.countercraftsec.com/blog/dota3-malware-again-and-again/">1</a>], [<a href="https://blogs.juniper.net/en-us/threat-research/dota3-is-your-internet-of-things-device-moonlighting">2</a>], [<a href="https://isc.sans.edu/diary/Hygiene+Hygiene+Hygiene+Guest+Diary/31260">3</a>], [<a href="https://darktrace.com/blog/outlaw-returns-uncovering-returning-features-and-new-tactics">4</a>]. Despite lacking stealth and advanced evasion techniques, it remains active and effective by leveraging simple but impactful tactics such as SSH brute-forcing, SSH key and cron-based persistence, and manually modified commodity miners and IRC channels. This persistence highlights how botnet operators can achieve widespread impact without relying on sophisticated techniques.</p>
<p>To gain deeper insights into OUTLAW’s behavior and operational patterns, we deployed a honeypot designed to attract and observe the attackers in action. By carefully crafting an environment that mimicked a vulnerable system, we were able to bait the adversaries into interacting with our server. This interaction revealed automated and manual actions, with operators entering commands directly, making modifications on the fly, and even mistyping commands—clear indicators of human involvement. A captured GIF showcases these moments, providing a rare glimpse into their real-time decision-making process.</p>
<p></p>
<p>By analyzing OUTLAW, we gain new insights into the tooling used by its operators and their evolving strategies over time. This malware presents a valuable opportunity to apply detection engineering principles, as its attack chain spans nearly the entire MITRE ATT&amp;CK framework. Examining its infection process allows us to develop effective detection strategies that capitalize on its predictable and repetitive behaviors.</p>
<p>This report provides a full attack chain analysis, including detailed detection rules and hunting queries. By breaking down OUTLAW’s components, we demonstrate how even rudimentary malware can maintain longevity in modern environments and how defenders can leverage its simplicity to enhance detection and response.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="key-takeaways" class="absolute -top-32"></span>Key Takeaways</h2>
<ul>
<li><strong>Persistent but unsophisticated</strong>: OUTLAW remains active despite using basic techniques like SSH brute-forcing, SSH key manipulation, and cron-based persistence.</li>
<li><strong>Commodity tooling</strong>: The malware deploys modified <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">XMRig</code> miners, leverages IRC for C2, and includes publicly available scripts for persistence and defense evasion.</li>
<li><strong>Extensive attack surface</strong>: OUTLAW’s infection chain spans nearly the entire MITRE ATT&amp;CK framework, offering many detection and hunting opportunities.</li>
<li><strong>Worm-like propagation</strong>: OUTLAW uses its compromised hosts to launch further SSH brute-force attacks on their local subnets, rapidly expanding the botnet.</li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="outlaw-overview" class="absolute -top-32"></span>OUTLAW Overview</h2>
<p>OUTLAW follows a multi-stage infection process that begins with downloading and executing its payload, establishing persistence, and expanding its botnet through SSH brute-force attacks. The execution chain is displayed below:</p>
<p></p>
<p><strong>1. Initial Infection &amp; Deployment</strong></p>
<ul>
<li>The attack starts when <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tddwrt7s.sh</code> downloads the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">dota3.tar.gz</code> package from a C2 server.</li>
<li>The extracted <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">initall.sh</code> script executes, kicking off the infection chain.</li>
</ul>
<p><strong>2. Gaining Control &amp; Persistence</strong></p>
<ul>
<li>The malware ensures dominance by killing competing brute-forcers and miners.</li>
<li>It then deploys:<!-- -->
<ul>
<li>Modified XMRIG for crypto mining (connecting to a mining pool).</li>
<li>STEALTH SHELLBOT for remote control via IRC C2.</li>
<li>BLITZ to perform SSH brute force attacks.</li>
</ul>
</li>
</ul>
<p><strong>3. Propagation &amp; Expansion</strong></p>
<ul>
<li>The brute-force module retrieves target lists from an SSH C2 server and attempts SSH brute-force attacks on new machines.</li>
<li>Successfully compromised systems are infected, repeating the cycle.</li>
</ul>
<p>This automated infection loop allows OUTLAW to remain active and profitable with minimal effort from attackers. Let’s take a deeper look at the entire attack chain.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="outlaw-execution-chain" class="absolute -top-32"></span>OUTLAW Execution Chain</h2>
<p>OUTLAW effectively covers a wide range of tactics and techniques in the MITRE ATT&amp;CK framework. This section maps its behavior to provide an overview of its infection chain and methods.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="initial-access-blitz" class="absolute -top-32"></span>Initial Access: blitz</h3>
<p>OUTLAW gains initial access through opportunistic SSH brute-forcing, targeting systems with weak or default credentials. The malware employs its <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">blitz</code> component, also known under other names such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kthreadadd</code>, to perform high-volume scanning and password-guessing attempts. It leverages lists of target IPs and credentials retrieved from its C2 servers.</p>
<p>OUTLAW also acts like a worm, automatically installing itself on every system that it successfully compromises. This self-propagation mechanism allows it to spread rapidly across networks, turning each newly infected device into another node for further brute-forcing and infection attempts.</p>
<p>We will take a deeper look into how OUTLAW performs these attacks and propagates itself later in the article.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="execution-tddwrt7ssh" class="absolute -top-32"></span>Execution: tddwrt7s.sh</h3>
<p>The first infections of OUTLAW seem to originate from a straightforward dropper script: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">tddwrt7s.sh</code>. This shell script checks for an existing installation. If the malware is already present and unpacked, it will run the initall script, kicking off the infection chain. Otherwise, it will attempt to download the package from a list of provided staging servers. For illustration purposes, a shortened snippet of the dropper is shown below:</p>
<p></p>
<p>The extracted <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">dota3.tar.gz</code> package extracts its contents into a hidden folder called <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.rsync</code>, and contains the following entries:</p>
<pre><code> ├── a
 │   ├── a
 │   ├── init0
 │   ├── kswapd0
 │   ├── kswapd01
 │   ├── run
 │   ├── socat
 │   └── stop
 ├── b
 │   ├── a
 │   ├── run
 │   └── stop
 ├── c
 │   ├── blitz
 │   ├── blitz32
 │   ├── blitz64
 │   ├── go
 │   ├── run
 │   ├── start
 │   ├── stop
 │   └── v
 ├── init
 ├── init2
 └── initall</code></pre>
<p>Let’s deconstruct the execution chains one by one.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="main-initialization-script-initall" class="absolute -top-32"></span>Main Initialization script: initall</h3>
<p>The three <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">init</code> scripts control the overall execution flow and deployment of the malware. Starting with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">initall</code> script, the main initializer determines which execution path to take. It checks the system environment and decides whether to use <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">init</code> or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">init2</code> based on file permissions and available directories.</p>
<p>These <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">init</code> scripts all use variable-based string concatenation obfuscation, where commands are split into small variable fragments that are dynamically concatenated and executed, making static analysis more difficult. For example, the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">initall</code> script looks like this:</p>
<p></p>
<p>However, by changing the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">eval</code> to an <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">echo</code>, we can get the output without any effort:</p>
<p></p>
<p>This script will, by default, consistently execute <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">init</code>. This is the primary execution path that installs the malware in the hidden directory <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">~/.configrc6</code>. The fallback execution path is <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">init2</code>, which is used when <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">~/.configrc6</code> is inaccessible. The main difference is that this path keeps all components in the current working directory. Applying the same deobfuscation principle as we did previously, we end up with the following two scripts:</p>
<p></p>
<p>The first script (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">init</code>) hides its components in the hidden directory <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">~/.configrc6</code>, while the second script (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">init2</code>) runs directly from the working directory. Despite this difference, the execution flow remains the same, starting the binary named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">a</code> in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">a/</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">b/</code> directories as background processes and establishing persistence. In both scripts, the malware installs cron jobs that execute its binaries at regular intervals and on system reboots:</p>
<pre><code>5 6 * * 0   ~/.configrc6/a/upd
@reboot     ~/.configrc6/a/upd
5 8 * * 0   ~/.configrc6/b/sync
@reboot     ~/.configrc6/b/sync
0 0 */3 * * ~/.configrc6/c/aptitude</code></pre>
<p>Although the scripts execute the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">a</code> binary in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">a/</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">b/</code> directories nearly simultaneously, we will follow the execution flow of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">a/</code> directory first.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="subroutine-execution-of-a-directory-xmrig" class="absolute -top-32"></span>Subroutine Execution of a/ directory: XMRIG</h3>
<p>The first script that is executed is <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">a</code>, which removes any existing cron jobs using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">crontab -r</code> and then stores the current working directory in a variable. It then creates a shell script called <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">upd</code> that checks if a process (stored in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bash.pid</code>) is still running. If the process is not running, it executes <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">./run</code> as a background process, ensuring that the malware is continuously restarted if terminated.</p>
<p></p>
<p>Additionally, we see some commented commands, indicating that other versions of this malware may exist under names such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rsync</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">go</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kswapd0</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">blitz,</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">redtail</code>.</p>
<p>Further down the script, a function is created that checks if <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/sys/module/msr/parameters/allow_writes</code> exists and sets it to &quot;on&quot; to enable writing to Model-Specific Registers (MSRs). If the file does not exist, it enables MSR writes through the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">modprobe msr allow_writes=on</code> command.</p>
<p></p>
<p>Next, the function identifies the active CPU by checking <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/proc/cpuinfo</code> and applies specific MSR register values to optimize performance.</p>
<p></p>
<p>Finally, the function optimizes memory usage by enabling <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hugepages</code> for all CPU cores, increasing memory access efficiency. It calculates the number of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hugepages</code> needed based on the available processors (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">nproc</code>) and sets them in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/sys/devices/system/node/node*/hugepages/</code> directories.</p>
<p></p>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">optimize_func()</code> function was not created by the threat actor. The threat actor used an open-source script from the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">XMRig</code> repository, specifically the <a href="https://github.com/xmrig/xmrig/blob/master/scripts/randomx_boost.sh">randomx_boost.sh</a> script, to aid in their infection chain.</p>
<p>Depending on the user&#x27;s privileges, it will either run the whole optimization function, or attempt to set the number of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hugepages</code> through <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sysctl</code>:</p>
<p></p>
<p>All steps performed in this chain show apparent signs of cryptocurrency mining system optimization. Finally, the script grants execution permissions to the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">upd</code> file and &quot;777&quot; permissions to all files in its folder and runs <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">upd</code>.</p>
<p>As we saw earlier in the chain, the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">upd</code> file checks whether the process stored in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bash.pid</code> is still running, and if it is not, it will execute the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">run</code> script:</p>
<p></p>
<p>The run script will start the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">stop</code> script, which is a typical script that bring down the defenses of any known miner configurations any known miner configurations and kill any known miner processes based on name/process ID or network traffic. A shortened version of this script is illustrated below:</p>
<p></p>
<p>Interestingly enough, a second process-killing script called <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">init0</code> is present, which is an <a href="https://github.com/MinervaLabsResearch/BlogPosts/blob/master/MinerKiller/MinerKiller.sh">open-source script</a> for killing cryptocurrency miners in a Linux environment. This script is not being run, as the execution flow for this script was commented out in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">a</code> script.</p>
<p>After the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">stop</code> script has been successfully run, the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">run</code> script starts the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kswapd01</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kswapd0</code> binaries in the background via <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">nohup</code>.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="kswapd01" class="absolute -top-32"></span>kswapd01</h4>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kswap01</code> binary plays a critical role in ensuring persistent communication within the malware’s infrastructure. Its main task is to monitor and maintain a continuous <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">socat</code> process, which is essential for communication with the attacker’s C2 servers.</p>
<p></p>
<p>When executed, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kswap01</code> checks for any existing <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">socat</code> processes running on the infected machine. If no active connection is found, it proceeds to kill any running <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">socat</code> processes and selects an alternative IP address from a predefined list. The binary then establishes a new connection by launching a fresh <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">socat</code> process to listen on the local machine and forward traffic to a remote server, typically on port 4444. This ensures the malware maintains control over the infected system and can continue receiving commands from the attacker.</p>
<p>However, it&#x27;s important to note that not every version of the OUTLAW malware package observed includes the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">socat</code> binary. In these cases, the functionality provided by <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">socat</code> is either replicated by other means or simply omitted, relying on alternative methods for maintaining persistence and communication.</p>
<p>By performing these checks and modifications, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kswap01</code> helps maintain the persistence of the C2 connection, making it harder for defenders to interrupt the communication channel between the attacker and the compromised system.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="kswapd0" class="absolute -top-32"></span>kswapd0</h4>
<p>The file named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kswapd0</code> is a maliciously modified copy of the legitimate <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">XMRig</code> cryptocurrency miner (specifically version 6.22.1).</p>
<p></p>
<p>Two major modifications define the malware’s behavior:</p>
<p><strong>1. Startup Shell Commands</strong></p>
<ul>
<li>The malware removes and recreates the victim’s <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">~/.ssh</code> folder, injects an attacker-controlled SSH public key, and re-applies restrictive permissions (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">chattr +ia</code>) to prevent modification. This grants persistent SSH access.</li>
<li>It also removes or locks existing <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">XMRig</code> configuration files (e.g., <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">~/.xmrig.json</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">~/.config/xmrig.json</code>) to ensure the attacker’s embedded miner settings remain intact.</li>
</ul>
<p><strong>2. Embedded Miner Configuration</strong></p>
<ul>
<li>The binary is compiled with an internal mining configuration, allowing XMRIG to run without an external config file.</li>
<li>Mining traffic is routed to multiple Monero pools over plaintext ports (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">:80</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">:4444</code>), SSL (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">:442</code>), and occasionally TOR addresses. Note that the port 442 here is not a typo.</li>
<li>The configuration optimizes performance by:<!-- -->
<ul>
<li>Running the miner in the background</li>
<li>Enabling large pages for <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">RandomX</code></li>
<li>Setting the donation level to zero</li>
<li>Maximizing CPU thread usage</li>
</ul>
</li>
</ul>
<p>By locking out administrators, preventing config changes, and injecting an attacker-controlled SSH key, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kswapd0</code> serves as a stealthy persistence mechanism — allowing for continuous Monero mining and unauthorized remote access, all while masquerading as a legitimate system process.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="subroutine-execution-of-b-directory-stealth-shellbot" class="absolute -top-32"></span>Subroutine Execution of b/ directory: STEALTH SHELLBOT</h3>
<p>As we described earlier, the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">a</code> binary in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">b/</code> directory was also executed via the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">init</code> scripts.</p>
<p></p>
<p>This script kicks off another <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">stop</code> script with the same purpose we described earlier: kill any known bad processes. Afterward, it creates a script called <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sync</code>, with the sole purpose of executing the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">run</code> script. This script is referenced in the cronjob we described earlier. The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">run</code> script contains three base64-encoded blobs, which are piped to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">perl</code>. An example of a shortened script is shown below:</p>
<p></p>
<p>Upon base64 decoding, obfuscated <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">perl</code> scripts are identified. These scripts leverage a <a href="https://perlobfuscator.com/">public Perl Obfuscator</a> utility to obfuscate their contents, making them harder to analyze:</p>
<p></p>
<p>Fortunately, the author left the standard comments in the obfuscated scripts. By using the <a href="https://perlobfuscator.com/decode-stunnix-5.17.1.pl">publicly available deobfuscator</a> we can deobfuscate the script through the following command:</p>
<pre><code>perl decode-stunnix-5.17.1.pl &lt; obfuscated_run.pl &gt; deobfuscated_run.pl</code></pre>
<p>After which we can view the deobfuscated contents:</p>
<p></p>
<p>This is just the first few lines of the script, for illustrative purposes. This deobfuscation technique can also be used for the other obfuscated Perl scripts used by OUTLAW. We will take a closer look at these scripts in just a moment.</p>
<p>The script ends off with installing its own SSH public key for persistent access, setting restrictive permissions, and making the directory immutable to prevent modification through <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">chattr</code>:</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="stealth-shellbot-scripts" class="absolute -top-32"></span>STEALTH SHELLBOT Scripts</h4>
<p>The STEALTH SHELLBOT scripts used in OUTLAW are not custom-built but rather publicly available IRC bot scripts, often sourced from old GitHub repositories and underground forums. These scripts have been around for over a decade, originally designed for remote administration, automation, and botnet management. However, they have since been repurposed by malware authors for malicious activities.</p>
<p>SHELLBOT scripts operate as IRC-based backdoors, allowing attackers to remotely control infected machines via predefined commands sent through an IRC channel. Once connected to the attacker’s IRC server, these bots can:</p>
<ul>
<li>Execute arbitrary shell commands</li>
<li>Download and execute additional payloads</li>
<li>Launch DDoS attacks (in older variants)</li>
<li>Steal credentials or exfiltrate system information</li>
<li>Manage crypto miners or other malware components</li>
</ul>
<p>OUTLAW integrates these legacy SHELLBOT scripts as a secondary persistence mechanism, ensuring that even if its brute-force modules are disrupted, attackers still retain a remote foothold. The bot connects to an attacker-controlled IRC C2, where it listens for further commands, enabling on-demand execution of malicious actions.</p>
<p>While these scripts are not novel, their continued use highlights how attackers rely on publicly available tools rather than developing new malware from scratch.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="subroutine-execution-of-c-directory-customer-bruteforcer" class="absolute -top-32"></span>Subroutine Execution of c/ directory: Customer Bruteforcer</h3>
<p>As part of the third and final sub-routine, a custom bruteforce tool is deployed. This chain starts, similar to the previous sub-routines, from the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">init</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">init2</code> scripts. These scripts both call the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">start</code> script, containing the following contents:</p>
<p></p>
<p>This script stores the current working directory, provides all permissions (777) to all files in the current directory, and creates a script named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">aptitude</code> (which is also called by the previously set up cron job), to run the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">run</code> script. After creating <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">aptitude</code>, it is granted execution permissions and is run.</p>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">run</code> script is used to gather CPU architecture information and count CPU cores to determine execution behavior, as shown below:</p>
<p></p>
<p>If the system is x86_64, it checks whether the CPU has fewer than 7 cores, introducing a randomized delay before executing <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">./go</code> in the background. If 7 or more cores are detected, execution is skipped or altered (with a previously used binary <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">golan</code> now commented out). The threat actor may have been testing or working with a Golang binary that can make full use of the number of cores present in a system, but that is just a guess.</p>
<p>In most scenarios, the execution flow moves to the bash script called <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">go</code>:</p>
<p></p>
<p>The script determines the CPU architecture and assigns a thread count accordingly:</p>
<ul>
<li>ARM-based systems → 75 threads</li>
<li>i686 (32-bit x86) → 325 threads</li>
<li>All others (default) → 475 threads</li>
</ul>
<p>It then enters an infinite loop, executing the following actions:</p>
<ol>
<li>Creates and cleans up temporary files (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">v</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">p</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ip</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">xtr*</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">a.*</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">b.*</code>).</li>
<li>Writes hardcoded values (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">257.287.563.234</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sdaferthqhr34312asdfa</code>) into files <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">c</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">d</code>.</li>
<li>Waits for a random delay (1-30 seconds) before launching <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">blitz</code>.</li>
<li>Executes <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">blitz</code> for 3 hours with specified parameters (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">-t $threads</code> suggests multi-threaded processing).</li>
<li>Performs post-execution cleanup, removing temporary and log files before repeating the cycle.</li>
</ol>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="blitz" class="absolute -top-32"></span>BLITZ</h4>
<p>OUTLAW is a self-propagating worm that spreads laterally through SSH brute-force attacks using BLITZ, its custom-built brute-forcer. Designed for aggressive, automated credential attacks, BLITZ systematically scans for and compromises systems with weak or default SSH credentials, allowing the malware to expand its foothold with minimal attacker intervention.</p>
<h5 class="eyebrow relative"><span id="blitz-execution-process" class="absolute -top-32"></span>BLITZ Execution Process</h5>
<p>Upon execution, BLITZ follows a structured attack sequence:</p>
<ol>
<li><strong>IP Target and Credential Retrieval</strong>
<ul>
<li>BLITZ contacts an SSH C2 server to fetch a list of target IPs and credential pairs.</li>
</ul>
</li>
<li><strong>Brute-Force Authentication &amp; System Profiling</strong>
<ul>
<li>Using multi-threaded SSH brute-forcing, BLITZ attempts to authenticate with stolen credentials.</li>
<li>Once access is gained, it:<!-- -->
<ul>
<li>Changes the user’s password for persistent access.</li>
<li>Executes system reconnaissance commands, collecting:<!-- -->
<ul>
<li>User privileges</li>
<li>CPU details</li>
<li>SSH banner information</li>
<li>OS version</li>
</ul>
</li>
<li>Exfiltrates gathered data to the C2 server.</li>
</ul>
</li>
</ul>
</li>
<li><strong>Subnet Scanning &amp; Lateral Movement</strong>
<ul>
<li>The malware scans the local subnet of newly compromised systems, identifying additional SSH-accessible machines to attack.</li>
</ul>
</li>
<li><strong>Self-Replication &amp; Malware Deployment</strong>
<ul>
<li>Instead of downloading from an external C2, BLITZ directly transfers the dota3.tar.gz malware package from the infecting host to the new victim, reinforcing persistence and minimizing reliance on external infrastructure.</li>
</ul>
</li>
</ol>
<p>By combining automated brute-force attacks, system profiling, subnet scanning, and direct malware transfer, BLITZ maximizes infection efficiency while ensuring continued network expansion.</p>
<h5 class="eyebrow relative"><span id="binary-analysis--c2-communication" class="absolute -top-32"></span>Binary Analysis &amp; C2 Communication</h5>
<p>Beyond brute-force operations, analysis reveals that BLITZ executes its tasks by interacting with system shell commands and an embedded SSH library. Once connected to a compromised system, it queries the C2 server for updated targets and relays authentication data.</p>
<p></p>
<p>Additionally, OUTLAW incorporates a hardcoded SSH key for C2 authentication, which must be unlocked using the password &quot;pegasus&quot;. Upon successful authentication, Blitz logs attack details into a &quot;v&quot; file, structured as follows:</p>
<p>This log contains:</p>
<ul>
<li>Original username and password used in the attack.</li>
<li>The victim’s IP address and the new password set by the malware.</li>
<li>SSH port and OS details, including CPU specifications.</li>
</ul>
<p>Once BLITZ completes its scanning cycle, the &quot;v&quot; file is exfiltrated to an SSH C2 server, providing attackers with a continuously updated list of infected systems.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="post-compromise" class="absolute -top-32"></span>Post-Compromise</h2>
<p>To analyze the attacker’s post-compromise behavior, we deliberately set up a honeypot and proactively uploaded its credentials to the same SSH C2 server used by the attacker. This effectively invited the attacker into our controlled environment, allowing us to closely monitor their subsequent actions.</p>
<p>A few days after BLITZ successfully brute-forced and set a new password on the honeypot system, we observed a remote login using these credentials. The login originated from 212.234.225[.]29.  The attacker immediately performed basic reconnaissance by running the w command to check who was logged in and then executing ps to see what processes were running. In the course of typing commands, they made a small typo and killed the prompt with a quick Ctrl+C, indicating a manual interaction rather than an automated script at this stage. Next, the attacker pasted a series of commands to download a fresh copy of dota3.tar.gz via <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">wget</code>, unpacked it, and executed the newly fetched script.</p>
<p>This whole chain of activity can be displayed through <a href="https://www.elastic.co/guide/en/security/current/session-view.html">session view</a>, an investigation tool that allows you to examine Linux process data organized in a tree-like structure according to the Linux logical event model, with processes organized by parentage and time of execution. It displays events in a highly readable format that is inspired by the terminal. This makes it a powerful tool for monitoring and investigating session activity on your Linux infrastructure and understanding user and service behavior.</p>
<p></p>
<p>The attack chain displayed above mirrors the original infection method, suggesting that the attacker was either updating components or re-infecting the host to maintain persistence. Soon after verifying that the updated payload was running, the attacker disconnected from the host, leaving behind an environment primed for continued SSH brute-forcing, cryptocurrency mining, and remote control via IRC.</p>
<p>This brief login serves as a reminder that even unsophisticated campaigns can include pockets of interactive attacker activity—a manual &quot;quality check&quot; of sorts—underscoring the importance of timely detection and swift containment.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="detecting-outlaw-through-mitre-attck" class="absolute -top-32"></span>Detecting OUTLAW through MITRE ATT&amp;CK</h2>
<p>OUTLAW is a Linux malware that relies on SSH brute-force attacks, cryptocurrency mining, and worm-like propagation to infect and maintain control over systems. While not highly sophisticated, it covers a broad range of MITRE ATT&amp;CK techniques, making it an effective case for detection engineering.</p>
<p>This section maps OUTLAW’s attack chain to MITRE ATT&amp;CK, highlighting Elastic SIEM and endpoint rules and threat-hunting queries that can identify its activity at different stages.</p>
<p>OUTLAW follows a structured infection flow:</p>
<ul>
<li><strong>Initial Access</strong> – SSH brute-force against weak credentials.</li>
<li><strong>Execution</strong> – Runs malicious scripts to kick off several stages of malware infection.</li>
<li><strong>Persistence</strong> – Installs cron jobs and modifies SSH keys.</li>
<li><strong>Defense Evasion</strong> – Hides in hidden directories, modifies file permissions, uses packing techniques, command encoding, and obfuscates scripts.</li>
<li><strong>Credential Access</strong> – Modifies credentials and injects public SSH keys.</li>
<li><strong>Discovery</strong> – Enumerates user, system, and hardware details.</li>
<li><strong>Lateral Movement</strong> – Spreads via internal SSH brute-force and malware transfer.</li>
<li><strong>Collection &amp; Exfiltration</strong> – Collects and exfiltrates system data to its C2.</li>
<li><strong>Command and Control</strong> – Uses socat and STEALTH SHELLBOT for C2 communication.</li>
<li><strong>Impact</strong> – Launches XMRIG to mine cryptocurrency and leverages the infected host as a brute-force node.</li>
</ul>
<p>The following sections detail detection strategies for each technique, helping defenders effectively identify and mitigate OUTLAW’s infections.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="ta001-initial-access" class="absolute -top-32"></span>TA001: Initial Access</h3>
<p>OUTLAW gains initial access through opportunistic SSH brute-forcing, targeting systems with weak or default credentials. Elastic pre-built <a href="https://github.com/elastic/detection-rules/">detection rules</a> can successfully detect this method of initial access. These include:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/linux/credential_access_potential_linux_ssh_bruteforce_external.toml">Potential External Linux SSH Brute Force Detected</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/linux/credential_access_potential_successful_linux_ssh_bruteforce.toml">Potential Successful SSH Brute Force Attack</a></li>
</ul>
<p>Additionally, there are several rules based on authentication logs to detect suspicious SSH authentications:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_first_time_public_key_authentication.toml">Successful SSH Authentication from Unusual SSH Public Key</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_successful_ssh_authentication_by_unusual_user.toml">Successful SSH Authentication from Unusual User</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_successful_ssh_authentication_by_unusual_ip.toml">Successful SSH Authentication from Unusual IP Address</a></li>
</ul>
<p>Besides relying on detections, it is important to incorporate threat hunting into your workflow. Elastic Security provides several hunting queries using <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/esql.html">ES|QL</a> and <a href="https://www.elastic.co/guide/en/kibana/current/osquery.html">OSQuery</a>, publicly available in our <a href="https://github.com/elastic/detection-rules">Detection Rules repository</a>, specifically in the <a href="https://github.com/elastic/detection-rules/tree/main/hunting">Linux hunting subdirectory</a>. For example, the following two hunts may help in identifying different stages of the attack:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/hunting/linux/queries/login_activity_by_source_address.toml">Logon Activity by Source IP</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/hunting/linux/queries/excessive_ssh_network_activity_unique_destinations.toml">Excessive SSH Network Activity to Unique Destinations</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="ta002-execution" class="absolute -top-32"></span>TA002: Execution</h3>
<p>After gaining initial access, OUTLAW executes a series of scripts and binaries to establish control. Upon downloading and unpacking, we detect:</p>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/behavior/rules/linux/persistence_file_downloaded_from_suspicious_source_by_web_server.toml">File Downloaded from Suspicious Source by Web Server</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/yara/rules/Linux_Trojan_Pornoasset.yar">Memory Threat Detection Alert: Linux.Trojan.Pornoasset</a></li>
</ul>
<p>The STEALTH SHELLBOT script is detected through:</p>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/behavior/rules/linux/execution_script_executed_through_unusual_parent_process.toml">Script Executed Through Unusual Parent Process</a></li>
</ul>
<p>Additionally, the malware executes multiple suspicious system commands, triggering:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/rules/linux/execution_suspicious_executable_running_system_commands.toml">Suspicious System Commands Executed by Previously Unknown Executable</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="ta003-persistence" class="absolute -top-32"></span>TA003: Persistence</h3>
<p>This combination of cron-based execution and SSH key manipulation allows OUTLAW to maintain a persistent foothold on compromised systems. Both of these persistence techniques are extensively researched in our &quot;<a href="https://www.elastic.co/security-labs/primer-on-persistence-mechanisms">Linux Detection Engineering -  A primer on persistence mechanisms</a>&quot; publication. We can detect these techniques through the following SIEM and <a href="https://github.com/elastic/protections-artifacts">endpoint rules</a>:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/main/rules/linux/persistence_cron_job_creation.toml">Cron Job Created or Modified</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/cross-platform/persistence_ssh_authorized_keys_modification.toml">SSH Authorized Keys File Modification</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/main/rules/integrations/fim/persistence_suspicious_file_modifications.toml">Potential Persistence via File Modification</a></li>
</ul>
<p>Additionally, we can hunt for these techniques through the following ES|QL and OSQuery hunts:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/hunting/linux/queries/persistence_via_cron.toml">Persistence via Cron</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/hunting/linux/queries/persistence_via_ssh_configurations_and_keys.toml">Persistence via SSH Configurations and/or Keys</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="ta005-defense-evasion" class="absolute -top-32"></span>TA005: Defense Evasion</h3>
<p>OUTLAW employs multiple defense evasion techniques to avoid detection. One of its primary methods is Base64 decoding, which is detected through the following pre-built rules:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/b9e8115c2fb55c328ea8e9830c96ce37d2f316c5/rules/linux/defense_evasion_interpreter_launched_from_decoded_payload.toml">Base64 Decoded Payload Piped to Interpreter</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/b9e8115c2fb55c328ea8e9830c96ce37d2f316c5/rules/linux/defense_evasion_base64_decoding_activity.toml">Unusual Base64 Encoding/Decoding Activity</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/linux/defense_evasion_linux_payload_decoded_and_decrypted_via_built_in_utility.toml">Linux Payload Decoded and Decrypted via Built-in Utility</a></li>
</ul>
<p>Additionally, the malware&#x27;s binaries are packed with UPX, reducing their size and altering their signature to evade traditional malware detection. Once the malware unpacks in memory, this is detected through our general malware detections.</p>
<p>Continuing down the execution chain, the malware creates several hidden files and directories and modifies them using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">chattr</code>:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/rules/linux/defense_evasion_file_mod_writable_dir.toml">File Permission Modification in Writable Directory</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/rules/linux/defense_evasion_hidden_file_dir_tmp.toml">Creation of Hidden Files and Directories via CommandLine</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/rules/linux/defense_evasion_chattr_immutable_file.toml">File made Immutable by Chattr</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/behavior/rules/linux/defense_evasion_chattr_execution_from_unusual_parent.toml">Chattr Execution from Unusual Parent</a></li>
</ul>
<p>We can further enhance detection through the following hunting query:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/hunting/linux/queries/defense_evasion_via_hidden_process_execution.toml">Hidden Process Execution</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="ta006-credential-access" class="absolute -top-32"></span>TA006: Credential Access</h3>
<p>OUTLAW maintains persistent access to a compromised system by manipulating credentials. Following successful SSH brute-force authentication, the malware replaces the existing SSH authorized_keys file with a new version containing a malicious SSH public key, thereby granting persistent access. This is detected through the following signals:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/cross-platform/persistence_ssh_authorized_keys_modification.toml">SSH Authorized Keys File Modification</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/defense_evasion_authorized_keys_file_deletion.toml">SSH Authorized Keys File Deletion</a></li>
</ul>
<p>The malware then changes the user credentials for the authenticated account by entering a new password using the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">passwd</code> utility:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/persistence_user_credential_modification_via_echo.toml">Linux User Account Credential Modification</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="ta007-discovery" class="absolute -top-32"></span>TA007: Discovery</h3>
<p>OUTLAW gathers system information upon successful infection to profile the compromised environment. The malware executes various commands to collect details about the system’s CPU, user privileges, operating system, memory usage, and available binaries. This reconnaissance step helps the attacker assess the system’s capabilities and determine how best to utilize the compromised machine. These are all detected through several <a href="https://www.elastic.co/guide/en/security/current/building-block-rule.html">building block rules</a>, as listed in our <a href="https://github.com/elastic/detection-rules/tree/main/rules_building_block">rules_building_block directory</a>. Below is a short list of the most important ones triggered by OUTLAW:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_linux_system_information_discovery.toml">Linux System Information Discovery</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_process_discovery_via_builtin_tools.toml">Process Discovery via Built-In Applications</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_linux_system_owner_user_discovery.toml">System Owner/User Discovery Linux</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_of_accounts_or_groups_via_builtin_tools.toml">Account or Group Discovery via Built-In Tools</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_system_network_connections.toml">System Network Connections Discovery</a></li>
</ul>
<p>The default interface settings do not include building block rules due to their relatively high noise levels. However, these rules can be enabled to assist in the identification of potential threats.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="ta008-lateral-movement" class="absolute -top-32"></span>TA008: Lateral Movement</h3>
<p>OUTLAW malware spreads through a compromised network by carrying out internal SSH brute-force attacks. We can identify this behavior through the following ES|QL rules:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/e28512a32fc643651a6bc91444e460ca8f5164be/rules/linux/discovery_port_scanning_activity_from_compromised_host.toml">Potential Port Scanning Activity from Compromised Host</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/e28512a32fc643651a6bc91444e460ca8f5164be/rules/linux/discovery_subnet_scanning_activity_from_compromised_host.toml">Potential Subnet Scanning Activity from Compromised Host</a></li>
</ul>
<p>Once a system is successfully brute-forced, the malware package, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">dota3.tar.gz</code>, is deployed from the infected host to the new target. The local subnet is then scanned for additional targets to ensure the malware&#x27;s continued propagation.</p>
<p>Elastic pre-built detection rules can identify these lateral movement attempts:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules/linux/credential_access_potential_linux_ssh_bruteforce_internal.toml">Potential Internal Linux SSH Brute Force Detected</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/lateral_movement_remote_file_creation_world_writeable_dir.toml">Remote File Creation in World Writeable Directory</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/lateral_movement_unusual_remote_file_creation.toml">Unusual Remote File Creation</a></li>
</ul>
<p>Additionally, upon copying the OUTLAW malware to a remote host, malware prevention alerts kick in.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="ta009-collection--ta010-exfiltration" class="absolute -top-32"></span>TA009: Collection &amp; TA010: Exfiltration</h3>
<p>OUTLAW collects basic system information, credentials, and SSH details from compromised machines, primarily for tracking infected hosts and facilitating further attacks. This data is stored in a simple text file before being uploaded to a C2 server. Since this collection activity is limited to gathering system details and writing them to a file, it is not inherently suspicious on its own.</p>
<p>Exfiltration occurs when OUTLAW initiates an outbound SSH connection via sftp-server to transfer the collected information to a predefined C2 server. While this may resemble normal SSH activity, we can detect suspicious execution of file transfer utilities through ES|QL:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/exfiltration_unusual_file_transfer_utility_launched.toml">Unusual File Transfer Utility Launched</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="ta011-command-and-control" class="absolute -top-32"></span>TA011: Command and Control</h3>
<p>OUTLAW maintains communication with its C2 infrastructure through multiple channels, allowing attackers to issue commands, exfiltrate data, and manage infected systems. We can detect several of the utilities used by the malware through the following rules:</p>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/fbebc6f98eb1070bd96235ea432158756b3f2038/behavior/rules/linux/execution_socat_reverse_shell_or_listener_activity.toml">Socat Reverse Shell or Listener Activity</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/command_and_control_frequent_egress_netcon_from_sus_executable.toml">High Number of Egress Network Connections from Unusual Executable</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/command_and_control_suspicious_network_activity_from_unknown_executable.toml">Suspicious Network Activity to the Internet by Previously Unknown Executable</a>.</li>
</ul>
<p>The same hunting queries that were relevant for detecting the malware’s initial access attempts, can also be used to hunt for this C2 activity. Additionally, the following hunting queries can be used:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/hunting/linux/queries/low_volume_external_network_connections_from_process.toml">Low Volume External Network Connections from Process by Unique Agent</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/hunting/linux/queries/command_and_control_via_unusual_file_downloads_from_source_addresses.toml">Unusual File Downloads from Source Addresses</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/hunting/linux/queries/excessive_ssh_network_activity_unique_destinations.toml">Excessive SSH Network Activity to Unique Destinations</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="ta040-impact" class="absolute -top-32"></span>TA040: Impact</h3>
<p>OUTLAW impacts infected systems by consuming CPU resources for cryptocurrency mining and performing SSH brute-force attacks to propagate. Several CPU and memory optimizations are attempted before launching the modified XMRIG mining software, including enabling MSR write access and setting kernel parameters such as hugepages. These modifications can be detected through the following rules:</p>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/linux/defense_evasion_suspicious_kernel_feature_activity.toml">Suspicious Kernel Feature Activity</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/linux/impact_msr_write_access_enabled.toml">MSR Write Access Enabled</a></li>
</ul>
<p>As OUTLAW attempts to enable MSR write access via modprobe but lacks the required permissions, kernel driver-related rules are triggered:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules/linux/persistence_kernel_driver_load_by_non_root.toml">Kernel Driver Load by Non-Root User</a></li>
<li><a href="https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules/linux/persistence_kernel_driver_load.toml">Kernel Driver Load</a></li>
</ul>
<p>These rules directly monitor for <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">init_module()</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">finit_module()</code> syscalls, through <a href="https://www.elastic.co/guide/en/integrations/current/auditd.html">Auditd</a>. For more information on how to set up the <a href="https://www.elastic.co/guide/en/integrations/current/auditd_manager.html">Auditd Manager integration</a> to capture driver events and much more, check out the <a href="https://www.elastic.co/security-labs/linux-detection-engineering-with-auditd">Linux Detection Engineering with Auditd</a> publication.</p>
<p>Simultaneously, SSH brute-force attempts are launched from the infected host, triggering:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/impact_potential_bruteforce_malware_infection.toml">Potential Malware-Driven SSH Brute Force Attempt</a></li>
</ul>
<p>Throughout its execution, OUTLAW runs kill scripts to terminate competing malware or leftover processes from previous infections. This behavior triggers:</p>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/defense_evasion_kill_command_executed.toml">Kill Command Executed</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/cross-platform/execution_kill_command_executed_from_binary_in_unusual_location.toml">Kill Command Executed from Binary in Unusual Location</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/cross-platform/defense_evasion_kill_command_executed_from_a_hidden_process.toml">Kill Command Executed from a Hidden Process</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="indicators-of-compromise-iocs" class="absolute -top-32"></span>Indicators of Compromise (IOCs)</h2>
<p>The complete set of indicators can be found as a bundle on <a href="https://github.com/elastic/labs-releases/tree/main/indicators/outlaw">Github</a>.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="yara-signatures" class="absolute -top-32"></span>Yara Signatures</h4>
<pre><code>rule Linux_Hacktool_Outlaw_cf069e73 {
    meta:
        author = &quot;Elastic Security&quot;
        description = &quot;OUTLAW SSH bruteforce component fom the Dota3 package&quot;
        reference_sample = &quot;c3efbd6b5e512e36123f7b24da9d83f11fffaf3023d5677d37731ebaa959dd27&quot;
      
    strings:
        $ssh_key_1 = &quot;MIIJrTBXBgkqhkiG9w0BBQ0wSjApBgkqhkiG9w0BBQwwHAQI8vKBZRGKsHoCAggA&quot;
        $ssh_key_2 = &quot;MAwGCCqGSIb3DQIJBQAwHQYJYIZIAWUDBAECBBBC3juWsJ7DsDd2wH2XI+vUBIIJ&quot;
        $ssh_key_3 = &quot;UCQ2viiVV8pk3QSUOiwionAoe4j4cBP3Ly4TQmpbLge9zRfYEUVe4LmlytlidI7H&quot;
        $ssh_key_4 = &quot;O+bWbjqkvRXT9g/SELQofRrjw/W2ZqXuWUjhuI9Ruq0qYKxCgG2DR3AcqlmOv54g&quot;
        $path_1 = &quot;/home/eax/up&quot;
        $path_2 = &quot;/var/tmp/dota&quot;
        $path_3 = &quot;/dev/shm/ip&quot;
        $path_4 = &quot;/dev/shm/p&quot;
        $path_5 = &quot;/var/tmp/.systemcache&quot;
        $cmd_1 = &quot;cat /proc/cpuinfo | grep name | head -n 1 | awk &#x27;{print $4,$5,$6,$7,$8,$9;}&#x27;&quot;
        $cmd_2 = &quot;cd ~; chattr -ia .ssh; lockr -ia .ssh&quot;
        $cmd_3 = &quot;sort -R b | awk &#x27;{ if ( NF == 2 ) print } &#x27;&gt; p || cat b | awk &#x27;{ if ( NF == 2 ) print } &#x27;&gt; p; sort -R a&quot;
        $cmd_4 = &quot;rm -rf /var/tmp/dota*&quot;
        $cmd_5 = &quot;rm -rf a b c d p ip ab.tar.gz&quot;
    condition:
        (all of ($ssh_key*)) or (3 of ($path*) and 3 of ($cmd*))
}</code></pre>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="siem-and-endpoint-rules-overview-by-mitre-attck-tactic" class="absolute -top-32"></span>SIEM and Endpoint Rules Overview by MITRE ATT&amp;CK Tactic</h4>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Technique ID</th><th>Description</th></tr></thead><tbody><tr><td><strong>TA001: Initial Access</strong></td><td><a href="https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/linux/credential_access_potential_linux_ssh_bruteforce_external.toml">Potential External Linux SSH Brute Force Detected</a> <br/> <a href="https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/linux/credential_access_potential_successful_linux_ssh_bruteforce.toml">Potential Successful SSH Brute Force Attack</a> <br/> <a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_first_time_public_key_authentication.toml">Successful SSH Authentication from Unusual SSH Public Key</a> <br/>        <a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_successful_ssh_authentication_by_unusual_user.toml">Successful SSH Authentication from Unusual User</a> <br/> <a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_successful_ssh_authentication_by_unusual_ip.toml">Successful SSH Authentication from Unusual IP Address</a></td></tr><tr><td><strong>TA002: Execution</strong></td><td><a href="https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/behavior/rules/linux/persistence_file_downloaded_from_suspicious_source_by_web_server.toml">File Downloaded from Suspicious Source by Web Server</a> <br/> <a href="https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/yara/rules/Linux_Trojan_Pornoasset.yar">Linux.Trojan.Pornoasset</a> <br/> <a href="https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/behavior/rules/linux/execution_script_executed_through_unusual_parent_process.toml">Script Executed Through Unusual Parent Process</a> <br/> <a href="https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/rules/linux/execution_suspicious_executable_running_system_commands.toml">Suspicious System Commands Executed by Previously Unknown Executable</a></td></tr><tr><td><strong>TA003: Persistence</strong></td><td><a href="https://github.com/elastic/detection-rules/blob/main/rules/linux/persistence_cron_job_creation.toml">Cron Job Created or Modified</a> <br/> <a href="https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/cross-platform/persistence_ssh_authorized_keys_modification.toml">SSH Authorized Keys File Modification</a> <br/> <a href="https://github.com/elastic/detection-rules/blob/main/rules/integrations/fim/persistence_suspicious_file_modifications.toml">Potential Persistence via File Modification</a></td></tr><tr><td><strong>TA005: Defense Evasion</strong></td><td><a href="https://github.com/elastic/detection-rules/blob/b9e8115c2fb55c328ea8e9830c96ce37d2f316c5/rules/linux/defense_evasion_interpreter_launched_from_decoded_payload.toml">Base64 Decoded Payload Piped to Interpreter</a> <br/> <a href="https://github.com/elastic/detection-rules/blob/b9e8115c2fb55c328ea8e9830c96ce37d2f316c5/rules/linux/defense_evasion_base64_decoding_activity.toml">Unusual Base64 Encoding/Decoding Activity</a></td></tr><tr><td><strong>TA006: Credential Access</strong></td><td><a href="https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/cross-platform/persistence_ssh_authorized_keys_modification.toml">SSH Authorized Keys File Modification</a> <br/> <a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/defense_evasion_authorized_keys_file_deletion.toml">SSH Authorized Keys File Deletion</a> <br/> <a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/persistence_user_credential_modification_via_echo.toml">Linux User Account Credential Modification</a></td></tr><tr><td><strong>TA007: Discovery</strong></td><td><a href="https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_linux_system_information_discovery.toml">Linux System Information Discovery</a></td></tr><tr><td><strong>TA008: Lateral Movement</strong></td><td><a href="https://github.com/elastic/detection-rules/blob/e28512a32fc643651a6bc91444e460ca8f5164be/rules/linux/discovery_port_scanning_activity_from_compromised_host.toml">Potential Port Scanning Activity from Compromised Host</a></td></tr><tr><td><strong>TA009 &amp; TA010: Collection &amp; Exfiltration</strong></td><td><a href="https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/exfiltration_unusual_file_transfer_utility_launched.toml">Unusual File Transfer Utility Launched</a></td></tr><tr><td><strong>TA011: Command and Control</strong></td><td><a href="https://github.com/elastic/protections-artifacts/blob/fbebc6f98eb1070bd96235ea432158756b3f2038/behavior/rules/linux/execution_socat_reverse_shell_or_listener_activity.toml">Socat Reverse Shell or Listener Activity</a></td></tr><tr><td><strong>TA040: Impact</strong></td><td><a href="https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/linux/defense_evasion_suspicious_kernel_feature_activity.toml">Suspicious Kernel Feature Activity</a></td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="conclusion" class="absolute -top-32"></span>Conclusion</h2>
<p>OUTLAW exemplifies how even unsophisticated malware can persist and scale effectively in modern environments. Despite lacking advanced evasion techniques, its combination of SSH brute-force attacks, self-replication, and modular components allows it to maintain a long-running botnet. OUTLAW ensures continuous expansion with minimal attacker intervention by leveraging compromised hosts to propagate infections further.</p>
<p>Our honeypot experiment provided a rare glimpse into the attacker&#x27;s real-world behavior, confirming that while much of OUTLAW’s operation is automated, there are moments of direct human interaction. The ability to observe manual commands, reconnaissance attempts, and even simple typographical errors highlights an often-overlooked aspect of botnet maintenance—operator-driven quality control. These insights reinforce the need for detection strategies that account not just for automated attacks but also for manual post-compromise activity.</p>
<p>By understanding how OUTLAW operates, spreads, and monetizes infections, defenders can develop robust detection strategies to mitigate its impact. This report provides actionable SIEM rules, threat-hunting queries, and forensic insights, enabling security teams to stay ahead of similar evolving threats.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="references" class="absolute -top-32"></span>References</h2>
<p>[1] CounterCraft, <a href="https://www.countercraftsec.com/blog/dota3-malware-again-and-again/">DOTA3 Malware Again and Again</a></p>
<p>[2] Juniper Networks, <a href="https://blogs.juniper.net/en-us/threat-research/dota3-is-your-internet-of-things-device-moonlighting">DOTA3: Is Your Internet of Things Device Moonlighting?</a></p>
<p>[3] SANS ISC, <a href="https://isc.sans.edu/diary/Hygiene+Hygiene+Hygiene+Guest+Diary/31260">Hygiene Hygiene Hygiene</a></p>
<p>[4] Darktrace, <a href="https://darktrace.com/blog/outlaw-returns-uncovering-returning-features-and-new-tactics">Outlaw Returns: Uncovering Returning Features and New Tactics</a></p></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/outlaw-linux-malware#key-takeaways"><span>Key&nbsp;Takeaways</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/outlaw-linux-malware#outlaw-overview"><span>OUTLAW&nbsp;Overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/outlaw-linux-malware#outlaw-execution-chain"><span>OUTLAW Execution&nbsp;Chain</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/outlaw-linux-malware#initial-access-blitz"><span>Initial Access:&nbsp;blitz</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/outlaw-linux-malware#execution-tddwrt7ssh"><span>Execution:&nbsp;tddwrt7s.sh</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/outlaw-linux-malware#main-initialization-script-initall"><span>Main Initialization script:&nbsp;initall</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/outlaw-linux-malware#subroutine-execution-of-a-directory-xmrig"><span>Subroutine Execution of a/ directory:&nbsp;XMRIG</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/outlaw-linux-malware#kswapd01-"><span>kswapd01&nbsp;</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/outlaw-linux-malware#kswapd0-"><span>kswapd0&nbsp;</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/outlaw-linux-malware#subroutine-execution-of-b-directory-stealth-shellbot"><span>Subroutine Execution of b/ directory: STEALTH&nbsp;SHELLBOT</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/elastic-security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Outlaw Linux Malware: Persistent, Unsophisticated, and Surprisingly Effective&amp;url=https://www.elastic.co/security-labs/outlaw-linux-malware" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/outlaw-linux-malware" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/outlaw-linux-malware&amp;title=Outlaw Linux Malware: Persistent, Unsophisticated, and Surprisingly Effective" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/outlaw-linux-malware&amp;title=Outlaw Linux Malware: Persistent, Unsophisticated, and Surprisingly Effective" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2025<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Outlaw Linux Malware: Persistent, Unsophisticated, and Surprisingly Effective","slug":"outlaw-linux-malware","date":"2025-04-01","description":"Outlaw is a persistent Linux malware leveraging simple brute-force and mining tactics to maintain a long-lasting botnet.","image":"outlaw.jpg","tags":[{"slug":"OUTLAW"},{"slug":"linux"},{"slug":"malware"}],"body":{"raw":"## Preface\n\nOUTLAW is a persistent yet unsophisticated auto-propagating coinminer package observed across multiple versions over the past few years [[1](https://www.countercraftsec.com/blog/dota3-malware-again-and-again/)], [[2](https://blogs.juniper.net/en-us/threat-research/dota3-is-your-internet-of-things-device-moonlighting)], [[3](https://isc.sans.edu/diary/Hygiene+Hygiene+Hygiene+Guest+Diary/31260)], [[4](https://darktrace.com/blog/outlaw-returns-uncovering-returning-features-and-new-tactics)]. Despite lacking stealth and advanced evasion techniques, it remains active and effective by leveraging simple but impactful tactics such as SSH brute-forcing, SSH key and cron-based persistence, and manually modified commodity miners and IRC channels. This persistence highlights how botnet operators can achieve widespread impact without relying on sophisticated techniques.\n\nTo gain deeper insights into OUTLAW’s behavior and operational patterns, we deployed a honeypot designed to attract and observe the attackers in action. By carefully crafting an environment that mimicked a vulnerable system, we were able to bait the adversaries into interacting with our server. This interaction revealed automated and manual actions, with operators entering commands directly, making modifications on the fly, and even mistyping commands—clear indicators of human involvement. A captured GIF showcases these moments, providing a rare glimpse into their real-time decision-making process.\n\n![Threat actors actions in a honeypot](/assets/images/outlaw-linux-malware/01-honeypot.gif \"Threat actors actions in a honeypot\")\n\n\nBy analyzing OUTLAW, we gain new insights into the tooling used by its operators and their evolving strategies over time. This malware presents a valuable opportunity to apply detection engineering principles, as its attack chain spans nearly the entire MITRE ATT\u0026CK framework. Examining its infection process allows us to develop effective detection strategies that capitalize on its predictable and repetitive behaviors.\n\nThis report provides a full attack chain analysis, including detailed detection rules and hunting queries. By breaking down OUTLAW’s components, we demonstrate how even rudimentary malware can maintain longevity in modern environments and how defenders can leverage its simplicity to enhance detection and response.\n\n\n## Key Takeaways\n\n* **Persistent but unsophisticated**: OUTLAW remains active despite using basic techniques like SSH brute-forcing, SSH key manipulation, and cron-based persistence.\n* **Commodity tooling**: The malware deploys modified `XMRig` miners, leverages IRC for C2, and includes publicly available scripts for persistence and defense evasion.\n* **Extensive attack surface**: OUTLAW’s infection chain spans nearly the entire MITRE ATT\u0026CK framework, offering many detection and hunting opportunities.\n* **Worm-like propagation**: OUTLAW uses its compromised hosts to launch further SSH brute-force attacks on their local subnets, rapidly expanding the botnet.\n\n\n## OUTLAW Overview\n\nOUTLAW follows a multi-stage infection process that begins with downloading and executing its payload, establishing persistence, and expanding its botnet through SSH brute-force attacks. The execution chain is displayed below:\n\n\n![OUTLAW infection chain overview](/assets/images/outlaw-linux-malware/02-flow.png \"OUTLAW infection chain overview\")\n\n\n**1. Initial Infection \u0026 Deployment**\n\n* The attack starts when `tddwrt7s.sh` downloads the `dota3.tar.gz` package from a C2 server.\n* The extracted `initall.sh` script executes, kicking off the infection chain.\n\n**2. Gaining Control \u0026 Persistence**\n\n\n\n* The malware ensures dominance by killing competing brute-forcers and miners.\n* It then deploys:\n    * Modified XMRIG for crypto mining (connecting to a mining pool).\n    * STEALTH SHELLBOT for remote control via IRC C2.\n    * BLITZ to perform SSH brute force attacks.\n\n**3. Propagation \u0026 Expansion**\n\n\n\n* The brute-force module retrieves target lists from an SSH C2 server and attempts SSH brute-force attacks on new machines.\n* Successfully compromised systems are infected, repeating the cycle.\n\nThis automated infection loop allows OUTLAW to remain active and profitable with minimal effort from attackers. Let’s take a deeper look at the entire attack chain.\n\n\n## OUTLAW Execution Chain\n\nOUTLAW effectively covers a wide range of tactics and techniques in the MITRE ATT\u0026CK framework. This section maps its behavior to provide an overview of its infection chain and methods.\n\n\n### Initial Access: blitz\n\nOUTLAW gains initial access through opportunistic SSH brute-forcing, targeting systems with weak or default credentials. The malware employs its `blitz` component, also known under other names such as `kthreadadd`, to perform high-volume scanning and password-guessing attempts. It leverages lists of target IPs and credentials retrieved from its C2 servers.\n\nOUTLAW also acts like a worm, automatically installing itself on every system that it successfully compromises. This self-propagation mechanism allows it to spread rapidly across networks, turning each newly infected device into another node for further brute-forcing and infection attempts.\n\nWe will take a deeper look into how OUTLAW performs these attacks and propagates itself later in the article.\n\n\n### Execution: tddwrt7s.sh\n\nThe first infections of OUTLAW seem to originate from a straightforward dropper script: `tddwrt7s.sh`. This shell script checks for an existing installation. If the malware is already present and unpacked, it will run the initall script, kicking off the infection chain. Otherwise, it will attempt to download the package from a list of provided staging servers. For illustration purposes, a shortened snippet of the dropper is shown below:\n\n\n![Dropper `tddwrt7s.sh` overview](/assets/images/outlaw-linux-malware/03-dropper.png \"Dropper `tddwrt7s.sh` overview\")\n\nThe extracted `dota3.tar.gz` package extracts its contents into a hidden folder called `.rsync`, and contains the following entries:\n\n```text\n ├── a\n │   ├── a\n │   ├── init0\n │   ├── kswapd0\n │   ├── kswapd01\n │   ├── run\n │   ├── socat\n │   └── stop\n ├── b\n │   ├── a\n │   ├── run\n │   └── stop\n ├── c\n │   ├── blitz\n │   ├── blitz32\n │   ├── blitz64\n │   ├── go\n │   ├── run\n │   ├── start\n │   ├── stop\n │   └── v\n ├── init\n ├── init2\n └── initall\n```\n\nLet’s deconstruct the execution chains one by one.\n\n\n### Main Initialization script: initall\n\nThe three `init` scripts control the overall execution flow and deployment of the malware. Starting with the `initall` script, the main initializer determines which execution path to take. It checks the system environment and decides whether to use `init` or `init2` based on file permissions and available directories.\n\nThese `init` scripts all use variable-based string concatenation obfuscation, where commands are split into small variable fragments that are dynamically concatenated and executed, making static analysis more difficult. For example, the `initall` script looks like this:\n\n\n![Obfuscated `initall` script](/assets/images/outlaw-linux-malware/04-obfuscation.png \"Obfuscated `initall` script\")\n\n\nHowever, by changing the `eval` to an `echo`, we can get the output without any effort: \n\n\n![De-obfuscated `initall` script](/assets/images/outlaw-linux-malware/05-deobfuscation.png \"De-obfuscated `initall` script\")\n \n\n\nThis script will, by default, consistently execute `init`. This is the primary execution path that installs the malware in the hidden directory `~/.configrc6`. The fallback execution path is `init2`, which is used when `~/.configrc6` is inaccessible. The main difference is that this path keeps all components in the current working directory. Applying the same deobfuscation principle as we did previously, we end up with the following two scripts:\n\n\n![Conditional sub-routines: `init` and `init2`](/assets/images/outlaw-linux-malware/06-subroutine.png \"Conditional sub-routines: `init` and `init2`\")\n\nThe first script (`init`) hides its components in the hidden directory `~/.configrc6`, while the second script (`init2`) runs directly from the working directory. Despite this difference, the execution flow remains the same, starting the binary named `a` in the `a/` and `b/` directories as background processes and establishing persistence. In both scripts, the malware installs cron jobs that execute its binaries at regular intervals and on system reboots:\n\n```text\n5 6 * * 0   ~/.configrc6/a/upd\n@reboot     ~/.configrc6/a/upd\n5 8 * * 0   ~/.configrc6/b/sync\n@reboot     ~/.configrc6/b/sync\n0 0 */3 * * ~/.configrc6/c/aptitude\n```\n\nAlthough the scripts execute the `a` binary in the `a/` and `b/` directories nearly simultaneously, we will follow the execution flow of the `a/` directory first. \n\n\n### Subroutine Execution of a/ directory: XMRIG\n\nThe first script that is executed is `a`, which removes any existing cron jobs using `crontab -r` and then stores the current working directory in a variable. It then creates a shell script called `upd` that checks if a process (stored in `bash.pid`) is still running. If the process is not running, it executes `./run` as a background process, ensuring that the malware is continuously restarted if terminated.\n\n\n![Startup script in the `a/` directory](/assets/images/outlaw-linux-malware/07-startup-a.png \"Startup script in the `a/` directory\")\n\nAdditionally, we see some commented commands, indicating that other versions of this malware may exist under names such as `rsync`, `go`, `kswapd0`, `blitz,` and `redtail`.\n\nFurther down the script, a function is created that checks if `/sys/module/msr/parameters/allow_writes` exists and sets it to \"on\" to enable writing to Model-Specific Registers (MSRs). If the file does not exist, it enables MSR writes through the `modprobe msr allow_writes=on` command.\n\n\n![XMRig optimization function: enable MSR writes](/assets/images/outlaw-linux-malware/08-xmrig-optimize.png \"XMRig optimization function: enable MSR writes\")\n\n\nNext, the function identifies the active CPU by checking `/proc/cpuinfo` and applies specific MSR register values to optimize performance. \n\n\n![XMRIG optimization function: apply MSR registers](/assets/images/outlaw-linux-malware/09-xmrig-registers.png \"XMRIG optimization function: apply MSR registers\")\n\nFinally, the function optimizes memory usage by enabling `hugepages` for all CPU cores, increasing memory access efficiency. It calculates the number of `hugepages` needed based on the available processors (`nproc`) and sets them in the `/sys/devices/system/node/node*/hugepages/` directories.\n\n\n![XMRig optimization function: enable `hugepages`](/assets/images/outlaw-linux-malware/10-xmrig-hugepages.png \"XMRig optimization function: enable `hugepages`\")\n\n\nThe `optimize_func()` function was not created by the threat actor. The threat actor used an open-source script from the `XMRig` repository, specifically the [randomx_boost.sh](https://github.com/xmrig/xmrig/blob/master/scripts/randomx_boost.sh) script, to aid in their infection chain.\n\nDepending on the user's privileges, it will either run the whole optimization function, or attempt to set the number of `hugepages` through `sysctl`:\n\n\n![Condition for running `optimize_func()` function](/assets/images/outlaw-linux-malware/11-condition-optimize.png \"Condition for running `optimize_func()` function\")\n\n\nAll steps performed in this chain show apparent signs of cryptocurrency mining system optimization. Finally, the script grants execution permissions to the `upd` file and \"777\" permissions to all files in its folder and runs `upd`.\n\nAs we saw earlier in the chain, the `upd` file checks whether the process stored in `bash.pid` is still running, and if it is not, it will execute the `run` script:\n\n\n![The `run` script for the`a/` folder](/assets/images/outlaw-linux-malware/12-run-script-a.png \"The `run` script for the `a/` folder\")\n\nThe run script will start the `stop` script, which is a typical script that bring down the defenses of any known miner configurations any known miner configurations and kill any known miner processes based on name/process ID or network traffic. A shortened version of this script is illustrated below:\n\n\n![The `stop` script for the `a/` folder](/assets/images/outlaw-linux-malware/13-stop-script-a.png \"The `stop` script for the `a/` folder\")\n\n\nInterestingly enough, a second process-killing script called `init0` is present, which is an [open-source script](https://github.com/MinervaLabsResearch/BlogPosts/blob/master/MinerKiller/MinerKiller.sh) for killing cryptocurrency miners in a Linux environment. This script is not being run, as the execution flow for this script was commented out in the `a` script.\n\nAfter the `stop` script has been successfully run, the `run` script starts the `kswapd01` and `kswapd0` binaries in the background via `nohup`. \n\n\n#### kswapd01 \n\nThe `kswap01` binary plays a critical role in ensuring persistent communication within the malware’s infrastructure. Its main task is to monitor and maintain a continuous `socat` process, which is essential for communication with the attacker’s C2 servers.\n\n\n![The main function of the `kswapd01` `socat` wrapper](/assets/images/outlaw-linux-malware/14-kswapd01-main.png \"image_toThe main function of the `kswapd01` `socat` wrapperoltip\")\n\nWhen executed, `kswap01` checks for any existing `socat` processes running on the infected machine. If no active connection is found, it proceeds to kill any running `socat` processes and selects an alternative IP address from a predefined list. The binary then establishes a new connection by launching a fresh `socat` process to listen on the local machine and forward traffic to a remote server, typically on port 4444. This ensures the malware maintains control over the infected system and can continue receiving commands from the attacker.\n\nHowever, it's important to note that not every version of the OUTLAW malware package observed includes the `socat` binary. In these cases, the functionality provided by `socat` is either replicated by other means or simply omitted, relying on alternative methods for maintaining persistence and communication.\n\nBy performing these checks and modifications, `kswap01` helps maintain the persistence of the C2 connection, making it harder for defenders to interrupt the communication channel between the attacker and the compromised system.\n\n\n#### kswapd0 \n\nThe file named `kswapd0` is a maliciously modified copy of the legitimate `XMRig` cryptocurrency miner (specifically version 6.22.1). \n\n\n![The `XMRig` version](/assets/images/outlaw-linux-malware/15-kswapd0-xmrig-version.png \"The `XMRig` version\")\n\nTwo major modifications define the malware’s behavior:\n\n\n**1. Startup Shell Commands**\n  * The malware removes and recreates the victim’s `~/.ssh` folder, injects an attacker-controlled SSH public key, and re-applies restrictive permissions (`chattr +ia`) to prevent modification. This grants persistent SSH access.\n  * It also removes or locks existing `XMRig` configuration files (e.g., `~/.xmrig.json`, `~/.config/xmrig.json`) to ensure the attacker’s embedded miner settings remain intact.\n\n\n**2. Embedded Miner Configuration**\n  * The binary is compiled with an internal mining configuration, allowing XMRIG to run without an external config file.\n  * Mining traffic is routed to multiple Monero pools over plaintext ports (`:80`, `:4444`), SSL (`:442`), and occasionally TOR addresses. Note that the port 442 here is not a typo. \n  * The configuration optimizes performance by:\n      * Running the miner in the background\n      * Enabling large pages for `RandomX`\n      * Setting the donation level to zero\n      * Maximizing CPU thread usage\n\nBy locking out administrators, preventing config changes, and injecting an attacker-controlled SSH key, `kswapd0` serves as a stealthy persistence mechanism — allowing for continuous Monero mining and unauthorized remote access, all while masquerading as a legitimate system process.\n\n\n### Subroutine Execution of b/ directory: STEALTH SHELLBOT\n\nAs we described earlier, the `a` binary in the `b/` directory was also executed via the `init` scripts.\n\n![The `a` script in the `b/` folder](/assets/images/outlaw-linux-malware/16-a-in-b-folder.png \"The `a` script in the `b/` folder\")\n\n\nThis script kicks off another `stop` script with the same purpose we described earlier: kill any known bad processes. Afterward, it creates a script called `sync`, with the sole purpose of executing the `run` script. This script is referenced in the cronjob we described earlier. The `run` script contains three base64-encoded blobs, which are piped to `perl`. An example of a shortened script is shown below:\n\n\n![Base64 encoded code](/assets/images/outlaw-linux-malware/17-base64-encoded.png \"Base64 encoded code\")\n\n\nUpon base64 decoding, obfuscated `perl` scripts are identified. These scripts leverage a [public Perl Obfuscator](https://perlobfuscator.com/) utility to obfuscate their contents, making them harder to analyze:\n\n\n![Perl obfuscated code](/assets/images/outlaw-linux-malware/18-perl-obfuscated-code.png \"Perl obfuscated code\")\n\n\nFortunately, the author left the standard comments in the obfuscated scripts. By using the [publicly available deobfuscator](https://perlobfuscator.com/decode-stunnix-5.17.1.pl) we can deobfuscate the script through the following command:\n\n\n```bash\nperl decode-stunnix-5.17.1.pl \u003c obfuscated_run.pl \u003e deobfuscated_run.pl\n```\n\n\nAfter which we can view the deobfuscated contents:\n\n\n![Part of the `Stealth Shellbot` Perl code](/assets/images/outlaw-linux-malware/19-perl-deobfuscated.png \"Part of the `Stealth Shellbot` Perl code\")\n\n\nThis is just the first few lines of the script, for illustrative purposes. This deobfuscation technique can also be used for the other obfuscated Perl scripts used by OUTLAW. We will take a closer look at these scripts in just a moment.\n\nThe script ends off with installing its own SSH public key for persistent access, setting restrictive permissions, and making the directory immutable to prevent modification through `chattr`:\n\n\n![Persistence via SSH key](/assets/images/outlaw-linux-malware/20-persistence.png \"Persistence via SSH key\")\n\n\n#### STEALTH SHELLBOT Scripts\n\nThe STEALTH SHELLBOT scripts used in OUTLAW are not custom-built but rather publicly available IRC bot scripts, often sourced from old GitHub repositories and underground forums. These scripts have been around for over a decade, originally designed for remote administration, automation, and botnet management. However, they have since been repurposed by malware authors for malicious activities.\n\nSHELLBOT scripts operate as IRC-based backdoors, allowing attackers to remotely control infected machines via predefined commands sent through an IRC channel. Once connected to the attacker’s IRC server, these bots can:\n\n* Execute arbitrary shell commands\n* Download and execute additional payloads\n* Launch DDoS attacks (in older variants)\n* Steal credentials or exfiltrate system information\n* Manage crypto miners or other malware components\n\nOUTLAW integrates these legacy SHELLBOT scripts as a secondary persistence mechanism, ensuring that even if its brute-force modules are disrupted, attackers still retain a remote foothold. The bot connects to an attacker-controlled IRC C2, where it listens for further commands, enabling on-demand execution of malicious actions.\n\nWhile these scripts are not novel, their continued use highlights how attackers rely on publicly available tools rather than developing new malware from scratch.\n\n\n### Subroutine Execution of c/ directory: Customer Bruteforcer\n\nAs part of the third and final sub-routine, a custom bruteforce tool is deployed. This chain starts, similar to the previous sub-routines, from the `init` and `init2` scripts. These scripts both call the `start` script, containing the following contents:\n\n\n![alt_tThe `start` script in the `c/` folderext](/assets/images/outlaw-linux-malware/21-start-script-in-c.png \"The `start` script in the `c/` folder\")\n\n\nThis script stores the current working directory, provides all permissions (777) to all files in the current directory, and creates a script named `aptitude` (which is also called by the previously set up cron job), to run the `run` script. After creating `aptitude`, it is granted execution permissions and is run. \n\nThe `run` script is used to gather CPU architecture information and count CPU cores to determine execution behavior, as shown below:\n\n\n![The `run` script in the `c/` folder](/assets/images/outlaw-linux-malware/22-run-script-in-c.png \"The `run` script in the `c/` folder\")\n\n\nIf the system is x86_64, it checks whether the CPU has fewer than 7 cores, introducing a randomized delay before executing `./go` in the background. If 7 or more cores are detected, execution is skipped or altered (with a previously used binary `golan` now commented out). The threat actor may have been testing or working with a Golang binary that can make full use of the number of cores present in a system, but that is just a guess. \n\nIn most scenarios, the execution flow moves to the bash script called `go`:\n\n\n![The `go` bash script in the `c/` folder](/assets/images/outlaw-linux-malware/23-go-script-in-c.png \"The `go` bash script in the `c/` folder\")\n\n\n\n\nThe script determines the CPU architecture and assigns a thread count accordingly:\n\n* ARM-based systems → 75 threads\n* i686 (32-bit x86) → 325 threads\n* All others (default) → 475 threads\n\nIt then enters an infinite loop, executing the following actions:\n\n1. Creates and cleans up temporary files (`v`, `p`, `ip`, `xtr*`, `a.*`, `b.*`).\n2. Writes hardcoded values (`257.287.563.234` and `sdaferthqhr34312asdfa`) into files `c` and `d`.\n3. Waits for a random delay (1-30 seconds) before launching `blitz`.\n4. Executes `blitz` for 3 hours with specified parameters (`-t $threads` suggests multi-threaded processing).\n5. Performs post-execution cleanup, removing temporary and log files before repeating the cycle.\n\n\n#### BLITZ\n\nOUTLAW is a self-propagating worm that spreads laterally through SSH brute-force attacks using BLITZ, its custom-built brute-forcer. Designed for aggressive, automated credential attacks, BLITZ systematically scans for and compromises systems with weak or default SSH credentials, allowing the malware to expand its foothold with minimal attacker intervention.\n\n\n##### BLITZ Execution Process\n\nUpon execution, BLITZ follows a structured attack sequence:\n\n\n\n1. **IP Target and Credential Retrieval**\n    * BLITZ contacts an SSH C2 server to fetch a list of target IPs and credential pairs.\n2. **Brute-Force Authentication \u0026 System Profiling**\n    * Using multi-threaded SSH brute-forcing, BLITZ attempts to authenticate with stolen credentials.\n    * Once access is gained, it:\n        * Changes the user’s password for persistent access.\n        * Executes system reconnaissance commands, collecting:\n            * User privileges\n            * CPU details\n            * SSH banner information\n            * OS version\n        * Exfiltrates gathered data to the C2 server.\n3. **Subnet Scanning \u0026 Lateral Movement**\n    * The malware scans the local subnet of newly compromised systems, identifying additional SSH-accessible machines to attack.\n4. **Self-Replication \u0026 Malware Deployment**\n    * Instead of downloading from an external C2, BLITZ directly transfers the dota3.tar.gz malware package from the infecting host to the new victim, reinforcing persistence and minimizing reliance on external infrastructure.\n\nBy combining automated brute-force attacks, system profiling, subnet scanning, and direct malware transfer, BLITZ maximizes infection efficiency while ensuring continued network expansion.\n\n\n##### Binary Analysis \u0026 C2 Communication\n\nBeyond brute-force operations, analysis reveals that BLITZ executes its tasks by interacting with system shell commands and an embedded SSH library. Once connected to a compromised system, it queries the C2 server for updated targets and relays authentication data.\n\n\n![Random IP Selection for the C2 SSH server](/assets/images/outlaw-linux-malware/24-random-ip-select.png \"Random IP Selection for the C2 SSH server\")\n\n\nAdditionally, OUTLAW incorporates a hardcoded SSH key for C2 authentication, which must be unlocked using the password \"pegasus\". Upon successful authentication, Blitz logs attack details into a \"v\" file, structured as follows:\n\nThis log contains:\n\n* Original username and password used in the attack.\n* The victim’s IP address and the new password set by the malware.\n* SSH port and OS details, including CPU specifications.\n\nOnce BLITZ completes its scanning cycle, the \"v\" file is exfiltrated to an SSH C2 server, providing attackers with a continuously updated list of infected systems.\n\n\n## Post-Compromise\n\nTo analyze the attacker’s post-compromise behavior, we deliberately set up a honeypot and proactively uploaded its credentials to the same SSH C2 server used by the attacker. This effectively invited the attacker into our controlled environment, allowing us to closely monitor their subsequent actions.\n\nA few days after BLITZ successfully brute-forced and set a new password on the honeypot system, we observed a remote login using these credentials. The login originated from 212.234.225[.]29.  The attacker immediately performed basic reconnaissance by running the w command to check who was logged in and then executing ps to see what processes were running. In the course of typing commands, they made a small typo and killed the prompt with a quick Ctrl+C, indicating a manual interaction rather than an automated script at this stage. Next, the attacker pasted a series of commands to download a fresh copy of dota3.tar.gz via `wget`, unpacked it, and executed the newly fetched script. \n\nThis whole chain of activity can be displayed through [session view](https://www.elastic.co/guide/en/security/current/session-view.html), an investigation tool that allows you to examine Linux process data organized in a tree-like structure according to the Linux logical event model, with processes organized by parentage and time of execution. It displays events in a highly readable format that is inspired by the terminal. This makes it a powerful tool for monitoring and investigating session activity on your Linux infrastructure and understanding user and service behavior.\n\n\n![Threat actors actions in a honeypot](/assets/images/outlaw-linux-malware/01-honeypot.gif \"Threat actors actions in a honeypot\")\n\nThe attack chain displayed above mirrors the original infection method, suggesting that the attacker was either updating components or re-infecting the host to maintain persistence. Soon after verifying that the updated payload was running, the attacker disconnected from the host, leaving behind an environment primed for continued SSH brute-forcing, cryptocurrency mining, and remote control via IRC.\n\nThis brief login serves as a reminder that even unsophisticated campaigns can include pockets of interactive attacker activity—a manual \"quality check\" of sorts—underscoring the importance of timely detection and swift containment.\n\n\n## Detecting OUTLAW through MITRE ATT\u0026CK\n\nOUTLAW is a Linux malware that relies on SSH brute-force attacks, cryptocurrency mining, and worm-like propagation to infect and maintain control over systems. While not highly sophisticated, it covers a broad range of MITRE ATT\u0026CK techniques, making it an effective case for detection engineering.\n\nThis section maps OUTLAW’s attack chain to MITRE ATT\u0026CK, highlighting Elastic SIEM and endpoint rules and threat-hunting queries that can identify its activity at different stages.\n\nOUTLAW follows a structured infection flow:\n\n* **Initial Access** – SSH brute-force against weak credentials.\n* **Execution** – Runs malicious scripts to kick off several stages of malware infection.\n* **Persistence** – Installs cron jobs and modifies SSH keys.\n* **Defense Evasion** – Hides in hidden directories, modifies file permissions, uses packing techniques, command encoding, and obfuscates scripts.\n* **Credential Access** – Modifies credentials and injects public SSH keys.\n* **Discovery** – Enumerates user, system, and hardware details.\n* **Lateral Movement** – Spreads via internal SSH brute-force and malware transfer.\n* **Collection \u0026 Exfiltration** – Collects and exfiltrates system data to its C2.\n* **Command and Control** – Uses socat and STEALTH SHELLBOT for C2 communication.\n* **Impact** – Launches XMRIG to mine cryptocurrency and leverages the infected host as a brute-force node.\n\nThe following sections detail detection strategies for each technique, helping defenders effectively identify and mitigate OUTLAW’s infections.\n\n\n### TA001: Initial Access\n\nOUTLAW gains initial access through opportunistic SSH brute-forcing, targeting systems with weak or default credentials. Elastic pre-built [detection rules](https://github.com/elastic/detection-rules/) can successfully detect this method of initial access. These include:\n\n\n\n* [Potential External Linux SSH Brute Force Detected](https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/linux/credential_access_potential_linux_ssh_bruteforce_external.toml) \n* [Potential Successful SSH Brute Force Attack](https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/linux/credential_access_potential_successful_linux_ssh_bruteforce.toml)\n\nAdditionally, there are several rules based on authentication logs to detect suspicious SSH authentications:\n\n* [Successful SSH Authentication from Unusual SSH Public Key](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_first_time_public_key_authentication.toml)\n* [Successful SSH Authentication from Unusual User](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_successful_ssh_authentication_by_unusual_user.toml)\n* [Successful SSH Authentication from Unusual IP Address](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_successful_ssh_authentication_by_unusual_ip.toml)\n\nBesides relying on detections, it is important to incorporate threat hunting into your workflow. Elastic Security provides several hunting queries using [ES|QL](https://www.elastic.co/guide/en/elasticsearch/reference/current/esql.html) and [OSQuery](https://www.elastic.co/guide/en/kibana/current/osquery.html), publicly available in our [Detection Rules repository](https://github.com/elastic/detection-rules), specifically in the [Linux hunting subdirectory](https://github.com/elastic/detection-rules/tree/main/hunting). For example, the following two hunts may help in identifying different stages of the attack:\n\n\n\n* [Logon Activity by Source IP](https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/hunting/linux/queries/login_activity_by_source_address.toml)\n* [Excessive SSH Network Activity to Unique Destinations](https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/hunting/linux/queries/excessive_ssh_network_activity_unique_destinations.toml)\n\n\n### TA002: Execution\n\nAfter gaining initial access, OUTLAW executes a series of scripts and binaries to establish control. Upon downloading and unpacking, we detect:\n\n\n\n* [File Downloaded from Suspicious Source by Web Server](https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/behavior/rules/linux/persistence_file_downloaded_from_suspicious_source_by_web_server.toml)\n* [Memory Threat Detection Alert: Linux.Trojan.Pornoasset](https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/yara/rules/Linux_Trojan_Pornoasset.yar)\n\nThe STEALTH SHELLBOT script is detected through:\n\n\n\n* [Script Executed Through Unusual Parent Process](https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/behavior/rules/linux/execution_script_executed_through_unusual_parent_process.toml)\n\nAdditionally, the malware executes multiple suspicious system commands, triggering:\n\n* [Suspicious System Commands Executed by Previously Unknown Executable](https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/rules/linux/execution_suspicious_executable_running_system_commands.toml)\n\n\n### TA003: Persistence\n\nThis combination of cron-based execution and SSH key manipulation allows OUTLAW to maintain a persistent foothold on compromised systems. Both of these persistence techniques are extensively researched in our \"[Linux Detection Engineering -  A primer on persistence mechanisms](https://www.elastic.co/security-labs/primer-on-persistence-mechanisms)\" publication. We can detect these techniques through the following SIEM and [endpoint rules](https://github.com/elastic/protections-artifacts):\n\n* [Cron Job Created or Modified](https://github.com/elastic/detection-rules/blob/main/rules/linux/persistence_cron_job_creation.toml)\n* [SSH Authorized Keys File Modification](https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/cross-platform/persistence_ssh_authorized_keys_modification.toml)\n* [Potential Persistence via File Modification](https://github.com/elastic/detection-rules/blob/main/rules/integrations/fim/persistence_suspicious_file_modifications.toml)\n\nAdditionally, we can hunt for these techniques through the following ES|QL and OSQuery hunts:\n\n* [Persistence via Cron](https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/hunting/linux/queries/persistence_via_cron.toml)\n* [Persistence via SSH Configurations and/or Keys](https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/hunting/linux/queries/persistence_via_ssh_configurations_and_keys.toml)\n\n\n### TA005: Defense Evasion\n\nOUTLAW employs multiple defense evasion techniques to avoid detection. One of its primary methods is Base64 decoding, which is detected through the following pre-built rules:\n\n* [Base64 Decoded Payload Piped to Interpreter](https://github.com/elastic/detection-rules/blob/b9e8115c2fb55c328ea8e9830c96ce37d2f316c5/rules/linux/defense_evasion_interpreter_launched_from_decoded_payload.toml)\n* [Unusual Base64 Encoding/Decoding Activity](https://github.com/elastic/detection-rules/blob/b9e8115c2fb55c328ea8e9830c96ce37d2f316c5/rules/linux/defense_evasion_base64_decoding_activity.toml)\n* [Linux Payload Decoded and Decrypted via Built-in Utility](https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/linux/defense_evasion_linux_payload_decoded_and_decrypted_via_built_in_utility.toml)\n\nAdditionally, the malware's binaries are packed with UPX, reducing their size and altering their signature to evade traditional malware detection. Once the malware unpacks in memory, this is detected through our general malware detections.\n\nContinuing down the execution chain, the malware creates several hidden files and directories and modifies them using `chattr`:\n\n* [File Permission Modification in Writable Directory](https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/rules/linux/defense_evasion_file_mod_writable_dir.toml)\n* [Creation of Hidden Files and Directories via CommandLine](https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/rules/linux/defense_evasion_hidden_file_dir_tmp.toml)\n* [File made Immutable by Chattr](https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/rules/linux/defense_evasion_chattr_immutable_file.toml)\n* [Chattr Execution from Unusual Parent](https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/behavior/rules/linux/defense_evasion_chattr_execution_from_unusual_parent.toml)\n\nWe can further enhance detection through the following hunting query:\n\n* [Hidden Process Execution](https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/hunting/linux/queries/defense_evasion_via_hidden_process_execution.toml)\n\n\n### TA006: Credential Access\n\nOUTLAW maintains persistent access to a compromised system by manipulating credentials. Following successful SSH brute-force authentication, the malware replaces the existing SSH authorized_keys file with a new version containing a malicious SSH public key, thereby granting persistent access. This is detected through the following signals:\n\n\n\n* [SSH Authorized Keys File Modification](https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/cross-platform/persistence_ssh_authorized_keys_modification.toml)\n* [SSH Authorized Keys File Deletion](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/defense_evasion_authorized_keys_file_deletion.toml)\n\nThe malware then changes the user credentials for the authenticated account by entering a new password using the `passwd` utility:\n\n* [Linux User Account Credential Modification](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/persistence_user_credential_modification_via_echo.toml)\n\n\n### TA007: Discovery\n\nOUTLAW gathers system information upon successful infection to profile the compromised environment. The malware executes various commands to collect details about the system’s CPU, user privileges, operating system, memory usage, and available binaries. This reconnaissance step helps the attacker assess the system’s capabilities and determine how best to utilize the compromised machine. These are all detected through several [building block rules](https://www.elastic.co/guide/en/security/current/building-block-rule.html), as listed in our [rules_building_block directory](https://github.com/elastic/detection-rules/tree/main/rules_building_block). Below is a short list of the most important ones triggered by OUTLAW:\n\n* [Linux System Information Discovery](https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_linux_system_information_discovery.toml)\n* [Process Discovery via Built-In Applications](https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_process_discovery_via_builtin_tools.toml)\n* [System Owner/User Discovery Linux](https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_linux_system_owner_user_discovery.toml)\n* [Account or Group Discovery via Built-In Tools](https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_of_accounts_or_groups_via_builtin_tools.toml)\n* [System Network Connections Discovery](https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_system_network_connections.toml)\n\nThe default interface settings do not include building block rules due to their relatively high noise levels. However, these rules can be enabled to assist in the identification of potential threats.\n\n\n### TA008: Lateral Movement\n\nOUTLAW malware spreads through a compromised network by carrying out internal SSH brute-force attacks. We can identify this behavior through the following ES|QL rules:\n\n* [Potential Port Scanning Activity from Compromised Host](https://github.com/elastic/detection-rules/blob/e28512a32fc643651a6bc91444e460ca8f5164be/rules/linux/discovery_port_scanning_activity_from_compromised_host.toml)\n* [Potential Subnet Scanning Activity from Compromised Host](https://github.com/elastic/detection-rules/blob/e28512a32fc643651a6bc91444e460ca8f5164be/rules/linux/discovery_subnet_scanning_activity_from_compromised_host.toml)\n\nOnce a system is successfully brute-forced, the malware package, `dota3.tar.gz`, is deployed from the infected host to the new target. The local subnet is then scanned for additional targets to ensure the malware's continued propagation.\n\nElastic pre-built detection rules can identify these lateral movement attempts:\n\n* [Potential Internal Linux SSH Brute Force Detected](https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules/linux/credential_access_potential_linux_ssh_bruteforce_internal.toml)\n* [Remote File Creation in World Writeable Directory](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/lateral_movement_remote_file_creation_world_writeable_dir.toml)\n* [Unusual Remote File Creation](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/lateral_movement_unusual_remote_file_creation.toml)\n\nAdditionally, upon copying the OUTLAW malware to a remote host, malware prevention alerts kick in.\n\n### TA009: Collection \u0026 TA010: Exfiltration\n\nOUTLAW collects basic system information, credentials, and SSH details from compromised machines, primarily for tracking infected hosts and facilitating further attacks. This data is stored in a simple text file before being uploaded to a C2 server. Since this collection activity is limited to gathering system details and writing them to a file, it is not inherently suspicious on its own.\n\nExfiltration occurs when OUTLAW initiates an outbound SSH connection via sftp-server to transfer the collected information to a predefined C2 server. While this may resemble normal SSH activity, we can detect suspicious execution of file transfer utilities through ES|QL:\n\n* [Unusual File Transfer Utility Launched](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/exfiltration_unusual_file_transfer_utility_launched.toml)\n\n\n### TA011: Command and Control\n\nOUTLAW maintains communication with its C2 infrastructure through multiple channels, allowing attackers to issue commands, exfiltrate data, and manage infected systems. We can detect several of the utilities used by the malware through the following rules:\n\n* [Socat Reverse Shell or Listener Activity](https://github.com/elastic/protections-artifacts/blob/fbebc6f98eb1070bd96235ea432158756b3f2038/behavior/rules/linux/execution_socat_reverse_shell_or_listener_activity.toml)\n* [High Number of Egress Network Connections from Unusual Executable](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/command_and_control_frequent_egress_netcon_from_sus_executable.toml)\n* [Suspicious Network Activity to the Internet by Previously Unknown Executable](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/command_and_control_suspicious_network_activity_from_unknown_executable.toml).\n\nThe same hunting queries that were relevant for detecting the malware’s initial access attempts, can also be used to hunt for this C2 activity. Additionally, the following hunting queries can be used:\n\n* [Low Volume External Network Connections from Process by Unique Agent](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/hunting/linux/queries/low_volume_external_network_connections_from_process.toml)\n* [Unusual File Downloads from Source Addresses](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/hunting/linux/queries/command_and_control_via_unusual_file_downloads_from_source_addresses.toml)\n* [Excessive SSH Network Activity to Unique Destinations](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/hunting/linux/queries/excessive_ssh_network_activity_unique_destinations.toml)\n\n\n### TA040: Impact\n\nOUTLAW impacts infected systems by consuming CPU resources for cryptocurrency mining and performing SSH brute-force attacks to propagate. Several CPU and memory optimizations are attempted before launching the modified XMRIG mining software, including enabling MSR write access and setting kernel parameters such as hugepages. These modifications can be detected through the following rules:\n\n\n\n* [Suspicious Kernel Feature Activity](https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/linux/defense_evasion_suspicious_kernel_feature_activity.toml)\n* [MSR Write Access Enabled](https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/linux/impact_msr_write_access_enabled.toml)\n\nAs OUTLAW attempts to enable MSR write access via modprobe but lacks the required permissions, kernel driver-related rules are triggered:\n\n\n\n* [Kernel Driver Load by Non-Root User](https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules/linux/persistence_kernel_driver_load_by_non_root.toml)\n* [Kernel Driver Load](https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules/linux/persistence_kernel_driver_load.toml)\n\nThese rules directly monitor for `init_module()` and `finit_module()` syscalls, through [Auditd](https://www.elastic.co/guide/en/integrations/current/auditd.html). For more information on how to set up the [Auditd Manager integration](https://www.elastic.co/guide/en/integrations/current/auditd_manager.html) to capture driver events and much more, check out the [Linux Detection Engineering with Auditd](https://www.elastic.co/security-labs/linux-detection-engineering-with-auditd) publication.\n\nSimultaneously, SSH brute-force attempts are launched from the infected host, triggering:\n\n* [Potential Malware-Driven SSH Brute Force Attempt](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/impact_potential_bruteforce_malware_infection.toml)\n\nThroughout its execution, OUTLAW runs kill scripts to terminate competing malware or leftover processes from previous infections. This behavior triggers:\n\n* [Kill Command Executed](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/defense_evasion_kill_command_executed.toml)\n* [Kill Command Executed from Binary in Unusual Location](https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/cross-platform/execution_kill_command_executed_from_binary_in_unusual_location.toml)\n* [Kill Command Executed from a Hidden Process](https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/cross-platform/defense_evasion_kill_command_executed_from_a_hidden_process.toml)\n\n\n## Indicators of Compromise (IOCs)\n\nThe complete set of indicators can be found as a bundle on [Github](https://github.com/elastic/labs-releases/tree/main/indicators/outlaw).\n\n\n#### Yara Signatures\n```yara\nrule Linux_Hacktool_Outlaw_cf069e73 {\n    meta:\n        author = \"Elastic Security\"\n        description = \"OUTLAW SSH bruteforce component fom the Dota3 package\"\n        reference_sample = \"c3efbd6b5e512e36123f7b24da9d83f11fffaf3023d5677d37731ebaa959dd27\"\n      \n    strings:\n        $ssh_key_1 = \"MIIJrTBXBgkqhkiG9w0BBQ0wSjApBgkqhkiG9w0BBQwwHAQI8vKBZRGKsHoCAggA\"\n        $ssh_key_2 = \"MAwGCCqGSIb3DQIJBQAwHQYJYIZIAWUDBAECBBBC3juWsJ7DsDd2wH2XI+vUBIIJ\"\n        $ssh_key_3 = \"UCQ2viiVV8pk3QSUOiwionAoe4j4cBP3Ly4TQmpbLge9zRfYEUVe4LmlytlidI7H\"\n        $ssh_key_4 = \"O+bWbjqkvRXT9g/SELQofRrjw/W2ZqXuWUjhuI9Ruq0qYKxCgG2DR3AcqlmOv54g\"\n        $path_1 = \"/home/eax/up\"\n        $path_2 = \"/var/tmp/dota\"\n        $path_3 = \"/dev/shm/ip\"\n        $path_4 = \"/dev/shm/p\"\n        $path_5 = \"/var/tmp/.systemcache\"\n        $cmd_1 = \"cat /proc/cpuinfo | grep name | head -n 1 | awk '{print $4,$5,$6,$7,$8,$9;}'\"\n        $cmd_2 = \"cd ~; chattr -ia .ssh; lockr -ia .ssh\"\n        $cmd_3 = \"sort -R b | awk '{ if ( NF == 2 ) print } '\u003e p || cat b | awk '{ if ( NF == 2 ) print } '\u003e p; sort -R a\"\n        $cmd_4 = \"rm -rf /var/tmp/dota*\"\n        $cmd_5 = \"rm -rf a b c d p ip ab.tar.gz\"\n    condition:\n        (all of ($ssh_key*)) or (3 of ($path*) and 3 of ($cmd*))\n}\n```\n\n#### SIEM and Endpoint Rules Overview by MITRE ATT\u0026CK Tactic\n\n| Technique ID | Description |\n|-------------|-------------|\n| **TA001: Initial Access** | [Potential External Linux SSH Brute Force Detected](https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/linux/credential_access_potential_linux_ssh_bruteforce_external.toml) \u003cbr /\u003e [Potential Successful SSH Brute Force Attack](https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/linux/credential_access_potential_successful_linux_ssh_bruteforce.toml) \u003cbr /\u003e [Successful SSH Authentication from Unusual SSH Public Key](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_first_time_public_key_authentication.toml) \u003cbr /\u003e        [Successful SSH Authentication from Unusual User](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_successful_ssh_authentication_by_unusual_user.toml) \u003cbr /\u003e [Successful SSH Authentication from Unusual IP Address](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_successful_ssh_authentication_by_unusual_ip.toml) |\n| **TA002: Execution** | [File Downloaded from Suspicious Source by Web Server](https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/behavior/rules/linux/persistence_file_downloaded_from_suspicious_source_by_web_server.toml) \u003cbr /\u003e [Linux.Trojan.Pornoasset](https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/yara/rules/Linux_Trojan_Pornoasset.yar) \u003cbr /\u003e [Script Executed Through Unusual Parent Process](https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/behavior/rules/linux/execution_script_executed_through_unusual_parent_process.toml) \u003cbr /\u003e [Suspicious System Commands Executed by Previously Unknown Executable](https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/rules/linux/execution_suspicious_executable_running_system_commands.toml) |\n| **TA003: Persistence** | [Cron Job Created or Modified](https://github.com/elastic/detection-rules/blob/main/rules/linux/persistence_cron_job_creation.toml) \u003cbr /\u003e [SSH Authorized Keys File Modification](https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/cross-platform/persistence_ssh_authorized_keys_modification.toml) \u003cbr /\u003e [Potential Persistence via File Modification](https://github.com/elastic/detection-rules/blob/main/rules/integrations/fim/persistence_suspicious_file_modifications.toml) |\n| **TA005: Defense Evasion** | [Base64 Decoded Payload Piped to Interpreter](https://github.com/elastic/detection-rules/blob/b9e8115c2fb55c328ea8e9830c96ce37d2f316c5/rules/linux/defense_evasion_interpreter_launched_from_decoded_payload.toml) \u003cbr /\u003e [Unusual Base64 Encoding/Decoding Activity](https://github.com/elastic/detection-rules/blob/b9e8115c2fb55c328ea8e9830c96ce37d2f316c5/rules/linux/defense_evasion_base64_decoding_activity.toml) |\n| **TA006: Credential Access** | [SSH Authorized Keys File Modification](https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/cross-platform/persistence_ssh_authorized_keys_modification.toml) \u003cbr /\u003e [SSH Authorized Keys File Deletion](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/defense_evasion_authorized_keys_file_deletion.toml) \u003cbr /\u003e [Linux User Account Credential Modification](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/persistence_user_credential_modification_via_echo.toml) |\n| **TA007: Discovery** | [Linux System Information Discovery](https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_linux_system_information_discovery.toml) |\n| **TA008: Lateral Movement** | [Potential Port Scanning Activity from Compromised Host](https://github.com/elastic/detection-rules/blob/e28512a32fc643651a6bc91444e460ca8f5164be/rules/linux/discovery_port_scanning_activity_from_compromised_host.toml) |\n| **TA009 \u0026 TA010: Collection \u0026 Exfiltration** | [Unusual File Transfer Utility Launched](https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/exfiltration_unusual_file_transfer_utility_launched.toml) |\n| **TA011: Command and Control** | [Socat Reverse Shell or Listener Activity](https://github.com/elastic/protections-artifacts/blob/fbebc6f98eb1070bd96235ea432158756b3f2038/behavior/rules/linux/execution_socat_reverse_shell_or_listener_activity.toml) |\n| **TA040: Impact** | [Suspicious Kernel Feature Activity](https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/linux/defense_evasion_suspicious_kernel_feature_activity.toml) |\n\n\n## Conclusion\n\nOUTLAW exemplifies how even unsophisticated malware can persist and scale effectively in modern environments. Despite lacking advanced evasion techniques, its combination of SSH brute-force attacks, self-replication, and modular components allows it to maintain a long-running botnet. OUTLAW ensures continuous expansion with minimal attacker intervention by leveraging compromised hosts to propagate infections further.\n\nOur honeypot experiment provided a rare glimpse into the attacker's real-world behavior, confirming that while much of OUTLAW’s operation is automated, there are moments of direct human interaction. The ability to observe manual commands, reconnaissance attempts, and even simple typographical errors highlights an often-overlooked aspect of botnet maintenance—operator-driven quality control. These insights reinforce the need for detection strategies that account not just for automated attacks but also for manual post-compromise activity.\n\nBy understanding how OUTLAW operates, spreads, and monetizes infections, defenders can develop robust detection strategies to mitigate its impact. This report provides actionable SIEM rules, threat-hunting queries, and forensic insights, enabling security teams to stay ahead of similar evolving threats.\n\n\n## References\n\n[1] CounterCraft, [DOTA3 Malware Again and Again](https://www.countercraftsec.com/blog/dota3-malware-again-and-again/)\n\n[2] Juniper Networks, [DOTA3: Is Your Internet of Things Device Moonlighting?](https://blogs.juniper.net/en-us/threat-research/dota3-is-your-internet-of-things-device-moonlighting)\n\n[3] SANS ISC, [Hygiene Hygiene Hygiene](https://isc.sans.edu/diary/Hygiene+Hygiene+Hygiene+Guest+Diary/31260)\n\n[4] Darktrace, [Outlaw Returns: Uncovering Returning Features and New Tactics](https://darktrace.com/blog/outlaw-returns-uncovering-returning-features-and-new-tactics)\n","code":"var Component=(()=\u003e{var h=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=\u003e{for(var n in e)o(t,n,{get:e[n],enumerable:!0})},c=(t,e,n,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!f.call(t,r)\u0026\u0026r!==n\u0026\u0026o(t,r,{get:()=\u003ee[r],enumerable:!(s=u(e,r))||s.enumerable});return t};var w=(t,e,n)=\u003e(n=t!=null?h(p(t)):{},c(e||!t||!t.__esModule?o(n,\"default\",{value:t,enumerable:!0}):n,t)),y=t=\u003ec(o({},\"__esModule\",{value:!0}),t);var a=b((T,l)=\u003e{l.exports=_jsx_runtime});var k={};g(k,{default:()=\u003ex,frontmatter:()=\u003e_});var i=w(a()),_={title:\"Outlaw Linux Malware: Persistent, Unsophisticated, and Surprisingly Effective\",slug:\"outlaw-linux-malware\",date:\"2025-04-01\",description:\"Outlaw is a persistent Linux malware leveraging simple brute-force and mining tactics to maintain a long-lasting botnet.\",author:[{slug:\"remco-sprooten\"},{slug:\"ruben-groenewoud\"}],image:\"outlaw.jpg\",category:[{slug:\"malware-analysis\"}],tags:[{slug:\"OUTLAW\"},{slug:\"linux\"},{slug:\"malware\"}]};function d(t){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",img:\"img\",ul:\"ul\",li:\"li\",strong:\"strong\",code:\"code\",h3:\"h3\",pre:\"pre\",h4:\"h4\",ol:\"ol\",h5:\"h5\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:\"preface\",children:\"Preface\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"OUTLAW is a persistent yet unsophisticated auto-propagating coinminer package observed across multiple versions over the past few years [\",(0,i.jsx)(e.a,{href:\"https://www.countercraftsec.com/blog/dota3-malware-again-and-again/\",rel:\"nofollow\",children:\"1\"}),\"], [\",(0,i.jsx)(e.a,{href:\"https://blogs.juniper.net/en-us/threat-research/dota3-is-your-internet-of-things-device-moonlighting\",rel:\"nofollow\",children:\"2\"}),\"], [\",(0,i.jsx)(e.a,{href:\"https://isc.sans.edu/diary/Hygiene+Hygiene+Hygiene+Guest+Diary/31260\",rel:\"nofollow\",children:\"3\"}),\"], [\",(0,i.jsx)(e.a,{href:\"https://darktrace.com/blog/outlaw-returns-uncovering-returning-features-and-new-tactics\",rel:\"nofollow\",children:\"4\"}),\"]. Despite lacking stealth and advanced evasion techniques, it remains active and effective by leveraging simple but impactful tactics such as SSH brute-forcing, SSH key and cron-based persistence, and manually modified commodity miners and IRC channels. This persistence highlights how botnet operators can achieve widespread impact without relying on sophisticated techniques.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"To gain deeper insights into OUTLAW\\u2019s behavior and operational patterns, we deployed a honeypot designed to attract and observe the attackers in action. By carefully crafting an environment that mimicked a vulnerable system, we were able to bait the adversaries into interacting with our server. This interaction revealed automated and manual actions, with operators entering commands directly, making modifications on the fly, and even mistyping commands\\u2014clear indicators of human involvement. A captured GIF showcases these moments, providing a rare glimpse into their real-time decision-making process.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/01-honeypot.gif\",alt:\"Threat actors actions in a honeypot\",title:\"Threat actors actions in a honeypot\",width:\"593\",height:\"356\"})}),`\n`,(0,i.jsx)(e.p,{children:\"By analyzing OUTLAW, we gain new insights into the tooling used by its operators and their evolving strategies over time. This malware presents a valuable opportunity to apply detection engineering principles, as its attack chain spans nearly the entire MITRE ATT\u0026CK framework. Examining its infection process allows us to develop effective detection strategies that capitalize on its predictable and repetitive behaviors.\"}),`\n`,(0,i.jsx)(e.p,{children:\"This report provides a full attack chain analysis, including detailed detection rules and hunting queries. By breaking down OUTLAW\\u2019s components, we demonstrate how even rudimentary malware can maintain longevity in modern environments and how defenders can leverage its simplicity to enhance detection and response.\"}),`\n`,(0,i.jsx)(e.h2,{id:\"key-takeaways\",children:\"Key Takeaways\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Persistent but unsophisticated\"}),\": OUTLAW remains active despite using basic techniques like SSH brute-forcing, SSH key manipulation, and cron-based persistence.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Commodity tooling\"}),\": The malware deploys modified \",(0,i.jsx)(e.code,{children:\"XMRig\"}),\" miners, leverages IRC for C2, and includes publicly available scripts for persistence and defense evasion.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Extensive attack surface\"}),\": OUTLAW\\u2019s infection chain spans nearly the entire MITRE ATT\u0026CK framework, offering many detection and hunting opportunities.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Worm-like propagation\"}),\": OUTLAW uses its compromised hosts to launch further SSH brute-force attacks on their local subnets, rapidly expanding the botnet.\"]}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"outlaw-overview\",children:\"OUTLAW Overview\"}),`\n`,(0,i.jsx)(e.p,{children:\"OUTLAW follows a multi-stage infection process that begins with downloading and executing its payload, establishing persistence, and expanding its botnet through SSH brute-force attacks. The execution chain is displayed below:\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/02-flow.png\",alt:\"OUTLAW infection chain overview\",title:\"OUTLAW infection chain overview\",width:\"960\",height:\"540\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:\"1. Initial Infection \u0026 Deployment\"})}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"The attack starts when \",(0,i.jsx)(e.code,{children:\"tddwrt7s.sh\"}),\" downloads the \",(0,i.jsx)(e.code,{children:\"dota3.tar.gz\"}),\" package from a C2 server.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"The extracted \",(0,i.jsx)(e.code,{children:\"initall.sh\"}),\" script executes, kicking off the infection chain.\"]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:\"2. Gaining Control \u0026 Persistence\"})}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"The malware ensures dominance by killing competing brute-forcers and miners.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"It then deploys:\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Modified XMRIG for crypto mining (connecting to a mining pool).\"}),`\n`,(0,i.jsx)(e.li,{children:\"STEALTH SHELLBOT for remote control via IRC C2.\"}),`\n`,(0,i.jsx)(e.li,{children:\"BLITZ to perform SSH brute force attacks.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:\"3. Propagation \u0026 Expansion\"})}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"The brute-force module retrieves target lists from an SSH C2 server and attempts SSH brute-force attacks on new machines.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Successfully compromised systems are infected, repeating the cycle.\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"This automated infection loop allows OUTLAW to remain active and profitable with minimal effort from attackers. Let\\u2019s take a deeper look at the entire attack chain.\"}),`\n`,(0,i.jsx)(e.h2,{id:\"outlaw-execution-chain\",children:\"OUTLAW Execution Chain\"}),`\n`,(0,i.jsx)(e.p,{children:\"OUTLAW effectively covers a wide range of tactics and techniques in the MITRE ATT\u0026CK framework. This section maps its behavior to provide an overview of its infection chain and methods.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"initial-access-blitz\",children:\"Initial Access: blitz\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"OUTLAW gains initial access through opportunistic SSH brute-forcing, targeting systems with weak or default credentials. The malware employs its \",(0,i.jsx)(e.code,{children:\"blitz\"}),\" component, also known under other names such as \",(0,i.jsx)(e.code,{children:\"kthreadadd\"}),\", to perform high-volume scanning and password-guessing attempts. It leverages lists of target IPs and credentials retrieved from its C2 servers.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"OUTLAW also acts like a worm, automatically installing itself on every system that it successfully compromises. This self-propagation mechanism allows it to spread rapidly across networks, turning each newly infected device into another node for further brute-forcing and infection attempts.\"}),`\n`,(0,i.jsx)(e.p,{children:\"We will take a deeper look into how OUTLAW performs these attacks and propagates itself later in the article.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"execution-tddwrt7ssh\",children:\"Execution: tddwrt7s.sh\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The first infections of OUTLAW seem to originate from a straightforward dropper script: \",(0,i.jsx)(e.code,{children:\"tddwrt7s.sh\"}),\". This shell script checks for an existing installation. If the malware is already present and unpacked, it will run the initall script, kicking off the infection chain. Otherwise, it will attempt to download the package from a list of provided staging servers. For illustration purposes, a shortened snippet of the dropper is shown below:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/03-dropper.png\",alt:\"Dropper tddwrt7s.sh overview\",title:\"Dropper `tddwrt7s.sh` overview\",width:\"1112\",height:\"600\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The extracted \",(0,i.jsx)(e.code,{children:\"dota3.tar.gz\"}),\" package extracts its contents into a hidden folder called \",(0,i.jsx)(e.code,{children:\".rsync\"}),\", and contains the following entries:\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-text\",children:` \\u251C\\u2500\\u2500 a\n \\u2502   \\u251C\\u2500\\u2500 a\n \\u2502   \\u251C\\u2500\\u2500 init0\n \\u2502   \\u251C\\u2500\\u2500 kswapd0\n \\u2502   \\u251C\\u2500\\u2500 kswapd01\n \\u2502   \\u251C\\u2500\\u2500 run\n \\u2502   \\u251C\\u2500\\u2500 socat\n \\u2502   \\u2514\\u2500\\u2500 stop\n \\u251C\\u2500\\u2500 b\n \\u2502   \\u251C\\u2500\\u2500 a\n \\u2502   \\u251C\\u2500\\u2500 run\n \\u2502   \\u2514\\u2500\\u2500 stop\n \\u251C\\u2500\\u2500 c\n \\u2502   \\u251C\\u2500\\u2500 blitz\n \\u2502   \\u251C\\u2500\\u2500 blitz32\n \\u2502   \\u251C\\u2500\\u2500 blitz64\n \\u2502   \\u251C\\u2500\\u2500 go\n \\u2502   \\u251C\\u2500\\u2500 run\n \\u2502   \\u251C\\u2500\\u2500 start\n \\u2502   \\u251C\\u2500\\u2500 stop\n \\u2502   \\u2514\\u2500\\u2500 v\n \\u251C\\u2500\\u2500 init\n \\u251C\\u2500\\u2500 init2\n \\u2514\\u2500\\u2500 initall\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"Let\\u2019s deconstruct the execution chains one by one.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"main-initialization-script-initall\",children:\"Main Initialization script: initall\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The three \",(0,i.jsx)(e.code,{children:\"init\"}),\" scripts control the overall execution flow and deployment of the malware. Starting with the \",(0,i.jsx)(e.code,{children:\"initall\"}),\" script, the main initializer determines which execution path to take. It checks the system environment and decides whether to use \",(0,i.jsx)(e.code,{children:\"init\"}),\" or \",(0,i.jsx)(e.code,{children:\"init2\"}),\" based on file permissions and available directories.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"These \",(0,i.jsx)(e.code,{children:\"init\"}),\" scripts all use variable-based string concatenation obfuscation, where commands are split into small variable fragments that are dynamically concatenated and executed, making static analysis more difficult. For example, the \",(0,i.jsx)(e.code,{children:\"initall\"}),\" script looks like this:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/04-obfuscation.png\",alt:\"Obfuscated initall script\",title:\"Obfuscated `initall` script\",width:\"1000\",height:\"172\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"However, by changing the \",(0,i.jsx)(e.code,{children:\"eval\"}),\" to an \",(0,i.jsx)(e.code,{children:\"echo\"}),\", we can get the output without any effort:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/05-deobfuscation.png\",alt:\"De-obfuscated initall script\",title:\"De-obfuscated `initall` script\",width:\"486\",height:\"289\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"This script will, by default, consistently execute \",(0,i.jsx)(e.code,{children:\"init\"}),\". This is the primary execution path that installs the malware in the hidden directory \",(0,i.jsx)(e.code,{children:\"~/.configrc6\"}),\". The fallback execution path is \",(0,i.jsx)(e.code,{children:\"init2\"}),\", which is used when \",(0,i.jsx)(e.code,{children:\"~/.configrc6\"}),\" is inaccessible. The main difference is that this path keeps all components in the current working directory. Applying the same deobfuscation principle as we did previously, we end up with the following two scripts:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/06-subroutine.png\",alt:\"Conditional sub-routines: init and init2\",title:\"Conditional sub-routines: `init` and `init2`\",width:\"1167\",height:\"722\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The first script (\",(0,i.jsx)(e.code,{children:\"init\"}),\") hides its components in the hidden directory \",(0,i.jsx)(e.code,{children:\"~/.configrc6\"}),\", while the second script (\",(0,i.jsx)(e.code,{children:\"init2\"}),\") runs directly from the working directory. Despite this difference, the execution flow remains the same, starting the binary named \",(0,i.jsx)(e.code,{children:\"a\"}),\" in the \",(0,i.jsx)(e.code,{children:\"a/\"}),\" and \",(0,i.jsx)(e.code,{children:\"b/\"}),\" directories as background processes and establishing persistence. In both scripts, the malware installs cron jobs that execute its binaries at regular intervals and on system reboots:\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-text\",children:`5 6 * * 0   ~/.configrc6/a/upd\n@reboot     ~/.configrc6/a/upd\n5 8 * * 0   ~/.configrc6/b/sync\n@reboot     ~/.configrc6/b/sync\n0 0 */3 * * ~/.configrc6/c/aptitude\n`})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Although the scripts execute the \",(0,i.jsx)(e.code,{children:\"a\"}),\" binary in the \",(0,i.jsx)(e.code,{children:\"a/\"}),\" and \",(0,i.jsx)(e.code,{children:\"b/\"}),\" directories nearly simultaneously, we will follow the execution flow of the \",(0,i.jsx)(e.code,{children:\"a/\"}),\" directory first.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"subroutine-execution-of-a-directory-xmrig\",children:\"Subroutine Execution of a/ directory: XMRIG\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The first script that is executed is \",(0,i.jsx)(e.code,{children:\"a\"}),\", which removes any existing cron jobs using \",(0,i.jsx)(e.code,{children:\"crontab -r\"}),\" and then stores the current working directory in a variable. It then creates a shell script called \",(0,i.jsx)(e.code,{children:\"upd\"}),\" that checks if a process (stored in \",(0,i.jsx)(e.code,{children:\"bash.pid\"}),\") is still running. If the process is not running, it executes \",(0,i.jsx)(e.code,{children:\"./run\"}),\" as a background process, ensuring that the malware is continuously restarted if terminated.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/07-startup-a.png\",alt:\"Startup script in the a/ directory\",title:\"Startup script in the `a/` directory\",width:\"1203\",height:\"774\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Additionally, we see some commented commands, indicating that other versions of this malware may exist under names such as \",(0,i.jsx)(e.code,{children:\"rsync\"}),\", \",(0,i.jsx)(e.code,{children:\"go\"}),\", \",(0,i.jsx)(e.code,{children:\"kswapd0\"}),\", \",(0,i.jsx)(e.code,{children:\"blitz,\"}),\" and \",(0,i.jsx)(e.code,{children:\"redtail\"}),\".\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Further down the script, a function is created that checks if \",(0,i.jsx)(e.code,{children:\"/sys/module/msr/parameters/allow_writes\"}),' exists and sets it to \"on\" to enable writing to Model-Specific Registers (MSRs). If the file does not exist, it enables MSR writes through the ',(0,i.jsx)(e.code,{children:\"modprobe msr allow_writes=on\"}),\" command.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/08-xmrig-optimize.png\",alt:\"XMRig optimization function: enable MSR writes\",title:\"XMRig optimization function: enable MSR writes\",width:\"659\",height:\"228\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Next, the function identifies the active CPU by checking \",(0,i.jsx)(e.code,{children:\"/proc/cpuinfo\"}),\" and applies specific MSR register values to optimize performance.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/09-xmrig-registers.png\",alt:\"XMRIG optimization function: apply MSR registers\",title:\"XMRIG optimization function: apply MSR registers\",width:\"1053\",height:\"1028\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Finally, the function optimizes memory usage by enabling \",(0,i.jsx)(e.code,{children:\"hugepages\"}),\" for all CPU cores, increasing memory access efficiency. It calculates the number of \",(0,i.jsx)(e.code,{children:\"hugepages\"}),\" needed based on the available processors (\",(0,i.jsx)(e.code,{children:\"nproc\"}),\") and sets them in the \",(0,i.jsx)(e.code,{children:\"/sys/devices/system/node/node*/hugepages/\"}),\" directories.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/10-xmrig-hugepages.png\",alt:\"XMRig optimization function: enable hugepages\",title:\"XMRig optimization function: enable `hugepages`\",width:\"882\",height:\"259\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The \",(0,i.jsx)(e.code,{children:\"optimize_func()\"}),\" function was not created by the threat actor. The threat actor used an open-source script from the \",(0,i.jsx)(e.code,{children:\"XMRig\"}),\" repository, specifically the \",(0,i.jsx)(e.a,{href:\"https://github.com/xmrig/xmrig/blob/master/scripts/randomx_boost.sh\",rel:\"nofollow\",children:\"randomx_boost.sh\"}),\" script, to aid in their infection chain.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Depending on the user's privileges, it will either run the whole optimization function, or attempt to set the number of \",(0,i.jsx)(e.code,{children:\"hugepages\"}),\" through \",(0,i.jsx)(e.code,{children:\"sysctl\"}),\":\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/11-condition-optimize.png\",alt:\"Condition for running optimize_func() function\",title:\"Condition for running `optimize_func()` function\",width:\"497\",height:\"317\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"All steps performed in this chain show apparent signs of cryptocurrency mining system optimization. Finally, the script grants execution permissions to the \",(0,i.jsx)(e.code,{children:\"upd\"}),' file and \"777\" permissions to all files in its folder and runs ',(0,i.jsx)(e.code,{children:\"upd\"}),\".\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"As we saw earlier in the chain, the \",(0,i.jsx)(e.code,{children:\"upd\"}),\" file checks whether the process stored in \",(0,i.jsx)(e.code,{children:\"bash.pid\"}),\" is still running, and if it is not, it will execute the \",(0,i.jsx)(e.code,{children:\"run\"}),\" script:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/12-run-script-a.png\",alt:\"The run script for thea/ folder\",title:\"The `run` script for the `a/` folder\",width:\"466\",height:\"321\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The run script will start the \",(0,i.jsx)(e.code,{children:\"stop\"}),\" script, which is a typical script that bring down the defenses of any known miner configurations any known miner configurations and kill any known miner processes based on name/process ID or network traffic. A shortened version of this script is illustrated below:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/13-stop-script-a.png\",alt:\"The stop script for the a/ folder\",title:\"The `stop` script for the `a/` folder\",width:\"846\",height:\"521\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Interestingly enough, a second process-killing script called \",(0,i.jsx)(e.code,{children:\"init0\"}),\" is present, which is an \",(0,i.jsx)(e.a,{href:\"https://github.com/MinervaLabsResearch/BlogPosts/blob/master/MinerKiller/MinerKiller.sh\",rel:\"nofollow\",children:\"open-source script\"}),\" for killing cryptocurrency miners in a Linux environment. This script is not being run, as the execution flow for this script was commented out in the \",(0,i.jsx)(e.code,{children:\"a\"}),\" script.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"After the \",(0,i.jsx)(e.code,{children:\"stop\"}),\" script has been successfully run, the \",(0,i.jsx)(e.code,{children:\"run\"}),\" script starts the \",(0,i.jsx)(e.code,{children:\"kswapd01\"}),\" and \",(0,i.jsx)(e.code,{children:\"kswapd0\"}),\" binaries in the background via \",(0,i.jsx)(e.code,{children:\"nohup\"}),\".\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"kswapd01\",children:\"kswapd01\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The \",(0,i.jsx)(e.code,{children:\"kswap01\"}),\" binary plays a critical role in ensuring persistent communication within the malware\\u2019s infrastructure. Its main task is to monitor and maintain a continuous \",(0,i.jsx)(e.code,{children:\"socat\"}),\" process, which is essential for communication with the attacker\\u2019s C2 servers.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/14-kswapd01-main.png\",alt:\"The main function of the kswapd01 socat wrapper\",title:\"image_toThe main function of the `kswapd01` `socat` wrapperoltip\",width:\"800\",height:\"724\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"When executed, \",(0,i.jsx)(e.code,{children:\"kswap01\"}),\" checks for any existing \",(0,i.jsx)(e.code,{children:\"socat\"}),\" processes running on the infected machine. If no active connection is found, it proceeds to kill any running \",(0,i.jsx)(e.code,{children:\"socat\"}),\" processes and selects an alternative IP address from a predefined list. The binary then establishes a new connection by launching a fresh \",(0,i.jsx)(e.code,{children:\"socat\"}),\" process to listen on the local machine and forward traffic to a remote server, typically on port 4444. This ensures the malware maintains control over the infected system and can continue receiving commands from the attacker.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"However, it's important to note that not every version of the OUTLAW malware package observed includes the \",(0,i.jsx)(e.code,{children:\"socat\"}),\" binary. In these cases, the functionality provided by \",(0,i.jsx)(e.code,{children:\"socat\"}),\" is either replicated by other means or simply omitted, relying on alternative methods for maintaining persistence and communication.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"By performing these checks and modifications, \",(0,i.jsx)(e.code,{children:\"kswap01\"}),\" helps maintain the persistence of the C2 connection, making it harder for defenders to interrupt the communication channel between the attacker and the compromised system.\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"kswapd0\",children:\"kswapd0\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The file named \",(0,i.jsx)(e.code,{children:\"kswapd0\"}),\" is a maliciously modified copy of the legitimate \",(0,i.jsx)(e.code,{children:\"XMRig\"}),\" cryptocurrency miner (specifically version 6.22.1).\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/15-kswapd0-xmrig-version.png\",alt:\"The XMRig version\",title:\"The `XMRig` version\",width:\"1000\",height:\"294\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Two major modifications define the malware\\u2019s behavior:\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:\"1. Startup Shell Commands\"})}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"The malware removes and recreates the victim\\u2019s \",(0,i.jsx)(e.code,{children:\"~/.ssh\"}),\" folder, injects an attacker-controlled SSH public key, and re-applies restrictive permissions (\",(0,i.jsx)(e.code,{children:\"chattr +ia\"}),\") to prevent modification. This grants persistent SSH access.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"It also removes or locks existing \",(0,i.jsx)(e.code,{children:\"XMRig\"}),\" configuration files (e.g., \",(0,i.jsx)(e.code,{children:\"~/.xmrig.json\"}),\", \",(0,i.jsx)(e.code,{children:\"~/.config/xmrig.json\"}),\") to ensure the attacker\\u2019s embedded miner settings remain intact.\"]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:\"2. Embedded Miner Configuration\"})}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"The binary is compiled with an internal mining configuration, allowing XMRIG to run without an external config file.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Mining traffic is routed to multiple Monero pools over plaintext ports (\",(0,i.jsx)(e.code,{children:\":80\"}),\", \",(0,i.jsx)(e.code,{children:\":4444\"}),\"), SSL (\",(0,i.jsx)(e.code,{children:\":442\"}),\"), and occasionally TOR addresses. Note that the port 442 here is not a typo.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"The configuration optimizes performance by:\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Running the miner in the background\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Enabling large pages for \",(0,i.jsx)(e.code,{children:\"RandomX\"})]}),`\n`,(0,i.jsx)(e.li,{children:\"Setting the donation level to zero\"}),`\n`,(0,i.jsx)(e.li,{children:\"Maximizing CPU thread usage\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"By locking out administrators, preventing config changes, and injecting an attacker-controlled SSH key, \",(0,i.jsx)(e.code,{children:\"kswapd0\"}),\" serves as a stealthy persistence mechanism \\u2014 allowing for continuous Monero mining and unauthorized remote access, all while masquerading as a legitimate system process.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"subroutine-execution-of-b-directory-stealth-shellbot\",children:\"Subroutine Execution of b/ directory: STEALTH SHELLBOT\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"As we described earlier, the \",(0,i.jsx)(e.code,{children:\"a\"}),\" binary in the \",(0,i.jsx)(e.code,{children:\"b/\"}),\" directory was also executed via the \",(0,i.jsx)(e.code,{children:\"init\"}),\" scripts.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/16-a-in-b-folder.png\",alt:\"The a script in the b/ folder\",title:\"The `a` script in the `b/` folder\",width:\"294\",height:\"408\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"This script kicks off another \",(0,i.jsx)(e.code,{children:\"stop\"}),\" script with the same purpose we described earlier: kill any known bad processes. Afterward, it creates a script called \",(0,i.jsx)(e.code,{children:\"sync\"}),\", with the sole purpose of executing the \",(0,i.jsx)(e.code,{children:\"run\"}),\" script. This script is referenced in the cronjob we described earlier. The \",(0,i.jsx)(e.code,{children:\"run\"}),\" script contains three base64-encoded blobs, which are piped to \",(0,i.jsx)(e.code,{children:\"perl\"}),\". An example of a shortened script is shown below:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/17-base64-encoded.png\",alt:\"Base64 encoded code\",title:\"Base64 encoded code\",width:\"800\",height:\"283\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Upon base64 decoding, obfuscated \",(0,i.jsx)(e.code,{children:\"perl\"}),\" scripts are identified. These scripts leverage a \",(0,i.jsx)(e.a,{href:\"https://perlobfuscator.com/\",rel:\"nofollow\",children:\"public Perl Obfuscator\"}),\" utility to obfuscate their contents, making them harder to analyze:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/18-perl-obfuscated-code.png\",alt:\"Perl obfuscated code\",title:\"Perl obfuscated code\",width:\"800\",height:\"428\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Fortunately, the author left the standard comments in the obfuscated scripts. By using the \",(0,i.jsx)(e.a,{href:\"https://perlobfuscator.com/decode-stunnix-5.17.1.pl\",rel:\"nofollow\",children:\"publicly available deobfuscator\"}),\" we can deobfuscate the script through the following command:\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-bash\",children:`perl decode-stunnix-5.17.1.pl \u003c obfuscated_run.pl \u003e deobfuscated_run.pl\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"After which we can view the deobfuscated contents:\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/19-perl-deobfuscated.png\",alt:\"Part of the Stealth Shellbot Perl code\",title:\"Part of the `Stealth Shellbot` Perl code\",width:\"711\",height:\"965\"})}),`\n`,(0,i.jsx)(e.p,{children:\"This is just the first few lines of the script, for illustrative purposes. This deobfuscation technique can also be used for the other obfuscated Perl scripts used by OUTLAW. We will take a closer look at these scripts in just a moment.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The script ends off with installing its own SSH public key for persistent access, setting restrictive permissions, and making the directory immutable to prevent modification through \",(0,i.jsx)(e.code,{children:\"chattr\"}),\":\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/20-persistence.png\",alt:\"Persistence via SSH key\",title:\"Persistence via SSH key\",width:\"1285\",height:\"228\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"stealth-shellbot-scripts\",children:\"STEALTH SHELLBOT Scripts\"}),`\n`,(0,i.jsx)(e.p,{children:\"The STEALTH SHELLBOT scripts used in OUTLAW are not custom-built but rather publicly available IRC bot scripts, often sourced from old GitHub repositories and underground forums. These scripts have been around for over a decade, originally designed for remote administration, automation, and botnet management. However, they have since been repurposed by malware authors for malicious activities.\"}),`\n`,(0,i.jsx)(e.p,{children:\"SHELLBOT scripts operate as IRC-based backdoors, allowing attackers to remotely control infected machines via predefined commands sent through an IRC channel. Once connected to the attacker\\u2019s IRC server, these bots can:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Execute arbitrary shell commands\"}),`\n`,(0,i.jsx)(e.li,{children:\"Download and execute additional payloads\"}),`\n`,(0,i.jsx)(e.li,{children:\"Launch DDoS attacks (in older variants)\"}),`\n`,(0,i.jsx)(e.li,{children:\"Steal credentials or exfiltrate system information\"}),`\n`,(0,i.jsx)(e.li,{children:\"Manage crypto miners or other malware components\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"OUTLAW integrates these legacy SHELLBOT scripts as a secondary persistence mechanism, ensuring that even if its brute-force modules are disrupted, attackers still retain a remote foothold. The bot connects to an attacker-controlled IRC C2, where it listens for further commands, enabling on-demand execution of malicious actions.\"}),`\n`,(0,i.jsx)(e.p,{children:\"While these scripts are not novel, their continued use highlights how attackers rely on publicly available tools rather than developing new malware from scratch.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"subroutine-execution-of-c-directory-customer-bruteforcer\",children:\"Subroutine Execution of c/ directory: Customer Bruteforcer\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"As part of the third and final sub-routine, a custom bruteforce tool is deployed. This chain starts, similar to the previous sub-routines, from the \",(0,i.jsx)(e.code,{children:\"init\"}),\" and \",(0,i.jsx)(e.code,{children:\"init2\"}),\" scripts. These scripts both call the \",(0,i.jsx)(e.code,{children:\"start\"}),\" script, containing the following contents:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/21-start-script-in-c.png\",alt:\"alt_tThe start script in the c/ folderext\",title:\"The `start` script in the `c/` folder\",width:\"640\",height:\"730\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"This script stores the current working directory, provides all permissions (777) to all files in the current directory, and creates a script named \",(0,i.jsx)(e.code,{children:\"aptitude\"}),\" (which is also called by the previously set up cron job), to run the \",(0,i.jsx)(e.code,{children:\"run\"}),\" script. After creating \",(0,i.jsx)(e.code,{children:\"aptitude\"}),\", it is granted execution permissions and is run.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The \",(0,i.jsx)(e.code,{children:\"run\"}),\" script is used to gather CPU architecture information and count CPU cores to determine execution behavior, as shown below:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/22-run-script-in-c.png\",alt:\"The run script in the c/ folder\",title:\"The `run` script in the `c/` folder\",width:\"1106\",height:\"1302\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"If the system is x86_64, it checks whether the CPU has fewer than 7 cores, introducing a randomized delay before executing \",(0,i.jsx)(e.code,{children:\"./go\"}),\" in the background. If 7 or more cores are detected, execution is skipped or altered (with a previously used binary \",(0,i.jsx)(e.code,{children:\"golan\"}),\" now commented out). The threat actor may have been testing or working with a Golang binary that can make full use of the number of cores present in a system, but that is just a guess.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"In most scenarios, the execution flow moves to the bash script called \",(0,i.jsx)(e.code,{children:\"go\"}),\":\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/23-go-script-in-c.png\",alt:\"The go bash script in the c/ folder\",title:\"The `go` bash script in the `c/` folder\",width:\"1096\",height:\"1580\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The script determines the CPU architecture and assigns a thread count accordingly:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"ARM-based systems \\u2192 75 threads\"}),`\n`,(0,i.jsx)(e.li,{children:\"i686 (32-bit x86) \\u2192 325 threads\"}),`\n`,(0,i.jsx)(e.li,{children:\"All others (default) \\u2192 475 threads\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"It then enters an infinite loop, executing the following actions:\"}),`\n`,(0,i.jsxs)(e.ol,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Creates and cleans up temporary files (\",(0,i.jsx)(e.code,{children:\"v\"}),\", \",(0,i.jsx)(e.code,{children:\"p\"}),\", \",(0,i.jsx)(e.code,{children:\"ip\"}),\", \",(0,i.jsx)(e.code,{children:\"xtr*\"}),\", \",(0,i.jsx)(e.code,{children:\"a.*\"}),\", \",(0,i.jsx)(e.code,{children:\"b.*\"}),\").\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Writes hardcoded values (\",(0,i.jsx)(e.code,{children:\"257.287.563.234\"}),\" and \",(0,i.jsx)(e.code,{children:\"sdaferthqhr34312asdfa\"}),\") into files \",(0,i.jsx)(e.code,{children:\"c\"}),\" and \",(0,i.jsx)(e.code,{children:\"d\"}),\".\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Waits for a random delay (1-30 seconds) before launching \",(0,i.jsx)(e.code,{children:\"blitz\"}),\".\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Executes \",(0,i.jsx)(e.code,{children:\"blitz\"}),\" for 3 hours with specified parameters (\",(0,i.jsx)(e.code,{children:\"-t $threads\"}),\" suggests multi-threaded processing).\"]}),`\n`,(0,i.jsx)(e.li,{children:\"Performs post-execution cleanup, removing temporary and log files before repeating the cycle.\"}),`\n`]}),`\n`,(0,i.jsx)(e.h4,{id:\"blitz\",children:\"BLITZ\"}),`\n`,(0,i.jsx)(e.p,{children:\"OUTLAW is a self-propagating worm that spreads laterally through SSH brute-force attacks using BLITZ, its custom-built brute-forcer. Designed for aggressive, automated credential attacks, BLITZ systematically scans for and compromises systems with weak or default SSH credentials, allowing the malware to expand its foothold with minimal attacker intervention.\"}),`\n`,(0,i.jsx)(e.h5,{id:\"blitz-execution-process\",children:\"BLITZ Execution Process\"}),`\n`,(0,i.jsx)(e.p,{children:\"Upon execution, BLITZ follows a structured attack sequence:\"}),`\n`,(0,i.jsxs)(e.ol,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"IP Target and Credential Retrieval\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"BLITZ contacts an SSH C2 server to fetch a list of target IPs and credential pairs.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Brute-Force Authentication \u0026 System Profiling\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Using multi-threaded SSH brute-forcing, BLITZ attempts to authenticate with stolen credentials.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Once access is gained, it:\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Changes the user\\u2019s password for persistent access.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Executes system reconnaissance commands, collecting:\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"User privileges\"}),`\n`,(0,i.jsx)(e.li,{children:\"CPU details\"}),`\n`,(0,i.jsx)(e.li,{children:\"SSH banner information\"}),`\n`,(0,i.jsx)(e.li,{children:\"OS version\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsx)(e.li,{children:\"Exfiltrates gathered data to the C2 server.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Subnet Scanning \u0026 Lateral Movement\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"The malware scans the local subnet of newly compromised systems, identifying additional SSH-accessible machines to attack.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Self-Replication \u0026 Malware Deployment\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Instead of downloading from an external C2, BLITZ directly transfers the dota3.tar.gz malware package from the infecting host to the new victim, reinforcing persistence and minimizing reliance on external infrastructure.\"}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"By combining automated brute-force attacks, system profiling, subnet scanning, and direct malware transfer, BLITZ maximizes infection efficiency while ensuring continued network expansion.\"}),`\n`,(0,i.jsx)(e.h5,{id:\"binary-analysis--c2-communication\",children:\"Binary Analysis \u0026 C2 Communication\"}),`\n`,(0,i.jsx)(e.p,{children:\"Beyond brute-force operations, analysis reveals that BLITZ executes its tasks by interacting with system shell commands and an embedded SSH library. Once connected to a compromised system, it queries the C2 server for updated targets and relays authentication data.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/24-random-ip-select.png\",alt:\"Random IP Selection for the C2 SSH server\",title:\"Random IP Selection for the C2 SSH server\",width:\"1426\",height:\"1018\"})}),`\n`,(0,i.jsx)(e.p,{children:'Additionally, OUTLAW incorporates a hardcoded SSH key for C2 authentication, which must be unlocked using the password \"pegasus\". Upon successful authentication, Blitz logs attack details into a \"v\" file, structured as follows:'}),`\n`,(0,i.jsx)(e.p,{children:\"This log contains:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Original username and password used in the attack.\"}),`\n`,(0,i.jsx)(e.li,{children:\"The victim\\u2019s IP address and the new password set by the malware.\"}),`\n`,(0,i.jsx)(e.li,{children:\"SSH port and OS details, including CPU specifications.\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:'Once BLITZ completes its scanning cycle, the \"v\" file is exfiltrated to an SSH C2 server, providing attackers with a continuously updated list of infected systems.'}),`\n`,(0,i.jsx)(e.h2,{id:\"post-compromise\",children:\"Post-Compromise\"}),`\n`,(0,i.jsx)(e.p,{children:\"To analyze the attacker\\u2019s post-compromise behavior, we deliberately set up a honeypot and proactively uploaded its credentials to the same SSH C2 server used by the attacker. This effectively invited the attacker into our controlled environment, allowing us to closely monitor their subsequent actions.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"A few days after BLITZ successfully brute-forced and set a new password on the honeypot system, we observed a remote login using these credentials. The login originated from 212.234.225[.]29.  The attacker immediately performed basic reconnaissance by running the w command to check who was logged in and then executing ps to see what processes were running. In the course of typing commands, they made a small typo and killed the prompt with a quick Ctrl+C, indicating a manual interaction rather than an automated script at this stage. Next, the attacker pasted a series of commands to download a fresh copy of dota3.tar.gz via \",(0,i.jsx)(e.code,{children:\"wget\"}),\", unpacked it, and executed the newly fetched script.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"This whole chain of activity can be displayed through \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/guide/en/security/current/session-view.html\",rel:\"nofollow\",children:\"session view\"}),\", an investigation tool that allows you to examine Linux process data organized in a tree-like structure according to the Linux logical event model, with processes organized by parentage and time of execution. It displays events in a highly readable format that is inspired by the terminal. This makes it a powerful tool for monitoring and investigating session activity on your Linux infrastructure and understanding user and service behavior.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/outlaw-linux-malware/01-honeypot.gif\",alt:\"Threat actors actions in a honeypot\",title:\"Threat actors actions in a honeypot\",width:\"593\",height:\"356\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The attack chain displayed above mirrors the original infection method, suggesting that the attacker was either updating components or re-infecting the host to maintain persistence. Soon after verifying that the updated payload was running, the attacker disconnected from the host, leaving behind an environment primed for continued SSH brute-forcing, cryptocurrency mining, and remote control via IRC.\"}),`\n`,(0,i.jsx)(e.p,{children:'This brief login serves as a reminder that even unsophisticated campaigns can include pockets of interactive attacker activity\\u2014a manual \"quality check\" of sorts\\u2014underscoring the importance of timely detection and swift containment.'}),`\n`,(0,i.jsx)(e.h2,{id:\"detecting-outlaw-through-mitre-attck\",children:\"Detecting OUTLAW through MITRE ATT\u0026CK\"}),`\n`,(0,i.jsx)(e.p,{children:\"OUTLAW is a Linux malware that relies on SSH brute-force attacks, cryptocurrency mining, and worm-like propagation to infect and maintain control over systems. While not highly sophisticated, it covers a broad range of MITRE ATT\u0026CK techniques, making it an effective case for detection engineering.\"}),`\n`,(0,i.jsx)(e.p,{children:\"This section maps OUTLAW\\u2019s attack chain to MITRE ATT\u0026CK, highlighting Elastic SIEM and endpoint rules and threat-hunting queries that can identify its activity at different stages.\"}),`\n`,(0,i.jsx)(e.p,{children:\"OUTLAW follows a structured infection flow:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Initial Access\"}),\" \\u2013 SSH brute-force against weak credentials.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Execution\"}),\" \\u2013 Runs malicious scripts to kick off several stages of malware infection.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Persistence\"}),\" \\u2013 Installs cron jobs and modifies SSH keys.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Defense Evasion\"}),\" \\u2013 Hides in hidden directories, modifies file permissions, uses packing techniques, command encoding, and obfuscates scripts.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Credential Access\"}),\" \\u2013 Modifies credentials and injects public SSH keys.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Discovery\"}),\" \\u2013 Enumerates user, system, and hardware details.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Lateral Movement\"}),\" \\u2013 Spreads via internal SSH brute-force and malware transfer.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Collection \u0026 Exfiltration\"}),\" \\u2013 Collects and exfiltrates system data to its C2.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Command and Control\"}),\" \\u2013 Uses socat and STEALTH SHELLBOT for C2 communication.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Impact\"}),\" \\u2013 Launches XMRIG to mine cryptocurrency and leverages the infected host as a brute-force node.\"]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"The following sections detail detection strategies for each technique, helping defenders effectively identify and mitigate OUTLAW\\u2019s infections.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"ta001-initial-access\",children:\"TA001: Initial Access\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"OUTLAW gains initial access through opportunistic SSH brute-forcing, targeting systems with weak or default credentials. Elastic pre-built \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/\",rel:\"nofollow\",children:\"detection rules\"}),\" can successfully detect this method of initial access. These include:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/linux/credential_access_potential_linux_ssh_bruteforce_external.toml\",rel:\"nofollow\",children:\"Potential External Linux SSH Brute Force Detected\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/linux/credential_access_potential_successful_linux_ssh_bruteforce.toml\",rel:\"nofollow\",children:\"Potential Successful SSH Brute Force Attack\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"Additionally, there are several rules based on authentication logs to detect suspicious SSH authentications:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_first_time_public_key_authentication.toml\",rel:\"nofollow\",children:\"Successful SSH Authentication from Unusual SSH Public Key\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_successful_ssh_authentication_by_unusual_user.toml\",rel:\"nofollow\",children:\"Successful SSH Authentication from Unusual User\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_successful_ssh_authentication_by_unusual_ip.toml\",rel:\"nofollow\",children:\"Successful SSH Authentication from Unusual IP Address\"})}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Besides relying on detections, it is important to incorporate threat hunting into your workflow. Elastic Security provides several hunting queries using \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/guide/en/elasticsearch/reference/current/esql.html\",rel:\"nofollow\",children:\"ES|QL\"}),\" and \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/guide/en/kibana/current/osquery.html\",rel:\"nofollow\",children:\"OSQuery\"}),\", publicly available in our \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules\",rel:\"nofollow\",children:\"Detection Rules repository\"}),\", specifically in the \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/tree/main/hunting\",rel:\"nofollow\",children:\"Linux hunting subdirectory\"}),\". For example, the following two hunts may help in identifying different stages of the attack:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/hunting/linux/queries/login_activity_by_source_address.toml\",rel:\"nofollow\",children:\"Logon Activity by Source IP\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/hunting/linux/queries/excessive_ssh_network_activity_unique_destinations.toml\",rel:\"nofollow\",children:\"Excessive SSH Network Activity to Unique Destinations\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"ta002-execution\",children:\"TA002: Execution\"}),`\n`,(0,i.jsx)(e.p,{children:\"After gaining initial access, OUTLAW executes a series of scripts and binaries to establish control. Upon downloading and unpacking, we detect:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/behavior/rules/linux/persistence_file_downloaded_from_suspicious_source_by_web_server.toml\",rel:\"nofollow\",children:\"File Downloaded from Suspicious Source by Web Server\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/yara/rules/Linux_Trojan_Pornoasset.yar\",rel:\"nofollow\",children:\"Memory Threat Detection Alert: Linux.Trojan.Pornoasset\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"The STEALTH SHELLBOT script is detected through:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/behavior/rules/linux/execution_script_executed_through_unusual_parent_process.toml\",rel:\"nofollow\",children:\"Script Executed Through Unusual Parent Process\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"Additionally, the malware executes multiple suspicious system commands, triggering:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/rules/linux/execution_suspicious_executable_running_system_commands.toml\",rel:\"nofollow\",children:\"Suspicious System Commands Executed by Previously Unknown Executable\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"ta003-persistence\",children:\"TA003: Persistence\"}),`\n`,(0,i.jsxs)(e.p,{children:['This combination of cron-based execution and SSH key manipulation allows OUTLAW to maintain a persistent foothold on compromised systems. Both of these persistence techniques are extensively researched in our \"',(0,i.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/primer-on-persistence-mechanisms\",rel:\"nofollow\",children:\"Linux Detection Engineering -  A primer on persistence mechanisms\"}),'\" publication. We can detect these techniques through the following SIEM and ',(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts\",rel:\"nofollow\",children:\"endpoint rules\"}),\":\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/main/rules/linux/persistence_cron_job_creation.toml\",rel:\"nofollow\",children:\"Cron Job Created or Modified\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/cross-platform/persistence_ssh_authorized_keys_modification.toml\",rel:\"nofollow\",children:\"SSH Authorized Keys File Modification\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/main/rules/integrations/fim/persistence_suspicious_file_modifications.toml\",rel:\"nofollow\",children:\"Potential Persistence via File Modification\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"Additionally, we can hunt for these techniques through the following ES|QL and OSQuery hunts:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/hunting/linux/queries/persistence_via_cron.toml\",rel:\"nofollow\",children:\"Persistence via Cron\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/hunting/linux/queries/persistence_via_ssh_configurations_and_keys.toml\",rel:\"nofollow\",children:\"Persistence via SSH Configurations and/or Keys\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"ta005-defense-evasion\",children:\"TA005: Defense Evasion\"}),`\n`,(0,i.jsx)(e.p,{children:\"OUTLAW employs multiple defense evasion techniques to avoid detection. One of its primary methods is Base64 decoding, which is detected through the following pre-built rules:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/b9e8115c2fb55c328ea8e9830c96ce37d2f316c5/rules/linux/defense_evasion_interpreter_launched_from_decoded_payload.toml\",rel:\"nofollow\",children:\"Base64 Decoded Payload Piped to Interpreter\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/b9e8115c2fb55c328ea8e9830c96ce37d2f316c5/rules/linux/defense_evasion_base64_decoding_activity.toml\",rel:\"nofollow\",children:\"Unusual Base64 Encoding/Decoding Activity\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/linux/defense_evasion_linux_payload_decoded_and_decrypted_via_built_in_utility.toml\",rel:\"nofollow\",children:\"Linux Payload Decoded and Decrypted via Built-in Utility\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"Additionally, the malware's binaries are packed with UPX, reducing their size and altering their signature to evade traditional malware detection. Once the malware unpacks in memory, this is detected through our general malware detections.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Continuing down the execution chain, the malware creates several hidden files and directories and modifies them using \",(0,i.jsx)(e.code,{children:\"chattr\"}),\":\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/rules/linux/defense_evasion_file_mod_writable_dir.toml\",rel:\"nofollow\",children:\"File Permission Modification in Writable Directory\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/rules/linux/defense_evasion_hidden_file_dir_tmp.toml\",rel:\"nofollow\",children:\"Creation of Hidden Files and Directories via CommandLine\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/rules/linux/defense_evasion_chattr_immutable_file.toml\",rel:\"nofollow\",children:\"File made Immutable by Chattr\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/behavior/rules/linux/defense_evasion_chattr_execution_from_unusual_parent.toml\",rel:\"nofollow\",children:\"Chattr Execution from Unusual Parent\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"We can further enhance detection through the following hunting query:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/hunting/linux/queries/defense_evasion_via_hidden_process_execution.toml\",rel:\"nofollow\",children:\"Hidden Process Execution\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"ta006-credential-access\",children:\"TA006: Credential Access\"}),`\n`,(0,i.jsx)(e.p,{children:\"OUTLAW maintains persistent access to a compromised system by manipulating credentials. Following successful SSH brute-force authentication, the malware replaces the existing SSH authorized_keys file with a new version containing a malicious SSH public key, thereby granting persistent access. This is detected through the following signals:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/cross-platform/persistence_ssh_authorized_keys_modification.toml\",rel:\"nofollow\",children:\"SSH Authorized Keys File Modification\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/defense_evasion_authorized_keys_file_deletion.toml\",rel:\"nofollow\",children:\"SSH Authorized Keys File Deletion\"})}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The malware then changes the user credentials for the authenticated account by entering a new password using the \",(0,i.jsx)(e.code,{children:\"passwd\"}),\" utility:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/persistence_user_credential_modification_via_echo.toml\",rel:\"nofollow\",children:\"Linux User Account Credential Modification\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"ta007-discovery\",children:\"TA007: Discovery\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"OUTLAW gathers system information upon successful infection to profile the compromised environment. The malware executes various commands to collect details about the system\\u2019s CPU, user privileges, operating system, memory usage, and available binaries. This reconnaissance step helps the attacker assess the system\\u2019s capabilities and determine how best to utilize the compromised machine. These are all detected through several \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/guide/en/security/current/building-block-rule.html\",rel:\"nofollow\",children:\"building block rules\"}),\", as listed in our \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/tree/main/rules_building_block\",rel:\"nofollow\",children:\"rules_building_block directory\"}),\". Below is a short list of the most important ones triggered by OUTLAW:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_linux_system_information_discovery.toml\",rel:\"nofollow\",children:\"Linux System Information Discovery\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_process_discovery_via_builtin_tools.toml\",rel:\"nofollow\",children:\"Process Discovery via Built-In Applications\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_linux_system_owner_user_discovery.toml\",rel:\"nofollow\",children:\"System Owner/User Discovery Linux\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_of_accounts_or_groups_via_builtin_tools.toml\",rel:\"nofollow\",children:\"Account or Group Discovery via Built-In Tools\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_system_network_connections.toml\",rel:\"nofollow\",children:\"System Network Connections Discovery\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"The default interface settings do not include building block rules due to their relatively high noise levels. However, these rules can be enabled to assist in the identification of potential threats.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"ta008-lateral-movement\",children:\"TA008: Lateral Movement\"}),`\n`,(0,i.jsx)(e.p,{children:\"OUTLAW malware spreads through a compromised network by carrying out internal SSH brute-force attacks. We can identify this behavior through the following ES|QL rules:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/e28512a32fc643651a6bc91444e460ca8f5164be/rules/linux/discovery_port_scanning_activity_from_compromised_host.toml\",rel:\"nofollow\",children:\"Potential Port Scanning Activity from Compromised Host\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/e28512a32fc643651a6bc91444e460ca8f5164be/rules/linux/discovery_subnet_scanning_activity_from_compromised_host.toml\",rel:\"nofollow\",children:\"Potential Subnet Scanning Activity from Compromised Host\"})}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Once a system is successfully brute-forced, the malware package, \",(0,i.jsx)(e.code,{children:\"dota3.tar.gz\"}),\", is deployed from the infected host to the new target. The local subnet is then scanned for additional targets to ensure the malware's continued propagation.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic pre-built detection rules can identify these lateral movement attempts:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules/linux/credential_access_potential_linux_ssh_bruteforce_internal.toml\",rel:\"nofollow\",children:\"Potential Internal Linux SSH Brute Force Detected\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/lateral_movement_remote_file_creation_world_writeable_dir.toml\",rel:\"nofollow\",children:\"Remote File Creation in World Writeable Directory\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/lateral_movement_unusual_remote_file_creation.toml\",rel:\"nofollow\",children:\"Unusual Remote File Creation\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"Additionally, upon copying the OUTLAW malware to a remote host, malware prevention alerts kick in.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"ta009-collection--ta010-exfiltration\",children:\"TA009: Collection \u0026 TA010: Exfiltration\"}),`\n`,(0,i.jsx)(e.p,{children:\"OUTLAW collects basic system information, credentials, and SSH details from compromised machines, primarily for tracking infected hosts and facilitating further attacks. This data is stored in a simple text file before being uploaded to a C2 server. Since this collection activity is limited to gathering system details and writing them to a file, it is not inherently suspicious on its own.\"}),`\n`,(0,i.jsx)(e.p,{children:\"Exfiltration occurs when OUTLAW initiates an outbound SSH connection via sftp-server to transfer the collected information to a predefined C2 server. While this may resemble normal SSH activity, we can detect suspicious execution of file transfer utilities through ES|QL:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/exfiltration_unusual_file_transfer_utility_launched.toml\",rel:\"nofollow\",children:\"Unusual File Transfer Utility Launched\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"ta011-command-and-control\",children:\"TA011: Command and Control\"}),`\n`,(0,i.jsx)(e.p,{children:\"OUTLAW maintains communication with its C2 infrastructure through multiple channels, allowing attackers to issue commands, exfiltrate data, and manage infected systems. We can detect several of the utilities used by the malware through the following rules:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/fbebc6f98eb1070bd96235ea432158756b3f2038/behavior/rules/linux/execution_socat_reverse_shell_or_listener_activity.toml\",rel:\"nofollow\",children:\"Socat Reverse Shell or Listener Activity\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/command_and_control_frequent_egress_netcon_from_sus_executable.toml\",rel:\"nofollow\",children:\"High Number of Egress Network Connections from Unusual Executable\"})}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/command_and_control_suspicious_network_activity_from_unknown_executable.toml\",rel:\"nofollow\",children:\"Suspicious Network Activity to the Internet by Previously Unknown Executable\"}),\".\"]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"The same hunting queries that were relevant for detecting the malware\\u2019s initial access attempts, can also be used to hunt for this C2 activity. Additionally, the following hunting queries can be used:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/hunting/linux/queries/low_volume_external_network_connections_from_process.toml\",rel:\"nofollow\",children:\"Low Volume External Network Connections from Process by Unique Agent\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/hunting/linux/queries/command_and_control_via_unusual_file_downloads_from_source_addresses.toml\",rel:\"nofollow\",children:\"Unusual File Downloads from Source Addresses\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/hunting/linux/queries/excessive_ssh_network_activity_unique_destinations.toml\",rel:\"nofollow\",children:\"Excessive SSH Network Activity to Unique Destinations\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"ta040-impact\",children:\"TA040: Impact\"}),`\n`,(0,i.jsx)(e.p,{children:\"OUTLAW impacts infected systems by consuming CPU resources for cryptocurrency mining and performing SSH brute-force attacks to propagate. Several CPU and memory optimizations are attempted before launching the modified XMRIG mining software, including enabling MSR write access and setting kernel parameters such as hugepages. These modifications can be detected through the following rules:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/linux/defense_evasion_suspicious_kernel_feature_activity.toml\",rel:\"nofollow\",children:\"Suspicious Kernel Feature Activity\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/linux/impact_msr_write_access_enabled.toml\",rel:\"nofollow\",children:\"MSR Write Access Enabled\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"As OUTLAW attempts to enable MSR write access via modprobe but lacks the required permissions, kernel driver-related rules are triggered:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules/linux/persistence_kernel_driver_load_by_non_root.toml\",rel:\"nofollow\",children:\"Kernel Driver Load by Non-Root User\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules/linux/persistence_kernel_driver_load.toml\",rel:\"nofollow\",children:\"Kernel Driver Load\"})}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"These rules directly monitor for \",(0,i.jsx)(e.code,{children:\"init_module()\"}),\" and \",(0,i.jsx)(e.code,{children:\"finit_module()\"}),\" syscalls, through \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/guide/en/integrations/current/auditd.html\",rel:\"nofollow\",children:\"Auditd\"}),\". For more information on how to set up the \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/guide/en/integrations/current/auditd_manager.html\",rel:\"nofollow\",children:\"Auditd Manager integration\"}),\" to capture driver events and much more, check out the \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/linux-detection-engineering-with-auditd\",rel:\"nofollow\",children:\"Linux Detection Engineering with Auditd\"}),\" publication.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"Simultaneously, SSH brute-force attempts are launched from the infected host, triggering:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/impact_potential_bruteforce_malware_infection.toml\",rel:\"nofollow\",children:\"Potential Malware-Driven SSH Brute Force Attempt\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"Throughout its execution, OUTLAW runs kill scripts to terminate competing malware or leftover processes from previous infections. This behavior triggers:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/defense_evasion_kill_command_executed.toml\",rel:\"nofollow\",children:\"Kill Command Executed\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/cross-platform/execution_kill_command_executed_from_binary_in_unusual_location.toml\",rel:\"nofollow\",children:\"Kill Command Executed from Binary in Unusual Location\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/cross-platform/defense_evasion_kill_command_executed_from_a_hidden_process.toml\",rel:\"nofollow\",children:\"Kill Command Executed from a Hidden Process\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"indicators-of-compromise-iocs\",children:\"Indicators of Compromise (IOCs)\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The complete set of indicators can be found as a bundle on \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/indicators/outlaw\",rel:\"nofollow\",children:\"Github\"}),\".\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"yara-signatures\",children:\"Yara Signatures\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-yara\",children:`rule Linux_Hacktool_Outlaw_cf069e73 {\n    meta:\n        author = \"Elastic Security\"\n        description = \"OUTLAW SSH bruteforce component fom the Dota3 package\"\n        reference_sample = \"c3efbd6b5e512e36123f7b24da9d83f11fffaf3023d5677d37731ebaa959dd27\"\n      \n    strings:\n        $ssh_key_1 = \"MIIJrTBXBgkqhkiG9w0BBQ0wSjApBgkqhkiG9w0BBQwwHAQI8vKBZRGKsHoCAggA\"\n        $ssh_key_2 = \"MAwGCCqGSIb3DQIJBQAwHQYJYIZIAWUDBAECBBBC3juWsJ7DsDd2wH2XI+vUBIIJ\"\n        $ssh_key_3 = \"UCQ2viiVV8pk3QSUOiwionAoe4j4cBP3Ly4TQmpbLge9zRfYEUVe4LmlytlidI7H\"\n        $ssh_key_4 = \"O+bWbjqkvRXT9g/SELQofRrjw/W2ZqXuWUjhuI9Ruq0qYKxCgG2DR3AcqlmOv54g\"\n        $path_1 = \"/home/eax/up\"\n        $path_2 = \"/var/tmp/dota\"\n        $path_3 = \"/dev/shm/ip\"\n        $path_4 = \"/dev/shm/p\"\n        $path_5 = \"/var/tmp/.systemcache\"\n        $cmd_1 = \"cat /proc/cpuinfo | grep name | head -n 1 | awk '{print $4,$5,$6,$7,$8,$9;}'\"\n        $cmd_2 = \"cd ~; chattr -ia .ssh; lockr -ia .ssh\"\n        $cmd_3 = \"sort -R b | awk '{ if ( NF == 2 ) print } '\u003e p || cat b | awk '{ if ( NF == 2 ) print } '\u003e p; sort -R a\"\n        $cmd_4 = \"rm -rf /var/tmp/dota*\"\n        $cmd_5 = \"rm -rf a b c d p ip ab.tar.gz\"\n    condition:\n        (all of ($ssh_key*)) or (3 of ($path*) and 3 of ($cmd*))\n}\n`})}),`\n`,(0,i.jsx)(e.h4,{id:\"siem-and-endpoint-rules-overview-by-mitre-attck-tactic\",children:\"SIEM and Endpoint Rules Overview by MITRE ATT\u0026CK Tactic\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Technique ID\"}),(0,i.jsx)(e.th,{children:\"Description\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:\"TA001: Initial Access\"})}),(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/linux/credential_access_potential_linux_ssh_bruteforce_external.toml\",rel:\"nofollow\",children:\"Potential External Linux SSH Brute Force Detected\"}),\" \",(0,i.jsx)(\"br\",{}),\" \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/linux/credential_access_potential_successful_linux_ssh_bruteforce.toml\",rel:\"nofollow\",children:\"Potential Successful SSH Brute Force Attack\"}),\" \",(0,i.jsx)(\"br\",{}),\" \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_first_time_public_key_authentication.toml\",rel:\"nofollow\",children:\"Successful SSH Authentication from Unusual SSH Public Key\"}),\" \",(0,i.jsx)(\"br\",{}),\"        \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_successful_ssh_authentication_by_unusual_user.toml\",rel:\"nofollow\",children:\"Successful SSH Authentication from Unusual User\"}),\" \",(0,i.jsx)(\"br\",{}),\" \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/initial_access_successful_ssh_authentication_by_unusual_ip.toml\",rel:\"nofollow\",children:\"Successful SSH Authentication from Unusual IP Address\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:\"TA002: Execution\"})}),(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/behavior/rules/linux/persistence_file_downloaded_from_suspicious_source_by_web_server.toml\",rel:\"nofollow\",children:\"File Downloaded from Suspicious Source by Web Server\"}),\" \",(0,i.jsx)(\"br\",{}),\" \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/yara/rules/Linux_Trojan_Pornoasset.yar\",rel:\"nofollow\",children:\"Linux.Trojan.Pornoasset\"}),\" \",(0,i.jsx)(\"br\",{}),\" \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/1c9c6c33c20294422cfefb53c3f1f596bf308c7a/behavior/rules/linux/execution_script_executed_through_unusual_parent_process.toml\",rel:\"nofollow\",children:\"Script Executed Through Unusual Parent Process\"}),\" \",(0,i.jsx)(\"br\",{}),\" \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/692a1382bf119c4b95e482fd6f64302528b0d813/rules/linux/execution_suspicious_executable_running_system_commands.toml\",rel:\"nofollow\",children:\"Suspicious System Commands Executed by Previously Unknown Executable\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:\"TA003: Persistence\"})}),(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/main/rules/linux/persistence_cron_job_creation.toml\",rel:\"nofollow\",children:\"Cron Job Created or Modified\"}),\" \",(0,i.jsx)(\"br\",{}),\" \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/cross-platform/persistence_ssh_authorized_keys_modification.toml\",rel:\"nofollow\",children:\"SSH Authorized Keys File Modification\"}),\" \",(0,i.jsx)(\"br\",{}),\" \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/main/rules/integrations/fim/persistence_suspicious_file_modifications.toml\",rel:\"nofollow\",children:\"Potential Persistence via File Modification\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:\"TA005: Defense Evasion\"})}),(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/b9e8115c2fb55c328ea8e9830c96ce37d2f316c5/rules/linux/defense_evasion_interpreter_launched_from_decoded_payload.toml\",rel:\"nofollow\",children:\"Base64 Decoded Payload Piped to Interpreter\"}),\" \",(0,i.jsx)(\"br\",{}),\" \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/b9e8115c2fb55c328ea8e9830c96ce37d2f316c5/rules/linux/defense_evasion_base64_decoding_activity.toml\",rel:\"nofollow\",children:\"Unusual Base64 Encoding/Decoding Activity\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:\"TA006: Credential Access\"})}),(0,i.jsxs)(e.td,{children:[(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/bd62867465d6144783ce23d571083a7e982b6251/rules/cross-platform/persistence_ssh_authorized_keys_modification.toml\",rel:\"nofollow\",children:\"SSH Authorized Keys File Modification\"}),\" \",(0,i.jsx)(\"br\",{}),\" \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/defense_evasion_authorized_keys_file_deletion.toml\",rel:\"nofollow\",children:\"SSH Authorized Keys File Deletion\"}),\" \",(0,i.jsx)(\"br\",{}),\" \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/persistence_user_credential_modification_via_echo.toml\",rel:\"nofollow\",children:\"Linux User Account Credential Modification\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:\"TA007: Discovery\"})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/0b98462cfe3499ed560f4bd0e97090533cf8a64d/rules_building_block/discovery_linux_system_information_discovery.toml\",rel:\"nofollow\",children:\"Linux System Information Discovery\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:\"TA008: Lateral Movement\"})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/e28512a32fc643651a6bc91444e460ca8f5164be/rules/linux/discovery_port_scanning_activity_from_compromised_host.toml\",rel:\"nofollow\",children:\"Potential Port Scanning Activity from Compromised Host\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:\"TA009 \u0026 TA010: Collection \u0026 Exfiltration\"})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/467034ee5b97902421c24c94107e517b15db4062/rules/linux/exfiltration_unusual_file_transfer_utility_launched.toml\",rel:\"nofollow\",children:\"Unusual File Transfer Utility Launched\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:\"TA011: Command and Control\"})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/fbebc6f98eb1070bd96235ea432158756b3f2038/behavior/rules/linux/execution_socat_reverse_shell_or_listener_activity.toml\",rel:\"nofollow\",children:\"Socat Reverse Shell or Listener Activity\"})})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.strong,{children:\"TA040: Impact\"})}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/3fac07906582ca9615d0e291a4629445fd5ca37b/behavior/rules/linux/defense_evasion_suspicious_kernel_feature_activity.toml\",rel:\"nofollow\",children:\"Suspicious Kernel Feature Activity\"})})]})]})]})}),`\n`,(0,i.jsx)(e.h2,{id:\"conclusion\",children:\"Conclusion\"}),`\n`,(0,i.jsx)(e.p,{children:\"OUTLAW exemplifies how even unsophisticated malware can persist and scale effectively in modern environments. Despite lacking advanced evasion techniques, its combination of SSH brute-force attacks, self-replication, and modular components allows it to maintain a long-running botnet. OUTLAW ensures continuous expansion with minimal attacker intervention by leveraging compromised hosts to propagate infections further.\"}),`\n`,(0,i.jsx)(e.p,{children:\"Our honeypot experiment provided a rare glimpse into the attacker's real-world behavior, confirming that while much of OUTLAW\\u2019s operation is automated, there are moments of direct human interaction. The ability to observe manual commands, reconnaissance attempts, and even simple typographical errors highlights an often-overlooked aspect of botnet maintenance\\u2014operator-driven quality control. These insights reinforce the need for detection strategies that account not just for automated attacks but also for manual post-compromise activity.\"}),`\n`,(0,i.jsx)(e.p,{children:\"By understanding how OUTLAW operates, spreads, and monetizes infections, defenders can develop robust detection strategies to mitigate its impact. This report provides actionable SIEM rules, threat-hunting queries, and forensic insights, enabling security teams to stay ahead of similar evolving threats.\"}),`\n`,(0,i.jsx)(e.h2,{id:\"references\",children:\"References\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"[1] CounterCraft, \",(0,i.jsx)(e.a,{href:\"https://www.countercraftsec.com/blog/dota3-malware-again-and-again/\",rel:\"nofollow\",children:\"DOTA3 Malware Again and Again\"})]}),`\n`,(0,i.jsxs)(e.p,{children:[\"[2] Juniper Networks, \",(0,i.jsx)(e.a,{href:\"https://blogs.juniper.net/en-us/threat-research/dota3-is-your-internet-of-things-device-moonlighting\",rel:\"nofollow\",children:\"DOTA3: Is Your Internet of Things Device Moonlighting?\"})]}),`\n`,(0,i.jsxs)(e.p,{children:[\"[3] SANS ISC, \",(0,i.jsx)(e.a,{href:\"https://isc.sans.edu/diary/Hygiene+Hygiene+Hygiene+Guest+Diary/31260\",rel:\"nofollow\",children:\"Hygiene Hygiene Hygiene\"})]}),`\n`,(0,i.jsxs)(e.p,{children:[\"[4] Darktrace, \",(0,i.jsx)(e.a,{href:\"https://darktrace.com/blog/outlaw-returns-uncovering-returning-features-and-new-tactics\",rel:\"nofollow\",children:\"Outlaw Returns: Uncovering Returning Features and New Tactics\"})]})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(d,t)})):d(t)}var x=v;return y(k);})();\n;return Component;"},"_id":"articles/outlaw-linux-malware.mdx","_raw":{"sourceFilePath":"articles/outlaw-linux-malware.mdx","sourceFileName":"outlaw-linux-malware.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/outlaw-linux-malware"},"type":"Article","imageUrl":"/assets/images/outlaw-linux-malware/outlaw.jpg","readingTime":"33 min read","series":"","url":"/outlaw-linux-malware","headings":[{"level":2,"title":"Key Takeaways","href":"#key-takeaways"},{"level":2,"title":"OUTLAW Overview","href":"#outlaw-overview"},{"level":2,"title":"OUTLAW Execution Chain","href":"#outlaw-execution-chain"},{"level":3,"title":"Initial Access: blitz","href":"#initial-access-blitz"},{"level":3,"title":"Execution: tddwrt7s.sh","href":"#execution-tddwrt7ssh"},{"level":3,"title":"Main Initialization script: initall","href":"#main-initialization-script-initall"},{"level":3,"title":"Subroutine Execution of a/ directory: XMRIG","href":"#subroutine-execution-of-a-directory-xmrig"},{"level":4,"title":"kswapd01 ","href":"#kswapd01-"},{"level":4,"title":"kswapd0 ","href":"#kswapd0-"},{"level":3,"title":"Subroutine Execution of b/ directory: STEALTH SHELLBOT","href":"#subroutine-execution-of-b-directory-stealth-shellbot"},{"level":4,"title":"STEALTH SHELLBOT Scripts","href":"#stealth-shellbot-scripts"},{"level":3,"title":"Subroutine Execution of c/ directory: Customer Bruteforcer","href":"#subroutine-execution-of-c-directory-customer-bruteforcer"},{"level":4,"title":"BLITZ","href":"#blitz"},{"level":5,"title":"BLITZ Execution Process","href":"#blitz-execution-process"},{"level":5,"title":"Binary Analysis \u0026 C2 Communication","href":"#binary-analysis--c2-communication"},{"level":2,"title":"Post-Compromise","href":"#post-compromise"},{"level":2,"title":"Detecting OUTLAW through MITRE ATT\u0026CK","href":"#detecting-outlaw-through-mitre-attck"},{"level":3,"title":"TA001: Initial Access","href":"#ta001-initial-access"},{"level":3,"title":"TA002: Execution","href":"#ta002-execution"},{"level":3,"title":"TA003: Persistence","href":"#ta003-persistence"},{"level":3,"title":"TA005: Defense Evasion","href":"#ta005-defense-evasion"},{"level":3,"title":"TA006: Credential Access","href":"#ta006-credential-access"},{"level":3,"title":"TA007: Discovery","href":"#ta007-discovery"},{"level":3,"title":"TA008: Lateral Movement","href":"#ta008-lateral-movement"},{"level":3,"title":"TA009: Collection \u0026 TA010: Exfiltration","href":"#ta009-collection--ta010-exfiltration"},{"level":3,"title":"TA011: Command and Control","href":"#ta011-command-and-control"},{"level":3,"title":"TA040: Impact","href":"#ta040-impact"},{"level":2,"title":"Indicators of Compromise (IOCs)","href":"#indicators-of-compromise-iocs"},{"level":4,"title":"Yara Signatures","href":"#yara-signatures"},{"level":4,"title":"SIEM and Endpoint Rules Overview by MITRE ATT\u0026CK Tactic","href":"#siem-and-endpoint-rules-overview-by-mitre-attck-tactic"},{"level":2,"title":"Conclusion","href":"#conclusion"},{"level":2,"title":"References","href":"#references"}],"author":[{"title":"Remco Sprooten","slug":"remco-sprooten","description":"Elastic Security Labs Team Principal Research Engineer","body":{"raw":"","code":"var Component=(()=\u003e{var p=Object.create;var a=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var _=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),d=(t,e)=\u003e{for(var n in e)a(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,c)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of l(e))!g.call(t,o)\u0026\u0026o!==n\u0026\u0026a(t,o,{get:()=\u003ee[o],enumerable:!(c=x(e,o))||c.enumerable});return t};var j=(t,e,n)=\u003e(n=t!=null?p(f(t)):{},s(e||!t||!t.__esModule?a(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003es(a({},\"__esModule\",{value:!0}),t);var m=_((E,i)=\u003e{i.exports=_jsx_runtime});var C={};d(C,{default:()=\u003ey,frontmatter:()=\u003eb});var r=j(m()),b={title:\"Remco Sprooten\",description:\"Elastic Security Labs Team Principal Research Engineer\",slug:\"remco-sprooten\"};function u(t){return(0,r.jsx)(r.Fragment,{})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(u,t)})):u(t)}var y=h;return M(C);})();\n;return Component;"},"_id":"authors/remco-sprooten.mdx","_raw":{"sourceFilePath":"authors/remco-sprooten.mdx","sourceFileName":"remco-sprooten.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/remco-sprooten"},"type":"Author","imageUrl":"","url":"/authors/remco-sprooten"},{"title":"Ruben Groenewoud","slug":"ruben-groenewoud","description":"Security Research Engineer, Elastic","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,l=Object.prototype.hasOwnProperty;var _=(e,t)=\u003e()=\u003e(t||e((t={exports:{}}).exports,t),t.exports),j=(e,t)=\u003e{for(var n in t)s(e,n,{get:t[n],enumerable:!0})},a=(e,t,n,u)=\u003e{if(t\u0026\u0026typeof t==\"object\"||typeof t==\"function\")for(let o of g(t))!l.call(e,o)\u0026\u0026o!==n\u0026\u0026s(e,o,{get:()=\u003et[o],enumerable:!(u=d(t,o))||u.enumerable});return e};var p=(e,t,n)=\u003e(n=e!=null?x(f(e)):{},a(t||!e||!e.__esModule?s(n,\"default\",{value:e,enumerable:!0}):n,e)),b=e=\u003ea(s({},\"__esModule\",{value:!0}),e);var i=_((D,c)=\u003e{c.exports=_jsx_runtime});var y={};j(y,{default:()=\u003eh,frontmatter:()=\u003ew});var r=p(i()),w={title:\"Ruben Groenewoud\",description:\"Security Research Engineer, Elastic\",slug:\"ruben-groenewoud\"};function m(e){return(0,r.jsx)(r.Fragment,{})}function M(e={}){let{wrapper:t}=e.components||{};return t?(0,r.jsx)(t,Object.assign({},e,{children:(0,r.jsx)(m,e)})):m(e)}var h=M;return b(y);})();\n;return Component;"},"_id":"authors/ruben-groenewoud.mdx","_raw":{"sourceFilePath":"authors/ruben-groenewoud.mdx","sourceFileName":"ruben-groenewoud.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/ruben-groenewoud"},"type":"Author","imageUrl":"","url":"/authors/ruben-groenewoud"}],"category":[{"title":"Malware analysis","slug":"malware-analysis","body":{"raw":"","code":"var Component=(()=\u003e{var u=Object.create;var s=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),M=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},i=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!g.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(o=x(n,r))||o.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?u(_(t)):{},i(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),p=t=\u003ei(s({},\"__esModule\",{value:!0}),t);var l=j((X,c)=\u003e{c.exports=_jsx_runtime});var D={};M(D,{default:()=\u003eC,frontmatter:()=\u003ew});var a=d(l()),w={title:\"Malware analysis\",slug:\"malware-analysis\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function y(t={}){let{wrapper:n}=t.components||{};return n?(0,a.jsx)(n,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=y;return p(D);})();\n;return Component;"},"_id":"categories/malware-analysis.mdx","_raw":{"sourceFilePath":"categories/malware-analysis.mdx","sourceFileName":"malware-analysis.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/malware-analysis"},"type":"Category","url":"/categories/malware-analysis"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"outlaw-linux-malware"},"buildId":"uMiIwNtxi2PxMPLSS6bF4","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>