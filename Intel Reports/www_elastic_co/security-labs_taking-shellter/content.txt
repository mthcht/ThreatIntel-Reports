<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Taking SHELLTER: a commercial evasion framework abused in-the-wild  — Elastic Security Labs</title><meta name="description" content="Elastic Security Labs detected the recent emergence of infostealers using an illicitly acquired version of the commercial evasion framework, SHELLTER, to deploy post-exploitation payloads."/><meta property="og:title" content="Taking SHELLTER: a commercial evasion framework abused in-the-wild  — Elastic Security Labs"/><meta property="og:description" content="Elastic Security Labs detected the recent emergence of infostealers using an illicitly acquired version of the commercial evasion framework, SHELLTER, to deploy post-exploitation payloads."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/taking-shellter/Security Labs Images 2.jpg?6752359f7737cea6c6dbfd9d7998637f"/><meta property="og:image:alt" content="Elastic Security Labs detected the recent emergence of infostealers using an illicitly acquired version of the commercial evasion framework, SHELLTER, to deploy post-exploitation payloads."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/taking-shellter"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Taking SHELLTER: a commercial evasion framework abused in-the-wild  — Elastic Security Labs"/><meta name="twitter:description" content="Elastic Security Labs detected the recent emergence of infostealers using an illicitly acquired version of the commercial evasion framework, SHELLTER, to deploy post-exploitation payloads."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/taking-shellter/Security Labs Images 2.jpg?6752359f7737cea6c6dbfd9d7998637f"/><meta name="twitter:image:alt" content="Elastic Security Labs detected the recent emergence of infostealers using an illicitly acquired version of the commercial evasion framework, SHELLTER, to deploy post-exploitation payloads."/><link rel="canonical" href="https://www.elastic.co/security-labs/taking-shellter"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftaking-shellter%2FSecurity%20Labs%20Images%202.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftaking-shellter%2FSecurity%20Labs%20Images%202.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftaking-shellter%2FSecurity%20Labs%20Images%202.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftaking-shellter%2FSecurity%20Labs%20Images%202.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftaking-shellter%2FSecurity%20Labs%20Images%202.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftaking-shellter%2FSecurity%20Labs%20Images%202.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftaking-shellter%2FSecurity%20Labs%20Images%202.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftaking-shellter%2FSecurity%20Labs%20Images%202.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/8e9860b6e62d6359-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/e4af272ccee01ff0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/0ea4f4df910e6120-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/739c2d8941231bb4-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/a87fdfbf44b3f106.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/a87fdfbf44b3f106.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-e159b4ec612933fd.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-cfadc450ab966d24.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-b0c191de1a3710e4.js" defer=""></script><script src="/security-labs/_next/static/0HX4J5JIPmJcQLCbETJV6/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/0HX4J5JIPmJcQLCbETJV6/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_d672da __variable_ead7f7 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/taking-shellter"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/taking-shellter"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2025-07-03T00:00:00.000Z">3 July 2025</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/seth-goodwin">Seth Goodwin</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/daniel-stepanic">Daniel Stepanic</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/jia-yu-chan">Jia Yu Chan</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/samir-bousseaden">Samir Bousseaden</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Taking SHELLTER: a commercial evasion framework abused in-&nbsp;the-&nbsp;wild&nbsp;</span></h1><p class="text-zinc-200 text-base md:text-xl">Elastic Security Labs detected the recent emergence of infostealers using an illicitly acquired version of the commercial evasion framework, SHELLTER, to deploy post-exploitation payloads.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>25 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/security-research">Security research</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Taking SHELLTER: a commercial evasion framework abused in-the-wild " fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftaking-shellter%2FSecurity%20Labs%20Images%202.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftaking-shellter%2FSecurity%20Labs%20Images%202.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftaking-shellter%2FSecurity%20Labs%20Images%202.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftaking-shellter%2FSecurity%20Labs%20Images%202.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftaking-shellter%2FSecurity%20Labs%20Images%202.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftaking-shellter%2FSecurity%20Labs%20Images%202.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftaking-shellter%2FSecurity%20Labs%20Images%202.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftaking-shellter%2FSecurity%20Labs%20Images%202.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftaking-shellter%2FSecurity%20Labs%20Images%202.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="introduction" class="absolute -top-32"></span>Introduction</h2>
<p>Elastic Security Labs is observing multiple campaigns that appear to be leveraging the commercial AV/EDR evasion framework, SHELLTER, to load malware. SHELLTER is marketed to the offensive security industry for sanctioned security evaluations, enabling red team operators to more effectively deploy their C2 frameworks against contemporary anti-malware solutions.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="key-takeaways" class="absolute -top-32"></span>Key takeaways</h3>
<ul>
<li>Commercial evasion framework SHELLTER acquired by threat groups</li>
<li>SHELLTER has been used in multiple infostealer campaigns since April 2025</li>
<li>SHELLTER employs unique capabilities to evade analysis and detection</li>
<li>Elastic Security Labs releases dynamic unpacker for SHELLTER-protected binaries</li>
</ul>
<pre><code>Throughout this document we will refer to different terms with “shellter” in them. We will try to 
maintain the following style to aid readability:
  *  “Shellter Project” - the organization that develops and sells the Shellter evasion framework
  *  “Shellter Pro Plus/Elite” - the commercial names for the tools sold by the Shellter Project
  *  “SHELLTER” - the loader we have observed in malicious usage and are detailing in this report
  *  “SHELLTER-protected” - a descriptor of final payloads that the SHELLTER loader delivers</code></pre>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="shellter-overview" class="absolute -top-32"></span>SHELLTER Overview</h2>
<p>SHELLTER is a <a href="https://www.shellterproject.com/homepage/">commercial evasion framework</a> that has been assisting red teams for over a decade. It helps offensive security service providers bypass anti-virus and, more recently, EDR tools. This allows red teams to utilize their C2 frameworks without the constant development typically needed as security vendors write detection signatures for them.</p>
<pre><code>While the Shellter Project does offer a free version of the software, it has a limited feature-set, 
only 32-bit .exe support, and is generally better understood and detected by anti-malware 
products. The free version is not described in this article.</code></pre>
<p>SHELLTER, like many other offensive security tools (OSTs), is a dual-use product. Malicious actors, once they gain access to it, can use SHELLTER to extend the lifespan of their tools. Reputable offensive security vendors, such as the Shellter Project, implement <a href="https://www.shellterproject.com/shellter-elite-acquire-upgrade-eligibility-terms/">safeguards</a> to mitigate the risk of their products being used maliciously. These measures include geographic sales limits, organizational due diligence, and End User License Agreements (EULAs). Despite these efforts, highly motivated malicious actors remain a challenge.</p>
<p></p>
<p>Our research identified multiple financially motivated infostealer campaigns that have been using SHELLTER to package payloads beginning late April 2025. Evidence suggests that this is the Shellter Elite version 11.0, which was <a href="https://www.shellterproject.com/shellter-elite-v11-0-released/">released</a> on April 16, 2025.</p>
<p>SHELLTER is a complex project offering a wide array of configurable settings tailored for specific operating environments, payload delivery mechanisms, and encryption paradigms. This report focuses exclusively on features observed in identified malicious campaigns. While some features appear to be common, a comprehensive review of all available features is beyond the scope of this document.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="shellter-loader---technical-details" class="absolute -top-32"></span>SHELLTER Loader - Technical Details</h2>
<p>The following sections describe capabilities that resemble some of the Shellter Project’s published <a href="https://www.shellterproject.com/Downloads/ShellterElite/Shellter_Elite_Exclusive_Features.pdf">Elite Exclusive Features</a>. Our assessment indicates that we are observing Shellter Elite. This conclusion is based on a review of the developer&#x27;s public documentation, observation of various samples from different builds with a high degree of code similarity, and the prevalence of evasion features scarcely observed.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="polymorphic-junk-code" class="absolute -top-32"></span>Polymorphic Junk Code</h3>
<p>SHELLTER-protected samples commonly employ self-modifying shellcode with polymorphic obfuscation to embed themselves within legitimate programs. This combination of legitimate instructions and polymorphic code helps these files evade static detection and signatures, allowing them to remain undetected.</p>
<p>By setting a breakpoint on <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">VirtualAlloc</code> in a SHELLTER-protected <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.rhadamanthys">RHADAMANTHYS</a> <a href="https://www.virustotal.com/gui/file/c865f24e4b9b0855b8b559fc3769239b0aa6e8d680406616a13d9a36fbbc2d30/details">sample</a>, we can see the call stack of this malware sample.</p>
<p></p>
<p>This type of polymorphic code confuses static disassemblers and impairs emulation efforts. These instructions show up during the unpacking stage, calling one of these pairs of Windows API functions to allocate memory for a new shellcode stub:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetModuleHandleA</code> / <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetProcAddress</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateFileMappingW</code> / <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">MapViewOfFile</code></li>
</ul>
<p></p>
<p>The SHELLTER functionality is contained within a new, substantial function. It’s reached after additional unpacking and junk instructions in the shellcode stub. IDA Pro or Binary Ninja can successfully decompile the code at this stage.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="unhooking-system-modules-via-file-mappings" class="absolute -top-32"></span>Unhooking System Modules via File-mappings</h3>
<p>To bypass API hooking techniques from AV/EDR vendors, SHELLTER maps a fresh copy of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ntdll.dll</code> via <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtCreateSection</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtMapViewOfSection</code>.</p>
<p></p>
<p>There is also a second option for unhooking by loading a clean <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ntll.dll</code> from the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">KnownDLLs</code> directory via <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtOpenSection</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtMapViewOfSection</code>.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="payload-encryption-and-compression" class="absolute -top-32"></span>Payload Encryption and Compression</h3>
<p>SHELLTER encrypts its final, user-defined payloads using AES-128 CBC mode. This encryption can occur in one of two ways:</p>
<ul>
<li><strong>Embedded key/IV:</strong> A randomly generated key/IV pair is embedded directly within the SHELLTER payload.</li>
<li><strong>Server-fetched key/IV:</strong> The key/IV pair is fetched from an adversary-controlled server.</li>
</ul>
<p>For samples that utilized the embedded option, we successfully recovered the underlying payload.</p>
<p></p>
<p>The encrypted blobs are located at the end of each SHELLTER payload.</p>
<p></p>
<p>The AES key and IV can be found as constants being loaded into stack variables at very early stages of the payload as part of its initialization routine.</p>
<p></p>
<p>In Shellter Elite v11.0, by default, payloads are compressed using the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">LZNT1</code> algorithm before being encrypted.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="dll-preloading--call-stack-evasion" class="absolute -top-32"></span>DLL Preloading &amp; Call Stack Evasion</h3>
<p>The “Force Preload System Modules” feature enables preloading of essential Windows subsystem DLLs, such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">advapi32.dll</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">wininet.dll</code>, and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">crypt32.dll</code>, to support the underlying payload’s operations. The three configurable options include:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">--Force-PreloadModules-Basic</code> (16 general-purpose modules)</li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">--Force-PreloadModules-Networking</code> (5 network-specific modules)</li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">--Force-PreloadModules-Custom</code> (up to 16 user-defined modules)</li>
</ul>
<p>These modules are being loaded through either <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">LoadLibraryExW</code> or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">LdrLoadDll</code>. Details on API proxying through custom Vectored Exception Handlers (VEH) will be discussed in a subsequent section.</p>
<p></p>
<p>Below is an example of a list of preloaded modules in a SHELLTER-protected payload that matches the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">--Force-PreloadModules-Basic</code> option, found in a <a href="https://www.virustotal.com/gui/file/70ec2e65f77a940fd0b2b5c0a78a83646dec17583611741521e0992c1bf974f1/relations">sample</a> that deploys a simple C++ loader client abusing BITS (Background Intelligent Transfer Service) for C2 – an uncommon approach <a href="https://www.elastic.co/security-labs/bits-and-bytes-analyzing-bitsloth">favored by some threats</a>.</p>
<p></p>
<p>The following example is a list that matches the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">--Force-PreloadModules-Networking</code> option found in a sample loading <a href="https://www.virustotal.com/gui/file/da59d67ced88beae618b9d6c805f40385d0301d412b787e9f9c9559d00d2c880/details">LUMMA</a>.</p>
<p></p>
<p>This feature (<a href="https://www.shellterproject.com/shellter-elite-pro-plus-updates/">released</a> in Shellter Pro Plus v10.x) leverages the call stack evasion capability to conceal the source of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">LoadLibraryExW</code> call while loading networking and cryptography-related libraries.</p>
<p>Below is an example of a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">procmon</code> trace when loading <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">wininet.dll</code>, showing a truncated call stack:</p>
<p></p>
<p>In the same <a href="https://www.virustotal.com/gui/file/70ec2e65f77a940fd0b2b5c0a78a83646dec17583611741521e0992c1bf974f1">sample</a> that has the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">--Force-PreloadModules-Basic</code> flag enabled, we observed that the dependencies of the preloaded modules were also subject to call stack corruption. For instance, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">urlmon.dll</code> also conceals the source of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">LoadLibraryExW</code> call for its dependencies <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">iertutil.dll</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">srvcli.dll</code>, and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">netutils.dll</code>.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="unlinking-of-avedr-modules" class="absolute -top-32"></span>Unlinking of AV/EDR Modules</h3>
<p>SHELLTER includes functionality to unlink decoy DLL modules that are placed inside the Process Environment Block (<a href="https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb">PEB</a>). These decoy modules are used by some security vendors as canaries to monitor when shellcode attempts to enumerate the PEB LDR list manually. <a href="https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb_ldr_data">PEB LDR</a> is a structure in Windows that contains information about a process&#x27;s loaded modules.</p>
<p></p>
<p>We only observed one unique module name based on its hash (different per sample), which ends up resolving to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kern3l32.dll</code> [sic].</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="api-hashing-obfuscation" class="absolute -top-32"></span>API Hashing Obfuscation</h3>
<p>Observed samples employ time-based seeding to obfuscate API addresses. The malware first reads the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SystemTime</code> value from the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">KUSER_SHARED_DATA</code> structure at address <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x7FFE0014</code> to derive a dynamic XOR key.</p>
<p></p>
<p>It then uses a seeded-ROR13 hashing algorithm on API names to resolve the function addresses at runtime.</p>
<p></p>
<p>Once resolved, optionally, these pointers are obfuscated by XORing them with the time-based key and applying a bitwise rotation before being stored in a lookup table. This tactic is applied throughout the binary to conceal a variety of data such as other function pointers, syscall stubs, and handles of loaded modules.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="license-check-and-self-disarm" class="absolute -top-32"></span>License Check and Self-disarm</h3>
<p>For each SHELLTER payload, there are three embedded <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">FILETIME</code> structures. In an example <a href="https://www.virustotal.com/gui/file/7d0c9855167e7c19a67f800892e974c4387e1004b40efb25a2a1d25a99b03a10">sample</a>, these were found to be:</p>
<ul>
<li>License expiry datetime (2026-04-17 19:17:24.055000)</li>
<li>Self-disarm datetime (2026-05-21 19:44:43.724952)</li>
<li>Infection start datetime (2025-05-21 19:44:43.724952)</li>
</ul>
<p></p>
<p>The license expiry check compares the current time to the license expiry datetime, setting the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">license_valid</code> flag in the context structure. There are 28 unique call sites (likely 28 licensed features) to the license validity check, where the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">license_valid</code> flag determines whether the main code logic is skipped, confirming that the license expiry datetime acts as a kill switch.</p>
<p></p>
<p>By default, the self-disarm date is set exactly one year after the initial infection start date. When the self-disarm flag is triggered, several cleanup routines are executed. One such routine involves unmapping the manually loaded <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ntdll</code> module (if present) and clearing the NTAPI lookup table, which references either the manually mapped <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ntdll</code> module or the one loaded during process initialization.</p>
<p></p>
<p>While the Self-disarm and Infection start datetimes are different from sample to sample, we note that the License expiry datetime (2026-04-17 19:17:24.055000) remains constant.</p>
<p>It is possible that this time is uniquely generated for each license issued by The Shellter Project. If so, it would support the hypothesis that only a single copy of Shellter Elite has been acquired for malicious use. This value does not appear in static analysis, but shows up in the unpacked first stage.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left">SHA256</th><th align="left">License Expiration</th><th align="left">Self-disarm</th><th align="left">Infection Start</th><th align="left">Family</th></tr></thead><tbody><tr><td align="left">c865f24e4b9b0855b8b559fc3769239b0aa6e8d680406616a13d9a36fbbc2d30</td><td align="left">2026-04-17 19:17:24.055000</td><td align="left">2026-05-27 19:57:42.971694</td><td align="left">2025-05-27 19:57:42.971694</td><td align="left">RHADAMANTHYS</td></tr><tr><td align="left">7d0c9855167e7c19a67f800892e974c4387e1004b40efb25a2a1d25a99b03a10</td><td align="left">2026-04-17 19:17:24.055000</td><td align="left">2026-05-21 19:44:43.724953</td><td align="left">2025-05-21 19:44:43.724953</td><td align="left">UNKNOWN</td></tr><tr><td align="left">b3e93bfef12678294d9944e61d90ca4aa03b7e3dae5e909c3b2166f122a14dad</td><td align="left">2026-04-17 19:17:24.055000</td><td align="left">2026-05-24 11:42:52.905726</td><td align="left">2025-05-24 11:42:52.905726</td><td align="left">ARECHCLIENT2</td></tr><tr><td align="left">da59d67ced88beae618b9d6c805f40385d0301d412b787e9f9c9559d00d2c880</td><td align="left">2026-04-17 19:17:24.055000</td><td align="left">2026-04-27 22:40:00.954060</td><td align="left">2025-04-27 22:40:00.954060</td><td align="left">LUMMA</td></tr><tr><td align="left">70ec2e65f77a940fd0b2b5c0a78a83646dec17583611741521e0992c1bf974f1</td><td align="left">2026-04-17 19:17:24.055000</td><td align="left">2026-05-16 16:12:09.711057</td><td align="left">2025-05-16 16:12:09.711057</td><td align="left">UNKNOWN</td></tr></tbody></table></div>
<p>Below is a YARA rule that can be used to identify this hardcoded license expiry value in the illicit SHELLTER samples we’ve examined:</p>
<pre><code>rule SHELLTER_ILLICIT_LICENSE {  
    meta:  
        author = &quot;Elastic Security&quot;  
        last_modified = &quot;2025-07-01&quot;  
        os = &quot;Windows&quot;  
        family = &quot;SHELLTER&quot;  
        threat_name = &quot;SHELLTER_ILLICIT_LICENSE&quot;

    strings:

        // 2026-04-17 19:17:24.055000  
        $license_server = { c7 84 24 70 07 00 00 70 5e 2c d2 c7 84 24 74 07 00 00 9e ce dc 01}

    condition:  
        any of them  
}</code></pre>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="memory-scan-evasion" class="absolute -top-32"></span>Memory Scan Evasion</h3>
<p>SHELLTER-protected samples implemented various techniques, including runtime evasions, to avoid detection. These types of techniques include:</p>
<ul>
<li>Decoding and re-encoding instructions at runtime</li>
<li>Removal of execute permissions on inactive memory pages</li>
<li>Reducing footprint, impacting in-memory signatures using YARA</li>
<li>Using Windows internals structures, such as the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PEB</code>, as temporary data holding spots</li>
</ul>
<p>SHELLTER generates a trampoline-style stub based on the operating system version. There is a 4 KB page that holds this stub, where the memory permissions fluctuate using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtQueryVirtualMemory</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtProtectVirtualMemory</code>.</p>
<p></p>
<p></p>
<p>Once the page is active, the encoded bytes can be observed at this address, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x7FF5FFCE0000</code>.</p>
<p></p>
<p>SHELLTER decodes this page when active through an XOR loop using the derived <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SystemTime</code> key from the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">KUSER_SHARED_DATA</code> structure.</p>
<p></p>
<p>Below is this same memory page (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x7FF5FFCE0000</code>), showing the decoded trampoline stub for the syscall (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ntdll_NtOpenFile</code>).</p>
<p></p>
<p>When the functionality is needed, the memory page permissions are set with Read/Execute (RX) permissions. After execution, the pages are set to inactive.</p>
<p></p>
<p>The continuous protection of key functionality during runtime complicates both analysis and detection efforts. This level of protection is uncommon in general malware samples.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="indirect-syscalls--call-stack-corruption" class="absolute -top-32"></span>Indirect Syscalls / Call stack Corruption</h3>
<p>As shown in the previous section, SHELLTER bypasses user-mode hooks by using trampoline-based indirect syscalls. Instead of invoking <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">syscall</code> directly, it prepares the stack with the address of a clean <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">syscall</code> instruction from <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ntdll.dll</code>. A <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ret</code> instruction then pops this address into the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">RIP</code> register, diverting execution to the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">syscall</code> instruction stealthily.</p>
<p></p>
<p></p>
<p>Below is an example of Elastic Defend <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">VirtualProtect</code> events, showing the combination of the two evasions (indirect syscall and call stack truncation). This technique can bypass or disrupt various security detection mechanisms.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="advanced-vmsandbox-detection" class="absolute -top-32"></span>Advanced VM/Sandbox Detection</h3>
<p>SHELLTER’s documentation makes a reference to a hypervisor detection feature. A similar capability is observed in our malicious samples after a call to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ZwQuerySystemInformationEx</code> using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CPUID</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">_bittest</code> instructions. This functionality returns various CPU information along with the Hyper-Threading Technology (HTT) flag.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="debugger-detection-umkm" class="absolute -top-32"></span>Debugger Detection (UM/KM)</h3>
<p>SHELLTER employs user-mode and kernel-mode debugging detection using Process Heap flags and checking the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">KdDebuggerEnabled</code> flag via the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">_KUSER_SHARED_DATA</code> structure.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="amsi-bypass" class="absolute -top-32"></span>AMSI Bypass</h3>
<p>There are two methods of AMSI bypassing. The first method involves in-memory patching of AMSI functions. This technique searches the functions for specific byte patterns and modifies them to alter the function’s logic. For example, it overwrites a 4-byte string &quot;AMSI&quot; with null bytes and patches conditional jumps to its opposite.</p>
<p></p>
<p>The second method is slightly more sophisticated. First, it optionally attempts to sabotage the Component Object Model (COM) interface lookup by finding the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CLSID_Antimalware</code> GUID constant <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">{fdb00e52-a214-4aa1-8fba-4357bb0072ec}</code> within <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">amsi.dll</code>, locating a pointer to it in a writable data section, and corrupting that pointer to make it point 8 bytes before the actual GUID.</p>
<p></p>
<p>The targeted pointer is the CLSID pointer in the AMSI module&#x27;s Active Template Library (ATL) object map entry, a structure used by the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DllGetClassObject</code> function to find and create registered COM classes. By corrupting the pointer in this map, the lookup for the antimalware provider will fail, preventing it from being created, thus causing <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AmsiInitialize</code> to fail with a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CLASS_E_CLASSNOTAVAILABLE</code> exception.</p>
<p></p>
<p>It then calls <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AmsiInitialize</code> - If the previous patch did not take place and the API call is successful, it performs a vtable patch as a fallback mechanism. The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HAMSICONTEXT</code> obtained from <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AmsiInitialize</code> contains a pointer to an <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IAntimalware</code> COM object, which in turn contains a pointer to its virtual function table. The bypass targets the function <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IAntimalware::Scan</code> in this table. To neutralize it, the code searches the memory page containing the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IAntimalware::Scan</code> function for a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ret</code> instruction.</p>
<p></p>
<p>After finding a suitable gadget, it overwrites the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Scan</code> function pointer with the address of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ret</code> gadget. The result is that any subsequent call to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AmsiScanBuffer</code> or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AmsiScanString</code> will invoke the patched vtable, jump directly to a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ret</code> instruction, and immediately return.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="vectored-exception-handler-api-proxy" class="absolute -top-32"></span>Vectored Exception Handler API Proxy</h3>
<p>There is a sophisticated API proxying mechanism which is achieved by redirecting calls to resolved APIs and crafted syscall stubs through a custom exception handler, which acts as a control-flow proxy. It can be broken down into two phases: setup and execution.</p>
<p>Phase 1 involves allocating two special memory pages that will serve as “triggers” for the exception handler. Protection for these pages are set to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PAGE_READONLY</code>, and attempting to execute code there will cause a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">STATUS_ACCESS_VIOLATION</code> exception, which is intended. The addresses of these trigger pages are stored in the context structure:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">api_call_trigger_page</code> - The page that will be called to initiate the proxy.</li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">api_return_trigger_page</code> - The page that the actual API will return to.</li>
</ul>
<p></p>
<p>An exception handler template from the binary is copied into an allocated region and registered as the primary handler for the process using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">RtlAddVectoredExceptionHandler</code>. A hardcoded magic placeholder value (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0xe1e2e3e4e5e6e7e8</code>) in the handler is then overwritten with a pointer to the context structure itself.</p>
<p></p>
<p>Looking at an example callsite, if the VEH proxy is to be used, the address of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetCurrentDirectoryA</code> will be stored into <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ctx_struct-&gt;target_API_function</code>, and the API function pointer is overwritten with the address of the call trigger page. This trigger page is then called, triggering a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">STATUS_ACCESS_VIOLATION</code> exception.</p>
<p></p>
<p>Control flow is redirected to the exception handler. The faulting address of the exception context is checked, and if it matches the call trigger page, it knows it is an incoming API proxy call and performs the following:</p>
<ul>
<li>Save the original return address</li>
<li>Overwrite the return address on the stack with the address of the return trigger page</li>
<li>Sets the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">RIP</code> register to the actual API address saved previously in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ctx_struct-&gt;target_API_function</code>.</li>
</ul>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetCurrentDirectoryA</code> call is then executed. When it finishes, it jumps to the return trigger page, causing a second <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">STATUS_ACCESS_VIOLATION</code> exception and redirecting control flow back to the exception handler. The faulting address is checked to see if it matches the return trigger page; if so, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">RIP</code> is set to the original return address and the control flow returns to the original call site.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="campaigns" class="absolute -top-32"></span>Campaigns</h2>
<p>Beginning in late April, Elastic Security Labs identified multiple campaigns deploying various information stealers protected by Shellter Elite. By taking advantage of the above tooling, we observed threat actors across different campaigns quickly integrate this highly evasive loader into their own workflows.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="lumma" class="absolute -top-32"></span>LUMMA</h3>
<p>LUMMA <a href="https://www.virustotal.com/gui/file/da59d67ced88beae618b9d6c805f40385d0301d412b787e9f9c9559d00d2c880/details">infostealer</a> was being distributed with SHELLTER starting in late April. While the initial infection vector is not clear, we were able to <a href="https://app.any.run/tasks/eab157aa-5609-4b33-a571-808246d1cf92">verify</a> (using ANY.RUN) that related files were being hosted on the <a href="https://www.mediafire.com/">MediaFire</a> file hosting platform.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="want-to-sell" class="absolute -top-32"></span>Want-to-Sell</h3>
<p>On May 16th, Twitter/X user <a href="https://x.com/DarkWebInformer">@darkwebinformer</a> <a href="https://x.com/DarkWebInformer/status/1923472392157790700">posted</a> a screenshot with the caption:</p>
<blockquote>
<p>🚨Shellter Elite v11.0 up for sale on a popular forum</p>
</blockquote>
<p></p>
<p>“Exploit Garant” in this case refers to an escrow-like third-party that mediates the transaction.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="arechclient2" class="absolute -top-32"></span>ARECHCLIENT2</h3>
<p>Starting around May, we observed campaigns <a href="https://www.reddit.com/r/PartneredYoutube/comments/1ks2svg/skillshare_sponsorship/">targeting</a> content creators with lures centered around sponsorship opportunities. These appear to be phishing emails sent to individuals with a YouTube channel impersonating brands such as Udemy, Skillshare, Pinnacle Studio, and Duolingo. The emails include download links to archive files (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.rar</code>), which contain legitimate promotional content packaged with a SHELLTER-protected executable.</p>
<p></p>
<p>This underlying <a href="https://www.virustotal.com/gui/file/748149df038a771986691e3f54afea609ceb9fbfcbec92145beb586bec039e6a/details">executable</a> shares traits and behaviors with our previous SHELLTER analysis. As of this writing, we can still see <a href="https://www.virustotal.com/gui/file/b3e93bfef12678294d9944e61d90ca4aa03b7e3dae5e909c3b2166f122a14dad/details">samples</a> with very low detection rates in VirusTotal. This is due to multiple factors associated with custom-built features to avoid static analysis, including polymorphic code, backdooring code into legitimate applications, and the application of code-signing certificates.</p>
<p></p>
<p>The embedded payload observed in this file deploys the infostealer ARECHCLIENT2, also known as SECTOP RAT. The C2 for this stealer points to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">185.156.72[.]80:15847,</code> which was <a href="https://www.elastic.co/security-labs/a-wretch-client">previously identified</a> by our team on June 17th when we discussed this threat in association with the GHOSTPULSE loader.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="rhadamanthys" class="absolute -top-32"></span>RHADAMANTHYS</h3>
<p>These infections begin with YouTube videos targeting topics such as game hacking and gaming mods, with video comments linking to the malicious files hosted on MediaFire.</p>
<p></p>
<p>One of the <a href="https://www.virustotal.com/gui/file/c865f24e4b9b0855b8b559fc3769239b0aa6e8d680406616a13d9a36fbbc2d30/details">files</a> that was previously distributed using this method has been submitted 126 unique times as of this publication by different individuals.</p>
<p></p>
<p>This file shares the same behavioral characteristics as the same underlying code from the previous SHELLTER analysis sections. The embedded payload with this sample deploys RHADAMANTHYS infostealer.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="shellter-unpacker" class="absolute -top-32"></span>SHELLTER Unpacker</h2>
<p>Elastic Security Labs is <a href="https://github.com/elastic/labs-releases/tree/main/tools/shellter">releasing</a> a dynamic unpacker for binaries protected by SHELLTER. This tool leverages a combination of dynamic and static analysis techniques to automatically extract multiple payload stages from a SHELLTER-protected binary.</p>
<p>As SHELLTER offers a wide range of optional features, this unpacker is not fully comprehensive, although it does successfully process a large majority of tested samples. Even with unsupported binaries, it is typically able to extract at least one payload stage.</p>
<p><strong>For safety reasons, this tool should only be executed within an isolated virtual machine.</strong> During the unpacking process, potentially malicious executable code is mapped into memory. Although some basic safeguards have been implemented, they are not infallible.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="conclusion" class="absolute -top-32"></span>Conclusion</h2>
<p>Despite the commercial OST community&#x27;s best efforts to retain their tools for legitimate purposes, mitigation methods are imperfect. They, like many of our customers, face persistent, motivated attackers. Although the Shellter Project is a victim in this case through intellectual property loss and future development time, other participants in the security space must now contend with real threats wielding more capable tools.</p>
<p>We expect:</p>
<ul>
<li>This illicit version of SHELLTER will continue to circulate through the criminal community and potentially transition to nation-state-aligned actors.</li>
<li>The Shellter Project will update and release a version that mitigates the detection opportunities identified in this analysis.<!-- -->
<ul>
<li>Any new tooling will remain a target for malicious actors.</li>
</ul>
</li>
<li>More advanced threats will analyze these samples and incorporate features into their toolsets.</li>
</ul>
<p>Our aim is that this analysis will aid defenders in the early detection of these identified infostealer campaigns and prepare them for a potential expansion of these techniques to other areas of the offensive landscape.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="malware-and-mitre-attck" class="absolute -top-32"></span>Malware and MITRE ATT&amp;CK</h2>
<p>Elastic uses the <a href="https://attack.mitre.org/">MITRE ATT&amp;CK</a> framework to document common tactics, techniques, and procedures that threats use against enterprise networks.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="tactics" class="absolute -top-32"></span>Tactics</h3>
<p>Tactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/tactics/TA0011/">Command and Control</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0100/">Collection</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0005/">Defense Evasion</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0002/">Execution</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0001/">Initial Access</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0042/">Resource Development</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="techniques" class="absolute -top-32"></span>Techniques</h3>
<p>Techniques represent how an adversary achieves a tactical goal by performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/techniques/T1071/">Application Layer Protocol</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0009/">Data from Local System</a></li>
<li><a href="https://attack.mitre.org/techniques/T1055/003/">Process Injection: Thread Execution Hijacking</a></li>
<li><a href="https://attack.mitre.org/techniques/T1027/016/">Obfuscated Files or Information: Junk Code Insertion</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0001/">Content Injection</a></li>
<li><a href="https://attack.mitre.org/techniques/T1588/">Obtain Capabilities</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="mitigating-shellter" class="absolute -top-32"></span>Mitigating SHELLTER</h2>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="prevention" class="absolute -top-32"></span>Prevention</h3>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_shellcode_from_unusual_microsoft_signed_module.toml">Shellcode from Unusual Microsoft Signed Module</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_unbacked_shellcode_from_unsigned_module.toml">Unbacked Shellcode from Unsigned Module</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_shellcode_execution_from_low_reputation_module.toml">Shellcode Execution from Low Reputation Module</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_potential_evasion_via_invalid_code_signature.toml">Potential Evasion via Invalid Code Signature</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_thread_suspension_from_unbacked_memory.toml">Thread Suspension from Unbacked Memory</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_suspicious_executable_memory_mapping.toml">Suspicious Executable Memory Mapping</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="yara" class="absolute -top-32"></span>YARA</h3>
<p>Elastic Security has created YARA rules to identify this activity.</p>
<pre><code>rule Windows_Trojan_Shellter {  
    meta:  
        author = &quot;Elastic Security&quot;  
        creation_date = &quot;2025-06-30&quot;  
        last_modified = &quot;2025-06-30&quot;  
        os = &quot;Windows&quot;  
        arch = &quot;x86&quot;  
        category_type = &quot;Trojan&quot;  
        family = &quot;Shellter&quot;  
        threat_name = &quot;Windows.Trojan.Shellter&quot;  
        reference_sample = &quot;c865f24e4b9b0855b8b559fc3769239b0aa6e8d680406616a13d9a36fbbc2d30&quot;

    strings:  
        $seq_api_hashing = { 48 8B 44 24 ?? 0F BE 00 85 C0 74 ?? 48 8B 44 24 ?? 0F BE 00 89 44 24 ?? 48 8B 44 24 ?? 48 FF C0 48 89 44 24 ?? 8B 04 24 C1 E8 ?? 8B 0C 24 C1 E1 ?? 0B C1 }  
        $seq_debug = { 48 8B 49 30 8B 49 70 8B 40 74 0B C1 25 70 00 00 40 85 C0 75 22 B8 D4 02 00 00 48 05 00 00 FE 7F }  
        $seq_mem_marker = { 44 89 44 24 ?? 89 54 24 ?? 48 89 4C 24 ?? 33 C0 83 F8 ?? 74 ?? 48 8B 44 24 ?? 8B 4C 24 ?? 39 08 75 ?? EB ?? 48 63 44 24 ?? 48 8B 4C 24 }  
        $seq_check_jmp_rcx = { 48 89 4C 24 ?? B8 01 00 00 00 48 6B C0 00 48 8B 4C 24 ?? 0F B6 04 01 3D FF 00 00 00 75 ?? B8 01 00 00 00 48 6B C0 01 48 8B 4C 24 ?? 0F B6 04 01 3D E1 00 00 00 75 ?? B8 01 00 00 00 }  
        $seq_syscall_stub = { C6 84 24 98 00 00 00 4C C6 84 24 99 00 00 00 8B C6 84 24 9A 00 00 00 D1 C6 84 24 9B 00 00 00 B8 C6 84 24 9C 00 00 00 00 C6 84 24 9D 00 00 00 00 C6 84 24 9E 00 00 00 00 }  
        $seq_mem_xor = { 48 8B 4C 24 ?? 0F B6 04 01 0F B6 4C 24 ?? 3B C1 74 ?? 8B 44 24 ?? 0F B6 4C 24 ?? 48 8B 54 24 ?? 0F B6 04 02 33 C1 8B 4C 24 ?? 48 8B 54 24 ?? 88 04 0A }  
        $seq_excep_handler = { 48 89 4C 24 08 48 83 EC 18 48 B8 E8 E7 E6 E5 E4 E3 E2 E1 48 89 04 24 48 8B 44 24 20 48 8B 00 81 38 05 00 00 C0 }  
    condition:  
        3 of them  
}</code></pre>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="observations" class="absolute -top-32"></span>Observations</h2>
<p>All observables are also available for <a href="https://github.com/elastic/labs-releases/tree/main/indicators/shellter">download</a> in both ECS and STIX format.</p>
<p>The following observables were discussed in this research.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left">Observable</th><th align="left">Type</th><th align="left">Name</th><th align="left">Reference</th></tr></thead><tbody><tr><td align="left">c865f24e4b9b0855b8b559fc3769239b0aa6e8d680406616a13d9a36fbbc2d30</td><td align="left">SHA-256</td><td align="left">Endorphin.exe</td><td align="left">SHELLTER-PROTECTED RHADAMANTHYS</td></tr><tr><td align="left">7d0c9855167e7c19a67f800892e974c4387e1004b40efb25a2a1d25a99b03a10</td><td align="left">SHA-256</td><td align="left">SUPERAntiSpyware.exe</td><td align="left">SHELLTER-PROTECTED UNKNOWN FAMILY</td></tr><tr><td align="left">b3e93bfef12678294d9944e61d90ca4aa03b7e3dae5e909c3b2166f122a14dad</td><td align="left">SHA-256</td><td align="left">Aac3572DramHal_x64.exe</td><td align="left">SHELLTER-PROTECTED ARECHCLIENT2</td></tr><tr><td align="left">da59d67ced88beae618b9d6c805f40385d0301d412b787e9f9c9559d00d2c880</td><td align="left">SHA-256</td><td align="left">Branster.exe</td><td align="left">SHELLTER-PROTECTED LUMMA</td></tr><tr><td align="left">70ec2e65f77a940fd0b2b5c0a78a83646dec17583611741521e0992c1bf974f1</td><td align="left">SHA-256</td><td align="left">IMCCPHR.exe</td><td align="left">SHELLTER-PROTECTED UNKNOWN FAMILY</td></tr><tr><td align="left">263ab8c9ec821ae573979ef2d5ad98cda5009a39e17398cd31b0fad98d862892</td><td align="left">SHA-256</td><td align="left">Pinnacle Studio Advertising materials.rar</td><td align="left">LURE ARCHIVE</td></tr><tr><td align="left">eaglekl[.]digital</td><td align="left">domain</td><td align="left"></td><td align="left">LUMMA C&amp;C server</td></tr><tr><td align="left">185.156.72[.]80</td><td align="left">ipv4-addr</td><td align="left"></td><td align="left">ARECHCLIENT2 C&amp;C server</td></tr><tr><td align="left">94.141.12[.]182</td><td align="left">ipv4-addr</td><td align="left">plotoraus[.]shop server</td><td align="left">RHADAMANTHYS C&amp;C server</td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="references" class="absolute -top-32"></span>References</h2>
<p>The following were referenced throughout the above research:</p>
<ul>
<li><a href="https://x.com/DarkWebInformer/status/1923472392157790700">https://x.com/DarkWebInformer/status/1923472392157790700</a></li>
<li><a href="https://www.shellterproject.com/shellter-editions-feature-comparison-table/">https://www.shellterproject.com/shellter-editions-feature-comparison-table/</a></li>
<li><a href="https://www.shellterproject.com/Downloads/ShellterElite/Shellter_Elite_Exclusive_Features.pdf">https://www.shellterproject.com/Downloads/ShellterElite/Shellter_Elite_Exclusive_Features.pdf</a></li>
<li><a href="https://github.com/elastic/labs-releases/tree/main/tools/shellter">https://github.com/elastic/labs-releases/tree/main/tools/shellter</a></li>
</ul></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/taking-shellter#introduction"><span>Introduction</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/taking-shellter#key-takeaways"><span>Key&nbsp;takeaways</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/taking-shellter#shellter-overview"><span>SHELLTER&nbsp;Overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/taking-shellter#shellter-loader---technical-details"><span>SHELLTER Loader -&nbsp; Technical&nbsp;Details</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/taking-shellter#polymorphic-junk-code"><span>Polymorphic Junk&nbsp;Code</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/taking-shellter#unhooking-system-modules-via-file-mappings"><span>Unhooking System Modules via&nbsp;File-&nbsp;mappings</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/taking-shellter#payload-encryption-and-compression"><span>Payload Encryption and&nbsp;Compression</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/taking-shellter#dll-preloading--call-stack-evasion"><span>DLL Preloading & Call Stack&nbsp;Evasion</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/taking-shellter#unlinking-of-avedr-modules"><span>Unlinking of AV/EDR&nbsp;Modules</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/taking-shellter#api-hashing-obfuscation"><span>API Hashing&nbsp;Obfuscation</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/elastic-security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Taking SHELLTER: a commercial evasion framework abused in-the-wild &amp;url=https://www.elastic.co/security-labs/taking-shellter" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/taking-shellter" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/taking-shellter&amp;title=Taking SHELLTER: a commercial evasion framework abused in-the-wild " target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/taking-shellter&amp;title=Taking SHELLTER: a commercial evasion framework abused in-the-wild " target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2025<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Taking SHELLTER: a commercial evasion framework abused in-the-wild ","slug":"taking-shellter","date":"2025-07-03","description":"Elastic Security Labs detected the recent emergence of infostealers using an illicitly acquired version of the commercial evasion framework, SHELLTER, to deploy post-exploitation payloads.","image":"Security Labs Images 2.jpg","body":{"raw":"\n## Introduction\n\nElastic Security Labs is observing multiple campaigns that appear to be leveraging the commercial AV/EDR evasion framework, SHELLTER, to load malware. SHELLTER is marketed to the offensive security industry for sanctioned security evaluations, enabling red team operators to more effectively deploy their C2 frameworks against contemporary anti-malware solutions.\n\n### Key takeaways\n\n- Commercial evasion framework SHELLTER acquired by threat groups  \n- SHELLTER has been used in multiple infostealer campaigns since April 2025  \n- SHELLTER employs unique capabilities to evade analysis and detection  \n- Elastic Security Labs releases dynamic unpacker for SHELLTER-protected binaries\n\n```\nThroughout this document we will refer to different terms with “shellter” in them. We will try to \nmaintain the following style to aid readability:\n  *  “Shellter Project” - the organization that develops and sells the Shellter evasion framework\n  *  “Shellter Pro Plus/Elite” - the commercial names for the tools sold by the Shellter Project\n  *  “SHELLTER” - the loader we have observed in malicious usage and are detailing in this report\n  *  “SHELLTER-protected” - a descriptor of final payloads that the SHELLTER loader delivers\n```\n\n## SHELLTER Overview\n\nSHELLTER is a [commercial evasion framework](https://www.shellterproject.com/homepage/) that has been assisting red teams for over a decade. It helps offensive security service providers bypass anti-virus and, more recently, EDR tools. This allows red teams to utilize their C2 frameworks without the constant development typically needed as security vendors write detection signatures for them.\n\n```\nWhile the Shellter Project does offer a free version of the software, it has a limited feature-set, \nonly 32-bit .exe support, and is generally better understood and detected by anti-malware \nproducts. The free version is not described in this article.\n```\n\nSHELLTER, like many other offensive security tools (OSTs), is a dual-use product. Malicious actors, once they gain access to it, can use SHELLTER to extend the lifespan of their tools. Reputable offensive security vendors, such as the Shellter Project, implement [safeguards](https://www.shellterproject.com/shellter-elite-acquire-upgrade-eligibility-terms/) to mitigate the risk of their products being used maliciously. These measures include geographic sales limits, organizational due diligence, and End User License Agreements (EULAs). Despite these efforts, highly motivated malicious actors remain a challenge.\n\n![](/assets/images/taking-shellter/image39.gif)\n\nOur research identified multiple financially motivated infostealer campaigns that have been using SHELLTER to package payloads beginning late April 2025. Evidence suggests that this is the Shellter Elite version 11.0, which was [released](https://www.shellterproject.com/shellter-elite-v11-0-released/) on April 16, 2025. \n\nSHELLTER is a complex project offering a wide array of configurable settings tailored for specific operating environments, payload delivery mechanisms, and encryption paradigms. This report focuses exclusively on features observed in identified malicious campaigns. While some features appear to be common, a comprehensive review of all available features is beyond the scope of this document.\n\n## SHELLTER Loader - Technical Details\n\nThe following sections describe capabilities that resemble some of the Shellter Project’s published [Elite Exclusive Features](https://www.shellterproject.com/Downloads/ShellterElite/Shellter_Elite_Exclusive_Features.pdf). Our assessment indicates that we are observing Shellter Elite. This conclusion is based on a review of the developer's public documentation, observation of various samples from different builds with a high degree of code similarity, and the prevalence of evasion features scarcely observed.\n\n### Polymorphic Junk Code\n\nSHELLTER-protected samples commonly employ self-modifying shellcode with polymorphic obfuscation to embed themselves within legitimate programs. This combination of legitimate instructions and polymorphic code helps these files evade static detection and signatures, allowing them to remain undetected.\n\nBy setting a breakpoint on `VirtualAlloc` in a SHELLTER-protected [RHADAMANTHYS](https://malpedia.caad.fkie.fraunhofer.de/details/win.rhadamanthys) [sample](https://www.virustotal.com/gui/file/c865f24e4b9b0855b8b559fc3769239b0aa6e8d680406616a13d9a36fbbc2d30/details), we can see the call stack of this malware sample.\n\n![Call stack of backdoored file](/assets/images/taking-shellter/image11.png)\n\nThis type of polymorphic code confuses static disassemblers and impairs emulation efforts. These instructions show up during the unpacking stage, calling one of these pairs of Windows API functions to allocate memory for a new shellcode stub:\n\n- `GetModuleHandleA` / `GetProcAddress`  \n- `CreateFileMappingW` / `MapViewOfFile`\n\n![Junk instructions using legitimate import](/assets/images/taking-shellter/image44.png)\n\nThe SHELLTER functionality is contained within a new, substantial function. It’s reached after additional unpacking and junk instructions in the shellcode stub. IDA Pro or Binary Ninja can successfully decompile the code at this stage.\n\n![Final unpacking instructions leading to main function](/assets/images/taking-shellter/image7.png)\n\n### Unhooking System Modules via File-mappings\n\nTo bypass API hooking techniques from AV/EDR vendors, SHELLTER maps a fresh copy of `ntdll.dll` via `NtCreateSection` and `NtMapViewOfSection`. \n\n![Manually mapped ntdll.dll in orange](/assets/images/taking-shellter/image48.png)\n\nThere is also a second option for unhooking by loading a clean `ntll.dll` from the `KnownDLLs` directory via `NtOpenSection` and `NtMapViewOfSection`.\n\n![ntdll.dll mapped via KnownDlls technique](/assets/images/taking-shellter/image14.png)\n\n### Payload Encryption and Compression\n\nSHELLTER encrypts its final, user-defined payloads using AES-128 CBC mode. This encryption can occur in one of two ways:\n\n* **Embedded key/IV:** A randomly generated key/IV pair is embedded directly within the SHELLTER payload.  \n* **Server-fetched key/IV:** The key/IV pair is fetched from an adversary-controlled server.\n\nFor samples that utilized the embedded option, we successfully recovered the underlying payload.\n\n![AES CBC main decryption loop](/assets/images/taking-shellter/image47.png)\n\nThe encrypted blobs are located at the end of each SHELLTER payload. \n\n![Encrypted payload](/assets/images/taking-shellter/image20.png)\n\nThe AES key and IV can be found as constants being loaded into stack variables at very early stages of the payload as part of its initialization routine.\n\n![Embedded AES Key and IV constants](/assets/images/taking-shellter/image29.png)\n\nIn Shellter Elite v11.0, by default, payloads are compressed using the `LZNT1` algorithm before being encrypted.\n\n### DLL Preloading \u0026 Call Stack Evasion\n\nThe “Force Preload System Modules” feature enables preloading of essential Windows subsystem DLLs, such as `advapi32.dll`, `wininet.dll`, and `crypt32.dll`, to support the underlying payload’s operations. The three configurable options include:\n\n* `--Force-PreloadModules-Basic` (16 general-purpose modules)  \n* `--Force-PreloadModules-Networking` (5 network-specific modules)  \n* `--Force-PreloadModules-Custom` (up to 16 user-defined modules)\n\nThese modules are being loaded through either `LoadLibraryExW` or `LdrLoadDll`. Details on API proxying through custom Vectored Exception Handlers (VEH) will be discussed in a subsequent section.\n\n![APIs for preloading DLLs](/assets/images/taking-shellter/image45.png)\n\nBelow is an example of a list of preloaded modules in a SHELLTER-protected payload that matches the `--Force-PreloadModules-Basic` option, found in a [sample](https://www.virustotal.com/gui/file/70ec2e65f77a940fd0b2b5c0a78a83646dec17583611741521e0992c1bf974f1/relations) that deploys a simple C++ loader client abusing BITS (Background Intelligent Transfer Service) for C2 – an uncommon approach [favored by some threats](https://www.elastic.co/security-labs/bits-and-bytes-analyzing-bitsloth).\n\n![DLL list for flag --Force-PreloadModules-Basic](/assets/images/taking-shellter/image30.png)\n\nThe following example is a list that matches the `--Force-PreloadModules-Networking` option found in a sample loading [LUMMA](https://www.virustotal.com/gui/file/da59d67ced88beae618b9d6c805f40385d0301d412b787e9f9c9559d00d2c880/details). \n\n![DLL list for flag --Force-PreloadModules-Networking](/assets/images/taking-shellter/image27.png)\n\nThis feature ([released](https://www.shellterproject.com/shellter-elite-pro-plus-updates/) in Shellter Pro Plus v10.x) leverages the call stack evasion capability to conceal the source of the `LoadLibraryExW` call while loading networking and cryptography-related libraries.\n\nBelow is an example of a `procmon` trace when loading `wininet.dll`, showing a truncated call stack: \n\n![Truncated call stack when loading wininet.dll](/assets/images/taking-shellter/image49.png)\n\nIn the same [sample](https://www.virustotal.com/gui/file/70ec2e65f77a940fd0b2b5c0a78a83646dec17583611741521e0992c1bf974f1) that has the `--Force-PreloadModules-Basic` flag enabled, we observed that the dependencies of the preloaded modules were also subject to call stack corruption. For instance, `urlmon.dll` also conceals the source of the `LoadLibraryExW` call for its dependencies `iertutil.dll`, `srvcli.dll`, and `netutils.dll`.\n\n### Unlinking of AV/EDR Modules\n\nSHELLTER includes functionality to unlink decoy DLL modules that are placed inside the Process Environment Block ([PEB](https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb)). These decoy modules are used by some security vendors as canaries to monitor when shellcode attempts to enumerate the PEB LDR list manually. [PEB LDR](https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb_ldr_data) is a structure in Windows that contains information about a process's loaded modules.\n\n![Targeted unlinking of the decoy module](/assets/images/taking-shellter/image43.png)\n\nWe only observed one unique module name based on its hash (different per sample), which ends up resolving to `kern3l32.dll` [sic].\n\n### API Hashing Obfuscation\n\nObserved samples employ time-based seeding to obfuscate API addresses. The malware first reads the `SystemTime` value from the `KUSER_SHARED_DATA` structure at address `0x7FFE0014` to derive a dynamic XOR key.\n\n![XOR key derived from KUSER_SHARED_DATA](/assets/images/taking-shellter/image37.png)\n\nIt then uses a seeded-ROR13 hashing algorithm on API names to resolve the function addresses at runtime.\n\n![seeded-ROR13 algorithm](/assets/images/taking-shellter/image15.png)\n\nOnce resolved, optionally, these pointers are obfuscated by XORing them with the time-based key and applying a bitwise rotation before being stored in a lookup table. This tactic is applied throughout the binary to conceal a variety of data such as other function pointers, syscall stubs, and handles of loaded modules. \n\n![Function pointer obfuscation](/assets/images/taking-shellter/image33.png)\n\n### License Check and Self-disarm\n\nFor each SHELLTER payload, there are three embedded `FILETIME` structures. In an example [sample](https://www.virustotal.com/gui/file/7d0c9855167e7c19a67f800892e974c4387e1004b40efb25a2a1d25a99b03a10), these were found to be:\n\n* License expiry datetime (2026-04-17 19:17:24.055000)  \n* Self-disarm datetime (2026-05-21 19:44:43.724952)  \n* Infection start datetime (2025-05-21 19:44:43.724952)\n\n![Hardcoded FILETIMEs](/assets/images/taking-shellter/image28.png)\n\nThe license expiry check compares the current time to the license expiry datetime, setting the `license_valid` flag in the context structure. There are 28 unique call sites (likely 28 licensed features) to the license validity check, where the `license_valid` flag determines whether the main code logic is skipped, confirming that the license expiry datetime acts as a kill switch.\n\n![Expired SHELLTER license causes execution to be cut short](/assets/images/taking-shellter/image34.png)\n\nBy default, the self-disarm date is set exactly one year after the initial infection start date. When the self-disarm flag is triggered, several cleanup routines are executed. One such routine involves unmapping the manually loaded `ntdll` module (if present) and clearing the NTAPI lookup table, which references either the manually mapped `ntdll` module or the one loaded during process initialization. \n\n![Example cleanup routine when self-disarm is triggered](/assets/images/taking-shellter/image4.png)\n\nWhile the Self-disarm and Infection start datetimes are different from sample to sample, we note that the License expiry datetime (2026-04-17 19:17:24.055000) remains constant.\n\nIt is possible that this time is uniquely generated for each license issued by The Shellter Project. If so, it would support the hypothesis that only a single copy of Shellter Elite has been acquired for malicious use. This value does not appear in static analysis, but shows up in the unpacked first stage.\n\n| SHA256 | License Expiration | Self-disarm | Infection Start | Family |\n| :---- | :---- | :---- | :---- | :---- |\n| c865f24e4b9b0855b8b559fc3769239b0aa6e8d680406616a13d9a36fbbc2d30 | 2026-04-17 19:17:24.055000 | 2026-05-27 19:57:42.971694 | 2025-05-27 19:57:42.971694 | RHADAMANTHYS |\n| 7d0c9855167e7c19a67f800892e974c4387e1004b40efb25a2a1d25a99b03a10 | 2026-04-17 19:17:24.055000 | 2026-05-21 19:44:43.724953 | 2025-05-21 19:44:43.724953 | UNKNOWN |\n| b3e93bfef12678294d9944e61d90ca4aa03b7e3dae5e909c3b2166f122a14dad | 2026-04-17 19:17:24.055000 | 2026-05-24 11:42:52.905726 | 2025-05-24 11:42:52.905726 | ARECHCLIENT2 |\n| da59d67ced88beae618b9d6c805f40385d0301d412b787e9f9c9559d00d2c880  | 2026-04-17 19:17:24.055000 | 2026-04-27 22:40:00.954060 | 2025-04-27 22:40:00.954060 | LUMMA |\n| 70ec2e65f77a940fd0b2b5c0a78a83646dec17583611741521e0992c1bf974f1  | 2026-04-17 19:17:24.055000 | 2026-05-16 16:12:09.711057 | 2025-05-16 16:12:09.711057 | UNKNOWN |\n\nBelow is a YARA rule that can be used to identify this hardcoded license expiry value in the illicit SHELLTER samples we’ve examined:\n\n```yara  \nrule SHELLTER_ILLICIT_LICENSE {  \n    meta:  \n        author = \"Elastic Security\"  \n        last_modified = \"2025-07-01\"  \n        os = \"Windows\"  \n        family = \"SHELLTER\"  \n        threat_name = \"SHELLTER_ILLICIT_LICENSE\"\n\n    strings:\n\n        // 2026-04-17 19:17:24.055000  \n        $license_server = { c7 84 24 70 07 00 00 70 5e 2c d2 c7 84 24 74 07 00 00 9e ce dc 01}\n\n    condition:  \n        any of them  \n}  \n```\n\n### Memory Scan Evasion\n\nSHELLTER-protected samples implemented various techniques, including runtime evasions, to avoid detection. These types of techniques include: \n\n- Decoding and re-encoding instructions at runtime  \n- Removal of execute permissions on inactive memory pages  \n- Reducing footprint, impacting in-memory signatures using YARA  \n- Using Windows internals structures, such as the `PEB`, as temporary data holding spots\n\nSHELLTER generates a trampoline-style stub based on the operating system version. There is a 4 KB page that holds this stub, where the memory permissions fluctuate using `NtQueryVirtualMemory` and `NtProtectVirtualMemory`.\n\n![Initial memory page showing memory not committed](/assets/images/taking-shellter/image18.png)\n\n![Memory page moves to PAGE_READWRITE](/assets/images/taking-shellter/image13.png)\n\nOnce the page is active, the encoded bytes can be observed at this address, `0x7FF5FFCE0000`.\n\n![Encoded trampoline stub](/assets/images/taking-shellter/image21.png)\n\nSHELLTER decodes this page when active through an XOR loop using the derived `SystemTime` key from the `KUSER_SHARED_DATA` structure.\n\n![Encoding XOR loop for encoding/decoding trampoline stub](/assets/images/taking-shellter/image12.png)\n\nBelow is this same memory page (`0x7FF5FFCE0000`), showing the decoded trampoline stub for the syscall (`ntdll_NtOpenFile`).\n\n![Decoded trampoline stub for NtOpenFile](/assets/images/taking-shellter/image36.png)\n\nWhen the functionality is needed, the memory page permissions are set with Read/Execute (RX) permissions. After execution, the pages are set to inactive.\n\n![Memory page moves to PAGE_EXECUTE_READ](/assets/images/taking-shellter/image42.png)\n\nThe continuous protection of key functionality during runtime complicates both analysis and detection efforts. This level of protection is uncommon in general malware samples.\n\n### Indirect Syscalls / Call stack Corruption\n\nAs shown in the previous section, SHELLTER bypasses user-mode hooks by using trampoline-based indirect syscalls. Instead of invoking `syscall` directly, it prepares the stack with the address of a clean `syscall` instruction from `ntdll.dll`. A `ret` instruction then pops this address into the `RIP` register, diverting execution to the `syscall` instruction stealthily.\n\n![Trampoline code](/assets/images/taking-shellter/image1.png)\n\n![Syscall instruction from clean ntdll.dll](/assets/images/taking-shellter/image31.png)\n\nBelow is an example of Elastic Defend `VirtualProtect` events, showing the combination of the two evasions (indirect syscall and call stack truncation). This technique can bypass or disrupt various security detection mechanisms.\n\n![Elastic Defend eventing for indirect calls and truncated call stacks](/assets/images/taking-shellter/image16.png)\n\n### Advanced VM/Sandbox Detection\n\nSHELLTER’s documentation makes a reference to a hypervisor detection feature. A similar capability is observed in our malicious samples after a call to `ZwQuerySystemInformationEx` using `CPUID` and `_bittest` instructions. This functionality returns various CPU information along with the Hyper-Threading Technology (HTT) flag. \n\n![Hypervisor detection](/assets/images/taking-shellter/image17.png)\n\n### Debugger Detection (UM/KM)\n\nSHELLTER employs user-mode and kernel-mode debugging detection using Process Heap flags and checking the `KdDebuggerEnabled` flag via the `_KUSER_SHARED_DATA` structure.\n\n![Debugging detections](/assets/images/taking-shellter/image23.png)\n\n### AMSI Bypass\n\nThere are two methods of AMSI bypassing. The first method involves in-memory patching of AMSI functions. This technique searches the functions for specific byte patterns and modifies them to alter the function’s logic. For example, it overwrites a 4-byte string \"AMSI\" with null bytes and patches conditional jumps to its opposite. \n\n![Patch the “AMSI” string in the AMSI functions to null bytes](/assets/images/taking-shellter/image9.png)\n\nThe second method is slightly more sophisticated. First, it optionally attempts to sabotage the Component Object Model (COM) interface lookup by finding the `CLSID_Antimalware` GUID constant `{fdb00e52-a214-4aa1-8fba-4357bb0072ec}` within `amsi.dll`, locating a pointer to it in a writable data section, and corrupting that pointer to make it point 8 bytes before the actual GUID. \n\n![Patch reference point to CLSID_Antimalware GUID constant](/assets/images/taking-shellter/image2.png)\n\nThe targeted pointer is the CLSID pointer in the AMSI module's Active Template Library (ATL) object map entry, a structure used by the `DllGetClassObject` function to find and create registered COM classes. By corrupting the pointer in this map, the lookup for the antimalware provider will fail, preventing it from being created, thus causing `AmsiInitialize` to fail with a `CLASS_E_CLASSNOTAVAILABLE` exception.\n\n![AmsiAntimalware ATL Object Map entry in amsi.dll](/assets/images/taking-shellter/image32.png)\n\nIt then calls `AmsiInitialize` - If the previous patch did not take place and the API call is successful, it performs a vtable patch as a fallback mechanism. The `HAMSICONTEXT` obtained from `AmsiInitialize` contains a pointer to an `IAntimalware` COM object, which in turn contains a pointer to its virtual function table. The bypass targets the function `IAntimalware::Scan` in this table. To neutralize it, the code searches the memory page containing the `IAntimalware::Scan` function for a `ret` instruction. \n\n![Find ret gadget in IAntimalware::Scan function](/assets/images/taking-shellter/image8.png)\n\nAfter finding a suitable gadget, it overwrites the `Scan` function pointer with the address of the `ret` gadget. The result is that any subsequent call to `AmsiScanBuffer` or `AmsiScanString` will invoke the patched vtable, jump directly to a `ret` instruction, and immediately return.\n\n![Overwrite IAntimalware::Scan function pointer with ret gadget](/assets/images/taking-shellter/image38.png)\n\n### Vectored Exception Handler API Proxy\n\nThere is a sophisticated API proxying mechanism which is achieved by redirecting calls to resolved APIs and crafted syscall stubs through a custom exception handler, which acts as a control-flow proxy. It can be broken down into two phases: setup and execution.\n\nPhase 1 involves allocating two special memory pages that will serve as “triggers” for the exception handler. Protection for these pages are set to `PAGE_READONLY`, and attempting to execute code there will cause a `STATUS_ACCESS_VIOLATION` exception, which is intended. The addresses of these trigger pages are stored in the context structure:\n\n* `api_call_trigger_page` - The page that will be called to initiate the proxy.  \n* `api_return_trigger_page` - The page that the actual API will return to.\n\n![Memory Allocation for trigger pages](/assets/images/taking-shellter/image40.png)\n\nAn exception handler template from the binary is copied into an allocated region and registered as the primary handler for the process using `RtlAddVectoredExceptionHandler`. A hardcoded magic placeholder value (`0xe1e2e3e4e5e6e7e8`) in the handler is then overwritten with a pointer to the context structure itself.\n\n![In-memory patch of the magic value in the exception handler](/assets/images/taking-shellter/image22.png)\n\nLooking at an example callsite, if the VEH proxy is to be used, the address of `GetCurrentDirectoryA` will be stored into `ctx_struct-\u003etarget_API_function`, and the API function pointer is overwritten with the address of the call trigger page. This trigger page is then called, triggering a `STATUS_ACCESS_VIOLATION` exception.\n\n![Example callsite with the option to utilize VEH API proxying](/assets/images/taking-shellter/image24.png)\n\nControl flow is redirected to the exception handler. The faulting address of the exception context is checked, and if it matches the call trigger page, it knows it is an incoming API proxy call and performs the following:\n\n* Save the original return address  \n* Overwrite the return address on the stack with the address of the return trigger page  \n* Sets the `RIP` register to the actual API address saved previously in `ctx_struct-\u003etarget_API_function`.\n\nThe `GetCurrentDirectoryA` call is then executed. When it finishes, it jumps to the return trigger page, causing a second `STATUS_ACCESS_VIOLATION` exception and redirecting control flow back to the exception handler. The faulting address is checked to see if it matches the return trigger page; if so, `RIP` is set to the original return address and the control flow returns to the original call site.\n\n![Exception handler template](/assets/images/taking-shellter/image35.png)\n\n## Campaigns\n\nBeginning in late April, Elastic Security Labs identified multiple campaigns deploying various information stealers protected by Shellter Elite. By taking advantage of the above tooling, we observed threat actors across different campaigns quickly integrate this highly evasive loader into their own workflows. \n\n![Activity Timeline](/assets/images/taking-shellter/image6.png)\n\n### LUMMA\n\nLUMMA [infostealer](https://www.virustotal.com/gui/file/da59d67ced88beae618b9d6c805f40385d0301d412b787e9f9c9559d00d2c880/details) was being distributed with SHELLTER starting in late April. While the initial infection vector is not clear, we were able to [verify](https://app.any.run/tasks/eab157aa-5609-4b33-a571-808246d1cf92) (using ANY.RUN) that related files were being hosted on the [MediaFire](https://www.mediafire.com/) file hosting platform.\n\n![Submission data for the LUMMA sample](/assets/images/taking-shellter/image5.png)\n\n### Want-to-Sell\n\nOn May 16th, Twitter/X user [@darkwebinformer](https://x.com/DarkWebInformer) [posted](https://x.com/DarkWebInformer/status/1923472392157790700) a screenshot with the caption:  \n\u003e 🚨Shellter Elite v11.0 up for sale on a popular forum\n\n![Dark Web Informer’s screenshot of Shellter Elite [Sell] forum post](/assets/images/taking-shellter/image19.png)\n\n“Exploit Garant” in this case refers to an escrow-like third-party that mediates the transaction.\n\n### ARECHCLIENT2 \n\nStarting around May, we observed campaigns [targeting](https://www.reddit.com/r/PartneredYoutube/comments/1ks2svg/skillshare_sponsorship/) content creators with lures centered around sponsorship opportunities. These appear to be phishing emails sent to individuals with a YouTube channel impersonating brands such as Udemy, Skillshare, Pinnacle Studio, and Duolingo. The emails include download links to archive files (`.rar`), which contain legitimate promotional content packaged with a SHELLTER-protected executable. \n\n![RAR archive contents](/assets/images/taking-shellter/image41.png)\n\nThis underlying [executable](https://www.virustotal.com/gui/file/748149df038a771986691e3f54afea609ceb9fbfcbec92145beb586bec039e6a/details) shares traits and behaviors with our previous SHELLTER analysis. As of this writing, we can still see [samples](https://www.virustotal.com/gui/file/b3e93bfef12678294d9944e61d90ca4aa03b7e3dae5e909c3b2166f122a14dad/details) with very low detection rates in VirusTotal. This is due to multiple factors associated with custom-built features to avoid static analysis, including polymorphic code, backdooring code into legitimate applications, and the application of code-signing certificates. \n\n![Low detection of SHELLTER-protected ARECHCLIENT2](/assets/images/taking-shellter/image25.png)\n\nThe embedded payload observed in this file deploys the infostealer ARECHCLIENT2, also known as SECTOP RAT. The C2 for this stealer points to `185.156.72[.]80:15847,` which was [previously identified](https://www.elastic.co/security-labs/a-wretch-client) by our team on June 17th when we discussed this threat in association with the GHOSTPULSE loader.\n\n### RHADAMANTHYS\n\nThese infections begin with YouTube videos targeting topics such as game hacking and gaming mods, with video comments linking to the malicious files hosted on MediaFire. \n\n![Distribution through YouTube comments](/assets/images/taking-shellter/image10.png)\n\nOne of the [files](https://www.virustotal.com/gui/file/c865f24e4b9b0855b8b559fc3769239b0aa6e8d680406616a13d9a36fbbc2d30/details) that was previously distributed using this method has been submitted 126 unique times as of this publication by different individuals.\n\n![Submission data for RHADAMANTHYS sample](/assets/images/taking-shellter/image3.png)\n\nThis file shares the same behavioral characteristics as the same underlying code from the previous SHELLTER analysis sections. The embedded payload with this sample deploys RHADAMANTHYS infostealer.\n\n![RHADAMANTHYS strings](/assets/images/taking-shellter/image46.png)\n\n## SHELLTER Unpacker\n\nElastic Security Labs is [releasing](https://github.com/elastic/labs-releases/tree/main/tools/shellter) a dynamic unpacker for binaries protected by SHELLTER. This tool leverages a combination of dynamic and static analysis techniques to automatically extract multiple payload stages from a SHELLTER-protected binary.\n\nAs SHELLTER offers a wide range of optional features, this unpacker is not fully comprehensive, although it does successfully process a large majority of tested samples. Even with unsupported binaries, it is typically able to extract at least one payload stage.\n\n**For safety reasons, this tool should only be executed within an isolated virtual machine.** During the unpacking process, potentially malicious executable code is mapped into memory. Although some basic safeguards have been implemented, they are not infallible.\n\n![SHELLTER Unpacker screenshot](/assets/images/taking-shellter/image26.png)\n\n## Conclusion\n\nDespite the commercial OST community's best efforts to retain their tools for legitimate purposes, mitigation methods are imperfect. They, like many of our customers, face persistent, motivated attackers. Although the Shellter Project is a victim in this case through intellectual property loss and future development time, other participants in the security space must now contend with real threats wielding more capable tools.\n\nWe expect:\n\n* This illicit version of SHELLTER will continue to circulate through the criminal community and potentially transition to nation-state-aligned actors.  \n* The Shellter Project will update and release a version that mitigates the detection opportunities identified in this analysis.  \n  * Any new tooling will remain a target for malicious actors.  \n* More advanced threats will analyze these samples and incorporate features into their toolsets.\n\nOur aim is that this analysis will aid defenders in the early detection of these identified infostealer campaigns and prepare them for a potential expansion of these techniques to other areas of the offensive landscape.\n\n## Malware and MITRE ATT\u0026CK\n\nElastic uses the [MITRE ATT\u0026CK](https://attack.mitre.org/) framework to document common tactics, techniques, and procedures that threats use against enterprise networks.\n\n### Tactics\n\nTactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.\n\n* [Command and Control](https://attack.mitre.org/tactics/TA0011/)  \n* [Collection](https://attack.mitre.org/tactics/TA0100/)  \n* [Defense Evasion](https://attack.mitre.org/tactics/TA0005/)  \n* [Execution](https://attack.mitre.org/tactics/TA0002/)  \n* [Initial Access](https://attack.mitre.org/tactics/TA0001/)  \n* [Resource Development](https://attack.mitre.org/tactics/TA0042/)\n\n### Techniques\n\nTechniques represent how an adversary achieves a tactical goal by performing an action.\n\n* [Application Layer Protocol](https://attack.mitre.org/techniques/T1071/)  \n* [Data from Local System](https://attack.mitre.org/tactics/TA0009/)  \n* [Process Injection: Thread Execution Hijacking](https://attack.mitre.org/techniques/T1055/003/)  \n* [Obfuscated Files or Information: Junk Code Insertion](https://attack.mitre.org/techniques/T1027/016/)  \n* [Content Injection](https://attack.mitre.org/tactics/TA0001/)  \n* [Obtain Capabilities](https://attack.mitre.org/techniques/T1588/)\n\n## Mitigating SHELLTER \n\n### Prevention\n\n- [Shellcode from Unusual Microsoft Signed Module](https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_shellcode_from_unusual_microsoft_signed_module.toml)  \n- [Unbacked Shellcode from Unsigned Module](https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_unbacked_shellcode_from_unsigned_module.toml)  \n- [Shellcode Execution from Low Reputation Module](https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_shellcode_execution_from_low_reputation_module.toml)  \n- [Potential Evasion via Invalid Code Signature](https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_potential_evasion_via_invalid_code_signature.toml)  \n- [Thread Suspension from Unbacked Memory](https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_thread_suspension_from_unbacked_memory.toml)  \n- [Suspicious Executable Memory Mapping](https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_suspicious_executable_memory_mapping.toml)\n\n### YARA\n\nElastic Security has created YARA rules to identify this activity. \n\n```yara  \nrule Windows_Trojan_Shellter {  \n    meta:  \n        author = \"Elastic Security\"  \n        creation_date = \"2025-06-30\"  \n        last_modified = \"2025-06-30\"  \n        os = \"Windows\"  \n        arch = \"x86\"  \n        category_type = \"Trojan\"  \n        family = \"Shellter\"  \n        threat_name = \"Windows.Trojan.Shellter\"  \n        reference_sample = \"c865f24e4b9b0855b8b559fc3769239b0aa6e8d680406616a13d9a36fbbc2d30\"\n\n    strings:  \n        $seq_api_hashing = { 48 8B 44 24 ?? 0F BE 00 85 C0 74 ?? 48 8B 44 24 ?? 0F BE 00 89 44 24 ?? 48 8B 44 24 ?? 48 FF C0 48 89 44 24 ?? 8B 04 24 C1 E8 ?? 8B 0C 24 C1 E1 ?? 0B C1 }  \n        $seq_debug = { 48 8B 49 30 8B 49 70 8B 40 74 0B C1 25 70 00 00 40 85 C0 75 22 B8 D4 02 00 00 48 05 00 00 FE 7F }  \n        $seq_mem_marker = { 44 89 44 24 ?? 89 54 24 ?? 48 89 4C 24 ?? 33 C0 83 F8 ?? 74 ?? 48 8B 44 24 ?? 8B 4C 24 ?? 39 08 75 ?? EB ?? 48 63 44 24 ?? 48 8B 4C 24 }  \n        $seq_check_jmp_rcx = { 48 89 4C 24 ?? B8 01 00 00 00 48 6B C0 00 48 8B 4C 24 ?? 0F B6 04 01 3D FF 00 00 00 75 ?? B8 01 00 00 00 48 6B C0 01 48 8B 4C 24 ?? 0F B6 04 01 3D E1 00 00 00 75 ?? B8 01 00 00 00 }  \n        $seq_syscall_stub = { C6 84 24 98 00 00 00 4C C6 84 24 99 00 00 00 8B C6 84 24 9A 00 00 00 D1 C6 84 24 9B 00 00 00 B8 C6 84 24 9C 00 00 00 00 C6 84 24 9D 00 00 00 00 C6 84 24 9E 00 00 00 00 }  \n        $seq_mem_xor = { 48 8B 4C 24 ?? 0F B6 04 01 0F B6 4C 24 ?? 3B C1 74 ?? 8B 44 24 ?? 0F B6 4C 24 ?? 48 8B 54 24 ?? 0F B6 04 02 33 C1 8B 4C 24 ?? 48 8B 54 24 ?? 88 04 0A }  \n        $seq_excep_handler = { 48 89 4C 24 08 48 83 EC 18 48 B8 E8 E7 E6 E5 E4 E3 E2 E1 48 89 04 24 48 8B 44 24 20 48 8B 00 81 38 05 00 00 C0 }  \n    condition:  \n        3 of them  \n}  \n```\n\n## Observations\n\nAll observables are also available for [download](https://github.com/elastic/labs-releases/tree/main/indicators/shellter) in both ECS and STIX format.\n\nThe following observables were discussed in this research.\n\n| Observable | Type | Name | Reference |\n| :---- | :---- | :---- | :---- |\n| c865f24e4b9b0855b8b559fc3769239b0aa6e8d680406616a13d9a36fbbc2d30 | SHA-256\t | Endorphin.exe | SHELLTER-PROTECTED RHADAMANTHYS |\n| 7d0c9855167e7c19a67f800892e974c4387e1004b40efb25a2a1d25a99b03a10 | SHA-256\t  | SUPERAntiSpyware.exe | SHELLTER-PROTECTED UNKNOWN FAMILY  |\n| b3e93bfef12678294d9944e61d90ca4aa03b7e3dae5e909c3b2166f122a14dad | SHA-256\t  | Aac3572DramHal_x64.exe | SHELLTER-PROTECTED ARECHCLIENT2 |\n| da59d67ced88beae618b9d6c805f40385d0301d412b787e9f9c9559d00d2c880  | SHA-256\t  | Branster.exe | SHELLTER-PROTECTED LUMMA |\n| 70ec2e65f77a940fd0b2b5c0a78a83646dec17583611741521e0992c1bf974f1 | SHA-256\t  | IMCCPHR.exe | SHELLTER-PROTECTED UNKNOWN FAMILY  |\n| 263ab8c9ec821ae573979ef2d5ad98cda5009a39e17398cd31b0fad98d862892 | SHA-256\t  | Pinnacle Studio Advertising materials.rar | LURE ARCHIVE |\n| eaglekl[.]digital | domain |  | LUMMA C\u0026C server |\n| 185.156.72[.]80 | ipv4-addr |  | ARECHCLIENT2 C\u0026C server |\n| 94.141.12[.]182 | ipv4-addr | plotoraus[.]shop server | RHADAMANTHYS C\u0026C server |\n\n## References\n\nThe following were referenced throughout the above research:\n\n* [https://x.com/DarkWebInformer/status/1923472392157790700](https://x.com/DarkWebInformer/status/1923472392157790700)  \n* [https://www.shellterproject.com/shellter-editions-feature-comparison-table/](https://www.shellterproject.com/shellter-editions-feature-comparison-table/)  \n* [https://www.shellterproject.com/Downloads/ShellterElite/Shellter\\_Elite\\_Exclusive\\_Features.pdf](https://www.shellterproject.com/Downloads/ShellterElite/Shellter_Elite_Exclusive_Features.pdf)  \n* [https://github.com/elastic/labs-releases/tree/main/tools/shellter](https://github.com/elastic/labs-releases/tree/main/tools/shellter)\n","code":"var Component=(()=\u003e{var h=Object.create;var a=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var u=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=\u003e{for(var n in e)a(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,r)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let l of p(e))!f.call(t,l)\u0026\u0026l!==n\u0026\u0026a(t,l,{get:()=\u003ee[l],enumerable:!(r=g(e,l))||r.enumerable});return t};var w=(t,e,n)=\u003e(n=t!=null?h(m(t)):{},s(e||!t||!t.__esModule?a(n,\"default\",{value:t,enumerable:!0}):n,t)),y=t=\u003es(a({},\"__esModule\",{value:!0}),t);var c=u((L,o)=\u003e{o.exports=_jsx_runtime});var S={};b(S,{default:()=\u003eT,frontmatter:()=\u003eE});var i=w(c()),E={title:\"Taking SHELLTER: a commercial evasion framework abused in-the-wild \",slug:\"taking-shellter\",date:\"2025-07-03\",description:\"Elastic Security Labs detected the recent emergence of infostealers using an illicitly acquired version of the commercial evasion framework, SHELLTER, to deploy post-exploitation payloads.\",author:[{slug:\"seth-goodwin\"},{slug:\"daniel-stepanic\"},{slug:\"jia-yu-chan\"},{slug:\"samir-bousseaden\"}],image:\"Security Labs Images 2.jpg\",category:[{slug:\"security-research\"}]};function d(t){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",ul:\"ul\",li:\"li\",pre:\"pre\",code:\"code\",a:\"a\",img:\"img\",strong:\"strong\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",blockquote:\"blockquote\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:\"introduction\",children:\"Introduction\"}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic Security Labs is observing multiple campaigns that appear to be leveraging the commercial AV/EDR evasion framework, SHELLTER, to load malware. SHELLTER is marketed to the offensive security industry for sanctioned security evaluations, enabling red team operators to more effectively deploy their C2 frameworks against contemporary anti-malware solutions.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"key-takeaways\",children:\"Key takeaways\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Commercial evasion framework SHELLTER acquired by threat groups\"}),`\n`,(0,i.jsx)(e.li,{children:\"SHELLTER has been used in multiple infostealer campaigns since April 2025\"}),`\n`,(0,i.jsx)(e.li,{children:\"SHELLTER employs unique capabilities to evade analysis and detection\"}),`\n`,(0,i.jsx)(e.li,{children:\"Elastic Security Labs releases dynamic unpacker for SHELLTER-protected binaries\"}),`\n`]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`Throughout this document we will refer to different terms with \\u201Cshellter\\u201D in them. We will try to \nmaintain the following style to aid readability:\n  *  \\u201CShellter Project\\u201D - the organization that develops and sells the Shellter evasion framework\n  *  \\u201CShellter Pro Plus/Elite\\u201D - the commercial names for the tools sold by the Shellter Project\n  *  \\u201CSHELLTER\\u201D - the loader we have observed in malicious usage and are detailing in this report\n  *  \\u201CSHELLTER-protected\\u201D - a descriptor of final payloads that the SHELLTER loader delivers\n`})}),`\n`,(0,i.jsx)(e.h2,{id:\"shellter-overview\",children:\"SHELLTER Overview\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"SHELLTER is a \",(0,i.jsx)(e.a,{href:\"https://www.shellterproject.com/homepage/\",rel:\"nofollow\",children:\"commercial evasion framework\"}),\" that has been assisting red teams for over a decade. It helps offensive security service providers bypass anti-virus and, more recently, EDR tools. This allows red teams to utilize their C2 frameworks without the constant development typically needed as security vendors write detection signatures for them.\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`While the Shellter Project does offer a free version of the software, it has a limited feature-set, \nonly 32-bit .exe support, and is generally better understood and detected by anti-malware \nproducts. The free version is not described in this article.\n`})}),`\n`,(0,i.jsxs)(e.p,{children:[\"SHELLTER, like many other offensive security tools (OSTs), is a dual-use product. Malicious actors, once they gain access to it, can use SHELLTER to extend the lifespan of their tools. Reputable offensive security vendors, such as the Shellter Project, implement \",(0,i.jsx)(e.a,{href:\"https://www.shellterproject.com/shellter-elite-acquire-upgrade-eligibility-terms/\",rel:\"nofollow\",children:\"safeguards\"}),\" to mitigate the risk of their products being used maliciously. These measures include geographic sales limits, organizational due diligence, and End User License Agreements (EULAs). Despite these efforts, highly motivated malicious actors remain a challenge.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image39.gif\",alt:\"\",width:\"250\",height:\"191\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Our research identified multiple financially motivated infostealer campaigns that have been using SHELLTER to package payloads beginning late April 2025. Evidence suggests that this is the Shellter Elite version 11.0, which was \",(0,i.jsx)(e.a,{href:\"https://www.shellterproject.com/shellter-elite-v11-0-released/\",rel:\"nofollow\",children:\"released\"}),\" on April 16, 2025.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"SHELLTER is a complex project offering a wide array of configurable settings tailored for specific operating environments, payload delivery mechanisms, and encryption paradigms. This report focuses exclusively on features observed in identified malicious campaigns. While some features appear to be common, a comprehensive review of all available features is beyond the scope of this document.\"}),`\n`,(0,i.jsx)(e.h2,{id:\"shellter-loader---technical-details\",children:\"SHELLTER Loader - Technical Details\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The following sections describe capabilities that resemble some of the Shellter Project\\u2019s published \",(0,i.jsx)(e.a,{href:\"https://www.shellterproject.com/Downloads/ShellterElite/Shellter_Elite_Exclusive_Features.pdf\",rel:\"nofollow\",children:\"Elite Exclusive Features\"}),\". Our assessment indicates that we are observing Shellter Elite. This conclusion is based on a review of the developer's public documentation, observation of various samples from different builds with a high degree of code similarity, and the prevalence of evasion features scarcely observed.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"polymorphic-junk-code\",children:\"Polymorphic Junk Code\"}),`\n`,(0,i.jsx)(e.p,{children:\"SHELLTER-protected samples commonly employ self-modifying shellcode with polymorphic obfuscation to embed themselves within legitimate programs. This combination of legitimate instructions and polymorphic code helps these files evade static detection and signatures, allowing them to remain undetected.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"By setting a breakpoint on \",(0,i.jsx)(e.code,{children:\"VirtualAlloc\"}),\" in a SHELLTER-protected \",(0,i.jsx)(e.a,{href:\"https://malpedia.caad.fkie.fraunhofer.de/details/win.rhadamanthys\",rel:\"nofollow\",children:\"RHADAMANTHYS\"}),\" \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/c865f24e4b9b0855b8b559fc3769239b0aa6e8d680406616a13d9a36fbbc2d30/details\",rel:\"nofollow\",children:\"sample\"}),\", we can see the call stack of this malware sample.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image11.png\",alt:\"Call stack of backdoored file\",width:\"626\",height:\"309\"})}),`\n`,(0,i.jsx)(e.p,{children:\"This type of polymorphic code confuses static disassemblers and impairs emulation efforts. These instructions show up during the unpacking stage, calling one of these pairs of Windows API functions to allocate memory for a new shellcode stub:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"GetModuleHandleA\"}),\" / \",(0,i.jsx)(e.code,{children:\"GetProcAddress\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"CreateFileMappingW\"}),\" / \",(0,i.jsx)(e.code,{children:\"MapViewOfFile\"})]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image44.png\",alt:\"Junk instructions using legitimate import\",width:\"567\",height:\"372\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The SHELLTER functionality is contained within a new, substantial function. It\\u2019s reached after additional unpacking and junk instructions in the shellcode stub. IDA Pro or Binary Ninja can successfully decompile the code at this stage.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image7.png\",alt:\"Final unpacking instructions leading to main function\",width:\"864\",height:\"512\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"unhooking-system-modules-via-file-mappings\",children:\"Unhooking System Modules via File-mappings\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"To bypass API hooking techniques from AV/EDR vendors, SHELLTER maps a fresh copy of \",(0,i.jsx)(e.code,{children:\"ntdll.dll\"}),\" via \",(0,i.jsx)(e.code,{children:\"NtCreateSection\"}),\" and \",(0,i.jsx)(e.code,{children:\"NtMapViewOfSection\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image48.png\",alt:\"Manually mapped ntdll.dll in orange\",width:\"665\",height:\"204\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"There is also a second option for unhooking by loading a clean \",(0,i.jsx)(e.code,{children:\"ntll.dll\"}),\" from the \",(0,i.jsx)(e.code,{children:\"KnownDLLs\"}),\" directory via \",(0,i.jsx)(e.code,{children:\"NtOpenSection\"}),\" and \",(0,i.jsx)(e.code,{children:\"NtMapViewOfSection\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image14.png\",alt:\"ntdll.dll mapped via KnownDlls technique\",width:\"692\",height:\"190\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"payload-encryption-and-compression\",children:\"Payload Encryption and Compression\"}),`\n`,(0,i.jsx)(e.p,{children:\"SHELLTER encrypts its final, user-defined payloads using AES-128 CBC mode. This encryption can occur in one of two ways:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Embedded key/IV:\"}),\" A randomly generated key/IV pair is embedded directly within the SHELLTER payload.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Server-fetched key/IV:\"}),\" The key/IV pair is fetched from an adversary-controlled server.\"]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"For samples that utilized the embedded option, we successfully recovered the underlying payload.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image47.png\",alt:\"AES CBC main decryption loop\",width:\"603\",height:\"327\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The encrypted blobs are located at the end of each SHELLTER payload.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image20.png\",alt:\"Encrypted payload\",width:\"567\",height:\"592\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The AES key and IV can be found as constants being loaded into stack variables at very early stages of the payload as part of its initialization routine.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image29.png\",alt:\"Embedded AES Key and IV constants\",width:\"1706\",height:\"902\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"In Shellter Elite v11.0, by default, payloads are compressed using the \",(0,i.jsx)(e.code,{children:\"LZNT1\"}),\" algorithm before being encrypted.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"dll-preloading--call-stack-evasion\",children:\"DLL Preloading \u0026 Call Stack Evasion\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The \\u201CForce Preload System Modules\\u201D feature enables preloading of essential Windows subsystem DLLs, such as \",(0,i.jsx)(e.code,{children:\"advapi32.dll\"}),\", \",(0,i.jsx)(e.code,{children:\"wininet.dll\"}),\", and \",(0,i.jsx)(e.code,{children:\"crypt32.dll\"}),\", to support the underlying payload\\u2019s operations. The three configurable options include:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"--Force-PreloadModules-Basic\"}),\" (16 general-purpose modules)\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"--Force-PreloadModules-Networking\"}),\" (5 network-specific modules)\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"--Force-PreloadModules-Custom\"}),\" (up to 16 user-defined modules)\"]}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"These modules are being loaded through either \",(0,i.jsx)(e.code,{children:\"LoadLibraryExW\"}),\" or \",(0,i.jsx)(e.code,{children:\"LdrLoadDll\"}),\". Details on API proxying through custom Vectored Exception Handlers (VEH) will be discussed in a subsequent section.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image45.png\",alt:\"APIs for preloading DLLs\",width:\"760\",height:\"344\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Below is an example of a list of preloaded modules in a SHELLTER-protected payload that matches the \",(0,i.jsx)(e.code,{children:\"--Force-PreloadModules-Basic\"}),\" option, found in a \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/70ec2e65f77a940fd0b2b5c0a78a83646dec17583611741521e0992c1bf974f1/relations\",rel:\"nofollow\",children:\"sample\"}),\" that deploys a simple C++ loader client abusing BITS (Background Intelligent Transfer Service) for C2 \\u2013 an uncommon approach \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/bits-and-bytes-analyzing-bitsloth\",rel:\"nofollow\",children:\"favored by some threats\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image30.png\",alt:\"DLL list for flag --Force-PreloadModules-Basic\",width:\"468\",height:\"286\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The following example is a list that matches the \",(0,i.jsx)(e.code,{children:\"--Force-PreloadModules-Networking\"}),\" option found in a sample loading \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/da59d67ced88beae618b9d6c805f40385d0301d412b787e9f9c9559d00d2c880/details\",rel:\"nofollow\",children:\"LUMMA\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image27.png\",alt:\"DLL list for flag --Force-PreloadModules-Networking\",width:\"409\",height:\"116\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"This feature (\",(0,i.jsx)(e.a,{href:\"https://www.shellterproject.com/shellter-elite-pro-plus-updates/\",rel:\"nofollow\",children:\"released\"}),\" in Shellter Pro Plus v10.x) leverages the call stack evasion capability to conceal the source of the \",(0,i.jsx)(e.code,{children:\"LoadLibraryExW\"}),\" call while loading networking and cryptography-related libraries.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Below is an example of a \",(0,i.jsx)(e.code,{children:\"procmon\"}),\" trace when loading \",(0,i.jsx)(e.code,{children:\"wininet.dll\"}),\", showing a truncated call stack:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image49.png\",alt:\"Truncated call stack when loading wininet.dll\",width:\"1999\",height:\"860\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"In the same \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/70ec2e65f77a940fd0b2b5c0a78a83646dec17583611741521e0992c1bf974f1\",rel:\"nofollow\",children:\"sample\"}),\" that has the \",(0,i.jsx)(e.code,{children:\"--Force-PreloadModules-Basic\"}),\" flag enabled, we observed that the dependencies of the preloaded modules were also subject to call stack corruption. For instance, \",(0,i.jsx)(e.code,{children:\"urlmon.dll\"}),\" also conceals the source of the \",(0,i.jsx)(e.code,{children:\"LoadLibraryExW\"}),\" call for its dependencies \",(0,i.jsx)(e.code,{children:\"iertutil.dll\"}),\", \",(0,i.jsx)(e.code,{children:\"srvcli.dll\"}),\", and \",(0,i.jsx)(e.code,{children:\"netutils.dll\"}),\".\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"unlinking-of-avedr-modules\",children:\"Unlinking of AV/EDR Modules\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"SHELLTER includes functionality to unlink decoy DLL modules that are placed inside the Process Environment Block (\",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb\",rel:\"nofollow\",children:\"PEB\"}),\"). These decoy modules are used by some security vendors as canaries to monitor when shellcode attempts to enumerate the PEB LDR list manually. \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb_ldr_data\",rel:\"nofollow\",children:\"PEB LDR\"}),\" is a structure in Windows that contains information about a process's loaded modules.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image43.png\",alt:\"Targeted unlinking of the decoy module\",width:\"928\",height:\"490\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"We only observed one unique module name based on its hash (different per sample), which ends up resolving to \",(0,i.jsx)(e.code,{children:\"kern3l32.dll\"}),\" [sic].\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"api-hashing-obfuscation\",children:\"API Hashing Obfuscation\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Observed samples employ time-based seeding to obfuscate API addresses. The malware first reads the \",(0,i.jsx)(e.code,{children:\"SystemTime\"}),\" value from the \",(0,i.jsx)(e.code,{children:\"KUSER_SHARED_DATA\"}),\" structure at address \",(0,i.jsx)(e.code,{children:\"0x7FFE0014\"}),\" to derive a dynamic XOR key.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image37.png\",alt:\"XOR key derived from KUSER_SHARED_DATA\",width:\"386\",height:\"100\"})}),`\n`,(0,i.jsx)(e.p,{children:\"It then uses a seeded-ROR13 hashing algorithm on API names to resolve the function addresses at runtime.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image15.png\",alt:\"seeded-ROR13 algorithm\",width:\"420\",height:\"147\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Once resolved, optionally, these pointers are obfuscated by XORing them with the time-based key and applying a bitwise rotation before being stored in a lookup table. This tactic is applied throughout the binary to conceal a variety of data such as other function pointers, syscall stubs, and handles of loaded modules.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image33.png\",alt:\"Function pointer obfuscation\",width:\"921\",height:\"256\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"license-check-and-self-disarm\",children:\"License Check and Self-disarm\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"For each SHELLTER payload, there are three embedded \",(0,i.jsx)(e.code,{children:\"FILETIME\"}),\" structures. In an example \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/7d0c9855167e7c19a67f800892e974c4387e1004b40efb25a2a1d25a99b03a10\",rel:\"nofollow\",children:\"sample\"}),\", these were found to be:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"License expiry datetime (2026-04-17 19:17:24.055000)\"}),`\n`,(0,i.jsx)(e.li,{children:\"Self-disarm datetime (2026-05-21 19:44:43.724952)\"}),`\n`,(0,i.jsx)(e.li,{children:\"Infection start datetime (2025-05-21 19:44:43.724952)\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image28.png\",alt:\"Hardcoded FILETIMEs\",width:\"718\",height:\"129\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The license expiry check compares the current time to the license expiry datetime, setting the \",(0,i.jsx)(e.code,{children:\"license_valid\"}),\" flag in the context structure. There are 28 unique call sites (likely 28 licensed features) to the license validity check, where the \",(0,i.jsx)(e.code,{children:\"license_valid\"}),\" flag determines whether the main code logic is skipped, confirming that the license expiry datetime acts as a kill switch.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image34.png\",alt:\"Expired SHELLTER license causes execution to be cut short\",width:\"945\",height:\"783\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"By default, the self-disarm date is set exactly one year after the initial infection start date. When the self-disarm flag is triggered, several cleanup routines are executed. One such routine involves unmapping the manually loaded \",(0,i.jsx)(e.code,{children:\"ntdll\"}),\" module (if present) and clearing the NTAPI lookup table, which references either the manually mapped \",(0,i.jsx)(e.code,{children:\"ntdll\"}),\" module or the one loaded during process initialization.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image4.png\",alt:\"Example cleanup routine when self-disarm is triggered\",width:\"649\",height:\"261\"})}),`\n`,(0,i.jsx)(e.p,{children:\"While the Self-disarm and Infection start datetimes are different from sample to sample, we note that the License expiry datetime (2026-04-17 19:17:24.055000) remains constant.\"}),`\n`,(0,i.jsx)(e.p,{children:\"It is possible that this time is uniquely generated for each license issued by The Shellter Project. If so, it would support the hypothesis that only a single copy of Shellter Elite has been acquired for malicious use. This value does not appear in static analysis, but shows up in the unpacked first stage.\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:\"left\",children:\"SHA256\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"License Expiration\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Self-disarm\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Infection Start\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Family\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"c865f24e4b9b0855b8b559fc3769239b0aa6e8d680406616a13d9a36fbbc2d30\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"2026-04-17 19:17:24.055000\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"2026-05-27 19:57:42.971694\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"2025-05-27 19:57:42.971694\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"RHADAMANTHYS\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"7d0c9855167e7c19a67f800892e974c4387e1004b40efb25a2a1d25a99b03a10\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"2026-04-17 19:17:24.055000\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"2026-05-21 19:44:43.724953\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"2025-05-21 19:44:43.724953\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"UNKNOWN\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"b3e93bfef12678294d9944e61d90ca4aa03b7e3dae5e909c3b2166f122a14dad\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"2026-04-17 19:17:24.055000\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"2026-05-24 11:42:52.905726\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"2025-05-24 11:42:52.905726\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"ARECHCLIENT2\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"da59d67ced88beae618b9d6c805f40385d0301d412b787e9f9c9559d00d2c880\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"2026-04-17 19:17:24.055000\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"2026-04-27 22:40:00.954060\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"2025-04-27 22:40:00.954060\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"LUMMA\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"70ec2e65f77a940fd0b2b5c0a78a83646dec17583611741521e0992c1bf974f1\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"2026-04-17 19:17:24.055000\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"2026-05-16 16:12:09.711057\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"2025-05-16 16:12:09.711057\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"UNKNOWN\"})]})]})]})}),`\n`,(0,i.jsx)(e.p,{children:\"Below is a YARA rule that can be used to identify this hardcoded license expiry value in the illicit SHELLTER samples we\\u2019ve examined:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-yara\",children:`rule SHELLTER_ILLICIT_LICENSE {  \n    meta:  \n        author = \"Elastic Security\"  \n        last_modified = \"2025-07-01\"  \n        os = \"Windows\"  \n        family = \"SHELLTER\"  \n        threat_name = \"SHELLTER_ILLICIT_LICENSE\"\n\n    strings:\n\n        // 2026-04-17 19:17:24.055000  \n        $license_server = { c7 84 24 70 07 00 00 70 5e 2c d2 c7 84 24 74 07 00 00 9e ce dc 01}\n\n    condition:  \n        any of them  \n}  \n`})}),`\n`,(0,i.jsx)(e.h3,{id:\"memory-scan-evasion\",children:\"Memory Scan Evasion\"}),`\n`,(0,i.jsx)(e.p,{children:\"SHELLTER-protected samples implemented various techniques, including runtime evasions, to avoid detection. These types of techniques include:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Decoding and re-encoding instructions at runtime\"}),`\n`,(0,i.jsx)(e.li,{children:\"Removal of execute permissions on inactive memory pages\"}),`\n`,(0,i.jsx)(e.li,{children:\"Reducing footprint, impacting in-memory signatures using YARA\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Using Windows internals structures, such as the \",(0,i.jsx)(e.code,{children:\"PEB\"}),\", as temporary data holding spots\"]}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"SHELLTER generates a trampoline-style stub based on the operating system version. There is a 4 KB page that holds this stub, where the memory permissions fluctuate using \",(0,i.jsx)(e.code,{children:\"NtQueryVirtualMemory\"}),\" and \",(0,i.jsx)(e.code,{children:\"NtProtectVirtualMemory\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image18.png\",alt:\"Initial memory page showing memory not committed\",width:\"521\",height:\"77\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image13.png\",alt:\"Memory page moves to PAGE_READWRITE\",width:\"473\",height:\"53\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Once the page is active, the encoded bytes can be observed at this address, \",(0,i.jsx)(e.code,{children:\"0x7FF5FFCE0000\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image21.png\",alt:\"Encoded trampoline stub\",width:\"643\",height:\"572\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"SHELLTER decodes this page when active through an XOR loop using the derived \",(0,i.jsx)(e.code,{children:\"SystemTime\"}),\" key from the \",(0,i.jsx)(e.code,{children:\"KUSER_SHARED_DATA\"}),\" structure.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image12.png\",alt:\"Encoding XOR loop for encoding/decoding trampoline stub\",width:\"793\",height:\"231\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Below is this same memory page (\",(0,i.jsx)(e.code,{children:\"0x7FF5FFCE0000\"}),\"), showing the decoded trampoline stub for the syscall (\",(0,i.jsx)(e.code,{children:\"ntdll_NtOpenFile\"}),\").\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image36.png\",alt:\"Decoded trampoline stub for NtOpenFile\",width:\"757\",height:\"238\"})}),`\n`,(0,i.jsx)(e.p,{children:\"When the functionality is needed, the memory page permissions are set with Read/Execute (RX) permissions. After execution, the pages are set to inactive.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image42.png\",alt:\"Memory page moves to PAGE_EXECUTE_READ\",width:\"474\",height:\"45\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The continuous protection of key functionality during runtime complicates both analysis and detection efforts. This level of protection is uncommon in general malware samples.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"indirect-syscalls--call-stack-corruption\",children:\"Indirect Syscalls / Call stack Corruption\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"As shown in the previous section, SHELLTER bypasses user-mode hooks by using trampoline-based indirect syscalls. Instead of invoking \",(0,i.jsx)(e.code,{children:\"syscall\"}),\" directly, it prepares the stack with the address of a clean \",(0,i.jsx)(e.code,{children:\"syscall\"}),\" instruction from \",(0,i.jsx)(e.code,{children:\"ntdll.dll\"}),\". A \",(0,i.jsx)(e.code,{children:\"ret\"}),\" instruction then pops this address into the \",(0,i.jsx)(e.code,{children:\"RIP\"}),\" register, diverting execution to the \",(0,i.jsx)(e.code,{children:\"syscall\"}),\" instruction stealthily.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image1.png\",alt:\"Trampoline code\",width:\"766\",height:\"136\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image31.png\",alt:\"Syscall instruction from clean ntdll.dll\",width:\"982\",height:\"133\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Below is an example of Elastic Defend \",(0,i.jsx)(e.code,{children:\"VirtualProtect\"}),\" events, showing the combination of the two evasions (indirect syscall and call stack truncation). This technique can bypass or disrupt various security detection mechanisms.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image16.png\",alt:\"Elastic Defend eventing for indirect calls and truncated call stacks\",width:\"1574\",height:\"372\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"advanced-vmsandbox-detection\",children:\"Advanced VM/Sandbox Detection\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"SHELLTER\\u2019s documentation makes a reference to a hypervisor detection feature. A similar capability is observed in our malicious samples after a call to \",(0,i.jsx)(e.code,{children:\"ZwQuerySystemInformationEx\"}),\" using \",(0,i.jsx)(e.code,{children:\"CPUID\"}),\" and \",(0,i.jsx)(e.code,{children:\"_bittest\"}),\" instructions. This functionality returns various CPU information along with the Hyper-Threading Technology (HTT) flag.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image17.png\",alt:\"Hypervisor detection\",width:\"733\",height:\"750\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"debugger-detection-umkm\",children:\"Debugger Detection (UM/KM)\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"SHELLTER employs user-mode and kernel-mode debugging detection using Process Heap flags and checking the \",(0,i.jsx)(e.code,{children:\"KdDebuggerEnabled\"}),\" flag via the \",(0,i.jsx)(e.code,{children:\"_KUSER_SHARED_DATA\"}),\" structure.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image23.png\",alt:\"Debugging detections\",width:\"1079\",height:\"286\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"amsi-bypass\",children:\"AMSI Bypass\"}),`\n`,(0,i.jsx)(e.p,{children:'There are two methods of AMSI bypassing. The first method involves in-memory patching of AMSI functions. This technique searches the functions for specific byte patterns and modifies them to alter the function\\u2019s logic. For example, it overwrites a 4-byte string \"AMSI\" with null bytes and patches conditional jumps to its opposite.'}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image9.png\",alt:\"Patch the \\u201CAMSI\\u201D string in the AMSI functions to null bytes\",width:\"602\",height:\"336\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The second method is slightly more sophisticated. First, it optionally attempts to sabotage the Component Object Model (COM) interface lookup by finding the \",(0,i.jsx)(e.code,{children:\"CLSID_Antimalware\"}),\" GUID constant \",(0,i.jsx)(e.code,{children:\"{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\"}),\" within \",(0,i.jsx)(e.code,{children:\"amsi.dll\"}),\", locating a pointer to it in a writable data section, and corrupting that pointer to make it point 8 bytes before the actual GUID.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image2.png\",alt:\"Patch reference point to CLSID_Antimalware GUID constant\",width:\"922\",height:\"613\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The targeted pointer is the CLSID pointer in the AMSI module's Active Template Library (ATL) object map entry, a structure used by the \",(0,i.jsx)(e.code,{children:\"DllGetClassObject\"}),\" function to find and create registered COM classes. By corrupting the pointer in this map, the lookup for the antimalware provider will fail, preventing it from being created, thus causing \",(0,i.jsx)(e.code,{children:\"AmsiInitialize\"}),\" to fail with a \",(0,i.jsx)(e.code,{children:\"CLASS_E_CLASSNOTAVAILABLE\"}),\" exception.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image32.png\",alt:\"AmsiAntimalware ATL Object Map entry in amsi.dll\",width:\"1010\",height:\"204\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"It then calls \",(0,i.jsx)(e.code,{children:\"AmsiInitialize\"}),\" - If the previous patch did not take place and the API call is successful, it performs a vtable patch as a fallback mechanism. The \",(0,i.jsx)(e.code,{children:\"HAMSICONTEXT\"}),\" obtained from \",(0,i.jsx)(e.code,{children:\"AmsiInitialize\"}),\" contains a pointer to an \",(0,i.jsx)(e.code,{children:\"IAntimalware\"}),\" COM object, which in turn contains a pointer to its virtual function table. The bypass targets the function \",(0,i.jsx)(e.code,{children:\"IAntimalware::Scan\"}),\" in this table. To neutralize it, the code searches the memory page containing the \",(0,i.jsx)(e.code,{children:\"IAntimalware::Scan\"}),\" function for a \",(0,i.jsx)(e.code,{children:\"ret\"}),\" instruction.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image8.png\",alt:\"Find ret gadget in IAntimalware::Scan function\",width:\"594\",height:\"523\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"After finding a suitable gadget, it overwrites the \",(0,i.jsx)(e.code,{children:\"Scan\"}),\" function pointer with the address of the \",(0,i.jsx)(e.code,{children:\"ret\"}),\" gadget. The result is that any subsequent call to \",(0,i.jsx)(e.code,{children:\"AmsiScanBuffer\"}),\" or \",(0,i.jsx)(e.code,{children:\"AmsiScanString\"}),\" will invoke the patched vtable, jump directly to a \",(0,i.jsx)(e.code,{children:\"ret\"}),\" instruction, and immediately return.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image38.png\",alt:\"Overwrite IAntimalware::Scan function pointer with ret gadget\",width:\"449\",height:\"308\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"vectored-exception-handler-api-proxy\",children:\"Vectored Exception Handler API Proxy\"}),`\n`,(0,i.jsx)(e.p,{children:\"There is a sophisticated API proxying mechanism which is achieved by redirecting calls to resolved APIs and crafted syscall stubs through a custom exception handler, which acts as a control-flow proxy. It can be broken down into two phases: setup and execution.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Phase 1 involves allocating two special memory pages that will serve as \\u201Ctriggers\\u201D for the exception handler. Protection for these pages are set to \",(0,i.jsx)(e.code,{children:\"PAGE_READONLY\"}),\", and attempting to execute code there will cause a \",(0,i.jsx)(e.code,{children:\"STATUS_ACCESS_VIOLATION\"}),\" exception, which is intended. The addresses of these trigger pages are stored in the context structure:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"api_call_trigger_page\"}),\" - The page that will be called to initiate the proxy.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"api_return_trigger_page\"}),\" - The page that the actual API will return to.\"]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image40.png\",alt:\"Memory Allocation for trigger pages\",width:\"645\",height:\"345\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"An exception handler template from the binary is copied into an allocated region and registered as the primary handler for the process using \",(0,i.jsx)(e.code,{children:\"RtlAddVectoredExceptionHandler\"}),\". A hardcoded magic placeholder value (\",(0,i.jsx)(e.code,{children:\"0xe1e2e3e4e5e6e7e8\"}),\") in the handler is then overwritten with a pointer to the context structure itself.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image22.png\",alt:\"In-memory patch of the magic value in the exception handler\",width:\"446\",height:\"116\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Looking at an example callsite, if the VEH proxy is to be used, the address of \",(0,i.jsx)(e.code,{children:\"GetCurrentDirectoryA\"}),\" will be stored into \",(0,i.jsx)(e.code,{children:\"ctx_struct-\u003etarget_API_function\"}),\", and the API function pointer is overwritten with the address of the call trigger page. This trigger page is then called, triggering a \",(0,i.jsx)(e.code,{children:\"STATUS_ACCESS_VIOLATION\"}),\" exception.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image24.png\",alt:\"Example callsite with the option to utilize VEH API proxying\",width:\"829\",height:\"241\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Control flow is redirected to the exception handler. The faulting address of the exception context is checked, and if it matches the call trigger page, it knows it is an incoming API proxy call and performs the following:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Save the original return address\"}),`\n`,(0,i.jsx)(e.li,{children:\"Overwrite the return address on the stack with the address of the return trigger page\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Sets the \",(0,i.jsx)(e.code,{children:\"RIP\"}),\" register to the actual API address saved previously in \",(0,i.jsx)(e.code,{children:\"ctx_struct-\u003etarget_API_function\"}),\".\"]}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The \",(0,i.jsx)(e.code,{children:\"GetCurrentDirectoryA\"}),\" call is then executed. When it finishes, it jumps to the return trigger page, causing a second \",(0,i.jsx)(e.code,{children:\"STATUS_ACCESS_VIOLATION\"}),\" exception and redirecting control flow back to the exception handler. The faulting address is checked to see if it matches the return trigger page; if so, \",(0,i.jsx)(e.code,{children:\"RIP\"}),\" is set to the original return address and the control flow returns to the original call site.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image35.png\",alt:\"Exception handler template\",width:\"1262\",height:\"382\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"campaigns\",children:\"Campaigns\"}),`\n`,(0,i.jsx)(e.p,{children:\"Beginning in late April, Elastic Security Labs identified multiple campaigns deploying various information stealers protected by Shellter Elite. By taking advantage of the above tooling, we observed threat actors across different campaigns quickly integrate this highly evasive loader into their own workflows.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image6.png\",alt:\"Activity Timeline\",width:\"960\",height:\"540\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"lumma\",children:\"LUMMA\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"LUMMA \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/da59d67ced88beae618b9d6c805f40385d0301d412b787e9f9c9559d00d2c880/details\",rel:\"nofollow\",children:\"infostealer\"}),\" was being distributed with SHELLTER starting in late April. While the initial infection vector is not clear, we were able to \",(0,i.jsx)(e.a,{href:\"https://app.any.run/tasks/eab157aa-5609-4b33-a571-808246d1cf92\",rel:\"nofollow\",children:\"verify\"}),\" (using ANY.RUN) that related files were being hosted on the \",(0,i.jsx)(e.a,{href:\"https://www.mediafire.com/\",rel:\"nofollow\",children:\"MediaFire\"}),\" file hosting platform.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image5.png\",alt:\"Submission data for the LUMMA sample\",width:\"1327\",height:\"512\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"want-to-sell\",children:\"Want-to-Sell\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"On May 16th, Twitter/X user \",(0,i.jsx)(e.a,{href:\"https://x.com/DarkWebInformer\",rel:\"nofollow\",children:\"@darkwebinformer\"}),\" \",(0,i.jsx)(e.a,{href:\"https://x.com/DarkWebInformer/status/1923472392157790700\",rel:\"nofollow\",children:\"posted\"}),\" a screenshot with the caption:\"]}),`\n`,(0,i.jsxs)(e.blockquote,{children:[`\n`,(0,i.jsx)(e.p,{children:\"\\u{1F6A8}Shellter Elite v11.0 up for sale on a popular forum\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image19.png\",alt:\"Dark Web Informer\\u2019s screenshot of Shellter Elite [Sell] forum post\",width:\"1367\",height:\"508\"})}),`\n`,(0,i.jsx)(e.p,{children:\"\\u201CExploit Garant\\u201D in this case refers to an escrow-like third-party that mediates the transaction.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"arechclient2\",children:\"ARECHCLIENT2\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Starting around May, we observed campaigns \",(0,i.jsx)(e.a,{href:\"https://www.reddit.com/r/PartneredYoutube/comments/1ks2svg/skillshare_sponsorship/\",rel:\"nofollow\",children:\"targeting\"}),\" content creators with lures centered around sponsorship opportunities. These appear to be phishing emails sent to individuals with a YouTube channel impersonating brands such as Udemy, Skillshare, Pinnacle Studio, and Duolingo. The emails include download links to archive files (\",(0,i.jsx)(e.code,{children:\".rar\"}),\"), which contain legitimate promotional content packaged with a SHELLTER-protected executable.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image41.png\",alt:\"RAR archive contents\",width:\"1023\",height:\"348\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"This underlying \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/748149df038a771986691e3f54afea609ceb9fbfcbec92145beb586bec039e6a/details\",rel:\"nofollow\",children:\"executable\"}),\" shares traits and behaviors with our previous SHELLTER analysis. As of this writing, we can still see \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/b3e93bfef12678294d9944e61d90ca4aa03b7e3dae5e909c3b2166f122a14dad/details\",rel:\"nofollow\",children:\"samples\"}),\" with very low detection rates in VirusTotal. This is due to multiple factors associated with custom-built features to avoid static analysis, including polymorphic code, backdooring code into legitimate applications, and the application of code-signing certificates.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image25.png\",alt:\"Low detection of SHELLTER-protected ARECHCLIENT2\",width:\"1674\",height:\"583\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The embedded payload observed in this file deploys the infostealer ARECHCLIENT2, also known as SECTOP RAT. The C2 for this stealer points to \",(0,i.jsx)(e.code,{children:\"185.156.72[.]80:15847,\"}),\" which was \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/a-wretch-client\",rel:\"nofollow\",children:\"previously identified\"}),\" by our team on June 17th when we discussed this threat in association with the GHOSTPULSE loader.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"rhadamanthys\",children:\"RHADAMANTHYS\"}),`\n`,(0,i.jsx)(e.p,{children:\"These infections begin with YouTube videos targeting topics such as game hacking and gaming mods, with video comments linking to the malicious files hosted on MediaFire.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image10.png\",alt:\"Distribution through YouTube comments\",width:\"1842\",height:\"1137\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"One of the \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/c865f24e4b9b0855b8b559fc3769239b0aa6e8d680406616a13d9a36fbbc2d30/details\",rel:\"nofollow\",children:\"files\"}),\" that was previously distributed using this method has been submitted 126 unique times as of this publication by different individuals.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image3.png\",alt:\"Submission data for RHADAMANTHYS sample\",width:\"1395\",height:\"414\"})}),`\n`,(0,i.jsx)(e.p,{children:\"This file shares the same behavioral characteristics as the same underlying code from the previous SHELLTER analysis sections. The embedded payload with this sample deploys RHADAMANTHYS infostealer.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image46.png\",alt:\"RHADAMANTHYS strings\",width:\"762\",height:\"375\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"shellter-unpacker\",children:\"SHELLTER Unpacker\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic Security Labs is \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/tools/shellter\",rel:\"nofollow\",children:\"releasing\"}),\" a dynamic unpacker for binaries protected by SHELLTER. This tool leverages a combination of dynamic and static analysis techniques to automatically extract multiple payload stages from a SHELLTER-protected binary.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"As SHELLTER offers a wide range of optional features, this unpacker is not fully comprehensive, although it does successfully process a large majority of tested samples. Even with unsupported binaries, it is typically able to extract at least one payload stage.\"}),`\n`,(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:\"For safety reasons, this tool should only be executed within an isolated virtual machine.\"}),\" During the unpacking process, potentially malicious executable code is mapped into memory. Although some basic safeguards have been implemented, they are not infallible.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/taking-shellter/image26.png\",alt:\"SHELLTER Unpacker screenshot\",width:\"891\",height:\"685\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"conclusion\",children:\"Conclusion\"}),`\n`,(0,i.jsx)(e.p,{children:\"Despite the commercial OST community's best efforts to retain their tools for legitimate purposes, mitigation methods are imperfect. They, like many of our customers, face persistent, motivated attackers. Although the Shellter Project is a victim in this case through intellectual property loss and future development time, other participants in the security space must now contend with real threats wielding more capable tools.\"}),`\n`,(0,i.jsx)(e.p,{children:\"We expect:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"This illicit version of SHELLTER will continue to circulate through the criminal community and potentially transition to nation-state-aligned actors.\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"The Shellter Project will update and release a version that mitigates the detection opportunities identified in this analysis.\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Any new tooling will remain a target for malicious actors.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsx)(e.li,{children:\"More advanced threats will analyze these samples and incorporate features into their toolsets.\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"Our aim is that this analysis will aid defenders in the early detection of these identified infostealer campaigns and prepare them for a potential expansion of these techniques to other areas of the offensive landscape.\"}),`\n`,(0,i.jsx)(e.h2,{id:\"malware-and-mitre-attck\",children:\"Malware and MITRE ATT\u0026CK\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic uses the \",(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/\",rel:\"nofollow\",children:\"MITRE ATT\u0026CK\"}),\" framework to document common tactics, techniques, and procedures that threats use against enterprise networks.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"tactics\",children:\"Tactics\"}),`\n`,(0,i.jsx)(e.p,{children:\"Tactics represent the why of a technique or sub-technique. It is the adversary\\u2019s tactical goal: the reason for performing an action.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0011/\",rel:\"nofollow\",children:\"Command and Control\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0100/\",rel:\"nofollow\",children:\"Collection\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0005/\",rel:\"nofollow\",children:\"Defense Evasion\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0002/\",rel:\"nofollow\",children:\"Execution\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0001/\",rel:\"nofollow\",children:\"Initial Access\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0042/\",rel:\"nofollow\",children:\"Resource Development\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"techniques\",children:\"Techniques\"}),`\n`,(0,i.jsx)(e.p,{children:\"Techniques represent how an adversary achieves a tactical goal by performing an action.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1071/\",rel:\"nofollow\",children:\"Application Layer Protocol\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0009/\",rel:\"nofollow\",children:\"Data from Local System\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1055/003/\",rel:\"nofollow\",children:\"Process Injection: Thread Execution Hijacking\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1027/016/\",rel:\"nofollow\",children:\"Obfuscated Files or Information: Junk Code Insertion\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0001/\",rel:\"nofollow\",children:\"Content Injection\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1588/\",rel:\"nofollow\",children:\"Obtain Capabilities\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"mitigating-shellter\",children:\"Mitigating SHELLTER\"}),`\n`,(0,i.jsx)(e.h3,{id:\"prevention\",children:\"Prevention\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_shellcode_from_unusual_microsoft_signed_module.toml\",rel:\"nofollow\",children:\"Shellcode from Unusual Microsoft Signed Module\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_unbacked_shellcode_from_unsigned_module.toml\",rel:\"nofollow\",children:\"Unbacked Shellcode from Unsigned Module\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_shellcode_execution_from_low_reputation_module.toml\",rel:\"nofollow\",children:\"Shellcode Execution from Low Reputation Module\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_potential_evasion_via_invalid_code_signature.toml\",rel:\"nofollow\",children:\"Potential Evasion via Invalid Code Signature\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_thread_suspension_from_unbacked_memory.toml\",rel:\"nofollow\",children:\"Thread Suspension from Unbacked Memory\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/ff154ddf0762a4a030c8832eee7753cb19b950ff/behavior/rules/windows/defense_evasion_suspicious_executable_memory_mapping.toml\",rel:\"nofollow\",children:\"Suspicious Executable Memory Mapping\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"yara\",children:\"YARA\"}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic Security has created YARA rules to identify this activity.\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-yara\",children:`rule Windows_Trojan_Shellter {  \n    meta:  \n        author = \"Elastic Security\"  \n        creation_date = \"2025-06-30\"  \n        last_modified = \"2025-06-30\"  \n        os = \"Windows\"  \n        arch = \"x86\"  \n        category_type = \"Trojan\"  \n        family = \"Shellter\"  \n        threat_name = \"Windows.Trojan.Shellter\"  \n        reference_sample = \"c865f24e4b9b0855b8b559fc3769239b0aa6e8d680406616a13d9a36fbbc2d30\"\n\n    strings:  \n        $seq_api_hashing = { 48 8B 44 24 ?? 0F BE 00 85 C0 74 ?? 48 8B 44 24 ?? 0F BE 00 89 44 24 ?? 48 8B 44 24 ?? 48 FF C0 48 89 44 24 ?? 8B 04 24 C1 E8 ?? 8B 0C 24 C1 E1 ?? 0B C1 }  \n        $seq_debug = { 48 8B 49 30 8B 49 70 8B 40 74 0B C1 25 70 00 00 40 85 C0 75 22 B8 D4 02 00 00 48 05 00 00 FE 7F }  \n        $seq_mem_marker = { 44 89 44 24 ?? 89 54 24 ?? 48 89 4C 24 ?? 33 C0 83 F8 ?? 74 ?? 48 8B 44 24 ?? 8B 4C 24 ?? 39 08 75 ?? EB ?? 48 63 44 24 ?? 48 8B 4C 24 }  \n        $seq_check_jmp_rcx = { 48 89 4C 24 ?? B8 01 00 00 00 48 6B C0 00 48 8B 4C 24 ?? 0F B6 04 01 3D FF 00 00 00 75 ?? B8 01 00 00 00 48 6B C0 01 48 8B 4C 24 ?? 0F B6 04 01 3D E1 00 00 00 75 ?? B8 01 00 00 00 }  \n        $seq_syscall_stub = { C6 84 24 98 00 00 00 4C C6 84 24 99 00 00 00 8B C6 84 24 9A 00 00 00 D1 C6 84 24 9B 00 00 00 B8 C6 84 24 9C 00 00 00 00 C6 84 24 9D 00 00 00 00 C6 84 24 9E 00 00 00 00 }  \n        $seq_mem_xor = { 48 8B 4C 24 ?? 0F B6 04 01 0F B6 4C 24 ?? 3B C1 74 ?? 8B 44 24 ?? 0F B6 4C 24 ?? 48 8B 54 24 ?? 0F B6 04 02 33 C1 8B 4C 24 ?? 48 8B 54 24 ?? 88 04 0A }  \n        $seq_excep_handler = { 48 89 4C 24 08 48 83 EC 18 48 B8 E8 E7 E6 E5 E4 E3 E2 E1 48 89 04 24 48 8B 44 24 20 48 8B 00 81 38 05 00 00 C0 }  \n    condition:  \n        3 of them  \n}  \n`})}),`\n`,(0,i.jsx)(e.h2,{id:\"observations\",children:\"Observations\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"All observables are also available for \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/indicators/shellter\",rel:\"nofollow\",children:\"download\"}),\" in both ECS and STIX format.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The following observables were discussed in this research.\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:\"left\",children:\"Observable\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Type\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Name\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Reference\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"c865f24e4b9b0855b8b559fc3769239b0aa6e8d680406616a13d9a36fbbc2d30\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHA-256\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Endorphin.exe\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHELLTER-PROTECTED RHADAMANTHYS\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"7d0c9855167e7c19a67f800892e974c4387e1004b40efb25a2a1d25a99b03a10\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHA-256\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SUPERAntiSpyware.exe\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHELLTER-PROTECTED UNKNOWN FAMILY\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"b3e93bfef12678294d9944e61d90ca4aa03b7e3dae5e909c3b2166f122a14dad\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHA-256\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Aac3572DramHal_x64.exe\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHELLTER-PROTECTED ARECHCLIENT2\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"da59d67ced88beae618b9d6c805f40385d0301d412b787e9f9c9559d00d2c880\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHA-256\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Branster.exe\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHELLTER-PROTECTED LUMMA\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"70ec2e65f77a940fd0b2b5c0a78a83646dec17583611741521e0992c1bf974f1\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHA-256\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"IMCCPHR.exe\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHELLTER-PROTECTED UNKNOWN FAMILY\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"263ab8c9ec821ae573979ef2d5ad98cda5009a39e17398cd31b0fad98d862892\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHA-256\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Pinnacle Studio Advertising materials.rar\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"LURE ARCHIVE\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"eaglekl[.]digital\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"domain\"}),(0,i.jsx)(e.td,{align:\"left\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"LUMMA C\u0026C server\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"185.156.72[.]80\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"ipv4-addr\"}),(0,i.jsx)(e.td,{align:\"left\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"ARECHCLIENT2 C\u0026C server\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"94.141.12[.]182\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"ipv4-addr\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"plotoraus[.]shop server\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"RHADAMANTHYS C\u0026C server\"})]})]})]})}),`\n`,(0,i.jsx)(e.h2,{id:\"references\",children:\"References\"}),`\n`,(0,i.jsx)(e.p,{children:\"The following were referenced throughout the above research:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://x.com/DarkWebInformer/status/1923472392157790700\",rel:\"nofollow\",children:\"https://x.com/DarkWebInformer/status/1923472392157790700\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.shellterproject.com/shellter-editions-feature-comparison-table/\",rel:\"nofollow\",children:\"https://www.shellterproject.com/shellter-editions-feature-comparison-table/\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.shellterproject.com/Downloads/ShellterElite/Shellter_Elite_Exclusive_Features.pdf\",rel:\"nofollow\",children:\"https://www.shellterproject.com/Downloads/ShellterElite/Shellter_Elite_Exclusive_Features.pdf\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/tools/shellter\",rel:\"nofollow\",children:\"https://github.com/elastic/labs-releases/tree/main/tools/shellter\"})}),`\n`]})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(d,t)})):d(t)}var T=v;return y(S);})();\n;return Component;"},"_id":"articles/taking-shellter.mdx","_raw":{"sourceFilePath":"articles/taking-shellter.mdx","sourceFileName":"taking-shellter.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/taking-shellter"},"type":"Article","imageUrl":"/assets/images/taking-shellter/Security Labs Images 2.jpg","readingTime":"25 min read","series":"","url":"/taking-shellter","headings":[{"level":2,"title":"Introduction","href":"#introduction"},{"level":3,"title":"Key takeaways","href":"#key-takeaways"},{"level":2,"title":"SHELLTER Overview","href":"#shellter-overview"},{"level":2,"title":"SHELLTER Loader - Technical Details","href":"#shellter-loader---technical-details"},{"level":3,"title":"Polymorphic Junk Code","href":"#polymorphic-junk-code"},{"level":3,"title":"Unhooking System Modules via File-mappings","href":"#unhooking-system-modules-via-file-mappings"},{"level":3,"title":"Payload Encryption and Compression","href":"#payload-encryption-and-compression"},{"level":3,"title":"DLL Preloading \u0026 Call Stack Evasion","href":"#dll-preloading--call-stack-evasion"},{"level":3,"title":"Unlinking of AV/EDR Modules","href":"#unlinking-of-avedr-modules"},{"level":3,"title":"API Hashing Obfuscation","href":"#api-hashing-obfuscation"},{"level":3,"title":"License Check and Self-disarm","href":"#license-check-and-self-disarm"},{"level":3,"title":"Memory Scan Evasion","href":"#memory-scan-evasion"},{"level":3,"title":"Indirect Syscalls / Call stack Corruption","href":"#indirect-syscalls--call-stack-corruption"},{"level":3,"title":"Advanced VM/Sandbox Detection","href":"#advanced-vmsandbox-detection"},{"level":3,"title":"Debugger Detection (UM/KM)","href":"#debugger-detection-umkm"},{"level":3,"title":"AMSI Bypass","href":"#amsi-bypass"},{"level":3,"title":"Vectored Exception Handler API Proxy","href":"#vectored-exception-handler-api-proxy"},{"level":2,"title":"Campaigns","href":"#campaigns"},{"level":3,"title":"LUMMA","href":"#lumma"},{"level":3,"title":"Want-to-Sell","href":"#want-to-sell"},{"level":3,"title":"ARECHCLIENT2 ","href":"#arechclient2-"},{"level":3,"title":"RHADAMANTHYS","href":"#rhadamanthys"},{"level":2,"title":"SHELLTER Unpacker","href":"#shellter-unpacker"},{"level":2,"title":"Conclusion","href":"#conclusion"},{"level":2,"title":"Malware and MITRE ATT\u0026CK","href":"#malware-and-mitre-attck"},{"level":3,"title":"Tactics","href":"#tactics"},{"level":3,"title":"Techniques","href":"#techniques"},{"level":2,"title":"Mitigating SHELLTER ","href":"#mitigating-shellter-"},{"level":3,"title":"Prevention","href":"#prevention"},{"level":3,"title":"YARA","href":"#yara"},{"level":2,"title":"Observations","href":"#observations"},{"level":2,"title":"References","href":"#references"}],"author":[{"title":"Seth Goodwin","slug":"seth-goodwin","description":"Elastic Security Labs Team Senior Research Engineer, Intelligence","body":{"raw":"","code":"var Component=(()=\u003e{var g=Object.create;var i=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var _=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),h=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},a=(t,e,n,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of x(e))!f.call(t,o)\u0026\u0026o!==n\u0026\u0026i(t,o,{get:()=\u003ee[o],enumerable:!(s=l(e,o))||s.enumerable});return t};var j=(t,e,n)=\u003e(n=t!=null?g(d(t)):{},a(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),p=t=\u003ea(i({},\"__esModule\",{value:!0}),t);var u=_((C,c)=\u003e{c.exports=_jsx_runtime});var b={};h(b,{default:()=\u003eS,frontmatter:()=\u003ew});var r=j(u()),w={title:\"Seth Goodwin\",description:\"Elastic Security Labs Team Senior Research Engineer, Intelligence\",slug:\"seth-goodwin\"};function m(t){return(0,r.jsx)(r.Fragment,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var S=M;return p(b);})();\n;return Component;"},"_id":"authors/seth-goodwin.mdx","_raw":{"sourceFilePath":"authors/seth-goodwin.mdx","sourceFileName":"seth-goodwin.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/seth-goodwin"},"type":"Author","imageUrl":"","url":"/authors/seth-goodwin"},{"title":"Daniel Stepanic","slug":"daniel-stepanic","description":"Elastic Security Labs Team Principal Security Researcher, Malware","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var _=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,c)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of x(e))!f.call(t,a)\u0026\u0026a!==n\u0026\u0026i(t,a,{get:()=\u003ee[a],enumerable:!(c=p(e,a))||c.enumerable});return t};var j=(t,e,n)=\u003e(n=t!=null?m(d(t)):{},s(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003es(i({},\"__esModule\",{value:!0}),t);var u=_((w,o)=\u003e{o.exports=_jsx_runtime});var b={};g(b,{default:()=\u003eS,frontmatter:()=\u003ey});var r=j(u()),y={title:\"Daniel Stepanic\",description:\"Elastic Security Labs Team Principal Security Researcher, Malware\",slug:\"daniel-stepanic\"};function l(t){return(0,r.jsx)(r.Fragment,{})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(l,t)})):l(t)}var S=D;return M(b);})();\n;return Component;"},"_id":"authors/daniel-stepanic.mdx","_raw":{"sourceFilePath":"authors/daniel-stepanic.mdx","sourceFileName":"daniel-stepanic.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/daniel-stepanic"},"type":"Author","imageUrl":"","url":"/authors/daniel-stepanic"},{"title":"Jia Yu Chan","slug":"jia-yu-chan","description":"Elastic Security Labs Team Research Engineer, Malware","image":"jiayuchan.jpg","body":{"raw":"","code":"var Component=(()=\u003e{var g=Object.create;var i=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var l=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var h=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),p=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},o=(t,e,n,c)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of x(e))!f.call(t,r)\u0026\u0026r!==n\u0026\u0026i(t,r,{get:()=\u003ee[r],enumerable:!(c=j(e,r))||c.enumerable});return t};var _=(t,e,n)=\u003e(n=t!=null?g(l(t)):{},o(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),d=t=\u003eo(i({},\"__esModule\",{value:!0}),t);var u=h((D,s)=\u003e{s.exports=_jsx_runtime});var b={};p(b,{default:()=\u003eC,frontmatter:()=\u003ey});var a=_(u()),y={title:\"Jia Yu Chan\",description:\"Elastic Security Labs Team Research Engineer, Malware\",slug:\"jia-yu-chan\",image:\"jiayuchan.jpg\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,a.jsx)(e,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=M;return d(b);})();\n;return Component;"},"_id":"authors/jia-yu-chan.mdx","_raw":{"sourceFilePath":"authors/jia-yu-chan.mdx","sourceFileName":"jia-yu-chan.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/jia-yu-chan"},"type":"Author","imageUrl":"/assets/images/authors/jiayuchan.jpg","url":"/authors/jia-yu-chan"},{"title":"Samir Bousseaden","slug":"samir-bousseaden","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),l=(t,e)=\u003e{for(var n in e)s(t,n,{get:e[n],enumerable:!0})},u=(t,e,n,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of f(e))!g.call(t,o)\u0026\u0026o!==n\u0026\u0026s(t,o,{get:()=\u003ee[o],enumerable:!(a=d(e,o))||a.enumerable});return t};var p=(t,e,n)=\u003e(n=t!=null?x(_(t)):{},u(e||!t||!t.__esModule?s(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003eu(s({},\"__esModule\",{value:!0}),t);var m=j((h,i)=\u003e{i.exports=_jsx_runtime});var F={};l(F,{default:()=\u003eD,frontmatter:()=\u003eb});var r=p(m()),b={title:\"Samir Bousseaden\",slug:\"samir-bousseaden\"};function c(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(c,t)})):c(t)}var D=C;return M(F);})();\n;return Component;"},"_id":"authors/samir-bousseaden.mdx","_raw":{"sourceFilePath":"authors/samir-bousseaden.mdx","sourceFileName":"samir-bousseaden.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/samir-bousseaden"},"type":"Author","imageUrl":"","url":"/authors/samir-bousseaden"}],"category":[{"title":"Security research","slug":"security-research","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var l=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),d=(t,e)=\u003e{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},c=(t,e,r,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of _(e))!j.call(t,o)\u0026\u0026o!==r\u0026\u0026s(t,o,{get:()=\u003ee[o],enumerable:!(a=f(e,o))||a.enumerable});return t};var h=(t,e,r)=\u003e(r=t!=null?x(g(t)):{},c(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),p=t=\u003ec(s({},\"__esModule\",{value:!0}),t);var i=l((X,u)=\u003e{u.exports=_jsx_runtime});var D={};d(D,{default:()=\u003eC,frontmatter:()=\u003ey});var n=h(i()),y={title:\"Security research\",slug:\"security-research\"};function m(t){return(0,n.jsx)(n.Fragment,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var C=M;return p(D);})();\n;return Component;"},"_id":"categories/security-research.mdx","_raw":{"sourceFilePath":"categories/security-research.mdx","sourceFileName":"security-research.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/security-research"},"type":"Category","url":"/categories/security-research"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"taking-shellter"},"buildId":"0HX4J5JIPmJcQLCbETJV6","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>