<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>The Shelby Strategy — Elastic Security Labs</title><meta name="description" content="An analysis of REF8685&#x27;s abuse of GitHub for C2 to evade defenses."/><meta property="og:title" content="The Shelby Strategy — Elastic Security Labs"/><meta property="og:description" content="An analysis of REF8685&#x27;s abuse of GitHub for C2 to evade defenses."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/the-shelby-strategy/shelby.png?e4c8ba93728cebf0fee26dc2cbeefe35"/><meta property="og:image:alt" content="An analysis of REF8685&#x27;s abuse of GitHub for C2 to evade defenses."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/the-shelby-strategy"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="The Shelby Strategy — Elastic Security Labs"/><meta name="twitter:description" content="An analysis of REF8685&#x27;s abuse of GitHub for C2 to evade defenses."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/the-shelby-strategy/shelby.png?e4c8ba93728cebf0fee26dc2cbeefe35"/><meta name="twitter:image:alt" content="An analysis of REF8685&#x27;s abuse of GitHub for C2 to evade defenses."/><link rel="canonical" href="https://www.elastic.co/security-labs/the-shelby-strategy"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fthe-shelby-strategy%2Fshelby.png&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fthe-shelby-strategy%2Fshelby.png&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fthe-shelby-strategy%2Fshelby.png&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fthe-shelby-strategy%2Fshelby.png&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fthe-shelby-strategy%2Fshelby.png&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fthe-shelby-strategy%2Fshelby.png&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fthe-shelby-strategy%2Fshelby.png&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fthe-shelby-strategy%2Fshelby.png&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-3116ea2f423ff119.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-b0c191de1a3710e4.js" defer=""></script><script src="/security-labs/_next/static/rZgt_jOWSqGgNGvs1XQtL/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/rZgt_jOWSqGgNGvs1XQtL/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/the-shelby-strategy"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/the-shelby-strategy"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2025-03-26T00:00:00.000Z">26 March 2025</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/salim-bitam">Salim Bitam</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/seth-goodwin">Seth Goodwin</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>The Shelby&nbsp;Strategy</span></h1><p class="text-zinc-200 text-base md:text-xl">An analysis of REF8685&#x27;s abuse of GitHub for C2 to evade defenses.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>28 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/malware-analysis">Malware analysis</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="The Shelby Strategy" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fthe-shelby-strategy%2Fshelby.png&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fthe-shelby-strategy%2Fshelby.png&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fthe-shelby-strategy%2Fshelby.png&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fthe-shelby-strategy%2Fshelby.png&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fthe-shelby-strategy%2Fshelby.png&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fthe-shelby-strategy%2Fshelby.png&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fthe-shelby-strategy%2Fshelby.png&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fthe-shelby-strategy%2Fshelby.png&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fthe-shelby-strategy%2Fshelby.png&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="key-takeaways" class="absolute -top-32"></span>Key takeaways</h2>
<ul>
<li>The SHELBY malware family abuses GitHub for command-and-control, stealing data and retrieving commands</li>
<li>The attacker’s C2 design has a critical flaw: anyone with the PAT token can control infected machines, exposing a significant security vulnerability</li>
<li>Unused code and dynamic payload loading suggest the malware is under active development, indicating future updates may address any issues with contemporary versions</li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="summary" class="absolute -top-32"></span>Summary</h2>
<p>As part of our ongoing research into emerging threats, we analyzed a potential phishing email sent from an email address belonging to an Iraqi telecommunications company and sent to other employees of that same company.</p>
<p>The phishing email relies on the victim opening the attached <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Details.zip</code> file and executing the contained binary, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">JPerf-3.0.0.exe</code>. This binary utilizes the script-driven installation system, <a href="https://jrsoftware.org/isinfo.php">Inno setup</a>, that contains the malicious application:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">%AppData%\Local\Microsoft\HTTPApi</code>:<!-- -->
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HTTPApi.dll</code> (SHELBYC2)</li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HTTPService.dll</code> (SHELBYLOADER)</li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Microsoft.Http.Api.exe</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Microsoft.Http.Api.exe.config</code></li>
</ul>
</li>
</ul>
<p>The installed <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Microsoft.Http.Api.exe</code> is a benign .NET executable. Its primary purpose is to side-load the malicious <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HTTPService.dll</code>. Once loaded, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HTTPService.dll</code> acts as the loader, initiating communication with GitHub for its command-and-control (C2).</p>
<p>The loader retrieves a specific value from the C2, which is used to decrypt the backdoor payload, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HTTPApi.dll</code>. After decryption, the backdoor is loaded into memory as a managed assembly using reflection, allowing it to execute without writing to disk and evading traditional detection mechanisms.</p>
<p></p>
<p>As of the time of writing, both the backdoor and the loader have a low detection rate on VirusTotal.</p>
<p></p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="shelbyloader-code-analysis" class="absolute -top-32"></span>SHELBYLOADER code analysis</h2>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="obfuscation" class="absolute -top-32"></span>Obfuscation</h3>
<p>Both the loader and backdoor are obfuscated with the open-source tool <a href="https://github.com/obfuscar/obfuscar">Obfuscar</a>, which employs string encryption as one of its features. To bypass this obfuscation, we can leverage <a href="https://github.com/de4dot/de4dot">de4dot</a> with custom parameters. Obfuscar replaces strings with calls to a string decryptor function, but by providing the token of this function to de4dot, we can effectively deobfuscate the code. Using the parameters <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">--strtyp</code> ( the type of string decrypter, in our case <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">delegate</code>)  and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">--strtok</code> ( the token of the string decryption method), we can replace these function calls with their corresponding plaintext values, revealing the original strings in the code.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="sandbox-detection" class="absolute -top-32"></span>Sandbox detection</h3>
<p>SHELBYLOADER utilizes sandbox detection techniques to identify virtualized or monitored environments. Once executed, it sends the results back to C2. These results are packaged as log files, detailing whether each detection method successfully identified a sandbox environment, for example:</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="technique-1-wmi-query-for-system-information" class="absolute -top-32"></span>Technique 1: WMI Query for System Information</h4>
<p>The malware executes a WMI query (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Select * from Win32_ComputerSystem</code>) to retrieve system details. It then checks the Manufacturer and Model fields for indicators of a virtual machine, such as &quot;VMware&quot; or &quot;VirtualBox.&quot;</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="technique-2-process-enumeration" class="absolute -top-32"></span>Technique 2: Process Enumeration</h4>
<p>The malware scans the running processes for known virtualization-related services, including:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vmsrvc</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vmtools</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">xenservice</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vboxservice</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vboxtray</code></li>
</ul>
<p>The presence of these processes tells the malware that it may be running in a virtualized environment.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="technique-3-file-system-checks" class="absolute -top-32"></span>Technique 3: File System Checks</h4>
<p>The malware searches for the existence of specific driver files commonly associated with virtualization software, such as:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\Windows\System32\drivers\VBoxMouse.sys</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\Windows\System32\drivers\VBoxGuest.sys</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\Windows\System32\drivers\vmhgfs.sys</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\Windows\System32\drivers\vmci.sys</code></li>
</ul>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="technique-4-disk-size-analysis" class="absolute -top-32"></span>Technique 4: Disk Size Analysis</h4>
<p>The malware checks the size of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:</code> volume. If the size is less than 50 GB, it may infer that the environment is part of a sandbox, as many virtual machines are configured with smaller disk sizes for testing purposes.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="technique-5-parent-process-verification" class="absolute -top-32"></span>Technique 5: Parent Process Verification</h4>
<p>The malware examines its parent process. If the parent process is not <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">explorer.exe</code>, it may indicate execution within an automated analysis environment rather than a typical user-driven scenario.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="technique-6-sleep-time-deviation-detection" class="absolute -top-32"></span>Technique 6: Sleep Time Deviation Detection</h4>
<p>The malware employs timing checks to detect if its sleep or delay functions are being accelerated, a common technique used by sandboxes to speed up analysis. Significant deviations in expected sleep times can reveal a sandboxed environment.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="technique-7-wmi-query-for-video-controller" class="absolute -top-32"></span>Technique 7: WMI Query for Video Controller</h4>
<p>The malware runs a WMI query (SELECT * FROM Win32_VideoController) to retrieve information about the system&#x27;s video controller. It then compares the name of the video controller against known values associated with virtual machines: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">virtual</code> or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vmware</code> or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">vbox</code>.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="core-functionality" class="absolute -top-32"></span>Core Functionality</h3>
<p>The malware&#x27;s loader code begins by initializing several variables within its main class constructor. These variables include:</p>
<ul>
<li>A GitHub account name</li>
<li>A private repository name</li>
<li>A Personal Access Token (PAT) for authenticating and accessing the repository</li>
</ul>
<p>Additionally, the malware sets up two timers, which are used to trigger specific actions at predefined intervals.</p>
<p></p>
<p>One of the timers is configured to trigger a specific method 125 seconds after execution. When invoked, this method establishes persistence on the infected system by adding a new entry to the Windows Registry key <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SOFTWARE\Microsoft\Windows\CurrentVersion\Run</code>. Once the method is triggered and the persistence mechanism is successfully executed, the timer is stopped from further triggering.</p>
<p></p>
<p>This method uses an integer variable to indicate the outcome of its operation. The following table describes each possible value and its meaning:</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>ID</th><th>Description</th></tr></thead><tbody><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">1</code></td><td>Persistence set successfully</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">2</code></td><td>Persistence already set</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">8</code></td><td>Unable to add an entry in the key</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">9</code></td><td>Binary not found on disk</td></tr></tbody></table></div>
<p>This integer value is reported back to C2 during its first registration to the C2, allowing the attackers to monitor the success or failure of the persistence mechanism on the infected system.</p>
<p>The second timer is configured to trigger a method responsible for loading the backdoor, which executes 65 seconds after the malware starts. First, the malware generates an MD5 hash based on a combination of system-specific information. The data used to create the hash is formatted as follows, with each component separated by a slash( <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/</code> ):</p>
<ul>
<li>The number of processors available on the system.</li>
<li>The name of the machine (hostname).</li>
<li>The domain name associated with the user account.</li>
<li>The username of the currently logged-in user.</li>
<li>The total number of logical drives present on the system.</li>
</ul>
<p></p>
<p>A subset of this hash is then extracted and used as a unique identifier for the infected machine. This identifier serves as a way for the attackers to track and manage compromised systems within their infrastructure.</p>
<p>After generating the unique identifier, the malware pushes a new commit to the myToken repository using an HTTPS request. The commit includes a directory named after the unique identifier, which contains a file named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Info.txt</code>. This file stores the following information about the infected system:</p>
<ul>
<li>The domain name associated with the user account.</li>
<li>The username of the currently logged-in user.</li>
<li>The log of sandbox detection results detailing which techniques succeeded or failed.</li>
<li>The persistence flag (as described in the table above) indicates the outcome of the persistence mechanism.</li>
<li>The current date and time of the beaconing event</li>
</ul>
<p></p>
<p>The malware first attempts to push a commit to the repository without using a proxy. If this initial attempt fails, it falls back to using the system-configured proxy for its communication.</p>
<p>After the first beaconing and successful registration of the victim, the malware attempts to access the same GitHub repository directory it created earlier and download a file named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">License.txt</code> (we did not observe any jitter in the checking interval, but the server could handle this). If present, this file contains a 48-byte value, which is used to generate an AES decryption key. This file is uploaded by the attacker’s backend only after validating that the malware is not running in a sandbox environment. This ensures only validated infections receive the key and escalate the execution chain to the backdoor.</p>
<p></p>
<p>The malware generates an AES key and initialization vector (IV) from the contents of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">License.txt</code>. It first hashes the 48-byte value using SHA256, then uses the resulting hash as the key and the first 16 bytes as the IV.</p>
<p></p>
<p>It proceeds to decrypt the file <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HTTPApi.dll</code>, which contains the backdoor payload. After decryption, the malware uses the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Assembly.Load</code> method to reflectively load the backdoor into memory. This technique lets the malware execute the decrypted backdoor directly without writing it to disk.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="dns-based-keying-mechanism" class="absolute -top-32"></span>DNS-Based Keying Mechanism</h3>
<p>Another variant of SHELBYLOADER uses a different approach for registration and retrieving the byte sequence used to generate the AES key and IV.</p>
<p>First, the malware executes the same anti-sandboxing methods, creating a string of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">1</code> or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0</code> depending on whether a sandbox is detected for each technique.</p>
<p>For its C2 registration, the malware builds a subdomain under <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">arthurshelby.click</code> with three parts: the first subdomain is a static string (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">s</code>), the second subdomain is the unique identifier encoded in Base32, and the third subdomain is a concatenated string in the format <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DomainName\HostName &gt;&gt; Anti-Sandboxing Results &gt;&gt; Persistence Flag</code> encoded in base32.</p>
<p>For example, a complete domain might look like <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">s.grldiyrsmvsggojzmi4wmyi.inevyrcfknfvit2qfvcvinjriffe6ib6hyqdambqgaydambahy7cama.arthurshelby.click</code></p>
<p></p>
<p>After that, the malware executes multiple DNS queries to subdomains of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">arthurshelby.click</code>. The IP addresses returned from these queries are concatenated into a byte sequence, which is then used to generate the AES key for decrypting the backdoor, following the same process described earlier.</p>
<p>The subdomains follow this format:</p>
<ul>
<li>The first subdomain is <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">l&lt;index&gt;</code>, where the index corresponds to the order of the DNS calls (e.g., <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">l1</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">l2</code>, etc.), ensuring the byte sequence is assembled correctly.</li>
<li>The second subdomain is the unique identifier encoded in Base32.</li>
</ul>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="shelbyc2-code-analysis" class="absolute -top-32"></span>SHELBYC2 code analysis</h2>
<p>The backdoor begins by regenerating the same unique identifier created by the loader. It does this by computing an MD5 hash of the exact system-specific string used earlier. The backdoor then creates a <a href="https://learn.microsoft.com/en-us/windows/win32/sync/using-mutex-objects">Mutex</a> to ensure that only one instance of the malware runs on the infected machine. The Mutex is named by prepending the string <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Global\GHS</code> to the unique identifier.</p>
<p></p>
<p>After 65 seconds, the backdoor executes a method that collects the following system information:</p>
<ul>
<li>current user identity</li>
<li>operating system version</li>
<li>the process ID of the malware</li>
<li>machine name</li>
<li>current working directory</li>
</ul>
<p>Interestingly, this collected information is neither used locally nor exfiltrated to the C2 server. This suggests that the code might be dead code left behind during development or that the malware is still under active development, with potential plans to utilize this data in future versions.</p>
<p></p>
<p>The malware then uploads the current timestamp to a file named Vivante.txt in the myGit repository within its unique directory (named using the system&#x27;s unique identifier). This timestamp serves as the last beaconing time, enabling the attackers to monitor the malware&#x27;s activity and confirm that the infected system is still active. The word <strong>&quot;Vivante&quot;</strong> translates to <strong>&quot;alive&quot;</strong> in French, which reflects the file&#x27;s role as a heartbeat indicator for the compromised machine.</p>
<p>Next, the malware attempts to download the file <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Command.txt</code>, which contains a list of commands issued by the operator for execution on the infected system.</p>
<p>If <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Command.txt</code> contains no commands, the malware checks for commands in another file named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Broadcast.txt</code>. Unlike <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Command.txt</code>, this file is located outside the malware&#x27;s directory and is used to broadcast commands to all infected systems simultaneously. This approach allows the attacker to simultaneously execute operations across multiple compromised machines, streamlining large-scale control.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="commands-handling-table" class="absolute -top-32"></span>Commands handling table:</h3>
<p>Commands in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Command.txt</code> file can either be handled commands or system commands executed with Powershell. The following is a description of every handled command.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="download" class="absolute -top-32"></span>/download</h4>
<p>This command downloads a file from a GitHub repository to the infected machine. It requires two parameters:</p>
<ul>
<li>The name of the file stored in the GitHub repository.</li>
<li>The path where the file will be saved on the infected machine.</li>
</ul>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="upload" class="absolute -top-32"></span>/upload</h4>
<p>This command uploads a file from the infected machine to the GitHub repository. It takes one parameter: the path of the file to be uploaded.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="dlextract" class="absolute -top-32"></span>/dlextract</h4>
<p>This command downloads a zip file from the GitHub repository (similar to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/download</code>), extracts its contents, and saves them to a specified directory on the machine.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="evoke" class="absolute -top-32"></span>/evoke</h4>
<p>This command is used to load a .NET binary reflectively; it takes two parameters: the first parameter is the path of an AES encrypted .NET binary previously downloaded to the infected machine, the second parameter is a value used to derive AES and the IV, similar to how the loader loads the backdoor.</p>
<p>This command reflectively loads a .NET binary similar to how the SHELBYLOADER loads the backdoor. It requires two parameters:</p>
<ul>
<li>The path to an AES-encrypted .NET binary previously downloaded to the infected machine.</li>
<li>A value used to derive the AES key and IV.</li>
</ul>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="system-commands" class="absolute -top-32"></span>System commands</h4>
<p>Any command not starting with one of the above is treated as a PowerShell command and executed accordingly.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="communication" class="absolute -top-32"></span>Communication</h3>
<p>The malware does not use the <a href="https://git-scm.com/">Git tool</a> in the backend to send commits. Instead, it crafts HTTP requests to interact with GitHub. It sends a commit to the repository using a JSON object with the following structure:</p>
<pre><code>{
  &quot;message&quot;: &quot;Commit message&quot;,
  &quot;content&quot;: &quot;&lt;base64 encoded content&gt;&quot;,
  &quot;sha&quot;: &quot;&lt;hash&gt;&quot;
}</code></pre>
<p>The malware sets specific HTTP headers for the request, including:</p>
<ul>
<li><strong>Accept:</strong> <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">application/vnd.github.v3+json</code></li>
<li><strong>Content-Type:</strong> <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">application/json</code></li>
<li><strong>Authorization:</strong> <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">token &lt;PAT_token&gt;</code></li>
<li><strong>User-Agent:</strong> <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36</code></li>
</ul>
<p></p>
<p>The request is sent to the GitHub API endpoint, constructed as follows:</p>
<pre><code>https://api.github.com/repos/&lt;owner&gt;/&lt;repo&gt;/contents/&lt;unique identifier&gt;/&lt;file&gt;</code></pre>
<p>The Personal Access Token (PAT) required to access the private repository is embedded within the binary. This allows the malware to authenticate and perform actions on the repository without using the standard Git toolchain.</p>
<p></p>
<p>The way the malware is set up means that anyone with the <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens">PAT (Personal Access Token)</a> can theoretically fetch commands sent by the attacker and access command outputs from any victim machine. This is because the PAT token is embedded in the binary and can be used by anyone who obtains it.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="shelby-family-conclusion" class="absolute -top-32"></span>SHELBY family conclusion</h3>
<p>While the C2 infrastructure is designed exotically, the attacker has overlooked the significant risks and implications of this approach.</p>
<p>We believe using this malware, whether by an authorized red team or a malicious actor, would constitute malpractice. It enables any victim to weaponize the embedded PAT and take control of all active infections. Additionally, if a victim uploads samples to platforms like VirusTotal or MalwareBazaar, any third party could access infection-related data or take over the infections entirely.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="ref8685-campaign-analysis" class="absolute -top-32"></span>REF8685 campaign analysis</h2>
<p>Elastic Security Labs discovered REF8685 through routine collection and analysis of third-party data sources. While studying the REF8685 intrusion, we identified a loader and a C2 implant that we determined to be novel, leading us to release this detailed malware and intrusion analysis.</p>
<p>The malicious payloads were delivered to an Iraq-based telecom through a highly targeted phishing email sent from within the targeted organization. The text of the email is a discussion amongst engineers regarding the technical specifics of managing the network. Based on the content and context of the email, it is not likely that this lure was crafted externally, indicating the compromise of engineer endpoints, mail servers, or both.</p>
<pre><code>Dears,

We would appreciate it if you would check the following alarms on Core Network many (ASSOCIATION) have been flapped.

Problem Text
*** ALARM 620 A1/APT &quot;ARHLRF2SPX1.9IP&quot;U 250213 1406
M3UA DESTINATION INACCESSIBLE
DEST            SPID
2-1936          ARSMSC1
END

Problem Text
*** ALARM 974 A1/APT &quot;ARHLRF1SPX1.9IP&quot;U 250213 1406
M3UA DESTINATION INACCESSIBLE
DEST            SPID
2-1936          ARSMSC1
END
…</code></pre>
<p>This email contains a call to action to address network alarms and a zipped attachment named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">details.zip</code>. Within that zip file is a text file containing the logs addressed in the email and a Windows executable (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">JPerf-3.0.0.exe</code>), which starts the execution chain, resulting in the delivery of the SHELBYC2 implant, providing remote access to the environment.</p>
<p>While not observed in the REF8685 intrusion, it should be noted that VirusTotal shows that <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">JPerf-3.0.0.exe</code> (<a href="https://www.virustotal.com/gui/file/feb5d225fa38efe2a627ddfbe9654bf59c171ac0742cd565b7a5f22b45a4cc3a/relations">feb5d225fa38efe2a627ddfbe9654bf59c171ac0742cd565b7a5f22b45a4cc3a</a>) was included in a separate compressed archive (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">JPerf-3.0.0.zip</code>)and also submitted from Iraq. It is unclear if this is from the same victim or another in this campaign. A file similarity search also identifies a second implant named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Setup.exe</code> with an additional compressed archive (<a href="https://www.virustotal.com/gui/file/5c384109d3e578a0107e8518bcb91cd63f6926f0c0d0e01525d34a734445685c/detection">5c384109d3e578a0107e8518bcb91cd63f6926f0c0d0e01525d34a734445685c</a>).</p>
<p>Analysis of these files (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">JPerf-3.0.0.exe</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Setup.exe</code>) revealed the use of GitHub for <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C2</code> and AES key retrieval mechanisms (more on this in the malware analysis sections). The Github accounts (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">arthurshellby</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">johnshelllby</code>) used for the REF8685 malware were malicious and have been shut down by Github.</p>
<p>Of note, Arthur and John Shelby are characters in the British crime drama television series <a href="https://en.wikipedia.org/wiki/Peaky_Blinders_(TV_series)">Peaky Blinders</a>. The show was in production from 2013 to 2022.</p>
<p>The domain <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">arthurshelby[.]click</code> pointed to<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600"> 2.56.126[.]151</code>, a Stark Industries (AS44477) hosted server. This VPS hosting provider <a href="https://krebsonsecurity.com/2024/05/stark-industries-solutions-an-iron-hammer-in-the-cloud/">has been used for proxy services</a> in other large-scale cyber attacks. This server has overlapping resolutions for:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">arthurshelby[.]click</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">[REDACTED]telecom[.]digital</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">speed-test[.]click</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">[REDACTED]airport[.]cloud</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">[REDACTED]airport[.]pro</code></li>
</ul>
<p></p>
<p>The compressed archive and C2 domains for one of the SHELBYLOADER samples are named after [REDACTED] Telecom, an Iraq-based telecommunications company. [REDACTED]’s coverage map focuses on the Iraqi-Kurdistan region in the North and East of the country.</p>
<p>“Sharjaairport” indicates a probable third targeted victim. [REDACTED] International Airport ([REDACTED]) is an international airport specializing in air freight in the United Arab Emirates. It is 14.5 miles (23.3km) from Dubai International Airport (DXB).</p>
<p></p>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">[REDACTED]airport[.]cloud</code> resolved to a new server, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">2.56.126[.]157</code>, for one day on Jan 21, 2025. Afterward, it pointed to Google DNS, the legitimate [REDACTED] Airport server, and finally, a Namecheap parking address. The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">2.56.126[.]157</code> server, Stark Industries (AS44477) hosted, also hosts <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">[REDACTED]-connect[.]online</code>, [REDACTED] is the airport code for the [REDACTED] International Airport.</p>
<p>The domain<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600"> [REDACTED]airport[.]cloud</code> has a subdomain <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">portal.[REDACTED]airport[.]cloud</code> that briefly pointed to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">2.56.126[.]188</code> from Jan 23-25, 2025. It then directed traffic to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">172.86.68[.]55</code> until the time of writing.</p>
<p>Banner hash pivots reveal an additional server-domain combo: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">195.16.74[.]138</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">[REDACTED]-meeting[.]online</code>.</p>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">172.86.68[.].55</code> server also hosts <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mail.[REDACTED]tell[.]com</code>, an apparent phishing domain targeting our original victim.</p>
<p></p>
<p>A web login page was hosted at <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hxxps://portal.[REDACTED]airport[.]cloud/Login</code> (<a href="https://www.virustotal.com/gui/file/02dc15a3bd3a911f6ac9c9e8633c7986f06372a514fc5bf75373b9901c6a9628/relations">VirusTotal</a>).</p>
<p>We assess that the attackers weaponized these two sub-domains to phish for cloud login credentials. Once these credentials were secured (in the case of [REDACTED] Telecom), the attackers accessed the victim&#x27;s cloud email and crafted a highly targeted phish by weaponizing ongoing internal email threads.</p>
<p>This weaponized internal email was used to re-phish their way onto victim endpoints.</p>
<p>All domains associated with this campaign have utilized ZeroSSL certifications and have been on Stark Industries infrastructure.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="the-diamond-model-of-intrusion-analysis" class="absolute -top-32"></span>The Diamond Model of intrusion analysis</h3>
<p>Elastic Security Labs utilizes the <a href="https://www.activeresponse.org/wp-content/uploads/2013/07/diamond.pdf">Diamond Model</a> to describe high-level relationships between the adversaries, capabilities, infrastructure, and victims of intrusions. While the Diamond Model is most commonly used with single intrusions, and leveraging Activity Threading (section 8) as a way to create relationships between incidents, an adversary-centered (section 7.1.4) approach allows for a, although cluttered, single diamond.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="ref8685-and-mitre-attck" class="absolute -top-32"></span>REF8685 and MITRE ATT&amp;CK</h2>
<p>Elastic uses the <a href="https://attack.mitre.org/">MITRE ATT&amp;CK</a> framework to document common tactics, techniques, and procedures that advanced persistent threats use against enterprise networks.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="tactics" class="absolute -top-32"></span>Tactics</h3>
<p>Tactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/tactics/TA0011/">Command and Control</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0001/">Initial Access</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0005/">Defense Evasion</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0007/">Discovery</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0002/">Execution</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0010/">Exfiltration</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="techniques" class="absolute -top-32"></span>Techniques</h3>
<p>Techniques represent how an adversary achieves a tactical goal by performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/techniques/T1620/">Reflective Code Loading</a></li>
<li><a href="https://attack.mitre.org/techniques/T1566/">Phishing</a></li>
<li><a href="https://attack.mitre.org/techniques/T1027/">Obfuscated Files or Information</a></li>
<li><a href="https://attack.mitre.org/techniques/T1059/">Command and Scripting Interpreter</a></li>
<li><a href="https://attack.mitre.org/techniques/T1041/">Exfiltration Over C2 Channel</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="yara-rule" class="absolute -top-32"></span>YARA rule</h2>
<p>Elastic Security has created YARA rules to identify this activity. Below are YARA rules to identify the SHELBYC2 and SHELBYLOADER malware:</p>
<pre><code>rule Windows_Trojan_ShelbyLoader {
    meta:
        author = &quot;Elastic Security&quot;
        creation_date = &quot;2025-03-11&quot;
        last_modified = &quot;2025-03-25&quot;
        os = &quot;Windows&quot;
        arch = &quot;x86&quot;
        category_type = &quot;Trojan&quot;
        family = &quot;ShelbyLoader&quot;
        threat_name = &quot;Windows.Trojan.ShelbyLoader&quot;
        license = &quot;Elastic License v2&quot;

    strings:
        $a0 = &quot;[WARN] Unusual parent process detected: &quot;
        $a1 = &quot;[ERROR] Exception in CheckParentProcess:&quot; fullword
        $a2 = &quot;[INFO] Sandbox Not Detected by CheckParentProcess&quot; fullword
        $b0 = { 22 63 6F 6E 74 65 6E 74 22 3A 20 22 2E 2B 3F 22 }
        $b1 = { 22 73 68 61 22 3A 20 22 2E 2B 3F 22 }
        $b2 = &quot;Persist ID: &quot; fullword
        $b3 = &quot;https://api.github.com/repos/&quot; fullword
    condition:
        all of ($a*) or all of ($b*)
}

rule Windows_Trojan_ShelbyC2 {
    meta:
        author = &quot;Elastic Security&quot;
        creation_date = &quot;2025-03-11&quot;
        last_modified = &quot;2025-03-25&quot;
        os = &quot;Windows&quot;
        arch = &quot;x86&quot;
        category_type = &quot;Trojan&quot;
        family = &quot;ShelbyC2&quot;
        threat_name = &quot;Windows.Trojan.ShelbyC2&quot;
        license = &quot;Elastic License v2&quot;

    strings:
        $a0 = &quot;File Uploaded Successfully&quot; fullword
        $a1 = &quot;/dlextract&quot; fullword
        $a2 = &quot;/evoke&quot; fullword
        $a4 = { 22 73 68 61 22 3A 20 22 2E 2B 3F 22 }
        $a5 = { 22 2C 22 73 68 61 22 3A 22 }
    condition:
        all of them
}</code></pre>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="observations" class="absolute -top-32"></span>Observations</h2>
<p>All observables are also available for <a href="https://github.com/elastic/labs-releases/tree/main/indicators/shelby-strategy">download</a> in both ECS and STIX format in a combined zip bundle.</p>
<p>The following observables were discussed in this research.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Observable</th><th>Type</th><th>Name</th><th>Reference</th></tr></thead><tbody><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0e25efeb4e3304815f9e51c1d9bd3a2e2a23ece3a32f0b47f829536f71ead17a</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">details.zip</code></td><td>Lure zip file</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">feb5d225fa38efe2a627ddfbe9654bf59c171ac0742cd565b7a5f22b45a4cc3a</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">JPerf-3.0.0.exe</code></td><td></td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0354862d83a61c8e69adc3e65f6e5c921523eff829ef1b169e4f0f143b04091f</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HTTPService.dll</code></td><td>SHELBYLOADER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">fb8d4c24bcfd853edb15c5c4096723b239f03255f17cec42f2d881f5f31b6025</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HTTPApi.dll</code></td><td>SHELBYC2</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">472e685e7994f51bbb259be9c61f01b8b8f35d20030f03215ce205993dbad7f5</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">JPerf-3.0.0.zip</code></td><td>Lure zip file</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">5c384109d3e578a0107e8518bcb91cd63f6926f0c0d0e01525d34a734445685c</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Setup.exe</code></td><td></td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">e51c6f0fbc5a7e0b03a0d6e1e1d26ab566d606b551c785bf882e9a02f04c862b</code></td><td>SHA-256</td><td></td><td>Lure zip file</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">github[.]com/johnshelllby</code></td><td>URL</td><td></td><td>GitHub Account name - C2</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">github[.]com/arturshellby</code></td><td>URL</td><td></td><td>GitHub Account name - C2</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">arthurshelby[.]click</code></td><td>domain-name</td><td></td><td>DNS domain</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">speed-test[.]click</code></td><td>domain-name</td><td></td><td></td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">2.56.126[.]151</code></td><td>ipv4</td><td></td><td></td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">2.56.126[.]157</code></td><td>ipv4</td><td></td><td></td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">2.56.126[.]188</code></td><td>ipv4</td><td></td><td></td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">172.86.68[.]55</code></td><td>ipv4</td><td></td><td></td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">195.16.74[.]138</code></td><td>ipv4</td><td></td><td></td></tr></tbody></table></div></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/the-shelby-strategy#key-takeaways"><span>Key&nbsp;takeaways</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/the-shelby-strategy#summary"><span>Summary</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/the-shelby-strategy#shelbyloader-code-analysis"><span>SHELBYLOADER code&nbsp;analysis</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/the-shelby-strategy#obfuscation"><span>Obfuscation</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/the-shelby-strategy#sandbox-detection"><span>Sandbox&nbsp;detection</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/the-shelby-strategy#technique-1-wmi-query-for-system-information"><span>Technique 1: WMI Query for System&nbsp;Information</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/the-shelby-strategy#technique-2-process-enumeration"><span>Technique 2: Process&nbsp;Enumeration</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/the-shelby-strategy#technique-3-file-system-checks"><span>Technique 3: File System&nbsp;Checks</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/the-shelby-strategy#technique-4-disk-size-analysis"><span>Technique 4: Disk Size&nbsp;Analysis</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/the-shelby-strategy#technique-5-parent-process-verification"><span>Technique 5: Parent Process&nbsp;Verification</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/elastic-security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=The Shelby Strategy&amp;url=https://www.elastic.co/security-labs/the-shelby-strategy" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/the-shelby-strategy" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/the-shelby-strategy&amp;title=The Shelby Strategy" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/the-shelby-strategy&amp;title=The Shelby Strategy" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2025<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"The Shelby Strategy","slug":"the-shelby-strategy","date":"2025-03-26","description":"An analysis of REF8685's abuse of GitHub for C2 to evade defenses.","image":"shelby.png","tags":["ref8685","shelbyc2","shelbyloader"],"body":{"raw":"\n## Key takeaways\n\n* The SHELBY malware family abuses GitHub for command-and-control, stealing data and retrieving commands\n* The attacker’s C2 design has a critical flaw: anyone with the PAT token can control infected machines, exposing a significant security vulnerability\n* Unused code and dynamic payload loading suggest the malware is under active development, indicating future updates may address any issues with contemporary versions\n\n## Summary\n\nAs part of our ongoing research into emerging threats, we analyzed a potential phishing email sent from an email address belonging to an Iraqi telecommunications company and sent to other employees of that same company.\n\nThe phishing email relies on the victim opening the attached `Details.zip` file and executing the contained binary, `JPerf-3.0.0.exe`. This binary utilizes the script-driven installation system, [Inno setup](https://jrsoftware.org/isinfo.php), that contains the malicious application:\n\n* `%AppData%\\Local\\Microsoft\\HTTPApi`: \n    * `HTTPApi.dll` (SHELBYC2)\n    * `HTTPService.dll` (SHELBYLOADER)\n    * `Microsoft.Http.Api.exe`\n    * `Microsoft.Http.Api.exe.config`\n\nThe installed `Microsoft.Http.Api.exe` is a benign .NET executable. Its primary purpose is to side-load the malicious `HTTPService.dll`. Once loaded, `HTTPService.dll` acts as the loader, initiating communication with GitHub for its command-and-control (C2).\n\nThe loader retrieves a specific value from the C2, which is used to decrypt the backdoor payload, `HTTPApi.dll`. After decryption, the backdoor is loaded into memory as a managed assembly using reflection, allowing it to execute without writing to disk and evading traditional detection mechanisms.\n\n![SHELBYLOADER \u0026 SHELBYC2 Execution Chain](/assets/images/the-shelby-strategy/image27.png \"SHELBYLOADER \u0026 SHELBYC2 Execution Chain\")\n\nAs of the time of writing, both the backdoor and the loader have a low detection rate on VirusTotal.\n\n![VirusTotal hits for SHELBYC2](/assets/images/the-shelby-strategy/image2.png \"VirusTotal hits for SHELBYC2\")\n\n![VirusTotal hits for SHELBYLOADER](/assets/images/the-shelby-strategy/image24.png \"VirusTotal hits for SHELBYLOADER\")\n\n## SHELBYLOADER code analysis\n\n### Obfuscation\n\nBoth the loader and backdoor are obfuscated with the open-source tool [Obfuscar](https://github.com/obfuscar/obfuscar), which employs string encryption as one of its features. To bypass this obfuscation, we can leverage [de4dot](https://github.com/de4dot/de4dot) with custom parameters. Obfuscar replaces strings with calls to a string decryptor function, but by providing the token of this function to de4dot, we can effectively deobfuscate the code. Using the parameters `--strtyp` ( the type of string decrypter, in our case `delegate`)  and `--strtok` ( the token of the string decryption method), we can replace these function calls with their corresponding plaintext values, revealing the original strings in the code.\n\n![Deobfuscation using de4dot](/assets/images/the-shelby-strategy/image6.png \"Deobfuscation using de4dot\")\n\n### Sandbox detection\n\nSHELBYLOADER utilizes sandbox detection techniques to identify virtualized or monitored environments. Once executed, it sends the results back to C2. These results are packaged as log files, detailing whether each detection method successfully identified a sandbox environment, for example:\n\n![Sandbox detection example](/assets/images/the-shelby-strategy/image17.png \"Sandbox detection example\")\n\n#### Technique 1: WMI Query for System Information\n\nThe malware executes a WMI query (`Select * from Win32_ComputerSystem`) to retrieve system details. It then checks the Manufacturer and Model fields for indicators of a virtual machine, such as \"VMware\" or \"VirtualBox.\"\n\n![Sandbox detection based on system information](/assets/images/the-shelby-strategy/image8.png \"Sandbox detection based on system information\")\n\n#### Technique 2: Process Enumeration\n\nThe malware scans the running processes for known virtualization-related services, including:\n\n* `vmsrvc`\n* `vmtools`\n* `xenservice`\n* `vboxservice`\n* `vboxtray`\n\nThe presence of these processes tells the malware that it may be running in a virtualized environment.\n\n#### Technique 3: File System Checks\n\nThe malware searches for the existence of specific driver files commonly associated with virtualization software, such as:\n\n* `C:\\Windows\\System32\\drivers\\VBoxMouse.sys`\n* `C:\\Windows\\System32\\drivers\\VBoxGuest.sys`\n* `C:\\Windows\\System32\\drivers\\vmhgfs.sys`\n* `C:\\Windows\\System32\\drivers\\vmci.sys`\n\n#### Technique 4: Disk Size Analysis\n\nThe malware checks the size of the `C:` volume. If the size is less than 50 GB, it may infer that the environment is part of a sandbox, as many virtual machines are configured with smaller disk sizes for testing purposes.\n\n![Sandbox detection based on disk size](/assets/images/the-shelby-strategy/image23.png \"Sandbox detection based on disk size\")\n\n#### Technique 5: Parent Process Verification\n\nThe malware examines its parent process. If the parent process is not `explorer.exe`, it may indicate execution within an automated analysis environment rather than a typical user-driven scenario.\n\n![Sandbox detection based on process tree](/assets/images/the-shelby-strategy/image15.png \"Sandbox detection based on process tree\")\n\n#### Technique 6: Sleep Time Deviation Detection\n\nThe malware employs timing checks to detect if its sleep or delay functions are being accelerated, a common technique used by sandboxes to speed up analysis. Significant deviations in expected sleep times can reveal a sandboxed environment.\n\n![Sandbox detection based on sleep time deviation](/assets/images/the-shelby-strategy/image5.png \"Sandbox detection based on sleep time deviation\")\n\n#### Technique 7: WMI Query for Video Controller\n\nThe malware runs a WMI query (SELECT * FROM Win32_VideoController) to retrieve information about the system's video controller. It then compares the name of the video controller against known values associated with virtual machines: `virtual` or `vmware` or `vbox`.\n\n![Sandbox detection based on the name of the video controller](/assets/images/the-shelby-strategy/image21.png \"Sandbox detection based on the name of the video controller\")\n\n### Core Functionality\n\nThe malware's loader code begins by initializing several variables within its main class constructor. These variables include:\n\n* A GitHub account name\n* A private repository name\n* A Personal Access Token (PAT) for authenticating and accessing the repository\n\nAdditionally, the malware sets up two timers, which are used to trigger specific actions at predefined intervals.\n\n![SHELBYLOADER configuration](/assets/images/the-shelby-strategy/image31.png \"SHELBYLOADER configuration\")\n\nOne of the timers is configured to trigger a specific method 125 seconds after execution. When invoked, this method establishes persistence on the infected system by adding a new entry to the Windows Registry key `SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run`. Once the method is triggered and the persistence mechanism is successfully executed, the timer is stopped from further triggering.\n\n![Setup persistence](/assets/images/the-shelby-strategy/image22.png \"Setup persistence\")\n\nThis method uses an integer variable to indicate the outcome of its operation. The following table describes each possible value and its meaning:\n\n| ID | Description                       |\n|----|-----------------------------------|\n| `1`  | Persistence set successfully      |\n| `2`  | Persistence already set           |\n| `8`  | Unable to add an entry in the key |\n| `9`  | Binary not found on disk          |\n\nThis integer value is reported back to C2 during its first registration to the C2, allowing the attackers to monitor the success or failure of the persistence mechanism on the infected system.\n\nThe second timer is configured to trigger a method responsible for loading the backdoor, which executes 65 seconds after the malware starts. First, the malware generates an MD5 hash based on a combination of system-specific information. The data used to create the hash is formatted as follows, with each component separated by a slash( `/` ):\n\n* The number of processors available on the system.\n* The name of the machine (hostname).\n* The domain name associated with the user account.\n* The username of the currently logged-in user.\n* The total number of logical drives present on the system.\n\n![Generate unique identifier](/assets/images/the-shelby-strategy/image12.png \"Generate unique identifier\")\n\nA subset of this hash is then extracted and used as a unique identifier for the infected machine. This identifier serves as a way for the attackers to track and manage compromised systems within their infrastructure.\n\nAfter generating the unique identifier, the malware pushes a new commit to the myToken repository using an HTTPS request. The commit includes a directory named after the unique identifier, which contains a file named `Info.txt`. This file stores the following information about the infected system:\n\n* The domain name associated with the user account.\n* The username of the currently logged-in user.\n* The log of sandbox detection results detailing which techniques succeeded or failed.\n* The persistence flag (as described in the table above) indicates the outcome of the persistence mechanism.\n* The current date and time of the beaconing event\n\n![Example content of Info.txt](/assets/images/the-shelby-strategy/image28.png \"Example content of Info.txt\")\n\nThe malware first attempts to push a commit to the repository without using a proxy. If this initial attempt fails, it falls back to using the system-configured proxy for its communication.\n\nAfter the first beaconing and successful registration of the victim, the malware attempts to access the same GitHub repository directory it created earlier and download a file named `License.txt` (we did not observe any jitter in the checking interval, but the server could handle this). If present, this file contains a 48-byte value, which is used to generate an AES decryption key. This file is uploaded by the attacker’s backend only after validating that the malware is not running in a sandbox environment. This ensures only validated infections receive the key and escalate the execution chain to the backdoor.\n\n![Function calls for registration and retrieval of License content](/assets/images/the-shelby-strategy/image18.png \"Function calls for registration and retrieval of License content\")\n\nThe malware generates an AES key and initialization vector (IV) from the contents of `License.txt`. It first hashes the 48-byte value using SHA256, then uses the resulting hash as the key and the first 16 bytes as the IV.\n\n![Generating decryption AES key and IV](/assets/images/the-shelby-strategy/image25.png \"Generating decryption AES key and IV\")\n\nIt proceeds to decrypt the file `HTTPApi.dll`, which contains the backdoor payload. After decryption, the malware uses the `Assembly.Load` method to reflectively load the backdoor into memory. This technique lets the malware execute the decrypted backdoor directly without writing it to disk.\n\n![Decrypts and loads SHELBYC2](/assets/images/the-shelby-strategy/image4.png \"Decrypts and loads SHELBYC2\")\n\n### DNS-Based Keying Mechanism\n\nAnother variant of SHELBYLOADER uses a different approach for registration and retrieving the byte sequence used to generate the AES key and IV. \n\nFirst, the malware executes the same anti-sandboxing methods, creating a string of `1` or `0` depending on whether a sandbox is detected for each technique. \n\nFor its C2 registration, the malware builds a subdomain under `arthurshelby.click` with three parts: the first subdomain is a static string (`s`), the second subdomain is the unique identifier encoded in Base32, and the third subdomain is a concatenated string in the format `DomainName\\HostName \u003e\u003e Anti-Sandboxing Results \u003e\u003e Persistence Flag` encoded in base32.\n\nFor example, a complete domain might look like `s.grldiyrsmvsggojzmi4wmyi.inevyrcfknfvit2qfvcvinjriffe6ib6hyqdambqgaydambahy7cama.arthurshelby.click`\n\n![CyberChef recipe for decoding generated subdomains](/assets/images/the-shelby-strategy/image13.png \"CyberChef recipe for decoding generated subdomains\")\n\nAfter that, the malware executes multiple DNS queries to subdomains of `arthurshelby.click`. The IP addresses returned from these queries are concatenated into a byte sequence, which is then used to generate the AES key for decrypting the backdoor, following the same process described earlier.\n\nThe subdomains follow this format:\n\n* The first subdomain is `l\u003cindex\u003e`, where the index corresponds to the order of the DNS calls (e.g., `l1`, `l2`, etc.), ensuring the byte sequence is assembled correctly.\n* The second subdomain is the unique identifier encoded in Base32.\n\n![Subdomains contacted to retrieve the bytes used to generate the AES key](/assets/images/the-shelby-strategy/image16.png \"Subdomains contacted to retrieve the bytes used to generate the AES key\")\n\n## SHELBYC2 code analysis\n\nThe backdoor begins by regenerating the same unique identifier created by the loader. It does this by computing an MD5 hash of the exact system-specific string used earlier. The backdoor then creates a [Mutex](https://learn.microsoft.com/en-us/windows/win32/sync/using-mutex-objects) to ensure that only one instance of the malware runs on the infected machine. The Mutex is named by prepending the string `Global\\GHS` to the unique identifier.\n\n![Mutex initialization](/assets/images/the-shelby-strategy/image9.png \"Mutex initialization\")\n\nAfter 65 seconds, the backdoor executes a method that collects the following system information:\n\n* current user identity\n* operating system version\n* the process ID of the malware\n* machine name\n* current working directory\n\nInterestingly, this collected information is neither used locally nor exfiltrated to the C2 server. This suggests that the code might be dead code left behind during development or that the malware is still under active development, with potential plans to utilize this data in future versions.\n\n![Dead code](/assets/images/the-shelby-strategy/image1.png \"Dead code\")\n\nThe malware then uploads the current timestamp to a file named Vivante.txt in the myGit repository within its unique directory (named using the system's unique identifier). This timestamp serves as the last beaconing time, enabling the attackers to monitor the malware's activity and confirm that the infected system is still active. The word **\"Vivante\"** translates to **\"alive\"** in French, which reflects the file's role as a heartbeat indicator for the compromised machine.\n\nNext, the malware attempts to download the file `Command.txt`, which contains a list of commands issued by the operator for execution on the infected system.\n\nIf `Command.txt` contains no commands, the malware checks for commands in another file named `Broadcast.txt`. Unlike `Command.txt`, this file is located outside the malware's directory and is used to broadcast commands to all infected systems simultaneously. This approach allows the attacker to simultaneously execute operations across multiple compromised machines, streamlining large-scale control.\n\n### Commands handling table:\n\nCommands in the `Command.txt` file can either be handled commands or system commands executed with Powershell. The following is a description of every handled command.\n\n#### /download\n\nThis command downloads a file from a GitHub repository to the infected machine. It requires two parameters:\n\n* The name of the file stored in the GitHub repository.\n* The path where the file will be saved on the infected machine.\n\n![Download command](/assets/images/the-shelby-strategy/image20.png)\n\n#### /upload\n\nThis command uploads a file from the infected machine to the GitHub repository. It takes one parameter: the path of the file to be uploaded.\n\n![Upload command](/assets/images/the-shelby-strategy/image32.png)\n\n#### /dlextract\n\nThis command downloads a zip file from the GitHub repository (similar to `/download`), extracts its contents, and saves them to a specified directory on the machine.\n\n![Zip extraction command](/assets/images/the-shelby-strategy/image30.png)\n\n#### /evoke\n\nThis command is used to load a .NET binary reflectively; it takes two parameters: the first parameter is the path of an AES encrypted .NET binary previously downloaded to the infected machine, the second parameter is a value used to derive AES and the IV, similar to how the loader loads the backdoor.\n\nThis command reflectively loads a .NET binary similar to how the SHELBYLOADER loads the backdoor. It requires two parameters:\n\n* The path to an AES-encrypted .NET binary previously downloaded to the infected machine.\n* A value used to derive the AES key and IV.\n\n![.NET invocation command](/assets/images/the-shelby-strategy/image3.png)\n\n#### System commands\n\nAny command not starting with one of the above is treated as a PowerShell command and executed accordingly.\n\n![Powershell execution command](/assets/images/the-shelby-strategy/image7.png)\n\n### Communication\n\nThe malware does not use the [Git tool](https://git-scm.com/) in the backend to send commits. Instead, it crafts HTTP requests to interact with GitHub. It sends a commit to the repository using a JSON object with the following structure:\n\n```json\n{\n  \"message\": \"Commit message\",\n  \"content\": \"\u003cbase64 encoded content\u003e\",\n  \"sha\": \"\u003chash\u003e\"\n}\n```\n\nThe malware sets specific HTTP headers for the request, including:\n\n* **Accept:** `application/vnd.github.v3+json`\n* **Content-Type:** `application/json`\n* **Authorization:** `token \u003cPAT_token\u003e`\n* **User-Agent:** `Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36`\n\n![Initialization of the HTTP request](/assets/images/the-shelby-strategy/image14.png)\n\nThe request is sent to the GitHub API endpoint, constructed as follows:\n\n```\nhttps://api.github.com/repos/\u003cowner\u003e/\u003crepo\u003e/contents/\u003cunique identifier\u003e/\u003cfile\u003e\n```\n\nThe Personal Access Token (PAT) required to access the private repository is embedded within the binary. This allows the malware to authenticate and perform actions on the repository without using the standard Git toolchain.\n\n![Wireshark capture of a C2 communication by SHELBYC2](/assets/images/the-shelby-strategy/image26.png)\n\nThe way the malware is set up means that anyone with the [PAT (Personal Access Token)](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens) can theoretically fetch commands sent by the attacker and access command outputs from any victim machine. This is because the PAT token is embedded in the binary and can be used by anyone who obtains it.\n\n### SHELBY family conclusion\n\nWhile the C2 infrastructure is designed exotically, the attacker has overlooked the significant risks and implications of this approach. \n\nWe believe using this malware, whether by an authorized red team or a malicious actor, would constitute malpractice. It enables any victim to weaponize the embedded PAT and take control of all active infections. Additionally, if a victim uploads samples to platforms like VirusTotal or MalwareBazaar, any third party could access infection-related data or take over the infections entirely.\n\n## REF8685 campaign analysis\n\nElastic Security Labs discovered REF8685 through routine collection and analysis of third-party data sources. While studying the REF8685 intrusion, we identified a loader and a C2 implant that we determined to be novel, leading us to release this detailed malware and intrusion analysis. \n\nThe malicious payloads were delivered to an Iraq-based telecom through a highly targeted phishing email sent from within the targeted organization. The text of the email is a discussion amongst engineers regarding the technical specifics of managing the network. Based on the content and context of the email, it is not likely that this lure was crafted externally, indicating the compromise of engineer endpoints, mail servers, or both.\n\n```text\nDears,\n\nWe would appreciate it if you would check the following alarms on Core Network many (ASSOCIATION) have been flapped.\n\nProblem Text\n*** ALARM 620 A1/APT \"ARHLRF2SPX1.9IP\"U 250213 1406\nM3UA DESTINATION INACCESSIBLE\nDEST            SPID\n2-1936          ARSMSC1\nEND\n\nProblem Text\n*** ALARM 974 A1/APT \"ARHLRF1SPX1.9IP\"U 250213 1406\nM3UA DESTINATION INACCESSIBLE\nDEST            SPID\n2-1936          ARSMSC1\nEND\n…\n```\n\nThis email contains a call to action to address network alarms and a zipped attachment named `details.zip`. Within that zip file is a text file containing the logs addressed in the email and a Windows executable (`JPerf-3.0.0.exe`), which starts the execution chain, resulting in the delivery of the SHELBYC2 implant, providing remote access to the environment.\n\nWhile not observed in the REF8685 intrusion, it should be noted that VirusTotal shows that `JPerf-3.0.0.exe` ([feb5d225fa38efe2a627ddfbe9654bf59c171ac0742cd565b7a5f22b45a4cc3a](https://www.virustotal.com/gui/file/feb5d225fa38efe2a627ddfbe9654bf59c171ac0742cd565b7a5f22b45a4cc3a/relations)) was included in a separate compressed archive (`JPerf-3.0.0.zip`)and also submitted from Iraq. It is unclear if this is from the same victim or another in this campaign. A file similarity search also identifies a second implant named `Setup.exe` with an additional compressed archive ([5c384109d3e578a0107e8518bcb91cd63f6926f0c0d0e01525d34a734445685c](https://www.virustotal.com/gui/file/5c384109d3e578a0107e8518bcb91cd63f6926f0c0d0e01525d34a734445685c/detection)).\n\nAnalysis of these files (`JPerf-3.0.0.exe` and `Setup.exe`) revealed the use of GitHub for `C2` and AES key retrieval mechanisms (more on this in the malware analysis sections). The Github accounts (`arthurshellby` and `johnshelllby`) used for the REF8685 malware were malicious and have been shut down by Github.\n\nOf note, Arthur and John Shelby are characters in the British crime drama television series [Peaky Blinders](https://en.wikipedia.org/wiki/Peaky_Blinders_(TV_series)). The show was in production from 2013 to 2022.\n\nThe domain `arthurshelby[.]click` pointed to` 2.56.126[.]151`, a Stark Industries (AS44477) hosted server. This VPS hosting provider [has been used for proxy services](https://krebsonsecurity.com/2024/05/stark-industries-solutions-an-iron-hammer-in-the-cloud/) in other large-scale cyber attacks. This server has overlapping resolutions for:\n\n* `arthurshelby[.]click`\n* `[REDACTED]telecom[.]digital`\n* `speed-test[.]click`\n* `[REDACTED]airport[.]cloud`\n* `[REDACTED]airport[.]pro`\n\n![DNS resolution timeline for 2.56.126[.]151](/assets/images/the-shelby-strategy/image19.png \"DNS resolution timeline for .56.126[.]151\")\n\nThe compressed archive and C2 domains for one of the SHELBYLOADER samples are named after [REDACTED] Telecom, an Iraq-based telecommunications company. [REDACTED]’s coverage map focuses on the Iraqi-Kurdistan region in the North and East of the country.\n\n“Sharjaairport” indicates a probable third targeted victim. [REDACTED] International Airport ([REDACTED]) is an international airport specializing in air freight in the United Arab Emirates. It is 14.5 miles (23.3km) from Dubai International Airport (DXB).\n\n![DNS resolution timeline for [REDACTED]airport[.]cloud](/assets/images/the-shelby-strategy/image29.png \"DNS resolution timeline for [REDACTED]airport[.]cloud\")\n\n`[REDACTED]airport[.]cloud` resolved to a new server, `2.56.126[.]157`, for one day on Jan 21, 2025. Afterward, it pointed to Google DNS, the legitimate [REDACTED] Airport server, and finally, a Namecheap parking address. The `2.56.126[.]157` server, Stark Industries (AS44477) hosted, also hosts `[REDACTED]-connect[.]online`, [REDACTED] is the airport code for the [REDACTED] International Airport. \n\nThe domain` [REDACTED]airport[.]cloud` has a subdomain `portal.[REDACTED]airport[.]cloud` that briefly pointed to `2.56.126[.]188` from Jan 23-25, 2025. It then directed traffic to `172.86.68[.]55` until the time of writing.\n\nBanner hash pivots reveal an additional server-domain combo: `195.16.74[.]138`, `[REDACTED]-meeting[.]online`.\n\nThe `172.86.68[.].55` server also hosts `mail.[REDACTED]tell[.]com`, an apparent phishing domain targeting our original victim.\n\n![DNS resolution timeline for 172.86.68[.].55](/assets/images/the-shelby-strategy/image11.png \"DNS resolution timeline for 172.86.68[.].55\")\n\nA web login page was hosted at `hxxps://portal.[REDACTED]airport[.]cloud/Login` ([VirusTotal](https://www.virustotal.com/gui/file/02dc15a3bd3a911f6ac9c9e8633c7986f06372a514fc5bf75373b9901c6a9628/relations)).  \n\nWe assess that the attackers weaponized these two sub-domains to phish for cloud login credentials. Once these credentials were secured (in the case of [REDACTED] Telecom), the attackers accessed the victim's cloud email and crafted a highly targeted phish by weaponizing ongoing internal email threads.\n\nThis weaponized internal email was used to re-phish their way onto victim endpoints.\n\nAll domains associated with this campaign have utilized ZeroSSL certifications and have been on Stark Industries infrastructure.\n\n### The Diamond Model of intrusion analysis\n\nElastic Security Labs utilizes the [Diamond Model](https://www.activeresponse.org/wp-content/uploads/2013/07/diamond.pdf) to describe high-level relationships between the adversaries, capabilities, infrastructure, and victims of intrusions. While the Diamond Model is most commonly used with single intrusions, and leveraging Activity Threading (section 8) as a way to create relationships between incidents, an adversary-centered (section 7.1.4) approach allows for a, although cluttered, single diamond.\n\n![REF8685 represented in the Diamond Model](/assets/images/the-shelby-strategy/image10.png \"REF8685 represented in the Diamond Model\")\n\n## REF8685 and MITRE ATT\u0026CK\n\nElastic uses the [MITRE ATT\u0026CK](https://attack.mitre.org/) framework to document common tactics, techniques, and procedures that advanced persistent threats use against enterprise networks.\n\n### Tactics\n\nTactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.\n\n* [Command and Control](https://attack.mitre.org/tactics/TA0011/)\n* [Initial Access](https://attack.mitre.org/tactics/TA0001/)\n* [Defense Evasion](https://attack.mitre.org/tactics/TA0005/)\n* [Discovery](https://attack.mitre.org/tactics/TA0007/)\n* [Execution](https://attack.mitre.org/tactics/TA0002/)\n* [Exfiltration](https://attack.mitre.org/tactics/TA0010/)\n\n### Techniques\n\nTechniques represent how an adversary achieves a tactical goal by performing an action.\n\n* [Reflective Code Loading](https://attack.mitre.org/techniques/T1620/)\n* [Phishing](https://attack.mitre.org/techniques/T1566/)\n* [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027/)\n* [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059/)\n* [Exfiltration Over C2 Channel](https://attack.mitre.org/techniques/T1041/)\n\n## YARA rule\n\nElastic Security has created YARA rules to identify this activity. Below are YARA rules to identify the SHELBYC2 and SHELBYLOADER malware:\n\n```\nrule Windows_Trojan_ShelbyLoader {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2025-03-11\"\n        last_modified = \"2025-03-25\"\n        os = \"Windows\"\n        arch = \"x86\"\n        category_type = \"Trojan\"\n        family = \"ShelbyLoader\"\n        threat_name = \"Windows.Trojan.ShelbyLoader\"\n        license = \"Elastic License v2\"\n\n    strings:\n        $a0 = \"[WARN] Unusual parent process detected: \"\n        $a1 = \"[ERROR] Exception in CheckParentProcess:\" fullword\n        $a2 = \"[INFO] Sandbox Not Detected by CheckParentProcess\" fullword\n        $b0 = { 22 63 6F 6E 74 65 6E 74 22 3A 20 22 2E 2B 3F 22 }\n        $b1 = { 22 73 68 61 22 3A 20 22 2E 2B 3F 22 }\n        $b2 = \"Persist ID: \" fullword\n        $b3 = \"https://api.github.com/repos/\" fullword\n    condition:\n        all of ($a*) or all of ($b*)\n}\n\nrule Windows_Trojan_ShelbyC2 {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2025-03-11\"\n        last_modified = \"2025-03-25\"\n        os = \"Windows\"\n        arch = \"x86\"\n        category_type = \"Trojan\"\n        family = \"ShelbyC2\"\n        threat_name = \"Windows.Trojan.ShelbyC2\"\n        license = \"Elastic License v2\"\n\n    strings:\n        $a0 = \"File Uploaded Successfully\" fullword\n        $a1 = \"/dlextract\" fullword\n        $a2 = \"/evoke\" fullword\n        $a4 = { 22 73 68 61 22 3A 20 22 2E 2B 3F 22 }\n        $a5 = { 22 2C 22 73 68 61 22 3A 22 }\n    condition:\n        all of them\n}\n```\n\n\n## Observations\n\nAll observables are also available for [download](https://github.com/elastic/labs-releases/tree/main/indicators/shelby-strategy) in both ECS and STIX format in a combined zip bundle.\n\nThe following observables were discussed in this research.\n\n| Observable                                                       | Type        | Name            | Reference                |\n|------------------------------------------------------------------|-------------|-----------------|--------------------------|\n| `0e25efeb4e3304815f9e51c1d9bd3a2e2a23ece3a32f0b47f829536f71ead17a` | SHA-256     | `details.zip`     | Lure zip file            |\n| `feb5d225fa38efe2a627ddfbe9654bf59c171ac0742cd565b7a5f22b45a4cc3a` | SHA-256     | `JPerf-3.0.0.exe` |                          |\n| `0354862d83a61c8e69adc3e65f6e5c921523eff829ef1b169e4f0f143b04091f` | SHA-256     | `HTTPService.dll` | SHELBYLOADER             |\n| `fb8d4c24bcfd853edb15c5c4096723b239f03255f17cec42f2d881f5f31b6025` | SHA-256     | `HTTPApi.dll`     | SHELBYC2                 |\n| `472e685e7994f51bbb259be9c61f01b8b8f35d20030f03215ce205993dbad7f5` | SHA-256     | `JPerf-3.0.0.zip` | Lure zip file            |\n| `5c384109d3e578a0107e8518bcb91cd63f6926f0c0d0e01525d34a734445685c` | SHA-256     | `Setup.exe`       |                          |\n| `e51c6f0fbc5a7e0b03a0d6e1e1d26ab566d606b551c785bf882e9a02f04c862b` | SHA-256     |                 | Lure zip file            |\n| `github[.]com/johnshelllby`                                          | URL         |                 | GitHub Account name - C2 |\n| `github[.]com/arturshellby`                                         | URL         |                 | GitHub Account name - C2 |\n| `arthurshelby[.]click`                                             | domain-name |                 | DNS domain               |\n| `speed-test[.]click`                                               | domain-name |                 |                          |\n| `2.56.126[.]151`                                                   | ipv4        |                 |                          |\n| `2.56.126[.]157`                                                   | ipv4        |                 |                          |\n| `2.56.126[.]188`                                                   | ipv4        |                 |                          |\n| `172.86.68[.]55`                                                   | ipv4        |                 |                          |\n| `195.16.74[.]138`                                                  | ipv4        |                 |                          |","code":"var Component=(()=\u003e{var h=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=\u003e{for(var n in e)a(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,o)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!f.call(t,r)\u0026\u0026r!==n\u0026\u0026a(t,r,{get:()=\u003ee[r],enumerable:!(o=m(e,r))||o.enumerable});return t};var b=(t,e,n)=\u003e(n=t!=null?h(p(t)):{},s(e||!t||!t.__esModule?a(n,\"default\",{value:t,enumerable:!0}):n,t)),w=t=\u003es(a({},\"__esModule\",{value:!0}),t);var c=g((k,d)=\u003e{d.exports=_jsx_runtime});var E={};y(E,{default:()=\u003eA,frontmatter:()=\u003ev});var i=b(c()),v={title:\"The Shelby Strategy\",slug:\"the-shelby-strategy\",date:\"2025-03-26\",description:\"An analysis of REF8685's abuse of GitHub for C2 to evade defenses.\",author:[{slug:\"salim-bitam\"},{slug:\"seth-goodwin\"}],image:\"shelby.png\",category:[{slug:\"malware-analysis\"}],tags:[\"ref8685\",\"shelbyc2\",\"shelbyloader\"]};function l(t){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",p:\"p\",code:\"code\",a:\"a\",img:\"img\",h3:\"h3\",h4:\"h4\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",strong:\"strong\",pre:\"pre\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:\"key-takeaways\",children:\"Key takeaways\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"The SHELBY malware family abuses GitHub for command-and-control, stealing data and retrieving commands\"}),`\n`,(0,i.jsx)(e.li,{children:\"The attacker\\u2019s C2 design has a critical flaw: anyone with the PAT token can control infected machines, exposing a significant security vulnerability\"}),`\n`,(0,i.jsx)(e.li,{children:\"Unused code and dynamic payload loading suggest the malware is under active development, indicating future updates may address any issues with contemporary versions\"}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"summary\",children:\"Summary\"}),`\n`,(0,i.jsx)(e.p,{children:\"As part of our ongoing research into emerging threats, we analyzed a potential phishing email sent from an email address belonging to an Iraqi telecommunications company and sent to other employees of that same company.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The phishing email relies on the victim opening the attached \",(0,i.jsx)(e.code,{children:\"Details.zip\"}),\" file and executing the contained binary, \",(0,i.jsx)(e.code,{children:\"JPerf-3.0.0.exe\"}),\". This binary utilizes the script-driven installation system, \",(0,i.jsx)(e.a,{href:\"https://jrsoftware.org/isinfo.php\",rel:\"nofollow\",children:\"Inno setup\"}),\", that contains the malicious application:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"%AppData%\\\\Local\\\\Microsoft\\\\HTTPApi\"}),\":\",`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"HTTPApi.dll\"}),\" (SHELBYC2)\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:\"HTTPService.dll\"}),\" (SHELBYLOADER)\"]}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"Microsoft.Http.Api.exe\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"Microsoft.Http.Api.exe.config\"})}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The installed \",(0,i.jsx)(e.code,{children:\"Microsoft.Http.Api.exe\"}),\" is a benign .NET executable. Its primary purpose is to side-load the malicious \",(0,i.jsx)(e.code,{children:\"HTTPService.dll\"}),\". Once loaded, \",(0,i.jsx)(e.code,{children:\"HTTPService.dll\"}),\" acts as the loader, initiating communication with GitHub for its command-and-control (C2).\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The loader retrieves a specific value from the C2, which is used to decrypt the backdoor payload, \",(0,i.jsx)(e.code,{children:\"HTTPApi.dll\"}),\". After decryption, the backdoor is loaded into memory as a managed assembly using reflection, allowing it to execute without writing to disk and evading traditional detection mechanisms.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image27.png\",alt:\"SHELBYLOADER \u0026 SHELBYC2 Execution Chain\",title:\"SHELBYLOADER \u0026 SHELBYC2 Execution Chain\",width:\"1999\",height:\"1130\"})}),`\n`,(0,i.jsx)(e.p,{children:\"As of the time of writing, both the backdoor and the loader have a low detection rate on VirusTotal.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image2.png\",alt:\"VirusTotal hits for SHELBYC2\",title:\"VirusTotal hits for SHELBYC2\",width:\"1982\",height:\"319\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image24.png\",alt:\"VirusTotal hits for SHELBYLOADER\",title:\"VirusTotal hits for SHELBYLOADER\",width:\"1951\",height:\"302\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"shelbyloader-code-analysis\",children:\"SHELBYLOADER code analysis\"}),`\n`,(0,i.jsx)(e.h3,{id:\"obfuscation\",children:\"Obfuscation\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Both the loader and backdoor are obfuscated with the open-source tool \",(0,i.jsx)(e.a,{href:\"https://github.com/obfuscar/obfuscar\",rel:\"nofollow\",children:\"Obfuscar\"}),\", which employs string encryption as one of its features. To bypass this obfuscation, we can leverage \",(0,i.jsx)(e.a,{href:\"https://github.com/de4dot/de4dot\",rel:\"nofollow\",children:\"de4dot\"}),\" with custom parameters. Obfuscar replaces strings with calls to a string decryptor function, but by providing the token of this function to de4dot, we can effectively deobfuscate the code. Using the parameters \",(0,i.jsx)(e.code,{children:\"--strtyp\"}),\" ( the type of string decrypter, in our case \",(0,i.jsx)(e.code,{children:\"delegate\"}),\")  and \",(0,i.jsx)(e.code,{children:\"--strtok\"}),\" ( the token of the string decryption method), we can replace these function calls with their corresponding plaintext values, revealing the original strings in the code.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image6.png\",alt:\"Deobfuscation using de4dot\",title:\"Deobfuscation using de4dot\",width:\"1782\",height:\"648\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"sandbox-detection\",children:\"Sandbox detection\"}),`\n`,(0,i.jsx)(e.p,{children:\"SHELBYLOADER utilizes sandbox detection techniques to identify virtualized or monitored environments. Once executed, it sends the results back to C2. These results are packaged as log files, detailing whether each detection method successfully identified a sandbox environment, for example:\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image17.png\",alt:\"Sandbox detection example\",title:\"Sandbox detection example\",width:\"1389\",height:\"286\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"technique-1-wmi-query-for-system-information\",children:\"Technique 1: WMI Query for System Information\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The malware executes a WMI query (\",(0,i.jsx)(e.code,{children:\"Select * from Win32_ComputerSystem\"}),') to retrieve system details. It then checks the Manufacturer and Model fields for indicators of a virtual machine, such as \"VMware\" or \"VirtualBox.\"']}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image8.png\",alt:\"Sandbox detection based on system information\",title:\"Sandbox detection based on system information\",width:\"1999\",height:\"213\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"technique-2-process-enumeration\",children:\"Technique 2: Process Enumeration\"}),`\n`,(0,i.jsx)(e.p,{children:\"The malware scans the running processes for known virtualization-related services, including:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"vmsrvc\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"vmtools\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"xenservice\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"vboxservice\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"vboxtray\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"The presence of these processes tells the malware that it may be running in a virtualized environment.\"}),`\n`,(0,i.jsx)(e.h4,{id:\"technique-3-file-system-checks\",children:\"Technique 3: File System Checks\"}),`\n`,(0,i.jsx)(e.p,{children:\"The malware searches for the existence of specific driver files commonly associated with virtualization software, such as:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"C:\\\\Windows\\\\System32\\\\drivers\\\\VBoxMouse.sys\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"C:\\\\Windows\\\\System32\\\\drivers\\\\VBoxGuest.sys\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"C:\\\\Windows\\\\System32\\\\drivers\\\\vmhgfs.sys\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"C:\\\\Windows\\\\System32\\\\drivers\\\\vmci.sys\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h4,{id:\"technique-4-disk-size-analysis\",children:\"Technique 4: Disk Size Analysis\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The malware checks the size of the \",(0,i.jsx)(e.code,{children:\"C:\"}),\" volume. If the size is less than 50 GB, it may infer that the environment is part of a sandbox, as many virtual machines are configured with smaller disk sizes for testing purposes.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image23.png\",alt:\"Sandbox detection based on disk size\",title:\"Sandbox detection based on disk size\",width:\"1806\",height:\"268\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"technique-5-parent-process-verification\",children:\"Technique 5: Parent Process Verification\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The malware examines its parent process. If the parent process is not \",(0,i.jsx)(e.code,{children:\"explorer.exe\"}),\", it may indicate execution within an automated analysis environment rather than a typical user-driven scenario.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image15.png\",alt:\"Sandbox detection based on process tree\",title:\"Sandbox detection based on process tree\",width:\"1332\",height:\"244\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"technique-6-sleep-time-deviation-detection\",children:\"Technique 6: Sleep Time Deviation Detection\"}),`\n`,(0,i.jsx)(e.p,{children:\"The malware employs timing checks to detect if its sleep or delay functions are being accelerated, a common technique used by sandboxes to speed up analysis. Significant deviations in expected sleep times can reveal a sandboxed environment.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image5.png\",alt:\"Sandbox detection based on sleep time deviation\",title:\"Sandbox detection based on sleep time deviation\",width:\"1460\",height:\"283\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"technique-7-wmi-query-for-video-controller\",children:\"Technique 7: WMI Query for Video Controller\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The malware runs a WMI query (SELECT * FROM Win32_VideoController) to retrieve information about the system's video controller. It then compares the name of the video controller against known values associated with virtual machines: \",(0,i.jsx)(e.code,{children:\"virtual\"}),\" or \",(0,i.jsx)(e.code,{children:\"vmware\"}),\" or \",(0,i.jsx)(e.code,{children:\"vbox\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image21.png\",alt:\"Sandbox detection based on the name of the video controller\",title:\"Sandbox detection based on the name of the video controller\",width:\"1368\",height:\"170\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"core-functionality\",children:\"Core Functionality\"}),`\n`,(0,i.jsx)(e.p,{children:\"The malware's loader code begins by initializing several variables within its main class constructor. These variables include:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"A GitHub account name\"}),`\n`,(0,i.jsx)(e.li,{children:\"A private repository name\"}),`\n`,(0,i.jsx)(e.li,{children:\"A Personal Access Token (PAT) for authenticating and accessing the repository\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"Additionally, the malware sets up two timers, which are used to trigger specific actions at predefined intervals.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image31.png\",alt:\"SHELBYLOADER configuration\",title:\"SHELBYLOADER configuration\",width:\"1259\",height:\"332\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"One of the timers is configured to trigger a specific method 125 seconds after execution. When invoked, this method establishes persistence on the infected system by adding a new entry to the Windows Registry key \",(0,i.jsx)(e.code,{children:\"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"}),\". Once the method is triggered and the persistence mechanism is successfully executed, the timer is stopped from further triggering.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image22.png\",alt:\"Setup persistence\",title:\"Setup persistence\",width:\"1999\",height:\"157\"})}),`\n`,(0,i.jsx)(e.p,{children:\"This method uses an integer variable to indicate the outcome of its operation. The following table describes each possible value and its meaning:\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"ID\"}),(0,i.jsx)(e.th,{children:\"Description\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"1\"})}),(0,i.jsx)(e.td,{children:\"Persistence set successfully\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"2\"})}),(0,i.jsx)(e.td,{children:\"Persistence already set\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"8\"})}),(0,i.jsx)(e.td,{children:\"Unable to add an entry in the key\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"9\"})}),(0,i.jsx)(e.td,{children:\"Binary not found on disk\"})]})]})]})}),`\n`,(0,i.jsx)(e.p,{children:\"This integer value is reported back to C2 during its first registration to the C2, allowing the attackers to monitor the success or failure of the persistence mechanism on the infected system.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The second timer is configured to trigger a method responsible for loading the backdoor, which executes 65 seconds after the malware starts. First, the malware generates an MD5 hash based on a combination of system-specific information. The data used to create the hash is formatted as follows, with each component separated by a slash( \",(0,i.jsx)(e.code,{children:\"/\"}),\" ):\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"The number of processors available on the system.\"}),`\n`,(0,i.jsx)(e.li,{children:\"The name of the machine (hostname).\"}),`\n`,(0,i.jsx)(e.li,{children:\"The domain name associated with the user account.\"}),`\n`,(0,i.jsx)(e.li,{children:\"The username of the currently logged-in user.\"}),`\n`,(0,i.jsx)(e.li,{children:\"The total number of logical drives present on the system.\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image12.png\",alt:\"Generate unique identifier\",title:\"Generate unique identifier\",width:\"1138\",height:\"387\"})}),`\n`,(0,i.jsx)(e.p,{children:\"A subset of this hash is then extracted and used as a unique identifier for the infected machine. This identifier serves as a way for the attackers to track and manage compromised systems within their infrastructure.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"After generating the unique identifier, the malware pushes a new commit to the myToken repository using an HTTPS request. The commit includes a directory named after the unique identifier, which contains a file named \",(0,i.jsx)(e.code,{children:\"Info.txt\"}),\". This file stores the following information about the infected system:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"The domain name associated with the user account.\"}),`\n`,(0,i.jsx)(e.li,{children:\"The username of the currently logged-in user.\"}),`\n`,(0,i.jsx)(e.li,{children:\"The log of sandbox detection results detailing which techniques succeeded or failed.\"}),`\n`,(0,i.jsx)(e.li,{children:\"The persistence flag (as described in the table above) indicates the outcome of the persistence mechanism.\"}),`\n`,(0,i.jsx)(e.li,{children:\"The current date and time of the beaconing event\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image28.png\",alt:\"Example content of Info.txt\",title:\"Example content of Info.txt\",width:\"1509\",height:\"468\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The malware first attempts to push a commit to the repository without using a proxy. If this initial attempt fails, it falls back to using the system-configured proxy for its communication.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"After the first beaconing and successful registration of the victim, the malware attempts to access the same GitHub repository directory it created earlier and download a file named \",(0,i.jsx)(e.code,{children:\"License.txt\"}),\" (we did not observe any jitter in the checking interval, but the server could handle this). If present, this file contains a 48-byte value, which is used to generate an AES decryption key. This file is uploaded by the attacker\\u2019s backend only after validating that the malware is not running in a sandbox environment. This ensures only validated infections receive the key and escalate the execution chain to the backdoor.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image18.png\",alt:\"Function calls for registration and retrieval of License content\",title:\"Function calls for registration and retrieval of License content\",width:\"1999\",height:\"266\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The malware generates an AES key and initialization vector (IV) from the contents of \",(0,i.jsx)(e.code,{children:\"License.txt\"}),\". It first hashes the 48-byte value using SHA256, then uses the resulting hash as the key and the first 16 bytes as the IV.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image25.png\",alt:\"Generating decryption AES key and IV\",title:\"Generating decryption AES key and IV\",width:\"1309\",height:\"211\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"It proceeds to decrypt the file \",(0,i.jsx)(e.code,{children:\"HTTPApi.dll\"}),\", which contains the backdoor payload. After decryption, the malware uses the \",(0,i.jsx)(e.code,{children:\"Assembly.Load\"}),\" method to reflectively load the backdoor into memory. This technique lets the malware execute the decrypted backdoor directly without writing it to disk.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image4.png\",alt:\"Decrypts and loads SHELBYC2\",title:\"Decrypts and loads SHELBYC2\",width:\"1790\",height:\"404\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"dns-based-keying-mechanism\",children:\"DNS-Based Keying Mechanism\"}),`\n`,(0,i.jsx)(e.p,{children:\"Another variant of SHELBYLOADER uses a different approach for registration and retrieving the byte sequence used to generate the AES key and IV.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"First, the malware executes the same anti-sandboxing methods, creating a string of \",(0,i.jsx)(e.code,{children:\"1\"}),\" or \",(0,i.jsx)(e.code,{children:\"0\"}),\" depending on whether a sandbox is detected for each technique.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"For its C2 registration, the malware builds a subdomain under \",(0,i.jsx)(e.code,{children:\"arthurshelby.click\"}),\" with three parts: the first subdomain is a static string (\",(0,i.jsx)(e.code,{children:\"s\"}),\"), the second subdomain is the unique identifier encoded in Base32, and the third subdomain is a concatenated string in the format \",(0,i.jsx)(e.code,{children:\"DomainName\\\\HostName \u003e\u003e Anti-Sandboxing Results \u003e\u003e Persistence Flag\"}),\" encoded in base32.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"For example, a complete domain might look like \",(0,i.jsx)(e.code,{children:\"s.grldiyrsmvsggojzmi4wmyi.inevyrcfknfvit2qfvcvinjriffe6ib6hyqdambqgaydambahy7cama.arthurshelby.click\"})]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image13.png\",alt:\"CyberChef recipe for decoding generated subdomains\",title:\"CyberChef recipe for decoding generated subdomains\",width:\"1945\",height:\"519\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"After that, the malware executes multiple DNS queries to subdomains of \",(0,i.jsx)(e.code,{children:\"arthurshelby.click\"}),\". The IP addresses returned from these queries are concatenated into a byte sequence, which is then used to generate the AES key for decrypting the backdoor, following the same process described earlier.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The subdomains follow this format:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"The first subdomain is \",(0,i.jsx)(e.code,{children:\"l\u003cindex\u003e\"}),\", where the index corresponds to the order of the DNS calls (e.g., \",(0,i.jsx)(e.code,{children:\"l1\"}),\", \",(0,i.jsx)(e.code,{children:\"l2\"}),\", etc.), ensuring the byte sequence is assembled correctly.\"]}),`\n`,(0,i.jsx)(e.li,{children:\"The second subdomain is the unique identifier encoded in Base32.\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image16.png\",alt:\"Subdomains contacted to retrieve the bytes used to generate the AES key\",title:\"Subdomains contacted to retrieve the bytes used to generate the AES key\",width:\"570\",height:\"422\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"shelbyc2-code-analysis\",children:\"SHELBYC2 code analysis\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The backdoor begins by regenerating the same unique identifier created by the loader. It does this by computing an MD5 hash of the exact system-specific string used earlier. The backdoor then creates a \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/sync/using-mutex-objects\",rel:\"nofollow\",children:\"Mutex\"}),\" to ensure that only one instance of the malware runs on the infected machine. The Mutex is named by prepending the string \",(0,i.jsx)(e.code,{children:\"Global\\\\GHS\"}),\" to the unique identifier.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image9.png\",alt:\"Mutex initialization\",title:\"Mutex initialization\",width:\"769\",height:\"161\"})}),`\n`,(0,i.jsx)(e.p,{children:\"After 65 seconds, the backdoor executes a method that collects the following system information:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"current user identity\"}),`\n`,(0,i.jsx)(e.li,{children:\"operating system version\"}),`\n`,(0,i.jsx)(e.li,{children:\"the process ID of the malware\"}),`\n`,(0,i.jsx)(e.li,{children:\"machine name\"}),`\n`,(0,i.jsx)(e.li,{children:\"current working directory\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"Interestingly, this collected information is neither used locally nor exfiltrated to the C2 server. This suggests that the code might be dead code left behind during development or that the malware is still under active development, with potential plans to utilize this data in future versions.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image1.png\",alt:\"Dead code\",title:\"Dead code\",width:\"893\",height:\"302\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The malware then uploads the current timestamp to a file named Vivante.txt in the myGit repository within its unique directory (named using the system's unique identifier). This timestamp serves as the last beaconing time, enabling the attackers to monitor the malware's activity and confirm that the infected system is still active. The word \",(0,i.jsx)(e.strong,{children:'\"Vivante\"'}),\" translates to \",(0,i.jsx)(e.strong,{children:'\"alive\"'}),\" in French, which reflects the file's role as a heartbeat indicator for the compromised machine.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Next, the malware attempts to download the file \",(0,i.jsx)(e.code,{children:\"Command.txt\"}),\", which contains a list of commands issued by the operator for execution on the infected system.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"If \",(0,i.jsx)(e.code,{children:\"Command.txt\"}),\" contains no commands, the malware checks for commands in another file named \",(0,i.jsx)(e.code,{children:\"Broadcast.txt\"}),\". Unlike \",(0,i.jsx)(e.code,{children:\"Command.txt\"}),\", this file is located outside the malware's directory and is used to broadcast commands to all infected systems simultaneously. This approach allows the attacker to simultaneously execute operations across multiple compromised machines, streamlining large-scale control.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"commands-handling-table\",children:\"Commands handling table:\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Commands in the \",(0,i.jsx)(e.code,{children:\"Command.txt\"}),\" file can either be handled commands or system commands executed with Powershell. The following is a description of every handled command.\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"download\",children:\"/download\"}),`\n`,(0,i.jsx)(e.p,{children:\"This command downloads a file from a GitHub repository to the infected machine. It requires two parameters:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"The name of the file stored in the GitHub repository.\"}),`\n`,(0,i.jsx)(e.li,{children:\"The path where the file will be saved on the infected machine.\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image20.png\",alt:\"Download command\",width:\"1842\",height:\"329\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"upload\",children:\"/upload\"}),`\n`,(0,i.jsx)(e.p,{children:\"This command uploads a file from the infected machine to the GitHub repository. It takes one parameter: the path of the file to be uploaded.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image32.png\",alt:\"Upload command\",width:\"1621\",height:\"536\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"dlextract\",children:\"/dlextract\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"This command downloads a zip file from the GitHub repository (similar to \",(0,i.jsx)(e.code,{children:\"/download\"}),\"), extracts its contents, and saves them to a specified directory on the machine.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image30.png\",alt:\"Zip extraction command\",width:\"1850\",height:\"321\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"evoke\",children:\"/evoke\"}),`\n`,(0,i.jsx)(e.p,{children:\"This command is used to load a .NET binary reflectively; it takes two parameters: the first parameter is the path of an AES encrypted .NET binary previously downloaded to the infected machine, the second parameter is a value used to derive AES and the IV, similar to how the loader loads the backdoor.\"}),`\n`,(0,i.jsx)(e.p,{children:\"This command reflectively loads a .NET binary similar to how the SHELBYLOADER loads the backdoor. It requires two parameters:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"The path to an AES-encrypted .NET binary previously downloaded to the infected machine.\"}),`\n`,(0,i.jsx)(e.li,{children:\"A value used to derive the AES key and IV.\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image3.png\",alt:\".NET invocation command\",width:\"1057\",height:\"241\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"system-commands\",children:\"System commands\"}),`\n`,(0,i.jsx)(e.p,{children:\"Any command not starting with one of the above is treated as a PowerShell command and executed accordingly.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image7.png\",alt:\"Powershell execution command\",width:\"1624\",height:\"519\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"communication\",children:\"Communication\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The malware does not use the \",(0,i.jsx)(e.a,{href:\"https://git-scm.com/\",rel:\"nofollow\",children:\"Git tool\"}),\" in the backend to send commits. Instead, it crafts HTTP requests to interact with GitHub. It sends a commit to the repository using a JSON object with the following structure:\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-json\",children:`{\n  \"message\": \"Commit message\",\n  \"content\": \"\u003cbase64 encoded content\u003e\",\n  \"sha\": \"\u003chash\u003e\"\n}\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"The malware sets specific HTTP headers for the request, including:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Accept:\"}),\" \",(0,i.jsx)(e.code,{children:\"application/vnd.github.v3+json\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Content-Type:\"}),\" \",(0,i.jsx)(e.code,{children:\"application/json\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Authorization:\"}),\" \",(0,i.jsx)(e.code,{children:\"token \u003cPAT_token\u003e\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"User-Agent:\"}),\" \",(0,i.jsx)(e.code,{children:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\"})]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image14.png\",alt:\"Initialization of the HTTP request\",width:\"1999\",height:\"397\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The request is sent to the GitHub API endpoint, constructed as follows:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`https://api.github.com/repos/\u003cowner\u003e/\u003crepo\u003e/contents/\u003cunique identifier\u003e/\u003cfile\u003e\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"The Personal Access Token (PAT) required to access the private repository is embedded within the binary. This allows the malware to authenticate and perform actions on the repository without using the standard Git toolchain.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image26.png\",alt:\"Wireshark capture of a C2 communication by SHELBYC2\",width:\"1951\",height:\"513\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The way the malware is set up means that anyone with the \",(0,i.jsx)(e.a,{href:\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens\",rel:\"nofollow\",children:\"PAT (Personal Access Token)\"}),\" can theoretically fetch commands sent by the attacker and access command outputs from any victim machine. This is because the PAT token is embedded in the binary and can be used by anyone who obtains it.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"shelby-family-conclusion\",children:\"SHELBY family conclusion\"}),`\n`,(0,i.jsx)(e.p,{children:\"While the C2 infrastructure is designed exotically, the attacker has overlooked the significant risks and implications of this approach.\"}),`\n`,(0,i.jsx)(e.p,{children:\"We believe using this malware, whether by an authorized red team or a malicious actor, would constitute malpractice. It enables any victim to weaponize the embedded PAT and take control of all active infections. Additionally, if a victim uploads samples to platforms like VirusTotal or MalwareBazaar, any third party could access infection-related data or take over the infections entirely.\"}),`\n`,(0,i.jsx)(e.h2,{id:\"ref8685-campaign-analysis\",children:\"REF8685 campaign analysis\"}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic Security Labs discovered REF8685 through routine collection and analysis of third-party data sources. While studying the REF8685 intrusion, we identified a loader and a C2 implant that we determined to be novel, leading us to release this detailed malware and intrusion analysis.\"}),`\n`,(0,i.jsx)(e.p,{children:\"The malicious payloads were delivered to an Iraq-based telecom through a highly targeted phishing email sent from within the targeted organization. The text of the email is a discussion amongst engineers regarding the technical specifics of managing the network. Based on the content and context of the email, it is not likely that this lure was crafted externally, indicating the compromise of engineer endpoints, mail servers, or both.\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-text\",children:`Dears,\n\nWe would appreciate it if you would check the following alarms on Core Network many (ASSOCIATION) have been flapped.\n\nProblem Text\n*** ALARM 620 A1/APT \"ARHLRF2SPX1.9IP\"U 250213 1406\nM3UA DESTINATION INACCESSIBLE\nDEST            SPID\n2-1936          ARSMSC1\nEND\n\nProblem Text\n*** ALARM 974 A1/APT \"ARHLRF1SPX1.9IP\"U 250213 1406\nM3UA DESTINATION INACCESSIBLE\nDEST            SPID\n2-1936          ARSMSC1\nEND\n\\u2026\n`})}),`\n`,(0,i.jsxs)(e.p,{children:[\"This email contains a call to action to address network alarms and a zipped attachment named \",(0,i.jsx)(e.code,{children:\"details.zip\"}),\". Within that zip file is a text file containing the logs addressed in the email and a Windows executable (\",(0,i.jsx)(e.code,{children:\"JPerf-3.0.0.exe\"}),\"), which starts the execution chain, resulting in the delivery of the SHELBYC2 implant, providing remote access to the environment.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"While not observed in the REF8685 intrusion, it should be noted that VirusTotal shows that \",(0,i.jsx)(e.code,{children:\"JPerf-3.0.0.exe\"}),\" (\",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/feb5d225fa38efe2a627ddfbe9654bf59c171ac0742cd565b7a5f22b45a4cc3a/relations\",rel:\"nofollow\",children:\"feb5d225fa38efe2a627ddfbe9654bf59c171ac0742cd565b7a5f22b45a4cc3a\"}),\") was included in a separate compressed archive (\",(0,i.jsx)(e.code,{children:\"JPerf-3.0.0.zip\"}),\")and also submitted from Iraq. It is unclear if this is from the same victim or another in this campaign. A file similarity search also identifies a second implant named \",(0,i.jsx)(e.code,{children:\"Setup.exe\"}),\" with an additional compressed archive (\",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/5c384109d3e578a0107e8518bcb91cd63f6926f0c0d0e01525d34a734445685c/detection\",rel:\"nofollow\",children:\"5c384109d3e578a0107e8518bcb91cd63f6926f0c0d0e01525d34a734445685c\"}),\").\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Analysis of these files (\",(0,i.jsx)(e.code,{children:\"JPerf-3.0.0.exe\"}),\" and \",(0,i.jsx)(e.code,{children:\"Setup.exe\"}),\") revealed the use of GitHub for \",(0,i.jsx)(e.code,{children:\"C2\"}),\" and AES key retrieval mechanisms (more on this in the malware analysis sections). The Github accounts (\",(0,i.jsx)(e.code,{children:\"arthurshellby\"}),\" and \",(0,i.jsx)(e.code,{children:\"johnshelllby\"}),\") used for the REF8685 malware were malicious and have been shut down by Github.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Of note, Arthur and John Shelby are characters in the British crime drama television series \",(0,i.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Peaky_Blinders_(TV_series)\",rel:\"nofollow\",children:\"Peaky Blinders\"}),\". The show was in production from 2013 to 2022.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The domain \",(0,i.jsx)(e.code,{children:\"arthurshelby[.]click\"}),\" pointed to\",(0,i.jsx)(e.code,{children:\" 2.56.126[.]151\"}),\", a Stark Industries (AS44477) hosted server. This VPS hosting provider \",(0,i.jsx)(e.a,{href:\"https://krebsonsecurity.com/2024/05/stark-industries-solutions-an-iron-hammer-in-the-cloud/\",rel:\"nofollow\",children:\"has been used for proxy services\"}),\" in other large-scale cyber attacks. This server has overlapping resolutions for:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"arthurshelby[.]click\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"[REDACTED]telecom[.]digital\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"speed-test[.]click\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"[REDACTED]airport[.]cloud\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"[REDACTED]airport[.]pro\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image19.png\",alt:\"DNS resolution timeline for 2.56.126[.]151\",title:\"DNS resolution timeline for .56.126[.]151\",width:\"1999\",height:\"978\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The compressed archive and C2 domains for one of the SHELBYLOADER samples are named after [REDACTED] Telecom, an Iraq-based telecommunications company. [REDACTED]\\u2019s coverage map focuses on the Iraqi-Kurdistan region in the North and East of the country.\"}),`\n`,(0,i.jsx)(e.p,{children:\"\\u201CSharjaairport\\u201D indicates a probable third targeted victim. [REDACTED] International Airport ([REDACTED]) is an international airport specializing in air freight in the United Arab Emirates. It is 14.5 miles (23.3km) from Dubai International Airport (DXB).\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image29.png\",alt:\"DNS resolution timeline for [REDACTED]airport[.]cloud\",title:\"DNS resolution timeline for [REDACTED]airport[.]cloud\",width:\"1999\",height:\"614\"})}),`\n`,(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:\"[REDACTED]airport[.]cloud\"}),\" resolved to a new server, \",(0,i.jsx)(e.code,{children:\"2.56.126[.]157\"}),\", for one day on Jan 21, 2025. Afterward, it pointed to Google DNS, the legitimate [REDACTED] Airport server, and finally, a Namecheap parking address. The \",(0,i.jsx)(e.code,{children:\"2.56.126[.]157\"}),\" server, Stark Industries (AS44477) hosted, also hosts \",(0,i.jsx)(e.code,{children:\"[REDACTED]-connect[.]online\"}),\", [REDACTED] is the airport code for the [REDACTED] International Airport.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The domain\",(0,i.jsx)(e.code,{children:\" [REDACTED]airport[.]cloud\"}),\" has a subdomain \",(0,i.jsx)(e.code,{children:\"portal.[REDACTED]airport[.]cloud\"}),\" that briefly pointed to \",(0,i.jsx)(e.code,{children:\"2.56.126[.]188\"}),\" from Jan 23-25, 2025. It then directed traffic to \",(0,i.jsx)(e.code,{children:\"172.86.68[.]55\"}),\" until the time of writing.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Banner hash pivots reveal an additional server-domain combo: \",(0,i.jsx)(e.code,{children:\"195.16.74[.]138\"}),\", \",(0,i.jsx)(e.code,{children:\"[REDACTED]-meeting[.]online\"}),\".\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The \",(0,i.jsx)(e.code,{children:\"172.86.68[.].55\"}),\" server also hosts \",(0,i.jsx)(e.code,{children:\"mail.[REDACTED]tell[.]com\"}),\", an apparent phishing domain targeting our original victim.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image11.png\",alt:\"DNS resolution timeline for 172.86.68[.].55\",title:\"DNS resolution timeline for 172.86.68[.].55\",width:\"1999\",height:\"278\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"A web login page was hosted at \",(0,i.jsx)(e.code,{children:\"hxxps://portal.[REDACTED]airport[.]cloud/Login\"}),\" (\",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/02dc15a3bd3a911f6ac9c9e8633c7986f06372a514fc5bf75373b9901c6a9628/relations\",rel:\"nofollow\",children:\"VirusTotal\"}),\").\"]}),`\n`,(0,i.jsx)(e.p,{children:\"We assess that the attackers weaponized these two sub-domains to phish for cloud login credentials. Once these credentials were secured (in the case of [REDACTED] Telecom), the attackers accessed the victim's cloud email and crafted a highly targeted phish by weaponizing ongoing internal email threads.\"}),`\n`,(0,i.jsx)(e.p,{children:\"This weaponized internal email was used to re-phish their way onto victim endpoints.\"}),`\n`,(0,i.jsx)(e.p,{children:\"All domains associated with this campaign have utilized ZeroSSL certifications and have been on Stark Industries infrastructure.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"the-diamond-model-of-intrusion-analysis\",children:\"The Diamond Model of intrusion analysis\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic Security Labs utilizes the \",(0,i.jsx)(e.a,{href:\"https://www.activeresponse.org/wp-content/uploads/2013/07/diamond.pdf\",rel:\"nofollow\",children:\"Diamond Model\"}),\" to describe high-level relationships between the adversaries, capabilities, infrastructure, and victims of intrusions. While the Diamond Model is most commonly used with single intrusions, and leveraging Activity Threading (section 8) as a way to create relationships between incidents, an adversary-centered (section 7.1.4) approach allows for a, although cluttered, single diamond.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/the-shelby-strategy/image10.png\",alt:\"REF8685 represented in the Diamond Model\",title:\"REF8685 represented in the Diamond Model\",width:\"960\",height:\"540\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"ref8685-and-mitre-attck\",children:\"REF8685 and MITRE ATT\u0026CK\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic uses the \",(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/\",rel:\"nofollow\",children:\"MITRE ATT\u0026CK\"}),\" framework to document common tactics, techniques, and procedures that advanced persistent threats use against enterprise networks.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"tactics\",children:\"Tactics\"}),`\n`,(0,i.jsx)(e.p,{children:\"Tactics represent the why of a technique or sub-technique. It is the adversary\\u2019s tactical goal: the reason for performing an action.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0011/\",rel:\"nofollow\",children:\"Command and Control\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0001/\",rel:\"nofollow\",children:\"Initial Access\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0005/\",rel:\"nofollow\",children:\"Defense Evasion\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0007/\",rel:\"nofollow\",children:\"Discovery\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0002/\",rel:\"nofollow\",children:\"Execution\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0010/\",rel:\"nofollow\",children:\"Exfiltration\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"techniques\",children:\"Techniques\"}),`\n`,(0,i.jsx)(e.p,{children:\"Techniques represent how an adversary achieves a tactical goal by performing an action.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1620/\",rel:\"nofollow\",children:\"Reflective Code Loading\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1566/\",rel:\"nofollow\",children:\"Phishing\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1027/\",rel:\"nofollow\",children:\"Obfuscated Files or Information\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1059/\",rel:\"nofollow\",children:\"Command and Scripting Interpreter\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1041/\",rel:\"nofollow\",children:\"Exfiltration Over C2 Channel\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"yara-rule\",children:\"YARA rule\"}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic Security has created YARA rules to identify this activity. Below are YARA rules to identify the SHELBYC2 and SHELBYLOADER malware:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`rule Windows_Trojan_ShelbyLoader {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2025-03-11\"\n        last_modified = \"2025-03-25\"\n        os = \"Windows\"\n        arch = \"x86\"\n        category_type = \"Trojan\"\n        family = \"ShelbyLoader\"\n        threat_name = \"Windows.Trojan.ShelbyLoader\"\n        license = \"Elastic License v2\"\n\n    strings:\n        $a0 = \"[WARN] Unusual parent process detected: \"\n        $a1 = \"[ERROR] Exception in CheckParentProcess:\" fullword\n        $a2 = \"[INFO] Sandbox Not Detected by CheckParentProcess\" fullword\n        $b0 = { 22 63 6F 6E 74 65 6E 74 22 3A 20 22 2E 2B 3F 22 }\n        $b1 = { 22 73 68 61 22 3A 20 22 2E 2B 3F 22 }\n        $b2 = \"Persist ID: \" fullword\n        $b3 = \"https://api.github.com/repos/\" fullword\n    condition:\n        all of ($a*) or all of ($b*)\n}\n\nrule Windows_Trojan_ShelbyC2 {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2025-03-11\"\n        last_modified = \"2025-03-25\"\n        os = \"Windows\"\n        arch = \"x86\"\n        category_type = \"Trojan\"\n        family = \"ShelbyC2\"\n        threat_name = \"Windows.Trojan.ShelbyC2\"\n        license = \"Elastic License v2\"\n\n    strings:\n        $a0 = \"File Uploaded Successfully\" fullword\n        $a1 = \"/dlextract\" fullword\n        $a2 = \"/evoke\" fullword\n        $a4 = { 22 73 68 61 22 3A 20 22 2E 2B 3F 22 }\n        $a5 = { 22 2C 22 73 68 61 22 3A 22 }\n    condition:\n        all of them\n}\n`})}),`\n`,(0,i.jsx)(e.h2,{id:\"observations\",children:\"Observations\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"All observables are also available for \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/indicators/shelby-strategy\",rel:\"nofollow\",children:\"download\"}),\" in both ECS and STIX format in a combined zip bundle.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The following observables were discussed in this research.\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Observable\"}),(0,i.jsx)(e.th,{children:\"Type\"}),(0,i.jsx)(e.th,{children:\"Name\"}),(0,i.jsx)(e.th,{children:\"Reference\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"0e25efeb4e3304815f9e51c1d9bd3a2e2a23ece3a32f0b47f829536f71ead17a\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"details.zip\"})}),(0,i.jsx)(e.td,{children:\"Lure zip file\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"feb5d225fa38efe2a627ddfbe9654bf59c171ac0742cd565b7a5f22b45a4cc3a\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"JPerf-3.0.0.exe\"})}),(0,i.jsx)(e.td,{})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"0354862d83a61c8e69adc3e65f6e5c921523eff829ef1b169e4f0f143b04091f\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"HTTPService.dll\"})}),(0,i.jsx)(e.td,{children:\"SHELBYLOADER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"fb8d4c24bcfd853edb15c5c4096723b239f03255f17cec42f2d881f5f31b6025\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"HTTPApi.dll\"})}),(0,i.jsx)(e.td,{children:\"SHELBYC2\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"472e685e7994f51bbb259be9c61f01b8b8f35d20030f03215ce205993dbad7f5\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"JPerf-3.0.0.zip\"})}),(0,i.jsx)(e.td,{children:\"Lure zip file\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"5c384109d3e578a0107e8518bcb91cd63f6926f0c0d0e01525d34a734445685c\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"Setup.exe\"})}),(0,i.jsx)(e.td,{})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"e51c6f0fbc5a7e0b03a0d6e1e1d26ab566d606b551c785bf882e9a02f04c862b\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"Lure zip file\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"github[.]com/johnshelllby\"})}),(0,i.jsx)(e.td,{children:\"URL\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"GitHub Account name - C2\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"github[.]com/arturshellby\"})}),(0,i.jsx)(e.td,{children:\"URL\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"GitHub Account name - C2\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"arthurshelby[.]click\"})}),(0,i.jsx)(e.td,{children:\"domain-name\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"DNS domain\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"speed-test[.]click\"})}),(0,i.jsx)(e.td,{children:\"domain-name\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"2.56.126[.]151\"})}),(0,i.jsx)(e.td,{children:\"ipv4\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"2.56.126[.]157\"})}),(0,i.jsx)(e.td,{children:\"ipv4\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"2.56.126[.]188\"})}),(0,i.jsx)(e.td,{children:\"ipv4\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"172.86.68[.]55\"})}),(0,i.jsx)(e.td,{children:\"ipv4\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"195.16.74[.]138\"})}),(0,i.jsx)(e.td,{children:\"ipv4\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{})]})]})]})})]})}function T(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(l,t)})):l(t)}var A=T;return w(E);})();\n;return Component;"},"_id":"articles/the-shelby-strategy.mdx","_raw":{"sourceFilePath":"articles/the-shelby-strategy.mdx","sourceFileName":"the-shelby-strategy.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/the-shelby-strategy"},"type":"Article","imageUrl":"/assets/images/the-shelby-strategy/shelby.png","readingTime":"28 min read","series":"","url":"/the-shelby-strategy","headings":[{"level":2,"title":"Key takeaways","href":"#key-takeaways"},{"level":2,"title":"Summary","href":"#summary"},{"level":2,"title":"SHELBYLOADER code analysis","href":"#shelbyloader-code-analysis"},{"level":3,"title":"Obfuscation","href":"#obfuscation"},{"level":3,"title":"Sandbox detection","href":"#sandbox-detection"},{"level":4,"title":"Technique 1: WMI Query for System Information","href":"#technique-1-wmi-query-for-system-information"},{"level":4,"title":"Technique 2: Process Enumeration","href":"#technique-2-process-enumeration"},{"level":4,"title":"Technique 3: File System Checks","href":"#technique-3-file-system-checks"},{"level":4,"title":"Technique 4: Disk Size Analysis","href":"#technique-4-disk-size-analysis"},{"level":4,"title":"Technique 5: Parent Process Verification","href":"#technique-5-parent-process-verification"},{"level":4,"title":"Technique 6: Sleep Time Deviation Detection","href":"#technique-6-sleep-time-deviation-detection"},{"level":4,"title":"Technique 7: WMI Query for Video Controller","href":"#technique-7-wmi-query-for-video-controller"},{"level":3,"title":"Core Functionality","href":"#core-functionality"},{"level":3,"title":"DNS-Based Keying Mechanism","href":"#dns-based-keying-mechanism"},{"level":2,"title":"SHELBYC2 code analysis","href":"#shelbyc2-code-analysis"},{"level":3,"title":"Commands handling table:","href":"#commands-handling-table"},{"level":4,"title":"/download","href":"#download"},{"level":4,"title":"/upload","href":"#upload"},{"level":4,"title":"/dlextract","href":"#dlextract"},{"level":4,"title":"/evoke","href":"#evoke"},{"level":4,"title":"System commands","href":"#system-commands"},{"level":3,"title":"Communication","href":"#communication"},{"level":3,"title":"SHELBY family conclusion","href":"#shelby-family-conclusion"},{"level":2,"title":"REF8685 campaign analysis","href":"#ref8685-campaign-analysis"},{"level":3,"title":"The Diamond Model of intrusion analysis","href":"#the-diamond-model-of-intrusion-analysis"},{"level":2,"title":"REF8685 and MITRE ATT\u0026CK","href":"#ref8685-and-mitre-attck"},{"level":3,"title":"Tactics","href":"#tactics"},{"level":3,"title":"Techniques","href":"#techniques"},{"level":2,"title":"YARA rule","href":"#yara-rule"},{"level":2,"title":"Observations","href":"#observations"}],"author":[{"title":"Salim Bitam","slug":"salim-bitam","description":"Elastic Security Labs Team Research Engineer II, Malware","body":{"raw":"","code":"var Component=(()=\u003e{var l=Object.create;var i=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var d=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},o=(t,e,n,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of f(e))!_.call(t,a)\u0026\u0026a!==n\u0026\u0026i(t,a,{get:()=\u003ee[a],enumerable:!(s=x(e,a))||s.enumerable});return t};var p=(t,e,n)=\u003e(n=t!=null?l(g(t)):{},o(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003eo(i({},\"__esModule\",{value:!0}),t);var m=d((D,c)=\u003e{c.exports=_jsx_runtime});var y={};j(y,{default:()=\u003ew,frontmatter:()=\u003eb});var r=p(m()),b={title:\"Salim Bitam\",description:\"Elastic Security Labs Team Research Engineer II, Malware\",slug:\"salim-bitam\"};function u(t){return(0,r.jsx)(r.Fragment,{})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(u,t)})):u(t)}var w=h;return M(y);})();\n;return Component;"},"_id":"authors/salim-bitam.mdx","_raw":{"sourceFilePath":"authors/salim-bitam.mdx","sourceFileName":"salim-bitam.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/salim-bitam"},"type":"Author","imageUrl":"","url":"/authors/salim-bitam"},{"title":"Seth Goodwin","slug":"seth-goodwin","description":"Elastic Security Labs Team Senior Research Engineer, Intelligence","body":{"raw":"","code":"var Component=(()=\u003e{var g=Object.create;var i=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var _=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),h=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},a=(t,e,n,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of x(e))!f.call(t,o)\u0026\u0026o!==n\u0026\u0026i(t,o,{get:()=\u003ee[o],enumerable:!(s=l(e,o))||s.enumerable});return t};var j=(t,e,n)=\u003e(n=t!=null?g(d(t)):{},a(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),p=t=\u003ea(i({},\"__esModule\",{value:!0}),t);var u=_((C,c)=\u003e{c.exports=_jsx_runtime});var b={};h(b,{default:()=\u003eS,frontmatter:()=\u003ew});var r=j(u()),w={title:\"Seth Goodwin\",description:\"Elastic Security Labs Team Senior Research Engineer, Intelligence\",slug:\"seth-goodwin\"};function m(t){return(0,r.jsx)(r.Fragment,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var S=M;return p(b);})();\n;return Component;"},"_id":"authors/seth-goodwin.mdx","_raw":{"sourceFilePath":"authors/seth-goodwin.mdx","sourceFileName":"seth-goodwin.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/seth-goodwin"},"type":"Author","imageUrl":"","url":"/authors/seth-goodwin"}],"category":[{"title":"Malware analysis","slug":"malware-analysis","body":{"raw":"","code":"var Component=(()=\u003e{var u=Object.create;var s=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),M=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},i=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!g.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(o=x(n,r))||o.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?u(_(t)):{},i(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),p=t=\u003ei(s({},\"__esModule\",{value:!0}),t);var l=j((X,c)=\u003e{c.exports=_jsx_runtime});var D={};M(D,{default:()=\u003eC,frontmatter:()=\u003ew});var a=d(l()),w={title:\"Malware analysis\",slug:\"malware-analysis\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function y(t={}){let{wrapper:n}=t.components||{};return n?(0,a.jsx)(n,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=y;return p(D);})();\n;return Component;"},"_id":"categories/malware-analysis.mdx","_raw":{"sourceFilePath":"categories/malware-analysis.mdx","sourceFileName":"malware-analysis.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/malware-analysis"},"type":"Category","url":"/categories/malware-analysis"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"the-shelby-strategy"},"buildId":"rZgt_jOWSqGgNGvs1XQtL","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>