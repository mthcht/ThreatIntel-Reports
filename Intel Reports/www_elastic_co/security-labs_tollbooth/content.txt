<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>TOLLBOOTH: What&#x27;s yours, IIS mine — Elastic Security Labs</title><meta name="description" content="REF3927 abuses publicly disclosed ASP.NET machine keys to compromise IIS servers and deploy TOLLBOOTH SEO cloaking modules globally."/><meta property="og:title" content="TOLLBOOTH: What&#x27;s yours, IIS mine — Elastic Security Labs"/><meta property="og:description" content="REF3927 abuses publicly disclosed ASP.NET machine keys to compromise IIS servers and deploy TOLLBOOTH SEO cloaking modules globally."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/tollbooth/tollbooth.png?553160360584d58716ab1c7829e720f7"/><meta property="og:image:alt" content="REF3927 abuses publicly disclosed ASP.NET machine keys to compromise IIS servers and deploy TOLLBOOTH SEO cloaking modules globally."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/tollbooth"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="TOLLBOOTH: What&#x27;s yours, IIS mine — Elastic Security Labs"/><meta name="twitter:description" content="REF3927 abuses publicly disclosed ASP.NET machine keys to compromise IIS servers and deploy TOLLBOOTH SEO cloaking modules globally."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/tollbooth/tollbooth.png?553160360584d58716ab1c7829e720f7"/><meta name="twitter:image:alt" content="REF3927 abuses publicly disclosed ASP.NET machine keys to compromise IIS servers and deploy TOLLBOOTH SEO cloaking modules globally."/><link rel="canonical" href="https://www.elastic.co/security-labs/tollbooth"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftollbooth%2Ftollbooth.png&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftollbooth%2Ftollbooth.png&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftollbooth%2Ftollbooth.png&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftollbooth%2Ftollbooth.png&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftollbooth%2Ftollbooth.png&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftollbooth%2Ftollbooth.png&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftollbooth%2Ftollbooth.png&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftollbooth%2Ftollbooth.png&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/8e9860b6e62d6359-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/e4af272ccee01ff0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/0ea4f4df910e6120-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/739c2d8941231bb4-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/f666e49a9abb8918.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/f666e49a9abb8918.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/fc1dcb1d74b71e18.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/fc1dcb1d74b71e18.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-7ddc1b0db09f2c64.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/352-a63885403f676dc6.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/848-7728ed7430cf686c.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-d945a9a8ae72f1b0.js" defer=""></script><script src="/security-labs/_next/static/chunks/765-64491ec3f6a94272.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-740a124ff706010d.js" defer=""></script><script src="/security-labs/_next/static/L3NzwTUZKAMTKPW1qO68g/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/L3NzwTUZKAMTKPW1qO68g/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_a475ec __variable_ead7f7 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><div class="UtilityHeader_utilityHeader__T_Eto"><div class="UtilityHeader_utilityHeader__container__exgwf"><nav class="UtilityHeader_utilityLinks__ogtQ6"><h2 class="UtilityHeader_utilityHeading__0DExG">Explore Elastic: </h2><ul><li><a href="https://www.elastic.co">elastic.co</a></li><li><a href="https://www.elastic.co/search-labs">Search Labs</a></li><li><a href="https://www.elastic.co/observability-labs">Observability Labs</a></li></ul></nav></div></div><nav class="fixed w-full z-40 top-[29px]" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kq6:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Research<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/product-updates"><span>Product Updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/enablement"><span>Enablement</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/tollbooth"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/tollbooth"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R5a6:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2025-10-22T00:00:00.000Z">22 October 2025</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/daniel-stepanic">Daniel Stepanic</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/jia-yu-chan">Jia Yu Chan</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/salim-bitam">Salim Bitam</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/seth-goodwin">Seth Goodwin</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/andrew-pease">Andrew Pease</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/braxton-williams">Braxton Williams</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>TOLLBOOTH: What's yours, IIS&nbsp;mine</span></h1><p class="text-zinc-200 text-base md:text-xl">REF3927 abuses publicly disclosed ASP.NET machine keys to compromise IIS servers and deploy TOLLBOOTH SEO cloaking modules globally.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>53 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/malware-analysis">Malware Analysis</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="TOLLBOOTH: What&#x27;s yours, IIS mine" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftollbooth%2Ftollbooth.png&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftollbooth%2Ftollbooth.png&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftollbooth%2Ftollbooth.png&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftollbooth%2Ftollbooth.png&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftollbooth%2Ftollbooth.png&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftollbooth%2Ftollbooth.png&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftollbooth%2Ftollbooth.png&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftollbooth%2Ftollbooth.png&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ftollbooth%2Ftollbooth.png&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="introduction" class="absolute -top-32"></span>Introduction</h2>
<p>In September 2025, <a href="https://www.cyber.tamus.edu/">Texas A&amp;M University System (TAMUS) Cybersecurity</a>, a managed detection and response provider in collaboration with Elastic Security Labs, discovered post-exploitation activity by a Chinese-speaking threat actor who installed a malicious IIS module, which we are calling TOLLBOOTH. During this time, we observed a Godzilla-forked webshell <a href="https://github.com/ekkoo-z/Z-Godzilla_ekp">framework</a>, the use of the Remote Monitoring and Management (RMM) tool GotoHTTP, along with a malicious driver used to conceal their activity. The threat actor exploited a misconfigured IIS web server that used ASP.NET machine keys found in public resources, such as Microsoft’s documentation or StackOverflow support pages.</p>
<p>A similar chain of events was first <a href="https://www.microsoft.com/en-us/security/blog/2025/02/06/code-injection-attacks-using-publicly-disclosed-asp-net-machine-keys/">reported</a> by Microsoft in February, earlier this year. Our team believes this is the continuation of the same threat activity that AhnLab also <a href="https://asec.ahnlab.com/en/87804/">detailed</a> in April, based on similar malware and behaviors. During this event, we were able to leverage our partnership with Texas A&amp;M System Cybersecurity to collect insights around the activity. Additionally, through collaboration with <a href="https://www.validin.com/">Validin</a>, leveraging their global scanning infrastructure, we’ve determined that organizations worldwide have been impacted by this campaign. The following report will detail the events and tooling used in this activity cluster, known as REF3927. Our hope is to raise more awareness of this activity among defenders and organizations, as it is actively being abused at a global scale.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="key-takeaways" class="absolute -top-32"></span>Key takeaways</h3>
<ul>
<li>Threat actors are abusing misconfigured IIS servers using publicly exposed machine keys</li>
<li>Post-compromise behaviors include using a malicious driver, remote monitoring tooling, credential dumping, webshell deployment, and IIS malware</li>
<li>Threat actors adapted the open source “Hidden” rootkit project to hide their presence</li>
<li>The main objective appears to be to install an IIS backdoor, called TOLLBOOTH, that includes SEO cloaking and webshell capabilities</li>
<li>This campaign included large-scale exploitation across geographies and industry verticals</li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="campaign-overview" class="absolute -top-32"></span>Campaign Overview</h2>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="attack-vector" class="absolute -top-32"></span>Attack vector</h3>
<p>Last month, Elastic Security Labs and Texas A&amp;M System Cybersecurity investigated an intrusion involving a misconfigured Windows IIS server. This was directly related to a server configured with ASP.NET machine keys that were previously published on the Internet. Machine keys used in ASP.NET applications refer to cryptographic keys used to encrypt and validate data. These keys are composed of two parts, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ValidationKey</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DecryptionKey</code>, which are used to secure ASP.NET features such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ViewState</code> and authentication cookies.</p>
<p></p>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ViewState</code> is a mechanism used by <a href="/security-labs/ASP.NET">ASP.NET</a> web applications to preserve the state of a page and its controls across HTTP requests. Since HTTP is a stateless protocol, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ViewState</code> allows data to be collected when the page is submitted and rendered again. This data is stored in a hidden field (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">__VIEWSTATE</code>) on the page that is serialized and encoded in Base64. This <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ViewState</code> field is susceptible to <a href="https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html">deserialization attacks</a>, allowing an attacker to forge payloads using the application&#x27;s machine keys. We have reason to believe this is part of an opportunistic campaign targeting Windows web servers using publicly exposed machine keys.</p>
<p>Below is an example of this type of deserialization attack, demonstrated via a POST request in a virtual environment using an open source .NET deserialization payload <a href="https://github.com/pwntester/ysoserial.net">generator</a>. The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">__VIEWSTATE</code> field contains a URL-encoded and Base64-encoded payload that will perform a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">whoami</code> and write a file to a directory. With a successful exploitation request, the server will respond with an <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HTTP/1.1 500 Internal Server Error</code>.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="post-compromise-activity" class="absolute -top-32"></span>Post-compromise activity</h3>
<p>Upon initial access through ViewState injection, REF3927 was observed deploying webshells, including a Godzilla shell framework, to facilitate persistent access. They then enumerated privileges and attempted (unsuccessfully) to create their own user accounts. When account creation attempts failed, the actor then uploaded and executed the GotoHTTP Remote Monitoring and Management (RMM) tool. The threat actor created an Administrator account and attempted to dump credentials using Mimikatz, but this was prevented by Elastic Defend.</p>
<p></p>
<p>With attempts to further expand the scope of the intrusion blocked, the threat actor deployed their traffic hijacking IIS Module, TOLLBOOTH, as a means to monetize their access. The actor also attempted to deploy a modified version of the open-source Hidden rootkit to obfuscate their malware. In the observed intrusion, Elastic Defend prevented both TOLLBOOTH and the rootkit from being executed.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="godzilla-ekp-analysis" class="absolute -top-32"></span>Godzilla EKP analysis</h2>
<p>One of the main tools used by this group is a Godzilla-forked framework called <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Z-Godzilla_ekp</code> written by <a href="https://github.com/ekkoo-z">ekkoo-z</a>. This tool piggybacks off the previous Godzilla <a href="https://github.com/BeichenDream/Godzilla">project</a> by adding new features such as an AMSI bypass plugin and masquerading its network traffic to appear more legitimate. This toolkit allows operators to generate ASP.NET, Java, C#, and PHP payloads, connect to targets, and provides different encryption options to hide network traffic. This framework uses a plugin system driven by a GUI with many features, including:</p>
<ul>
<li>Discovery/enumeration capabilities</li>
<li>Privilege escalation techniques</li>
<li>Command execution/file execution</li>
<li>Shellcode loader, meterpreter, in-memory PE execution</li>
<li>File management, zipping utility</li>
<li>Cred stealing plugin (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">lemon</code>) - Retrieves FileZilla, Navicat, WinSCP, and Xmanager credentials</li>
<li>Browser password scraping</li>
<li>Port scanning, HTTP proxy configuration, note-taking</li>
</ul>
<p></p>
<p>Below is a network traffic example showing the operator traffic to the webshell (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">error.aspx</code>) using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Z-Godzilla_ekp</code>. The webshell will take the Base64-encoded AES-encrypted data from the HTTP POST request, then execute the .NET assembly in-memory. These requests are disguised by embedding the encrypted data in HTTP POST parameters in order to blend in as normal network traffic.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="rootkit-analysis" class="absolute -top-32"></span>Rootkit analysis</h2>
<p>The attacker hid their presence on the infected machine by deploying a kernel rootkit. This rootkit works in conjunction with a userland application named HijackDriverManager, whose interface strings are written in Chinese, to interact with the driver. For this analysis, we examined both the malicious rootkit and the code from the original “Hidden” open-source project from which it was derived. Internally, we are calling the rootkit <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HIDDENDRIVER</code> and the userland application <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HIDDENCLI</code>.</p>
<p>This malicious software is a modified version of the open source rootkit <a href="https://github.com/JKornev/hidden">Hidden</a>, which has been available on GitHub for years. The malware author made minor modifications before compilation. For example, the rootkit uses Direct Kernel Object Manipulation (DKOM) to hide its presence and maintain persistence on the compromised system. The compiled driver still has “hidden” within the compilation path string, indicating that they used the “Hidden” rootkit project.</p>
<p></p>
<p>Upon initial loading into the kernel, the driver prioritizes a series of critical initialization steps. It first invokes seven initialization functions:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">InitializeConfigs</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">InitializeKernelAnalyzer</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">InitializePsMonitor</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">InitializeFSMiniFilter</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">InitializeRegistryFilter</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">InitializeDevice</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">InitializeStealthMode</code></li>
</ul>
<p>To prepare its internal components before populating its driver object and associated fields, such as major functions.</p>
<p></p>
<p>The following sections will elaborate on each of these seven critical initialization functions, detailing their purpose.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="initializeconfigs" class="absolute -top-32"></span>InitializeConfigs</h3>
<p>The rootkit&#x27;s initial action is to run the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">InitializeConfigs</code> function. This function&#x27;s sole purpose is to read the rootkit&#x27;s configuration from the driver&#x27;s service key in the Windows registry, which is populated by the userland application. These values are extracted and put in global configuration variables that will be later used by the rootkit.</p>
<p>The following table summarizes the configuration parameters that the rootkit extracts from the registry:</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Registry name</th><th>Description</th><th>Type</th></tr></thead><tbody><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Kbj_WinkbjFsDirs</code></td><td>A list of directory paths to be hidden</td><td>string</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Kbj_WinkbjFsFiles</code></td><td>A list of file paths to be hidden</td><td>string</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Kbj_WinkbjRegKeys</code></td><td>A list of registry keys to be hidden</td><td>string</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Kbj_WinkbjRegValues</code></td><td>A list of registry values to be hidden</td><td>string</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Kbj_FangxingImages</code></td><td>A list of process images to whitelist</td><td>string</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Kbj_BaohuImages</code></td><td>A list of process images to protect</td><td>string</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Kbj_WinkbjImages</code></td><td>A list of process images to be hidden</td><td>string</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Kbj_Zhuangtai</code></td><td>A global kill switch that is set from userland</td><td>bool</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Kbj_YinshenMode</code></td><td>This flag signals that the rootkit must conceal its artifacts.</td><td>bool</td></tr></tbody></table></div>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="initializekernelanalyzer" class="absolute -top-32"></span>InitializeKernelAnalyzer</h3>
<p>Its purpose is to dynamically scan the kernel memory to find the addresses of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PspCidTable</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ActiveProcessLinks</code> that are needed.</p>
<p>The <a href="http://uninformed.org/index.cgi?v=3&amp;a=7&amp;p=6"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PspCidTable</code></a> is the kernel&#x27;s structure that serves as a table for process and thread IDs, while <a href="https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/manipulating-activeprocesslinks-to-unlink-processes-in-userland"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ActiveProcessLinks</code></a> under the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">_EPROCESS</code> structure serves as a doubly-linked list connecting all currently running processes. It allows the system to track and traverse all active processes. By removing entries from this list, it is possible to hide processes from enumeration tools like <a href="https://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer">Process Explorer</a>.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="lookforpspcidtable" class="absolute -top-32"></span>LookForPspCidTable</h4>
<p>It searches for the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PspCidTable</code> address by disassembling the function <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-pslookupprocessbyprocessid"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PsLookupProcessByProcessId</code></a>with the library <a href="https://github.com/zyantific/zydis">Zydis</a> and parsing it.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="lookforactiveprocesslinks" class="absolute -top-32"></span>LookForActiveProcessLinks</h4>
<p>This function determines the offset of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ActiveProcessLinks</code> field within the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">_EPROCESS</code> structure. It uses hardcoded offset values specific to different Windows versions. It has a fast scanning process that relies on these hardcoded values to find the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ActiveProcessLinks</code> field, which will be validated by another function. In case it fails to find it with the hardcoded values, it takes a brute-force approach by starting from a hardcoded relative offset to the maximum possible offset.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="initializepsmonitor" class="absolute -top-32"></span>InitializePsMonitor</h3>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">InitializePsMonitor</code> sets up the rootkit&#x27;s process monitoring and manipulation engine. This is the heart of its ability to hide processes.</p>
<p>It first initializes three <a href="https://medium.com/@ys.yogendra22/avl-tree-self-balancing-binary-search-tree-20188ff58b05">AVL tree structures</a> to hold information (rules) for excluding, protecting, and hiding processes. It uses <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-rtlinitializegenerictableavl"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">RtlInitializeGenericTableAvl</code></a> for high-speed lookups and populates them with data from the configuration. It then sets up different kernel callbacks to monitor the system using the set of rules.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="registering-object-manager-callback-with-obregistercallbacks" class="absolute -top-32"></span>Registering object manager callback with (ObRegisterCallbacks)</h4>
<p>This hook registers the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ProcessPreCallback</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ThreadPreCallback</code> functions. The <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/windows-kernel-mode-object-manager">kernel&#x27;s Object Manager</a> executes this code before it completes any request to create or duplicate a handle to a process or thread.</p>
<p></p>
<p>When a process tries to get a handle on another process, the callback function <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ProcessPreCallback</code> is called. It will first check if the destination process is a protected process (in the list). If it is the case, instead of not granting access, it will simply downgrade its rights over the protected process with the access set to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SYNCHRONIZE | PROCESS_QUERY_LIMITED_INFORMATION</code>.</p>
<p>This will ensure that processes cannot interact with/inspect, or kill the protected process.</p>
<p>The same mechanism applies to threads.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="process-creation-callbackpssetcreateprocessnotifyroutineex" class="absolute -top-32"></span>Process Creation Callback(PsSetCreateProcessNotifyRoutineEx)</h4>
<p>The rootkit registers a callback with the <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-pssetcreateprocessnotifyroutineex"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PsSetCreateProcessNotifyRoutineEx</code></a> API on process creation. When a new process is launched, this callback runs a function <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CheckProcessFlags</code> that checks the process’s image against the configured list of image paths. It then creates an entry for this new process in its internal tracking table, setting its <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">excluded</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">protected</code>, and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hidden</code> flags accordingly.</p>
<p>Behavior based on flags:</p>
<ul>
<li><strong>Excluded</strong>
<ul>
<li>The rootkit will ignore the process and just let it run as expected.</li>
</ul>
</li>
<li><strong>Protected</strong>
<ul>
<li>The rootkit will not allow any other process to get a privileged handle on it, similar to what happens in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ProcessPreCallback</code>.</li>
</ul>
</li>
<li><strong>Hidden</strong>
<ul>
<li>The rootkit will hide the process by Direct Kernel Object Manipulation (DKOM). Directly manipulating a process&#x27;s kernel structures at the very instant of its creation can be unstable. In the process creation callback, if a process needs to be hidden, it is unlinked from the ActiveProcessLinks list. However, it sets a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">postponeHiding</code> flag that will be explained below.</li>
</ul>
</li>
</ul>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="the-image-load-callback-pssetloadimagenotifyroutine" class="absolute -top-32"></span>The Image Load callback (PsSetLoadImageNotifyRoutine)</h4>
<p>This registers the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">LoadProcessImageNotifyCallback</code> using <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-pssetloadimagenotifyroutine"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PsSetLoadImageNotifyRoutine</code></a>, which the kernel calls whenever an executable image (a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.exe</code> or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.dll</code>) is loaded into a process&#x27;s memory.</p>
<p>When the image is loaded, the callback checks the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">postponeHiding</code> flag; if set, it calls <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">UnlinkProcessFromCidTable</code> to remove it from the master process ID table (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PspCidTable</code>).</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="initializefsminifilter" class="absolute -top-32"></span>InitializeFSMiniFilter</h3>
<p>The function defines its capabilities in the <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/ns-fltkernel-_flt_registration"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">FilterRegistration structure(FLT_REGISTRATION)</code></a>. This structure tells the operating system which functions to call for which types of file system operations. It registers callbacks for the following requests:</p>
<ul>
<li><a href="https://learn.microsoft.com/en-us/previous-versions/windows/drivers/ifs/irp-mj-create"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IRP_MJ_CREATE</code></a>: Intercepts any attempt to open or create a file or directory.</li>
<li><a href="https://learn.microsoft.com/en-us/previous-versions/windows/drivers/ifs/irp-mj-directory-control"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IRP_MJ_DIRECTORY_CONTROL</code></a>: Intercepts any attempt to list the contents of a directory.</li>
</ul>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="fltcreatepreoperationirp_mj_create" class="absolute -top-32"></span>FltCreatePreOperation(IRP_MJ_CREATE)</h4>
<p>This is a pre-operation callback, when a process tries to create/open a file, this function is triggered. It will check the path against its list of files to be hidden. If a match is found, it will change the operation result of the IRP request to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">STATUS_NO_SUCH_FILE</code>, indicating to the requesting process that the file does not exist, except if the process is included in the excluded list.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="fltdirctrlpostoperationirp_mj_directory_control" class="absolute -top-32"></span>FltDirCtrlPostOperation(IRP_MJ_DIRECTORY_CONTROL)</h4>
<p>This is a post-operation callback; the implemented hook essentially intercepts the directory listening generated by the system and modifies it by removing any files listed as hidden.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="initializeregistryfilter" class="absolute -top-32"></span>InitializeRegistryFilter</h3>
<p>After concealing its processes and files, the rootkit&#x27;s next step is to erase entries from the Windows Registry. The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">InitializeRegistryFilter</code> function accomplishes this by installing a registry filtering callback to intercept and modify registry operations.</p>
<p>It registers a callback using the <a href="https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-cmregistercallbackex"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CmRegisterCallbackEx</code></a> API, using the same principle as with files. If the registry key or value is in the hidden registry list, the callback function will return the status <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">STATUS_NOT_FOUND</code>.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="initializedevice" class="absolute -top-32"></span>InitializeDevice</h3>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">InitializeDevice</code> function does the driver initialization needed, and it sets up an <a href="https://learn.microsoft.com/en-us/windows/win32/devio/device-input-and-output-control-ioctl-"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IOCTL communication</code></a> so that the userland application can communicate with it directly</p>
<p>The following is a table describing each IOCTL command handled by the driver.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>IOCTL command</th><th>Description</th></tr></thead><tbody><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HID_IOCTL_SET_DRIVER_STATE</code></td><td>Soft enable/disable the rootkit functionalities by setting a global state flag that acts as a master on/off switch.</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HID_IOCTL_GET_DRIVER_STATE</code></td><td>Retrieve the current state of the rootkit (enabled/disabled).</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HID_IOCTL_ADD_HIDDEN_OBJECT</code></td><td>Adds a new rule to hide a specific file, directory, registry key, or value.</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HID_IOCTL_REMOVE_HIDDEN_OBJECT</code></td><td>Removes a single hiding rule by its unique ID.</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HID_IOCTL_REMOVE_ALL_HIDDEN_OBJECTS</code></td><td>Remove all hidden objects for a specific object type(registry keys/values, files, directories).</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HID_IOCTL_ADD_OBJECT</code></td><td>Adds a new rule to automatically hide, protect, or exclude a process based on its image path.</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HID_IOCTL_GET_OBJECT_STATE</code></td><td>Queries the current state (hidden, protected, or excluded) of a specific running process by its PID.</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HID_IOCTL_SET_OBJECT_STATE</code></td><td>This command modifies the state (hidden, protected, or excluded) of a specific running process, identified by its PID.</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HID_IOCTL_REMOVE_OBJECT</code></td><td>Removes a single process rule (hide, protect, or exclude) by its unique ID.</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HID_IOCTL_REMOVE_ALL_OBJECTS</code></td><td>This command clears all process states and image rules of a specific type.</td></tr></tbody></table></div>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="initializestealthmode" class="absolute -top-32"></span>InitializeStealthMode</h3>
<p>After successfully setting up its configuration, process callbacks, and file system filters, the rootkit executes its final initialization routine: <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">InitializeStealthMode</code>. If the configuration flag <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Kbj_YinshenMode</code> is enabled, it will hide every artifact associated with the rootkit, including registry keys, the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.sys</code> file, and other related components, using the same techniques described above.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="code-variations" class="absolute -top-32"></span>Code Variations</h3>
<p>While the malware is heavily based on the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HIDDENDRIVER</code> source code, our analysis identified several minor alterations. The following section breaks down the notable code differences we observed.</p>
<p>The original code in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IsProcessExcluded</code> function consistently excludes the system process (PID 4) from the rootkit&#x27;s operations. However, the malicious rootkit has an exclusion list for additional process names, as illustrated in the provided screenshot.</p>
<p></p>
<p>The original code&#x27;s callback for filtering system information (including files, directories, and registries) used the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">IsDriverEnabled</code> function to verify if the driver functionalities were enabled. However, the observed rootkit introduced an additional, automatic whitelist check for processes with the image name hijack, which corresponds to the userland application.</p>
<p></p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="rmm-usage" class="absolute -top-32"></span>RMM usage</h2>
<p>The GotoHTTP tool is a legitimate Remote Monitoring and Management (RMM) application, deployed by the threat actor to maintain easier access to the compromised IIS server. Its “Browser-to-Client” architecture allows the attacker to control the server from any standard web browser over common web ports (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">80</code>/<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">443</code>) by routing all traffic through GotoHTTP’s own platform, preventing direct network connection to the attacker’s own infrastructure.</p>
<p></p>
<p>RMMs continue to <a href="https://www.proofpoint.com/us/blog/threat-insight/remote-monitoring-and-management-rmm-tooling-increasingly-attackers-first-choice">increase in popularity</a> for use at multiple points of the cyber kill chain and by various threat actors. Most anti-malware vendors do not consider them malicious in isolation and therefore do not block them outright. RMM C2 also only flows to legitimate RMM provider websites, and therefore has the same dynamics for network-based protections and monitoring.</p>
<p>Blocking the <a href="https://github.com/magicsword-io/LOLRMM/tree/main/detections/sigma">mass of currently active RMMs</a> and allowing only the enterprise&#x27;s preferred RMM would be the optimal protection mechanism. However, this paradigm is only available to enterprises with the right technical knowledge, defensive tooling, mature organizational policies, and coordination across departments.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="iis-module-analysis" class="absolute -top-32"></span>IIS module analysis</h2>
<p>The threat actor was observed deploying both 32-bit and 64-bit versions of TOLLBOOTH, a malicious IIS module. TOLLBOOTH has been previously discussed by <a href="https://asec.ahnlab.com/en/87804/">Ahnlab</a> and the security researcher, <a href="https://x.com/AzakaSekai_/status/1969294757978652947">@Azaka</a>. Some of the malware’s key capabilities include SEO cloaking, a management channel, and a publicly accessible webshell. We discovered both native and .NET managed versions being deployed in the wild.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="malware-config-structure" class="absolute -top-32"></span>Malware Config Structure</h3>
<p>TOLLBOOTH retrieves its configuration dynamically from <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hxxps://c[.]cseo99[.]com/config/&lt;victim_HTTP_host_value&gt;.json,</code> and the creation of each victim’s JSON config file is handled by the threat actor’s infrastructure. However, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hxxps://c[.]cseo99[.]com/config/127.0.0.1.json</code> responded, showing a lack of anti-analysis checks - allowing us to retrieve a copy of a config file for analysis. It can be viewed in this <a href="https://gist.github.com/jiayuchann/b785e1f3960fa26923d821b7e93e2e94">GitHub Gist</a>, and we will reference how some of the fields are used as appropriate.</p>
<p>For native modules, the config and other temporary cache files are Gzip-compressed and stored locally at a hardcoded path <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\\Windows\\Temp\\_FAB234CD3-09434-8898D-BFFC-4E23123DF2C\\</code>. For the managed module, these are AES-encrypted with key <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">YourSecretKey123</code> and IV <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0123456789ABCDEF</code>, Gzip-compressed, and stored at <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\\Windows\\Temp\\AcpLogs\\</code>.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="webshell" class="absolute -top-32"></span>Webshell</h3>
<p>TOLLBOOTH exposes a webshell at the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/mywebdll</code> path, requiring a password of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hack123456!</code> for file uploads and execution of commands. Form submission sends a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">POST</code> request to the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/scjg</code> endpoint.</p>
<p></p>
<p>The password is hardcoded in the binary, and this webshell feature is present in both <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">v1.6.0</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">v1.6.1</code> of the native version of TOLLBOOTH.</p>
<p>The file upload functionality contains a bug that stems from its sequential, order-dependent parsing of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">multipart/form-data</code> fields. The standard HTML form is structured such that the file input field appears before the directory input fields. The server processing the request parts attempts to handle the file data before the destination directory, creating a dependency conflict that causes standard uploads to fail. By manually reordering the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">multipart/form-data</code> parts, a successful file upload can still be triggered.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="management-channel" class="absolute -top-32"></span>Management Channel</h3>
<p>TOLLBOOTH exposes a few additional endpoints for C2 operators’ management/debug purposes. They are only accessible by setting the User Agent to one of the following (though it is configurable):</p>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/health</code> endpoint provides a quick way to assess the module’s health, returning the file name to access the config stored at <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">c[.]cseo99[.]com</code>, disk space information, the module&#x27;s installation path, and the version of TOLLBOOTH.</p>
<p></p>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/debug</code> endpoint provides more details, including a summary of the configuration, cache directory, HTTP request information, etc.</p>
<p></p>
<p>The parsed configuration is accessible at <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/conf</code>.</p>
<p></p>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/clean</code> endpoint allows the operator to clear the current configuration by deleting the config files stored locally (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">clean?type=conf</code>) in order to update them on the victim server, clear any other temporary caches the malware uses (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">clean?type=conf</code>), or clear both - everything in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\\Windows\\Temp\\_FAB234CD3-09434-8898D-BFFC-4E23123DF2C\\</code> path (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">clean?type=all</code>).</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="seo-cloaking" class="absolute -top-32"></span>SEO Cloaking</h3>
<p>The main goal of TOLLBOOTH is <a href="https://support.google.com/adspolicy/answer/15938075?sjid=10977824559696952423-NC#Cloaking">SEO cloaking</a>, a process that involves presenting keyword-optimized content to search engine crawlers, while concealing it from casual user browsing, to achieve higher search rankings for the page. Once a human visitor clicks the link from the boosted search results, the malware redirects them to a malicious or fraudulent page. This tactic is an effective way to increase traffic to malicious pages compared to alternatives like direct phishing, because users trust search engine results they request more than unsolicited emails.</p>
<p>TOLLBOOTH differentiates between bots and visitors by checking the User Agent and the Referer headers for values defined in the config.</p>
<p>Both the native and the managed modules are implemented almost identically. The only difference is that native modules <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">v1.6.0</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">v1.6.1</code> check both the User Agent and Referer against the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">seoGroupRefererMatchRules</code> list, and the .NET module <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">v1.6.1</code> checks the User Agent against the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">seoGroupUaMatchRules</code> list and Referer against the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">seoGroupRefererMatchRules</code> list.</p>
<p>Based on the current configuration, the values for <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">seoGroupUaMatchRules</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">seoGroupRefererMatchRules</code> are <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">googlebot</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">google</code>, respectively. A GoogleBot crawler would have a User Agent match and not a Referer match, whereas a human visitor would have a Referer match but not a User Agent match. Looking at the fallback list containing both <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bing</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">yahoo</code> suggests that those search engines were targeted in the past as well.</p>
<p></p>
<p>The code snippet below is responsible for building a page filled with keyword-stuffed links that search engine crawlers will see.</p>
<p></p>
<p>The module constructs a link farm in two phases. First, to build internal link density, it retrieves a list of random keywords from resource URIs defined in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">affLinkMainWordSeoResArr</code> configuration field. For each keyword, it generates a &quot;local link&quot; pointing to another SEO page on the same compromised website. Next, it builds the external network by retrieving &quot;affiliate link resources&quot; from the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">affLinkSeoResArr</code> field. These resources are a list of URIs pointing to SEO pages on other external domains that are also infected with TOLLBOOTH. The URIs look like <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hxxps://f[.]fseo99[.]com/&lt;date&gt;/&lt;md5_file_hash&gt;&lt;.txt/.html&gt;</code> in the configuration. The module then creates hyperlinks from the current site to these other victims. This technique, known as <a href="https://en.wikipedia.org/wiki/Link_farm">link farming</a>, is designed to artificially inflate search engine rankings across the entire network of compromised sites.</p>
<p>Below is an example of what a crawler bot would see when visiting the landing page of a web server infected with TOLLBOOTH.</p>
<p></p>
<p>URL path prefixes to the SEO pages contain words or phrases from the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">seoGroupUrlMatchRules</code> config field. This is also referenced in the site redirection logic targeting visitors. These are currently:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">stock</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">invest</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">summary</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">datamining</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">market-outlook</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bullish-on</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">news-overview</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">news-volatility</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">video/</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">app/</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">blank/</code></li>
</ul>
<p></p>
<p>Templates and content for SEO pages are also externally retrieved from URIs that look like <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hxxps://f[.]fseo99[.]com/&lt;date&gt;/&lt;md5_file_hash&gt;&lt;.txt/.html&gt;</code> in the config. Here is an example of what one of the SEO pages looks like:</p>
<p></p>
<p>For the user redirection logic, the module first gathers a fingerprint of the visitor, including their IP address, user agent, referrer, and the SEO page’s target keyword. It then sends this information via a POST request to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hxxps://api[.]aseo99[.]com/client/landpage</code>. If the request is successful, the server responds with a JSON object containing a specific <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">landpageUrl</code>, which becomes the destination for the redirect.</p>
<p></p>
<p>If the communication fails for any reason, TOLLBOOTH falls back to constructing a new URL pointing to the same C2 endpoint but instead encodes the visitor’s information directly into the URL as GET parameters. Finally, the chosen URL - either from the successful C2 response or the fallback - is embedded into a JavaScript snippet (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">window.location.href</code>) and sent to the victim’s browser, forcing an immediate redirection.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="page-hijacker" class="absolute -top-32"></span>Page Hijacker</h3>
<p>For the native modules, if the URI path contains <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">xlb</code>, TOLLBOOTH responds with a custom loader page containing a script tag. This script&#x27;s src attribute points to a dynamically generated URL, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mlxya[.]oss-accelerate[.]aliyuncs[.]com/&lt;12_random_alphanumeric_characters&gt;</code>, which is used to retrieve an obfuscated next-stage JavaScript payload.</p>
<p></p>
<p>The deobfuscated payload appears to be a page-replacement tool that executes based on specific trigger keywords (e.g., <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">xlbh</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mxlb</code>) found in the URL. Once triggered, it contacts one of the attacker-controlled endpoints at <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">asf-sikkeiyjga[.]cn-shenzhen[.]fcapp[.]run/index/index?href=</code> or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ask-bdtj-selohjszlw[.]cn-shenzhen[.]fcapp[.]run/index/index?key=</code>, appending the current page’s URL as a Base64-encoded parameter to identify the compromised site. The script then uses <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">document.write()</code> to completely wipe the current page’s DOM and replace it with the server’s response. While the final payload could not be retrieved at the time of writing, this technique is designed to inject attacker-controlled content, most commonly a malicious HTML page or a JS redirect to another malicious site.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="campaign-targeting" class="absolute -top-32"></span>Campaign targeting</h2>
<p>While conducting the analysis of TOLLBOOTH and its associated webshell, we identified multiple mechanisms to identify additional victims through active and semi-passive collection methods.</p>
<p>We then partnered with <a href="https://x.com/SreekarMad">@SreekarMad</a> at <a href="https://www.validin.com/">Validin</a> to leverage his expertise and their scanning infrastructure in an effort to develop a more comprehensive list of victims.</p>
<p>At the time of publication, 571 IIS server victims were identified with active TOLLBOOTH infections.</p>
<p></p>
<p>These servers are globally distributed (with one major exception, described below), and do not fit into any neat industry vertical buckets. For these reasons, along with the sheer scale of the operation, we are led to believe that victim selection is untargeted and leverages automated scanning to identify IIS servers reusing publicly listed machine keys.</p>
<p>The collaboration with Validin and Texas A&amp;M System Cybersecurity yielded a robust amount of metadata about the additional TOLLBOOTH-infected victims.</p>
<p></p>
<p>Automated exploitation may also be employed, but TAMUS Cybersecurity noted that the post-exploitation activity appeared to be interactive.</p>
<p>Validin discovered other potentially infected domains linked through the SEO farming link configs, but when checked for the webshell interface, found it inaccessible on some. After conducting a deeper manual investigation into these servers, we determined that they had been, in fact, TOLLBOOTH-infected, but either the owners remediated the issue or the attackers backed themselves out.</p>
<p>Subsequent scanning revealed that many of the same servers were reinfected. We have taken this to indicate that remediation was incomplete. One plausible explanation is that merely removing the threat does not close the vulnerability left open by the machine key reuse. So, victims who omit this final step are likely to be reinfected through the same mechanism. See the “Remediating REF3927” section below for additional details.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="geography" class="absolute -top-32"></span>Geography</h3>
<p>The geographic distribution of victims notably excludes any servers within China’s borders. One server was identified in Hong Kong, but it was hosting a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.co.uk</code> domain. This probable geofencing aligns with behavioral patterns from other criminal threats, where they implement mechanisms to ensure they do not target systems in their home countries. This mitigates their risk of prosecution as the governments of these countries tend to turn a blind eye toward, if not outright endorse, criminal activity targeting foreigners.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="diamond-model" class="absolute -top-32"></span>Diamond model</h3>
<p>Elastic Security Labs utilizes the <a href="https://www.activeresponse.org/wp-content/uploads/2013/07/diamond.pdf">Diamond Model</a> to describe high-level relationships between adversaries, capabilities, infrastructure, and victims of intrusions. While the Diamond Model is most commonly used with single intrusions and leverages Activity Threading (section 8) to create relationships between incidents, an adversary-centered (section 7.1.4) approach allows for a single diamond.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="remediating-ref3927" class="absolute -top-32"></span>Remediating REF3927</h2>
<p>Remediation of the infection itself can be completed through industry best practices, such as reverting to a clean state and addressing malware and persistence mechanisms. However, in the face of potential automated scanning and exploitation, the vulnerability of the reused machine key remains for whichever bad actor wants to take over the server.</p>
<p>Therefore, remediation must include rotation of machine keys to a new, <a href="https://support.winhost.com/kb/a1623/how-to-generate-a-machine-key-in-iis-manager.aspx">properly generated</a> key.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="conclusion" class="absolute -top-32"></span>Conclusion</h2>
<p>The REF3927 campaign highlights how a simple configuration error, such as using a publicly exposed machine key, can lead to significant compromise. In this event, Texas A&amp;M University System Cybersecurity and the affected customer took swift action to remediate the server, but based on our research, there continue to be other victims targeted using the same techniques.</p>
<p>The threat actor’s integration of open-source tooling, RMM software, and a malicious driver is an effective combination of techniques that have proven successful in their operations. Administrators of publicly exposed IIS environments should audit their machine key configurations, ensure robust security logging, and leverage endpoint detection solutions such as <a href="https://www.elastic.co/security/endpoint-security">Elastic Defend</a> during potential incidents.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="detection-logic" class="absolute -top-32"></span>Detection logic</h2>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="detection-rules" class="absolute -top-32"></span>Detection rules</h3>
<ul>
<li><a href="https://github.com/elastic/detection-rules/blob/main/rules/windows/persistence_webshell_detection.toml">Web Shell Detection: Script Process Child of Common Web Processes</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="prevention-rules" class="absolute -top-32"></span>Prevention rules</h3>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/privilege_escalation_suspicious_execution_via_windows_services.toml">Suspicious Execution via Windows Services</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/defense_evasion_potential_shellcode_injection_via_a_webshell.toml">Potential Shellcode Injection via a WebShell</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/defense_evasion_execution_from_suspicious_directory.toml">Execution from Suspicious Directory</a></li>
</ul>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="yara-signatures" class="absolute -top-32"></span>YARA signatures</h4>
<p>Elastic Security has created the following YARA rules to prevent the malware observed in REF3927:</p>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Tollbooth.yar">Windows.Trojan.Tollbooth</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_HiddenCli.yar">Windows.Trojan.HiddenCli</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_HiddenDriver.yar">Windows.Trojan.HiddenDriver</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="ref3927-through-mitre-attck" class="absolute -top-32"></span>REF3927 through MITRE ATT&amp;CK</h2>
<p>Elastic uses the <a href="https://attack.mitre.org/">MITRE ATT&amp;CK</a> framework to document common tactics, techniques, and procedures that threats use against enterprise networks.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="tactics" class="absolute -top-32"></span>Tactics</h3>
<p>Tactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/tactics/TA0001/">Initial Access</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0002/">Execution</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0005/">Defense Evasion</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0006/">Credential Access</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0009/">Collection</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0010">Exfiltration</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="techniques" class="absolute -top-32"></span>Techniques</h3>
<p>Techniques represent how an adversary achieves a tactical goal by performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/techniques/T1190/">Exploit Public-Facing Application</a></li>
<li><a href="https://attack.mitre.org/techniques/T1505/004/">Server Software Component: IIS Components</a></li>
<li><a href="https://attack.mitre.org/techniques/T1003/">OS Credential Dumping</a></li>
<li><a href="https://attack.mitre.org/techniques/T1564/001/">Hide Artifacts: Hidden Files and Directories</a></li>
<li><a href="https://attack.mitre.org/techniques/T1005/">Data from Local System</a></li>
<li><a href="https://attack.mitre.org/techniques/T1014/">Rootkit</a></li>
<li><a href="https://attack.mitre.org/techniques/T1078/">Valid Accounts</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="observations" class="absolute -top-32"></span>Observations</h2>
<p>The following <a href="https://github.com/elastic/labs-releases/tree/main/indicators/tollbooth">observables</a> were discussed in this research.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Observable</th><th>Type</th><th>Name</th><th>Reference</th></tr></thead><tbody><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">913431f1d36ee843886bb052bfc89c0e5db903c673b5e6894c49aabc19f1e2fc</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WingtbCLI.exe</code></td><td>HIDDENCLI</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">f9dd0b57a5c133ca0c4cab3cca1ac8debdc4a798b452167a1e5af78653af00c1</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Winkbj.sys</code></td><td>HIDDENDRIVER</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">c1ca053e3c346513bac332b5740848ed9c496895201abc734f2de131ec1b9fb2</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">caches.dll</code></td><td>TOLLBOOTH</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">c348996e27fc14e3dce8a2a476d22e52c6b97bf24dd9ed165890caf88154edd2</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">scripts.dll</code></td><td>TOLLBOOTH</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">82b7f077021df9dc2cf1db802ed48e0dec8f6fa39a34e3f2ade2f0b63a1b5788</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">scripts.dll</code></td><td>TOLLBOOTH</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bd2de6ca6c561cec1c1c525e7853f6f73bf6f2406198cd104ecb2ad00859f7d3</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">caches.dll</code></td><td>TOLLBOOTH</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">915441b7d7ddb7d885ecfe75b11eed512079b49875fc288cd65b023ce1e05964</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CustomIISModule.dll</code></td><td>TOLLBOOTH</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">c[.]cseo99[.]com</code></td><td>domain-name</td><td></td><td>TOLLBOOTH config server</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">f[.]fseo99[.]com</code></td><td>domain-name</td><td></td><td>TOLLBOOTH SEO farming config server</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">api[.]aseo99[.]com</code></td><td>domain-name</td><td></td><td>TOLLBOOTH crawler reporting &amp; page redirector API</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mlxya[.]oss-accelerate.aliyuncs[.]com</code></td><td>domain-name</td><td></td><td>TOLLBOOTH page hijacker payload hosting server</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">asf-sikkeiyjga[.]cn-shenzhen[.]fcapp.run</code></td><td>domain-name</td><td></td><td>TOLLBOOTH page hijacker content-fetching server</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ask-bdtj-selohjszlw[.]cn-shenzhen[.]fcapp[.]run</code></td><td>domain-name</td><td></td><td>TOLLBOOTH page hijacker content-fetching server</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bae5a7722814948fbba197e9b0f8ec5a6fe8328c7078c3adcca0022a533a84fe</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">1.aspx</code></td><td>Godzilla-forked webshell (Similar sample from VirusTotal)</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">230b84398e873938bbcc7e4a1a358bde4345385d58eb45c1726cee22028026e9</code></td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GotoHTTP.exe</code></td><td>GotoHTTP</td></tr><tr><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.13) Gecko/20101213 Opera/9.80 (Windows NT 6.1; U; zh-tw) Presto/2.7.62 Version/11.01 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36</code></td><td>User-Agent</td><td></td><td>User-Agent observed during exploitation via IIS ViewState injection</td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="references" class="absolute -top-32"></span>References</h2>
<p>The following were referenced throughout the above research:</p>
<ul>
<li><a href="https://www.microsoft.com/en-us/security/blog/2025/02/06/code-injection-attacks-using-publicly-disclosed-asp-net-machine-keys/">https://www.microsoft.com/en-us/security/blog/2025/02/06/code-injection-attacks-using-publicly-disclosed-asp-net-machine-keys/</a></li>
<li><a href="https://asec.ahnlab.com/en/87804/">https://asec.ahnlab.com/en/87804/</a></li>
<li><a href="https://unit42.paloaltonetworks.com/initial-access-broker-exploits-leaked-machine-keys/">https://unit42.paloaltonetworks.com/initial-access-broker-exploits-leaked-machine-keys/</a></li>
<li><a href="https://blog.blacklanternsecurity.com/p/aspnet-cryptography-for-pentesters">https://blog.blacklanternsecurity.com/p/aspnet-cryptography-for-pentesters</a></li>
<li><a href="https://github.com/ekkoo-z/Z-Godzilla_ekp">https://github.com/ekkoo-z/Z-Godzilla_ekp</a></li>
<li><a href="https://x.com/AzakaSekai_/status/1969294757978652947">https://x.com/AzakaSekai_/status/1969294757978652947</a></li>
</ul></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/tollbooth#introduction"><span>Introduction</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/tollbooth#key-takeaways"><span>Key&nbsp;takeaways</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/tollbooth#campaign-overview"><span>Campaign&nbsp;Overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/tollbooth#attack-vector"><span>Attack&nbsp;vector</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/tollbooth#post-compromise-activity"><span>Post-&nbsp;compromise&nbsp;activity</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/tollbooth#godzilla-ekp-analysis"><span>Godzilla EKP&nbsp;analysis</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/tollbooth#rootkit-analysis"><span>Rootkit&nbsp;analysis</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/tollbooth#initializeconfigs"><span>InitializeConfigs</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/tollbooth#initializekernelanalyzer"><span>InitializeKernelAnalyzer</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/tollbooth#lookforpspcidtable"><span>LookForPspCidTable</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/elastic-security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=TOLLBOOTH: What&#x27;s yours, IIS mine&amp;url=https://www.elastic.co/security-labs/tollbooth" target="_blank" rel="noopener noreferrer" aria-label="Share this article on X" title="Share this article on X"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>X</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/tollbooth" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/tollbooth&amp;title=TOLLBOOTH: What&#x27;s yours, IIS mine" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/tollbooth&amp;title=TOLLBOOTH: What&#x27;s yours, IIS mine" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2025<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"TOLLBOOTH: What's yours, IIS mine","slug":"tollbooth","date":"2025-10-22","description":"REF3927 abuses publicly disclosed ASP.NET machine keys to compromise IIS servers and deploy TOLLBOOTH SEO cloaking modules globally.","image":"tollbooth.png","tags":["ref3927","tollbooth","hiddendriver","godzilla","rootkit","gotohttp","iis","rmm","seo cloaking"],"body":{"raw":"\n## Introduction\n\nIn September 2025, [Texas A\u0026M University System (TAMUS) Cybersecurity](https://www.cyber.tamus.edu/), a managed detection and response provider in collaboration with Elastic Security Labs, discovered post-exploitation activity by a Chinese-speaking threat actor who installed a malicious IIS module, which we are calling TOLLBOOTH. During this time, we observed a Godzilla-forked webshell [framework](https://github.com/ekkoo-z/Z-Godzilla_ekp), the use of the Remote Monitoring and Management (RMM) tool GotoHTTP, along with a malicious driver used to conceal their activity. The threat actor exploited a misconfigured IIS web server that used ASP.NET machine keys found in public resources, such as Microsoft’s documentation or StackOverflow support pages. \n\nA similar chain of events was first [reported](https://www.microsoft.com/en-us/security/blog/2025/02/06/code-injection-attacks-using-publicly-disclosed-asp-net-machine-keys/) by Microsoft in February, earlier this year. Our team believes this is the continuation of the same threat activity that AhnLab also [detailed](https://asec.ahnlab.com/en/87804/) in April, based on similar malware and behaviors. During this event, we were able to leverage our partnership with Texas A\u0026M System Cybersecurity to collect insights around the activity. Additionally, through collaboration with [Validin](https://www.validin.com/), leveraging their global scanning infrastructure, we’ve determined that organizations worldwide have been impacted by this campaign. The following report will detail the events and tooling used in this activity cluster, known as REF3927. Our hope is to raise more awareness of this activity among defenders and organizations, as it is actively being abused at a global scale.\n\n### Key takeaways\n\n* Threat actors are abusing misconfigured IIS servers using publicly exposed machine keys \n* Post-compromise behaviors include using a malicious driver, remote monitoring tooling, credential dumping, webshell deployment, and IIS malware\n* Threat actors adapted the open source “Hidden” rootkit project to hide their presence\n* The main objective appears to be to install an IIS backdoor, called TOLLBOOTH, that includes SEO cloaking and webshell capabilities\n* This campaign included large-scale exploitation across geographies and industry verticals\n\n## Campaign Overview\n\n### Attack vector\n\nLast month, Elastic Security Labs and Texas A\u0026M System Cybersecurity investigated an intrusion involving a misconfigured Windows IIS server. This was directly related to a server configured with ASP.NET machine keys that were previously published on the Internet. Machine keys used in ASP.NET applications refer to cryptographic keys used to encrypt and validate data. These keys are composed of two parts, `ValidationKey` and `DecryptionKey`, which are used to secure ASP.NET features such as `ViewState` and authentication cookies.\n\n![REF3927 attack pattern \u0026 TOLLBOOTH SEO cloaking workflow](/assets/images/tollbooth/image16.png \"REF3927 attack pattern \u0026 TOLLBOOTH SEO cloaking workflow\")\n\n`ViewState` is a mechanism used by [ASP.NET](ASP.NET) web applications to preserve the state of a page and its controls across HTTP requests. Since HTTP is a stateless protocol, `ViewState` allows data to be collected when the page is submitted and rendered again. This data is stored in a hidden field (`__VIEWSTATE`) on the page that is serialized and encoded in Base64. This `ViewState` field is susceptible to [deserialization attacks](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html), allowing an attacker to forge payloads using the application's machine keys. We have reason to believe this is part of an opportunistic campaign targeting Windows web servers using publicly exposed machine keys.\n\nBelow is an example of this type of deserialization attack, demonstrated via a POST request in a virtual environment using an open source .NET deserialization payload [generator](https://github.com/pwntester/ysoserial.net). The `__VIEWSTATE` field contains a URL-encoded and Base64-encoded payload that will perform a `whoami` and write a file to a directory. With a successful exploitation request, the server will respond with an `HTTP/1.1 500 Internal Server Error`.\n\n![Packet capture showing an example of a successful deserialization attack](/assets/images/tollbooth/image14.png \"Packet capture showing an example of a successful deserialization attack\")\n\n### Post-compromise activity\n\nUpon initial access through ViewState injection, REF3927 was observed deploying webshells, including a Godzilla shell framework, to facilitate persistent access. They then enumerated privileges and attempted (unsuccessfully) to create their own user accounts. When account creation attempts failed, the actor then uploaded and executed the GotoHTTP Remote Monitoring and Management (RMM) tool. The threat actor created an Administrator account and attempted to dump credentials using Mimikatz, but this was prevented by Elastic Defend. \n\n![Elastic Defend alerting showing hands-on post-compromise activity](/assets/images/tollbooth/image6.png \"Elastic Defend alerting showing hands-on post-compromise activity\")\n\nWith attempts to further expand the scope of the intrusion blocked, the threat actor deployed their traffic hijacking IIS Module, TOLLBOOTH, as a means to monetize their access. The actor also attempted to deploy a modified version of the open-source Hidden rootkit to obfuscate their malware. In the observed intrusion, Elastic Defend prevented both TOLLBOOTH and the rootkit from being executed.\n\n![Actor attempts to deploy Mimikatz, HIDDENDRIVER, and TOLLBOOTH](/assets/images/tollbooth/image13.png \"Actor attempts to deploy Mimikatz, HIDDENDRIVER, and TOLLBOOTH\")\n\n## Godzilla EKP analysis\nOne of the main tools used by this group is a Godzilla-forked framework called `Z-Godzilla_ekp` written by [ekkoo-z](https://github.com/ekkoo-z). This tool piggybacks off the previous Godzilla [project](https://github.com/BeichenDream/Godzilla) by adding new features such as an AMSI bypass plugin and masquerading its network traffic to appear more legitimate. This toolkit allows operators to generate ASP.NET, Java, C#, and PHP payloads, connect to targets, and provides different encryption options to hide network traffic. This framework uses a plugin system driven by a GUI with many features, including:\n\n* Discovery/enumeration capabilities\n* Privilege escalation techniques\n* Command execution/file execution\n* Shellcode loader, meterpreter, in-memory PE execution\n* File management, zipping utility\n* Cred stealing plugin (`lemon`) - Retrieves FileZilla, Navicat, WinSCP, and Xmanager credentials\n* Browser password scraping\n* Port scanning, HTTP proxy configuration, note-taking\n\n![Command execution plugin from Z-Godzilla_ekp](/assets/images/tollbooth/image10.png \"Command execution plugin from Z-Godzilla_ekp\")\n\nBelow is a network traffic example showing the operator traffic to the webshell (`error.aspx`) using `Z-Godzilla_ekp`. The webshell will take the Base64-encoded AES-encrypted data from the HTTP POST request, then execute the .NET assembly in-memory. These requests are disguised by embedding the encrypted data in HTTP POST parameters in order to blend in as normal network traffic.\n\n![Example of POST request using Z-Godzilla_ekp](/assets/images/tollbooth/image3.png \"Example of POST request using Z-Godzilla_ekp\")\n\n## Rootkit analysis\n\nThe attacker hid their presence on the infected machine by deploying a kernel rootkit. This rootkit works in conjunction with a userland application named HijackDriverManager, whose interface strings are written in Chinese, to interact with the driver. For this analysis, we examined both the malicious rootkit and the code from the original “Hidden” open-source project from which it was derived. Internally, we are calling the rootkit `HIDDENDRIVER` and the userland application `HIDDENCLI`.\n\nThis malicious software is a modified version of the open source rootkit [Hidden](https://github.com/JKornev/hidden), which has been available on GitHub for years. The malware author made minor modifications before compilation. For example, the rootkit uses Direct Kernel Object Manipulation (DKOM) to hide its presence and maintain persistence on the compromised system. The compiled driver still has “hidden” within the compilation path string, indicating that they used the “Hidden” rootkit project. \n\n![Rookit’s string showing the compilation path](/assets/images/tollbooth/image1.png \"Rookit’s string showing the compilation path\")\n\nUpon initial loading into the kernel, the driver prioritizes a series of critical initialization steps. It first invokes seven initialization functions: \n\n* `InitializeConfigs`\n* `InitializeKernelAnalyzer`\n* `InitializePsMonitor`\n* `InitializeFSMiniFilter`\n* `InitializeRegistryFilter`\n* `InitializeDevice`\n* `InitializeStealthMode`\n\nTo prepare its internal components before populating its driver object and associated fields, such as major functions.\n\n![Malicious rootkit initialization function](/assets/images/tollbooth/image7.png \"Malicious rootkit initialization function\")\n\nThe following sections will elaborate on each of these seven critical initialization functions, detailing their purpose.\n\n### InitializeConfigs\n\nThe rootkit's initial action is to run the `InitializeConfigs` function. This function's sole purpose is to read the rootkit's configuration from the driver's service key in the Windows registry, which is populated by the userland application. These values are extracted and put in global configuration variables that will be later used by the rootkit.\n\nThe following table summarizes the configuration parameters that the rootkit extracts from the registry:\n\n| Registry name       | Description                                                    | Type   |\n|---------------------|----------------------------------------------------------------|--------|\n| `Kbj_WinkbjFsDirs`    | A list of directory paths to be hidden                         | string |\n| `Kbj_WinkbjFsFiles`   | A list of file paths to be hidden                              | string |\n| `Kbj_WinkbjRegKeys`   | A list of registry keys to be hidden                           | string |\n| `Kbj_WinkbjRegValues` | A list of registry values to be hidden                         | string |\n| `Kbj_FangxingImages`  | A list of process images to whitelist                          | string |\n| `Kbj_BaohuImages`     | A list of process images to protect                            | string |\n| `Kbj_WinkbjImages`    | A list of process images to be hidden                          | string |\n| `Kbj_Zhuangtai`       | A global kill switch that is set from userland                 | bool   |\n| `Kbj_YinshenMode`     | This flag signals that the rootkit must conceal its artifacts. | bool   |\n\n![Rootkit retrieves values from its configuration stored in the registry](/assets/images/tollbooth/image9.png \"Rootkit retrieves values from its configuration stored in the registry\")\n\n### InitializeKernelAnalyzer\n\nIts purpose is to dynamically scan the kernel memory to find the addresses of the `PspCidTable` and `ActiveProcessLinks` that are needed.\n\nThe [`PspCidTable`](http://uninformed.org/index.cgi?v=3\u0026a=7\u0026p=6) is the kernel's structure that serves as a table for process and thread IDs, while [`ActiveProcessLinks`](https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/manipulating-activeprocesslinks-to-unlink-processes-in-userland) under the `_EPROCESS` structure serves as a doubly-linked list connecting all currently running processes. It allows the system to track and traverse all active processes. By removing entries from this list, it is possible to hide processes from enumeration tools like [Process Explorer](https://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer).\n\n#### LookForPspCidTable\n\nIt searches for the `PspCidTable` address by disassembling the function [`PsLookupProcessByProcessId`](https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-pslookupprocessbyprocessid)with the library [Zydis](https://github.com/zyantific/zydis) and parsing it.\n\n![Original hidden code: PspCidTable lookup](/assets/images/tollbooth/image15.png \"Original hidden code: PspCidTable lookup\")\n\n#### LookForActiveProcessLinks\n\nThis function determines the offset of the `ActiveProcessLinks` field within the `_EPROCESS` structure. It uses hardcoded offset values specific to different Windows versions. It has a fast scanning process that relies on these hardcoded values to find the `ActiveProcessLinks` field, which will be validated by another function. In case it fails to find it with the hardcoded values, it takes a brute-force approach by starting from a hardcoded relative offset to the maximum possible offset.\n\n### InitializePsMonitor\n\n`InitializePsMonitor` sets up the rootkit's process monitoring and manipulation engine. This is the heart of its ability to hide processes.\n\nIt first initializes three [AVL tree structures](https://medium.com/@ys.yogendra22/avl-tree-self-balancing-binary-search-tree-20188ff58b05) to hold information (rules) for excluding, protecting, and hiding processes. It uses [`RtlInitializeGenericTableAvl`](https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-rtlinitializegenerictableavl) for high-speed lookups and populates them with data from the configuration. It then sets up different kernel callbacks to monitor the system using the set of rules.\n\n#### Registering object manager callback with (ObRegisterCallbacks)\n\nThis hook registers the `ProcessPreCallback` and `ThreadPreCallback` functions. The [kernel's Object Manager](https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/windows-kernel-mode-object-manager) executes this code before it completes any request to create or duplicate a handle to a process or thread.\n\n![Rootkit registering process and thread precallbacks](/assets/images/tollbooth/image30.png \"Rootkit registering process and thread precallbacks\")\n\nWhen a process tries to get a handle on another process, the callback function `ProcessPreCallback` is called. It will first check if the destination process is a protected process (in the list). If it is the case, instead of not granting access, it will simply downgrade its rights over the protected process with the access set to `SYNCHRONIZE | PROCESS_QUERY_LIMITED_INFORMATION`.\n\nThis will ensure that processes cannot interact with/inspect, or kill the protected process.\n\nThe same mechanism applies to threads.\n\n#### Process Creation Callback(PsSetCreateProcessNotifyRoutineEx)\n\nThe rootkit registers a callback with the [`PsSetCreateProcessNotifyRoutineEx`](https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-pssetcreateprocessnotifyroutineex) API on process creation. When a new process is launched, this callback runs a function `CheckProcessFlags` that checks the process’s image against the configured list of image paths. It then creates an entry for this new process in its internal tracking table, setting its `excluded`, `protected`, and `hidden` flags accordingly. \n\nBehavior based on flags:\n\n* **Excluded**\n    * The rootkit will ignore the process and just let it run as expected.\n* **Protected**\n    * The rootkit will not allow any other process to get a privileged handle on it, similar to what happens in `ProcessPreCallback`.\n* **Hidden**\n    * The rootkit will hide the process by Direct Kernel Object Manipulation (DKOM). Directly manipulating a process's kernel structures at the very instant of its creation can be unstable. In the process creation callback, if a process needs to be hidden, it is unlinked from the ActiveProcessLinks list. However, it sets a `postponeHiding` flag that will be explained below. \n\n#### The Image Load callback (PsSetLoadImageNotifyRoutine)\n\nThis registers the `LoadProcessImageNotifyCallback` using [`PsSetLoadImageNotifyRoutine`](https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-pssetloadimagenotifyroutine), which the kernel calls whenever an executable image (a `.exe` or `.dll`) is loaded into a process's memory.\n\nWhen the image is loaded, the callback checks the `postponeHiding` flag; if set, it calls `UnlinkProcessFromCidTable` to remove it from the master process ID table (`PspCidTable`).\n\n### InitializeFSMiniFilter\n\nThe function defines its capabilities in the [`FilterRegistration structure(FLT_REGISTRATION)`](https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/ns-fltkernel-_flt_registration). This structure tells the operating system which functions to call for which types of file system operations. It registers callbacks for the following requests:\n\n* [`IRP_MJ_CREATE`](https://learn.microsoft.com/en-us/previous-versions/windows/drivers/ifs/irp-mj-create): Intercepts any attempt to open or create a file or directory.\n* [`IRP_MJ_DIRECTORY_CONTROL`](https://learn.microsoft.com/en-us/previous-versions/windows/drivers/ifs/irp-mj-directory-control): Intercepts any attempt to list the contents of a directory.\n\n#### FltCreatePreOperation(IRP_MJ_CREATE)\n\nThis is a pre-operation callback, when a process tries to create/open a file, this function is triggered. It will check the path against its list of files to be hidden. If a match is found, it will change the operation result of the IRP request to `STATUS_NO_SUCH_FILE`, indicating to the requesting process that the file does not exist, except if the process is included in the excluded list.\n\n#### FltDirCtrlPostOperation(IRP_MJ_DIRECTORY_CONTROL)\n\nThis is a post-operation callback; the implemented hook essentially intercepts the directory listening generated by the system and modifies it by removing any files listed as hidden.\n\n### InitializeRegistryFilter\n\nAfter concealing its processes and files, the rootkit's next step is to erase entries from the Windows Registry. The `InitializeRegistryFilter` function accomplishes this by installing a registry filtering callback to intercept and modify registry operations.\n\nIt registers a callback using the [`CmRegisterCallbackEx`](https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-cmregistercallbackex) API, using the same principle as with files. If the registry key or value is in the hidden registry list, the callback function will return the status `STATUS_NOT_FOUND`.\n\n### InitializeDevice\n\nThe `InitializeDevice` function does the driver initialization needed, and it sets up an [`IOCTL communication`](https://learn.microsoft.com/en-us/windows/win32/devio/device-input-and-output-control-ioctl-) so that the userland application can communicate with it directly\n\nThe following is a table describing each IOCTL command handled by the driver.\n\n| IOCTL command                       | Description                                                                                                            |\n|-------------------------------------|------------------------------------------------------------------------------------------------------------------------|\n| `HID_IOCTL_SET_DRIVER_STATE`          | Soft enable/disable the rootkit functionalities by setting a global state flag that acts as a master on/off switch.    |\n| `HID_IOCTL_GET_DRIVER_STATE`          | Retrieve the current state of the rootkit (enabled/disabled).                                                          |\n| `HID_IOCTL_ADD_HIDDEN_OBJECT`         | Adds a new rule to hide a specific file, directory, registry key, or value.                                            |\n| `HID_IOCTL_REMOVE_HIDDEN_OBJECT`      | Removes a single hiding rule by its unique ID.                                                                         |\n| `HID_IOCTL_REMOVE_ALL_HIDDEN_OBJECTS` | Remove all hidden objects for a specific object type(registry keys/values, files, directories).                        |\n| `HID_IOCTL_ADD_OBJECT`                | Adds a new rule to automatically hide, protect, or exclude a process based on its image path.                          |\n| `HID_IOCTL_GET_OBJECT_STATE`          | Queries the current state (hidden, protected, or excluded) of a specific running process by its PID.                   |\n| `HID_IOCTL_SET_OBJECT_STATE`          | This command modifies the state (hidden, protected, or excluded) of a specific running process, identified by its PID. |\n| `HID_IOCTL_REMOVE_OBJECT`             | Removes a single process rule (hide, protect, or exclude) by its unique ID.                                            |\n| `HID_IOCTL_REMOVE_ALL_OBJECTS`       | This command clears all process states and image rules of a specific type.                                             |\n\n### InitializeStealthMode\n\nAfter successfully setting up its configuration, process callbacks, and file system filters, the rootkit executes its final initialization routine: `InitializeStealthMode`. If the configuration flag `Kbj_YinshenMode` is enabled, it will hide every artifact associated with the rootkit, including registry keys, the `.sys` file, and other related components, using the same techniques described above.\n\n### Code Variations\n\nWhile the malware is heavily based on the `HIDDENDRIVER` source code, our analysis identified several minor alterations. The following section breaks down the notable code differences we observed.\n\nThe original code in the `IsProcessExcluded` function consistently excludes the system process (PID 4) from the rootkit's operations. However, the malicious rootkit has an exclusion list for additional process names, as illustrated in the provided screenshot.\n\n![Difference between “Hidden” and the rootkit function IsProcessExcluded](/assets/images/tollbooth/image20.png \"Difference between “Hidden” and the rootkit function IsProcessExcluded\")\n\nThe original code's callback for filtering system information (including files, directories, and registries) used the `IsDriverEnabled` function to verify if the driver functionalities were enabled. However, the observed rootkit introduced an additional, automatic whitelist check for processes with the image name hijack, which corresponds to the userland application.\n\n![“Hidden” source code: FltDirCtrlPostOperation callback](/assets/images/tollbooth/image28.png \"“Hidden” source code: FltDirCtrlPostOperation callback\")\n\n![“Hidden” source code: PsGetProcessImageFileName usage](/assets/images/tollbooth/image11.png \"“Hidden” source code: PsGetProcessImageFileName usage\")\n\n## RMM usage\n\nThe GotoHTTP tool is a legitimate Remote Monitoring and Management (RMM) application, deployed by the threat actor to maintain easier access to the compromised IIS server. Its “Browser-to-Client” architecture allows the attacker to control the server from any standard web browser over common web ports (`80`/`443`) by routing all traffic through GotoHTTP’s own platform, preventing direct network connection to the attacker’s own infrastructure.\n\n![gotohttp[.]com landing page](/assets/images/tollbooth/image25.png \"gotohttp[.]com landing page\")\n\nRMMs continue to [increase in popularity](https://www.proofpoint.com/us/blog/threat-insight/remote-monitoring-and-management-rmm-tooling-increasingly-attackers-first-choice) for use at multiple points of the cyber kill chain and by various threat actors. Most anti-malware vendors do not consider them malicious in isolation and therefore do not block them outright. RMM C2 also only flows to legitimate RMM provider websites, and therefore has the same dynamics for network-based protections and monitoring. \n\nBlocking the [mass of currently active RMMs](https://github.com/magicsword-io/LOLRMM/tree/main/detections/sigma) and allowing only the enterprise's preferred RMM would be the optimal protection mechanism. However, this paradigm is only available to enterprises with the right technical knowledge, defensive tooling, mature organizational policies, and coordination across departments.\n\n## IIS module analysis\n\nThe threat actor was observed deploying both 32-bit and 64-bit versions of TOLLBOOTH, a malicious IIS module. TOLLBOOTH has been previously discussed by [Ahnlab](https://asec.ahnlab.com/en/87804/) and the security researcher, [@Azaka](https://x.com/AzakaSekai_/status/1969294757978652947). Some of the malware’s key capabilities include SEO cloaking, a management channel, and a publicly accessible webshell. We discovered both native and .NET managed versions being deployed in the wild. \n\n### Malware Config Structure\n\nTOLLBOOTH retrieves its configuration dynamically from `hxxps://c[.]cseo99[.]com/config/\u003cvictim_HTTP_host_value\u003e.json,` and the creation of each victim’s JSON config file is handled by the threat actor’s infrastructure. However, `hxxps://c[.]cseo99[.]com/config/127.0.0.1.json` responded, showing a lack of anti-analysis checks - allowing us to retrieve a copy of a config file for analysis. It can be viewed in this [GitHub Gist](https://gist.github.com/jiayuchann/b785e1f3960fa26923d821b7e93e2e94), and we will reference how some of the fields are used as appropriate.\n\nFor native modules, the config and other temporary cache files are Gzip-compressed and stored locally at a hardcoded path `C:\\\\Windows\\\\Temp\\\\_FAB234CD3-09434-8898D-BFFC-4E23123DF2C\\\\`. For the managed module, these are AES-encrypted with key `YourSecretKey123` and IV `0123456789ABCDEF`, Gzip-compressed, and stored at `C:\\\\Windows\\\\Temp\\\\AcpLogs\\\\`.\n\n### Webshell\n\nTOLLBOOTH exposes a webshell at the `/mywebdll` path, requiring a password of `hack123456!` for file uploads and execution of commands. Form submission sends a `POST` request to the `/scjg` endpoint.\n\n![Webshell interface](/assets/images/tollbooth/image17.png \"Webshell interface\")\n\nThe password is hardcoded in the binary, and this webshell feature is present in both `v1.6.0` and `v1.6.1` of the native version of TOLLBOOTH. \n\nThe file upload functionality contains a bug that stems from its sequential, order-dependent parsing of `multipart/form-data` fields. The standard HTML form is structured such that the file input field appears before the directory input fields. The server processing the request parts attempts to handle the file data before the destination directory, creating a dependency conflict that causes standard uploads to fail. By manually reordering the `multipart/form-data` parts, a successful file upload can still be triggered.\n\n![File upload PoC](/assets/images/tollbooth/image12.png \"File upload PoC\")\n\n### Management Channel\n\nTOLLBOOTH exposes a few additional endpoints for C2 operators’ management/debug purposes. They are only accessible by setting the User Agent to one of the following (though it is configurable):\n\nThe `/health` endpoint provides a quick way to assess the module’s health, returning the file name to access the config stored at `c[.]cseo99[.]com`, disk space information, the module's installation path, and the version of TOLLBOOTH.\n\n![Health endpoint response](/assets/images/tollbooth/image8.png \"Health endpoint response\")\n\nThe `/debug` endpoint provides more details, including a summary of the configuration, cache directory, HTTP request information, etc.\n\n\n![/debug content](/assets/images/tollbooth/image31.png \"/debug content\")\n\nThe parsed configuration is accessible at `/conf`.\n\n\n![/conf content](/assets/images/tollbooth/image24.png \"/conf content\")\n\nThe `/clean` endpoint allows the operator to clear the current configuration by deleting the config files stored locally (`clean?type=conf`) in order to update them on the victim server, clear any other temporary caches the malware uses (`clean?type=conf`), or clear both - everything in the `C:\\\\Windows\\\\Temp\\\\_FAB234CD3-09434-8898D-BFFC-4E23123DF2C\\\\` path (`clean?type=all`).\n\n### SEO Cloaking\n\nThe main goal of TOLLBOOTH is [SEO cloaking](https://support.google.com/adspolicy/answer/15938075?sjid=10977824559696952423-NC#Cloaking), a process that involves presenting keyword-optimized content to search engine crawlers, while concealing it from casual user browsing, to achieve higher search rankings for the page. Once a human visitor clicks the link from the boosted search results, the malware redirects them to a malicious or fraudulent page. This tactic is an effective way to increase traffic to malicious pages compared to alternatives like direct phishing, because users trust search engine results they request more than unsolicited emails.\n\nTOLLBOOTH differentiates between bots and visitors by checking the User Agent and the Referer headers for values defined in the config. \n\nBoth the native and the managed modules are implemented almost identically. The only difference is that native modules `v1.6.0` and `v1.6.1` check both the User Agent and Referer against the `seoGroupRefererMatchRules` list, and the .NET module `v1.6.1` checks the User Agent against the `seoGroupUaMatchRules` list and Referer against the `seoGroupRefererMatchRules` list. \n\nBased on the current configuration, the values for `seoGroupUaMatchRules` and `seoGroupRefererMatchRules` are `googlebot` and `google`, respectively. A GoogleBot crawler would have a User Agent match and not a Referer match, whereas a human visitor would have a Referer match but not a User Agent match. Looking at the fallback list containing both `bing` and `yahoo` suggests that those search engines were targeted in the past as well.\n\n![Functions and fallback lists for User Agent and Referer checks](/assets/images/tollbooth/image29.png \"Functions and fallback lists for User Agent and Referer checks\")\n\nThe code snippet below is responsible for building a page filled with keyword-stuffed links that search engine crawlers will see.\n\n![Function for generating page that links to SEO content](/assets/images/tollbooth/image23.png \"Function for generating page that links to SEO content\")\n\nThe module constructs a link farm in two phases. First, to build internal link density, it retrieves a list of random keywords from resource URIs defined in the `affLinkMainWordSeoResArr` configuration field. For each keyword, it generates a \"local link\" pointing to another SEO page on the same compromised website. Next, it builds the external network by retrieving \"affiliate link resources\" from the `affLinkSeoResArr` field. These resources are a list of URIs pointing to SEO pages on other external domains that are also infected with TOLLBOOTH. The URIs look like `hxxps://f[.]fseo99[.]com/\u003cdate\u003e/\u003cmd5_file_hash\u003e\u003c.txt/.html\u003e` in the configuration. The module then creates hyperlinks from the current site to these other victims. This technique, known as [link farming](https://en.wikipedia.org/wiki/Link_farm), is designed to artificially inflate search engine rankings across the entire network of compromised sites.\n\nBelow is an example of what a crawler bot would see when visiting the landing page of a web server infected with TOLLBOOTH.\n\n![Visiting the landing page with User Agent “google”](/assets/images/tollbooth/image4.png \"Visiting the landing page with User Agent “google”\")\n\nURL path prefixes to the SEO pages contain words or phrases from the `seoGroupUrlMatchRules` config field. This is also referenced in the site redirection logic targeting visitors. These are currently:\n\n* `stock`\n* `invest`\n* `summary`\n* `datamining`\n* `market-outlook`\n* `bullish-on`\n* `news-overview`\n* `news-volatility`\n* `video/`\n* `app/`\n* `blank/`\n\n![Example local links](/assets/images/tollbooth/image32.png \"Example local links\")\n\nTemplates and content for SEO pages are also externally retrieved from URIs that look like `hxxps://f[.]fseo99[.]com/\u003cdate\u003e/\u003cmd5_file_hash\u003e\u003c.txt/.html\u003e` in the config. Here is an example of what one of the SEO pages looks like:\n\n![Example SEO page](/assets/images/tollbooth/image5.png \"Example SEO page\")\n\nFor the user redirection logic, the module first gathers a fingerprint of the visitor, including their IP address, user agent, referrer, and the SEO page’s target keyword. It then sends this information via a POST request to `hxxps://api[.]aseo99[.]com/client/landpage`. If the request is successful, the server responds with a JSON object containing a specific `landpageUrl`, which becomes the destination for the redirect.\n\n![Requesting for page to redirect to](/assets/images/tollbooth/image18.png \"Requesting for page to redirect to\")\n\nIf the communication fails for any reason, TOLLBOOTH falls back to constructing a new URL pointing to the same C2 endpoint but instead encodes the visitor’s information directly into the URL as GET parameters. Finally, the chosen URL - either from the successful C2 response or the fallback - is embedded into a JavaScript snippet (`window.location.href`) and sent to the victim’s browser, forcing an immediate redirection.\n\n![Fallback request for the page to redirect to](/assets/images/tollbooth/image26.png \"Fallback request for the page to redirect to\")\n\n### Page Hijacker\n\nFor the native modules, if the URI path contains `xlb`, TOLLBOOTH responds with a custom loader page containing a script tag. This script's src attribute points to a dynamically generated URL, `mlxya[.]oss-accelerate[.]aliyuncs[.]com/\u003c12_random_alphanumeric_characters\u003e`, which is used to retrieve an obfuscated next-stage JavaScript payload.\n\n![Random characters appended to domain hosting JS payload](/assets/images/tollbooth/image27.png \"Random characters appended to domain hosting JS payload\")\n\nThe deobfuscated payload appears to be a page-replacement tool that executes based on specific trigger keywords (e.g., `xlbh`, `mxlb`) found in the URL. Once triggered, it contacts one of the attacker-controlled endpoints at `asf-sikkeiyjga[.]cn-shenzhen[.]fcapp[.]run/index/index?href=` or `ask-bdtj-selohjszlw[.]cn-shenzhen[.]fcapp[.]run/index/index?key=`, appending the current page’s URL as a Base64-encoded parameter to identify the compromised site. The script then uses `document.write()` to completely wipe the current page’s DOM and replace it with the server’s response. While the final payload could not be retrieved at the time of writing, this technique is designed to inject attacker-controlled content, most commonly a malicious HTML page or a JS redirect to another malicious site.\n\n![Deobfuscated page hijacker payload](/assets/images/tollbooth/image19.png \"Deobfuscated page hijacker payload\")\n\n## Campaign targeting\n\nWhile conducting the analysis of TOLLBOOTH and its associated webshell, we identified multiple mechanisms to identify additional victims through active and semi-passive collection methods.\n\nWe then partnered with [@SreekarMad](https://x.com/SreekarMad) at [Validin](https://www.validin.com/) to leverage his expertise and their scanning infrastructure in an effort to develop a more comprehensive list of victims. \n\nAt the time of publication, 571 IIS server victims were identified with active TOLLBOOTH infections. \n\n![Geographic distribution of victims serving TOLLBOOTH SEO cloaking](/assets/images/tollbooth/image2.png \"Geographic distribution of victims serving TOLLBOOTH SEO cloaking\")\n\nThese servers are globally distributed (with one major exception, described below), and do not fit into any neat industry vertical buckets. For these reasons, along with the sheer scale of the operation, we are led to believe that victim selection is untargeted and leverages automated scanning to identify IIS servers reusing publicly listed machine keys.\n\nThe collaboration with Validin and Texas A\u0026M System Cybersecurity yielded a robust amount of metadata about the additional TOLLBOOTH-infected victims.\n\n![Metadata collected from an additional victim](/assets/images/tollbooth/image21.png \"Metadata collected from an additional victim\")\n\nAutomated exploitation may also be employed, but TAMUS Cybersecurity noted that the post-exploitation activity appeared to be interactive.\n\nValidin discovered other potentially infected domains linked through the SEO farming link configs, but when checked for the webshell interface, found it inaccessible on some. After conducting a deeper manual investigation into these servers, we determined that they had been, in fact, TOLLBOOTH-infected, but either the owners remediated the issue or the attackers backed themselves out.\n\nSubsequent scanning revealed that many of the same servers were reinfected. We have taken this to indicate that remediation was incomplete. One plausible explanation is that merely removing the threat does not close the vulnerability left open by the machine key reuse. So, victims who omit this final step are likely to be reinfected through the same mechanism. See the “Remediating REF3927” section below for additional details.\n\n### Geography\n\nThe geographic distribution of victims notably excludes any servers within China’s borders. One server was identified in Hong Kong, but it was hosting a `.co.uk` domain. This probable geofencing aligns with behavioral patterns from other criminal threats, where they implement mechanisms to ensure they do not target systems in their home countries. This mitigates their risk of prosecution as the governments of these countries tend to turn a blind eye toward, if not outright endorse, criminal activity targeting foreigners.\n\n### Diamond model\n\nElastic Security Labs utilizes the [Diamond Model](https://www.activeresponse.org/wp-content/uploads/2013/07/diamond.pdf) to describe high-level relationships between adversaries, capabilities, infrastructure, and victims of intrusions. While the Diamond Model is most commonly used with single intrusions and leverages Activity Threading (section 8) to create relationships between incidents, an adversary-centered (section 7.1.4) approach allows for a single diamond.\n\n![REF3927 Diamond Model](/assets/images/tollbooth/image22.png \"REF3927 Diamond Model\")\n\n## Remediating REF3927\n\nRemediation of the infection itself can be completed through industry best practices, such as reverting to a clean state and addressing malware and persistence mechanisms. However, in the face of potential automated scanning and exploitation, the vulnerability of the reused machine key remains for whichever bad actor wants to take over the server.\n\nTherefore, remediation must include rotation of machine keys to a new, [properly generated](https://support.winhost.com/kb/a1623/how-to-generate-a-machine-key-in-iis-manager.aspx) key.\n\n## Conclusion\n\nThe REF3927 campaign highlights how a simple configuration error, such as using a publicly exposed machine key, can lead to significant compromise. In this event, Texas A\u0026M University System Cybersecurity and the affected customer took swift action to remediate the server, but based on our research, there continue to be other victims targeted using the same techniques.\n\nThe threat actor’s integration of open-source tooling, RMM software, and a malicious driver is an effective combination of techniques that have proven successful in their operations. Administrators of publicly exposed IIS environments should audit their machine key configurations, ensure robust security logging, and leverage endpoint detection solutions such as [Elastic Defend](https://www.elastic.co/security/endpoint-security) during potential incidents.\n\n## Detection logic\n\n### Detection rules\n\n* [Web Shell Detection: Script Process Child of Common Web Processes](https://github.com/elastic/detection-rules/blob/main/rules/windows/persistence_webshell_detection.toml)\n\n### Prevention rules\n\n* [Suspicious Execution via Windows Services](https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/privilege_escalation_suspicious_execution_via_windows_services.toml)\n* [Potential Shellcode Injection via a WebShell](https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/defense_evasion_potential_shellcode_injection_via_a_webshell.toml)\n* [Execution from Suspicious Directory](https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/defense_evasion_execution_from_suspicious_directory.toml)\n\n#### YARA signatures\n\nElastic Security has created the following YARA rules to prevent the malware observed in REF3927:\n\n* [Windows.Trojan.Tollbooth](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Tollbooth.yar)\n* [Windows.Trojan.HiddenCli](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_HiddenCli.yar)\n* [Windows.Trojan.HiddenDriver](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_HiddenDriver.yar)\n\n## REF3927 through MITRE ATT\u0026CK\n\nElastic uses the [MITRE ATT\u0026CK](https://attack.mitre.org/) framework to document common tactics, techniques, and procedures that threats use against enterprise networks.\n\n### Tactics\n\nTactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.\n\n* [Initial Access](https://attack.mitre.org/tactics/TA0001/)\n* [Execution](https://attack.mitre.org/tactics/TA0002/)\n* [Defense Evasion](https://attack.mitre.org/tactics/TA0005/)\n* [Credential Access](https://attack.mitre.org/tactics/TA0006/)\n* [Collection](https://attack.mitre.org/tactics/TA0009/)\n* [Exfiltration](https://attack.mitre.org/tactics/TA0010)\n\n### Techniques\n\nTechniques represent how an adversary achieves a tactical goal by performing an action.\n\n* [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190/)\n* [Server Software Component: IIS Components](https://attack.mitre.org/techniques/T1505/004/)\n* [OS Credential Dumping](https://attack.mitre.org/techniques/T1003/)\n* [Hide Artifacts: Hidden Files and Directories](https://attack.mitre.org/techniques/T1564/001/)\n* [Data from Local System](https://attack.mitre.org/techniques/T1005/)\n* [Rootkit](https://attack.mitre.org/techniques/T1014/)\n* [Valid Accounts](https://attack.mitre.org/techniques/T1078/)\n\n## Observations\n\nThe following [observables](https://github.com/elastic/labs-releases/tree/main/indicators/tollbooth) were discussed in this research.\n\n|                                                                                                                           Observable                                                                                                                          |     Type    |         Name        |                              Reference                              |\n|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------|---------------------|---------------------------------------------------------------------|\n|                                                                                                `913431f1d36ee843886bb052bfc89c0e5db903c673b5e6894c49aabc19f1e2fc`                                                                                               |   SHA-256   |    `WingtbCLI.exe`    |                              HIDDENCLI                              |\n|                                                                                                `f9dd0b57a5c133ca0c4cab3cca1ac8debdc4a798b452167a1e5af78653af00c1`                                                                                               |   SHA-256   |      `Winkbj.sys`     |                             HIDDENDRIVER                            |\n|                                                                                                `c1ca053e3c346513bac332b5740848ed9c496895201abc734f2de131ec1b9fb2`                                                                                               |   SHA-256   |      `caches.dll`     |                              TOLLBOOTH                              |\n|                                                                                                `c348996e27fc14e3dce8a2a476d22e52c6b97bf24dd9ed165890caf88154edd2`                                                                                               |   SHA-256   |     `scripts.dll`     |                              TOLLBOOTH                              |\n|                                                                                                `82b7f077021df9dc2cf1db802ed48e0dec8f6fa39a34e3f2ade2f0b63a1b5788`                                                                                               |   SHA-256   |     `scripts.dll`     |                              TOLLBOOTH                              |\n|                                                                                                `bd2de6ca6c561cec1c1c525e7853f6f73bf6f2406198cd104ecb2ad00859f7d3`                                                                                               |   SHA-256   |      `caches.dll`     |                              TOLLBOOTH                              |\n|                                                                                                `915441b7d7ddb7d885ecfe75b11eed512079b49875fc288cd65b023ce1e05964`                                                                                               |   SHA-256   | `CustomIISModule.dll` |                              TOLLBOOTH                              |\n|                                                                                                                        `c[.]cseo99[.]com`                                                                                                                       | domain-name |                     |                       TOLLBOOTH config server                       |\n|                                                                                                                        `f[.]fseo99[.]com`                                                                                                                       | domain-name |                     |                 TOLLBOOTH SEO farming config server                 |\n|                                                                                                                       `api[.]aseo99[.]com`                                                                                                                      | domain-name |                     |          TOLLBOOTH crawler reporting \u0026 page redirector API          |\n|                                                                                                             `mlxya[.]oss-accelerate.aliyuncs[.]com`                                                                                                             | domain-name |                     |            TOLLBOOTH page hijacker payload hosting server           |\n|                                                                                                            `asf-sikkeiyjga[.]cn-shenzhen[.]fcapp.run`                                                                                                           | domain-name |                     |           TOLLBOOTH page hijacker content-fetching server           |\n|                                                                                                        `ask-bdtj-selohjszlw[.]cn-shenzhen[.]fcapp[.]run`                                                                                                        | domain-name |                     |           TOLLBOOTH page hijacker content-fetching server           |\n|                                                                                                `bae5a7722814948fbba197e9b0f8ec5a6fe8328c7078c3adcca0022a533a84fe`                                                                                               |   SHA-256   |        `1.aspx`       |      Godzilla-forked webshell (Similar sample from VirusTotal)      |\n|                                                                                                `230b84398e873938bbcc7e4a1a358bde4345385d58eb45c1726cee22028026e9`                                                                                               |   SHA-256   |     `GotoHTTP.exe`    |                               GotoHTTP                              |\n| `Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.13) Gecko/20101213 Opera/9.80 (Windows NT 6.1; U; zh-tw) Presto/2.7.62 Version/11.01 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36` |  User-Agent |                     | User-Agent observed during exploitation via IIS ViewState injection |\n\n## References\n\nThe following were referenced throughout the above research:\n\n* [https://www.microsoft.com/en-us/security/blog/2025/02/06/code-injection-attacks-using-publicly-disclosed-asp-net-machine-keys/](https://www.microsoft.com/en-us/security/blog/2025/02/06/code-injection-attacks-using-publicly-disclosed-asp-net-machine-keys/)\n* [https://asec.ahnlab.com/en/87804/](https://asec.ahnlab.com/en/87804/)\n* [https://unit42.paloaltonetworks.com/initial-access-broker-exploits-leaked-machine-keys/](https://unit42.paloaltonetworks.com/initial-access-broker-exploits-leaked-machine-keys/)\n* [https://blog.blacklanternsecurity.com/p/aspnet-cryptography-for-pentesters](https://blog.blacklanternsecurity.com/p/aspnet-cryptography-for-pentesters)\n* [https://github.com/ekkoo-z/Z-Godzilla_ekp](https://github.com/ekkoo-z/Z-Godzilla_ekp)\n* [https://x.com/AzakaSekai_/status/1969294757978652947](https://x.com/AzakaSekai_/status/1969294757978652947)","code":"var Component=(()=\u003e{var p=Object.create;var o=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var b=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=\u003e{for(var n in e)o(t,n,{get:e[n],enumerable:!0})},l=(t,e,n,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!u.call(t,r)\u0026\u0026r!==n\u0026\u0026o(t,r,{get:()=\u003ee[r],enumerable:!(a=g(e,r))||a.enumerable});return t};var y=(t,e,n)=\u003e(n=t!=null?p(f(t)):{},l(e||!t||!t.__esModule?o(n,\"default\",{value:t,enumerable:!0}):n,t)),k=t=\u003el(o({},\"__esModule\",{value:!0}),t);var c=b((I,s)=\u003e{s.exports=_jsx_runtime});var T={};w(T,{default:()=\u003eh,frontmatter:()=\u003ev});var i=y(c()),v={title:\"TOLLBOOTH: What's yours, IIS mine\",slug:\"tollbooth\",date:\"2025-10-22\",description:\"REF3927 abuses publicly disclosed ASP.NET machine keys to compromise IIS servers and deploy TOLLBOOTH SEO cloaking modules globally.\",author:[{slug:\"daniel-stepanic\"},{slug:\"jia-yu-chan\"},{slug:\"salim-bitam\"},{slug:\"seth-goodwin\"},{slug:\"andrew-pease\"},{slug:\"braxton-williams\"}],image:\"tollbooth.png\",category:[{slug:\"malware-analysis\"}],tags:[\"ref3927\",\"tollbooth\",\"hiddendriver\",\"godzilla\",\"rootkit\",\"gotohttp\",\"iis\",\"rmm\",\"seo cloaking\"]};function d(t){let e={a:\"a\",code:\"code\",div:\"div\",h2:\"h2\",h3:\"h3\",h4:\"h4\",img:\"img\",li:\"li\",p:\"p\",strong:\"strong\",table:\"table\",tbody:\"tbody\",td:\"td\",th:\"th\",thead:\"thead\",tr:\"tr\",ul:\"ul\",...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:\"introduction\",children:\"Introduction\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"In September 2025, \",(0,i.jsx)(e.a,{href:\"https://www.cyber.tamus.edu/\",rel:\"nofollow\",children:\"Texas A\u0026M University System (TAMUS) Cybersecurity\"}),\", a managed detection and response provider in collaboration with Elastic Security Labs, discovered post-exploitation activity by a Chinese-speaking threat actor who installed a malicious IIS module, which we are calling TOLLBOOTH. During this time, we observed a Godzilla-forked webshell \",(0,i.jsx)(e.a,{href:\"https://github.com/ekkoo-z/Z-Godzilla_ekp\",rel:\"nofollow\",children:\"framework\"}),\", the use of the Remote Monitoring and Management (RMM) tool GotoHTTP, along with a malicious driver used to conceal their activity. The threat actor exploited a misconfigured IIS web server that used ASP.NET machine keys found in public resources, such as Microsoft\\u2019s documentation or StackOverflow support pages.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"A similar chain of events was first \",(0,i.jsx)(e.a,{href:\"https://www.microsoft.com/en-us/security/blog/2025/02/06/code-injection-attacks-using-publicly-disclosed-asp-net-machine-keys/\",rel:\"nofollow\",children:\"reported\"}),\" by Microsoft in February, earlier this year. Our team believes this is the continuation of the same threat activity that AhnLab also \",(0,i.jsx)(e.a,{href:\"https://asec.ahnlab.com/en/87804/\",rel:\"nofollow\",children:\"detailed\"}),\" in April, based on similar malware and behaviors. During this event, we were able to leverage our partnership with Texas A\u0026M System Cybersecurity to collect insights around the activity. Additionally, through collaboration with \",(0,i.jsx)(e.a,{href:\"https://www.validin.com/\",rel:\"nofollow\",children:\"Validin\"}),\", leveraging their global scanning infrastructure, we\\u2019ve determined that organizations worldwide have been impacted by this campaign. The following report will detail the events and tooling used in this activity cluster, known as REF3927. Our hope is to raise more awareness of this activity among defenders and organizations, as it is actively being abused at a global scale.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"key-takeaways\",children:\"Key takeaways\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Threat actors are abusing misconfigured IIS servers using publicly exposed machine keys\"}),`\n`,(0,i.jsx)(e.li,{children:\"Post-compromise behaviors include using a malicious driver, remote monitoring tooling, credential dumping, webshell deployment, and IIS malware\"}),`\n`,(0,i.jsx)(e.li,{children:\"Threat actors adapted the open source \\u201CHidden\\u201D rootkit project to hide their presence\"}),`\n`,(0,i.jsx)(e.li,{children:\"The main objective appears to be to install an IIS backdoor, called TOLLBOOTH, that includes SEO cloaking and webshell capabilities\"}),`\n`,(0,i.jsx)(e.li,{children:\"This campaign included large-scale exploitation across geographies and industry verticals\"}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"campaign-overview\",children:\"Campaign Overview\"}),`\n`,(0,i.jsx)(e.h3,{id:\"attack-vector\",children:\"Attack vector\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Last month, Elastic Security Labs and Texas A\u0026M System Cybersecurity investigated an intrusion involving a misconfigured Windows IIS server. This was directly related to a server configured with ASP.NET machine keys that were previously published on the Internet. Machine keys used in ASP.NET applications refer to cryptographic keys used to encrypt and validate data. These keys are composed of two parts, \",(0,i.jsx)(e.code,{children:\"ValidationKey\"}),\" and \",(0,i.jsx)(e.code,{children:\"DecryptionKey\"}),\", which are used to secure ASP.NET features such as \",(0,i.jsx)(e.code,{children:\"ViewState\"}),\" and authentication cookies.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image16.png\",alt:\"REF3927 attack pattern \u0026 TOLLBOOTH SEO cloaking workflow\",title:\"REF3927 attack pattern \u0026 TOLLBOOTH SEO cloaking workflow\",width:\"3230\",height:\"1896\"})}),`\n`,(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:\"ViewState\"}),\" is a mechanism used by \",(0,i.jsx)(e.a,{href:\"ASP.NET\",children:\"ASP.NET\"}),\" web applications to preserve the state of a page and its controls across HTTP requests. Since HTTP is a stateless protocol, \",(0,i.jsx)(e.code,{children:\"ViewState\"}),\" allows data to be collected when the page is submitted and rendered again. This data is stored in a hidden field (\",(0,i.jsx)(e.code,{children:\"__VIEWSTATE\"}),\") on the page that is serialized and encoded in Base64. This \",(0,i.jsx)(e.code,{children:\"ViewState\"}),\" field is susceptible to \",(0,i.jsx)(e.a,{href:\"https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\",rel:\"nofollow\",children:\"deserialization attacks\"}),\", allowing an attacker to forge payloads using the application's machine keys. We have reason to believe this is part of an opportunistic campaign targeting Windows web servers using publicly exposed machine keys.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Below is an example of this type of deserialization attack, demonstrated via a POST request in a virtual environment using an open source .NET deserialization payload \",(0,i.jsx)(e.a,{href:\"https://github.com/pwntester/ysoserial.net\",rel:\"nofollow\",children:\"generator\"}),\". The \",(0,i.jsx)(e.code,{children:\"__VIEWSTATE\"}),\" field contains a URL-encoded and Base64-encoded payload that will perform a \",(0,i.jsx)(e.code,{children:\"whoami\"}),\" and write a file to a directory. With a successful exploitation request, the server will respond with an \",(0,i.jsx)(e.code,{children:\"HTTP/1.1 500 Internal Server Error\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image14.png\",alt:\"Packet capture showing an example of a successful deserialization attack\",title:\"Packet capture showing an example of a successful deserialization attack\",width:\"1079\",height:\"605\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"post-compromise-activity\",children:\"Post-compromise activity\"}),`\n`,(0,i.jsx)(e.p,{children:\"Upon initial access through ViewState injection, REF3927 was observed deploying webshells, including a Godzilla shell framework, to facilitate persistent access. They then enumerated privileges and attempted (unsuccessfully) to create their own user accounts. When account creation attempts failed, the actor then uploaded and executed the GotoHTTP Remote Monitoring and Management (RMM) tool. The threat actor created an Administrator account and attempted to dump credentials using Mimikatz, but this was prevented by Elastic Defend.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image6.png\",alt:\"Elastic Defend alerting showing hands-on post-compromise activity\",title:\"Elastic Defend alerting showing hands-on post-compromise activity\",width:\"1999\",height:\"995\"})}),`\n`,(0,i.jsx)(e.p,{children:\"With attempts to further expand the scope of the intrusion blocked, the threat actor deployed their traffic hijacking IIS Module, TOLLBOOTH, as a means to monetize their access. The actor also attempted to deploy a modified version of the open-source Hidden rootkit to obfuscate their malware. In the observed intrusion, Elastic Defend prevented both TOLLBOOTH and the rootkit from being executed.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image13.png\",alt:\"Actor attempts to deploy Mimikatz, HIDDENDRIVER, and TOLLBOOTH\",title:\"Actor attempts to deploy Mimikatz, HIDDENDRIVER, and TOLLBOOTH\",width:\"1999\",height:\"801\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"godzilla-ekp-analysis\",children:\"Godzilla EKP analysis\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"One of the main tools used by this group is a Godzilla-forked framework called \",(0,i.jsx)(e.code,{children:\"Z-Godzilla_ekp\"}),\" written by \",(0,i.jsx)(e.a,{href:\"https://github.com/ekkoo-z\",rel:\"nofollow\",children:\"ekkoo-z\"}),\". This tool piggybacks off the previous Godzilla \",(0,i.jsx)(e.a,{href:\"https://github.com/BeichenDream/Godzilla\",rel:\"nofollow\",children:\"project\"}),\" by adding new features such as an AMSI bypass plugin and masquerading its network traffic to appear more legitimate. This toolkit allows operators to generate ASP.NET, Java, C#, and PHP payloads, connect to targets, and provides different encryption options to hide network traffic. This framework uses a plugin system driven by a GUI with many features, including:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Discovery/enumeration capabilities\"}),`\n`,(0,i.jsx)(e.li,{children:\"Privilege escalation techniques\"}),`\n`,(0,i.jsx)(e.li,{children:\"Command execution/file execution\"}),`\n`,(0,i.jsx)(e.li,{children:\"Shellcode loader, meterpreter, in-memory PE execution\"}),`\n`,(0,i.jsx)(e.li,{children:\"File management, zipping utility\"}),`\n`,(0,i.jsxs)(e.li,{children:[\"Cred stealing plugin (\",(0,i.jsx)(e.code,{children:\"lemon\"}),\") - Retrieves FileZilla, Navicat, WinSCP, and Xmanager credentials\"]}),`\n`,(0,i.jsx)(e.li,{children:\"Browser password scraping\"}),`\n`,(0,i.jsx)(e.li,{children:\"Port scanning, HTTP proxy configuration, note-taking\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image10.png\",alt:\"Command execution plugin from Z-Godzilla_ekp\",title:\"Command execution plugin from Z-Godzilla_ekp\",width:\"723\",height:\"301\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Below is a network traffic example showing the operator traffic to the webshell (\",(0,i.jsx)(e.code,{children:\"error.aspx\"}),\") using \",(0,i.jsx)(e.code,{children:\"Z-Godzilla_ekp\"}),\". The webshell will take the Base64-encoded AES-encrypted data from the HTTP POST request, then execute the .NET assembly in-memory. These requests are disguised by embedding the encrypted data in HTTP POST parameters in order to blend in as normal network traffic.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image3.png\",alt:\"Example of POST request using Z-Godzilla_ekp\",title:\"Example of POST request using Z-Godzilla_ekp\",width:\"1057\",height:\"663\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"rootkit-analysis\",children:\"Rootkit analysis\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The attacker hid their presence on the infected machine by deploying a kernel rootkit. This rootkit works in conjunction with a userland application named HijackDriverManager, whose interface strings are written in Chinese, to interact with the driver. For this analysis, we examined both the malicious rootkit and the code from the original \\u201CHidden\\u201D open-source project from which it was derived. Internally, we are calling the rootkit \",(0,i.jsx)(e.code,{children:\"HIDDENDRIVER\"}),\" and the userland application \",(0,i.jsx)(e.code,{children:\"HIDDENCLI\"}),\".\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"This malicious software is a modified version of the open source rootkit \",(0,i.jsx)(e.a,{href:\"https://github.com/JKornev/hidden\",rel:\"nofollow\",children:\"Hidden\"}),\", which has been available on GitHub for years. The malware author made minor modifications before compilation. For example, the rootkit uses Direct Kernel Object Manipulation (DKOM) to hide its presence and maintain persistence on the compromised system. The compiled driver still has \\u201Chidden\\u201D within the compilation path string, indicating that they used the \\u201CHidden\\u201D rootkit project.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image1.png\",alt:\"Rookit\\u2019s string showing the compilation path\",title:\"Rookit\\u2019s string showing the compilation path\",width:\"662\",height:\"92\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Upon initial loading into the kernel, the driver prioritizes a series of critical initialization steps. It first invokes seven initialization functions:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"InitializeConfigs\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"InitializeKernelAnalyzer\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"InitializePsMonitor\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"InitializeFSMiniFilter\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"InitializeRegistryFilter\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"InitializeDevice\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"InitializeStealthMode\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"To prepare its internal components before populating its driver object and associated fields, such as major functions.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image7.png\",alt:\"Malicious rootkit initialization function\",title:\"Malicious rootkit initialization function\",width:\"1379\",height:\"547\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The following sections will elaborate on each of these seven critical initialization functions, detailing their purpose.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"initializeconfigs\",children:\"InitializeConfigs\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The rootkit's initial action is to run the \",(0,i.jsx)(e.code,{children:\"InitializeConfigs\"}),\" function. This function's sole purpose is to read the rootkit's configuration from the driver's service key in the Windows registry, which is populated by the userland application. These values are extracted and put in global configuration variables that will be later used by the rootkit.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The following table summarizes the configuration parameters that the rootkit extracts from the registry:\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Registry name\"}),(0,i.jsx)(e.th,{children:\"Description\"}),(0,i.jsx)(e.th,{children:\"Type\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"Kbj_WinkbjFsDirs\"})}),(0,i.jsx)(e.td,{children:\"A list of directory paths to be hidden\"}),(0,i.jsx)(e.td,{children:\"string\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"Kbj_WinkbjFsFiles\"})}),(0,i.jsx)(e.td,{children:\"A list of file paths to be hidden\"}),(0,i.jsx)(e.td,{children:\"string\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"Kbj_WinkbjRegKeys\"})}),(0,i.jsx)(e.td,{children:\"A list of registry keys to be hidden\"}),(0,i.jsx)(e.td,{children:\"string\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"Kbj_WinkbjRegValues\"})}),(0,i.jsx)(e.td,{children:\"A list of registry values to be hidden\"}),(0,i.jsx)(e.td,{children:\"string\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"Kbj_FangxingImages\"})}),(0,i.jsx)(e.td,{children:\"A list of process images to whitelist\"}),(0,i.jsx)(e.td,{children:\"string\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"Kbj_BaohuImages\"})}),(0,i.jsx)(e.td,{children:\"A list of process images to protect\"}),(0,i.jsx)(e.td,{children:\"string\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"Kbj_WinkbjImages\"})}),(0,i.jsx)(e.td,{children:\"A list of process images to be hidden\"}),(0,i.jsx)(e.td,{children:\"string\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"Kbj_Zhuangtai\"})}),(0,i.jsx)(e.td,{children:\"A global kill switch that is set from userland\"}),(0,i.jsx)(e.td,{children:\"bool\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"Kbj_YinshenMode\"})}),(0,i.jsx)(e.td,{children:\"This flag signals that the rootkit must conceal its artifacts.\"}),(0,i.jsx)(e.td,{children:\"bool\"})]})]})]})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image9.png\",alt:\"Rootkit retrieves values from its configuration stored in the registry\",title:\"Rootkit retrieves values from its configuration stored in the registry\",width:\"1031\",height:\"256\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"initializekernelanalyzer\",children:\"InitializeKernelAnalyzer\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Its purpose is to dynamically scan the kernel memory to find the addresses of the \",(0,i.jsx)(e.code,{children:\"PspCidTable\"}),\" and \",(0,i.jsx)(e.code,{children:\"ActiveProcessLinks\"}),\" that are needed.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The \",(0,i.jsx)(e.a,{href:\"http://uninformed.org/index.cgi?v=3\u0026a=7\u0026p=6\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"PspCidTable\"})}),\" is the kernel's structure that serves as a table for process and thread IDs, while \",(0,i.jsx)(e.a,{href:\"https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/manipulating-activeprocesslinks-to-unlink-processes-in-userland\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"ActiveProcessLinks\"})}),\" under the \",(0,i.jsx)(e.code,{children:\"_EPROCESS\"}),\" structure serves as a doubly-linked list connecting all currently running processes. It allows the system to track and traverse all active processes. By removing entries from this list, it is possible to hide processes from enumeration tools like \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer\",rel:\"nofollow\",children:\"Process Explorer\"}),\".\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"lookforpspcidtable\",children:\"LookForPspCidTable\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"It searches for the \",(0,i.jsx)(e.code,{children:\"PspCidTable\"}),\" address by disassembling the function \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-pslookupprocessbyprocessid\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"PsLookupProcessByProcessId\"})}),\"with the library \",(0,i.jsx)(e.a,{href:\"https://github.com/zyantific/zydis\",rel:\"nofollow\",children:\"Zydis\"}),\" and parsing it.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image15.png\",alt:\"Original hidden code: PspCidTable lookup\",title:\"Original hidden code: PspCidTable lookup\",width:\"1999\",height:\"699\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"lookforactiveprocesslinks\",children:\"LookForActiveProcessLinks\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"This function determines the offset of the \",(0,i.jsx)(e.code,{children:\"ActiveProcessLinks\"}),\" field within the \",(0,i.jsx)(e.code,{children:\"_EPROCESS\"}),\" structure. It uses hardcoded offset values specific to different Windows versions. It has a fast scanning process that relies on these hardcoded values to find the \",(0,i.jsx)(e.code,{children:\"ActiveProcessLinks\"}),\" field, which will be validated by another function. In case it fails to find it with the hardcoded values, it takes a brute-force approach by starting from a hardcoded relative offset to the maximum possible offset.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"initializepsmonitor\",children:\"InitializePsMonitor\"}),`\n`,(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:\"InitializePsMonitor\"}),\" sets up the rootkit's process monitoring and manipulation engine. This is the heart of its ability to hide processes.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"It first initializes three \",(0,i.jsx)(e.a,{href:\"https://medium.com/@ys.yogendra22/avl-tree-self-balancing-binary-search-tree-20188ff58b05\",rel:\"nofollow\",children:\"AVL tree structures\"}),\" to hold information (rules) for excluding, protecting, and hiding processes. It uses \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-rtlinitializegenerictableavl\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"RtlInitializeGenericTableAvl\"})}),\" for high-speed lookups and populates them with data from the configuration. It then sets up different kernel callbacks to monitor the system using the set of rules.\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"registering-object-manager-callback-with-obregistercallbacks\",children:\"Registering object manager callback with (ObRegisterCallbacks)\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"This hook registers the \",(0,i.jsx)(e.code,{children:\"ProcessPreCallback\"}),\" and \",(0,i.jsx)(e.code,{children:\"ThreadPreCallback\"}),\" functions. The \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows-hardware/drivers/kernel/windows-kernel-mode-object-manager\",rel:\"nofollow\",children:\"kernel's Object Manager\"}),\" executes this code before it completes any request to create or duplicate a handle to a process or thread.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image30.png\",alt:\"Rootkit registering process and thread precallbacks\",title:\"Rootkit registering process and thread precallbacks\",width:\"1077\",height:\"326\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"When a process tries to get a handle on another process, the callback function \",(0,i.jsx)(e.code,{children:\"ProcessPreCallback\"}),\" is called. It will first check if the destination process is a protected process (in the list). If it is the case, instead of not granting access, it will simply downgrade its rights over the protected process with the access set to \",(0,i.jsx)(e.code,{children:\"SYNCHRONIZE | PROCESS_QUERY_LIMITED_INFORMATION\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:\"This will ensure that processes cannot interact with/inspect, or kill the protected process.\"}),`\n`,(0,i.jsx)(e.p,{children:\"The same mechanism applies to threads.\"}),`\n`,(0,i.jsx)(e.h4,{id:\"process-creation-callbackpssetcreateprocessnotifyroutineex\",children:\"Process Creation Callback(PsSetCreateProcessNotifyRoutineEx)\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The rootkit registers a callback with the \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-pssetcreateprocessnotifyroutineex\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"PsSetCreateProcessNotifyRoutineEx\"})}),\" API on process creation. When a new process is launched, this callback runs a function \",(0,i.jsx)(e.code,{children:\"CheckProcessFlags\"}),\" that checks the process\\u2019s image against the configured list of image paths. It then creates an entry for this new process in its internal tracking table, setting its \",(0,i.jsx)(e.code,{children:\"excluded\"}),\", \",(0,i.jsx)(e.code,{children:\"protected\"}),\", and \",(0,i.jsx)(e.code,{children:\"hidden\"}),\" flags accordingly.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"Behavior based on flags:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Excluded\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"The rootkit will ignore the process and just let it run as expected.\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Protected\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"The rootkit will not allow any other process to get a privileged handle on it, similar to what happens in \",(0,i.jsx)(e.code,{children:\"ProcessPreCallback\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Hidden\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"The rootkit will hide the process by Direct Kernel Object Manipulation (DKOM). Directly manipulating a process's kernel structures at the very instant of its creation can be unstable. In the process creation callback, if a process needs to be hidden, it is unlinked from the ActiveProcessLinks list. However, it sets a \",(0,i.jsx)(e.code,{children:\"postponeHiding\"}),\" flag that will be explained below.\"]}),`\n`]}),`\n`]}),`\n`]}),`\n`,(0,i.jsx)(e.h4,{id:\"the-image-load-callback-pssetloadimagenotifyroutine\",children:\"The Image Load callback (PsSetLoadImageNotifyRoutine)\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"This registers the \",(0,i.jsx)(e.code,{children:\"LoadProcessImageNotifyCallback\"}),\" using \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/nf-ntddk-pssetloadimagenotifyroutine\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"PsSetLoadImageNotifyRoutine\"})}),\", which the kernel calls whenever an executable image (a \",(0,i.jsx)(e.code,{children:\".exe\"}),\" or \",(0,i.jsx)(e.code,{children:\".dll\"}),\") is loaded into a process's memory.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"When the image is loaded, the callback checks the \",(0,i.jsx)(e.code,{children:\"postponeHiding\"}),\" flag; if set, it calls \",(0,i.jsx)(e.code,{children:\"UnlinkProcessFromCidTable\"}),\" to remove it from the master process ID table (\",(0,i.jsx)(e.code,{children:\"PspCidTable\"}),\").\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"initializefsminifilter\",children:\"InitializeFSMiniFilter\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The function defines its capabilities in the \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/fltkernel/ns-fltkernel-_flt_registration\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"FilterRegistration structure(FLT_REGISTRATION)\"})}),\". This structure tells the operating system which functions to call for which types of file system operations. It registers callbacks for the following requests:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/previous-versions/windows/drivers/ifs/irp-mj-create\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"IRP_MJ_CREATE\"})}),\": Intercepts any attempt to open or create a file or directory.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/previous-versions/windows/drivers/ifs/irp-mj-directory-control\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"IRP_MJ_DIRECTORY_CONTROL\"})}),\": Intercepts any attempt to list the contents of a directory.\"]}),`\n`]}),`\n`,(0,i.jsx)(e.h4,{id:\"fltcreatepreoperationirp_mj_create\",children:\"FltCreatePreOperation(IRP_MJ_CREATE)\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"This is a pre-operation callback, when a process tries to create/open a file, this function is triggered. It will check the path against its list of files to be hidden. If a match is found, it will change the operation result of the IRP request to \",(0,i.jsx)(e.code,{children:\"STATUS_NO_SUCH_FILE\"}),\", indicating to the requesting process that the file does not exist, except if the process is included in the excluded list.\"]}),`\n`,(0,i.jsx)(e.h4,{id:\"fltdirctrlpostoperationirp_mj_directory_control\",children:\"FltDirCtrlPostOperation(IRP_MJ_DIRECTORY_CONTROL)\"}),`\n`,(0,i.jsx)(e.p,{children:\"This is a post-operation callback; the implemented hook essentially intercepts the directory listening generated by the system and modifies it by removing any files listed as hidden.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"initializeregistryfilter\",children:\"InitializeRegistryFilter\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"After concealing its processes and files, the rootkit's next step is to erase entries from the Windows Registry. The \",(0,i.jsx)(e.code,{children:\"InitializeRegistryFilter\"}),\" function accomplishes this by installing a registry filtering callback to intercept and modify registry operations.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"It registers a callback using the \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-cmregistercallbackex\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"CmRegisterCallbackEx\"})}),\" API, using the same principle as with files. If the registry key or value is in the hidden registry list, the callback function will return the status \",(0,i.jsx)(e.code,{children:\"STATUS_NOT_FOUND\"}),\".\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"initializedevice\",children:\"InitializeDevice\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The \",(0,i.jsx)(e.code,{children:\"InitializeDevice\"}),\" function does the driver initialization needed, and it sets up an \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/devio/device-input-and-output-control-ioctl-\",rel:\"nofollow\",children:(0,i.jsx)(e.code,{children:\"IOCTL communication\"})}),\" so that the userland application can communicate with it directly\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The following is a table describing each IOCTL command handled by the driver.\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"IOCTL command\"}),(0,i.jsx)(e.th,{children:\"Description\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"HID_IOCTL_SET_DRIVER_STATE\"})}),(0,i.jsx)(e.td,{children:\"Soft enable/disable the rootkit functionalities by setting a global state flag that acts as a master on/off switch.\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"HID_IOCTL_GET_DRIVER_STATE\"})}),(0,i.jsx)(e.td,{children:\"Retrieve the current state of the rootkit (enabled/disabled).\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"HID_IOCTL_ADD_HIDDEN_OBJECT\"})}),(0,i.jsx)(e.td,{children:\"Adds a new rule to hide a specific file, directory, registry key, or value.\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"HID_IOCTL_REMOVE_HIDDEN_OBJECT\"})}),(0,i.jsx)(e.td,{children:\"Removes a single hiding rule by its unique ID.\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"HID_IOCTL_REMOVE_ALL_HIDDEN_OBJECTS\"})}),(0,i.jsx)(e.td,{children:\"Remove all hidden objects for a specific object type(registry keys/values, files, directories).\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"HID_IOCTL_ADD_OBJECT\"})}),(0,i.jsx)(e.td,{children:\"Adds a new rule to automatically hide, protect, or exclude a process based on its image path.\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"HID_IOCTL_GET_OBJECT_STATE\"})}),(0,i.jsx)(e.td,{children:\"Queries the current state (hidden, protected, or excluded) of a specific running process by its PID.\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"HID_IOCTL_SET_OBJECT_STATE\"})}),(0,i.jsx)(e.td,{children:\"This command modifies the state (hidden, protected, or excluded) of a specific running process, identified by its PID.\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"HID_IOCTL_REMOVE_OBJECT\"})}),(0,i.jsx)(e.td,{children:\"Removes a single process rule (hide, protect, or exclude) by its unique ID.\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"HID_IOCTL_REMOVE_ALL_OBJECTS\"})}),(0,i.jsx)(e.td,{children:\"This command clears all process states and image rules of a specific type.\"})]})]})]})}),`\n`,(0,i.jsx)(e.h3,{id:\"initializestealthmode\",children:\"InitializeStealthMode\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"After successfully setting up its configuration, process callbacks, and file system filters, the rootkit executes its final initialization routine: \",(0,i.jsx)(e.code,{children:\"InitializeStealthMode\"}),\". If the configuration flag \",(0,i.jsx)(e.code,{children:\"Kbj_YinshenMode\"}),\" is enabled, it will hide every artifact associated with the rootkit, including registry keys, the \",(0,i.jsx)(e.code,{children:\".sys\"}),\" file, and other related components, using the same techniques described above.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"code-variations\",children:\"Code Variations\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"While the malware is heavily based on the \",(0,i.jsx)(e.code,{children:\"HIDDENDRIVER\"}),\" source code, our analysis identified several minor alterations. The following section breaks down the notable code differences we observed.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The original code in the \",(0,i.jsx)(e.code,{children:\"IsProcessExcluded\"}),\" function consistently excludes the system process (PID 4) from the rootkit's operations. However, the malicious rootkit has an exclusion list for additional process names, as illustrated in the provided screenshot.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image20.png\",alt:\"Difference between \\u201CHidden\\u201D and the rootkit function IsProcessExcluded\",title:\"Difference between \\u201CHidden\\u201D and the rootkit function IsProcessExcluded\",width:\"1967\",height:\"916\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The original code's callback for filtering system information (including files, directories, and registries) used the \",(0,i.jsx)(e.code,{children:\"IsDriverEnabled\"}),\" function to verify if the driver functionalities were enabled. However, the observed rootkit introduced an additional, automatic whitelist check for processes with the image name hijack, which corresponds to the userland application.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image28.png\",alt:\"\\u201CHidden\\u201D source code: FltDirCtrlPostOperation callback\",title:\"\\u201CHidden\\u201D source code: FltDirCtrlPostOperation callback\",width:\"1364\",height:\"578\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image11.png\",alt:\"\\u201CHidden\\u201D source code: PsGetProcessImageFileName usage\",title:\"\\u201CHidden\\u201D source code: PsGetProcessImageFileName usage\",width:\"846\",height:\"261\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"rmm-usage\",children:\"RMM usage\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The GotoHTTP tool is a legitimate Remote Monitoring and Management (RMM) application, deployed by the threat actor to maintain easier access to the compromised IIS server. Its \\u201CBrowser-to-Client\\u201D architecture allows the attacker to control the server from any standard web browser over common web ports (\",(0,i.jsx)(e.code,{children:\"80\"}),\"/\",(0,i.jsx)(e.code,{children:\"443\"}),\") by routing all traffic through GotoHTTP\\u2019s own platform, preventing direct network connection to the attacker\\u2019s own infrastructure.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image25.png\",alt:\"gotohttp[.]com landing page\",title:\"gotohttp[.]com landing page\",width:\"1353\",height:\"619\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"RMMs continue to \",(0,i.jsx)(e.a,{href:\"https://www.proofpoint.com/us/blog/threat-insight/remote-monitoring-and-management-rmm-tooling-increasingly-attackers-first-choice\",rel:\"nofollow\",children:\"increase in popularity\"}),\" for use at multiple points of the cyber kill chain and by various threat actors. Most anti-malware vendors do not consider them malicious in isolation and therefore do not block them outright. RMM C2 also only flows to legitimate RMM provider websites, and therefore has the same dynamics for network-based protections and monitoring.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Blocking the \",(0,i.jsx)(e.a,{href:\"https://github.com/magicsword-io/LOLRMM/tree/main/detections/sigma\",rel:\"nofollow\",children:\"mass of currently active RMMs\"}),\" and allowing only the enterprise's preferred RMM would be the optimal protection mechanism. However, this paradigm is only available to enterprises with the right technical knowledge, defensive tooling, mature organizational policies, and coordination across departments.\"]}),`\n`,(0,i.jsx)(e.h2,{id:\"iis-module-analysis\",children:\"IIS module analysis\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The threat actor was observed deploying both 32-bit and 64-bit versions of TOLLBOOTH, a malicious IIS module. TOLLBOOTH has been previously discussed by \",(0,i.jsx)(e.a,{href:\"https://asec.ahnlab.com/en/87804/\",rel:\"nofollow\",children:\"Ahnlab\"}),\" and the security researcher, \",(0,i.jsx)(e.a,{href:\"https://x.com/AzakaSekai_/status/1969294757978652947\",rel:\"nofollow\",children:\"@Azaka\"}),\". Some of the malware\\u2019s key capabilities include SEO cloaking, a management channel, and a publicly accessible webshell. We discovered both native and .NET managed versions being deployed in the wild.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"malware-config-structure\",children:\"Malware Config Structure\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"TOLLBOOTH retrieves its configuration dynamically from \",(0,i.jsx)(e.code,{children:\"hxxps://c[.]cseo99[.]com/config/\u003cvictim_HTTP_host_value\u003e.json,\"}),\" and the creation of each victim\\u2019s JSON config file is handled by the threat actor\\u2019s infrastructure. However, \",(0,i.jsx)(e.code,{children:\"hxxps://c[.]cseo99[.]com/config/127.0.0.1.json\"}),\" responded, showing a lack of anti-analysis checks - allowing us to retrieve a copy of a config file for analysis. It can be viewed in this \",(0,i.jsx)(e.a,{href:\"https://gist.github.com/jiayuchann/b785e1f3960fa26923d821b7e93e2e94\",rel:\"nofollow\",children:\"GitHub Gist\"}),\", and we will reference how some of the fields are used as appropriate.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"For native modules, the config and other temporary cache files are Gzip-compressed and stored locally at a hardcoded path \",(0,i.jsx)(e.code,{children:\"C:\\\\\\\\Windows\\\\\\\\Temp\\\\\\\\_FAB234CD3-09434-8898D-BFFC-4E23123DF2C\\\\\\\\\"}),\". For the managed module, these are AES-encrypted with key \",(0,i.jsx)(e.code,{children:\"YourSecretKey123\"}),\" and IV \",(0,i.jsx)(e.code,{children:\"0123456789ABCDEF\"}),\", Gzip-compressed, and stored at \",(0,i.jsx)(e.code,{children:\"C:\\\\\\\\Windows\\\\\\\\Temp\\\\\\\\AcpLogs\\\\\\\\\"}),\".\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"webshell\",children:\"Webshell\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"TOLLBOOTH exposes a webshell at the \",(0,i.jsx)(e.code,{children:\"/mywebdll\"}),\" path, requiring a password of \",(0,i.jsx)(e.code,{children:\"hack123456!\"}),\" for file uploads and execution of commands. Form submission sends a \",(0,i.jsx)(e.code,{children:\"POST\"}),\" request to the \",(0,i.jsx)(e.code,{children:\"/scjg\"}),\" endpoint.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image17.png\",alt:\"Webshell interface\",title:\"Webshell interface\",width:\"1999\",height:\"1020\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The password is hardcoded in the binary, and this webshell feature is present in both \",(0,i.jsx)(e.code,{children:\"v1.6.0\"}),\" and \",(0,i.jsx)(e.code,{children:\"v1.6.1\"}),\" of the native version of TOLLBOOTH.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The file upload functionality contains a bug that stems from its sequential, order-dependent parsing of \",(0,i.jsx)(e.code,{children:\"multipart/form-data\"}),\" fields. The standard HTML form is structured such that the file input field appears before the directory input fields. The server processing the request parts attempts to handle the file data before the destination directory, creating a dependency conflict that causes standard uploads to fail. By manually reordering the \",(0,i.jsx)(e.code,{children:\"multipart/form-data\"}),\" parts, a successful file upload can still be triggered.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image12.png\",alt:\"File upload PoC\",title:\"File upload PoC\",width:\"1619\",height:\"825\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"management-channel\",children:\"Management Channel\"}),`\n`,(0,i.jsx)(e.p,{children:\"TOLLBOOTH exposes a few additional endpoints for C2 operators\\u2019 management/debug purposes. They are only accessible by setting the User Agent to one of the following (though it is configurable):\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The \",(0,i.jsx)(e.code,{children:\"/health\"}),\" endpoint provides a quick way to assess the module\\u2019s health, returning the file name to access the config stored at \",(0,i.jsx)(e.code,{children:\"c[.]cseo99[.]com\"}),\", disk space information, the module's installation path, and the version of TOLLBOOTH.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image8.png\",alt:\"Health endpoint response\",title:\"Health endpoint response\",width:\"419\",height:\"295\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The \",(0,i.jsx)(e.code,{children:\"/debug\"}),\" endpoint provides more details, including a summary of the configuration, cache directory, HTTP request information, etc.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image31.png\",alt:\"/debug content\",title:\"/debug content\",width:\"1034\",height:\"836\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The parsed configuration is accessible at \",(0,i.jsx)(e.code,{children:\"/conf\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image24.png\",alt:\"/conf content\",title:\"/conf content\",width:\"1197\",height:\"319\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The \",(0,i.jsx)(e.code,{children:\"/clean\"}),\" endpoint allows the operator to clear the current configuration by deleting the config files stored locally (\",(0,i.jsx)(e.code,{children:\"clean?type=conf\"}),\") in order to update them on the victim server, clear any other temporary caches the malware uses (\",(0,i.jsx)(e.code,{children:\"clean?type=conf\"}),\"), or clear both - everything in the \",(0,i.jsx)(e.code,{children:\"C:\\\\\\\\Windows\\\\\\\\Temp\\\\\\\\_FAB234CD3-09434-8898D-BFFC-4E23123DF2C\\\\\\\\\"}),\" path (\",(0,i.jsx)(e.code,{children:\"clean?type=all\"}),\").\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"seo-cloaking\",children:\"SEO Cloaking\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The main goal of TOLLBOOTH is \",(0,i.jsx)(e.a,{href:\"https://support.google.com/adspolicy/answer/15938075?sjid=10977824559696952423-NC#Cloaking\",rel:\"nofollow\",children:\"SEO cloaking\"}),\", a process that involves presenting keyword-optimized content to search engine crawlers, while concealing it from casual user browsing, to achieve higher search rankings for the page. Once a human visitor clicks the link from the boosted search results, the malware redirects them to a malicious or fraudulent page. This tactic is an effective way to increase traffic to malicious pages compared to alternatives like direct phishing, because users trust search engine results they request more than unsolicited emails.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"TOLLBOOTH differentiates between bots and visitors by checking the User Agent and the Referer headers for values defined in the config.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Both the native and the managed modules are implemented almost identically. The only difference is that native modules \",(0,i.jsx)(e.code,{children:\"v1.6.0\"}),\" and \",(0,i.jsx)(e.code,{children:\"v1.6.1\"}),\" check both the User Agent and Referer against the \",(0,i.jsx)(e.code,{children:\"seoGroupRefererMatchRules\"}),\" list, and the .NET module \",(0,i.jsx)(e.code,{children:\"v1.6.1\"}),\" checks the User Agent against the \",(0,i.jsx)(e.code,{children:\"seoGroupUaMatchRules\"}),\" list and Referer against the \",(0,i.jsx)(e.code,{children:\"seoGroupRefererMatchRules\"}),\" list.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Based on the current configuration, the values for \",(0,i.jsx)(e.code,{children:\"seoGroupUaMatchRules\"}),\" and \",(0,i.jsx)(e.code,{children:\"seoGroupRefererMatchRules\"}),\" are \",(0,i.jsx)(e.code,{children:\"googlebot\"}),\" and \",(0,i.jsx)(e.code,{children:\"google\"}),\", respectively. A GoogleBot crawler would have a User Agent match and not a Referer match, whereas a human visitor would have a Referer match but not a User Agent match. Looking at the fallback list containing both \",(0,i.jsx)(e.code,{children:\"bing\"}),\" and \",(0,i.jsx)(e.code,{children:\"yahoo\"}),\" suggests that those search engines were targeted in the past as well.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image29.png\",alt:\"Functions and fallback lists for User Agent and Referer checks\",title:\"Functions and fallback lists for User Agent and Referer checks\",width:\"876\",height:\"169\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The code snippet below is responsible for building a page filled with keyword-stuffed links that search engine crawlers will see.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image23.png\",alt:\"Function for generating page that links to SEO content\",title:\"Function for generating page that links to SEO content\",width:\"1119\",height:\"739\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The module constructs a link farm in two phases. First, to build internal link density, it retrieves a list of random keywords from resource URIs defined in the \",(0,i.jsx)(e.code,{children:\"affLinkMainWordSeoResArr\"}),' configuration field. For each keyword, it generates a \"local link\" pointing to another SEO page on the same compromised website. Next, it builds the external network by retrieving \"affiliate link resources\" from the ',(0,i.jsx)(e.code,{children:\"affLinkSeoResArr\"}),\" field. These resources are a list of URIs pointing to SEO pages on other external domains that are also infected with TOLLBOOTH. The URIs look like \",(0,i.jsx)(e.code,{children:\"hxxps://f[.]fseo99[.]com/\u003cdate\u003e/\u003cmd5_file_hash\u003e\u003c.txt/.html\u003e\"}),\" in the configuration. The module then creates hyperlinks from the current site to these other victims. This technique, known as \",(0,i.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Link_farm\",rel:\"nofollow\",children:\"link farming\"}),\", is designed to artificially inflate search engine rankings across the entire network of compromised sites.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"Below is an example of what a crawler bot would see when visiting the landing page of a web server infected with TOLLBOOTH.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image4.png\",alt:\"Visiting the landing page with User Agent \\u201Cgoogle\\u201D\",title:\"Visiting the landing page with User Agent \\u201Cgoogle\\u201D\",width:\"1214\",height:\"446\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"URL path prefixes to the SEO pages contain words or phrases from the \",(0,i.jsx)(e.code,{children:\"seoGroupUrlMatchRules\"}),\" config field. This is also referenced in the site redirection logic targeting visitors. These are currently:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"stock\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"invest\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"summary\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"datamining\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"market-outlook\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"bullish-on\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"news-overview\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"news-volatility\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"video/\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"app/\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"blank/\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image32.png\",alt:\"Example local links\",title:\"Example local links\",width:\"1047\",height:\"418\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Templates and content for SEO pages are also externally retrieved from URIs that look like \",(0,i.jsx)(e.code,{children:\"hxxps://f[.]fseo99[.]com/\u003cdate\u003e/\u003cmd5_file_hash\u003e\u003c.txt/.html\u003e\"}),\" in the config. Here is an example of what one of the SEO pages looks like:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image5.png\",alt:\"Example SEO page\",title:\"Example SEO page\",width:\"1999\",height:\"1525\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"For the user redirection logic, the module first gathers a fingerprint of the visitor, including their IP address, user agent, referrer, and the SEO page\\u2019s target keyword. It then sends this information via a POST request to \",(0,i.jsx)(e.code,{children:\"hxxps://api[.]aseo99[.]com/client/landpage\"}),\". If the request is successful, the server responds with a JSON object containing a specific \",(0,i.jsx)(e.code,{children:\"landpageUrl\"}),\", which becomes the destination for the redirect.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image18.png\",alt:\"Requesting for page to redirect to\",title:\"Requesting for page to redirect to\",width:\"1197\",height:\"294\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"If the communication fails for any reason, TOLLBOOTH falls back to constructing a new URL pointing to the same C2 endpoint but instead encodes the visitor\\u2019s information directly into the URL as GET parameters. Finally, the chosen URL - either from the successful C2 response or the fallback - is embedded into a JavaScript snippet (\",(0,i.jsx)(e.code,{children:\"window.location.href\"}),\") and sent to the victim\\u2019s browser, forcing an immediate redirection.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image26.png\",alt:\"Fallback request for the page to redirect to\",title:\"Fallback request for the page to redirect to\",width:\"1225\",height:\"201\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"page-hijacker\",children:\"Page Hijacker\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"For the native modules, if the URI path contains \",(0,i.jsx)(e.code,{children:\"xlb\"}),\", TOLLBOOTH responds with a custom loader page containing a script tag. This script's src attribute points to a dynamically generated URL, \",(0,i.jsx)(e.code,{children:\"mlxya[.]oss-accelerate[.]aliyuncs[.]com/\u003c12_random_alphanumeric_characters\u003e\"}),\", which is used to retrieve an obfuscated next-stage JavaScript payload.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image27.png\",alt:\"Random characters appended to domain hosting JS payload\",title:\"Random characters appended to domain hosting JS payload\",width:\"500\",height:\"102\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The deobfuscated payload appears to be a page-replacement tool that executes based on specific trigger keywords (e.g., \",(0,i.jsx)(e.code,{children:\"xlbh\"}),\", \",(0,i.jsx)(e.code,{children:\"mxlb\"}),\") found in the URL. Once triggered, it contacts one of the attacker-controlled endpoints at \",(0,i.jsx)(e.code,{children:\"asf-sikkeiyjga[.]cn-shenzhen[.]fcapp[.]run/index/index?href=\"}),\" or \",(0,i.jsx)(e.code,{children:\"ask-bdtj-selohjszlw[.]cn-shenzhen[.]fcapp[.]run/index/index?key=\"}),\", appending the current page\\u2019s URL as a Base64-encoded parameter to identify the compromised site. The script then uses \",(0,i.jsx)(e.code,{children:\"document.write()\"}),\" to completely wipe the current page\\u2019s DOM and replace it with the server\\u2019s response. While the final payload could not be retrieved at the time of writing, this technique is designed to inject attacker-controlled content, most commonly a malicious HTML page or a JS redirect to another malicious site.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image19.png\",alt:\"Deobfuscated page hijacker payload\",title:\"Deobfuscated page hijacker payload\",width:\"709\",height:\"713\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"campaign-targeting\",children:\"Campaign targeting\"}),`\n`,(0,i.jsx)(e.p,{children:\"While conducting the analysis of TOLLBOOTH and its associated webshell, we identified multiple mechanisms to identify additional victims through active and semi-passive collection methods.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"We then partnered with \",(0,i.jsx)(e.a,{href:\"https://x.com/SreekarMad\",rel:\"nofollow\",children:\"@SreekarMad\"}),\" at \",(0,i.jsx)(e.a,{href:\"https://www.validin.com/\",rel:\"nofollow\",children:\"Validin\"}),\" to leverage his expertise and their scanning infrastructure in an effort to develop a more comprehensive list of victims.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"At the time of publication, 571 IIS server victims were identified with active TOLLBOOTH infections.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image2.png\",alt:\"Geographic distribution of victims serving TOLLBOOTH SEO cloaking\",title:\"Geographic distribution of victims serving TOLLBOOTH SEO cloaking\",width:\"1999\",height:\"967\"})}),`\n`,(0,i.jsx)(e.p,{children:\"These servers are globally distributed (with one major exception, described below), and do not fit into any neat industry vertical buckets. For these reasons, along with the sheer scale of the operation, we are led to believe that victim selection is untargeted and leverages automated scanning to identify IIS servers reusing publicly listed machine keys.\"}),`\n`,(0,i.jsx)(e.p,{children:\"The collaboration with Validin and Texas A\u0026M System Cybersecurity yielded a robust amount of metadata about the additional TOLLBOOTH-infected victims.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image21.png\",alt:\"Metadata collected from an additional victim\",title:\"Metadata collected from an additional victim\",width:\"864\",height:\"1012\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Automated exploitation may also be employed, but TAMUS Cybersecurity noted that the post-exploitation activity appeared to be interactive.\"}),`\n`,(0,i.jsx)(e.p,{children:\"Validin discovered other potentially infected domains linked through the SEO farming link configs, but when checked for the webshell interface, found it inaccessible on some. After conducting a deeper manual investigation into these servers, we determined that they had been, in fact, TOLLBOOTH-infected, but either the owners remediated the issue or the attackers backed themselves out.\"}),`\n`,(0,i.jsx)(e.p,{children:\"Subsequent scanning revealed that many of the same servers were reinfected. We have taken this to indicate that remediation was incomplete. One plausible explanation is that merely removing the threat does not close the vulnerability left open by the machine key reuse. So, victims who omit this final step are likely to be reinfected through the same mechanism. See the \\u201CRemediating REF3927\\u201D section below for additional details.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"geography\",children:\"Geography\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The geographic distribution of victims notably excludes any servers within China\\u2019s borders. One server was identified in Hong Kong, but it was hosting a \",(0,i.jsx)(e.code,{children:\".co.uk\"}),\" domain. This probable geofencing aligns with behavioral patterns from other criminal threats, where they implement mechanisms to ensure they do not target systems in their home countries. This mitigates their risk of prosecution as the governments of these countries tend to turn a blind eye toward, if not outright endorse, criminal activity targeting foreigners.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"diamond-model\",children:\"Diamond model\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic Security Labs utilizes the \",(0,i.jsx)(e.a,{href:\"https://www.activeresponse.org/wp-content/uploads/2013/07/diamond.pdf\",rel:\"nofollow\",children:\"Diamond Model\"}),\" to describe high-level relationships between adversaries, capabilities, infrastructure, and victims of intrusions. While the Diamond Model is most commonly used with single intrusions and leverages Activity Threading (section 8) to create relationships between incidents, an adversary-centered (section 7.1.4) approach allows for a single diamond.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/tollbooth/image22.png\",alt:\"REF3927 Diamond Model\",title:\"REF3927 Diamond Model\",width:\"3308\",height:\"1870\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"remediating-ref3927\",children:\"Remediating REF3927\"}),`\n`,(0,i.jsx)(e.p,{children:\"Remediation of the infection itself can be completed through industry best practices, such as reverting to a clean state and addressing malware and persistence mechanisms. However, in the face of potential automated scanning and exploitation, the vulnerability of the reused machine key remains for whichever bad actor wants to take over the server.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Therefore, remediation must include rotation of machine keys to a new, \",(0,i.jsx)(e.a,{href:\"https://support.winhost.com/kb/a1623/how-to-generate-a-machine-key-in-iis-manager.aspx\",rel:\"nofollow\",children:\"properly generated\"}),\" key.\"]}),`\n`,(0,i.jsx)(e.h2,{id:\"conclusion\",children:\"Conclusion\"}),`\n`,(0,i.jsx)(e.p,{children:\"The REF3927 campaign highlights how a simple configuration error, such as using a publicly exposed machine key, can lead to significant compromise. In this event, Texas A\u0026M University System Cybersecurity and the affected customer took swift action to remediate the server, but based on our research, there continue to be other victims targeted using the same techniques.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The threat actor\\u2019s integration of open-source tooling, RMM software, and a malicious driver is an effective combination of techniques that have proven successful in their operations. Administrators of publicly exposed IIS environments should audit their machine key configurations, ensure robust security logging, and leverage endpoint detection solutions such as \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/security/endpoint-security\",rel:\"nofollow\",children:\"Elastic Defend\"}),\" during potential incidents.\"]}),`\n`,(0,i.jsx)(e.h2,{id:\"detection-logic\",children:\"Detection logic\"}),`\n`,(0,i.jsx)(e.h3,{id:\"detection-rules\",children:\"Detection rules\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/blob/main/rules/windows/persistence_webshell_detection.toml\",rel:\"nofollow\",children:\"Web Shell Detection: Script Process Child of Common Web Processes\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"prevention-rules\",children:\"Prevention rules\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/privilege_escalation_suspicious_execution_via_windows_services.toml\",rel:\"nofollow\",children:\"Suspicious Execution via Windows Services\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/defense_evasion_potential_shellcode_injection_via_a_webshell.toml\",rel:\"nofollow\",children:\"Potential Shellcode Injection via a WebShell\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/defense_evasion_execution_from_suspicious_directory.toml\",rel:\"nofollow\",children:\"Execution from Suspicious Directory\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h4,{id:\"yara-signatures\",children:\"YARA signatures\"}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic Security has created the following YARA rules to prevent the malware observed in REF3927:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Tollbooth.yar\",rel:\"nofollow\",children:\"Windows.Trojan.Tollbooth\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_HiddenCli.yar\",rel:\"nofollow\",children:\"Windows.Trojan.HiddenCli\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_HiddenDriver.yar\",rel:\"nofollow\",children:\"Windows.Trojan.HiddenDriver\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"ref3927-through-mitre-attck\",children:\"REF3927 through MITRE ATT\u0026CK\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic uses the \",(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/\",rel:\"nofollow\",children:\"MITRE ATT\u0026CK\"}),\" framework to document common tactics, techniques, and procedures that threats use against enterprise networks.\"]}),`\n`,(0,i.jsx)(e.h3,{id:\"tactics\",children:\"Tactics\"}),`\n`,(0,i.jsx)(e.p,{children:\"Tactics represent the why of a technique or sub-technique. It is the adversary\\u2019s tactical goal: the reason for performing an action.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0001/\",rel:\"nofollow\",children:\"Initial Access\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0002/\",rel:\"nofollow\",children:\"Execution\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0005/\",rel:\"nofollow\",children:\"Defense Evasion\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0006/\",rel:\"nofollow\",children:\"Credential Access\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0009/\",rel:\"nofollow\",children:\"Collection\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0010\",rel:\"nofollow\",children:\"Exfiltration\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"techniques\",children:\"Techniques\"}),`\n`,(0,i.jsx)(e.p,{children:\"Techniques represent how an adversary achieves a tactical goal by performing an action.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1190/\",rel:\"nofollow\",children:\"Exploit Public-Facing Application\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1505/004/\",rel:\"nofollow\",children:\"Server Software Component: IIS Components\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1003/\",rel:\"nofollow\",children:\"OS Credential Dumping\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1564/001/\",rel:\"nofollow\",children:\"Hide Artifacts: Hidden Files and Directories\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1005/\",rel:\"nofollow\",children:\"Data from Local System\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1014/\",rel:\"nofollow\",children:\"Rootkit\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1078/\",rel:\"nofollow\",children:\"Valid Accounts\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"observations\",children:\"Observations\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The following \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/indicators/tollbooth\",rel:\"nofollow\",children:\"observables\"}),\" were discussed in this research.\"]}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Observable\"}),(0,i.jsx)(e.th,{children:\"Type\"}),(0,i.jsx)(e.th,{children:\"Name\"}),(0,i.jsx)(e.th,{children:\"Reference\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"913431f1d36ee843886bb052bfc89c0e5db903c673b5e6894c49aabc19f1e2fc\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"WingtbCLI.exe\"})}),(0,i.jsx)(e.td,{children:\"HIDDENCLI\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"f9dd0b57a5c133ca0c4cab3cca1ac8debdc4a798b452167a1e5af78653af00c1\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"Winkbj.sys\"})}),(0,i.jsx)(e.td,{children:\"HIDDENDRIVER\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"c1ca053e3c346513bac332b5740848ed9c496895201abc734f2de131ec1b9fb2\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"caches.dll\"})}),(0,i.jsx)(e.td,{children:\"TOLLBOOTH\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"c348996e27fc14e3dce8a2a476d22e52c6b97bf24dd9ed165890caf88154edd2\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"scripts.dll\"})}),(0,i.jsx)(e.td,{children:\"TOLLBOOTH\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"82b7f077021df9dc2cf1db802ed48e0dec8f6fa39a34e3f2ade2f0b63a1b5788\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"scripts.dll\"})}),(0,i.jsx)(e.td,{children:\"TOLLBOOTH\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"bd2de6ca6c561cec1c1c525e7853f6f73bf6f2406198cd104ecb2ad00859f7d3\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"caches.dll\"})}),(0,i.jsx)(e.td,{children:\"TOLLBOOTH\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"915441b7d7ddb7d885ecfe75b11eed512079b49875fc288cd65b023ce1e05964\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"CustomIISModule.dll\"})}),(0,i.jsx)(e.td,{children:\"TOLLBOOTH\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"c[.]cseo99[.]com\"})}),(0,i.jsx)(e.td,{children:\"domain-name\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"TOLLBOOTH config server\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"f[.]fseo99[.]com\"})}),(0,i.jsx)(e.td,{children:\"domain-name\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"TOLLBOOTH SEO farming config server\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"api[.]aseo99[.]com\"})}),(0,i.jsx)(e.td,{children:\"domain-name\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"TOLLBOOTH crawler reporting \u0026 page redirector API\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"mlxya[.]oss-accelerate.aliyuncs[.]com\"})}),(0,i.jsx)(e.td,{children:\"domain-name\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"TOLLBOOTH page hijacker payload hosting server\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"asf-sikkeiyjga[.]cn-shenzhen[.]fcapp.run\"})}),(0,i.jsx)(e.td,{children:\"domain-name\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"TOLLBOOTH page hijacker content-fetching server\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"ask-bdtj-selohjszlw[.]cn-shenzhen[.]fcapp[.]run\"})}),(0,i.jsx)(e.td,{children:\"domain-name\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"TOLLBOOTH page hijacker content-fetching server\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"bae5a7722814948fbba197e9b0f8ec5a6fe8328c7078c3adcca0022a533a84fe\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"1.aspx\"})}),(0,i.jsx)(e.td,{children:\"Godzilla-forked webshell (Similar sample from VirusTotal)\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"230b84398e873938bbcc7e4a1a358bde4345385d58eb45c1726cee22028026e9\"})}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"GotoHTTP.exe\"})}),(0,i.jsx)(e.td,{children:\"GotoHTTP\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.13) Gecko/20101213 Opera/9.80 (Windows NT 6.1; U; zh-tw) Presto/2.7.62 Version/11.01 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36\"})}),(0,i.jsx)(e.td,{children:\"User-Agent\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"User-Agent observed during exploitation via IIS ViewState injection\"})]})]})]})}),`\n`,(0,i.jsx)(e.h2,{id:\"references\",children:\"References\"}),`\n`,(0,i.jsx)(e.p,{children:\"The following were referenced throughout the above research:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://www.microsoft.com/en-us/security/blog/2025/02/06/code-injection-attacks-using-publicly-disclosed-asp-net-machine-keys/\",rel:\"nofollow\",children:\"https://www.microsoft.com/en-us/security/blog/2025/02/06/code-injection-attacks-using-publicly-disclosed-asp-net-machine-keys/\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://asec.ahnlab.com/en/87804/\",rel:\"nofollow\",children:\"https://asec.ahnlab.com/en/87804/\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://unit42.paloaltonetworks.com/initial-access-broker-exploits-leaked-machine-keys/\",rel:\"nofollow\",children:\"https://unit42.paloaltonetworks.com/initial-access-broker-exploits-leaked-machine-keys/\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://blog.blacklanternsecurity.com/p/aspnet-cryptography-for-pentesters\",rel:\"nofollow\",children:\"https://blog.blacklanternsecurity.com/p/aspnet-cryptography-for-pentesters\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/ekkoo-z/Z-Godzilla_ekp\",rel:\"nofollow\",children:\"https://github.com/ekkoo-z/Z-Godzilla_ekp\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://x.com/AzakaSekai_/status/1969294757978652947\",rel:\"nofollow\",children:\"https://x.com/AzakaSekai_/status/1969294757978652947\"})}),`\n`]})]})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(d,{...t})}):d(t)}return k(T);})();\n;return Component;"},"_id":"articles/tollbooth.mdx","_raw":{"sourceFilePath":"articles/tollbooth.mdx","sourceFileName":"tollbooth.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/tollbooth"},"type":"Article","imageUrl":"/assets/images/tollbooth/tollbooth.png","readingTime":"53 min read","series":"","url":"/tollbooth","headings":[{"level":2,"title":"Introduction","href":"#introduction"},{"level":3,"title":"Key takeaways","href":"#key-takeaways"},{"level":2,"title":"Campaign Overview","href":"#campaign-overview"},{"level":3,"title":"Attack vector","href":"#attack-vector"},{"level":3,"title":"Post-compromise activity","href":"#post-compromise-activity"},{"level":2,"title":"Godzilla EKP analysis","href":"#godzilla-ekp-analysis"},{"level":2,"title":"Rootkit analysis","href":"#rootkit-analysis"},{"level":3,"title":"InitializeConfigs","href":"#initializeconfigs"},{"level":3,"title":"InitializeKernelAnalyzer","href":"#initializekernelanalyzer"},{"level":4,"title":"LookForPspCidTable","href":"#lookforpspcidtable"},{"level":4,"title":"LookForActiveProcessLinks","href":"#lookforactiveprocesslinks"},{"level":3,"title":"InitializePsMonitor","href":"#initializepsmonitor"},{"level":4,"title":"Registering object manager callback with (ObRegisterCallbacks)","href":"#registering-object-manager-callback-with-obregistercallbacks"},{"level":4,"title":"Process Creation Callback(PsSetCreateProcessNotifyRoutineEx)","href":"#process-creation-callbackpssetcreateprocessnotifyroutineex"},{"level":4,"title":"The Image Load callback (PsSetLoadImageNotifyRoutine)","href":"#the-image-load-callback-pssetloadimagenotifyroutine"},{"level":3,"title":"InitializeFSMiniFilter","href":"#initializefsminifilter"},{"level":4,"title":"FltCreatePreOperation(IRP_MJ_CREATE)","href":"#fltcreatepreoperationirp_mj_create"},{"level":4,"title":"FltDirCtrlPostOperation(IRP_MJ_DIRECTORY_CONTROL)","href":"#fltdirctrlpostoperationirp_mj_directory_control"},{"level":3,"title":"InitializeRegistryFilter","href":"#initializeregistryfilter"},{"level":3,"title":"InitializeDevice","href":"#initializedevice"},{"level":3,"title":"InitializeStealthMode","href":"#initializestealthmode"},{"level":3,"title":"Code Variations","href":"#code-variations"},{"level":2,"title":"RMM usage","href":"#rmm-usage"},{"level":2,"title":"IIS module analysis","href":"#iis-module-analysis"},{"level":3,"title":"Malware Config Structure","href":"#malware-config-structure"},{"level":3,"title":"Webshell","href":"#webshell"},{"level":3,"title":"Management Channel","href":"#management-channel"},{"level":3,"title":"SEO Cloaking","href":"#seo-cloaking"},{"level":3,"title":"Page Hijacker","href":"#page-hijacker"},{"level":2,"title":"Campaign targeting","href":"#campaign-targeting"},{"level":3,"title":"Geography","href":"#geography"},{"level":3,"title":"Diamond model","href":"#diamond-model"},{"level":2,"title":"Remediating REF3927","href":"#remediating-ref3927"},{"level":2,"title":"Conclusion","href":"#conclusion"},{"level":2,"title":"Detection logic","href":"#detection-logic"},{"level":3,"title":"Detection rules","href":"#detection-rules"},{"level":3,"title":"Prevention rules","href":"#prevention-rules"},{"level":4,"title":"YARA signatures","href":"#yara-signatures"},{"level":2,"title":"REF3927 through MITRE ATT\u0026CK","href":"#ref3927-through-mitre-attck"},{"level":3,"title":"Tactics","href":"#tactics"},{"level":3,"title":"Techniques","href":"#techniques"},{"level":2,"title":"Observations","href":"#observations"},{"level":2,"title":"References","href":"#references"}],"author":[{"title":"Daniel Stepanic","slug":"daniel-stepanic","description":"Elastic Security Labs Team Principal Security Researcher, Malware","body":{"raw":"","code":"var Component=(()=\u003e{var p=Object.create;var i=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var M=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},o=(t,e,n,c)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of d(e))!_.call(t,a)\u0026\u0026a!==n\u0026\u0026i(t,a,{get:()=\u003ee[a],enumerable:!(c=x(e,a))||c.enumerable});return t};var j=(t,e,n)=\u003e(n=t!=null?p(f(t)):{},o(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),y=t=\u003eo(i({},\"__esModule\",{value:!0}),t);var u=M((w,s)=\u003e{s.exports=_jsx_runtime});var S={};g(S,{default:()=\u003em,frontmatter:()=\u003eD});var r=j(u()),D={title:\"Daniel Stepanic\",description:\"Elastic Security Labs Team Principal Security Researcher, Malware\",slug:\"daniel-stepanic\"};function l(t){return(0,r.jsx)(r.Fragment,{})}function m(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(l,{...t})}):l(t)}return y(S);})();\n;return Component;"},"_id":"authors/daniel-stepanic.mdx","_raw":{"sourceFilePath":"authors/daniel-stepanic.mdx","sourceFileName":"daniel-stepanic.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/daniel-stepanic"},"type":"Author","imageUrl":"","url":"/authors/daniel-stepanic"},{"title":"Jia Yu Chan","slug":"jia-yu-chan","description":"Elastic Security Labs Team Research Engineer, Malware","image":"jiayuchan.jpg","body":{"raw":"","code":"var Component=(()=\u003e{var g=Object.create;var i=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,h=Object.prototype.hasOwnProperty;var p=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),_=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},c=(t,e,n,o)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of l(e))!h.call(t,r)\u0026\u0026r!==n\u0026\u0026i(t,r,{get:()=\u003ee[r],enumerable:!(o=j(e,r))||o.enumerable});return t};var d=(t,e,n)=\u003e(n=t!=null?g(f(t)):{},c(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),y=t=\u003ec(i({},\"__esModule\",{value:!0}),t);var u=p((D,s)=\u003e{s.exports=_jsx_runtime});var C={};_(C,{default:()=\u003ex,frontmatter:()=\u003eM});var a=d(u()),M={title:\"Jia Yu Chan\",description:\"Elastic Security Labs Team Research Engineer, Malware\",slug:\"jia-yu-chan\",image:\"jiayuchan.jpg\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function x(t={}){let{wrapper:e}=t.components||{};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(m,{...t})}):m(t)}return y(C);})();\n;return Component;"},"_id":"authors/jia-yu-chan.mdx","_raw":{"sourceFilePath":"authors/jia-yu-chan.mdx","sourceFileName":"jia-yu-chan.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/jia-yu-chan"},"type":"Author","imageUrl":"/assets/images/authors/jiayuchan.jpg","url":"/authors/jia-yu-chan"},{"title":"Salim Bitam","slug":"salim-bitam","description":"Elastic Security Labs Team Senior Research Engineer, Malware","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var i=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var p=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),M=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,o)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of _(e))!g.call(t,a)\u0026\u0026a!==n\u0026\u0026i(t,a,{get:()=\u003ee[a],enumerable:!(o=f(e,a))||o.enumerable});return t};var j=(t,e,n)=\u003e(n=t!=null?x(d(t)):{},s(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),S=t=\u003es(i({},\"__esModule\",{value:!0}),t);var c=p((y,m)=\u003e{m.exports=_jsx_runtime});var h={};M(h,{default:()=\u003el,frontmatter:()=\u003eb});var r=j(c()),b={title:\"Salim Bitam\",description:\"Elastic Security Labs Team Senior Research Engineer, Malware\",slug:\"salim-bitam\"};function u(t){return(0,r.jsx)(r.Fragment,{})}function l(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(u,{...t})}):u(t)}return S(h);})();\n;return Component;"},"_id":"authors/salim-bitam.mdx","_raw":{"sourceFilePath":"authors/salim-bitam.mdx","sourceFileName":"salim-bitam.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/salim-bitam"},"type":"Author","imageUrl":"","url":"/authors/salim-bitam"},{"title":"Seth Goodwin","slug":"seth-goodwin","description":"Elastic Security Labs Team Senior Research Engineer, Intelligence","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var i=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var h=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),p=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of g(e))!_.call(t,o)\u0026\u0026o!==n\u0026\u0026i(t,o,{get:()=\u003ee[o],enumerable:!(a=d(e,o))||a.enumerable});return t};var j=(t,e,n)=\u003e(n=t!=null?x(f(t)):{},s(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),w=t=\u003es(i({},\"__esModule\",{value:!0}),t);var u=h((C,c)=\u003e{c.exports=_jsx_runtime});var S={};p(S,{default:()=\u003el,frontmatter:()=\u003eM});var r=j(u()),M={title:\"Seth Goodwin\",description:\"Elastic Security Labs Team Senior Research Engineer, Intelligence\",slug:\"seth-goodwin\"};function m(t){return(0,r.jsx)(r.Fragment,{})}function l(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(m,{...t})}):m(t)}return w(S);})();\n;return Component;"},"_id":"authors/seth-goodwin.mdx","_raw":{"sourceFilePath":"authors/seth-goodwin.mdx","sourceFileName":"seth-goodwin.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/seth-goodwin"},"type":"Author","imageUrl":"","url":"/authors/seth-goodwin"},{"title":"Andrew Pease","slug":"andrew-pease","description":"Elastic Security Labs Technical Lead","image":"andrew-pease.jpg","body":{"raw":"","code":"var Component=(()=\u003e{var p=Object.create;var o=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var _=(e,t)=\u003e()=\u003e(t||e((t={exports:{}}).exports,t),t.exports),j=(e,t)=\u003e{for(var n in t)o(e,n,{get:t[n],enumerable:!0})},c=(e,t,n,s)=\u003e{if(t\u0026\u0026typeof t==\"object\"||typeof t==\"function\")for(let a of l(t))!g.call(e,a)\u0026\u0026a!==n\u0026\u0026o(e,a,{get:()=\u003et[a],enumerable:!(s=x(t,a))||s.enumerable});return e};var w=(e,t,n)=\u003e(n=e!=null?p(f(e)):{},c(t||!e||!e.__esModule?o(n,\"default\",{value:e,enumerable:!0}):n,e)),L=e=\u003ec(o({},\"__esModule\",{value:!0}),e);var u=_((C,i)=\u003e{i.exports=_jsx_runtime});var h={};j(h,{default:()=\u003em,frontmatter:()=\u003eM});var r=w(u()),M={title:\"Andrew Pease\",description:\"Elastic Security Labs Technical Lead\",slug:\"andrew-pease\",image:\"andrew-pease.jpg\"};function d(e){return(0,r.jsx)(r.Fragment,{})}function m(e={}){let{wrapper:t}=e.components||{};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}return L(h);})();\n;return Component;"},"_id":"authors/andrew-pease.mdx","_raw":{"sourceFilePath":"authors/andrew-pease.mdx","sourceFileName":"andrew-pease.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/andrew-pease"},"type":"Author","imageUrl":"/assets/images/authors/andrew-pease.jpg","url":"/authors/andrew-pease"},{"title":"Braxton Williams","slug":"braxton-williams","description":"Texas A\u0026M University System (TAMUS) Cybersecurity Engineering Manager","image":"braxton-williams.png","body":{"raw":"","code":"var Component=(()=\u003e{var u=Object.create;var a=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var M=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var y=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),_=(t,n)=\u003e{for(var e in n)a(t,e,{get:n[e],enumerable:!0})},s=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let i of M(n))!p.call(t,i)\u0026\u0026i!==e\u0026\u0026a(t,i,{get:()=\u003en[i],enumerable:!(o=g(n,i))||o.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?u(f(t)):{},s(n||!t||!t.__esModule?a(e,\"default\",{value:t,enumerable:!0}):e,t)),b=t=\u003es(a({},\"__esModule\",{value:!0}),t);var x=y((A,m)=\u003e{m.exports=_jsx_runtime});var w={};_(w,{default:()=\u003ec,frontmatter:()=\u003ej});var r=d(x()),j={title:\"Braxton Williams\",description:\"Texas A\u0026M University System (TAMUS) Cybersecurity Engineering Manager\",slug:\"braxton-williams\",image:\"braxton-williams.png\"};function l(t){return(0,r.jsx)(r.Fragment,{})}function c(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,{...t,children:(0,r.jsx)(l,{...t})}):l(t)}return b(w);})();\n;return Component;"},"_id":"authors/braxton-williams.mdx","_raw":{"sourceFilePath":"authors/braxton-williams.mdx","sourceFileName":"braxton-williams.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/braxton-williams"},"type":"Author","imageUrl":"/assets/images/authors/braxton-williams.png","url":"/authors/braxton-williams"}],"category":[{"title":"Malware Analysis","slug":"malware-analysis","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var o=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var M=Object.getPrototypeOf,d=Object.prototype.hasOwnProperty;var g=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),j=(t,n)=\u003e{for(var e in n)o(t,e,{get:n[e],enumerable:!0})},i=(t,n,e,s)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let a of _(n))!d.call(t,a)\u0026\u0026a!==e\u0026\u0026o(t,a,{get:()=\u003en[a],enumerable:!(s=f(n,a))||s.enumerable});return t};var p=(t,n,e)=\u003e(e=t!=null?x(M(t)):{},i(n||!t||!t.__esModule?o(e,\"default\",{value:t,enumerable:!0}):e,t)),w=t=\u003ei(o({},\"__esModule\",{value:!0}),t);var m=g((F,l)=\u003e{l.exports=_jsx_runtime});var C={};j(C,{default:()=\u003ec,frontmatter:()=\u003ey});var r=p(m()),y={title:\"Malware Analysis\",slug:\"malware-analysis\"};function u(t){return(0,r.jsx)(r.Fragment,{})}function c(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,{...t,children:(0,r.jsx)(u,{...t})}):u(t)}return w(C);})();\n;return Component;"},"_id":"categories/malware-analysis.mdx","_raw":{"sourceFilePath":"categories/malware-analysis.mdx","sourceFileName":"malware-analysis.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/malware-analysis"},"type":"Category","url":"/categories/malware-analysis"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"tollbooth"},"buildId":"L3NzwTUZKAMTKPW1qO68g","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>